{"sha": "bba8710616e5e4722215c0d6b27abaedca03ebad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYTg3MTA2MTZlNWU0NzIyMjE1YzBkNmIyN2FiYWVkY2EwM2ViYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-09T13:38:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-09T13:38:17Z"}, "message": "Auto merge of #83596 - jyn514:session-dead-code, r=oli-obk\n\nRemove dead or useless code from Session\n\nThis is a more principled follow-up to https://github.com/rust-lang/rust/pull/83185#discussion_r601753839.\n\n- Rename `Parser::span_fatal_err` -> `Parser::span_err`\n- Remove some unnecessary uses of `struct_span_fatal`\n- Make `Diagnostic::span_fatal` unconditionally raise an error\n- Add `impl Deref<Target = Handler>` for Session and remove all functions that are exactly the same as their Handler counterparts\n- Note why `Handler::fatal` is different from `Sesssion::fatal`\n- Remove unused `opt_span_warn` function\n\nr? `@oli-obk` or `@estebank`", "tree": {"sha": "33bf7820b48760634f28b35711567ee7e7e32d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33bf7820b48760634f28b35711567ee7e7e32d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba8710616e5e4722215c0d6b27abaedca03ebad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba8710616e5e4722215c0d6b27abaedca03ebad", "html_url": "https://github.com/rust-lang/rust/commit/bba8710616e5e4722215c0d6b27abaedca03ebad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba8710616e5e4722215c0d6b27abaedca03ebad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19dae7b4539a58e4d2fe6429a77852665f399150", "url": "https://api.github.com/repos/rust-lang/rust/commits/19dae7b4539a58e4d2fe6429a77852665f399150", "html_url": "https://github.com/rust-lang/rust/commit/19dae7b4539a58e4d2fe6429a77852665f399150"}, {"sha": "f25aa5767f0bb1409c7c7b6c202f22d8bf48bbee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f25aa5767f0bb1409c7c7b6c202f22d8bf48bbee", "html_url": "https://github.com/rust-lang/rust/commit/f25aa5767f0bb1409c7c7b6c202f22d8bf48bbee"}], "stats": {"total": 107, "additions": 38, "deletions": 69}, "files": [{"sha": "ea0770daf0eed86232bc7dca6c1944fdcd6108b1", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -1236,9 +1236,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             (Some(..), Some(..), HalfOpen) => hir::LangItem::Range,\n             (None, Some(..), Closed) => hir::LangItem::RangeToInclusive,\n             (Some(..), Some(..), Closed) => unreachable!(),\n-            (_, None, Closed) => {\n-                self.diagnostic().span_fatal(span, \"inclusive range with no end\").raise()\n-            }\n+            (_, None, Closed) => self.diagnostic().span_fatal(span, \"inclusive range with no end\"),\n         };\n \n         let fields = self.arena.alloc_from_iter("}, {"sha": "dc1664bb2baa866f5ff53d8a2c0b8b7075bf56be", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -634,19 +634,19 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Note, msg)\n     }\n \n-    pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: &str) -> FatalError {\n+    pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: &str) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n-        FatalError\n+        FatalError.raise()\n     }\n \n     pub fn span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> FatalError {\n+    ) -> ! {\n         self.emit_diag_at_span(Diagnostic::new_with_code(Fatal, Some(code), msg), span);\n-        FatalError\n+        FatalError.raise()\n     }\n \n     pub fn span_err(&self, span: impl Into<MultiSpan>, msg: &str) {\n@@ -692,6 +692,7 @@ impl Handler {\n         db\n     }\n \n+    // NOTE: intentionally doesn't raise an error so rustc_codegen_ssa only reports fatal errors in the main thread\n     pub fn fatal(&self, msg: &str) -> FatalError {\n         self.inner.borrow_mut().fatal(msg)\n     }"}, {"sha": "1c2f9a9645fe0286401561f2b4ca08c0a5103a9c", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -148,15 +148,11 @@ impl<'a> StringReader<'a> {\n                         None => \"unterminated block comment\",\n                     };\n                     let last_bpos = self.pos;\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start, last_bpos),\n-                            msg,\n-                            error_code!(E0758),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start, last_bpos),\n+                        msg,\n+                        error_code!(E0758),\n+                    );\n                 }\n \n                 // Skip non-doc comments\n@@ -315,57 +311,41 @@ impl<'a> StringReader<'a> {\n         let (lit_kind, mode, prefix_len, postfix_len) = match kind {\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start, suffix_start),\n-                            \"unterminated character literal\",\n-                            error_code!(E0762),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start, suffix_start),\n+                        \"unterminated character literal\",\n+                        error_code!(E0762),\n+                    )\n                 }\n                 (token::Char, Mode::Char, 1, 1) // ' '\n             }\n             rustc_lexer::LiteralKind::Byte { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start + BytePos(1), suffix_start),\n-                            \"unterminated byte constant\",\n-                            error_code!(E0763),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start + BytePos(1), suffix_start),\n+                        \"unterminated byte constant\",\n+                        error_code!(E0763),\n+                    )\n                 }\n                 (token::Byte, Mode::Byte, 2, 1) // b' '\n             }\n             rustc_lexer::LiteralKind::Str { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start, suffix_start),\n-                            \"unterminated double quote string\",\n-                            error_code!(E0765),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start, suffix_start),\n+                        \"unterminated double quote string\",\n+                        error_code!(E0765),\n+                    )\n                 }\n                 (token::Str, Mode::Str, 1, 1) // \" \"\n             }\n             rustc_lexer::LiteralKind::ByteStr { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start + BytePos(1), suffix_start),\n-                            \"unterminated double quote byte string\",\n-                            error_code!(E0766),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start + BytePos(1), suffix_start),\n+                        \"unterminated double quote byte string\",\n+                        error_code!(E0766),\n+                    )\n                 }\n                 (token::ByteStr, Mode::ByteStr, 2, 1) // b\" \"\n             }"}, {"sha": "72fdc78c30cbc3a101a0f9b81e74beaed2123407", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -144,11 +144,7 @@ impl AttemptLocalParseRecovery {\n }\n \n impl<'a> Parser<'a> {\n-    pub(super) fn span_fatal_err<S: Into<MultiSpan>>(\n-        &self,\n-        sp: S,\n-        err: Error,\n-    ) -> DiagnosticBuilder<'a> {\n+    pub(super) fn span_err<S: Into<MultiSpan>>(&self, sp: S, err: Error) -> DiagnosticBuilder<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n "}, {"sha": "553ffda814fe995eeb091a21cfb78b29aa058011", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -1326,7 +1326,7 @@ impl<'a> Parser<'a> {\n             token::CloseDelim(token::Brace) => {}\n             token::DocComment(..) => {\n                 let previous_span = self.prev_token.span;\n-                let mut err = self.span_fatal_err(self.token.span, Error::UselessDocComment);\n+                let mut err = self.span_err(self.token.span, Error::UselessDocComment);\n                 self.bump(); // consume the doc comment\n                 let comma_after_doc_seen = self.eat(&token::Comma);\n                 // `seen_comma` is always false, because we are inside doc block"}, {"sha": "ec11f2d3add925b073600bd68517e8af96386c7f", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -525,7 +525,7 @@ impl<'a> Parser<'a> {\n     fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n         self.token.ident().ok_or_else(|| match self.prev_token.kind {\n             TokenKind::DocComment(..) => {\n-                self.span_fatal_err(self.prev_token.span, Error::UselessDocComment)\n+                self.span_err(self.prev_token.span, Error::UselessDocComment)\n             }\n             _ => self.expected_ident_found(),\n         })"}, {"sha": "b40eed8c5d118752a4b075b59fff080e3bced2ce", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -168,7 +168,7 @@ impl<'a> Parser<'a> {\n     fn error_outer_attrs(&self, attrs: &[Attribute]) {\n         if let [.., last] = attrs {\n             if last.is_doc_comment() {\n-                self.span_fatal_err(last.span, Error::UselessDocComment).emit();\n+                self.span_err(last.span, Error::UselessDocComment).emit();\n             } else if attrs.iter().any(|a| a.style == AttrStyle::Outer) {\n                 self.struct_span_err(last.span, \"expected statement after outer attribute\").emit();\n             }"}, {"sha": "a9e14754334c1b8e6f3b45414543e8d822d240ef", "filename": "compiler/rustc_session/src/cgu_reuse_tracker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -112,7 +112,7 @@ impl CguReuseTracker {\n                                        not recorded\",\n                         cgu_user_name, cgu_name\n                     );\n-                    diag.span_fatal(error_span.0, &msg).raise();\n+                    diag.span_fatal(error_span.0, &msg)\n                 }\n             }\n         }"}, {"sha": "acb2a1ae7efa9836660ed7a991db3d205d175814", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba8710616e5e4722215c0d6b27abaedca03ebad/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=bba8710616e5e4722215c0d6b27abaedca03ebad", "patch": "@@ -421,15 +421,15 @@ impl Session {\n     }\n \n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.diagnostic().span_fatal(sp, msg).raise()\n+        self.diagnostic().span_fatal(sp, msg)\n     }\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n     ) -> ! {\n-        self.diagnostic().span_fatal_with_code(sp, msg, code).raise()\n+        self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n     pub fn fatal(&self, msg: &str) -> ! {\n         self.diagnostic().fatal(msg).raise()\n@@ -492,12 +492,6 @@ impl Session {\n     pub fn warn(&self, msg: &str) {\n         self.diagnostic().warn(msg)\n     }\n-    pub fn opt_span_warn<S: Into<MultiSpan>>(&self, opt_sp: Option<S>, msg: &str) {\n-        match opt_sp {\n-            Some(sp) => self.span_warn(sp, msg),\n-            None => self.warn(msg),\n-        }\n-    }\n     /// Delay a span_bug() call until abort_if_errors()\n     #[track_caller]\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {"}]}