{"sha": "b68a03bded5380278ae162bacc79d926e41fd76c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OGEwM2JkZWQ1MzgwMjc4YWUxNjJiYWNjNzlkOTI2ZTQxZmQ3NmM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-07-02T22:27:36Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-07-27T18:38:32Z"}, "message": "Change doc comment to code comment", "tree": {"sha": "65d94c91a84bd9a892cd169e07ba3818e16c7110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d94c91a84bd9a892cd169e07ba3818e16c7110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b68a03bded5380278ae162bacc79d926e41fd76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b68a03bded5380278ae162bacc79d926e41fd76c", "html_url": "https://github.com/rust-lang/rust/commit/b68a03bded5380278ae162bacc79d926e41fd76c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b68a03bded5380278ae162bacc79d926e41fd76c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e70a63e615d399072c8b8c2054d8d61844240d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e70a63e615d399072c8b8c2054d8d61844240d6", "html_url": "https://github.com/rust-lang/rust/commit/7e70a63e615d399072c8b8c2054d8d61844240d6"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "39cb5d1b8c8e84cccd392d72d7c451ae80958f5f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b68a03bded5380278ae162bacc79d926e41fd76c", "patch": "@@ -458,10 +458,10 @@ impl<'tcx> RegionMaps {\n                                    -> CodeExtent {\n         if scope_a == scope_b { return scope_a; }\n \n-        /// [1] The initial values for `a_buf` and `b_buf` are not used.\n-        /// The `ancestors_of` function will return some prefix that\n-        /// is re-initialized with new values (or else fallback to a\n-        /// heap-allocated vector).\n+        // [1] The initial values for `a_buf` and `b_buf` are not used.\n+        // The `ancestors_of` function will return some prefix that\n+        // is re-initialized with new values (or else fallback to a\n+        // heap-allocated vector).\n         let mut a_buf: [CodeExtent; 32] = [scope_a /* [1] */; 32];\n         let mut a_vec: Vec<CodeExtent> = vec![];\n         let mut b_buf: [CodeExtent; 32] = [scope_b /* [1] */; 32];"}, {"sha": "cf5882bb9bdbd943cfc11fb9aa83e6b8abb572e3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68a03bded5380278ae162bacc79d926e41fd76c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b68a03bded5380278ae162bacc79d926e41fd76c", "patch": "@@ -89,23 +89,23 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                tcx.item_path_str(tcx.hir.local_def_id(item.id)));\n \n         match item.node {\n-            /// Right now we check that every default trait implementation\n-            /// has an implementation of itself. Basically, a case like:\n-            ///\n-            /// `impl Trait for T {}`\n-            ///\n-            /// has a requirement of `T: Trait` which was required for default\n-            /// method implementations. Although this could be improved now that\n-            /// there's a better infrastructure in place for this, it's being left\n-            /// for a follow-up work.\n-            ///\n-            /// Since there's such a requirement, we need to check *just* positive\n-            /// implementations, otherwise things like:\n-            ///\n-            /// impl !Send for T {}\n-            ///\n-            /// won't be allowed unless there's an *explicit* implementation of `Send`\n-            /// for `T`\n+            // Right now we check that every default trait implementation\n+            // has an implementation of itself. Basically, a case like:\n+            //\n+            // `impl Trait for T {}`\n+            //\n+            // has a requirement of `T: Trait` which was required for default\n+            // method implementations. Although this could be improved now that\n+            // there's a better infrastructure in place for this, it's being left\n+            // for a follow-up work.\n+            //\n+            // Since there's such a requirement, we need to check *just* positive\n+            // implementations, otherwise things like:\n+            //\n+            // impl !Send for T {}\n+            //\n+            // won't be allowed unless there's an *explicit* implementation of `Send`\n+            // for `T`\n             hir::ItemImpl(_, hir::ImplPolarity::Positive, _, _,\n                           ref trait_ref, ref self_ty, _) => {\n                 self.check_impl(item, self_ty, trait_ref);"}]}