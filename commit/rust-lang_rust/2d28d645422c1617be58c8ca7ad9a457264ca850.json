{"sha": "2d28d645422c1617be58c8ca7ad9a457264ca850", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMjhkNjQ1NDIyYzE2MTdiZTU4YzhjYTdhZDlhNDU3MjY0Y2E4NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-17T22:52:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-17T22:52:25Z"}, "message": "auto merge of #6569 : Kimundi/rust/ext-bytes, r=erickt\n\nAlso snug in some cosmetic changes in num.rs that aren't really important enough for an separate pr.", "tree": {"sha": "7893c3ba04e213e63b4165b2335f9b093dbad08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7893c3ba04e213e63b4165b2335f9b093dbad08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d28d645422c1617be58c8ca7ad9a457264ca850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d28d645422c1617be58c8ca7ad9a457264ca850", "html_url": "https://github.com/rust-lang/rust/commit/2d28d645422c1617be58c8ca7ad9a457264ca850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d28d645422c1617be58c8ca7ad9a457264ca850/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34c5051a5f42726d34dd09b7bf0ae120800a2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34c5051a5f42726d34dd09b7bf0ae120800a2d4", "html_url": "https://github.com/rust-lang/rust/commit/c34c5051a5f42726d34dd09b7bf0ae120800a2d4"}, {"sha": "7a2afb72884774f8e7865c625efc806fd09e693b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2afb72884774f8e7865c625efc806fd09e693b", "html_url": "https://github.com/rust-lang/rust/commit/7a2afb72884774f8e7865c625efc806fd09e693b"}], "stats": {"total": 169, "additions": 156, "deletions": 13}, "files": [{"sha": "96b302d317499ef77da41c23e9ce5eefdd77f0db", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -396,16 +396,15 @@ pub trait FromStrRadix {\n /// - If code written to use this function doesn't care about it, it's\n ///   probably assuming that `x^0` always equals `1`.\n ///\n-pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(\n-    radix: uint, pow: uint) -> T {\n+pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(radix: uint, pow: uint) -> T {\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n \n     if pow   == 0u { return _1; }\n     if radix == 0u { return _0; }\n     let mut my_pow     = pow;\n     let mut total      = _1;\n-    let mut multiplier = cast(radix as int);\n+    let mut multiplier = cast(radix);\n     while (my_pow > 0u) {\n         if my_pow % 2u == 1u {\n             total *= multiplier;\n@@ -422,13 +421,13 @@ pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),  cast(12));\n     assert_eq!(ten.sub(&two),  cast(8));\n     assert_eq!(ten.mul(&two),  cast(20));\n-    assert_eq!(ten.div(&two), cast(5));\n+    assert_eq!(ten.div(&two),  cast(5));\n     assert_eq!(ten.rem(&two),  cast(0));\n \n     assert_eq!(ten.add(&two),  ten + two);\n     assert_eq!(ten.sub(&two),  ten - two);\n     assert_eq!(ten.mul(&two),  ten * two);\n-    assert_eq!(ten.div(&two), ten / two);\n+    assert_eq!(ten.div(&two),  ten / two);\n     assert_eq!(ten.rem(&two),  ten % two);\n }\n "}, {"sha": "7c2f27ada3bce884c9e36f157039229c0333049a", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -16,13 +16,58 @@ use ext::base::*;\n use ext::base;\n use ext::build::{mk_u8, mk_slice_vec_e};\n \n-pub fn expand_syntax_ext(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n-    -> base::MacResult {\n-    let var = get_single_str_from_tts(cx, sp, tts, \"bytes!\");\n+pub fn expand_syntax_ext(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree]) -> base::MacResult {\n+    // Gather all argument expressions\n+    let exprs = get_exprs_from_tts(cx, tts);\n     let mut bytes = ~[];\n-    for var.each |byte| {\n-        bytes.push(mk_u8(cx, sp, byte));\n+\n+    for exprs.each |expr| {\n+        match expr.node {\n+            // expression is a literal\n+            ast::expr_lit(lit) => match lit.node {\n+                // string literal, push each byte to vector expression\n+                ast::lit_str(s) => {\n+                    for s.each |byte| {\n+                        bytes.push(mk_u8(cx, sp, byte));\n+                    }\n+                }\n+\n+                // u8 literal, push to vector expression\n+                ast::lit_uint(v, ast::ty_u8) => {\n+                    if v > 0xFF {\n+                        cx.span_err(sp, \"Too large u8 literal in bytes!\")\n+                    } else {\n+                        bytes.push(mk_u8(cx, sp, v as u8));\n+                    }\n+                }\n+\n+                // integer literal, push to vector expression\n+                ast::lit_int_unsuffixed(v) => {\n+                    if v > 0xFF {\n+                        cx.span_err(sp, \"Too large integer literal in bytes!\")\n+                    } else if v < 0 {\n+                        cx.span_err(sp, \"Negative integer literal in bytes!\")\n+                    } else {\n+                        bytes.push(mk_u8(cx, sp, v as u8));\n+                    }\n+                }\n+\n+                // char literal, push to vector expression\n+                ast::lit_int(v, ast::ty_char) => {\n+                    if (v as char).is_ascii() {\n+                        bytes.push(mk_u8(cx, sp, v as u8));\n+                    } else {\n+                        cx.span_err(sp, \"Non-ascii char literal in bytes!\")\n+                    }\n+                }\n+\n+                _ => cx.span_err(sp, \"Unsupported literal in bytes!\")\n+            },\n+\n+            _ => cx.span_err(sp, \"Non-literal in bytes!\")\n+        }\n     }\n+\n     let e = mk_slice_vec_e(cx, sp, bytes);\n     MRExpr(e)\n }"}, {"sha": "8bdc643f288c5cb94d408c3f9deb9ae573bec5d3", "filename": "src/test/compile-fail/syntax-extension-bytes-non-ascii-char-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let vec = bytes!('\u03bb'); //~ ERROR Non-ascii char literal in bytes!\n+}"}, {"sha": "fed6bdc94700d496677a0c56a929414aef001e6f", "filename": "src/test/compile-fail/syntax-extension-bytes-non-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-literal.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let vec = bytes!(foo); //~ ERROR Non-literal in bytes!\n+}"}, {"sha": "8acb280dfde17b7d1b60010c8bb82fdede2a79df", "filename": "src/test/compile-fail/syntax-extension-bytes-too-large-integer-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let vec = bytes!(1024); //~ ERROR Too large integer literal in bytes!\n+}"}, {"sha": "b7d69a3054f9b6423813230eb99fdeef1617a6fe", "filename": "src/test/compile-fail/syntax-extension-bytes-too-large-u8-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let vec = bytes!(1024u8); //~ ERROR Too large u8 literal in bytes!\n+}"}, {"sha": "cec2dc0a8e093e14648a6d5236416a174aca900b", "filename": "src/test/compile-fail/syntax-extension-bytes-too-small-integer-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let vec = bytes!(-1024); //~ ERROR Non-literal in bytes\n+}"}, {"sha": "2df55a6436cf5196ce8f9326001381243496ded0", "filename": "src/test/compile-fail/syntax-extension-bytes-too-small-u8-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let vec = bytes!(-1024u8); //~ ERROR Non-literal in bytes\n+}"}, {"sha": "b7d55385d1c3105f77b87d22b36301652e31a2f7", "filename": "src/test/compile-fail/syntax-extension-bytes-unsupported-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let vec = bytes!(45f); //~ ERROR Unsupported literal in bytes!\n+}"}, {"sha": "bdaae65bc3cc82ad1a2f735161c8f26bd12d79c3", "filename": "src/test/run-pass/syntax-extension-bytes.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d28d645422c1617be58c8ca7ad9a457264ca850/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs?ref=2d28d645422c1617be58c8ca7ad9a457264ca850", "patch": "@@ -8,9 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+static static_vec: &'static [u8] = bytes!(\"abc\", 0xFF, '!');\n+\n fn main() {\n     let vec = bytes!(\"abc\");\n-    assert_eq!(vec[0], 97);\n-    assert_eq!(vec[1], 98);\n-    assert_eq!(vec[2], 99);\n+    assert_eq!(vec, &[97_u8, 98_u8, 99_u8]);\n+\n+    let vec = bytes!(\"null\", 0);\n+    assert_eq!(vec, &[110_u8, 117_u8, 108_u8, 108_u8, 0_u8]);\n+\n+    let vec = bytes!(' ', \" \", 32, 32u8);\n+    assert_eq!(vec, &[32_u8, 32_u8, 32_u8, 32_u8]);\n+\n+    assert_eq!(static_vec, &[97_u8, 98_u8, 99_u8, 255_u8, 33_u8]);\n }"}]}