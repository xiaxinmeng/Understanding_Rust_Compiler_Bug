{"sha": "a789fa0440214347e1bf6228fdb8fd36bf2f4520", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODlmYTA0NDAyMTQzNDdlMWJmNjIyOGZkYjhmZDM2YmYyZjQ1MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-24T03:55:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-24T03:55:22Z"}, "message": "Auto merge of #44984 - Maaarcocr:master, r=nikomatsakis\n\nCreate NormalizeTy query\n\nAs part of the effort to solve #44891,  I've created the normalize_ty query.\n\nAs outlined in the issue this meant:\n\n- renamed `normalize_associated_type()` to `normalize_associated_type_in()`\n- created the `normalize_ty` query\n- substituted the use of memoize with the query\n\nThis PR is not ready. While running tests, one of the incremental ones failed. [This](https://pastebin.com/vGhH6bv6) is the error I got.", "tree": {"sha": "2695d74e2c8129be004d9dce45914ed3ebea3eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2695d74e2c8129be004d9dce45914ed3ebea3eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a789fa0440214347e1bf6228fdb8fd36bf2f4520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a789fa0440214347e1bf6228fdb8fd36bf2f4520", "html_url": "https://github.com/rust-lang/rust/commit/a789fa0440214347e1bf6228fdb8fd36bf2f4520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a789fa0440214347e1bf6228fdb8fd36bf2f4520/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336624735c696fe3c15b64db83f19e9ce4665d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/336624735c696fe3c15b64db83f19e9ce4665d06", "html_url": "https://github.com/rust-lang/rust/commit/336624735c696fe3c15b64db83f19e9ce4665d06"}, {"sha": "5c51bf5297c3abb11c815d6b8a6d8681790a6ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c51bf5297c3abb11c815d6b8a6d8681790a6ec8", "html_url": "https://github.com/rust-lang/rust/commit/5c51bf5297c3abb11c815d6b8a6d8681790a6ec8"}], "stats": {"total": 76, "additions": 37, "deletions": 39}, "files": [{"sha": "7bf8c6168174ceb8af2968b2fb164ed727460098", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -632,7 +632,7 @@ define_dep_nodes!( <'tcx>\n     [] CodegenUnit(InternedString),\n     [] CompileCodegenUnit(InternedString),\n     [] OutputFilenames,\n-\n+    [anon] NormalizeTy,\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n );"}, {"sha": "79eeebfb250316c5a4d598ae3948b05561f55f7b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -480,16 +480,16 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     {\n         assert!(!value.needs_subst());\n         let value = self.erase_late_bound_regions(value);\n-        self.normalize_associated_type(&value)\n+        self.fully_normalize_associated_types_in(&value)\n     }\n \n     /// Fully normalizes any associated types in `value`, using an\n     /// empty environment and `Reveal::All` mode (therefore, suitable\n     /// only for monomorphized code during trans, basically).\n-    pub fn normalize_associated_type<T>(self, value: &T) -> T\n+    pub fn fully_normalize_associated_types_in<T>(self, value: &T) -> T\n         where T: TransNormalize<'tcx>\n     {\n-        debug!(\"normalize_associated_type(t={:?})\", value);\n+        debug!(\"fully_normalize_associated_types_in(t={:?})\", value);\n \n         let param_env = ty::ParamEnv::empty(Reveal::All);\n         let value = self.erase_regions(value);"}, {"sha": "761e7259204bff0b32ff75ff7fab3883431bfd4f", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -13,16 +13,14 @@\n // seems likely that they should eventually be merged into more\n // general routines.\n \n-use dep_graph::{DepGraph, DepKind, DepTrackingMap, DepTrackingMapConfig};\n+use dep_graph::{DepKind, DepTrackingMapConfig};\n use infer::TransNormalize;\n-use std::cell::RefCell;\n use std::marker::PhantomData;\n use syntax_pos::DUMMY_SP;\n use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext, Vtable};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::{Subst, Substs};\n use ty::fold::{TypeFoldable, TypeFolder};\n-use util::common::MemoizationMap;\n \n /// Attempts to resolve an obligation to a vtable.. The result is\n /// a shallow vtable resolution -- meaning that we do not\n@@ -130,24 +128,8 @@ impl<'a, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizer<'a, 'gcx> {\n         if !ty.has_projections() {\n             ty\n         } else {\n-            self.tcx.trans_trait_caches.project_cache.memoize(ty, || {\n-                debug!(\"AssociatedTypeNormalizer: ty={:?}\", ty);\n-                self.tcx.normalize_associated_type(&ty)\n-            })\n-        }\n-    }\n-}\n-\n-/// Specializes caches used in trans -- in particular, they assume all\n-/// types are fully monomorphized and that free regions can be erased.\n-pub struct TransTraitCaches<'tcx> {\n-    project_cache: RefCell<DepTrackingMap<ProjectionCache<'tcx>>>,\n-}\n-\n-impl<'tcx> TransTraitCaches<'tcx> {\n-    pub fn new(graph: DepGraph) -> Self {\n-        TransTraitCaches {\n-            project_cache: RefCell::new(DepTrackingMap::new(graph)),\n+            debug!(\"AssociatedTypeNormalizer: ty={:?}\", ty);\n+            self.tcx.fully_normalize_monormophic_ty(ty)\n         }\n     }\n }"}, {"sha": "5e9396068c8b686f7769f972ca10dad4ca57f15d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -851,9 +851,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub sess: &'tcx Session,\n \n-\n-    pub trans_trait_caches: traits::trans::TransTraitCaches<'tcx>,\n-\n     pub dep_graph: DepGraph,\n \n     /// Common types, pre-interned for your convenience.\n@@ -1137,7 +1134,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         tls::enter_global(GlobalCtxt {\n             sess: s,\n             cstore,\n-            trans_trait_caches: traits::trans::TransTraitCaches::new(dep_graph.clone()),\n             global_arenas: arenas,\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n@@ -2322,4 +2318,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.sess.features.borrow().clone_closures\n     };\n+    providers.fully_normalize_monormophic_ty = |tcx, ty| {\n+        tcx.fully_normalize_associated_types_in(&ty)\n+    };\n }"}, {"sha": "deaafd1efed450a710745e464ddf71eb27fcd625", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -532,3 +532,9 @@ impl<'tcx> QueryDescription for queries::has_copy_closures<'tcx> {\n         format!(\"seeing if the crate has enabled `Copy` closures\")\n     }\n }\n+\n+impl<'tcx> QueryDescription for queries::fully_normalize_monormophic_ty<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: Ty) -> String {\n+        format!(\"normalizing types\")\n+    }\n+}"}, {"sha": "e588cdc52d886bb564afb7627ae720589a78aeea", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -349,6 +349,7 @@ define_maps! { <'tcx>\n     // Normally you would just use `tcx.erase_regions(&value)`,\n     // however, which uses this query as a kind of cache.\n     [] fn erase_regions_ty: erase_regions_ty(Ty<'tcx>) -> Ty<'tcx>,\n+    [] fn fully_normalize_monormophic_ty: normalize_ty_node(Ty<'tcx>) -> Ty<'tcx>,\n }\n \n //////////////////////////////////////////////////////////////////////\n@@ -490,3 +491,6 @@ fn output_filenames_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n fn vtable_methods_node<'tcx>(trait_ref: ty::PolyTraitRef<'tcx>) -> DepConstructor<'tcx> {\n     DepConstructor::VtableMethods{ trait_ref }\n }\n+fn normalize_ty_node<'tcx>(_: Ty<'tcx>) -> DepConstructor<'tcx> {\n+    DepConstructor::NormalizeTy\n+}"}, {"sha": "cce968177175bb9827aad38ec4e7a264b66fd7b0", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -697,6 +697,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FulfillObligation |\n         DepKind::VtableMethods |\n         DepKind::EraseRegionsTy |\n+        DepKind::NormalizeTy |\n \n         // These are just odd\n         DepKind::Null |"}, {"sha": "38461b0b36419d0be0b344ce64e92c4c58eed735", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -431,7 +431,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // fields are actually safe.\n                         let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n-                            let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n+                            let field_ty = cx.fully_normalize_associated_types_in(\n+                                &field.ty(cx, substs)\n+                            );\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n                                 FfiSafe => {\n@@ -463,7 +465,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n                         let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n-                            let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n+                            let field_ty = cx.fully_normalize_associated_types_in(\n+                                &field.ty(cx, substs)\n+                            );\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n                                 FfiSafe => {\n@@ -516,7 +520,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // Check the contained variants.\n                         for variant in &def.variants {\n                             for field in &variant.fields {\n-                                let arg = cx.normalize_associated_type(&field.ty(cx, substs));\n+                                let arg = cx.fully_normalize_associated_types_in(\n+                                    &field.ty(cx, substs)\n+                                );\n                                 let r = self.check_type_for_ffi(cache, arg);\n                                 match r {\n                                     FfiSafe => {}\n@@ -629,7 +635,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n-        let ty = self.cx.tcx.normalize_associated_type(&ty);\n+        let ty = self.cx.tcx.fully_normalize_associated_types_in(&ty);\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}"}, {"sha": "b06f8e4e671162bc007e4a20392c3d9f43ddb601", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -80,7 +80,7 @@ pub fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n         ty::TyGenerator(def_id, substs, _) => {\n             if variant_index > 0 { bug!(\"{} is a generator, which only has one variant\", t);}\n             substs.field_tys(def_id, cx.tcx()).map(|t| {\n-                cx.tcx().normalize_associated_type(&t)\n+                cx.tcx().fully_normalize_associated_types_in(&t)\n             }).collect()\n         },\n         _ => bug!(\"{} is not a type that can have fields.\", t)"}, {"sha": "6fd24c1786c6971bbea09af0216ce3f4fddeb7ce", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -642,7 +642,7 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n     }\n \n     fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx().normalize_associated_type(&ty)\n+        self.tcx().fully_normalize_associated_types_in(&ty)\n     }\n }\n "}, {"sha": "3bde78e2c6a6075209aca3a3ea7b800c42d55b5d", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -582,7 +582,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         ty::TyGenerator(def_id, substs, _) => {\n             let upvar_tys : Vec<_> = substs.field_tys(def_id, cx.tcx()).map(|t| {\n-                cx.tcx().normalize_associated_type(&t)\n+                cx.tcx().fully_normalize_associated_types_in(&t)\n             }).collect();\n             prepare_tuple_metadata(cx,\n                                    t,"}, {"sha": "1a2842920161888064f6ca04b241739ca9513836", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -376,7 +376,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            let actual_type = cx.tcx().normalize_associated_type(&actual_type);\n+            let actual_type = cx.tcx().fully_normalize_associated_types_in(&actual_type);\n             // Add actual type name to <...> clause of function name\n             let actual_type_name = compute_debuginfo_type_name(cx,\n                                                                actual_type,\n@@ -389,7 +389,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n             let names = get_type_parameter_names(cx, generics);\n             substs.types().zip(names).map(|(ty, name)| {\n-                let actual_type = cx.tcx().normalize_associated_type(&ty);\n+                let actual_type = cx.tcx().fully_normalize_associated_types_in(&ty);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                 let name = CString::new(name.as_str().as_bytes()).unwrap();\n                 unsafe {"}, {"sha": "ab61dacf010ae1f51637f15453ebbf0a5b023095", "filename": "src/librustc_trans_utils/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a789fa0440214347e1bf6228fdb8fd36bf2f4520/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fmonomorphize.rs?ref=a789fa0440214347e1bf6228fdb8fd36bf2f4520", "patch": "@@ -131,6 +131,6 @@ pub fn field_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           f: &'tcx ty::FieldDef)\n                           -> Ty<'tcx>\n {\n-    tcx.normalize_associated_type(&f.ty(tcx, param_substs))\n+    tcx.fully_normalize_associated_types_in(&f.ty(tcx, param_substs))\n }\n "}]}