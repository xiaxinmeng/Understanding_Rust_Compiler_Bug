{"sha": "5b921505ef0892e4d83d0e2743e3e2eecd03d461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTIxNTA1ZWYwODkyZTRkODNkMGUyNzQzZTNlMmVlY2QwM2Q0NjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-28T19:33:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-18T09:14:08Z"}, "message": "Remove deadlock virtual call.", "tree": {"sha": "e41e4e413bb8e83b427ede51b034257f1ea266be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e41e4e413bb8e83b427ede51b034257f1ea266be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b921505ef0892e4d83d0e2743e3e2eecd03d461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b921505ef0892e4d83d0e2743e3e2eecd03d461", "html_url": "https://github.com/rust-lang/rust/commit/5b921505ef0892e4d83d0e2743e3e2eecd03d461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b921505ef0892e4d83d0e2743e3e2eecd03d461/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81241cbf3ae39db6188b7965b34e444f48e7ebbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/81241cbf3ae39db6188b7965b34e444f48e7ebbd", "html_url": "https://github.com/rust-lang/rust/commit/81241cbf3ae39db6188b7965b34e444f48e7ebbd"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "8b41a0ff1769377376762984d9a9b15e5e9fc430", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=5b921505ef0892e4d83d0e2743e3e2eecd03d461", "patch": "@@ -10,6 +10,8 @@ use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n #[cfg(parallel_compiler)]\n use rustc_middle::ty::tls;\n+#[cfg(parallel_compiler)]\n+use rustc_query_impl::QueryCtxt;\n use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::{self, CrateType};\n@@ -176,7 +178,7 @@ unsafe fn handle_deadlock() {\n     thread::spawn(move || {\n         tls::enter_context(icx, |_| {\n             rustc_span::set_session_globals_then(session_globals, || {\n-                tls::with(|tcx| tcx.queries.deadlock(tcx, &registry))\n+                tls::with(|tcx| QueryCtxt::from_tcx(tcx).deadlock(&registry))\n             })\n         });\n     });"}, {"sha": "b84058011066f3acaf71b717598a2eddb38e0dc2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5b921505ef0892e4d83d0e2743e3e2eecd03d461", "patch": "@@ -71,7 +71,7 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n-pub trait OnDiskCache<'tcx> {\n+pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n     fn new(sess: &'tcx Session, data: Vec<u8>, start_pos: usize) -> Self\n     where"}, {"sha": "15a8888ee65eda376002df70eb59b33098f97e69", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=5b921505ef0892e4d83d0e2743e3e2eecd03d461", "patch": "@@ -233,9 +233,6 @@ macro_rules! define_callbacks {\n         pub trait QueryEngine<'tcx>: rustc_data_structures::sync::Sync {\n             fn as_any(&'tcx self) -> &'tcx dyn std::any::Any;\n \n-            #[cfg(parallel_compiler)]\n-            unsafe fn deadlock(&'tcx self, tcx: TyCtxt<'tcx>, registry: &rustc_rayon_core::Registry);\n-\n             fn try_mark_green(&'tcx self, tcx: TyCtxt<'tcx>, dep_node: &dep_graph::DepNode) -> bool;\n \n             $($(#[$attr])*"}, {"sha": "58c1b57dbb949fac2a7aecb6915e7bc16268c424", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b921505ef0892e4d83d0e2743e3e2eecd03d461/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=5b921505ef0892e4d83d0e2743e3e2eecd03d461", "patch": "@@ -155,6 +155,11 @@ impl<'tcx> QueryCtxt<'tcx> {\n         self.queries.on_disk_cache.as_ref()\n     }\n \n+    #[cfg(parallel_compiler)]\n+    pub unsafe fn deadlock(self, registry: &rustc_rayon_core::Registry) {\n+        rustc_query_system::query::deadlock(self, registry)\n+    }\n+\n     pub(super) fn encode_query_results(\n         self,\n         encoder: &mut on_disk_cache::CacheEncoder<'a, 'tcx, opaque::FileEncoder>,\n@@ -537,12 +542,6 @@ macro_rules! define_queries_struct {\n                 this as _\n             }\n \n-            #[cfg(parallel_compiler)]\n-            unsafe fn deadlock(&'tcx self, tcx: TyCtxt<'tcx>, registry: &rustc_rayon_core::Registry) {\n-                let tcx = QueryCtxt { tcx, queries: self };\n-                rustc_query_system::query::deadlock(tcx, registry)\n-            }\n-\n             fn try_mark_green(&'tcx self, tcx: TyCtxt<'tcx>, dep_node: &dep_graph::DepNode) -> bool {\n                 let qcx = QueryCtxt { tcx, queries: self };\n                 tcx.dep_graph.try_mark_green(qcx, dep_node).is_some()"}]}