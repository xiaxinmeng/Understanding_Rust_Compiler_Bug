{"sha": "3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYjFhOTVhM2Y5NGNhN2RmMWNiNmQyYWE3YTNiNmNiNjJkMzVhZWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-30T08:48:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-02T08:40:49Z"}, "message": "add/fix various comments to `BitMatrix`\n\nNotably, the (hitherto unused) `less_than` method was not at all what it\npurported to be. It in fact computes the opposite.", "tree": {"sha": "6c926089a2ad4bdd613bfbd77b68c1c536bdecd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c926089a2ad4bdd613bfbd77b68c1c536bdecd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef", "html_url": "https://github.com/rust-lang/rust/commit/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de201b40c9de12d1e9d709203f8eb425f79148cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/de201b40c9de12d1e9d709203f8eb425f79148cf", "html_url": "https://github.com/rust-lang/rust/commit/de201b40c9de12d1e9d709203f8eb425f79148cf"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "94edaa746f915b08a6d2f83f77888288e4affd72", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef", "patch": "@@ -145,7 +145,7 @@ pub struct BitMatrix {\n }\n \n impl BitMatrix {\n-    // Create a new `rows x columns` matrix, initially empty.\n+    /// Create a new `rows x columns` matrix, initially empty.\n     pub fn new(rows: usize, columns: usize) -> BitMatrix {\n         // For every element, we need one bit for every other\n         // element. Round up to an even number of u64s.\n@@ -163,29 +163,33 @@ impl BitMatrix {\n         (start, start + u64s_per_row)\n     }\n \n-    pub fn add(&mut self, source: usize, target: usize) -> bool {\n-        let (start, _) = self.range(source);\n-        let (word, mask) = word_mask(target);\n+    /// Sets the cell at `(row, column)` to true. Put another way, add\n+    /// `column` to the bitset for `row`.\n+    ///\n+    /// Returns true if this changed the matrix, and false otherwies.\n+    pub fn add(&mut self, row: usize, column: usize) -> bool {\n+        let (start, _) = self.range(row);\n+        let (word, mask) = word_mask(column);\n         let vector = &mut self.vector[..];\n         let v1 = vector[start + word];\n         let v2 = v1 | mask;\n         vector[start + word] = v2;\n         v1 != v2\n     }\n \n-    /// Do the bits from `source` contain `target`?\n-    ///\n-    /// Put another way, if the matrix represents (transitive)\n-    /// reachability, can `source` reach `target`?\n-    pub fn contains(&self, source: usize, target: usize) -> bool {\n-        let (start, _) = self.range(source);\n-        let (word, mask) = word_mask(target);\n+    /// Do the bits from `row` contain `column`? Put another way, is\n+    /// the matrix cell at `(row, column)` true?  Put yet another way,\n+    /// if the matrix represents (transitive) reachability, can\n+    /// `row` reach `column`?\n+    pub fn contains(&self, row: usize, column: usize) -> bool {\n+        let (start, _) = self.range(row);\n+        let (word, mask) = word_mask(column);\n         (self.vector[start + word] & mask) != 0\n     }\n \n-    /// Returns those indices that are reachable from both `a` and\n-    /// `b`. This is an O(n) operation where `n` is the number of\n-    /// elements (somewhat independent from the actual size of the\n+    /// Returns those indices that are true in rows `a` and `b`.  This\n+    /// is an O(n) operation where `n` is the number of elements\n+    /// (somewhat independent from the actual size of the\n     /// intersection, in particular).\n     pub fn intersection(&self, a: usize, b: usize) -> Vec<usize> {\n         let (a_start, a_end) = self.range(a);\n@@ -206,7 +210,7 @@ impl BitMatrix {\n         result\n     }\n \n-    /// Add the bits from `read` to the bits from `write`,\n+    /// Add the bits from row `read` to the bits from row `write`,\n     /// return true if anything changed.\n     ///\n     /// This is used when computing transitive reachability because if\n@@ -227,6 +231,8 @@ impl BitMatrix {\n         changed\n     }\n \n+    /// Iterates through all the columns set to true in a given row of\n+    /// the matrix.\n     pub fn iter<'a>(&'a self, row: usize) -> BitVectorIter<'a> {\n         let (start, end) = self.range(row);\n         BitVectorIter {"}, {"sha": "933e08811ce5d6a647de68f4f8e08e6b855a9d15", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=3db1a95a3f94ca7df1cb6d2aa7a3b6cb62d35aef", "patch": "@@ -134,12 +134,12 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n         }\n     }\n \n-    /// Returns a vector of all things less than `a`.\n+    /// Returns a vector of all things greater than `a`.\n     ///\n     /// Really this probably ought to be `impl Iterator<Item=&T>`, but\n     /// I'm too lazy to make that work, and -- given the caching\n     /// strategy -- it'd be a touch tricky anyhow.\n-    pub fn less_than(&self, a: &T) -> Vec<&T> {\n+    pub fn greater_than(&self, a: &T) -> Vec<&T> {\n         match self.index(a) {\n             Some(a) => self.with_closure(|closure| {\n                 closure.iter(a.0).map(|i| &self.elements[i]).collect()"}]}