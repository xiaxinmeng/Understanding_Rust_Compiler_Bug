{"sha": "f210deae3d522281ca3d85cb6f82dca742abd6e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMTBkZWFlM2Q1MjIyODFjYTNkODVjYjZmODJkY2E3NDJhYmQ2ZTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-09T21:38:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-09T21:38:37Z"}, "message": "Merge branch 'incoming' of github.com:/mozilla/rust into incoming\n\nConflicts:\n\tsrc/snapshots.txt", "tree": {"sha": "b3ce5fa032079f87e80ba9069b783a05441ebf33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ce5fa032079f87e80ba9069b783a05441ebf33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f210deae3d522281ca3d85cb6f82dca742abd6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f210deae3d522281ca3d85cb6f82dca742abd6e7", "html_url": "https://github.com/rust-lang/rust/commit/f210deae3d522281ca3d85cb6f82dca742abd6e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f210deae3d522281ca3d85cb6f82dca742abd6e7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26d02557e77ef02bf897563a38867ff0da3fc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26d02557e77ef02bf897563a38867ff0da3fc2a", "html_url": "https://github.com/rust-lang/rust/commit/c26d02557e77ef02bf897563a38867ff0da3fc2a"}, {"sha": "f72487d19604225a24b1aeb4580e7abe6cc42cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f72487d19604225a24b1aeb4580e7abe6cc42cc5", "html_url": "https://github.com/rust-lang/rust/commit/f72487d19604225a24b1aeb4580e7abe6cc42cc5"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "a5e8f54ad650f1330a4b42f6c734277435986c84", "filename": "src/rustc/front/config.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Frustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Frustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fconfig.rs?ref=f210deae3d522281ca3d85cb6f82dca742abd6e7", "patch": "@@ -39,11 +39,22 @@ fn filter_item(cx: ctxt, &&item: @ast::item) ->\n     if item_in_cfg(cx, item) { option::some(item) } else { option::none }\n }\n \n+fn filter_view_item(cx: ctxt, &&view_item: @ast::view_item\n+                   )-> option<@ast::view_item> {\n+    if view_item_in_cfg(cx, view_item) {\n+        option::some(view_item)\n+    } else {\n+        option::none\n+    }\n+}\n+\n fn fold_mod(cx: ctxt, m: ast::_mod, fld: fold::ast_fold) ->\n    ast::_mod {\n-    let filter = |a| filter_item(cx, a);\n-    let filtered_items = vec::filter_map(m.items, filter);\n-    ret {view_items: vec::map(m.view_items, fld.fold_view_item),\n+    let item_filter = |a| filter_item(cx, a);\n+    let filtered_items = vec::filter_map(m.items, item_filter);\n+    let view_item_filter = |a| filter_view_item(cx, a);\n+    let filtered_view_items = vec::filter_map(m.view_items, view_item_filter);\n+    ret {view_items: vec::map(filtered_view_items, fld.fold_view_item),\n          items: vec::map(filtered_items, fld.fold_item)};\n }\n \n@@ -56,9 +67,12 @@ fn filter_foreign_item(cx: ctxt, &&item: @ast::foreign_item) ->\n \n fn fold_foreign_mod(cx: ctxt, nm: ast::foreign_mod,\n                    fld: fold::ast_fold) -> ast::foreign_mod {\n-    let filter = |a| filter_foreign_item(cx, a);\n-    let filtered_items = vec::filter_map(nm.items, filter);\n-    ret {view_items: vec::map(nm.view_items, fld.fold_view_item),\n+    let item_filter = |a| filter_foreign_item(cx, a);\n+    let filtered_items = vec::filter_map(nm.items, item_filter);\n+    let view_item_filter = |a| filter_view_item(cx, a);\n+    let filtered_view_items = vec::filter_map(\n+        nm.view_items, view_item_filter);\n+    ret {view_items: vec::map(filtered_view_items, fld.fold_view_item),\n          items: filtered_items};\n }\n \n@@ -98,6 +112,10 @@ fn foreign_item_in_cfg(cx: ctxt, item: @ast::foreign_item) -> bool {\n     ret cx.in_cfg(item.attrs);\n }\n \n+fn view_item_in_cfg(cx: ctxt, item: @ast::view_item) -> bool {\n+    ret cx.in_cfg(item.attrs);\n+}\n+\n // Determine if an item should be translated in the current crate\n // configuration based on the item's attributes\n fn in_cfg(cfg: ast::crate_cfg, attrs: ~[ast::attribute]) -> bool {"}, {"sha": "eb9422a7c7c6f1980a09cb9d00a0bc2c0c836624", "filename": "src/test/run-pass/class-impl-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs?ref=f210deae3d522281ca3d85cb6f82dca742abd6e7", "patch": "@@ -60,6 +60,7 @@ class cat : map<int, bool> {\n   fn each_value(&&f: fn(&&bool) -> bool) {\n     for self.each |_k, v| { if !f(v) { break; } again;};\n   }\n+  fn clear() { }\n }\n \n fn main() {"}, {"sha": "8d710d0e6b444ca50e3b4508c0db09a550329e13", "filename": "src/test/run-pass/class-impl-very-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs?ref=f210deae3d522281ca3d85cb6f82dca742abd6e7", "patch": "@@ -82,6 +82,7 @@ class cat<T: copy> : map<int, T> {\n   fn each_value(&&f: fn(&&T) -> bool) {\n     for self.each |_k, v| { if !f(v) { break; } again;};\n   }\n+  fn clear() { }\n }\n \n "}, {"sha": "d02bfbf70915560c1861104ed78dcfe52daa84af", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=f210deae3d522281ca3d85cb6f82dca742abd6e7", "patch": "@@ -1,4 +1,3 @@\n-// xfail-fast\n // aux-build:cci_class_6.rs\n use cci_class_6;\n import cci_class_6::kitties::*;"}, {"sha": "8e99ca0da123af5b28cac72fdabd886986d9eaa8", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f210deae3d522281ca3d85cb6f82dca742abd6e7/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=f210deae3d522281ca3d85cb6f82dca742abd6e7", "patch": "@@ -87,3 +87,13 @@ mod test_foreign_items {\n         fn vec_from_buf_shared();\n     }\n }\n+\n+mod test_use_statements {\n+    #[cfg(bogus)]\n+    use flippity_foo;\n+\n+    extern mod rustrt {\n+        #[cfg(bogus)]\n+        use flippity_foo;\n+    }\n+}\n\\ No newline at end of file"}]}