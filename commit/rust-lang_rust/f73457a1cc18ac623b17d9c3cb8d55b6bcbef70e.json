{"sha": "f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MzQ1N2ExY2MxOGFjNjIzYjE3ZDljM2NiOGQ1NWI2YmNiZWY3MGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T09:14:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T17:58:47Z"}, "message": "Rollup merge of #22612 - jxcl:iter-replace, r=steveklabnik\n\n r? @steveklabnik\n\nI've updated the iterators chapter to reflect the fact that you can now iterate over `for` loops without calling `.iter()`.", "tree": {"sha": "0761c0df96a0521a8b9f83a5e0502308651968de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0761c0df96a0521a8b9f83a5e0502308651968de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e", "html_url": "https://github.com/rust-lang/rust/commit/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26180e9940ea349fbe62ef53b7f737679bb4a970", "url": "https://api.github.com/repos/rust-lang/rust/commits/26180e9940ea349fbe62ef53b7f737679bb4a970", "html_url": "https://github.com/rust-lang/rust/commit/26180e9940ea349fbe62ef53b7f737679bb4a970"}, {"sha": "9f2b0671f88b2cc6bb73575db47d265dbb246e34", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2b0671f88b2cc6bb73575db47d265dbb246e34", "html_url": "https://github.com/rust-lang/rust/commit/9f2b0671f88b2cc6bb73575db47d265dbb246e34"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "33dc1ba07ca86e63cd26fa2d8ce99d3d0e9f232c", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e", "patch": "@@ -57,14 +57,13 @@ for i in 0..nums.len() {\n }\n ```\n \n-This is strictly worse than using an actual iterator. The `.iter()` method on\n-vectors returns an iterator which iterates through a reference to each element\n-of the vector in turn. So write this:\n+This is strictly worse than using an actual iterator. You can iterate over vectors\n+directly, so write this:\n \n ```rust\n let nums = vec![1, 2, 3];\n \n-for num in nums.iter() {\n+for num in &nums {\n     println!(\"{}\", num);\n }\n ```\n@@ -86,16 +85,17 @@ see it. This code works fine too:\n ```rust\n let nums = vec![1, 2, 3];\n \n-for num in nums.iter() {\n+for num in &nums {\n     println!(\"{}\", *num);\n }\n ```\n \n-Now we're explicitly dereferencing `num`. Why does `iter()` give us references?\n-Well, if it gave us the data itself, we would have to be its owner, which would\n-involve making a copy of the data and giving us the copy. With references,\n-we're just borrowing a reference to the data, and so it's just passing\n-a reference, without needing to do the copy.\n+Now we're explicitly dereferencing `num`. Why does `&nums` give us\n+references?  Firstly, because we explicitly asked it to with\n+`&`. Secondly, if it gave us the data itself, we would have to be its\n+owner, which would involve making a copy of the data and giving us the\n+copy. With references, we're just borrowing a reference to the data,\n+and so it's just passing a reference, without needing to do the move.\n \n So, now that we've established that ranges are often not what you want, let's\n talk about what you do want instead.\n@@ -230,9 +230,9 @@ let nums = (1..100).collect::<Vec<i32>>();\n Now, `collect()` will require that the range gives it some numbers, and so\n it will do the work of generating the sequence.\n \n-Ranges are one of two basic iterators that you'll see. The other is `iter()`,\n-which you've used before. `iter()` can turn a vector into a simple iterator\n-that gives you each element in turn:\n+Ranges are one of two basic iterators that you'll see. The other is `iter()`.\n+`iter()` can turn a vector into a simple iterator that gives you each element\n+in turn:\n \n ```rust\n let nums = [1, 2, 3];"}]}