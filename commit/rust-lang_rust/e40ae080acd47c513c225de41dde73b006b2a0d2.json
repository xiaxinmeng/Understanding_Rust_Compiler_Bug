{"sha": "e40ae080acd47c513c225de41dde73b006b2a0d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MGFlMDgwYWNkNDdjNTEzYzIyNWRlNDFkZGU3M2IwMDZiMmEwZDI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-12T19:08:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-12T19:08:03Z"}, "message": "Rollup merge of #77831 - LingMan:use_std, r=jonas-schievink\n\nUse std methods on char instead of open coding them", "tree": {"sha": "49a98f3509628836886989e820bd95fe125e3892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a98f3509628836886989e820bd95fe125e3892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e40ae080acd47c513c225de41dde73b006b2a0d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhKmUCRBK7hj4Ov3rIwAAdHIIAD0Svb9klQ6lQdSxuAjkplfB\nB4u1N8cennuq1Ta0dIiWZ3Sf7t/g3zIwObtFKJbDSl2x8VQ90jkhOFjj8pH+cW+d\nqRYgJEhrkMnYtU3WJFlGd9e4qRXpgMi21cTTSwH/7htynktw5WzYCqJT4N508LF/\nnI5t5rrHkjVX5dF7aZ2fcGsStThjjtvYiz8TviyDNIClnHbyS96CWKYz7fictf2R\nfBDVYcJCjffARKL6TGJqkVUxPfOS7h/hFzIQyryIMu4xlZsOUJKiScP6w9XvWicv\nKO38271jzFGSlaQhnAtCPH/aePvREPEbCgnDnJfXnq/bK+6SnAjjiAU6zIZ4jF4=\n=oWiY\n-----END PGP SIGNATURE-----\n", "payload": "tree 49a98f3509628836886989e820bd95fe125e3892\nparent 233319fc65f6b543721e30504d8610fe6042c4f2\nparent a56b0e96d04579ed03c7b5ef75a2def3a9119434\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602529683 +0900\ncommitter GitHub <noreply@github.com> 1602529683 +0900\n\nRollup merge of #77831 - LingMan:use_std, r=jonas-schievink\n\nUse std methods on char instead of open coding them\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e40ae080acd47c513c225de41dde73b006b2a0d2", "html_url": "https://github.com/rust-lang/rust/commit/e40ae080acd47c513c225de41dde73b006b2a0d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e40ae080acd47c513c225de41dde73b006b2a0d2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "233319fc65f6b543721e30504d8610fe6042c4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/233319fc65f6b543721e30504d8610fe6042c4f2", "html_url": "https://github.com/rust-lang/rust/commit/233319fc65f6b543721e30504d8610fe6042c4f2"}, {"sha": "a56b0e96d04579ed03c7b5ef75a2def3a9119434", "url": "https://api.github.com/repos/rust-lang/rust/commits/a56b0e96d04579ed03c7b5ef75a2def3a9119434", "html_url": "https://github.com/rust-lang/rust/commit/a56b0e96d04579ed03c7b5ef75a2def3a9119434"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "b69b00d65f2be522633d4e76112b23d059afed02", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e40ae080acd47c513c225de41dde73b006b2a0d2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40ae080acd47c513c225de41dde73b006b2a0d2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=e40ae080acd47c513c225de41dde73b006b2a0d2", "patch": "@@ -385,7 +385,7 @@ pub mod printf {\n         if let Start = state {\n             match c {\n                 '1'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     match end.next_cp() {\n                         // Yes, this *is* the parameter.\n                         Some(('$', end2)) => {\n@@ -427,7 +427,7 @@ pub mod printf {\n                     move_to!(next);\n                 }\n                 '1'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     state = Prec;\n                     width = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n                     move_to!(end);\n@@ -441,7 +441,7 @@ pub mod printf {\n         }\n \n         if let WidthArg = state {\n-            let end = at_next_cp_while(at, is_digit);\n+            let end = at_next_cp_while(at, char::is_ascii_digit);\n             match end.next_cp() {\n                 Some(('$', end2)) => {\n                     state = Prec;\n@@ -473,7 +473,7 @@ pub mod printf {\n         if let PrecInner = state {\n             match c {\n                 '*' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     match end.next_cp() {\n                         Some(('$', end2)) => {\n                             state = Length;\n@@ -488,7 +488,7 @@ pub mod printf {\n                     }\n                 }\n                 '0'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     state = Length;\n                     precision = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n                     move_to!(end);\n@@ -563,12 +563,12 @@ pub mod printf {\n \n     fn at_next_cp_while<F>(mut cur: Cur<'_>, mut pred: F) -> Cur<'_>\n     where\n-        F: FnMut(char) -> bool,\n+        F: FnMut(&char) -> bool,\n     {\n         loop {\n             match cur.next_cp() {\n                 Some((c, next)) => {\n-                    if pred(c) {\n+                    if pred(&c) {\n                         cur = next;\n                     } else {\n                         return cur;\n@@ -579,14 +579,7 @@ pub mod printf {\n         }\n     }\n \n-    fn is_digit(c: char) -> bool {\n-        match c {\n-            '0'..='9' => true,\n-            _ => false,\n-        }\n-    }\n-\n-    fn is_flag(c: char) -> bool {\n+    fn is_flag(c: &char) -> bool {\n         match c {\n             '0' | '-' | '+' | ' ' | '#' | '\\'' => true,\n             _ => false,\n@@ -723,17 +716,11 @@ pub mod shell {\n     }\n \n     fn is_ident_head(c: char) -> bool {\n-        match c {\n-            'a'..='z' | 'A'..='Z' | '_' => true,\n-            _ => false,\n-        }\n+        c.is_ascii_alphabetic() || c == '_'\n     }\n \n     fn is_ident_tail(c: char) -> bool {\n-        match c {\n-            '0'..='9' => true,\n-            c => is_ident_head(c),\n-        }\n+        c.is_ascii_alphanumeric() || c == '_'\n     }\n \n     #[cfg(test)]"}]}