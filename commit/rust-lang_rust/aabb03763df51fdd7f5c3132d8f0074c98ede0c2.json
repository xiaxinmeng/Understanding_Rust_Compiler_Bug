{"sha": "aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYmIwMzc2M2RmNTFmZGQ3ZjVjMzEzMmQ4ZjAwNzRjOThlZGUwYzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-10T01:47:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-10T01:47:29Z"}, "message": "Rollup merge of #66463 - estebank:point-at-closure-and-opaque-types, r=Centril\n\nPoint at opaque and closure type definitions in type errors\n\nFixes #57266, fixes #67117.", "tree": {"sha": "f7abb837164f834d8cbe2462a5a038fbb5c3ba69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7abb837164f834d8cbe2462a5a038fbb5c3ba69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF9exCRBK7hj4Ov3rIwAAdHIIAEnelvR1oUM9gTJvxzsEQZ6n\nw/SMkTqzwiHq2CFsZMKu0GohVNWVwMtpZns2N7IXLHxoWxyNNsBnh2kGLSiJ+iOO\nQGyCMHF9RKmKnwucRLC9lxz2QLLJXH/4rCP1KICChlEo0J47lQvlxCR68cFggnCG\nJ04qSHo8ThaWzwfdJ57DZlr4WGMnTScM9cN5TzIOJJqKcuSpQxUL8yhA2ICwdOuu\nwVYF/0HIfCnCeHhz/wlUUKT82X4a8in7SIjh0ctDOfUbj3CK6iW8+dX7DmNPOReX\nLsPo2R/RspLzSag+Oprw+cKMHWBYeTA6T+z2gmVDCTP/7sqgNwAAcXtTFrYUNfk=\n=PBcS\n-----END PGP SIGNATURE-----\n", "payload": "tree f7abb837164f834d8cbe2462a5a038fbb5c3ba69\nparent 72b2bd55edbb1e63a930c5ddd08b25e4f9044786\nparent 33ae3220b638551834fddf5c0658563d8a52e89a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578620849 +0100\ncommitter GitHub <noreply@github.com> 1578620849 +0100\n\nRollup merge of #66463 - estebank:point-at-closure-and-opaque-types, r=Centril\n\nPoint at opaque and closure type definitions in type errors\n\nFixes #57266, fixes #67117.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "html_url": "https://github.com/rust-lang/rust/commit/aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b2bd55edbb1e63a930c5ddd08b25e4f9044786", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b2bd55edbb1e63a930c5ddd08b25e4f9044786", "html_url": "https://github.com/rust-lang/rust/commit/72b2bd55edbb1e63a930c5ddd08b25e4f9044786"}, {"sha": "33ae3220b638551834fddf5c0658563d8a52e89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ae3220b638551834fddf5c0658563d8a52e89a", "html_url": "https://github.com/rust-lang/rust/commit/33ae3220b638551834fddf5c0658563d8a52e89a"}], "stats": {"total": 276, "additions": 255, "deletions": 21}, "files": [{"sha": "5e5f39e6c7a22c1512104ddb1ab2f64df5c19f45", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 139, "deletions": 5, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -68,9 +68,12 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use errors::{\n+    pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString,\n+};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_error_codes::*;\n-use rustc_span::{Pos, Span};\n+use rustc_span::{DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::{cmp, fmt};\n \n@@ -1289,6 +1292,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: &TypeError<'tcx>,\n     ) {\n+        let span = cause.span(self.tcx);\n+\n         // For some types of errors, expected-found does not make\n         // sense, so just ignore the values we were given.\n         match terr {\n@@ -1298,6 +1303,100 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n \n+        struct OpaqueTypesVisitor<'tcx> {\n+            types: FxHashMap<TyCategory, FxHashSet<Span>>,\n+            expected: FxHashMap<TyCategory, FxHashSet<Span>>,\n+            found: FxHashMap<TyCategory, FxHashSet<Span>>,\n+            ignore_span: Span,\n+            tcx: TyCtxt<'tcx>,\n+        }\n+\n+        impl<'tcx> OpaqueTypesVisitor<'tcx> {\n+            fn visit_expected_found(\n+                tcx: TyCtxt<'tcx>,\n+                expected: Ty<'tcx>,\n+                found: Ty<'tcx>,\n+                ignore_span: Span,\n+            ) -> Self {\n+                let mut types_visitor = OpaqueTypesVisitor {\n+                    types: Default::default(),\n+                    expected: Default::default(),\n+                    found: Default::default(),\n+                    ignore_span,\n+                    tcx,\n+                };\n+                // The visitor puts all the relevant encountered types in `self.types`, but in\n+                // here we want to visit two separate types with no relation to each other, so we\n+                // move the results from `types` to `expected` or `found` as appropriate.\n+                expected.visit_with(&mut types_visitor);\n+                std::mem::swap(&mut types_visitor.expected, &mut types_visitor.types);\n+                found.visit_with(&mut types_visitor);\n+                std::mem::swap(&mut types_visitor.found, &mut types_visitor.types);\n+                types_visitor\n+            }\n+\n+            fn report(&self, err: &mut DiagnosticBuilder<'_>) {\n+                self.add_labels_for_types(err, \"expected\", &self.expected);\n+                self.add_labels_for_types(err, \"found\", &self.found);\n+            }\n+\n+            fn add_labels_for_types(\n+                &self,\n+                err: &mut DiagnosticBuilder<'_>,\n+                target: &str,\n+                types: &FxHashMap<TyCategory, FxHashSet<Span>>,\n+            ) {\n+                for (key, values) in types.iter() {\n+                    let count = values.len();\n+                    let kind = key.descr();\n+                    for sp in values {\n+                        err.span_label(\n+                            *sp,\n+                            format!(\n+                                \"{}{}{} {}{}\",\n+                                if sp.is_desugaring(DesugaringKind::Async) {\n+                                    \"the `Output` of this `async fn`'s \"\n+                                } else if count == 1 {\n+                                    \"the \"\n+                                } else {\n+                                    \"\"\n+                                },\n+                                if count > 1 { \"one of the \" } else { \"\" },\n+                                target,\n+                                kind,\n+                                pluralize!(count),\n+                            ),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+\n+        impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+                if let Some((kind, def_id)) = TyCategory::from_ty(t) {\n+                    let span = self.tcx.def_span(def_id);\n+                    // Avoid cluttering the output when the \"found\" and error span overlap:\n+                    //\n+                    // error[E0308]: mismatched types\n+                    //   --> $DIR/issue-20862.rs:2:5\n+                    //    |\n+                    // LL |     |y| x + y\n+                    //    |     ^^^^^^^^^\n+                    //    |     |\n+                    //    |     the found closure\n+                    //    |     expected `()`, found closure\n+                    //    |\n+                    //    = note: expected unit type `()`\n+                    //                 found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n+                    if !self.ignore_span.overlaps(span) {\n+                        self.types.entry(kind).or_default().insert(span);\n+                    }\n+                }\n+                t.super_visit_with(self)\n+            }\n+        }\n+\n         debug!(\"note_type_err(diag={:?})\", diag);\n         let (expected_found, exp_found, is_simple_error) = match values {\n             None => (None, None, false),\n@@ -1306,6 +1405,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     ValuePairs::Types(exp_found) => {\n                         let is_simple_err =\n                             exp_found.expected.is_simple_text() && exp_found.found.is_simple_text();\n+                        OpaqueTypesVisitor::visit_expected_found(\n+                            self.tcx,\n+                            exp_found.expected,\n+                            exp_found.found,\n+                            span,\n+                        )\n+                        .report(diag);\n \n                         (is_simple_err, Some(exp_found))\n                     }\n@@ -1323,8 +1429,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let span = cause.span(self.tcx);\n-\n         // Ignore msg for object safe coercion\n         // since E0038 message will be printed\n         match terr {\n@@ -1336,7 +1440,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-\n         if let Some((expected, found)) = expected_found {\n             let expected_label = exp_found.map_or(\"type\".into(), |ef| ef.expected.prefix_string());\n             let found_label = exp_found.map_or(\"type\".into(), |ef| ef.found.prefix_string());\n@@ -1933,3 +2036,34 @@ impl<'tcx> ObligationCause<'tcx> {\n         }\n     }\n }\n+\n+/// This is a bare signal of what kind of type we're dealing with. `ty::TyKind` tracks\n+/// extra information about each type, but we only care about the category.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+crate enum TyCategory {\n+    Closure,\n+    Opaque,\n+    Generator,\n+    Foreign,\n+}\n+\n+impl TyCategory {\n+    fn descr(&self) -> &'static str {\n+        match self {\n+            Self::Closure => \"closure\",\n+            Self::Opaque => \"opaque type\",\n+            Self::Generator => \"generator\",\n+            Self::Foreign => \"foreign type\",\n+        }\n+    }\n+\n+    pub fn from_ty(ty: Ty<'_>) -> Option<(Self, DefId)> {\n+        match ty.kind {\n+            ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n+            ty::Opaque(def_id, _) => Some((Self::Opaque, def_id)),\n+            ty::Generator(def_id, ..) => Some((Self::Generator, def_id)),\n+            ty::Foreign(def_id) => Some((Self::Foreign, def_id)),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "b9bb68798e588fa0321eb43daeb921410bf64082", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -6,7 +6,7 @@ use super::{\n     TraitNotObjectSafe,\n };\n \n-use crate::infer::error_reporting::TypeAnnotationNeeded as ErrorCode;\n+use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt};\n use crate::mir::interpret::ErrorHandled;\n@@ -446,7 +446,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 flags.push((sym::from_method, Some(method.to_string())));\n             }\n         }\n-        if let Some(t) = self.get_parent_trait_ref(&obligation.cause.code) {\n+        if let Some((t, _)) = self.get_parent_trait_ref(&obligation.cause.code) {\n             flags.push((sym::parent_trait, Some(t)));\n         }\n \n@@ -665,13 +665,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     /// Gets the parent trait chain start\n-    fn get_parent_trait_ref(&self, code: &ObligationCauseCode<'tcx>) -> Option<String> {\n+    fn get_parent_trait_ref(\n+        &self,\n+        code: &ObligationCauseCode<'tcx>,\n+    ) -> Option<(String, Option<Span>)> {\n         match code {\n             &ObligationCauseCode::BuiltinDerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n                 match self.get_parent_trait_ref(&data.parent_code) {\n                     Some(t) => Some(t),\n-                    None => Some(parent_trait_ref.skip_binder().self_ty().to_string()),\n+                    None => {\n+                        let ty = parent_trait_ref.skip_binder().self_ty();\n+                        let span =\n+                            TyCategory::from_ty(ty).map(|(_, def_id)| self.tcx.def_span(def_id));\n+                        Some((ty.to_string(), span))\n+                    }\n                 }\n             }\n             _ => None,\n@@ -719,9 +727,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             return;\n                         }\n                         let trait_ref = trait_predicate.to_poly_trait_ref();\n-                        let (post_message, pre_message) = self\n+                        let (post_message, pre_message, type_def) = self\n                             .get_parent_trait_ref(&obligation.cause.code)\n-                            .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n+                            .map(|(t, s)| {\n+                                (\n+                                    format!(\" in `{}`\", t),\n+                                    format!(\"within `{}`, \", t),\n+                                    s.map(|s| (format!(\"within this `{}`\", t), s)),\n+                                )\n+                            })\n                             .unwrap_or_default();\n \n                         let OnUnimplementedNote { message, label, note, enclosing_scope } =\n@@ -795,6 +809,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n+                        if let Some((msg, span)) = type_def {\n+                            err.span_label(span, &msg);\n+                        }\n                         if let Some(ref s) = note {\n                             // If it has a custom `#[rustc_on_unimplemented]` note, let's display it\n                             err.note(s.as_str());"}, {"sha": "7a7e80a08286adc31caadcb18a5f33ae5491f94b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -4746,14 +4746,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .join(\", \");\n                 }\n                 Some(Node::Expr(hir::Expr {\n-                    kind: ExprKind::Closure(_, _, body_id, closure_span, _),\n+                    kind: ExprKind::Closure(_, _, body_id, _, _),\n                     span: full_closure_span,\n                     ..\n                 })) => {\n                     if *full_closure_span == expr.span {\n                         return false;\n                     }\n-                    err.span_label(*closure_span, \"closure defined here\");\n                     msg = \"call this closure\";\n                     let body = hir.body(*body_id);\n                     sugg_call = body"}, {"sha": "dc3a4752fb1f7205613e8d4fbf375002c3b44317", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n+LL | async fn make_u32() -> u32 {\n+   |                        --- the `Output` of this `async fn`'s found opaque type\n+...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |"}, {"sha": "d6828172928dd7792826fbd92c8ee3ed18c23d72", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl std::future::\n    |\n LL | fn is_qux<T: Qux>(t: T) { }\n    |    ------    --- required by this bound in `is_qux`\n+LL | \n+LL | async fn bar() {\n+   |                - within this `impl std::future::Future`\n ...\n LL |     is_qux(bar());\n    |     ^^^^^^ within `impl std::future::Future`, the trait `Qux` is not implemented for `Foo`"}, {"sha": "2703cec581ddfe39fcde31558a2017c8544fa6e6", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n+LL | async fn make_u32() -> u32 {\n+   |                        --- the `Output` of this `async fn`'s found opaque type\n+...\n LL |         take_u32(x)\n    |                  ^\n    |                  |"}, {"sha": "6ac05a87aae8096e8e75f4798fa4ff9cd398dac9", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:13:14\n    |\n+LL | async fn make_u32() -> u32 {\n+   |                        --- the `Output` of this `async fn`'s found opaque type\n+...\n LL |     take_u32(x)\n    |              ^\n    |              |\n@@ -13,6 +16,9 @@ LL |     take_u32(x)\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:23:5\n    |\n+LL | async fn dummy() {}\n+   |                  - the `Output` of this `async fn`'s found opaque type\n+...\n LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |"}, {"sha": "3c4ae450764dae72ccb5da2579b3c3e32c8705d4", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/closure-reform-bad.rs:11:15\n    |\n+LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n+   |             ------------------------------------- the found closure\n LL |     call_bare(f)\n    |               ^ expected fn pointer, found closure\n    |"}, {"sha": "32b45ee10ad6f1c823a13d272419a20dcde6f077", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/extern-types-distinct-types.rs:9:5\n    |\n+LL |     type A;\n+   |     ------- the found foreign type\n+LL |     type B;\n+   |     ------- the expected foreign type\n+...\n LL |     r\n    |     ^ expected extern type `B`, found extern type `A`\n    |"}, {"sha": "0ebaac8945050ecd9d8fa97722092f989c4b88a2", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -112,6 +112,9 @@ LL | fn send<T: Send>(_: T) {}\n ...\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n+...\n+LL | fn cycle2() -> impl Clone {\n+   |                ---------- within this `impl std::clone::Clone`\n    |\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`"}, {"sha": "a93b3dbc71b60c7b5a4302dd1db175cd38cd931c", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:13:5\n    |\n+LL | fn before() -> impl Fn(i32) {\n+   |                ------------ within this `impl std::ops::Fn<(i32,)>`\n+...\n LL | fn send<T: Send>(_: T) {}\n    |    ----    ---- required by this bound in `send`\n ...\n@@ -19,6 +22,9 @@ LL | fn send<T: Send>(_: T) {}\n ...\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n+...\n+LL | fn after() -> impl Fn(i32) {\n+   |               ------------ within this `impl std::ops::Fn<(i32,)>`\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22 p:std::rc::Rc<std::cell::Cell<i32>>]`"}, {"sha": "b882514f61609361c9478ffc6a0d39de9f09e669", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          -------- the found opaque type\n+...\n LL |     let _: u32 = hide(0_u32);\n    |            ---   ^^^^^^^^^^^ expected `u32`, found opaque type\n    |            |\n@@ -12,6 +15,9 @@ LL |     let _: u32 = hide(0_u32);\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:31:18\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          -------- the found opaque type\n+...\n LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |            ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n    |            |\n@@ -25,6 +31,12 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          --------\n+   |                          |\n+   |                          the expected opaque type\n+   |                          the found opaque type\n+...\n LL |     x = (x.1,\n    |          ^^^ expected `u32`, found `i32`\n    |\n@@ -34,6 +46,12 @@ LL |     x = (x.1,\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          --------\n+   |                          |\n+   |                          the expected opaque type\n+   |                          the found opaque type\n+...\n LL |          x.0);\n    |          ^^^ expected `i32`, found `u32`\n    |"}, {"sha": "036c05fc848cf37fc0dbd8c8f91cc634489fc954", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-24036.rs:3:9\n    |\n+LL |     let mut x = |c| c + 1;\n+   |                 --------- the expected closure\n LL |     x = |c| c + 1;\n    |         ^^^^^^^^^ expected closure, found a different closure\n    |"}, {"sha": "39640e373991f06c0030031f7140f14c7f7699d1", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -5,7 +5,9 @@ LL | fn bar<F:FnOnce() + Send>(_: F) { }\n    |    ---              ---- required by this bound in `bar`\n ...\n LL |     bar(move|| foo(x));\n-   |     ^^^ `std::rc::Rc<usize>` cannot be sent between threads safely\n+   |     ^^^ ------------- within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`\n+   |     |\n+   |     `std::rc::Rc<usize>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<usize>`\n    = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`"}, {"sha": "65946ee8a20cf8588ca193830159779fa497e307", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,13 +1,20 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/no-send-res-ports.rs:29:5\n    |\n-LL |     thread::spawn(move|| {\n-   |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n+LL |       thread::spawn(move|| {\n+   |  _____^^^^^^^^^^^^^_-\n+   | |     |\n+   | |     `std::rc::Rc<()>` cannot be sent between threads safely\n+LL | |\n+LL | |         let y = x;\n+LL | |         println!(\"{:?}\", y);\n+LL | |     });\n+   | |_____- within this `[closure@$DIR/no-send-res-ports.rs:29:19: 33:6 x:main::Foo]`\n    | \n   ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n    |\n-LL |     F: Send + 'static,\n-   |        ---- required by this bound in `std::thread::spawn`\n+LL |       F: Send + 'static,\n+   |          ---- required by this bound in `std::thread::spawn`\n    |\n    = help: within `[closure@$DIR/no-send-res-ports.rs:29:19: 33:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`"}, {"sha": "20c7f81cf5ef54a7de923b3570f10fec95fb8860", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,8 +1,14 @@\n error[E0277]: the trait bound `S: std::clone::Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n   --> $DIR/not-clone-closure.rs:11:23\n    |\n-LL |     let hello = hello.clone();\n-   |                       ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`, the trait `std::clone::Clone` is not implemented for `S`\n+LL |       let hello = move || {\n+   |  _________________-\n+LL | |         println!(\"Hello {}\", a.0);\n+LL | |     };\n+   | |_____- within this `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n+LL | \n+LL |       let hello = hello.clone();\n+   |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`, the trait `std::clone::Clone` is not implemented for `S`\n    |\n    = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n "}, {"sha": "232e54b5d37b24e2b2bb90e73dfd46ca6e14c4bf", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -236,7 +236,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n    |\n LL |     let closure = || 42;\n-   |                   -- closure defined here\n+   |                   ----- the found closure\n LL |     let _: usize = closure;\n    |            -----   ^^^^^^^\n    |            |       |"}, {"sha": "167d61bdf7c704f176d8097b567b78dff3d61272", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n+LL |   fn thing_two() -> impl Future<Output = Result<(), ()>> {\n+   |                     ------------------------------------ the found opaque type\n+...\n LL | /     if true {\n LL | |         thing_one()\n    | |         ----------- expected because of this"}, {"sha": "9549074d4bf78d73650b511c95330ed9624b43cb", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -11,6 +11,9 @@ LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n    |            |\n    |            expected due to this\n+...\n+LL | type WrongGeneric<T> = impl 'static;\n+   | ------------------------------------ the found opaque type\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "5a7f9d74eba5b31ef38fb701c781deec6088c83b", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -11,6 +11,9 @@ LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n    |            |\n    |            expected due to this\n+...\n+LL | type WrongGeneric<T> = impl 'static;\n+   | ------------------------------------ the found opaque type\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "70c99c944d654d8f142f6c6992274b9f31b7cc45", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/never_reveal_concrete_type.rs:13:27\n    |\n+LL | type NoReveal = impl std::fmt::Debug;\n+   | ------------------------------------- the found opaque type\n+...\n LL |     let _: &'static str = x;\n    |            ------------   ^ expected `&str`, found opaque type\n    |            |"}, {"sha": "375c0bc7fe2ed078985862c3d54fc04778d6887d", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aabb03763df51fdd7f5c3132d8f0074c98ede0c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=aabb03763df51fdd7f5c3132d8f0074c98ede0c2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:15:19\n    |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |     -------------------------------------- the found opaque type\n+...\n LL |     let _: &str = bomp();\n    |            ----   ^^^^^^ expected `&str`, found opaque type\n    |            |\n@@ -12,6 +15,9 @@ LL |     let _: &str = bomp();\n error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:19:5\n    |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |     -------------------------------------- the expected opaque type\n+...\n LL | fn bomp() -> boo::Boo {\n    |              -------- expected `Boo` because of return type\n LL |     \"\""}]}