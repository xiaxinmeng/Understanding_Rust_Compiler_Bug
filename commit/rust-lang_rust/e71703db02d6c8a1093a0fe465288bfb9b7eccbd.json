{"sha": "e71703db02d6c8a1093a0fe465288bfb9b7eccbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTcwM2RiMDJkNmM4YTEwOTNhMGZlNDY1Mjg4YmZiOWI3ZWNjYmQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T10:14:35Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T20:29:07Z"}, "message": "Properly serialize is_last_use values\n\nThey were all normalized to the same thing by the serializer.", "tree": {"sha": "ddbecc8e31a83e6688a763f29cf8a593c832b2aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddbecc8e31a83e6688a763f29cf8a593c832b2aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e71703db02d6c8a1093a0fe465288bfb9b7eccbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e71703db02d6c8a1093a0fe465288bfb9b7eccbd", "html_url": "https://github.com/rust-lang/rust/commit/e71703db02d6c8a1093a0fe465288bfb9b7eccbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e71703db02d6c8a1093a0fe465288bfb9b7eccbd/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "html_url": "https://github.com/rust-lang/rust/commit/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "50105ca78d160f3b1a085711ecb7f088608da619", "filename": "src/etc/gen-astencode", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e71703db02d6c8a1093a0fe465288bfb9b7eccbd/src%2Fetc%2Fgen-astencode", "raw_url": "https://github.com/rust-lang/rust/raw/e71703db02d6c8a1093a0fe465288bfb9b7eccbd/src%2Fetc%2Fgen-astencode", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgen-astencode?ref=e71703db02d6c8a1093a0fe465288bfb9b7eccbd", "patch": "@@ -17,7 +17,7 @@ function msg {\n M=src/rustc/metadata\n GEN_TYPES=\"syntax::ast::item syntax::ast::def middle::typeck::method_origin \\\n            middle::freevars::freevar_entry syntax::ast::def_id\n-           syntax::ast::inlined_item\"\n+           syntax::ast::inlined_item middle::last_use::is_last_use\"\n \n BUILD_DIR=$1\n if test $BUILD_DIR == \"\"; then"}, {"sha": "c317e2fa1f258a2b1e3414836d97641e0900d4d8", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e71703db02d6c8a1093a0fe465288bfb9b7eccbd/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71703db02d6c8a1093a0fe465288bfb9b7eccbd/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=e71703db02d6c8a1093a0fe465288bfb9b7eccbd", "patch": "@@ -471,6 +471,10 @@ impl helper for serialization::ebml_deserializer {\n         let fv = astencode_gen::deserialize_middle_typeck_method_origin(self);\n         fv.tr(xcx)\n     }\n+    fn read_is_last_use(xcx: extended_decode_ctxt) -> last_use::is_last_use {\n+        let lu = astencode_gen::deserialize_middle_last_use_is_last_use(self);\n+        lu.tr(xcx)\n+    }\n }\n \n impl of tr for method_origin {\n@@ -489,6 +493,17 @@ impl of tr for method_origin {\n     }\n }\n \n+impl of tr for last_use::is_last_use {\n+    fn tr(xcx: extended_decode_ctxt) -> last_use::is_last_use {\n+        alt self {\n+          last_use::is_last_use | last_use::has_last_use { self }\n+          last_use::closes_over(ids) {\n+            last_use::closes_over(vec::map(ids, {|id| xcx.tr_id(id)}))\n+          }\n+        }\n+    }\n+}\n+\n // ______________________________________________________________________\n // Encoding and decoding dict_res\n \n@@ -743,9 +758,12 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::may(ccx.maps.last_uses.find(id)) {|_m|\n+    option::may(ccx.maps.last_uses.find(id)) {|m|\n         ebml_w.tag(c::tag_table_last_use) {||\n             ebml_w.id(id);\n+            ebml_w.tag(c::tag_table_val) {||\n+               astencode_gen::serialize_middle_last_use_is_last_use(ebml_w, m)\n+            }\n         }\n     }\n \n@@ -830,8 +848,6 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n             dcx.maps.mutbl_map.insert(id, ());\n         } else if tag == (c::tag_table_copy as uint) {\n             dcx.maps.copy_map.insert(id, ());\n-        } else if tag == (c::tag_table_last_use as uint) {\n-            dcx.maps.last_uses.insert(id, last_use::is_last_use);\n         } else {\n             let val_doc = entry_doc[c::tag_table_val];\n             let val_dsr = serialization::mk_ebml_deserializer(val_doc);\n@@ -856,6 +872,8 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n             } else if tag == (c::tag_table_param_bounds as uint) {\n                 let bounds = val_dsr.read_bounds(xcx);\n                 dcx.tcx.ty_param_bounds.insert(id, bounds);\n+            } else if tag == (c::tag_table_last_use as uint) {\n+                dcx.maps.last_uses.insert(id, val_dsr.read_is_last_use(xcx));\n             } else if tag == (c::tag_table_method_map as uint) {\n                 dcx.maps.method_map.insert(id,\n                                            val_dsr.read_method_origin(xcx));"}, {"sha": "1730373d16c2bc69aef88062276b37fb5ae964a2", "filename": "src/rustc/metadata/astencode_gen.rs", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e71703db02d6c8a1093a0fe465288bfb9b7eccbd/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71703db02d6c8a1093a0fe465288bfb9b7eccbd/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode_gen.rs?ref=e71703db02d6c8a1093a0fe465288bfb9b7eccbd", "patch": "@@ -8984,3 +8984,101 @@ fn deserialize_syntax_ast_inlined_item<S: std::serialization::deserializer>(s:\n    -> syntax::ast::inlined_item {\n     deserialize_171(s)\n }\n+/*[syntax::ast::node_id]*/\n+fn serialize_172<S: std::serialization::serializer>(s: S,\n+                                                    v:\n+                                                        [syntax::ast::node_id]) {\n+    s.emit_vec(vec::len(v), /*syntax::ast::node_id*/\n+               {||\n+                   vec::iteri(v,\n+                              {|i, e|\n+                                  s.emit_vec_elt(i, {|| serialize_27(s, e) })\n+                              })\n+               });\n+}\n+/*middle::last_use::is_last_use*/\n+fn serialize_173<S: std::serialization::serializer>(s: S,\n+                                                    v:\n+                                                        middle::last_use::is_last_use) {\n+    s.emit_enum(\"middle::last_use::is_last_use\",\n+\n+\n+                /*[syntax::ast::node_id]*/\n+                {||\n+                    alt v {\n+                      middle::last_use::is_last_use {\n+                        s.emit_enum_variant(\"middle::last_use::is_last_use\",\n+                                            0u, 0u, {|| })\n+                      }\n+                      middle::last_use::has_last_use {\n+                        s.emit_enum_variant(\"middle::last_use::has_last_use\",\n+                                            1u, 0u, {|| })\n+                      }\n+                      middle::last_use::closes_over(v0) {\n+                        s.emit_enum_variant(\"middle::last_use::closes_over\",\n+                                            2u, 1u,\n+                                            {||\n+                                                {\n+                                                    s.emit_enum_variant_arg(0u,\n+                                                                            {||\n+                                                                                serialize_172(s,\n+                                                                                              v0)\n+                                                                            })\n+                                                }\n+                                            })\n+                      }\n+                    }\n+                });\n+}\n+fn serialize_middle_last_use_is_last_use<S: std::serialization::serializer>(s:\n+                                                                                S,\n+                                                                            v:\n+                                                                                middle::last_use::is_last_use) {\n+    serialize_173(s, v);\n+}\n+/*[syntax::ast::node_id]*/\n+fn deserialize_172<S: std::serialization::deserializer>(s: S) ->\n+   [syntax::ast::node_id] {\n+    s.read_vec(\n+\n+               /*syntax::ast::node_id*/\n+               {|len|\n+                   vec::init_fn(len,\n+                                {|i|\n+                                    s.read_vec_elt(i, {|| deserialize_27(s) })\n+                                })\n+               })\n+}\n+/*middle::last_use::is_last_use*/\n+fn deserialize_173<S: std::serialization::deserializer>(s: S) ->\n+   middle::last_use::is_last_use {\n+    s.read_enum(\"middle::last_use::is_last_use\",\n+\n+\n+\n+\n+                /*[syntax::ast::node_id]*/\n+                {||\n+                    s.read_enum_variant({|v_id|\n+                                            alt check v_id {\n+                                              0u {\n+                                                middle::last_use::is_last_use\n+                                              }\n+                                              1u {\n+                                                middle::last_use::has_last_use\n+                                              }\n+                                              2u {\n+                                                middle::last_use::closes_over(s.read_enum_variant_arg(0u,\n+                                                                                                      {||\n+                                                                                                          deserialize_172(s)\n+                                                                                                      }))\n+                                              }\n+                                            }\n+                                        })\n+                })\n+}\n+fn deserialize_middle_last_use_is_last_use<S: std::serialization::deserializer>(s:\n+                                                                                    S)\n+   -> middle::last_use::is_last_use {\n+    deserialize_173(s)\n+}"}]}