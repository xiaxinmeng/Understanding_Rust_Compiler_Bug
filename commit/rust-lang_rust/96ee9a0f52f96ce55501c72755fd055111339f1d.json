{"sha": "96ee9a0f52f96ce55501c72755fd055111339f1d", "node_id": "C_kwDOAAsO6NoAKDk2ZWU5YTBmNTJmOTZjZTU1NTAxYzcyNzU1ZmQwNTUxMTEzMzlmMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-12T00:08:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-12T00:08:38Z"}, "message": "Auto merge of #2226 - InfRandomness:unix-helpers, r=RalfJung\n\nAdd unix helpers\n\nThis creates unix helper(s)", "tree": {"sha": "903e37508a569d87e0fa3650d25be0424260312b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903e37508a569d87e0fa3650d25be0424260312b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ee9a0f52f96ce55501c72755fd055111339f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ee9a0f52f96ce55501c72755fd055111339f1d", "html_url": "https://github.com/rust-lang/rust/commit/96ee9a0f52f96ce55501c72755fd055111339f1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ee9a0f52f96ce55501c72755fd055111339f1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada7b72a879d79aaa06f0a2a95edd520615da1a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada7b72a879d79aaa06f0a2a95edd520615da1a2", "html_url": "https://github.com/rust-lang/rust/commit/ada7b72a879d79aaa06f0a2a95edd520615da1a2"}, {"sha": "bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "html_url": "https://github.com/rust-lang/rust/commit/bc27fbb2f73b6f8d3f629b6954776a6572c2da19"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "134f556bf120456e6933d3ec43909a63a6194cb9", "filename": "src/helpers.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=96ee9a0f52f96ce55501c72755fd055111339f1d", "patch": "@@ -493,6 +493,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         )\n     }\n \n+    /// Helper function used inside the shims of foreign functions to assert that the target OS\n+    /// is part of the UNIX family. It panics showing a message with the `name` of the foreign function\n+    /// if this is not the case.\n+    fn assert_target_os_is_unix(&self, name: &str) {\n+        assert!(\n+            target_os_is_unix(self.eval_context_ref().tcx.sess.target.os.as_ref()),\n+            \"`{}` is only available for supported UNIX family targets\",\n+            name,\n+        );\n+    }\n+\n     /// Get last error variable as a place, lazily allocating thread-local storage for it if\n     /// necessary.\n     fn last_error_place(&mut self) -> InterpResult<'tcx, MPlaceTy<'tcx, Tag>> {\n@@ -895,3 +906,9 @@ impl std::fmt::Display for HexRange {\n         write!(f, \"[{:#x}..{:#x}]\", self.0.start.bytes(), self.0.end().bytes())\n     }\n }\n+\n+/// Helper function used inside the shims of foreign functions to check that\n+/// `target_os` is a supported UNIX OS.\n+pub fn target_os_is_unix(target_os: &str) -> bool {\n+    matches!(target_os, \"linux\" | \"macos\")\n+}"}, {"sha": "499e9f8a201fd843341ce43a38709ddc9842592d", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=96ee9a0f52f96ce55501c72755fd055111339f1d", "patch": "@@ -1,6 +1,7 @@\n use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n+use crate::helpers::target_os_is_unix;\n use crate::*;\n use shims::unix::dlsym as unix;\n use shims::windows::dlsym as windows;\n@@ -18,7 +19,8 @@ impl Dlsym {\n     pub fn from_str<'tcx>(name: &[u8], target_os: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         let name = &*String::from_utf8_lossy(name);\n         Ok(match target_os {\n-            \"linux\" | \"macos\" => unix::Dlsym::from_str(name, target_os)?.map(Dlsym::Posix),\n+            target if target_os_is_unix(target) =>\n+                unix::Dlsym::from_str(name, target)?.map(Dlsym::Posix),\n             \"windows\" => windows::Dlsym::from_str(name)?.map(Dlsym::Windows),\n             os => bug!(\"dlsym not implemented for target_os {}\", os),\n         })"}, {"sha": "85ecd2b719f207300f271681fae2407c13f84282", "filename": "src/shims/env.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=96ee9a0f52f96ce55501c72755fd055111339f1d", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_target::abi::Size;\n \n+use crate::helpers::target_os_is_unix;\n use crate::*;\n \n /// Check whether an operation that writes to a target buffer was successful.\n@@ -55,7 +56,7 @@ impl<'tcx> EnvVars<'tcx> {\n                 };\n                 if forward {\n                     let var_ptr = match target_os {\n-                        \"linux\" | \"macos\" =>\n+                        target if target_os_is_unix(target) =>\n                             alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx)?,\n                         \"windows\" => alloc_env_var_as_wide_str(name.as_ref(), value.as_ref(), ecx)?,\n                         unsupported =>\n@@ -113,11 +114,7 @@ impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mi\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, Pointer<Option<Tag>>> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`getenv` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"getenv\");\n \n         let name_ptr = this.read_pointer(name_op)?;\n         let name = this.read_os_str_from_c_str(name_ptr)?;\n@@ -211,11 +208,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         value_op: &OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`setenv` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"setenv\");\n \n         let name_ptr = this.read_pointer(name_op)?;\n         let value_ptr = this.read_pointer(value_op)?;\n@@ -285,11 +278,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn unsetenv(&mut self, name_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`unsetenv` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"unsetenv\");\n \n         let name_ptr = this.read_pointer(name_op)?;\n         let mut success = None;\n@@ -319,11 +308,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size_op: &OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, Pointer<Option<Tag>>> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`getcwd` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"getcwd\");\n \n         let buf = this.read_pointer(buf_op)?;\n         let size = this.read_scalar(size_op)?.to_machine_usize(&*this.tcx)?;\n@@ -378,11 +363,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn chdir(&mut self, path_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`chdir` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"chdir\");\n \n         let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n \n@@ -468,11 +449,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn getpid(&mut self) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`getpid` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"getpid\");\n \n         this.check_no_isolation(\"`getpid`\")?;\n "}, {"sha": "cd4fedad0fba020c932275582862970d1d3f65d8", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ee9a0f52f96ce55501c72755fd055111339f1d/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=96ee9a0f52f96ce55501c72755fd055111339f1d", "patch": "@@ -22,7 +22,7 @@ use rustc_target::{\n };\n \n use super::backtrace::EvalContextExt as _;\n-use crate::helpers::convert::Truncate;\n+use crate::helpers::{convert::Truncate, target_os_is_unix};\n use crate::*;\n \n /// Returned by `emulate_foreign_item_by_name`.\n@@ -702,7 +702,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => match this.tcx.sess.target.os.as_ref() {\n-                \"linux\" | \"macos\" => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                target if target_os_is_unix(target) => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n             }"}]}