{"sha": "08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Zjg3NTNkODAzNmJjYjUxYzhlYWQ4YTY5ZmIxNmNhY2M4YzgwZWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T23:43:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T23:56:02Z"}, "message": "Pull file reading out of the lexer", "tree": {"sha": "571d0a66e4a305c04b839af777234dd4a2df720b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571d0a66e4a305c04b839af777234dd4a2df720b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "html_url": "https://github.com/rust-lang/rust/commit/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05390b4b38b7ac9d7645afa0be9089a763677393", "url": "https://api.github.com/repos/rust-lang/rust/commits/05390b4b38b7ac9d7645afa0be9089a763677393", "html_url": "https://github.com/rust-lang/rust/commit/05390b4b38b7ac9d7645afa0be9089a763677393"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "64b04693d607ccc3f32187c99ccbe2e05d92e2bd", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "patch": "@@ -29,10 +29,10 @@ type reader =\n         fn err(str) ;\n     };\n \n-fn new_reader(&codemap::codemap cm, io::reader rdr, codemap::filemap filemap,\n+fn new_reader(&codemap::codemap cm, str src, codemap::filemap filemap,\n               @interner::interner[str] itr) -> reader {\n     obj reader(codemap::codemap cm,\n-               str file,\n+               str src,\n                uint len,\n                mutable uint col,\n                mutable uint pos,\n@@ -45,18 +45,18 @@ fn new_reader(&codemap::codemap cm, io::reader rdr, codemap::filemap filemap,\n                @interner::interner[str] itr) {\n         fn is_eof() -> bool { ret ch == -1 as char; }\n         fn mark() { mark_pos = pos; mark_chpos = chpos; }\n-        fn get_mark_str() -> str { ret str::slice(file, mark_pos, pos); }\n+        fn get_mark_str() -> str { ret str::slice(src, mark_pos, pos); }\n         fn get_mark_chpos() -> uint { ret mark_chpos; }\n         fn get_chpos() -> uint { ret chpos; }\n         fn curr() -> char { ret ch; }\n         fn next() -> char {\n             if (pos < len) {\n-                ret str::char_at(file, pos);\n+                ret str::char_at(src, pos);\n             } else { ret -1 as char; }\n         }\n         fn init() {\n             if (pos < len) {\n-                auto next = str::char_range_at(file, pos);\n+                auto next = str::char_range_at(src, pos);\n                 pos = next._1;\n                 ch = next._0;\n             }\n@@ -66,7 +66,7 @@ fn new_reader(&codemap::codemap cm, io::reader rdr, codemap::filemap filemap,\n                 col += 1u;\n                 chpos += 1u;\n                 if (ch == '\\n') { codemap::next_line(fm, chpos); col = 0u; }\n-                auto next = str::char_range_at(file, pos);\n+                auto next = str::char_range_at(src, pos);\n                 pos = next._1;\n                 ch = next._0;\n             } else { ch = -1 as char; }\n@@ -78,10 +78,9 @@ fn new_reader(&codemap::codemap cm, io::reader rdr, codemap::filemap filemap,\n             codemap::emit_error(some(rec(lo=chpos, hi=chpos)), m, cm);\n         }\n     }\n-    auto file = str::unsafe_from_bytes(rdr.read_whole_stream());\n     let vec[str] strs = [];\n     auto rd =\n-        reader(cm, file, str::byte_len(file), 0u, 0u, -1 as char, 0u,\n+        reader(cm, src, str::byte_len(src), 0u, 0u, -1 as char, 0u,\n                filemap.start_pos, filemap.start_pos, strs, filemap, itr);\n     rd.init();\n     ret rd;\n@@ -717,8 +716,9 @@ type lit = rec(str lit, uint pos);\n fn gather_comments_and_literals(&codemap::codemap cm, str path) ->\n    rec(vec[cmnt] cmnts, vec[lit] lits) {\n     auto srdr = io::file_reader(path);\n+    auto src = str::unsafe_from_bytes(srdr.read_whole_stream());\n     auto itr = @interner::mk[str](str::hash, str::eq);\n-    auto rdr = new_reader(cm, srdr, codemap::new_filemap(path, 0u), itr);\n+    auto rdr = new_reader(cm, src, codemap::new_filemap(path, 0u), itr);\n     let vec[cmnt] comments = [];\n     let vec[lit] literals = [];\n     let bool first_read = true;"}, {"sha": "5bc919ac12c10beff3c84e4152b2f5ce98001bbd", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "patch": "@@ -113,10 +113,11 @@ fn new_parser(parse_sess sess, ast::crate_cfg cfg,\n     auto ftype = SOURCE_FILE;\n     if (str::ends_with(path, \".rc\")) { ftype = CRATE_FILE; }\n     auto srdr = io::file_reader(path);\n+    auto src = str::unsafe_from_bytes(srdr.read_whole_stream());\n     auto filemap = codemap::new_filemap(path, pos);\n     vec::push(sess.cm.files, filemap);\n     auto itr = @interner::mk(str::hash, str::eq);\n-    auto rdr = lexer::new_reader(sess.cm, srdr, filemap, itr);\n+    auto rdr = lexer::new_reader(sess.cm, src, filemap, itr);\n     // Make sure npos points at first actual token:\n \n     lexer::consume_whitespace_and_comments(rdr);"}]}