{"sha": "90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4", "node_id": "C_kwDOAAsO6NoAKDkwYjEyMjJiMGJmNThkZjJjZGY4N2M0OGEzZGEwOWRjMDZkN2U1ZDQ", "commit": {"author": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2023-01-23T15:53:30Z"}, "committer": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2023-01-25T02:25:59Z"}, "message": "fix(ide-assists): unwrap block when it parent is let stmt", "tree": {"sha": "1bbcb6c8dcf144eaa5f1167973a0e7bcbe00d654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bbcb6c8dcf144eaa5f1167973a0e7bcbe00d654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4", "html_url": "https://github.com/rust-lang/rust/commit/90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa69f9f7d815632c3b80ea0395dd51c2938525a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa69f9f7d815632c3b80ea0395dd51c2938525a", "html_url": "https://github.com/rust-lang/rust/commit/8fa69f9f7d815632c3b80ea0395dd51c2938525a"}], "stats": {"total": 162, "additions": 116, "deletions": 46}, "files": [{"sha": "33b19a354b9aacaa087adfaae928011dd5f1e8e0", "filename": "crates/ide-assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 116, "deletions": 46, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=90b1222b0bf58df2cdf87c48a3da09dc06d7e5d4", "patch": "@@ -2,6 +2,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n+        make,\n     },\n     AstNode, SyntaxKind, TextRange, T,\n };\n@@ -37,61 +38,89 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n         parent = parent.ancestors().find(|it| ast::MatchExpr::can_cast(it.kind()))?\n     }\n \n-    if matches!(parent.kind(), SyntaxKind::STMT_LIST | SyntaxKind::EXPR_STMT | SyntaxKind::LET_STMT)\n-    {\n-        return acc.add(assist_id, assist_label, target, |builder| {\n+    let kind = parent.kind();\n+    if matches!(kind, SyntaxKind::STMT_LIST | SyntaxKind::EXPR_STMT) {\n+        acc.add(assist_id, assist_label, target, |builder| {\n             builder.replace(block.syntax().text_range(), update_expr_string(block.to_string()));\n-        });\n-    }\n-\n-    let parent = ast::Expr::cast(parent)?;\n-\n-    match parent.clone() {\n-        ast::Expr::ForExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::LoopExpr(_) => (),\n-        ast::Expr::MatchExpr(_) => block = block.dedent(IndentLevel(1)),\n-        ast::Expr::IfExpr(if_expr) => {\n-            let then_branch = if_expr.then_branch()?;\n-            if then_branch == block {\n-                if let Some(ancestor) = if_expr.syntax().parent().and_then(ast::IfExpr::cast) {\n-                    // For `else if` blocks\n-                    let ancestor_then_branch = ancestor.then_branch()?;\n-\n+        })\n+    } else if matches!(kind, SyntaxKind::LET_STMT) {\n+        let parent = ast::LetStmt::cast(parent)?;\n+        let pattern = ast::Pat::cast(parent.syntax().first_child()?)?;\n+        let ty = parent.ty();\n+        let list = block.stmt_list()?;\n+        let replaced = match list.syntax().last_child() {\n+            Some(last) => {\n+                let stmts: Vec<ast::Stmt> = list.statements().collect();\n+                let initializer = ast::Expr::cast(last.clone())?;\n+                let let_stmt = make::let_stmt(pattern, ty, Some(initializer));\n+                if stmts.len() > 0 {\n+                    let block = make::block_expr(stmts, None);\n+                    format!(\n+                        \"{}\\n    {}\",\n+                        update_expr_string(block.to_string()),\n+                        let_stmt.to_string()\n+                    )\n+                } else {\n+                    let_stmt.to_string()\n+                }\n+            }\n+            None => {\n+                let empty_tuple = make::expr_tuple([]);\n+                make::let_stmt(pattern, ty, Some(empty_tuple)).to_string()\n+            }\n+        };\n+        acc.add(assist_id, assist_label, target, |builder| {\n+            builder.replace(parent.syntax().text_range(), replaced);\n+        })\n+    } else {\n+        let parent = ast::Expr::cast(parent)?;\n+        match parent.clone() {\n+            ast::Expr::ForExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::LoopExpr(_) => (),\n+            ast::Expr::MatchExpr(_) => block = block.dedent(IndentLevel(1)),\n+            ast::Expr::IfExpr(if_expr) => {\n+                let then_branch = if_expr.then_branch()?;\n+                if then_branch == block {\n+                    if let Some(ancestor) = if_expr.syntax().parent().and_then(ast::IfExpr::cast) {\n+                        // For `else if` blocks\n+                        let ancestor_then_branch = ancestor.then_branch()?;\n+\n+                        return acc.add(assist_id, assist_label, target, |edit| {\n+                            let range_to_del_else_if = TextRange::new(\n+                                ancestor_then_branch.syntax().text_range().end(),\n+                                l_curly_token.text_range().start(),\n+                            );\n+                            let range_to_del_rest = TextRange::new(\n+                                then_branch.syntax().text_range().end(),\n+                                if_expr.syntax().text_range().end(),\n+                            );\n+\n+                            edit.delete(range_to_del_rest);\n+                            edit.delete(range_to_del_else_if);\n+                            edit.replace(\n+                                target,\n+                                update_expr_string_without_newline(then_branch.to_string()),\n+                            );\n+                        });\n+                    }\n+                } else {\n                     return acc.add(assist_id, assist_label, target, |edit| {\n-                        let range_to_del_else_if = TextRange::new(\n-                            ancestor_then_branch.syntax().text_range().end(),\n-                            l_curly_token.text_range().start(),\n-                        );\n-                        let range_to_del_rest = TextRange::new(\n+                        let range_to_del = TextRange::new(\n                             then_branch.syntax().text_range().end(),\n-                            if_expr.syntax().text_range().end(),\n+                            l_curly_token.text_range().start(),\n                         );\n \n-                        edit.delete(range_to_del_rest);\n-                        edit.delete(range_to_del_else_if);\n-                        edit.replace(\n-                            target,\n-                            update_expr_string_without_newline(then_branch.to_string()),\n-                        );\n+                        edit.delete(range_to_del);\n+                        edit.replace(target, update_expr_string_without_newline(block.to_string()));\n                     });\n                 }\n-            } else {\n-                return acc.add(assist_id, assist_label, target, |edit| {\n-                    let range_to_del = TextRange::new(\n-                        then_branch.syntax().text_range().end(),\n-                        l_curly_token.text_range().start(),\n-                    );\n-\n-                    edit.delete(range_to_del);\n-                    edit.replace(target, update_expr_string_without_newline(block.to_string()));\n-                });\n             }\n-        }\n-        _ => return None,\n-    };\n+            _ => return None,\n+        };\n \n-    acc.add(assist_id, assist_label, target, |builder| {\n-        builder.replace(parent.syntax().text_range(), update_expr_string(block.to_string()));\n-    })\n+        acc.add(assist_id, assist_label, target, |builder| {\n+            builder.replace(parent.syntax().text_range(), update_expr_string(block.to_string()));\n+        })\n+    }\n }\n \n fn update_expr_string(expr_string: String) -> String {\n@@ -724,6 +753,19 @@ fn main() -> i32 {\n         check_assist(\n             unwrap_block,\n             r#\"\n+fn main() {\n+    let x = {$0};\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = ();\n+}\n+\"#,\n+        );\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n fn main() {\n     let x = {$0\n         bar\n@@ -734,6 +776,34 @@ fn main() {\n fn main() {\n     let x = bar;\n }\n+\"#,\n+        );\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() -> i32 {\n+    let _ = {$01; 2};\n+}\n+\"#,\n+            r#\"\n+fn main() -> i32 {\n+    1;\n+    let _ = 2;\n+}\n+\"#,\n+        );\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() -> i32 {\n+    let mut a = {$01; 2};\n+}\n+\"#,\n+            r#\"\n+fn main() -> i32 {\n+    1;\n+    let mut a = 2;\n+}\n \"#,\n         );\n     }"}]}