{"sha": "588dc3897b1a510b7f65ca5e53ba5a99224c1923", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OGRjMzg5N2IxYTUxMGI3ZjY1Y2E1ZTUzYmE1YTk5MjI0YzE5MjM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-20T08:43:33Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-20T21:53:28Z"}, "message": "Make trans use the new ast_map instead of building its own", "tree": {"sha": "b85dd40bec4198ed6d41a686538b44844c43d363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b85dd40bec4198ed6d41a686538b44844c43d363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/588dc3897b1a510b7f65ca5e53ba5a99224c1923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/588dc3897b1a510b7f65ca5e53ba5a99224c1923", "html_url": "https://github.com/rust-lang/rust/commit/588dc3897b1a510b7f65ca5e53ba5a99224c1923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/588dc3897b1a510b7f65ca5e53ba5a99224c1923/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "html_url": "https://github.com/rust-lang/rust/commit/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "3644a1d271b65881f0428ec973d84534d5163ea1", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/588dc3897b1a510b7f65ca5e53ba5a99224c1923/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588dc3897b1a510b7f65ca5e53ba5a99224c1923/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=588dc3897b1a510b7f65ca5e53ba5a99224c1923", "patch": "@@ -96,8 +96,8 @@ fn compile_input(session::session sess, eval::env env, str input,\n          bind middle::alias::check_crate(@ty_cx, crate));\n     auto llmod =\n         time[llvm::llvm::ModuleRef](time_passes, \"translation\",\n-                                    bind trans::trans_crate(sess, crate,\n-                                                            ty_cx, output));\n+                                    bind trans::trans_crate\n+                                    (sess, crate, ty_cx, output, ast_map));\n     time[()](time_passes, \"LLVM passes\",\n              bind link::write::run_passes(sess, llmod, output));\n }"}, {"sha": "2d18831a7b820f80893567636b86b7274f9f92cd", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/588dc3897b1a510b7f65ca5e53ba5a99224c1923/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588dc3897b1a510b7f65ca5e53ba5a99224c1923/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=588dc3897b1a510b7f65ca5e53ba5a99224c1923", "patch": "@@ -603,14 +603,18 @@ fn encode_info_for_items(&@trans::crate_ctxt cx, &ebml::writer ebml_w) ->\n    vec[tup(int, uint)] {\n     let vec[tup(int, uint)] index = [];\n     ebml::start_tag(ebml_w, tag_items_data);\n-    for each (@tup(node_id, @item) kvp in cx.items.items()) {\n-        index += [tup(kvp._0, ebml_w.writer.tell())];\n-        encode_info_for_item(cx, ebml_w, kvp._1, index);\n-    }\n-    for each (@tup(node_id, @native_item) kvp in\n-             cx.native_items.items()) {\n-        index += [tup(kvp._0, ebml_w.writer.tell())];\n-        encode_info_for_native_item(cx, ebml_w, kvp._1);\n+    for each (@tup(node_id, ast_map::ast_node) kvp in cx.ast_map.items()) {\n+        alt (kvp._1) {\n+            case (ast_map::node_item(?i)) {\n+                index += [tup(kvp._0, ebml_w.writer.tell())];\n+                encode_info_for_item(cx, ebml_w, i, index);\n+            }\n+            case (ast_map::node_native_item(?i)) {\n+                index += [tup(kvp._0, ebml_w.writer.tell())];\n+                encode_info_for_native_item(cx, ebml_w, i);\n+            }\n+            case (_) {}\n+        }\n     }\n     ebml::end_tag(ebml_w);\n     ret index;"}, {"sha": "0743e19aa359147df5807aafb69f2dbb70782d88", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/588dc3897b1a510b7f65ca5e53ba5a99224c1923/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588dc3897b1a510b7f65ca5e53ba5a99224c1923/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=588dc3897b1a510b7f65ca5e53ba5a99224c1923", "patch": "@@ -126,8 +126,7 @@ type crate_ctxt =\n         // of the first instruction of the item's definition in the executable\n         // we're generating.\n         hashmap[ast::node_id, ValueRef] item_ids,\n-        hashmap[ast::node_id, @ast::item] items,\n-        hashmap[ast::node_id, @ast::native_item] native_items,\n+        ast_map::map ast_map,\n         hashmap[ast::node_id, str] item_symbols,\n         mutable option::t[ValueRef] main_fn,\n         str crate_meta_name,\n@@ -7625,7 +7624,9 @@ fn register_fn_pair(&@crate_ctxt cx, str ps, TypeRef llfnty, ValueRef llfn,\n // Returns the number of type parameters that the given native function has.\n fn native_fn_ty_param_count(&@crate_ctxt cx, ast::node_id id) -> uint {\n     auto count;\n-    auto native_item = cx.native_items.get(id);\n+    auto native_item = alt (cx.ast_map.get(id)) {\n+        case (ast_map::node_native_item(?i)) { i }\n+    };\n     alt (native_item.node) {\n         case (ast::native_item_ty(_, _)) {\n             cx.sess.bug(\"decl_native_fn_and_pair(): native fn isn't \" +\n@@ -7668,7 +7669,9 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx, &span sp, vec[str] path,\n     auto lltop = bcx.llbb;\n     // Declare the function itself.\n \n-    auto item = ccx.native_items.get(id);\n+    auto item = alt (ccx.ast_map.get(id)) {\n+        case (ast_map::node_native_item(?i)) { i }\n+    };\n     auto fn_type = node_id_type(ccx, id); // NB: has no type params\n \n     auto abi = ty::ty_fn_abi(ccx.tcx, fn_type);\n@@ -7807,14 +7810,11 @@ fn collect_native_item(@crate_ctxt ccx, &@ast::native_item i, &vec[str] pt,\n                        &vt[vec[str]] v) {\n     alt (i.node) {\n         case (ast::native_item_fn(?name, _, _, _, ?id)) {\n-            ccx.native_items.insert(id, i);\n             if (!ccx.obj_methods.contains_key(id)) {\n                 decl_native_fn_and_pair(ccx, i.span, pt, name, id);\n             }\n         }\n-        case (ast::native_item_ty(_, ?id)) {\n-            ccx.native_items.insert(id, i);\n-        }\n+        case (_) {}\n     }\n }\n \n@@ -7830,13 +7830,8 @@ fn collect_item_1(@crate_ctxt ccx, &@ast::item i, &vec[str] pt,\n             llvm::LLVMSetLinkage(g,\n                                  lib::llvm::LLVMInternalLinkage as\n                                      llvm::Linkage);\n-            ccx.items.insert(i.id, i);\n             ccx.consts.insert(i.id, g);\n         }\n-        case (ast::item_mod(?m)) { ccx.items.insert(i.id, i); }\n-        case (ast::item_native_mod(_)) { ccx.items.insert(i.id, i); }\n-        case (ast::item_ty(_, _)) { ccx.items.insert(i.id, i); }\n-        case (ast::item_tag(_, _)) { ccx.items.insert(i.id, i); }\n         case (_) { }\n     }\n }\n@@ -7847,13 +7842,11 @@ fn collect_item_2(&@crate_ctxt ccx, &@ast::item i, &vec[str] pt,\n     visit::visit_item(i, new_pt, v);\n     alt (i.node) {\n         case (ast::item_fn(?f, ?tps)) {\n-            ccx.items.insert(i.id, i);\n             if (!ccx.obj_methods.contains_key(i.id)) {\n                 decl_fn_and_pair(ccx, i.span, new_pt, \"fn\", tps, i.id, i.id);\n             }\n         }\n         case (ast::item_obj(?ob, ?tps, ?ctor_id)) {\n-            ccx.items.insert(ctor_id, i);\n             decl_fn_and_pair(ccx, i.span, new_pt, \"obj_ctor\", tps, i.id,\n                              ctor_id);\n             for (@ast::method m in ob.methods) {\n@@ -8105,7 +8098,7 @@ fn create_crate_map(&@crate_ctxt ccx) -> ValueRef {\n }\n \n fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n-               &str output) -> ModuleRef {\n+               &str output, &ast_map::map amap) -> ModuleRef {\n     auto llmod =\n         llvm::LLVMModuleCreateWithNameInContext(str::buf(\"rust_out\"),\n                                                 llvm::LLVMGetGlobalContext());\n@@ -8132,8 +8125,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n              externs=new_str_hash[ValueRef](),\n              intrinsics=intrinsics,\n              item_ids=new_int_hash[ValueRef](),\n-             items=new_int_hash[@ast::item](),\n-             native_items=new_int_hash[@ast::native_item](),\n+             ast_map=amap,\n              item_symbols=new_int_hash[str](),\n              mutable main_fn=none[ValueRef],\n              crate_meta_name=crate_meta_name(sess, *crate, output),"}]}