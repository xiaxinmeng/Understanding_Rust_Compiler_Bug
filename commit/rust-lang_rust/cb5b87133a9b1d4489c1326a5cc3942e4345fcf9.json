{"sha": "cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNWI4NzEzM2E5YjFkNDQ4OWMxMzI2YTVjYzM5NDJlNDM0NWZjZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-24T00:30:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-24T00:30:25Z"}, "message": "Auto merge of #78636 - dtolnay:puncteq, r=petrochenkov\n\nAdd PartialEq<char> for proc_macro::Punct\n\n`punct.as_char() == '\u2591'` is pervasive when parsing anything involving punct. I think `punct == '\u2591'` is sufficiently unambiguous that it makes sense to provide the impl.\n\nhttps://github.com/rust-lang/rust/blob/1899c489d4c30b2640d30b77ac04f0a548834d81/library/proc_macro/src/quote.rs#L79\nhttps://github.com/rust-lang/rust/blob/1899c489d4c30b2640d30b77ac04f0a548834d81/library/proc_macro/src/quote.rs#L83\nhttps://github.com/rust-lang/rust/blob/1899c489d4c30b2640d30b77ac04f0a548834d81/src/test/ui/suggestions/auxiliary/issue-61963.rs#L26\nhttps://github.com/rust-lang/rust/blob/1899c489d4c30b2640d30b77ac04f0a548834d81/src/test/ui/proc-macro/auxiliary/three-equals.rs#L23", "tree": {"sha": "e5154ab4221f8bbc0c9bebe5ec6f61b568a35225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5154ab4221f8bbc0c9bebe5ec6f61b568a35225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "html_url": "https://github.com/rust-lang/rust/commit/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32a0cce2fd5aaf5f361192af59cf1f2afa5f0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32a0cce2fd5aaf5f361192af59cf1f2afa5f0ac", "html_url": "https://github.com/rust-lang/rust/commit/f32a0cce2fd5aaf5f361192af59cf1f2afa5f0ac"}, {"sha": "4652032c1472d3be3bb1a257393daea7bb2743f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4652032c1472d3be3bb1a257393daea7bb2743f1", "html_url": "https://github.com/rust-lang/rust/commit/4652032c1472d3be3bb1a257393daea7bb2743f1"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "39be7caf419c3d98bbe96e6a8c14423ad8c14ef5", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "patch": "@@ -842,6 +842,13 @@ impl fmt::Debug for Punct {\n     }\n }\n \n+#[stable(feature = \"proc_macro_punct_eq\", since = \"1.49.0\")]\n+impl PartialEq<char> for Punct {\n+    fn eq(&self, rhs: &char) -> bool {\n+        self.as_char() == *rhs\n+    }\n+}\n+\n /// An identifier (`ident`).\n #[derive(Clone)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]"}, {"sha": "d2e6b0bb8093bb5ca329992d88d24d866c0153af", "filename": "library/proc_macro/tests/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9/library%2Fproc_macro%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b87133a9b1d4489c1326a5cc3942e4345fcf9/library%2Fproc_macro%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Ftests%2Ftest.rs?ref=cb5b87133a9b1d4489c1326a5cc3942e4345fcf9", "patch": "@@ -1,6 +1,6 @@\n #![feature(proc_macro_span)]\n \n-use proc_macro::LineColumn;\n+use proc_macro::{LineColumn, Punct};\n \n #[test]\n fn test_line_column_ord() {\n@@ -10,3 +10,11 @@ fn test_line_column_ord() {\n     assert!(line0_column0 < line0_column1);\n     assert!(line0_column1 < line1_column0);\n }\n+\n+#[test]\n+fn test_punct_eq() {\n+    // Good enough if it typechecks, since proc_macro::Punct can't exist in a test.\n+    fn _check(punct: Punct) {\n+        let _ = punct == ':';\n+    }\n+}"}]}