{"sha": "6dffaa9175449fa771e456210f339cdabe9d0c6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZmZhYTkxNzU0NDlmYTc3MWU0NTYyMTBmMzM5Y2RhYmU5ZDBjNmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-12-28T09:11:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-19T19:27:12Z"}, "message": "Hide even more of rustc_trans", "tree": {"sha": "564d0fe76d6344622eb1271af68355f342d2b3ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/564d0fe76d6344622eb1271af68355f342d2b3ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dffaa9175449fa771e456210f339cdabe9d0c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dffaa9175449fa771e456210f339cdabe9d0c6d", "html_url": "https://github.com/rust-lang/rust/commit/6dffaa9175449fa771e456210f339cdabe9d0c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dffaa9175449fa771e456210f339cdabe9d0c6d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2e808180e13e6e8411392ba164215237eb144a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2e808180e13e6e8411392ba164215237eb144a", "html_url": "https://github.com/rust-lang/rust/commit/bd2e808180e13e6e8411392ba164215237eb144a"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "fd5aa1364d381951bcf3025a77b4f62164064da5", "filename": "src/librustc_trans/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fallocator.rs?ref=6dffaa9175449fa771e456210f339cdabe9d0c6d", "patch": "@@ -19,7 +19,7 @@ use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n use ModuleLlvm;\n use llvm::{self, False, True};\n \n-pub unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind) {\n+pub(crate) unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind) {\n     let llcx = mods.llcx;\n     let llmod = mods.llmod;\n     let usize = match &tcx.sess.target.target.target_pointer_width[..] {"}, {"sha": "62b65b7952ee29659267e9240230ddea252e98eb", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=6dffaa9175449fa771e456210f339cdabe9d0c6d", "patch": "@@ -141,10 +141,10 @@ pub fn remove(sess: &Session, path: &Path) {\n \n /// Perform the linkage portion of the compilation phase. This will generate all\n /// of the requested outputs for this compilation session.\n-pub fn link_binary(sess: &Session,\n-                   trans: &CrateTranslation,\n-                   outputs: &OutputFilenames,\n-                   crate_name: &str) -> Vec<PathBuf> {\n+pub(crate) fn link_binary(sess: &Session,\n+                          trans: &CrateTranslation,\n+                          outputs: &OutputFilenames,\n+                          crate_name: &str) -> Vec<PathBuf> {\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-trans, as they will error.\n@@ -201,9 +201,9 @@ fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilen\n     out_filename\n }\n \n-pub fn each_linked_rlib(sess: &Session,\n-                        info: &CrateInfo,\n-                        f: &mut FnMut(CrateNum, &Path)) -> Result<(), String> {\n+pub(crate) fn each_linked_rlib(sess: &Session,\n+                               info: &CrateInfo,\n+                               f: &mut FnMut(CrateNum, &Path)) -> Result<(), String> {\n     let crates = info.used_crates_static.iter();\n     let fmts = sess.dependency_formats.borrow();\n     let fmts = fmts.get(&config::CrateTypeExecutable)\n@@ -247,7 +247,7 @@ pub fn each_linked_rlib(sess: &Session,\n /// It's unusual for a crate to not participate in LTO. Typically only\n /// compiler-specific and unstable crates have a reason to not participate in\n /// LTO.\n-pub fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool {\n+pub(crate) fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool {\n     // If our target enables builtin function lowering in LLVM then the\n     // crates providing these functions don't participate in LTO (e.g.\n     // no_builtins or compiler builtins crates)."}, {"sha": "b612247ffcd42bfbd867cd4677e5ee9000ece992", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=6dffaa9175449fa771e456210f339cdabe9d0c6d", "patch": "@@ -42,7 +42,7 @@ pub fn crate_type_allows_lto(crate_type: config::CrateType) -> bool {\n     }\n }\n \n-pub enum LtoModuleTranslation {\n+pub(crate) enum LtoModuleTranslation {\n     Fat {\n         module: Option<ModuleTranslation>,\n         _serialized_bitcode: Vec<SerializedModule>,\n@@ -65,9 +65,9 @@ impl LtoModuleTranslation {\n     /// points to LLVM data structures owned by this `LtoModuleTranslation`.\n     /// It's intended that the module returned is immediately code generated and\n     /// dropped, and then this LTO module is dropped.\n-    pub unsafe fn optimize(&mut self,\n-                           cgcx: &CodegenContext,\n-                           timeline: &mut Timeline)\n+    pub(crate) unsafe fn optimize(&mut self,\n+                                  cgcx: &CodegenContext,\n+                                  timeline: &mut Timeline)\n         -> Result<ModuleTranslation, FatalError>\n     {\n         match *self {\n@@ -100,7 +100,7 @@ pub enum LTOMode {\n     JustThisCrate,\n }\n \n-pub fn run(cgcx: &CodegenContext,\n+pub(crate) fn run(cgcx: &CodegenContext,\n            modules: Vec<ModuleTranslation>,\n            mode: LTOMode,\n            timeline: &mut Timeline)"}, {"sha": "a013af7a4600ef342218823abbbea1d890e26de1", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=6dffaa9175449fa771e456210f339cdabe9d0c6d", "patch": "@@ -363,15 +363,15 @@ impl CodegenContext {\n         Handler::with_emitter(true, false, Box::new(self.diag_emitter.clone()))\n     }\n \n-    pub fn config(&self, kind: ModuleKind) -> &ModuleConfig {\n+    pub(crate) fn config(&self, kind: ModuleKind) -> &ModuleConfig {\n         match kind {\n             ModuleKind::Regular => &self.regular_module_config,\n             ModuleKind::Metadata => &self.metadata_module_config,\n             ModuleKind::Allocator => &self.allocator_module_config,\n         }\n     }\n \n-    pub fn save_temp_bitcode(&self, trans: &ModuleTranslation, name: &str) {\n+    pub(crate) fn save_temp_bitcode(&self, trans: &ModuleTranslation, name: &str) {\n         if !self.save_temps {\n             return\n         }\n@@ -822,7 +822,7 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n     }\n }\n \n-pub struct CompiledModules {\n+pub(crate) struct CompiledModules {\n     pub modules: Vec<CompiledModule>,\n     pub metadata_module: CompiledModule,\n     pub allocator_module: Option<CompiledModule>,\n@@ -1162,7 +1162,7 @@ fn produce_final_output_artifacts(sess: &Session,\n     // These are used in linking steps and will be cleaned up afterward.\n }\n \n-pub fn dump_incremental_data(trans: &CrateTranslation) {\n+pub(crate) fn dump_incremental_data(trans: &CrateTranslation) {\n     println!(\"[incremental] Re-using {} out of {} modules\",\n               trans.modules.iter().filter(|m| m.pre_existing).count(),\n               trans.modules.len());\n@@ -2144,7 +2144,7 @@ pub struct OngoingCrateTranslation {\n }\n \n impl OngoingCrateTranslation {\n-    pub fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n+    pub(crate) fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n         self.shared_emitter_main.check(sess, true);\n         let compiled_modules = match self.future.join() {\n             Ok(Ok(compiled_modules)) => compiled_modules,\n@@ -2212,9 +2212,9 @@ impl OngoingCrateTranslation {\n         trans\n     }\n \n-    pub fn submit_pre_translated_module_to_llvm(&self,\n-                                                tcx: TyCtxt,\n-                                                mtrans: ModuleTranslation) {\n+    pub(crate) fn submit_pre_translated_module_to_llvm(&self,\n+                                                       tcx: TyCtxt,\n+                                                       mtrans: ModuleTranslation) {\n         self.wait_for_signal_to_translate_item();\n         self.check_for_errors(tcx.sess);\n \n@@ -2247,9 +2247,9 @@ impl OngoingCrateTranslation {\n     }\n }\n \n-pub fn submit_translated_module_to_llvm(tcx: TyCtxt,\n-                                        mtrans: ModuleTranslation,\n-                                        cost: u64) {\n+pub(crate) fn submit_translated_module_to_llvm(tcx: TyCtxt,\n+                                               mtrans: ModuleTranslation,\n+                                               cost: u64) {\n     let llvm_work_item = WorkItem::Optimize(mtrans);\n     drop(tcx.tx_to_llvm_workers.send(Box::new(Message::TranslationDone {\n         llvm_work_item,"}, {"sha": "d1dec63e0d8b5c7c399f257fad58e728c81f4692", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dffaa9175449fa771e456210f339cdabe9d0c6d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=6dffaa9175449fa771e456210f339cdabe9d0c6d", "patch": "@@ -250,7 +250,7 @@ impl TransCrate for LlvmTransCrate {\n     }\n }\n \n-pub struct ModuleTranslation {\n+struct ModuleTranslation {\n     /// The name of the module. When the crate may be saved between\n     /// compilations, incremental compilation requires that name be\n     /// unique amongst **all** crates.  Therefore, it should contain\n@@ -263,7 +263,7 @@ pub struct ModuleTranslation {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-pub enum ModuleKind {\n+enum ModuleKind {\n     Regular,\n     Metadata,\n     Allocator,\n@@ -316,7 +316,7 @@ impl ModuleTranslation {\n }\n \n #[derive(Debug)]\n-pub struct CompiledModule {\n+struct CompiledModule {\n     name: String,\n     llmod_id: String,\n     kind: ModuleKind,\n@@ -335,7 +335,7 @@ enum ModuleSource {\n }\n \n #[derive(Debug)]\n-pub struct ModuleLlvm {\n+struct ModuleLlvm {\n     llcx: llvm::ContextRef,\n     llmod: llvm::ModuleRef,\n     tm: llvm::TargetMachineRef,\n@@ -354,7 +354,7 @@ impl Drop for ModuleLlvm {\n     }\n }\n \n-pub struct CrateTranslation {\n+struct CrateTranslation {\n     crate_name: Symbol,\n     modules: Vec<CompiledModule>,\n     allocator_module: Option<CompiledModule>,\n@@ -367,7 +367,7 @@ pub struct CrateTranslation {\n }\n \n // Misc info we load from metadata to persist beyond the tcx\n-pub struct CrateInfo {\n+struct CrateInfo {\n     panic_runtime: Option<CrateNum>,\n     compiler_builtins: Option<CrateNum>,\n     profiler_runtime: Option<CrateNum>,"}]}