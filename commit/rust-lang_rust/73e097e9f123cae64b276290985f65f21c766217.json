{"sha": "73e097e9f123cae64b276290985f65f21c766217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZTA5N2U5ZjEyM2NhZTY0YjI3NjI5MDk4NWY2NWYyMWM3NjYyMTc=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-08-07T07:05:09Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-08-07T07:05:09Z"}, "message": "Fix the build after https://github.com/rust-lang/rust/pull/53016\n\nIn-band lifetimes are no longer in the edition, so update the one place that was using them.", "tree": {"sha": "86faaf051a892ebcc76f5f17b7e1188c4134976d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86faaf051a892ebcc76f5f17b7e1188c4134976d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73e097e9f123cae64b276290985f65f21c766217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73e097e9f123cae64b276290985f65f21c766217", "html_url": "https://github.com/rust-lang/rust/commit/73e097e9f123cae64b276290985f65f21c766217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73e097e9f123cae64b276290985f65f21c766217/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b18a3c5b6073375d3cb6d17a97e7a2ba0474fe38", "url": "https://api.github.com/repos/rust-lang/rust/commits/b18a3c5b6073375d3cb6d17a97e7a2ba0474fe38", "html_url": "https://github.com/rust-lang/rust/commit/b18a3c5b6073375d3cb6d17a97e7a2ba0474fe38"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "d8bbf0098d22a538fe0a856e9a2f5013b0d78fa8", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73e097e9f123cae64b276290985f65f21c766217/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e097e9f123cae64b276290985f65f21c766217/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=73e097e9f123cae64b276290985f65f21c766217", "patch": "@@ -217,7 +217,7 @@ impl EarlyLintPass for Pass {\n     }\n }\n \n-fn check_tts(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> Option<String> {\n+fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> Option<String> {\n     let tts = TokenStream::from(tts.clone());\n     let mut parser = parser::Parser::new(\n         &cx.sess.parse_sess,"}]}