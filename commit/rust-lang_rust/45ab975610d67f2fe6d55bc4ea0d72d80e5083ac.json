{"sha": "45ab975610d67f2fe6d55bc4ea0d72d80e5083ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YWI5NzU2MTBkNjdmMmZlNmQ1NWJjNGVhMGQ3MmQ4MGU1MDgzYWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-14T15:46:28Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-14T15:46:28Z"}, "message": "Add a comment explaining the static \"local\" during `deallocate_local`", "tree": {"sha": "092a748f6a48b70268aada95a5dc2d5dd661ca52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/092a748f6a48b70268aada95a5dc2d5dd661ca52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45ab975610d67f2fe6d55bc4ea0d72d80e5083ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45ab975610d67f2fe6d55bc4ea0d72d80e5083ac", "html_url": "https://github.com/rust-lang/rust/commit/45ab975610d67f2fe6d55bc4ea0d72d80e5083ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45ab975610d67f2fe6d55bc4ea0d72d80e5083ac/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e562a4d642736f78f52292feb05a5a1048de7d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e562a4d642736f78f52292feb05a5a1048de7d5", "html_url": "https://github.com/rust-lang/rust/commit/2e562a4d642736f78f52292feb05a5a1048de7d5"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "2f28063ff86ddbd2e2c6c772518c1092b1d8587e", "filename": "src/eval_context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45ab975610d67f2fe6d55bc4ea0d72d80e5083ac/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ab975610d67f2fe6d55bc4ea0d72d80e5083ac/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=45ab975610d67f2fe6d55bc4ea0d72d80e5083ac", "patch": "@@ -414,7 +414,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             let ptr = ptr.to_ptr()?;\n             self.memory.dump_alloc(ptr.alloc_id);\n             match self.memory.get(ptr.alloc_id)?.kind {\n-                ::memory::Kind::Static | ::memory::Kind::UninitializedStatic => {},\n+                // for a constant like `const FOO: &i32 = &1;` the local containing\n+                // the `1` is referred to by the global. We transitively marked everything\n+                // the global refers to as static itself, so we don't free it here\n+                ::memory::Kind::Static => {}\n                 ::memory::Kind::Stack => self.memory.deallocate(ptr, None, ::memory::Kind::Stack)?,\n                 other => bug!(\"local contained non-stack memory: {:?}\", other),\n             }"}]}