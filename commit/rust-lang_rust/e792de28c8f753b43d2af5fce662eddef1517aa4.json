{"sha": "e792de28c8f753b43d2af5fce662eddef1517aa4", "node_id": "C_kwDOAAsO6NoAKGU3OTJkZTI4YzhmNzUzYjQzZDJhZjVmY2U2NjJlZGRlZjE1MTdhYTQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-20T14:57:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-12T20:02:33Z"}, "message": "linker: Simplify linking of `compiler_builtins` and `profiler_builtins`\n\nThis also fixes linking of native libraries bundled into these crates when `-Zpacked-bundled-libs` is enabled", "tree": {"sha": "c979d8442f183d4b10739e11cd65f0ca5c205188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c979d8442f183d4b10739e11cd65f0ca5c205188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e792de28c8f753b43d2af5fce662eddef1517aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e792de28c8f753b43d2af5fce662eddef1517aa4", "html_url": "https://github.com/rust-lang/rust/commit/e792de28c8f753b43d2af5fce662eddef1517aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e792de28c8f753b43d2af5fce662eddef1517aa4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae3c936eb963cedc6523baeeaa9a58d13fa4c2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae3c936eb963cedc6523baeeaa9a58d13fa4c2e", "html_url": "https://github.com/rust-lang/rust/commit/cae3c936eb963cedc6523baeeaa9a58d13fa4c2e"}], "stats": {"total": 120, "additions": 46, "deletions": 74}, "files": [{"sha": "e7a67bc64e37bbce2e5c1304ce562acda30eb5ce", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 33, "deletions": 68, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/e792de28c8f753b43d2af5fce662eddef1517aa4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e792de28c8f753b43d2af5fce662eddef1517aa4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=e792de28c8f753b43d2af5fce662eddef1517aa4", "patch": "@@ -2425,10 +2425,6 @@ fn add_local_native_libraries(\n     );\n }\n \n-/// # Linking Rust crates and their non-bundled static libraries\n-///\n-/// Rust crates are not considered at all when creating an rlib output. All dependencies will be\n-/// linked when producing the final output (instead of the intermediate rlib version).\n fn add_upstream_rust_crates<'a>(\n     cmd: &mut dyn Linker,\n     sess: &'a Session,\n@@ -2444,67 +2440,52 @@ fn add_upstream_rust_crates<'a>(\n     // Linking to a rlib involves just passing it to the linker (the linker\n     // will slurp up the object files inside), and linking to a dynamic library\n     // involves just passing the right -l flag.\n-\n     let (_, data) = codegen_results\n         .crate_info\n         .dependency_formats\n         .iter()\n         .find(|(ty, _)| *ty == crate_type)\n         .expect(\"failed to find crate type in dependency format list\");\n \n-    // Invoke get_used_crates to ensure that we get a topological sorting of\n-    // crates.\n-    let deps = &codegen_results.crate_info.used_crates;\n-\n-    let mut compiler_builtins = None;\n     let search_paths = OnceCell::new();\n-\n-    for &cnum in deps.iter() {\n-        // We may not pass all crates through to the linker. Some crates may\n-        // appear statically in an existing dylib, meaning we'll pick up all the\n-        // symbols from the dylib.\n+    for &cnum in &codegen_results.crate_info.used_crates {\n+        // We may not pass all crates through to the linker. Some crates may appear statically in\n+        // an existing dylib, meaning we'll pick up all the symbols from the dylib.\n+        // We must always link crates `compiler_builtins` and `profiler_builtins` statically.\n+        // Even if they were already included into a dylib\n+        // (e.g. `libstd` when `-C prefer-dynamic` is used).\n         let linkage = data[cnum.as_usize() - 1];\n-        let bundled_libs =\n-            if sess.opts.unstable_opts.packed_bundled_libs && linkage == Linkage::Static {\n-                codegen_results.crate_info.native_libraries[&cnum]\n-                    .iter()\n-                    .filter_map(|lib| lib.filename)\n-                    .collect::<FxHashSet<_>>()\n-            } else {\n-                Default::default()\n-            };\n+        let link_static_crate = linkage == Linkage::Static\n+            || linkage == Linkage::IncludedFromDylib\n+                && (codegen_results.crate_info.compiler_builtins == Some(cnum)\n+                    || codegen_results.crate_info.profiler_runtime == Some(cnum));\n+\n+        let mut bundled_libs = Default::default();\n         match linkage {\n-            _ if codegen_results.crate_info.profiler_runtime == Some(cnum) => {\n-                add_static_crate(\n-                    cmd,\n-                    sess,\n-                    archive_builder_builder,\n-                    codegen_results,\n-                    tmpdir,\n-                    cnum,\n-                    &Default::default(),\n-                );\n-            }\n-            // compiler-builtins are always placed last to ensure that they're\n-            // linked correctly.\n-            _ if codegen_results.crate_info.compiler_builtins == Some(cnum) => {\n-                assert!(compiler_builtins.is_none());\n-                compiler_builtins = Some(cnum);\n+            Linkage::Static | Linkage::IncludedFromDylib => {\n+                if link_static_crate {\n+                    if sess.opts.unstable_opts.packed_bundled_libs {\n+                        bundled_libs = codegen_results.crate_info.native_libraries[&cnum]\n+                            .iter()\n+                            .filter_map(|lib| lib.filename)\n+                            .collect();\n+                    }\n+                    add_static_crate(\n+                        cmd,\n+                        sess,\n+                        archive_builder_builder,\n+                        codegen_results,\n+                        tmpdir,\n+                        cnum,\n+                        &bundled_libs,\n+                    );\n+                }\n             }\n-            Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n-            Linkage::Static => add_static_crate(\n-                cmd,\n-                sess,\n-                archive_builder_builder,\n-                codegen_results,\n-                tmpdir,\n-                cnum,\n-                &bundled_libs,\n-            ),\n             Linkage::Dynamic => {\n                 let src = &codegen_results.crate_info.used_crate_source[&cnum];\n                 add_dynamic_crate(cmd, sess, &src.dylib.as_ref().unwrap().0);\n             }\n+            Linkage::NotLinked => {}\n         }\n \n         // Static libraries are linked for a subset of linked upstream crates.\n@@ -2514,7 +2495,8 @@ fn add_upstream_rust_crates<'a>(\n         // the native library because it is already linked into the dylib, and even if\n         // inline/const/generic functions from the dylib can refer to symbols from the native\n         // library, those symbols should be exported and available from the dylib anyway.\n-        let link_static = linkage == Linkage::Static;\n+        // 3. Libraries bundled into `(compiler,profiler)_builtins` are special, see above.\n+        let link_static = link_static_crate;\n         // Dynamic libraries are not linked here, see the FIXME in `add_upstream_native_libraries`.\n         let link_dynamic = false;\n         add_native_libs_from_crate(\n@@ -2531,23 +2513,6 @@ fn add_upstream_rust_crates<'a>(\n         );\n     }\n \n-    // compiler-builtins are always placed last to ensure that they're\n-    // linked correctly.\n-    // We must always link the `compiler_builtins` crate statically. Even if it\n-    // was already \"included\" in a dylib (e.g., `libstd` when `-C prefer-dynamic`\n-    // is used)\n-    if let Some(cnum) = compiler_builtins {\n-        add_static_crate(\n-            cmd,\n-            sess,\n-            archive_builder_builder,\n-            codegen_results,\n-            tmpdir,\n-            cnum,\n-            &Default::default(),\n-        );\n-    }\n-\n     // Converts a library file-stem into a cc -l argument\n     fn unlib<'a>(target: &Target, stem: &'a str) -> &'a str {\n         if stem.starts_with(\"lib\") && !target.is_like_windows { &stem[3..] } else { stem }"}, {"sha": "4f396e970ad70969228cae3756eec5273af4a483", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e792de28c8f753b43d2af5fce662eddef1517aa4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e792de28c8f753b43d2af5fce662eddef1517aa4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=e792de28c8f753b43d2af5fce662eddef1517aa4", "patch": "@@ -833,20 +833,30 @@ impl CrateInfo {\n         //\n         // In order to get this left-to-right dependency ordering, we use the reverse\n         // postorder of all crates putting the leaves at the right-most positions.\n-        let used_crates = tcx\n+        let mut compiler_builtins = None;\n+        let mut used_crates: Vec<_> = tcx\n             .postorder_cnums(())\n             .iter()\n             .rev()\n             .copied()\n-            .filter(|&cnum| !tcx.dep_kind(cnum).macros_only())\n+            .filter(|&cnum| {\n+                let link = !tcx.dep_kind(cnum).macros_only();\n+                if link && tcx.is_compiler_builtins(cnum) {\n+                    compiler_builtins = Some(cnum);\n+                    return false;\n+                }\n+                link\n+            })\n             .collect();\n+        // `compiler_builtins` are always placed last to ensure that they're linked correctly.\n+        used_crates.extend(compiler_builtins);\n \n         let mut info = CrateInfo {\n             target_cpu,\n             exported_symbols,\n             linked_symbols,\n             local_crate_name,\n-            compiler_builtins: None,\n+            compiler_builtins,\n             profiler_runtime: None,\n             is_no_builtins: Default::default(),\n             native_libraries: Default::default(),\n@@ -872,9 +882,6 @@ impl CrateInfo {\n \n             let used_crate_source = tcx.used_crate_source(cnum);\n             info.used_crate_source.insert(cnum, used_crate_source.clone());\n-            if tcx.is_compiler_builtins(cnum) {\n-                info.compiler_builtins = Some(cnum);\n-            }\n             if tcx.is_profiler_runtime(cnum) {\n                 info.profiler_runtime = Some(cnum);\n             }"}]}