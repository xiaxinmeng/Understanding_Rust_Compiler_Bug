{"sha": "b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "node_id": "C_kwDOAAsO6NoAKGI3NTExMjQ4ZjljMWIwMGY0ZGQ3YjMyZjMzMjNjZDQyYTNkOTExNzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T07:39:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T07:39:53Z"}, "message": "Auto merge of #94139 - est31:let_else_rustdoc, r=notriddle\n\nlibrustdoc: adopt let else in more places\n\nContinuation of #89933, #91018, #91481, #93046, #93590, #94011.\n\nI have extended my clippy lint to also recognize tuple passing and match statements. The diff caused by fixing it is way above 1 thousand lines. Thus, I split it up into multiple pull requests to make reviewing easier. This PR handles librustdoc.", "tree": {"sha": "7f5652717a84c92fc53cad0b768e81d4e55795be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f5652717a84c92fc53cad0b768e81d4e55795be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "html_url": "https://github.com/rust-lang/rust/commit/b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "html_url": "https://github.com/rust-lang/rust/commit/6b9b2bd3154e866e5ba5e4110f478e5904e0936b"}, {"sha": "565f644edfb83c2e5bc082fea2bf7045639fb179", "url": "https://api.github.com/repos/rust-lang/rust/commits/565f644edfb83c2e5bc082fea2bf7045639fb179", "html_url": "https://github.com/rust-lang/rust/commit/565f644edfb83c2e5bc082fea2bf7045639fb179"}], "stats": {"total": 146, "additions": 51, "deletions": 95}, "files": [{"sha": "2c61b7468dcc8db3253ae193c1c24ed332ccc42a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -107,9 +107,9 @@ impl Clean<Option<GenericBound>> for hir::GenericBound<'_> {\n                 let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n \n                 let generic_args = generic_args.clean(cx);\n-                let bindings = match generic_args {\n-                    GenericArgs::AngleBracketed { bindings, .. } => bindings,\n-                    _ => bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\"),\n+                let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n+                else {\n+                    bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n                 };\n \n                 let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n@@ -1273,10 +1273,7 @@ impl Clean<Item> for ty::AssocItem {\n \n fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n     let hir::Ty { hir_id: _, span, ref kind } = *hir_ty;\n-    let qpath = match kind {\n-        hir::TyKind::Path(qpath) => qpath,\n-        _ => unreachable!(),\n-    };\n+    let hir::TyKind::Path(qpath) = kind else { unreachable!() };\n \n     match qpath {\n         hir::QPath::Resolved(None, ref path) => {"}, {"sha": "194c25a795ab440136e98c56d72a622c26211dfd", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -54,14 +54,8 @@ crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n         let Some((self_, trait_did, name)) = lhs.projection() else {\n             return true;\n         };\n-        let generic = match self_ {\n-            clean::Generic(s) => s,\n-            _ => return true,\n-        };\n-        let (bounds, _) = match params.get_mut(generic) {\n-            Some(bound) => bound,\n-            None => return true,\n-        };\n+        let clean::Generic(generic) = self_ else { return true };\n+        let Some((bounds, _)) = params.get_mut(generic) else { return true };\n \n         merge_bounds(cx, bounds, trait_did, name, rhs)\n     });"}, {"sha": "656f28bfd28cfc8bd56723c1d4157da7e3fdac65", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -57,10 +57,8 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     let primitives = local_crate.primitives(cx.tcx);\n     let keywords = local_crate.keywords(cx.tcx);\n     {\n-        let m = match *module.kind {\n-            ItemKind::ModuleItem(ref mut m) => m,\n-            _ => unreachable!(),\n-        };\n+        let ItemKind::ModuleItem(ref mut m) = *module.kind\n+        else { unreachable!() };\n         m.items.extend(primitives.iter().map(|&(def_id, prim)| {\n             Item::from_def_id_and_parts(\n                 def_id,"}, {"sha": "cee3dcb416f80128d7d43acb8c9f3dd836d6f39b", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -562,7 +562,7 @@ impl Options {\n         let edition = config::parse_crate_edition(matches);\n \n         let mut id_map = html::markdown::IdMap::new();\n-        let external_html = match ExternalHtml::load(\n+        let Some(external_html) = ExternalHtml::load(\n             &matches.opt_strs(\"html-in-header\"),\n             &matches.opt_strs(\"html-before-content\"),\n             &matches.opt_strs(\"html-after-content\"),\n@@ -573,9 +573,8 @@ impl Options {\n             &mut id_map,\n             edition,\n             &None,\n-        ) {\n-            Some(eh) => eh,\n-            None => return Err(3),\n+        ) else {\n+            return Err(3);\n         };\n \n         match matches.opt_str(\"r\").as_deref() {"}, {"sha": "728b7720f739d002878cb939d9d201e673517009", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -614,13 +614,11 @@ crate fn make_test(\n             (found_main, found_extern_crate, found_macro)\n         })\n     });\n-    let (already_has_main, already_has_extern_crate, found_macro) = match result {\n-        Ok(result) => result,\n-        Err(ErrorGuaranteed) => {\n-            // If the parser panicked due to a fatal error, pass the test code through unchanged.\n-            // The error will be reported during compilation.\n-            return (s.to_owned(), 0, false);\n-        }\n+    let Ok((already_has_main, already_has_extern_crate, found_macro)) = result\n+    else {\n+        // If the parser panicked due to a fatal error, pass the test code through unchanged.\n+        // The error will be reported during compilation.\n+        return (s.to_owned(), 0, false);\n     };\n \n     // If a doctest's `fn main` is being masked by a wrapper macro, the parsing loop above won't"}, {"sha": "4df48cef593b65c57c7cdb5f1a2a9cd9df520997", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -99,10 +99,7 @@ crate fn load_string<P: AsRef<Path>>(\n fn load_external_files(names: &[String], diag: &rustc_errors::Handler) -> Option<String> {\n     let mut out = String::new();\n     for name in names {\n-        let s = match load_string(name, diag) {\n-            Ok(s) => s,\n-            Err(_) => return None,\n-        };\n+        let Ok(s) = load_string(name, diag) else { return None };\n         out.push_str(&s);\n         out.push('\\n');\n     }"}, {"sha": "81053042f67d55e8957a24605720b58d6560ad89", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -77,10 +77,8 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n                 prof.generic_activity_with_arg(\"render_mod_item\", item.name.unwrap().to_string());\n \n             cx.mod_item_in(&item)?;\n-            let module = match *item.kind {\n-                clean::StrippedItem(box clean::ModuleItem(m)) | clean::ModuleItem(m) => m,\n-                _ => unreachable!(),\n-            };\n+            let (clean::StrippedItem(box clean::ModuleItem(module)) | clean::ModuleItem(module)) = *item.kind\n+            else { unreachable!() };\n             for it in module.items {\n                 debug!(\"Adding {:?} to worklist\", it.name);\n                 work.push((cx.make_child_renderer(), it));"}, {"sha": "a0187bd77f8800bc0e9902134857382a7c76fb6f", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -689,16 +689,12 @@ fn string<T: Display>(\n     klass: Option<Class>,\n     context_info: &Option<ContextInfo<'_, '_, '_>>,\n ) {\n-    let klass = match klass {\n-        None => return write!(out, \"{}\", text),\n-        Some(klass) => klass,\n-    };\n-    let def_span = match klass.get_span() {\n-        Some(d) => d,\n-        None => {\n-            write!(out, \"<span class=\\\"{}\\\">{}</span>\", klass.as_html(), text);\n-            return;\n-        }\n+    let Some(klass) = klass\n+    else { return write!(out, \"{}\", text) };\n+    let Some(def_span) = klass.get_span()\n+    else {\n+        write!(out, \"<span class=\\\"{}\\\">{}</span>\", klass.as_html(), text);\n+        return;\n     };\n     let mut text_s = text.to_string();\n     if text_s.contains(\"::\") {"}, {"sha": "34784bbed0cf56bdfa42dd9c3a30cb443de8ee98", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -655,10 +655,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         // Render sidebar-items.js used throughout this module.\n         if !self.render_redirect_pages {\n-            let module = match *item.kind {\n-                clean::StrippedItem(box clean::ModuleItem(ref m)) | clean::ModuleItem(ref m) => m,\n-                _ => unreachable!(),\n-            };\n+            let (clean::StrippedItem(box clean::ModuleItem(ref module)) | clean::ModuleItem(ref module)) = *item.kind\n+            else { unreachable!() };\n             let items = self.build_sidebar_items(module);\n             let js_dst = self.dst.join(&format!(\"sidebar-items{}.js\", self.shared.resource_suffix));\n             let v = format!(\"initSidebarItems({});\", serde_json::to_string(&items).unwrap());"}, {"sha": "3dbe9f735bfc44e3a990189a8eae99dd5b444c4f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -1064,10 +1064,7 @@ fn render_assoc_items_inner(\n ) {\n     info!(\"Documenting associated items of {:?}\", containing_item.name);\n     let cache = cx.cache();\n-    let v = match cache.impls.get(&it) {\n-        Some(v) => v,\n-        None => return,\n-    };\n+    let Some(v) = cache.impls.get(&it) else { return };\n     let (non_trait, traits): (Vec<_>, _) = v.iter().partition(|i| i.inner_impl().trait_.is_none());\n     if !non_trait.is_empty() {\n         let mut tmp_buf = Buffer::empty_from(w);\n@@ -2664,12 +2661,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n     let tcx = cx.tcx();\n     let def_id = item.def_id.expect_def_id();\n     let key = tcx.def_path_hash(def_id);\n-    let call_locations = match cx.shared.call_locations.get(&key) {\n-        Some(call_locations) => call_locations,\n-        _ => {\n-            return;\n-        }\n-    };\n+    let Some(call_locations) = cx.shared.call_locations.get(&key) else { return };\n \n     // Generate a unique ID so users can link to this section for a given method\n     let id = cx.id_map.borrow_mut().derive(\"scraped-examples\");"}, {"sha": "71fa71750f43a3240e025cccdaf11e75b7bfc6f7", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -61,12 +61,10 @@ crate fn check_bare_urls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n impl<'a, 'tcx> DocVisitor for BareUrlsLinter<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n-        let hir_id = match DocContext::as_local_hir_id(self.cx.tcx, item.def_id) {\n-            Some(hir_id) => hir_id,\n-            None => {\n-                // If non-local, no need to check anything.\n-                return;\n-            }\n+        let Some(hir_id) = DocContext::as_local_hir_id(self.cx.tcx, item.def_id)\n+        else {\n+            // If non-local, no need to check anything.\n+            return;\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n         if !dox.is_empty() {"}, {"sha": "c4aa31ad912305ec3b9968a58a17a1b94f47b494", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -67,11 +67,11 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             return;\n         }\n \n-        let local_id = match item.def_id.as_def_id().and_then(|x| x.as_local()) {\n-            Some(id) => id,\n+        let Some(local_id) = item.def_id.as_def_id().and_then(|x| x.as_local())\n+        else {\n             // We don't need to check the syntax for other crates so returning\n             // without doing anything should not be a problem.\n-            None => return,\n+            return;\n         };\n \n         let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_id);"}, {"sha": "f1bb766f467afdd65a4852b1ef2955f4c6d8bdff", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -107,12 +107,10 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n }\n \n crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n-    let hir_id = match DocContext::as_local_hir_id(cx.tcx, item.def_id) {\n-        Some(hir_id) => hir_id,\n-        None => {\n-            // If non-local, no need to check anything.\n-            return;\n-        }\n+    let Some(hir_id) = DocContext::as_local_hir_id(cx.tcx, item.def_id)\n+    else {\n+        // If non-local, no need to check anything.\n+        return;\n     };\n \n     let mut tests = Tests { found_tests: 0 };"}, {"sha": "64c0ae32aaddeeaab39ec87737591902a26f22b7", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -1897,13 +1897,11 @@ fn report_diagnostic(\n     DiagnosticInfo { item, ori_link: _, dox, link_range }: &DiagnosticInfo<'_>,\n     decorate: impl FnOnce(&mut Diagnostic, Option<rustc_span::Span>),\n ) {\n-    let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n-        Some(hir_id) => hir_id,\n-        None => {\n-            // If non-local, no need to check anything.\n-            info!(\"ignoring warning from parent crate: {}\", msg);\n-            return;\n-        }\n+    let Some(hir_id) = DocContext::as_local_hir_id(tcx, item.def_id)\n+    else {\n+        // If non-local, no need to check anything.\n+        info!(\"ignoring warning from parent crate: {}\", msg);\n+        return;\n     };\n \n     let sp = item.attr_span(tcx);"}, {"sha": "00e10c6d5a7c75043c7dda4a1cf79552d8433fab", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -197,13 +197,9 @@ fn extract_tags(\n impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n         let tcx = self.cx.tcx;\n-        let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n-            Some(hir_id) => hir_id,\n-            None => {\n-                // If non-local, no need to check anything.\n-                return;\n-            }\n-        };\n+        let Some(hir_id) = DocContext::as_local_hir_id(tcx, item.def_id)\n+        // If non-local, no need to check anything.\n+        else { return };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n         if !dox.is_empty() {\n             let report_diag = |msg: &str, range: &Range<usize>, is_open_tag: bool| {"}, {"sha": "0f604157291bdcf6ab600c187c8d7459c4e0780f", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=b7511248f9c1b00f4dd7b32f3323cd42a3d91172", "patch": "@@ -80,7 +80,7 @@ fn unindent_fragments(docs: &mut Vec<DocFragment>) {\n     // In here, the `min_indent` is 1 (because non-sugared fragment are always counted with minimum\n     // 1 whitespace), meaning that \"hello!\" will be considered a codeblock because it starts with 4\n     // (5 - 1) whitespaces.\n-    let min_indent = match docs\n+    let Some(min_indent) = docs\n         .iter()\n         .map(|fragment| {\n             fragment.doc.as_str().lines().fold(usize::MAX, |min_indent, line| {\n@@ -96,9 +96,8 @@ fn unindent_fragments(docs: &mut Vec<DocFragment>) {\n             })\n         })\n         .min()\n-    {\n-        Some(x) => x,\n-        None => return,\n+    else {\n+        return;\n     };\n \n     for fragment in docs {"}]}