{"sha": "4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "node_id": "C_kwDOAAsO6NoAKDRmOGM0OWU5NTBkNzBhYWQ0OGQyZTFlYzQ2NDJjZWYwYTM2NGMwZWM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-25T08:26:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-12-01T14:04:02Z"}, "message": "rustc_hir: Relax lifetime requirements on `Visitor::visit_path`", "tree": {"sha": "b331e3a8c124400c825cecb888ed633dfe073cb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b331e3a8c124400c825cecb888ed633dfe073cb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "html_url": "https://github.com/rust-lang/rust/commit/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58100c014a815f7bc30d58f27e4283166146fbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/58100c014a815f7bc30d58f27e4283166146fbbb", "html_url": "https://github.com/rust-lang/rust/commit/58100c014a815f7bc30d58f27e4283166146fbbb"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6d9ede5f73bbe92a773ff5a13018622cd863992b", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SelfFinder<'a, 'tcx> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'tcx Path<'tcx>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         for segment in path.segments {\n             match segment.ident.name {\n                 kw::SelfLower => self.lower.push(segment.ident.span),"}, {"sha": "910ee14855e234d21507ff2ef01eb25061461bbb", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "patch": "@@ -97,7 +97,7 @@ struct UnwrapVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n@@ -116,7 +116,7 @@ struct MapExprVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n             self.found_identifier = true;\n             return;"}, {"sha": "786d9608c851ee1001e1c59c36c1a0911e313544", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "patch": "@@ -330,7 +330,7 @@ struct LintCollector<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n+    fn visit_path(&mut self, path: &Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }"}, {"sha": "857abe77e21f239c6225a1dd06b6d45348d38d5b", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "patch": "@@ -1019,7 +1019,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'hir hir::Path<'hir>, _id: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'hir>, _id: hir::HirId) {\n         for (index, enum_value) in paths::APPLICABILITY_VALUES.iter().enumerate() {\n             if match_path(path, enum_value) {\n                 self.add_new_index(index);"}, {"sha": "ab3976a13bdbbf4f8524e965e209f62165f623ce", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8c49e950d70aad48d2e1ec4642cef0a364c0ec/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=4f8c49e950d70aad48d2e1ec4642cef0a364c0ec", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _: hir::HirId) {\n         if let hir::def::Res::Local(id) = path.res {\n             if self.binding_ids.contains(&id) {\n                 self.usage_found = true;"}]}