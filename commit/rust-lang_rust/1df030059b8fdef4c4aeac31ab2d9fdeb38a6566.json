{"sha": "1df030059b8fdef4c4aeac31ab2d9fdeb38a6566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZjAzMDA1OWI4ZmRlZjRjNGFlYWMzMWFiMmQ5ZmRlYjM4YTY1NjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-27T23:05:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-27T23:05:57Z"}, "message": "Rollup merge of #21676 - Victory:fix-deprication-in-random, r=alexcrichton\n\nCleanup mention of uint, use usize/us instead. This includes the example `println!(\"{}\", 2u * x);`", "tree": {"sha": "43d04250365b7bdd0d455d97219e29ea96bf57d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43d04250365b7bdd0d455d97219e29ea96bf57d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566", "html_url": "https://github.com/rust-lang/rust/commit/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ac91a382d48c0c50f3c105da086fb59883e3897", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac91a382d48c0c50f3c105da086fb59883e3897", "html_url": "https://github.com/rust-lang/rust/commit/2ac91a382d48c0c50f3c105da086fb59883e3897"}, {"sha": "ac285d5531859fb6551768574822d9abe925a68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac285d5531859fb6551768574822d9abe925a68a", "html_url": "https://github.com/rust-lang/rust/commit/ac285d5531859fb6551768574822d9abe925a68a"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "01111462eaaafe5e875e47613d06370f76345ed7", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=1df030059b8fdef4c4aeac31ab2d9fdeb38a6566", "patch": "@@ -99,10 +99,10 @@\n //!    let between = Range::new(-1f64, 1.);\n //!    let mut rng = rand::thread_rng();\n //!\n-//!    let total = 1_000_000u;\n-//!    let mut in_circle = 0u;\n+//!    let total = 1_000_000;\n+//!    let mut in_circle = 0;\n //!\n-//!    for _ in range(0u, total) {\n+//!    for _ in range(0, total) {\n //!        let a = between.ind_sample(&mut rng);\n //!        let b = between.ind_sample(&mut rng);\n //!        if a*a + b*b <= 1. {\n@@ -176,18 +176,18 @@\n //! }\n //!\n //! fn free_doors(blocked: &[uint]) -> Vec<uint> {\n-//!     range(0u, 3).filter(|x| !blocked.contains(x)).collect()\n+//!     range(0, 3).filter(|x| !blocked.contains(x)).collect()\n //! }\n //!\n //! fn main() {\n //!     // The estimation will be more accurate with more simulations\n-//!     let num_simulations = 10000u;\n+//!     let num_simulations = 10000;\n //!\n //!     let mut rng = rand::thread_rng();\n-//!     let random_door = Range::new(0u, 3);\n+//!     let random_door = Range::new(0, 3);\n //!\n-//!     let (mut switch_wins, mut switch_losses) = (0u, 0u);\n-//!     let (mut keep_wins, mut keep_losses) = (0u, 0u);\n+//!     let (mut switch_wins, mut switch_losses) = (0, 0);\n+//!     let (mut keep_wins, mut keep_losses) = (0, 0);\n //!\n //!     println!(\"Running {} simulations...\", num_simulations);\n //!     for _ in range(0, num_simulations) {\n@@ -279,14 +279,14 @@ impl Rng for StdRng {\n     }\n }\n \n-impl<'a> SeedableRng<&'a [uint]> for StdRng {\n-    fn reseed(&mut self, seed: &'a [uint]) {\n+impl<'a> SeedableRng<&'a [usize]> for StdRng {\n+    fn reseed(&mut self, seed: &'a [usize]) {\n         // the internal RNG can just be seeded from the above\n         // randomness.\n         self.rng.reseed(unsafe {mem::transmute(seed)})\n     }\n \n-    fn from_seed(seed: &'a [uint]) -> StdRng {\n+    fn from_seed(seed: &'a [usize]) -> StdRng {\n         StdRng { rng: SeedableRng::from_seed(unsafe {mem::transmute(seed)}) }\n     }\n }\n@@ -318,7 +318,7 @@ impl reseeding::Reseeder<StdRng> for ThreadRngReseeder {\n         }\n     }\n }\n-static THREAD_RNG_RESEED_THRESHOLD: uint = 32_768;\n+static THREAD_RNG_RESEED_THRESHOLD: usize = 32_768;\n type ThreadRngInner = reseeding::ReseedingRng<StdRng, ThreadRngReseeder>;\n \n /// The thread-local RNG.\n@@ -384,7 +384,7 @@ impl Rng for ThreadRng {\n /// use std::rand;\n ///\n /// let x = rand::random();\n-/// println!(\"{}\", 2u * x);\n+/// println!(\"{}\", 2u8 * x);\n ///\n /// let y = rand::random::<f64>();\n /// println!(\"{}\", y);\n@@ -432,7 +432,7 @@ pub fn random<T: Rand>() -> T {\n /// ```\n pub fn sample<T, I: Iterator<Item=T>, R: Rng>(rng: &mut R,\n                                          mut iter: I,\n-                                         amount: uint) -> Vec<T> {\n+                                         amount: usize) -> Vec<T> {\n     let mut reservoir: Vec<T> = iter.by_ref().take(amount).collect();\n     for (i, elem) in iter.enumerate() {\n         let k = rng.gen_range(0, i + 1 + amount);\n@@ -480,18 +480,18 @@ mod test {\n     #[test]\n     fn test_gen_range() {\n         let mut r = thread_rng();\n-        for _ in range(0u, 1000) {\n+        for _ in range(0, 1000) {\n             let a = r.gen_range(-3i, 42);\n             assert!(a >= -3 && a < 42);\n             assert_eq!(r.gen_range(0i, 1), 0);\n             assert_eq!(r.gen_range(-12i, -11), -12);\n         }\n \n-        for _ in range(0u, 1000) {\n+        for _ in range(0, 1000) {\n             let a = r.gen_range(10i, 42);\n             assert!(a >= 10 && a < 42);\n             assert_eq!(r.gen_range(0i, 1), 0);\n-            assert_eq!(r.gen_range(3_000_000u, 3_000_001), 3_000_000);\n+            assert_eq!(r.gen_range(3_000_000, 3_000_001), 3_000_000);\n         }\n \n     }\n@@ -507,7 +507,7 @@ mod test {\n     #[should_fail]\n     fn test_gen_range_panic_uint() {\n         let mut r = thread_rng();\n-        r.gen_range(5u, 2u);\n+        r.gen_range(5us, 2us);\n     }\n \n     #[test]\n@@ -521,24 +521,24 @@ mod test {\n     #[test]\n     fn test_gen_weighted_bool() {\n         let mut r = thread_rng();\n-        assert_eq!(r.gen_weighted_bool(0u), true);\n-        assert_eq!(r.gen_weighted_bool(1u), true);\n+        assert_eq!(r.gen_weighted_bool(0), true);\n+        assert_eq!(r.gen_weighted_bool(1), true);\n     }\n \n     #[test]\n     fn test_gen_ascii_str() {\n         let mut r = thread_rng();\n-        assert_eq!(r.gen_ascii_chars().take(0).count(), 0u);\n-        assert_eq!(r.gen_ascii_chars().take(10).count(), 10u);\n-        assert_eq!(r.gen_ascii_chars().take(16).count(), 16u);\n+        assert_eq!(r.gen_ascii_chars().take(0).count(), 0);\n+        assert_eq!(r.gen_ascii_chars().take(10).count(), 10);\n+        assert_eq!(r.gen_ascii_chars().take(16).count(), 16);\n     }\n \n     #[test]\n     fn test_gen_vec() {\n         let mut r = thread_rng();\n-        assert_eq!(r.gen_iter::<u8>().take(0).count(), 0u);\n-        assert_eq!(r.gen_iter::<u8>().take(10).count(), 10u);\n-        assert_eq!(r.gen_iter::<f64>().take(16).count(), 16u);\n+        assert_eq!(r.gen_iter::<u8>().take(0).count(), 0);\n+        assert_eq!(r.gen_iter::<u8>().take(10).count(), 10);\n+        assert_eq!(r.gen_iter::<f64>().take(16).count(), 16);\n     }\n \n     #[test]\n@@ -578,7 +578,7 @@ mod test {\n         r.shuffle(&mut v);\n         let b: &[_] = &[1, 1, 1];\n         assert_eq!(v, b);\n-        assert_eq!(r.gen_range(0u, 1u), 0u);\n+        assert_eq!(r.gen_range(0, 1), 0);\n     }\n \n     #[test]"}, {"sha": "fb8fd0b50782c449b3f714d2f1441049415f346c", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df030059b8fdef4c4aeac31ab2d9fdeb38a6566/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=1df030059b8fdef4c4aeac31ab2d9fdeb38a6566", "patch": "@@ -49,7 +49,7 @@ mod imp {\n         const NR_GETRANDOM: libc::c_long = 384;\n \n         unsafe {\n-            syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), 0u)\n+            syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), 0)\n         }\n     }\n \n@@ -74,7 +74,7 @@ mod imp {\n                     panic!(\"unexpected getrandom error: {}\", err);\n                 }\n             } else {\n-                read += result as uint;\n+                read += result as usize;\n             }\n         }\n     }\n@@ -378,7 +378,7 @@ mod test {\n     fn test_os_rng_tasks() {\n \n         let mut txs = vec!();\n-        for _ in range(0u, 20) {\n+        for _ in range(0, 20) {\n             let (tx, rx) = channel();\n             txs.push(tx);\n \n@@ -392,7 +392,7 @@ mod test {\n                 Thread::yield_now();\n                 let mut v = [0u8; 1000];\n \n-                for _ in range(0u, 100) {\n+                for _ in range(0, 100) {\n                     r.next_u32();\n                     Thread::yield_now();\n                     r.next_u64();"}]}