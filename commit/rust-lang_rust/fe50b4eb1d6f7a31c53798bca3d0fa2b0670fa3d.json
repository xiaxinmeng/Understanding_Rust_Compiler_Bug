{"sha": "fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNTBiNGViMWQ2ZjdhMzFjNTM3OThiY2EzZDBmYTJiMDY3MGZhM2Q=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-08T12:49:37Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-27T20:41:35Z"}, "message": "`ConstValue::ScalarPair` only needs to represent slices", "tree": {"sha": "5dd322e06bb9bcabcde61868a91d01c326127f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd322e06bb9bcabcde61868a91d01c326127f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "html_url": "https://github.com/rust-lang/rust/commit/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1748834e80b2461be4e18d420503d60e687312", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1748834e80b2461be4e18d420503d60e687312", "html_url": "https://github.com/rust-lang/rust/commit/2a1748834e80b2461be4e18d420503d60e687312"}], "stats": {"total": 141, "additions": 59, "deletions": 82}, "files": [{"sha": "bd2349161f74a9f8856c238f53067312bcb704a6", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -302,7 +302,7 @@ impl_stable_hash_for!(struct ty::FieldDef {\n impl_stable_hash_for!(\n     impl<'tcx> for enum mir::interpret::ConstValue<'tcx> [ mir::interpret::ConstValue ] {\n         Scalar(val),\n-        ScalarPair(a, b),\n+        Slice(a, b),\n         ByRef(id, alloc, offset),\n     }\n );"}, {"sha": "4ac84bcfd19039d457fff9bdde85f2e14912bb6c", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -22,25 +22,28 @@ pub enum ConstValue<'tcx> {\n     /// Not using the enum `Value` to encode that this must not be `Undef`\n     Scalar(Scalar),\n \n-    /// Used only for *fat pointers* with layout::abi::ScalarPair\n+    /// Used only for slices and strings (`&[T]`, `&str`, `*const [T]`, `*mut str`, `Box<str>`, ...)\n     ///\n-    /// Needed for pattern matching code related to slices and strings.\n-    ScalarPair(Scalar, Scalar),\n+    /// Empty slices don't necessarily have an address backed by an `AllocId`, thus we also need to\n+    /// enable integer pointers. The `Scalar` type covers exactly those two cases. While we could\n+    /// create dummy-`AllocId`s, the additional code effort for the conversions doesn't seem worth\n+    /// it.\n+    Slice(Scalar, u64),\n \n     /// An allocation + offset into the allocation.\n     /// Invariant: The AllocId matches the allocation.\n     ByRef(AllocId, &'tcx Allocation, Size),\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(CONST_SIZE: ::std::mem::size_of::<ConstValue<'static>>() == 56);\n+static_assert!(CONST_SIZE: ::std::mem::size_of::<ConstValue<'static>>() == 40);\n \n impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn try_to_scalar(&self) -> Option<Scalar> {\n         match *self {\n             ConstValue::ByRef(..) |\n-            ConstValue::ScalarPair(..) => None,\n+            ConstValue::Slice(..) => None,\n             ConstValue::Scalar(val) => Some(val),\n         }\n     }\n@@ -59,17 +62,8 @@ impl<'tcx> ConstValue<'tcx> {\n     pub fn new_slice(\n         val: Scalar,\n         len: u64,\n-        cx: &impl HasDataLayout\n     ) -> Self {\n-        ConstValue::ScalarPair(val, Scalar::Bits {\n-            bits: len as u128,\n-            size: cx.data_layout().pointer_size.bytes() as u8,\n-        })\n-    }\n-\n-    #[inline]\n-    pub fn new_dyn_trait(val: Scalar, vtable: Pointer) -> Self {\n-        ConstValue::ScalarPair(val, Scalar::Ptr(vtable))\n+        ConstValue::Slice(val, len)\n     }\n }\n "}, {"sha": "82083b4f6996416f3b34e0229ae0eb1abc0a9aad", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -2702,23 +2702,21 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: ty::Const<'_>) -> fmt::Resul\n         return write!(f, \"{}\", item_path_str(did));\n     }\n     // print string literals\n-    if let ConstValue::ScalarPair(ptr, len) = value {\n+    if let ConstValue::Slice(ptr, len) = value {\n         if let Scalar::Ptr(ptr) = ptr {\n-            if let Scalar::Bits { bits: len, .. } = len {\n-                if let Ref(_, &ty::TyS { sty: Str, .. }, _) = ty.sty {\n-                    return ty::tls::with(|tcx| {\n-                        let alloc = tcx.alloc_map.lock().get(ptr.alloc_id);\n-                        if let Some(interpret::AllocKind::Memory(alloc)) = alloc {\n-                            assert_eq!(len as usize as u128, len);\n-                            let slice =\n-                                &alloc.bytes[(ptr.offset.bytes() as usize)..][..(len as usize)];\n-                            let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n-                            write!(f, \"{:?}\", s)\n-                        } else {\n-                            write!(f, \"pointer to erroneous constant {:?}, {:?}\", ptr, len)\n-                        }\n-                    });\n-                }\n+            if let Ref(_, &ty::TyS { sty: Str, .. }, _) = ty.sty {\n+                return ty::tls::with(|tcx| {\n+                    let alloc = tcx.alloc_map.lock().get(ptr.alloc_id);\n+                    if let Some(interpret::AllocKind::Memory(alloc)) = alloc {\n+                        assert_eq!(len as usize as u64, len);\n+                        let slice =\n+                            &alloc.bytes[(ptr.offset.bytes() as usize)..][..(len as usize)];\n+                        let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n+                        write!(f, \"{:?}\", s)\n+                    } else {\n+                        write!(f, \"pointer to erroneous constant {:?}, {:?}\", ptr, len)\n+                    }\n+                });\n             }\n         }\n     }"}, {"sha": "28f5a65374d98752c8e05c14c91bcc14832c6ed8", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ConstValue::Scalar(x) => Some(ConstValue::Scalar(x)),\n-            ConstValue::ScalarPair(x, y) => Some(ConstValue::ScalarPair(x, y)),\n+            ConstValue::Slice(x, y) => Some(ConstValue::Slice(x, y)),\n             ConstValue::ByRef(x, alloc, z) => Some(ConstValue::ByRef(\n                 x, alloc.lift_to_tcx(tcx)?, z,\n             )),"}, {"sha": "671a0fc2d5d7aa96fed93c20b0ed1681c787807a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -2064,7 +2064,7 @@ pub enum LazyConst<'tcx> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(LAZY_CONST_SIZE: ::std::mem::size_of::<LazyConst<'static>>() == 72);\n+static_assert!(LAZY_CONST_SIZE: ::std::mem::size_of::<LazyConst<'static>>() == 56);\n \n impl<'tcx> LazyConst<'tcx> {\n     pub fn map_evaluated<R>(self, f: impl FnOnce(Const<'tcx>) -> Option<R>) -> Option<R> {\n@@ -2093,7 +2093,7 @@ pub struct Const<'tcx> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(CONST_SIZE: ::std::mem::size_of::<Const<'static>>() == 64);\n+static_assert!(CONST_SIZE: ::std::mem::size_of::<Const<'static>>() == 48);\n \n impl<'tcx> Const<'tcx> {\n     #[inline]"}, {"sha": "8aad4c1f6e1c01e9c8a9da93f02f1b31b9eeec2f", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -88,21 +88,17 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n                 );\n                 OperandValue::Immediate(llval)\n             },\n-            ConstValue::ScalarPair(a, b) => {\n-                let (a_scalar, b_scalar) = match layout.abi {\n-                    layout::Abi::ScalarPair(ref a, ref b) => (a, b),\n+            ConstValue::Slice(a, b) => {\n+                let a_scalar = match layout.abi {\n+                    layout::Abi::ScalarPair(ref a, _) => a,\n                     _ => bug!(\"from_const: invalid ScalarPair layout: {:#?}\", layout)\n                 };\n                 let a_llval = bx.cx().scalar_to_backend(\n                     a,\n                     a_scalar,\n                     bx.cx().scalar_pair_element_backend_type(layout, 0, true),\n                 );\n-                let b_llval = bx.cx().scalar_to_backend(\n-                    b,\n-                    b_scalar,\n-                    bx.cx().scalar_pair_element_backend_type(layout, 1, true),\n-                );\n+                let b_llval = bx.cx().const_usize(b);\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n             ConstValue::ByRef(_, alloc, offset) => {"}, {"sha": "f83a930353b7386ea610ab5791932af921d1b764", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -67,14 +67,11 @@ pub fn op_to_const<'tcx>(\n     op: OpTy<'tcx>,\n     may_normalize: bool,\n ) -> EvalResult<'tcx, ty::Const<'tcx>> {\n-    // We do not normalize just any data.  Only scalar layout and fat pointers.\n+    // We do not normalize just any data.  Only scalar layout and slices.\n     let normalize = may_normalize\n         && match op.layout.abi {\n             layout::Abi::Scalar(..) => true,\n-            layout::Abi::ScalarPair(..) => {\n-                // Must be a fat pointer\n-                op.layout.ty.builtin_deref(true).is_some()\n-            },\n+            layout::Abi::ScalarPair(..) => op.layout.ty.is_slice(),\n             _ => false,\n         };\n     let normalized_op = if normalize {\n@@ -103,7 +100,7 @@ pub fn op_to_const<'tcx>(\n         Ok(Immediate::Scalar(x)) =>\n             ConstValue::Scalar(x.not_undef()?),\n         Ok(Immediate::ScalarPair(a, b)) =>\n-            ConstValue::ScalarPair(a.not_undef()?, b.not_undef()?),\n+            ConstValue::Slice(a.not_undef()?, b.to_usize(ecx)?),\n     };\n     Ok(ty::Const { val, ty: op.layout.ty })\n }"}, {"sha": "21c471d49ee662ad18373a115be2cdb56b089aa0", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -35,13 +35,13 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n         LitKind::Str(ref s, _) => {\n             let s = s.as_str();\n             let id = tcx.allocate_bytes(s.as_bytes());\n-            ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx)\n+            ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64)\n         },\n         LitKind::Err(ref s) => {\n             let s = s.as_str();\n             let id = tcx.allocate_bytes(s.as_bytes());\n             return Ok(ty::Const {\n-                val: ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx),\n+                val: ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64),\n                 ty: tcx.types.err,\n             });\n         },"}, {"sha": "7f5b1a761d2618e070ae4cc4d2ef9e9a49bd9483", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -221,13 +221,16 @@ impl<'a, 'tcx> LiteralExpander<'a, 'tcx> {\n             // unsize array to slice if pattern is array but match value or other patterns are slice\n             (ConstValue::Scalar(Scalar::Ptr(p)), ty::Array(t, n), ty::Slice(u)) => {\n                 assert_eq!(t, u);\n-                ConstValue::ScalarPair(\n+                ConstValue::Slice(\n                     Scalar::Ptr(p),\n-                    n.map_evaluated(|val| val.val.try_to_scalar()).unwrap(),\n+                    n.map_evaluated(|val| val.val.try_to_scalar())\n+                        .unwrap()\n+                        .to_usize(&self.tcx)\n+                        .unwrap(),\n                 )\n             },\n             // fat pointers stay the same\n-            (ConstValue::ScalarPair(..), _, _) => val,\n+            (ConstValue::Slice(..), _, _) => val,\n             // FIXME(oli-obk): this is reachable for `const FOO: &&&u32 = &&&42;` being used\n             _ => bug!(\"cannot deref {:#?}, {} -> {}\", val, crty, rty),\n         }\n@@ -788,9 +791,9 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n                         max_fixed_len,\n                         n.unwrap_usize(cx.tcx),\n                     ),\n-                    (ConstValue::ScalarPair(_, n), ty::Slice(_)) => max_fixed_len = cmp::max(\n+                    (ConstValue::Slice(_, n), ty::Slice(_)) => max_fixed_len = cmp::max(\n                         max_fixed_len,\n-                        n.to_usize(&cx.tcx).unwrap(),\n+                        n,\n                     ),\n                     _ => {},\n                 }\n@@ -1432,27 +1435,25 @@ fn slice_pat_covered_by_const<'tcx>(\n             alloc.get_bytes(&tcx, ptr, Size::from_bytes(n)).unwrap()\n         },\n         // a slice fat pointer to a zero length slice\n-        (ConstValue::ScalarPair(Scalar::Bits { .. }, n), ty::Slice(t)) => {\n+        (ConstValue::Slice(Scalar::Bits { .. }, 0), ty::Slice(t)) => {\n             if *t != tcx.types.u8 {\n                 // FIXME(oli-obk): can't mix const patterns with slice patterns and get\n                 // any sort of exhaustiveness/unreachable check yet\n                 // This solely means that we don't lint about unreachable patterns, even if some\n                 // are definitely unreachable.\n                 return Ok(false);\n             }\n-            assert_eq!(n.to_usize(&tcx).unwrap(), 0);\n             &[]\n         },\n         //\n-        (ConstValue::ScalarPair(Scalar::Ptr(ptr), n), ty::Slice(t)) => {\n+        (ConstValue::Slice(Scalar::Ptr(ptr), n), ty::Slice(t)) => {\n             if *t != tcx.types.u8 {\n                 // FIXME(oli-obk): can't mix const patterns with slice patterns and get\n                 // any sort of exhaustiveness/unreachable check yet\n                 // This solely means that we don't lint about unreachable patterns, even if some\n                 // are definitely unreachable.\n                 return Ok(false);\n             }\n-            let n = n.to_usize(&tcx).unwrap();\n             tcx.alloc_map\n                 .lock()\n                 .unwrap_memory(ptr.alloc_id)\n@@ -1784,12 +1785,12 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                         },\n                         ty::TyKind::Slice(t) => {\n                             match value.val {\n-                                ConstValue::ScalarPair(ptr, n) => (\n+                                ConstValue::Slice(ptr, n) => (\n                                     ptr.to_ptr().ok().map(|ptr| (\n                                         ptr,\n                                         cx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n                                     )),\n-                                    n.to_bits(cx.tcx.data_layout.pointer_size).unwrap() as u64,\n+                                    n,\n                                     t,\n                                 ),\n                                 _ => span_bug!("}, {"sha": "7d48cdc1d8aef1a6025add9beb4b300414522e20", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -1218,25 +1218,21 @@ pub fn compare_const_vals<'a, 'gcx, 'tcx>(\n     if let ty::Str = ty.value.sty {\n         match (a.val, b.val) {\n             (\n-                ConstValue::ScalarPair(\n+                ConstValue::Slice(\n                     Scalar::Ptr(ptr_a),\n                     len_a,\n                 ),\n-                ConstValue::ScalarPair(\n+                ConstValue::Slice(\n                     Scalar::Ptr(ptr_b),\n                     len_b,\n                 ),\n             ) if ptr_a.offset.bytes() == 0 && ptr_b.offset.bytes() == 0 => {\n-                if let Ok(len_a) = len_a.to_bits(tcx.data_layout.pointer_size) {\n-                    if let Ok(len_b) = len_b.to_bits(tcx.data_layout.pointer_size) {\n-                        if len_a == len_b {\n-                            let map = tcx.alloc_map.lock();\n-                            let alloc_a = map.unwrap_memory(ptr_a.alloc_id);\n-                            let alloc_b = map.unwrap_memory(ptr_b.alloc_id);\n-                            if alloc_a.bytes.len() as u128 == len_a {\n-                                return from_bool(alloc_a == alloc_b);\n-                            }\n-                        }\n+                if len_a == len_b {\n+                    let map = tcx.alloc_map.lock();\n+                    let alloc_a = map.unwrap_memory(ptr_a.alloc_id);\n+                    let alloc_b = map.unwrap_memory(ptr_b.alloc_id);\n+                    if alloc_a.bytes.len() as u64 == len_a {\n+                        return from_bool(alloc_a == alloc_b);\n                     }\n                 }\n             }"}, {"sha": "e4bee24c88cfae8f1d56ec319f0345b3151e92be", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -555,10 +555,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     MemPlace::from_ptr(Pointer::new(id, offset), alloc.align)\n                 ).with_default_tag())\n             },\n-            ConstValue::ScalarPair(a, b) =>\n+            ConstValue::Slice(a, b) =>\n                 Ok(Operand::Immediate(Immediate::ScalarPair(\n                     a.into(),\n-                    b.into(),\n+                    Scalar::from_uint(b, self.tcx.data_layout.pointer_size).into(),\n                 )).with_default_tag()),\n             ConstValue::Scalar(x) =>\n                 Ok(Operand::Immediate(Immediate::Scalar(x.into())).with_default_tag()),"}, {"sha": "e713ab17c3af5ca40da4ed8c18e0a3753fddab98", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=fe50b4eb1d6f7a31c53798bca3d0fa2b0670fa3d", "patch": "@@ -1254,12 +1254,7 @@ fn collect_const<'a, 'tcx>(\n     debug!(\"visiting const {:?}\", constant);\n \n     match constant.val {\n-        ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {\n-            collect_miri(tcx, a.alloc_id, output);\n-            collect_miri(tcx, b.alloc_id, output);\n-        }\n-        ConstValue::ScalarPair(_, Scalar::Ptr(ptr)) |\n-        ConstValue::ScalarPair(Scalar::Ptr(ptr), _) |\n+        ConstValue::Slice(Scalar::Ptr(ptr), _) |\n         ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n         ConstValue::ByRef(_id, alloc, _offset) => {"}]}