{"sha": "a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "node_id": "C_kwDOAAsO6NoAKGE3ZmVjZDY5MTFiMDcwMmRhNTA0YTRiMGFkYzJlYTExZTNhMmIyNGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T10:38:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T10:38:32Z"}, "message": "Auto merge of #10313 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "8745c46e2c6da8cd88387df96fc691045871326f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8745c46e2c6da8cd88387df96fc691045871326f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "html_url": "https://github.com/rust-lang/rust/commit/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5adeebf92fd5a639d2cb51c7374fc212e5de568f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adeebf92fd5a639d2cb51c7374fc212e5de568f", "html_url": "https://github.com/rust-lang/rust/commit/5adeebf92fd5a639d2cb51c7374fc212e5de568f"}, {"sha": "19c07f88ee6ecbbe5086e8435941aa68d58f35db", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c07f88ee6ecbbe5086e8435941aa68d58f35db", "html_url": "https://github.com/rust-lang/rust/commit/19c07f88ee6ecbbe5086e8435941aa68d58f35db"}], "stats": {"total": 529, "additions": 285, "deletions": 244}, "files": [{"sha": "e8106beec37423b191d554b31c4700f8922bb776", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -6,9 +6,10 @@ use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n-use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, UnOp};\n+use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -82,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for NonminimalBool {\n         _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         NonminimalBoolVisitor { cx }.visit_body(body);\n     }"}, {"sha": "1633ffd589c384ab827cdf224a1749c00b2ce8b6", "filename": "clippy_lints/src/casts/as_ptr_cast_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         && let ExprKind::MethodCall(method_name, receiver, [], _) = cast_expr.peel_blocks().kind\n         && method_name.ident.name == rustc_span::sym::as_ptr\n         && let Some(as_ptr_did) = cx.typeck_results().type_dependent_def_id(cast_expr.peel_blocks().hir_id)\n-        && let as_ptr_sig = cx.tcx.fn_sig(as_ptr_did)\n+        && let as_ptr_sig = cx.tcx.fn_sig(as_ptr_did).subst_identity()\n         && let Some(first_param_ty) = as_ptr_sig.skip_binder().inputs().iter().next()\n         && let ty::Ref(_, _, Mutability::Not) = first_param_ty.kind()\n         && let Some(recv) = snippet_opt(cx, receiver.span)"}, {"sha": "e8531157e0f7a538465c5adf5b3c4d055ea322d1", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -8,9 +8,10 @@ use clippy_utils::{get_async_fn_body, is_async_fn, LimitStack};\n use core::ops::ControlFlow;\n use rustc_ast::ast::Attribute;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n \n@@ -140,9 +141,8 @@ impl<'tcx> LateLintPass<'tcx> for CognitiveComplexity {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n-        let def_id = cx.tcx.hir().local_def_id(hir_id);\n         if !cx.tcx.has_attr(def_id.to_def_id(), sym::test) {\n             let expr = if is_async_fn(kind) {\n                 match get_async_fn_body(cx.tcx, body) {"}, {"sha": "f806ba238c7c670c0d068700a7a8acf28f2e2671", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n             ExprKind::MethodCall(_, receiver, args, _) => {\n                 if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-                    let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n+                    let fn_sig = self.cx.tcx.fn_sig(def_id).subst_identity().skip_binder();\n                     for (expr, bound) in iter::zip(std::iter::once(*receiver).chain(args.iter()), fn_sig.inputs()) {\n                         self.ty_bounds.push((*bound).into());\n                         self.visit_expr(expr);\n@@ -215,7 +215,7 @@ fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'\n     let node_ty = cx.typeck_results().node_type_opt(hir_id)?;\n     // We can't use `Ty::fn_sig` because it automatically performs substs, this may result in FNs.\n     match node_ty.kind() {\n-        ty::FnDef(def_id, _) => Some(cx.tcx.fn_sig(*def_id)),\n+        ty::FnDef(def_id, _) => Some(cx.tcx.fn_sig(*def_id).subst_identity()),\n         ty::FnPtr(fn_sig) => Some(*fn_sig),\n         _ => None,\n     }"}, {"sha": "6c333afacc648b41d567d36b9b782095d8936fce", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -759,7 +759,7 @@ fn walk_parents<'tcx>(\n             }) if span.ctxt() == ctxt => {\n                 let output = cx\n                     .tcx\n-                    .erase_late_bound_regions(cx.tcx.fn_sig(owner_id.to_def_id()).output());\n+                    .erase_late_bound_regions(cx.tcx.fn_sig(owner_id).subst_identity().output());\n                 Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n             },\n \n@@ -778,20 +778,20 @@ fn walk_parents<'tcx>(\n \n             Node::Expr(parent) if parent.span.ctxt() == ctxt => match parent.kind {\n                 ExprKind::Ret(_) => {\n-                    let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n+                    let owner_id = cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap());\n                     Some(\n                         if let Node::Expr(\n                             closure_expr @ Expr {\n                                 kind: ExprKind::Closure(closure),\n                                 ..\n                             },\n-                        ) = cx.tcx.hir().get(owner_id)\n+                        ) = cx.tcx.hir().get_by_def_id(owner_id)\n                         {\n                             closure_result_position(cx, closure, cx.typeck_results().expr_ty(closure_expr), precedence)\n                         } else {\n                             let output = cx\n                                 .tcx\n-                                .erase_late_bound_regions(cx.tcx.fn_sig(cx.tcx.hir().local_def_id(owner_id)).output());\n+                                .erase_late_bound_regions(cx.tcx.fn_sig(owner_id).subst_identity().output());\n                             ty_auto_deref_stability(cx, output, precedence).position_for_result(cx)\n                         },\n                     )\n@@ -858,7 +858,7 @@ fn walk_parents<'tcx>(\n                             && let subs = cx\n                                 .typeck_results()\n                                 .node_substs_opt(parent.hir_id).map(|subs| &subs[1..]).unwrap_or_default()\n-                            && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n+                            && let impl_ty = if cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[0].is_ref() {\n                                 // Trait methods taking `&self`\n                                 sub_ty\n                             } else {\n@@ -879,7 +879,7 @@ fn walk_parents<'tcx>(\n                         return Some(Position::MethodReceiver);\n                     }\n                     args.iter().position(|arg| arg.hir_id == child_id).map(|i| {\n-                        let ty = cx.tcx.fn_sig(id).skip_binder().inputs()[i + 1];\n+                        let ty = cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[i + 1];\n                         // `e.hir_id == child_id` for https://github.com/rust-lang/rust-clippy/issues/9739\n                         // `method.args.is_none()` for https://github.com/rust-lang/rust-clippy/issues/9782\n                         if e.hir_id == child_id && method.args.is_none() && let ty::Param(param_ty) = ty.kind() {\n@@ -896,7 +896,7 @@ fn walk_parents<'tcx>(\n                         } else {\n                             ty_auto_deref_stability(\n                                 cx,\n-                                cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).input(i + 1)),\n+                                cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).subst_identity().input(i + 1)),\n                                 precedence,\n                             )\n                             .position_for_arg()\n@@ -1093,7 +1093,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n     let sized_trait_def_id = cx.tcx.lang_items().sized_trait();\n \n     let Some(callee_def_id) = fn_def_id(cx, parent) else { return Position::Other(precedence) };\n-    let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+    let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n     let substs_with_expr_ty = cx\n         .typeck_results()\n         .node_substs(if let ExprKind::Call(callee, _) = parent.kind {\n@@ -1221,7 +1221,7 @@ fn has_ref_mut_self_method(cx: &LateContext<'_>, trait_def_id: DefId) -> bool {\n         .in_definition_order()\n         .any(|assoc_item| {\n             if assoc_item.fn_has_self_parameter {\n-                let self_ty = cx.tcx.fn_sig(assoc_item.def_id).skip_binder().inputs()[0];\n+                let self_ty = cx.tcx.fn_sig(assoc_item.def_id).subst_identity().skip_binder().inputs()[0];\n                 matches!(self_ty.kind(), ty::Ref(_, _, Mutability::Mut))\n             } else {\n                 false\n@@ -1419,6 +1419,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             | ty::FnDef(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)"}, {"sha": "f8fc726d603f8dd5a32fdc1f5c740de1871f4f01", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n-    self as hir, BlockCheckMode, BodyId, Constness, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, UnsafeSource,\n+    self as hir, BlockCheckMode, BodyId, Constness, Expr, ExprKind, FnDecl, Impl, Item, ItemKind, UnsafeSource,\n     Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -18,6 +18,7 @@ use rustc_middle::ty::{\n     TraitPredicate, Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -425,7 +426,7 @@ struct UnsafeVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, _: Span, id: HirId) {\n+    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, _: Span, id: LocalDefId) {\n         if self.has_unsafe {\n             return;\n         }"}, {"sha": "127201b72e275948a46124bcb0c3cb7e97fac2e7", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -23,7 +23,6 @@ use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_parse::parser::ForceCollect;\n use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{BytePos, FilePathMapping, SourceMap, Span};\n use rustc_span::{sym, FileName, Pos};\n@@ -302,7 +301,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(body.value);\n-                    lint_for_missing_headers(cx, item.owner_id.def_id, sig, headers, Some(body_id), fpu.panic_span);\n+                    lint_for_missing_headers(cx, item.owner_id, sig, headers, Some(body_id), fpu.panic_span);\n                 }\n             },\n             hir::ItemKind::Impl(impl_) => {\n@@ -338,7 +337,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let Some(headers) = check_attrs(cx, &self.valid_idents, attrs) else { return };\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.owner_id.def_id, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.owner_id, sig, headers, None, None);\n             }\n         }\n     }\n@@ -357,34 +356,34 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                 panic_span: None,\n             };\n             fpu.visit_expr(body.value);\n-            lint_for_missing_headers(cx, item.owner_id.def_id, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(cx, item.owner_id, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }\n \n fn lint_for_missing_headers(\n     cx: &LateContext<'_>,\n-    def_id: LocalDefId,\n+    owner_id: hir::OwnerId,\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n     body_id: Option<hir::BodyId>,\n     panic_span: Option<Span>,\n ) {\n-    if !cx.effective_visibilities.is_exported(def_id) {\n+    if !cx.effective_visibilities.is_exported(owner_id.def_id) {\n         return; // Private functions do not require doc comments\n     }\n \n     // do not lint if any parent has `#[doc(hidden)]` attribute (#7347)\n     if cx\n         .tcx\n         .hir()\n-        .parent_iter(cx.tcx.hir().local_def_id_to_hir_id(def_id))\n+        .parent_iter(owner_id.into())\n         .any(|(id, _node)| is_doc_hidden(cx.tcx.hir().attrs(id)))\n     {\n         return;\n     }\n \n-    let span = cx.tcx.def_span(def_id);\n+    let span = cx.tcx.def_span(owner_id);\n     match (headers.safety, sig.header.unsafety) {\n         (false, hir::Unsafety::Unsafe) => span_lint(\n             cx,\n@@ -411,8 +410,7 @@ fn lint_for_missing_headers(\n         );\n     }\n     if !headers.errors {\n-        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-        if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::Result) {\n+        if is_type_diagnostic_item(cx, return_ty(cx, owner_id), sym::Result) {\n             span_lint(\n                 cx,\n                 MISSING_ERRORS_DOC,"}, {"sha": "d6ab4c25e83ef9a4593be1406173c043fd5c2585", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -8,6 +8,7 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::spec::abi::Abi;\n@@ -63,15 +64,19 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n-        hir_id: HirId,\n+        fn_def_id: LocalDefId,\n     ) {\n         if let Some(header) = fn_kind.header() {\n             if header.abi != Abi::Rust {\n                 return;\n             }\n         }\n \n-        let parent_id = cx.tcx.hir().get_parent_item(hir_id).def_id;\n+        let parent_id = cx\n+            .tcx\n+            .hir()\n+            .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(fn_def_id))\n+            .def_id;\n         let parent_node = cx.tcx.hir().find_by_def_id(parent_id);\n \n         let mut trait_self_ty = None;\n@@ -84,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             // find `self` ty for this trait if relevant\n             if let ItemKind::Trait(_, _, _, _, items) = item.kind {\n                 for trait_item in items {\n-                    if trait_item.id.hir_id() == hir_id {\n+                    if trait_item.id.owner_id.def_id == fn_def_id {\n                         // be sure we have `self` parameter in this function\n                         if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n                             trait_self_ty = Some(\n@@ -105,7 +110,6 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             too_large_for_stack: self.too_large_for_stack,\n         };\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n         let infcx = cx.tcx.infer_ctxt().build();\n         ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n "}, {"sha": "aef2db38583ee24e3eae3c6c9cb37c0c112896cc", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{get_parent_as_impl, has_repr_attr, is_bool};\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, FnDecl, HirId, Item, ItemKind, TraitFn, TraitItem, TraitItemKind, Ty};\n+use rustc_hir::{Body, FnDecl, Item, ItemKind, TraitFn, TraitItem, TraitItemKind, Ty};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n@@ -168,8 +169,9 @@ impl<'tcx> LateLintPass<'tcx> for ExcessiveBools {\n         fn_decl: &'tcx FnDecl<'tcx>,\n         _: &'tcx Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         if let Some(fn_header) = fn_kind.header()\n             && fn_header.abi == Abi::Rust\n             && get_parent_as_impl(cx.tcx, hir_id)"}, {"sha": "9fd13084dc9e860b191a8e5de5f5b23e77ba5686", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -79,8 +79,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n                     if v.fields().iter().any(|f| {\n-                        let def_id = cx.tcx.hir().local_def_id(f.hir_id);\n-                        !cx.tcx.visibility(def_id).is_public()\n+                        !cx.tcx.visibility(f.def_id).is_public()\n                     }) {\n                         // skip structs with private fields\n                         return;"}, {"sha": "92238d557e9d2debaa2763402d852b4cf2812155", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -311,6 +311,10 @@ fn check_uninlined_args(\n     // in those cases, make the code suggestion hidden\n     let multiline_fix = fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span));\n \n+    // Suggest removing each argument only once, for example in `format!(\"{0} {0}\", arg)`.\n+    fixes.sort_unstable_by_key(|(span, _)| *span);\n+    fixes.dedup_by_key(|(span, _)| *span);\n+\n     span_lint_and_then(\n         cx,\n         UNINLINED_FORMAT_ARGS,"}, {"sha": "8b53ee68ebdfb2bd8efb5f92dcd364768c5c535e", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n-use rustc_hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, ImplicitSelfKind, Unsafety};\n+use rustc_hir::{intravisit::FnKind, Body, ExprKind, FnDecl, ImplicitSelfKind, Unsafety};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::Span;\n@@ -10,14 +10,7 @@ use std::iter;\n \n use super::MISNAMED_GETTERS;\n \n-pub fn check_fn(\n-    cx: &LateContext<'_>,\n-    kind: FnKind<'_>,\n-    decl: &FnDecl<'_>,\n-    body: &Body<'_>,\n-    span: Span,\n-    _hir_id: HirId,\n-) {\n+pub fn check_fn(cx: &LateContext<'_>, kind: FnKind<'_>, decl: &FnDecl<'_>, body: &Body<'_>, span: Span) {\n     let FnKind::Method(ref ident, sig) = kind else {\n             return;\n         };"}, {"sha": "4399c68e130f7b7330c1c2a6f782d26ab297fc1d", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -9,6 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -363,12 +364,13 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         decl: &'tcx hir::FnDecl<'_>,\n         body: &'tcx hir::Body<'_>,\n         span: Span,\n-        hir_id: hir::HirId,\n+        def_id: LocalDefId,\n     ) {\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n         too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n-        not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, hir_id);\n-        misnamed_getters::check_fn(cx, kind, decl, body, span, hir_id);\n+        not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, def_id);\n+        misnamed_getters::check_fn(cx, kind, decl, body, span);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "29bdc46b647d5a8b807803d34f56949d5e0289bb", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n-use rustc_hir::def_id::{DefIdSet, LocalDefId};\n+use rustc_hir::def_id::DefIdSet;\n use rustc_hir::{self as hir, def::Res, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::{\n@@ -27,14 +27,14 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if is_public && !is_proc_macro(cx.sess(), attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.owner_id.def_id,\n+                item.owner_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this function could have a `#[must_use]` attribute\",\n             );\n@@ -49,7 +49,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if is_public\n             && !is_proc_macro(cx.sess(), attrs)\n             && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n@@ -59,7 +59,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.owner_id.def_id,\n+                item.owner_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this method could have a `#[must_use]` attribute\",\n             );\n@@ -75,7 +75,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if let hir::TraitFn::Provided(eid) = *eid {\n             let body = cx.tcx.hir().body(eid);\n             if attr.is_none() && is_public && !is_proc_macro(cx.sess(), attrs) {\n@@ -84,7 +84,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n                     sig.decl,\n                     body,\n                     item.span,\n-                    item.owner_id.def_id,\n+                    item.owner_id,\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );\n@@ -96,7 +96,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n fn check_needless_must_use(\n     cx: &LateContext<'_>,\n     decl: &hir::FnDecl<'_>,\n-    item_id: hir::HirId,\n+    item_id: hir::OwnerId,\n     item_span: Span,\n     fn_header_span: Span,\n     attr: &Attribute,\n@@ -131,16 +131,16 @@ fn check_must_use_candidate<'tcx>(\n     decl: &'tcx hir::FnDecl<'_>,\n     body: &'tcx hir::Body<'_>,\n     item_span: Span,\n-    item_id: LocalDefId,\n+    item_id: hir::OwnerId,\n     fn_span: Span,\n     msg: &str,\n ) {\n     if has_mutable_arg(cx, body)\n         || mutates_static(cx, body)\n         || in_external_macro(cx.sess(), item_span)\n         || returns_unit(decl)\n-        || !cx.effective_visibilities.is_exported(item_id)\n-        || is_must_use_ty(cx, return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(item_id)))\n+        || !cx.effective_visibilities.is_exported(item_id.def_id)\n+        || is_must_use_ty(cx, return_ty(cx, item_id))\n     {\n         return;\n     }"}, {"sha": "f2aa7b597a79b047754438082d3f4d7c64cea563", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -17,15 +17,15 @@ pub(super) fn check_fn<'tcx>(\n     kind: intravisit::FnKind<'tcx>,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     body: &'tcx hir::Body<'tcx>,\n-    hir_id: hir::HirId,\n+    def_id: LocalDefId,\n ) {\n     let unsafety = match kind {\n         intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }) => unsafety,\n         intravisit::FnKind::Method(_, sig) => sig.header.unsafety,\n         intravisit::FnKind::Closure => return,\n     };\n \n-    check_raw_ptr(cx, unsafety, decl, body, cx.tcx.hir().local_def_id(hir_id));\n+    check_raw_ptr(cx, unsafety, decl, body, def_id);\n }\n \n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n@@ -58,7 +58,7 @@ fn check_raw_ptr<'tcx>(\n                     },\n                     hir::ExprKind::MethodCall(_, recv, args, _) => {\n                         let def_id = typeck.type_dependent_def_id(e.hir_id).unwrap();\n-                        if cx.tcx.fn_sig(def_id).skip_binder().unsafety == hir::Unsafety::Unsafe {\n+                        if cx.tcx.fn_sig(def_id).skip_binder().skip_binder().unsafety == hir::Unsafety::Unsafe {\n                             check_arg(cx, &raw_ptrs, recv);\n                             for arg in args {\n                                 check_arg(cx, &raw_ptrs, arg);"}, {"sha": "fa2a9b30c058d1605a6048f85b0dfe2d14487bc5", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -21,7 +21,7 @@ fn result_err_ty<'tcx>(\n ) -> Option<(&'tcx hir::Ty<'tcx>, Ty<'tcx>)> {\n     if !in_external_macro(cx.sess(), item_span)\n         && let hir::FnRetTy::Return(hir_ty) = decl.output\n-        && let ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).output())\n+        && let ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).subst_identity().output())\n         && is_type_diagnostic_item(cx, ty, sym::Result)\n         && let ty::Adt(_, substs) = ty.kind()\n     {"}, {"sha": "9fb73a371b8f478505a64142671b96256328c1bf", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::return_ty;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, FnDecl, HirId};\n+use rustc_hir::{Body, FnDecl};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, AliasTy, Clause, EarlyBinder, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n use rustc_trait_selection::traits::{self, FulfillmentError};\n@@ -56,12 +57,12 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         decl: &'tcx FnDecl<'tcx>,\n         _: &'tcx Body<'tcx>,\n         _: Span,\n-        hir_id: HirId,\n+        fn_def_id: LocalDefId,\n     ) {\n         if let FnKind::Closure = kind {\n             return;\n         }\n-        let ret_ty = return_ty(cx, hir_id);\n+        let ret_ty = return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(fn_def_id).expect_owner());\n         if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n@@ -78,8 +79,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                 let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n                 let infcx = cx.tcx.infer_ctxt().build();\n-                let def_id = cx.tcx.hir().local_def_id(hir_id);\n-                let cause = traits::ObligationCause::misc(span, def_id);\n+                let cause = traits::ObligationCause::misc(span, fn_def_id);\n                 let send_errors = traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait);\n                 if !send_errors.is_empty() {\n                     span_lint_and_then("}, {"sha": "372b6ead3fe4685e6206645e17ec3a3dbd696207", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, FnRetTy, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{Span, SyntaxContext};\n \n declare_clippy_lint! {\n@@ -223,7 +224,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitReturn {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         if (!matches!(kind, FnKind::Closure) && matches!(decl.output, FnRetTy::DefaultReturn(_)))\n             || span.ctxt() != body.value.span.ctxt()"}, {"sha": "d43e5cc9b2c3d23c84edc14c121c5e2a2c654337", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if impl_item.generics.params.iter().all(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }));\n \n             // Check if return type is String\n-            if is_type_lang_item(cx, return_ty(cx, impl_item.hir_id()), LangItem::String);\n+            if is_type_lang_item(cx, return_ty(cx, impl_item.owner_id), LangItem::String);\n \n             // Filters instances of to_string which are required by a trait\n             if trait_ref_of_method(cx, impl_item.owner_id.def_id).is_none();\n@@ -124,7 +124,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n         .expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n-    let self_type = cx.tcx.fn_sig(item.owner_id).input(0);\n+    let self_type = cx.tcx.fn_sig(item.owner_id).skip_binder().input(0);\n     let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error"}, {"sha": "c924d7361ce3bc2da460b2cbce993544a2ac1018", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -66,7 +66,9 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n \n fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefId) {\n     if sig.decl.implicit_self.has_implicit_self() {\n-        let ret_ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(fn_id).output());\n+        let ret_ty = cx\n+            .tcx\n+            .erase_late_bound_regions(cx.tcx.fn_sig(fn_id).subst_identity().output());\n         let ret_ty = cx\n             .tcx\n             .try_normalize_erasing_regions(cx.param_env, ret_ty)"}, {"sha": "e13bc47973b105430c99aa6038649aa8ea96787d", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if let Some(local_id) = ty_id.as_local();\n             let ty_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_id);\n             if !is_lint_allowed(cx, LEN_WITHOUT_IS_EMPTY, ty_hir_id);\n-            if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.owner_id).skip_binder());\n+            if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.owner_id).subst_identity().skip_binder());\n             then {\n                 let (name, kind) = match cx.tcx.hir().find(ty_hir_id) {\n                     Some(Node::ForeignItem(x)) => (x.ident.name, \"extern type\"),\n@@ -197,7 +197,15 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: Symbol) -> bool {\n         item.ident.name == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && { cx.tcx.fn_sig(item.id.owner_id).inputs().skip_binder().len() == 1 }\n+                has_self && {\n+                    cx.tcx\n+                        .fn_sig(item.id.owner_id)\n+                        .skip_binder()\n+                        .inputs()\n+                        .skip_binder()\n+                        .len()\n+                        == 1\n+                }\n             } else {\n                 false\n             }\n@@ -225,7 +233,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n             .any(|i| {\n                 i.kind == ty::AssocKind::Fn\n                     && i.fn_has_self_parameter\n-                    && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n+                    && cx.tcx.fn_sig(i.def_id).skip_binder().inputs().skip_binder().len() == 1\n             });\n \n         if !is_empty_method_found {\n@@ -343,7 +351,11 @@ fn check_for_is_empty<'tcx>(\n         ),\n         Some(is_empty)\n             if !(is_empty.fn_has_self_parameter\n-                && check_is_empty_sig(cx.tcx.fn_sig(is_empty.def_id).skip_binder(), self_kind, output)) =>\n+                && check_is_empty_sig(\n+                    cx.tcx.fn_sig(is_empty.def_id).subst_identity().skip_binder(),\n+                    self_kind,\n+                    output,\n+                )) =>\n         {\n             (\n                 format!(\n@@ -474,7 +486,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n         if item.kind == ty::AssocKind::Fn {\n-            let sig = cx.tcx.fn_sig(item.def_id);\n+            let sig = cx.tcx.fn_sig(item.def_id).skip_binder();\n             let ty = sig.skip_binder();\n             ty.inputs().len() == 1\n         } else {"}, {"sha": "565c5b7af006812306d4fd273239e619d2e9f90c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,7 +1,6 @@\n #![feature(array_windows)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]"}, {"sha": "43a1a65a43a9d0bf5d099b1b2f07188d74908f62", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -144,7 +144,7 @@ fn check_fn_inner<'tcx>(\n         .filter(|param| matches!(param.kind, GenericParamKind::Type { .. }));\n \n     for typ in types {\n-        for pred in generics.bounds_for_param(cx.tcx.hir().local_def_id(typ.hir_id)) {\n+        for pred in generics.bounds_for_param(typ.def_id) {\n             if pred.origin == PredicateOrigin::WhereClause {\n                 // has_where_lifetimes checked that this predicate contains no lifetime.\n                 continue;"}, {"sha": "25a1a5842f77bb15d4f8442af812105c38bc3643", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             ExprKind::MethodCall(_, receiver, args, _) => {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n                 for (ty, expr) in iter::zip(\n-                    self.cx.tcx.fn_sig(def_id).inputs().skip_binder(),\n+                    self.cx.tcx.fn_sig(def_id).subst_identity().inputs().skip_binder(),\n                     std::iter::once(receiver).chain(args.iter()),\n                 ) {\n                     self.prefer_mutable = false;"}, {"sha": "3778eb4c732d7ea73686ab434b0b9513fd68f0fa", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -6,10 +6,11 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    HirId, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -45,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();"}, {"sha": "9a84068d4487b3054607d5babc643b30aa15f5ac", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -157,11 +157,10 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             && def.variants.len() > 1\n         {\n             let mut iter = def.variants.iter().filter_map(|v| {\n-                let id = cx.tcx.hir().local_def_id(v.hir_id);\n-                (matches!(v.data, hir::VariantData::Unit(..))\n+                (matches!(v.data, hir::VariantData::Unit(_, _))\n                     && v.ident.as_str().starts_with('_')\n                     && is_doc_hidden(cx.tcx.hir().attrs(v.hir_id)))\n-                .then_some((id, v.span))\n+                .then_some((v.def_id, v.span))\n             });\n             if let Some((id, span)) = iter.next()\n                 && iter.next().is_none()"}, {"sha": "edcab6968cbe0aaead4427e61b4d20de4a09d8cd", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -104,7 +104,7 @@ fn is_unit_function(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n \n     if let ty::FnDef(id, _) = *ty.kind() {\n-        if let Some(fn_type) = cx.tcx.fn_sig(id).no_bound_vars() {\n+        if let Some(fn_type) = cx.tcx.fn_sig(id).subst_identity().no_bound_vars() {\n             return is_unit_type(fn_type.output());\n         }\n     }"}, {"sha": "5e01ed90ff0997402337ae9cba753f55495c2fb4", "filename": "clippy_lints/src/methods/collapsible_str_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -54,7 +54,7 @@ fn collect_replace_calls<'tcx>(\n                 from_args.push_front(from);\n                 ControlFlow::Continue(())\n             } else {\n-                ControlFlow::BREAK\n+                ControlFlow::Break(())\n             }\n         } else {\n             ControlFlow::Continue(())"}, {"sha": "aed0ad5d9b5a78fe231beceff720413bc65f5287", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -70,7 +70,7 @@ pub(super) fn check<'tcx>(\n                 if let hir::ExprKind::Path(ref p) = fun.kind {\n                     match cx.qpath_res(p, fun.hir_id) {\n                         hir::def::Res::Def(hir::def::DefKind::Fn | hir::def::DefKind::AssocFn, def_id) => matches!(\n-                            cx.tcx.fn_sig(def_id).output().skip_binder().kind(),\n+                            cx.tcx.fn_sig(def_id).subst_identity().output().skip_binder().kind(),\n                             ty::Ref(re, ..) if re.is_static(),\n                         ),\n                         _ => false,\n@@ -84,7 +84,7 @@ pub(super) fn check<'tcx>(\n                     .type_dependent_def_id(arg.hir_id)\n                     .map_or(false, |method_id| {\n                         matches!(\n-                            cx.tcx.fn_sig(method_id).output().skip_binder().kind(),\n+                            cx.tcx.fn_sig(method_id).subst_identity().output().skip_binder().kind(),\n                             ty::Ref(re, ..) if re.is_static()\n                         )\n                     })"}, {"sha": "f1e8be7f2b87f4b117e361a69cb9b9444ea60d18", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -3353,7 +3353,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n         if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {\n-            let method_sig = cx.tcx.fn_sig(impl_item.owner_id);\n+            let method_sig = cx.tcx.fn_sig(impl_item.owner_id).subst_identity();\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n             let first_arg_ty_opt = method_sig.inputs().iter().next().copied();\n             // if this impl block implements a trait, lint in trait definition instead\n@@ -3413,7 +3413,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n \n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n-            let ret_ty = return_ty(cx, impl_item.hir_id());\n+            let ret_ty = return_ty(cx, impl_item.owner_id);\n \n             if contains_ty_adt_constructor_opaque(cx, ret_ty, self_ty) {\n                 return;\n@@ -3461,7 +3461,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         if_chain! {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n-            let ret_ty = return_ty(cx, item.hir_id());\n+            let ret_ty = return_ty(cx, item.owner_id);\n             let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n                 .self_ty()\n                 .skip_binder();"}, {"sha": "82d3b830d4f3949c498c672280097b18dc7167d6", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -137,7 +137,7 @@ pub(super) fn check<'tcx>(\n /// Checks if the given method call matches the expected signature of `([&[mut]] self) -> bool`\n fn is_is_empty_sig(cx: &LateContext<'_>, call_id: HirId) -> bool {\n     cx.typeck_results().type_dependent_def_id(call_id).map_or(false, |id| {\n-        let sig = cx.tcx.fn_sig(id).skip_binder();\n+        let sig = cx.tcx.fn_sig(id).subst_identity().skip_binder();\n         sig.inputs().len() == 1 && sig.output().is_bool()\n     })\n }\n@@ -165,7 +165,7 @@ fn iterates_same_ty<'tcx>(cx: &LateContext<'tcx>, iter_ty: Ty<'tcx>, collect_ty:\n fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -> bool {\n     let typeck = cx.typeck_results();\n     if let Some(id) = typeck.type_dependent_def_id(call_id)\n-        && let sig = cx.tcx.fn_sig(id)\n+        && let sig = cx.tcx.fn_sig(id).subst_identity()\n         && sig.skip_binder().output().is_bool()\n         && let [_, search_ty] = *sig.skip_binder().inputs()\n         && let ty::Ref(_, search_ty, Mutability::Not) = *cx.tcx.erase_late_bound_regions(sig.rebind(search_ty)).kind()"}, {"sha": "0dc7fe2a2c5a36d900e9a43b61829a86d664ab1d", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -11,10 +11,8 @@ use super::SUSPICIOUS_MAP;\n pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, count_recv: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) {\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n-        let closure = expr_or_init(cx, map_arg);\n-        if let Some(def_id) = cx.tcx.hir().opt_local_def_id(closure.hir_id);\n-        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(def_id);\n-        let closure_body = cx.tcx.hir().body(body_id);\n+        if let hir::ExprKind::Closure(closure) = expr_or_init(cx, map_arg).kind;\n+        let closure_body = cx.tcx.hir().body(closure.body);\n         if !cx.typeck_results().expr_ty(closure_body.value).is_unit();\n         then {\n             if let Some(map_mutated_vars) = mutated_variables(closure_body.value, cx) {"}, {"sha": "4e5af1c7c71249bba4dab76cba74386d2214e484", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -246,7 +246,7 @@ fn check_other_call_arg<'tcx>(\n     if_chain! {\n         if let Some((maybe_call, maybe_arg)) = skip_addr_of_ancestors(cx, expr);\n         if let Some((callee_def_id, _, recv, call_args)) = get_callee_substs_and_args(cx, maybe_call);\n-        let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+        let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n         if let Some(i) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == maybe_arg.hir_id);\n         if let Some(input) = fn_sig.inputs().get(i);\n         let (input, n_refs) = peel_mid_ty_refs(*input);\n@@ -368,10 +368,9 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Block(..) => continue,\n             Node::Item(item) => {\n                 if let ItemKind::Fn(_, _, body_id) = &item.kind\n-                && let output_ty = return_ty(cx, item.hir_id())\n-                && let local_def_id = cx.tcx.hir().local_def_id(item.hir_id())\n-                && Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, local_def_id);\n+                && let output_ty = return_ty(cx, item.owner_id)\n+                && Inherited::build(cx.tcx, item.owner_id.def_id).enter(|inherited| {\n+                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, item.owner_id.def_id);\n                     fn_ctxt.can_coerce(ty, output_ty)\n                 }) {\n                     if has_lifetime(output_ty) && has_lifetime(ty) {\n@@ -386,7 +385,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n-                    let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+                    let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n                     if let Some(arg_index) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == expr.hir_id)\n                         && let Some(param_ty) = fn_sig.inputs().get(arg_index)\n                         && let ty::Param(ParamTy { index: param_index , ..}) = param_ty.kind()"}, {"sha": "0705029a613bba3e1f863e46eb68ca82bdcd73eb", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -4,12 +4,13 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    self as hir, def, BinOpKind, BindingAnnotation, Body, ByRef, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind,\n-    Stmt, StmtKind, TyKind,\n+    self as hir, def, BinOpKind, BindingAnnotation, Body, ByRef, Expr, ExprKind, FnDecl, Mutability, PatKind, Stmt,\n+    StmtKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n \n@@ -151,7 +152,7 @@ impl<'tcx> LateLintPass<'tcx> for LintPass {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         if let FnKind::Closure = k {\n             // Does not apply to closures"}, {"sha": "87bd007a26a241e7dcbf43bca5d01a10932ab39a", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -6,11 +6,12 @@ use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_ma\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n+use rustc_hir::{Body, Constness, FnDecl, GenericParamKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -91,14 +92,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         _: &FnDecl<'_>,\n         body: &Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         if !self.msrv.meets(msrvs::CONST_IF_MATCH) {\n             return;\n         }\n \n-        let def_id = cx.tcx.hir().local_def_id(hir_id);\n-\n         if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id.to_def_id()) {\n             return;\n         }\n@@ -132,6 +131,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             FnKind::Closure => return,\n         }\n \n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n+\n         // Const fns are not allowed as methods in a trait.\n         {\n             let parent = cx.tcx.hir().get_parent_item(hir_id).def_id;"}, {"sha": "63c575fca30ba17b2fecc1bf616e564345f6c10f", "filename": "clippy_lints/src/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -128,7 +128,7 @@ fn collect_unsafe_exprs<'tcx>(\n                         ..\n                     },\n                 )) if kind.is_fn_like() => {\n-                    let sig = cx.tcx.bound_fn_sig(*def_id);\n+                    let sig = cx.tcx.fn_sig(*def_id);\n                     if sig.0.unsafety() == Unsafety::Unsafe {\n                         unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n                     }\n@@ -138,7 +138,7 @@ fn collect_unsafe_exprs<'tcx>(\n                     if let Some(sig) = cx\n                         .typeck_results()\n                         .type_dependent_def_id(path_expr.hir_id)\n-                        .map(|def_id| cx.tcx.bound_fn_sig(def_id))\n+                        .map(|def_id| cx.tcx.fn_sig(def_id))\n                     {\n                         if sig.0.unsafety() == Unsafety::Unsafe {\n                             unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n@@ -153,7 +153,7 @@ fn collect_unsafe_exprs<'tcx>(\n                 if let Some(sig) = cx\n                     .typeck_results()\n                     .type_dependent_def_id(expr.hir_id)\n-                    .map(|def_id| cx.tcx.bound_fn_sig(def_id))\n+                    .map(|def_id| cx.tcx.fn_sig(def_id))\n                 {\n                     if sig.0.unsafety() == Unsafety::Unsafe {\n                         unsafe_ops.push((\"unsafe method call occurs here\", expr.span));"}, {"sha": "5f7aac21e6eb00a194ba232c714fb94017e82e5b", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -6,6 +6,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{Adt, Array, Ref, Slice, Tuple, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n use std::iter;\n@@ -102,21 +103,21 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n         if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n-            self.check_sig(cx, item.hir_id(), sig.decl);\n+            self.check_sig(cx, item.owner_id.def_id, sig.decl);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n             if trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n-                self.check_sig(cx, item.hir_id(), sig.decl);\n+                self.check_sig(cx, item.owner_id.def_id, sig.decl);\n             }\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'tcx>) {\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n-            self.check_sig(cx, item.hir_id(), sig.decl);\n+            self.check_sig(cx, item.owner_id.def_id, sig.decl);\n         }\n     }\n \n@@ -136,9 +137,8 @@ impl MutableKeyType {\n         }\n     }\n \n-    fn check_sig(&self, cx: &LateContext<'_>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n-        let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+    fn check_sig(&self, cx: &LateContext<'_>, fn_def_id: LocalDefId, decl: &hir::FnDecl<'_>) {\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id).subst_identity();\n         for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {\n             self.check_ty_(cx, hir_ty.span, *ty);\n         }"}, {"sha": "996ea6ed723160d8a7bb31d080059ffab7de6436", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -20,6 +20,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n@@ -82,12 +83,14 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        hir_id: HirId,\n+        fn_def_id: LocalDefId,\n     ) {\n         if span.from_expansion() {\n             return;\n         }\n \n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n+\n         match kind {\n             FnKind::ItemFn(.., header) => {\n                 let attrs = cx.tcx.hir().attrs(hir_id);\n@@ -119,8 +122,6 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n-\n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n@@ -147,7 +148,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             ctx\n         };\n \n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id).subst_identity();\n         let fn_sig = cx.tcx.erase_late_bound_regions(fn_sig);\n \n         for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(body.params).enumerate() {"}, {"sha": "faf9ec61ec504396d37c9eb076cfe9049d645602", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                     }\n                     if let hir::ImplItemKind::Fn(ref sig, _) = impl_item.kind {\n                         let name = impl_item.ident.name;\n-                        let id = impl_item.hir_id();\n+                        let id = impl_item.owner_id;\n                         if sig.header.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;\n@@ -97,7 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n                             if cx.effective_visibilities.is_reachable(impl_item.owner_id.def_id);\n-                            let self_def_id = cx.tcx.hir().get_parent_item(id);\n+                            let self_def_id = cx.tcx.hir().get_parent_item(id.into());\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                 span_lint_hir_and_then(\n                                     cx,\n                                     NEW_WITHOUT_DEFAULT,\n-                                    id,\n+                                    id.into(),\n                                     impl_item.span,\n                                     &format!(\n                                         \"you should consider adding a `Default` implementation for `{self_type_snip}`\""}, {"sha": "d592f6e814c1d3599ceb0dcdac485a729d7d2c6b", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -209,7 +209,8 @@ impl<'tcx> LateLintPass<'tcx> for ArithmeticSideEffects {\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n         let body_owner = cx.tcx.hir().body_owner(body.id());\n-        let body_owner_def_id = cx.tcx.hir().local_def_id(body_owner);\n+        let body_owner_def_id = cx.tcx.hir().body_owner_def_id(body.id());\n+\n         let body_owner_kind = cx.tcx.hir().body_owner_kind(body_owner_def_id);\n         if let hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) = body_owner_kind {\n             let body_span = cx.tcx.hir().span_with_body(body_owner);"}, {"sha": "777395f452c92397e47a9caeeee568184e3d6ed6", "filename": "clippy_lints/src/operators/numeric_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -96,7 +96,7 @@ impl Context {\n \n     pub fn enter_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n         let body_owner = cx.tcx.hir().body_owner(body.id());\n-        let body_owner_def_id = cx.tcx.hir().local_def_id(body_owner);\n+        let body_owner_def_id = cx.tcx.hir().body_owner_def_id(body.id());\n \n         match cx.tcx.hir().body_owner_kind(body_owner_def_id) {\n             hir::BodyOwnerKind::Static(_) | hir::BodyOwnerKind::Const => {"}, {"sha": "849cd03dd7bf639fd8e97d1fe884c16066b6f47e", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -8,6 +8,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -49,9 +50,13 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n         _: &'tcx hir::FnDecl<'tcx>,\n         body: &'tcx hir::Body<'tcx>,\n         span: Span,\n-        hir_id: hir::HirId,\n+        def_id: LocalDefId,\n     ) {\n-        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::Result) {\n+        if matches!(fn_kind, FnKind::Closure) {\n+            return;\n+        }\n+        let owner = cx.tcx.hir().local_def_id_to_hir_id(def_id).expect_owner();\n+        if is_type_diagnostic_item(cx, return_ty(cx, owner), sym::Result) {\n             lint_impl_body(cx, span, body);\n         }\n     }"}, {"sha": "0d78c3048ba127bc2ae74f88b0e7a9c8183f000e", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, Impl, ItemKind, MutTy, Mutability, Node, PatKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, Impl, ItemKind, MutTy, Mutability, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, PointerCast};\n use rustc_middle::ty::layout::LayoutOf;\n@@ -143,7 +143,7 @@ impl<'tcx> PassByRefOrValue {\n             return;\n         }\n \n-        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let fn_sig = cx.tcx.fn_sig(def_id).subst_identity();\n         let fn_body = cx.enclosing_body.map(|id| cx.tcx.hir().body(id));\n \n         // Gather all the lifetimes found in the output type which may affect whether\n@@ -272,12 +272,13 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         decl: &'tcx FnDecl<'_>,\n         _body: &'tcx Body<'_>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         if span.from_expansion() {\n             return;\n         }\n \n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         match kind {\n             FnKind::ItemFn(.., header) => {\n                 if header.abi != Abi::Rust {\n@@ -308,6 +309,6 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n             }\n         }\n \n-        self.check_poly_fn(cx, cx.tcx.hir().local_def_id(hir_id), decl, Some(span));\n+        self.check_poly_fn(cx, def_id, decl, Some(span));\n     }\n }"}, {"sha": "9f98195d311fed80f3e84e79d64512809bbf1b1f", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::{\n-    intravisit, Body, Expr, ExprKind, FnDecl, HirId, Let, LocalSource, Mutability, Pat, PatKind, Stmt, StmtKind,\n-};\n+use rustc_hir::{intravisit, Body, Expr, ExprKind, FnDecl, Let, LocalSource, Mutability, Pat, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n@@ -116,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n         _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         for param in body.params {\n             apply_lint(cx, param.pat, DerefPossible::Impossible);"}, {"sha": "d88409c356e913e3cc8268208a7a502ec29bf723", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             check_mut_from_ref(cx, sig, None);\n             for arg in check_fn_args(\n                 cx,\n-                cx.tcx.fn_sig(item.owner_id).skip_binder().inputs(),\n+                cx.tcx.fn_sig(item.owner_id).subst_identity().skip_binder().inputs(),\n                 sig.decl.inputs,\n                 &[],\n             )\n@@ -217,7 +217,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n \n         check_mut_from_ref(cx, sig, Some(body));\n         let decl = sig.decl;\n-        let sig = cx.tcx.fn_sig(item_id).skip_binder();\n+        let sig = cx.tcx.fn_sig(item_id).subst_identity().skip_binder();\n         let lint_args: Vec<_> = check_fn_args(cx, sig.inputs(), decl.inputs, body.params)\n             .filter(|arg| !is_trait_item || arg.mutability() == Mutability::Not)\n             .collect();\n@@ -624,7 +624,10 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             return;\n                         };\n \n-                        match *self.cx.tcx.fn_sig(id).skip_binder().inputs()[i].peel_refs().kind() {\n+                        match *self.cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[i]\n+                            .peel_refs()\n+                            .kind()\n+                        {\n                             ty::Dynamic(preds, _, _) if !matches_preds(self.cx, args.deref_ty.ty(self.cx), preds) => {\n                                 set_skip_flag();\n                             },"}, {"sha": "944a33cc3e53fad4c0ee3d0fcd9944739fcb76b2", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -6,11 +6,12 @@ use clippy_utils::{fn_has_unsatisfiable_preds, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{def_id, Body, FnDecl, HirId, LangItem};\n+use rustc_hir::{def_id, Body, FnDecl, LangItem};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;\n \n@@ -69,12 +70,10 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n         cx: &LateContext<'tcx>,\n         _: FnKind<'tcx>,\n         _: &'tcx FnDecl<'_>,\n-        body: &'tcx Body<'_>,\n+        _: &'tcx Body<'_>,\n         _: Span,\n-        _: HirId,\n+        def_id: LocalDefId,\n     ) {\n-        let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n-\n         // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n         if fn_has_unsatisfiable_preds(cx, def_id.to_def_id()) {\n             return;"}, {"sha": "bccf421e8f3bfc5ec32b0c41c06c8d3035de1ea8", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::ty::is_must_use_ty;\n use clippy_utils::{nth_arg, return_ty};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n+use rustc_hir::{Body, FnDecl, OwnerId, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -68,18 +68,18 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ReturnSelfNotMustUse => [RETURN_SELF_NOT_MUST_USE]);\n \n-fn check_method(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_def: LocalDefId, span: Span, hir_id: HirId) {\n+fn check_method(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_def: LocalDefId, span: Span, owner_id: OwnerId) {\n     if_chain! {\n         // If it comes from an external macro, better ignore it.\n         if !in_external_macro(cx.sess(), span);\n         if decl.implicit_self.has_implicit_self();\n         // We only show this warning for public exported methods.\n         if cx.effective_visibilities.is_exported(fn_def);\n         // We don't want to emit this lint if the `#[must_use]` attribute is already there.\n-        if !cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::must_use));\n+        if !cx.tcx.hir().attrs(owner_id.into()).iter().any(|attr| attr.has_name(sym::must_use));\n         if cx.tcx.visibility(fn_def.to_def_id()).is_public();\n-        let ret_ty = return_ty(cx, hir_id);\n-        let self_arg = nth_arg(cx, hir_id, 0);\n+        let ret_ty = return_ty(cx, owner_id);\n+        let self_arg = nth_arg(cx, owner_id, 0);\n         // If `Self` has the same type as the returned type, then we want to warn.\n         //\n         // For this check, we don't want to remove the reference on the returned type because if\n@@ -109,26 +109,26 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n         decl: &'tcx FnDecl<'tcx>,\n         _: &'tcx Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        fn_def: LocalDefId,\n     ) {\n         if_chain! {\n             // We are only interested in methods, not in functions or associated functions.\n             if matches!(kind, FnKind::Method(_, _));\n-            if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n             if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n             // We don't want this method to be te implementation of a trait because the\n             // `#[must_use]` should be put on the trait definition directly.\n             if cx.tcx.trait_id_of_impl(impl_def).is_none();\n \n             then {\n-                check_method(cx, decl, fn_def, span, hir_id);\n+                let hir_id = cx.tcx.hir().local_def_id_to_hir_id(fn_def);\n+                check_method(cx, decl, fn_def, span, hir_id.expect_owner());\n             }\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n         if let TraitItemKind::Fn(ref sig, _) = item.kind {\n-            check_method(cx, sig.decl, item.owner_id.def_id, item.span, item.hir_id());\n+            check_method(cx, sig.decl, item.owner_id.def_id, item.span, item.owner_id);\n         }\n     }\n }"}, {"sha": "84a0c6b9558531ae41f7116b69d09d8ec4ecd1d6", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -6,11 +6,12 @@ use core::ops::ControlFlow;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, LangItem, MatchSource, PatKind, QPath, StmtKind};\n+use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, LangItem, MatchSource, PatKind, QPath, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::{BytePos, Pos};\n \n@@ -152,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         _: &'tcx FnDecl<'tcx>,\n         body: &'tcx Body<'tcx>,\n         sp: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         match kind {\n             FnKind::Closure => {\n@@ -290,6 +291,7 @@ fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>)\n             && cx\n                 .tcx\n                 .fn_sig(def_id)\n+                .subst_identity()\n                 .skip_binder()\n                 .output()\n                 .walk()"}, {"sha": "3ce030cd721a713491a0db0fd79a1f4f72a045f0", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.owner_id);\n-        let ret_ty = return_ty(cx, impl_item.hir_id());\n+        let ret_ty = return_ty(cx, impl_item.owner_id);\n \n         // Do not check trait impls\n         if matches!(item.kind, ItemKind::Impl(Impl { of_trait: Some(_), .. })) {"}, {"sha": "de0c5d56e41566ba89a39c34aad08fe6052283f1", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -61,8 +61,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n         if let rustc_hir::TyKind::Array(_, rustc_hir::ArrayLen::Body(length)) = last_field.ty.kind;\n \n         // Then check if that that array zero-sized\n-        let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n-        let length = Const::from_anon_const(cx.tcx, length_ldid);\n+        let length = Const::from_anon_const(cx.tcx, length.def_id);\n         let length = length.try_eval_usize(cx.tcx, cx.param_env);\n         if let Some(length) = length;\n         then {"}, {"sha": "c1f228d5f90a916fd44cb4cfd578cf15b445a345", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -12,11 +12,12 @@ mod vec_box;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n+    Body, FnDecl, FnRetTy, GenericArg, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n     TraitItemKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n@@ -311,15 +312,27 @@ pub struct Types {\n impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n-    fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n-        let is_in_trait_impl =\n-            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id).def_id) {\n-                matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n-            } else {\n-                false\n-            };\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_>,\n+        _: FnKind<'_>,\n+        decl: &FnDecl<'_>,\n+        _: &Body<'_>,\n+        _: Span,\n+        def_id: LocalDefId,\n+    ) {\n+        let is_in_trait_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(\n+            cx.tcx\n+                .hir()\n+                .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(def_id))\n+                .def_id,\n+        ) {\n+            matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n+        } else {\n+            false\n+        };\n \n-        let is_exported = cx.effective_visibilities.is_exported(cx.tcx.hir().local_def_id(id));\n+        let is_exported = cx.effective_visibilities.is_exported(def_id);\n \n         self.check_fn_decl(\n             cx,\n@@ -379,9 +392,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n-        let is_exported = cx\n-            .effective_visibilities\n-            .is_exported(cx.tcx.hir().local_def_id(field.hir_id));\n+        let is_exported = cx.effective_visibilities.is_exported(field.def_id);\n \n         self.check_ty(\n             cx,"}, {"sha": "289ca4e9bed3cb9707c5fcdea0563a07778c3d6a", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -76,7 +76,7 @@ fn get_projection_pred<'tcx>(\n fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Vec<(usize, String)> {\n     let mut args_to_check = Vec::new();\n     if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let fn_sig = cx.tcx.fn_sig(def_id).subst_identity();\n         let generics = cx.tcx.predicates_of(def_id);\n         let fn_mut_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().fn_mut_trait());\n         let ord_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.get_diagnostic_item(sym::Ord));"}, {"sha": "d6167a62169d405fe996fad7007c7d82a410534b", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -156,7 +156,7 @@ fn needs_inferred_result_ty(\n         },\n         _ => return false,\n     };\n-    let sig = cx.tcx.fn_sig(id).skip_binder();\n+    let sig = cx.tcx.fn_sig(id).subst_identity().skip_binder();\n     if let ty::Param(output_ty) = *sig.output().kind() {\n         let args: Vec<&Expr<'_>> = if let Some(receiver) = receiver {\n             std::iter::once(receiver).chain(args.iter()).collect()"}, {"sha": "8b0e0ce5a3001581d97c8c9708195e9ae92189ce", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -5,10 +5,11 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n-use rustc_hir::{Body, ExprKind, FnDecl, HirId, Impl, ItemKind, Node};\n+use rustc_hir::{Body, ExprKind, FnDecl, Impl, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -77,12 +78,11 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         fn_decl: &FnDecl<'tcx>,\n         body: &Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         // Abort if public function/method or closure.\n         match fn_kind {\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                let def_id = cx.tcx.hir().local_def_id(hir_id);\n                 if self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(def_id) {\n                     return;\n                 }\n@@ -91,6 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Abort if the method is implementing a trait or of it a trait method.\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n@@ -101,17 +102,18 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Get the wrapper and inner types, if can't, abort.\n-        let (return_type_label, lang_item, inner_type) = if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id).kind() {\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did()) {\n-                (\"Option\", OptionSome, subst.type_at(0))\n-            } else if cx.tcx.is_diagnostic_item(sym::Result, adt_def.did()) {\n-                (\"Result\", ResultOk, subst.type_at(0))\n+        let (return_type_label, lang_item, inner_type) =\n+            if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id.expect_owner()).kind() {\n+                if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did()) {\n+                    (\"Option\", OptionSome, subst.type_at(0))\n+                } else if cx.tcx.is_diagnostic_item(sym::Result, adt_def.did()) {\n+                    (\"Result\", ResultOk, subst.type_at(0))\n+                } else {\n+                    return;\n+                }\n             } else {\n                 return;\n-            }\n-        } else {\n-            return;\n-        };\n+            };\n \n         // Check if all return expression respect the following condition and collect them.\n         let mut suggs = Vec::new();"}, {"sha": "55651a28be9246b660c9f81f7f886c14819ea612", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -66,11 +67,11 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         fn_decl: &'tcx FnDecl<'tcx>,\n         body: &Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         if !span.from_expansion() && fn_kind.asyncness().is_async() {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n-            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n+            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), def_id);\n             if !visitor.found_await {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "377d3fb6f4e1ccee8b6e9d9abc53dd571c95cd1e", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -312,7 +313,7 @@ impl<'tcx> LateLintPass<'tcx> for Unwrap {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        fn_id: HirId,\n+        fn_id: LocalDefId,\n     ) {\n         if span.from_expansion() {\n             return;"}, {"sha": "3a1845425a251b12eb0c1f2b4d358282bded6dc8", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -64,8 +64,8 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n             // first check if it's a method or function\n             if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n             // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::Result)\n-                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::Option);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.owner_id), sym::Result)\n+                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.owner_id), sym::Option);\n             then {\n                 lint_impl_body(cx, impl_item.span, impl_item);\n             }"}, {"sha": "3cd35838961f65694aa9efce148b114c9b0ee314", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     .associated_item(impl_item.owner_id)\n                     .trait_item_def_id\n                     .expect(\"impl method matches a trait method\");\n-                let trait_method_sig = cx.tcx.fn_sig(trait_method);\n+                let trait_method_sig = cx.tcx.fn_sig(trait_method).subst_identity();\n                 let trait_method_sig = cx.tcx.erase_late_bound_regions(trait_method_sig);\n \n                 // `impl_inputs_outputs` is an iterator over the types (`hir::Ty`) declared in the"}, {"sha": "f718207654f44d836172a74dfbe81bc47a72d20e", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -215,14 +215,13 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n                     cx,\n                 };\n                 let body_id = cx.tcx.hir().body_owned_by(\n-                    cx.tcx.hir().local_def_id(\n-                        impl_item_refs\n-                            .iter()\n-                            .find(|iiref| iiref.ident.as_str() == \"get_lints\")\n-                            .expect(\"LintPass needs to implement get_lints\")\n-                            .id\n-                            .hir_id(),\n-                    ),\n+                    impl_item_refs\n+                        .iter()\n+                        .find(|iiref| iiref.ident.as_str() == \"get_lints\")\n+                        .expect(\"LintPass needs to implement get_lints\")\n+                        .id\n+                        .owner_id\n+                        .def_id,\n                 );\n                 collector.visit_expr(cx.tcx.hir().body(body_id).value);\n             }"}, {"sha": "5c89dd3e49f41569bd2525e90c9a5e58b8ffedf7", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -79,7 +79,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n             && subs.types().all(|x| matches!(x.peel_refs().kind(), ty::Param(_)))\n         {\n             // Limit the function to either `(self) -> bool` or `(&self) -> bool`\n-            match &**cx.tcx.fn_sig(fn_id).skip_binder().inputs_and_output {\n+            match &**cx.tcx.fn_sig(fn_id).subst_identity().skip_binder().inputs_and_output {\n                 [arg, res] if !arg.is_mutable_ptr() && arg.peel_refs() == ty && res.is_bool() => NoChange,\n                 _ => Lazy,\n             }"}, {"sha": "26f279f55855f3ef9dd1ca73705acc42f54470d0", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,6 +1,5 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n@@ -1119,9 +1118,8 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n                         self.captures.entry(l).and_modify(|e| *e |= cap).or_insert(cap);\n                     }\n                 },\n-                ExprKind::Closure { .. } => {\n-                    let closure_id = self.cx.tcx.hir().local_def_id(e.hir_id);\n-                    for capture in self.cx.typeck_results().closure_min_captures_flattened(closure_id) {\n+                ExprKind::Closure(closure) => {\n+                    for capture in self.cx.typeck_results().closure_min_captures_flattened(closure.def_id) {\n                         let local_id = match capture.place.base {\n                             PlaceBase::Local(id) => id,\n                             PlaceBase::Upvar(var) => var.var_path.hir_id,\n@@ -1379,7 +1377,7 @@ pub fn get_enclosing_loop_or_multi_call_closure<'tcx>(\n                                     .chain(args.iter())\n                                     .position(|arg| arg.hir_id == id)?;\n                                 let id = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n-                                let ty = cx.tcx.fn_sig(id).skip_binder().inputs()[i];\n+                                let ty = cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[i];\n                                 ty_is_fn_once_param(cx.tcx, ty, cx.tcx.param_env(id).caller_bounds()).then_some(())\n                             },\n                             _ => None,\n@@ -1578,16 +1576,14 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n }\n \n /// Convenience function to get the return type of a function.\n-pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx> {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n-    let ret_ty = cx.tcx.fn_sig(fn_def_id).output();\n+pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_def_id: hir::OwnerId) -> Ty<'tcx> {\n+    let ret_ty = cx.tcx.fn_sig(fn_def_id).subst_identity().output();\n     cx.tcx.erase_late_bound_regions(ret_ty)\n }\n \n /// Convenience function to get the nth argument type of a function.\n-pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId, nth: usize) -> Ty<'tcx> {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n-    let arg = cx.tcx.fn_sig(fn_def_id).input(nth);\n+pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_def_id: hir::OwnerId, nth: usize) -> Ty<'tcx> {\n+    let arg = cx.tcx.fn_sig(fn_def_id).subst_identity().input(nth);\n     cx.tcx.erase_late_bound_regions(arg)\n }\n "}, {"sha": "63dccbf697c2de049c3ffca7bb8379fb578b9df3", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -327,7 +327,7 @@ fn is_assert_arg(cx: &LateContext<'_>, expr: &Expr<'_>, assert_expn: ExpnId) ->\n         } else {\n             match cx.tcx.item_name(macro_call.def_id) {\n                 // `cfg!(debug_assertions)` in `debug_assert!`\n-                sym::cfg => ControlFlow::CONTINUE,\n+                sym::cfg => ControlFlow::Continue(()),\n                 // assert!(other_macro!(..))\n                 _ => ControlFlow::Break(true),\n             }\n@@ -711,8 +711,8 @@ pub struct FormatSpec<'tcx> {\n     pub fill: Option<char>,\n     /// Optionally specified alignment.\n     pub align: Alignment,\n-    /// Packed version of various flags provided, see [`rustc_parse_format::Flag`].\n-    pub flags: u32,\n+    /// Whether all flag options are set to default (no flags specified).\n+    pub no_flags: bool,\n     /// Represents either the maximum width or the integer precision.\n     pub precision: Count<'tcx>,\n     /// The minimum width, will be padded according to `width`/`align`\n@@ -728,7 +728,7 @@ impl<'tcx> FormatSpec<'tcx> {\n         Some(Self {\n             fill: spec.fill,\n             align: spec.align,\n-            flags: spec.flags,\n+            no_flags: spec.sign.is_none() && !spec.alternate && !spec.zero_pad && spec.debug_hex.is_none(),\n             precision: Count::new(\n                 FormatParamUsage::Precision,\n                 spec.precision,\n@@ -770,10 +770,7 @@ impl<'tcx> FormatSpec<'tcx> {\n     /// Has no other formatting specifiers than setting the format trait. returns true for `{}`,\n     /// `{foo}`, `{:?}`, but false for `{foo:5}`, `{3:.5?}`\n     pub fn is_default_for_trait(&self) -> bool {\n-        self.width.is_implied()\n-            && self.precision.is_implied()\n-            && self.align == Alignment::AlignUnknown\n-            && self.flags == 0\n+        self.width.is_implied() && self.precision.is_implied() && self.align == Alignment::AlignUnknown && self.no_flags\n     }\n }\n "}, {"sha": "5836eb73bd94c30e2a833250ddd538689a53b7ff", "filename": "clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -140,7 +140,7 @@ impl TypeVisitor<'_> for ContainsRegion {\n     type BreakTy = ();\n \n     fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n-        ControlFlow::BREAK\n+        ControlFlow::Break(())\n     }\n }\n "}, {"sha": "727058780752e226ce6c06381e30570a5e228325", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -55,7 +55,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n     // impl trait is gone in MIR, so check the return type manually\n     check_ty(\n         tcx,\n-        tcx.fn_sig(def_id).output().skip_binder(),\n+        tcx.fn_sig(def_id).subst_identity().output().skip_binder(),\n         body.local_decls.iter().next().unwrap().source_info.span,\n     )?;\n \n@@ -240,6 +240,7 @@ fn check_statement<'tcx>(\n         | StatementKind::Retag { .. }\n         | StatementKind::AscribeUserType(..)\n         | StatementKind::Coverage(..)\n+        | StatementKind::ConstEvalCounter\n         | StatementKind::Nop => Ok(()),\n     }\n }"}, {"sha": "78fb2e0eb7e6885da01b365998f4bb55c6b0a84c", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -809,7 +809,10 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure(&Closure { fn_decl, body, .. }) = closure.kind {\n+    if let hir::ExprKind::Closure(&Closure {\n+        fn_decl, def_id, body, ..\n+    }) = closure.kind\n+    {\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n@@ -829,10 +832,8 @@ pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Opti\n             applicability: Applicability::MachineApplicable,\n         };\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(closure.hir_id);\n         let infcx = cx.tcx.infer_ctxt().build();\n-        ExprUseVisitor::new(&mut visitor, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n-            .consume_body(closure_body);\n+        ExprUseVisitor::new(&mut visitor, &infcx, def_id, cx.param_env, cx.typeck_results()).consume_body(closure_body);\n \n         if !visitor.suggestion_start.is_empty() {\n             return Some(DerefClosure {\n@@ -885,7 +886,7 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n                     .cx\n                     .typeck_results()\n                     .type_dependent_def_id(parent_expr.hir_id)\n-                    .map(|did| self.cx.tcx.fn_sig(did).skip_binder())\n+                    .map(|did| self.cx.tcx.fn_sig(did).subst_identity().skip_binder())\n                 {\n                     std::iter::once(receiver)\n                         .chain(call_args.iter())"}, {"sha": "c48d27b05f0459495d73d7d64214380789ca65ac", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -628,7 +628,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n /// If the expression is function like, get the signature for it.\n pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnSig<'tcx>> {\n     if let Res::Def(DefKind::Fn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::AssocFn, id) = path_res(cx, expr) {\n-        Some(ExprFnSig::Sig(cx.tcx.fn_sig(id), Some(id)))\n+        Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst_identity(), Some(id)))\n     } else {\n         ty_sig(cx, cx.typeck_results().expr_ty_adjusted(expr).peel_refs())\n     }\n@@ -646,7 +646,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n                 .and_then(|id| cx.tcx.hir().fn_decl_by_hir_id(cx.tcx.hir().local_def_id_to_hir_id(id)));\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n-        ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n+        ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst(cx.tcx, subs), Some(id))),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => sig_from_bounds(\n             cx,\n             ty,"}, {"sha": "00073bcd82affcc3584b4908547e14ce798aade0", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -392,12 +392,16 @@ pub fn is_expr_unsafe<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n                         .cx\n                         .typeck_results()\n                         .type_dependent_def_id(e.hir_id)\n-                        .map_or(false, |id| self.cx.tcx.fn_sig(id).unsafety() == Unsafety::Unsafe) =>\n+                        .map_or(false, |id| {\n+                            self.cx.tcx.fn_sig(id).skip_binder().unsafety() == Unsafety::Unsafe\n+                        }) =>\n                 {\n                     self.is_unsafe = true;\n                 },\n                 ExprKind::Call(func, _) => match *self.cx.typeck_results().expr_ty(func).peel_refs().kind() {\n-                    ty::FnDef(id, _) if self.cx.tcx.fn_sig(id).unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n+                    ty::FnDef(id, _) if self.cx.tcx.fn_sig(id).skip_binder().unsafety() == Unsafety::Unsafe => {\n+                        self.is_unsafe = true;\n+                    },\n                     ty::FnPtr(sig) if sig.unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n                     _ => walk_expr(self, e),\n                 },"}, {"sha": "adea8c53df27826cb036a0fe1a22ad8b9b529d6b", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-01-27\"\n+channel = \"nightly-2023-02-10\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "c1a10ba55ef880dac092b9e6fa968f37a3448948", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -1,19 +1,19 @@\n error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n    |\n-LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: convert all references to use `sym::Deref`\n+   = help: convert all references to use `sym::deref_method`\n    = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n    |\n-LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: convert all references to use `sym::deref_method`\n+   = help: convert all references to use `sym::Deref`\n \n error: hardcoded path to a language item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40"}, {"sha": "39418d359288bafbbcd4a5bb0712b81c683dc312", "filename": "tests/ui/track-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/tests%2Fui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7fecd6911b0702da504a4b0adc2ea11e3a2b24c/tests%2Fui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrack-diagnostics.stderr?ref=a7fecd6911b0702da504a4b0adc2ea11e3a2b24c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/track-diagnostics.rs:LL:CC\n    |\n LL | const S: A = B;\n-   |              ^ expected struct `A`, found struct `B`\n+   |              ^ expected `A`, found `B`\n -Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n \n error: aborting due to previous error"}]}