{"sha": "18c5ea490584fe166b7640fa19f850405f9b9e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YzVlYTQ5MDU4NGZlMTY2Yjc2NDBmYTE5Zjg1MDQwNWY5YjllNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-12T14:42:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-12T14:42:28Z"}, "message": "Auto merge of #6413 - phansch:bless, r=flip1995\n\nRewrite update-all-references bash scripts in Rust\n\nThis replaces the `update-all-references` scripts with a single\n\n    cargo dev bless\n\ncommand. It should behave mostly the same as the bash scripts. The major difference is, that it can be called from the project root and will always update the files in all of the test suites.\n\ncc #5394\n\nchangelog: none", "tree": {"sha": "8370c4c91a892041290a52ee7b736c812ab35fae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8370c4c91a892041290a52ee7b736c812ab35fae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c5ea490584fe166b7640fa19f850405f9b9e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c5ea490584fe166b7640fa19f850405f9b9e56", "html_url": "https://github.com/rust-lang/rust/commit/18c5ea490584fe166b7640fa19f850405f9b9e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c5ea490584fe166b7640fa19f850405f9b9e56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf5f2da8b99c23bed127912f79532eb497b3e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf5f2da8b99c23bed127912f79532eb497b3e0b", "html_url": "https://github.com/rust-lang/rust/commit/baf5f2da8b99c23bed127912f79532eb497b3e0b"}, {"sha": "b8501e1be12594145bcd2bae2b47af2152785622", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8501e1be12594145bcd2bae2b47af2152785622", "html_url": "https://github.com/rust-lang/rust/commit/b8501e1be12594145bcd2bae2b47af2152785622"}], "stats": {"total": 295, "additions": 87, "deletions": 208}, "files": [{"sha": "8d5c2e95055d0cf9b961ed162c244249485e84b8", "filename": "clippy_dev/src/bless.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/clippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/clippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fbless.rs?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -0,0 +1,71 @@\n+//! `bless` updates the reference files in the repo with changed output files\n+//! from the last test run.\n+\n+use std::env;\n+use std::ffi::OsStr;\n+use std::fs;\n+use std::lazy::SyncLazy;\n+use std::path::PathBuf;\n+use walkdir::WalkDir;\n+\n+use crate::clippy_project_root;\n+\n+// NOTE: this is duplicated with tests/cargo/mod.rs What to do?\n+pub static CARGO_TARGET_DIR: SyncLazy<PathBuf> = SyncLazy::new(|| match env::var_os(\"CARGO_TARGET_DIR\") {\n+    Some(v) => v.into(),\n+    None => env::current_dir().unwrap().join(\"target\"),\n+});\n+\n+pub fn bless() {\n+    let test_dirs = [\n+        clippy_project_root().join(\"tests\").join(\"ui\"),\n+        clippy_project_root().join(\"tests\").join(\"ui-toml\"),\n+        clippy_project_root().join(\"tests\").join(\"ui-cargo\"),\n+    ];\n+    for test_dir in &test_dirs {\n+        WalkDir::new(test_dir)\n+            .into_iter()\n+            .filter_map(Result::ok)\n+            .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n+            .for_each(|f| {\n+                update_reference_file(f.path().with_extension(\"stdout\"));\n+                update_reference_file(f.path().with_extension(\"stderr\"));\n+                update_reference_file(f.path().with_extension(\"fixed\"));\n+            });\n+    }\n+}\n+\n+fn update_reference_file(reference_file_path: PathBuf) {\n+    let test_output_path = build_dir().join(PathBuf::from(reference_file_path.file_name().unwrap()));\n+    let relative_reference_file_path = reference_file_path.strip_prefix(clippy_project_root()).unwrap();\n+\n+    // If compiletest did not write any changes during the test run,\n+    // we don't have to update anything\n+    if !test_output_path.exists() {\n+        return;\n+    }\n+\n+    let test_output_file = fs::read(&test_output_path).expect(\"Unable to read test output file\");\n+    let reference_file = fs::read(&reference_file_path).expect(\"Unable to read reference file\");\n+\n+    if test_output_file != reference_file {\n+        // If a test run caused an output file to change, update the reference file\n+        println!(\"updating {}\", &relative_reference_file_path.display());\n+        fs::copy(test_output_path, &reference_file_path).expect(\"Could not update reference file\");\n+\n+        if reference_file.is_empty() {\n+            // If we copied over an empty output file, we remove the now empty reference file\n+            println!(\"removing {}\", &relative_reference_file_path.display());\n+            fs::remove_file(reference_file_path).expect(\"Could not remove reference file\");\n+        }\n+    }\n+}\n+\n+fn build_dir() -> PathBuf {\n+    let profile = env::var(\"PROFILE\").unwrap_or_else(|_| \"debug\".to_string());\n+    let mut path = PathBuf::new();\n+    path.push(CARGO_TARGET_DIR.clone());\n+    path.push(profile);\n+    path.push(\"test_build_base\");\n+    path\n+}"}, {"sha": "17cc08ee10fea312f5b3d392991f61326be4f362", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -10,6 +10,7 @@ use std::lazy::SyncLazy;\n use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n \n+pub mod bless;\n pub mod fmt;\n pub mod new_lint;\n pub mod ra_setup;"}, {"sha": "f66855620e734c7290d80fb1977be8cccacebf0e", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -1,10 +1,11 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use clap::{App, Arg, SubCommand};\n-use clippy_dev::{fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n+use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n+        .subcommand(SubCommand::with_name(\"bless\").about(\"bless the test output changes\"))\n         .subcommand(\n             SubCommand::with_name(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n@@ -116,6 +117,9 @@ fn main() {\n         .get_matches();\n \n     match matches.subcommand() {\n+        (\"bless\", Some(_)) => {\n+            bless::bless();\n+        },\n         (\"fmt\", Some(matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },"}, {"sha": "60dfdb76650a1e2d0363ecd5786560a9da9990a2", "filename": "doc/adding_lints.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -98,12 +98,12 @@ While we are working on implementing our lint, we can keep running the UI\n test. That allows us to check if the output is turning into what we want.\n \n Once we are satisfied with the output, we need to run\n-`tests/ui/update-all-references.sh` to update the `.stderr` file for our lint.\n+`cargo dev bless` to update the `.stderr` file for our lint.\n Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n-every time before running `tests/ui/update-all-references.sh`.\n+every time before running `cargo dev bless`.\n Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n our lint, we need to commit the generated `.stderr` files, too. In general, you\n-should only commit files changed by `tests/ui/update-all-references.sh` for the\n+should only commit files changed by `cargo dev bless` for the\n specific lint you are creating/editing. Note that if the generated files are\n empty, they should be removed.\n \n@@ -122,8 +122,7 @@ we will find by default two new crates, each with its manifest file:\n If you need more cases, you can copy one of those crates (under `foo_categories`) and rename it.\n \n The process of generating the `.stderr` file is the same, and prepending the `TESTNAME`\n-variable to `cargo uitest` works too, but the script to update the references\n-is in another path: `tests/ui-cargo/update-all-references.sh`.\n+variable to `cargo uitest` works too.\n \n ## Rustfix tests\n \n@@ -133,7 +132,7 @@ additionally run [rustfix] for that test. Rustfix will apply the suggestions\n from the lint to the code of the test file and compare that to the contents of\n a `.fixed` file.\n \n-Use `tests/ui/update-all-references.sh` to automatically generate the\n+Use `cargo dev bless` to automatically generate the\n `.fixed` file after running the tests.\n \n [rustfix]: https://github.com/rust-lang/rustfix\n@@ -368,7 +367,7 @@ fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n \n Now we should also run the full test suite with `cargo test`. At this point\n running `cargo test` should produce the expected output. Remember to run\n-`tests/ui/update-all-references.sh` to update the `.stderr` file.\n+`cargo dev bless` to update the `.stderr` file.\n \n `cargo test` (as opposed to `cargo uitest`) will also ensure that our lint\n implementation is not violating any Clippy lints itself."}, {"sha": "dc71f022773cc4ca6899e1dd0aa1f2f62bf0c5e3", "filename": "doc/basics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -61,7 +61,7 @@ If the output of a [UI test] differs from the expected output, you can update th\n reference file with:\n \n ```bash\n-sh tests/ui/update-all-references.sh\n+cargo dev bless\n ```\n \n For example, this is necessary, if you fix a typo in an error message of a lint"}, {"sha": "4391499a1e1f8e779470f3d1927dcd95c88eadd1", "filename": "tests/ui-cargo/update-all-references.sh", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/tests%2Fui-cargo%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/tests%2Fui-cargo%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fupdate-all-references.sh?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -1,18 +1,3 @@\n #!/bin/bash\n-#\n-# A script to update the references for all tests. The idea is that\n-# you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. You then\n-# run this script, which will copy those files over. If you find\n-# yourself manually editing a foo.stderr file, you're doing it wrong.\n-#\n-# See all `update-references.sh`, if you just want to update a single test.\n \n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" ]]; then\n-    echo \"usage: $0\"\n-fi\n-\n-BUILD_DIR=$PWD/target/debug/test_build_base\n-MY_DIR=$(dirname \"$0\")\n-cd \"$MY_DIR\" || exit\n-find . -name '*.rs' -exec ./update-references.sh \"$BUILD_DIR\" {} +\n+echo \"Please use 'cargo dev bless' instead.\""}, {"sha": "2ab51168bcaa61c4fd96d093a6e3adf50371ae9d", "filename": "tests/ui-cargo/update-references.sh", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fui-cargo%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fui-cargo%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fupdate-references.sh?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -1,46 +0,0 @@\n-#!/bin/bash\n-\n-# A script to update the references for particular tests. The idea is\n-# that you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. This\n-# script will then copy that output and replace the \"expected output\"\n-# files. You can then commit the changes.\n-#\n-# If you find yourself manually editing a foo.stderr file, you're\n-# doing it wrong.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n-    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n-    echo \"\"\n-    echo \"For example:\"\n-    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n-fi\n-\n-MYDIR=$(dirname \"$0\")\n-\n-BUILD_DIR=\"$1\"\n-shift\n-\n-while [[ \"$1\" != \"\" ]]; do\n-    STDERR_NAME=\"${1/%.rs/.stderr}\"\n-    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n-    shift\n-    if [[ -f \"$BUILD_DIR\"/\"$STDOUT_NAME\" ]] && \\\n-           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"); then\n-        echo updating \"$MYDIR\"/\"$STDOUT_NAME\"\n-        cp \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"\n-        if [[ ! -s \"$MYDIR\"/\"$STDOUT_NAME\" ]]; then\n-            echo removing \"$MYDIR\"/\"$STDOUT_NAME\"\n-            rm \"$MYDIR\"/\"$STDOUT_NAME\"\n-        fi\n-    fi\n-    if [[ -f \"$BUILD_DIR\"/\"$STDERR_NAME\" ]] && \\\n-           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"); then\n-        echo updating \"$MYDIR\"/\"$STDERR_NAME\"\n-        cp \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"\n-        if [[ ! -s \"$MYDIR\"/\"$STDERR_NAME\" ]]; then\n-            echo removing \"$MYDIR\"/\"$STDERR_NAME\"\n-            rm \"$MYDIR\"/\"$STDERR_NAME\"\n-        fi\n-    fi\n-done"}, {"sha": "4391499a1e1f8e779470f3d1927dcd95c88eadd1", "filename": "tests/ui-toml/update-all-references.sh", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/tests%2Fui-toml%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/tests%2Fui-toml%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupdate-all-references.sh?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -1,18 +1,3 @@\n #!/bin/bash\n-#\n-# A script to update the references for all tests. The idea is that\n-# you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. You then\n-# run this script, which will copy those files over. If you find\n-# yourself manually editing a foo.stderr file, you're doing it wrong.\n-#\n-# See all `update-references.sh`, if you just want to update a single test.\n \n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" ]]; then\n-    echo \"usage: $0\"\n-fi\n-\n-BUILD_DIR=$PWD/target/debug/test_build_base\n-MY_DIR=$(dirname \"$0\")\n-cd \"$MY_DIR\" || exit\n-find . -name '*.rs' -exec ./update-references.sh \"$BUILD_DIR\" {} +\n+echo \"Please use 'cargo dev bless' instead.\""}, {"sha": "2ab51168bcaa61c4fd96d093a6e3adf50371ae9d", "filename": "tests/ui-toml/update-references.sh", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fui-toml%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fui-toml%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupdate-references.sh?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -1,46 +0,0 @@\n-#!/bin/bash\n-\n-# A script to update the references for particular tests. The idea is\n-# that you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. This\n-# script will then copy that output and replace the \"expected output\"\n-# files. You can then commit the changes.\n-#\n-# If you find yourself manually editing a foo.stderr file, you're\n-# doing it wrong.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n-    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n-    echo \"\"\n-    echo \"For example:\"\n-    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n-fi\n-\n-MYDIR=$(dirname \"$0\")\n-\n-BUILD_DIR=\"$1\"\n-shift\n-\n-while [[ \"$1\" != \"\" ]]; do\n-    STDERR_NAME=\"${1/%.rs/.stderr}\"\n-    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n-    shift\n-    if [[ -f \"$BUILD_DIR\"/\"$STDOUT_NAME\" ]] && \\\n-           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"); then\n-        echo updating \"$MYDIR\"/\"$STDOUT_NAME\"\n-        cp \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"\n-        if [[ ! -s \"$MYDIR\"/\"$STDOUT_NAME\" ]]; then\n-            echo removing \"$MYDIR\"/\"$STDOUT_NAME\"\n-            rm \"$MYDIR\"/\"$STDOUT_NAME\"\n-        fi\n-    fi\n-    if [[ -f \"$BUILD_DIR\"/\"$STDERR_NAME\" ]] && \\\n-           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"); then\n-        echo updating \"$MYDIR\"/\"$STDERR_NAME\"\n-        cp \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"\n-        if [[ ! -s \"$MYDIR\"/\"$STDERR_NAME\" ]]; then\n-            echo removing \"$MYDIR\"/\"$STDERR_NAME\"\n-            rm \"$MYDIR\"/\"$STDERR_NAME\"\n-        fi\n-    fi\n-done"}, {"sha": "4391499a1e1f8e779470f3d1927dcd95c88eadd1", "filename": "tests/ui/update-all-references.sh", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18c5ea490584fe166b7640fa19f850405f9b9e56/tests%2Fui%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/18c5ea490584fe166b7640fa19f850405f9b9e56/tests%2Fui%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupdate-all-references.sh?ref=18c5ea490584fe166b7640fa19f850405f9b9e56", "patch": "@@ -1,21 +1,3 @@\n #!/bin/bash\n \n-# A script to update the references for all tests. The idea is that\n-# you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. You then\n-# run this script, which will copy those files over. If you find\n-# yourself manually editing a foo.stderr file, you're doing it wrong.\n-#\n-# See all `update-references.sh`, if you just want to update a single test.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" ]]; then\n-    echo \"usage: $0\"\n-fi\n-\n-CARGO_TARGET_DIR=${CARGO_TARGET_DIR:-$PWD/target}\n-PROFILE=${PROFILE:-debug}\n-BUILD_DIR=${CARGO_TARGET_DIR}/${PROFILE}/test_build_base\n-\n-MY_DIR=$(dirname \"$0\")\n-cd \"$MY_DIR\" || exit\n-find . -name '*.rs' -exec ./update-references.sh \"$BUILD_DIR\" {} +\n+echo \"Please use 'cargo dev bless' instead.\""}, {"sha": "e16ed600ef81406785b05e7dce3ff641cb5c1de1", "filename": "tests/ui/update-references.sh", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupdate-references.sh?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -1,56 +0,0 @@\n-#!/bin/bash\n-\n-# A script to update the references for particular tests. The idea is\n-# that you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. This\n-# script will then copy that output and replace the \"expected output\"\n-# files. You can then commit the changes.\n-#\n-# If you find yourself manually editing a `foo.stderr` file, you're\n-# doing it wrong.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n-    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n-    echo \"\"\n-    echo \"For example:\"\n-    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n-fi\n-\n-MYDIR=$(dirname \"$0\")\n-\n-BUILD_DIR=\"$1\"\n-shift\n-\n-while [[ \"$1\" != \"\" ]]; do\n-    STDERR_NAME=\"${1/%.rs/.stderr}\"\n-    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n-    FIXED_NAME=\"${1/%.rs/.fixed}\"\n-    shift\n-    if [[ -f \"$BUILD_DIR\"/\"$STDOUT_NAME\" ]] && \\\n-           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"); then\n-        echo updating \"$MYDIR\"/\"$STDOUT_NAME\"\n-        cp \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"\n-        if [[ ! -s \"$MYDIR\"/\"$STDOUT_NAME\" ]]; then\n-            echo removing \"$MYDIR\"/\"$STDOUT_NAME\"\n-            rm \"$MYDIR\"/\"$STDOUT_NAME\"\n-        fi\n-    fi\n-    if [[ -f \"$BUILD_DIR\"/\"$STDERR_NAME\" ]] && \\\n-           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"); then\n-        echo updating \"$MYDIR\"/\"$STDERR_NAME\"\n-        cp \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"\n-        if [[ ! -s \"$MYDIR\"/\"$STDERR_NAME\" ]]; then\n-            echo removing \"$MYDIR\"/\"$STDERR_NAME\"\n-            rm \"$MYDIR\"/\"$STDERR_NAME\"\n-        fi\n-    fi\n-    if [[ -f \"$BUILD_DIR\"/\"$FIXED_NAME\" ]] && \\\n-           ! (cmp -s -- \"$BUILD_DIR\"/\"$FIXED_NAME\" \"$MYDIR\"/\"$FIXED_NAME\"); then\n-        echo updating \"$MYDIR\"/\"$FIXED_NAME\"\n-        cp \"$BUILD_DIR\"/\"$FIXED_NAME\" \"$MYDIR\"/\"$FIXED_NAME\"\n-        if [[ ! -s \"$MYDIR\"/\"$FIXED_NAME\" ]]; then\n-            echo removing \"$MYDIR\"/\"$FIXED_NAME\"\n-            rm \"$MYDIR\"/\"$FIXED_NAME\"\n-        fi\n-    fi\n-done"}]}