{"sha": "a027b01f33e3280dff1a7be09d6090151d3f78a9", "node_id": "C_kwDOAAsO6NoAKGEwMjdiMDFmMzNlMzI4MGRmZjFhN2JlMDlkNjA5MDE1MWQzZjc4YTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-18T15:44:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-18T15:44:43Z"}, "message": "Rollup merge of #98998 - workingjubilee:naked-means-no-clothes-enforcement-technology, r=Amanieu\n\nRemove branch target prologues from `#[naked] fn`\n\nThis patch hacks around rust-lang/rust#98768 for now via injecting appropriate attributes into the LLVMIR we emit for naked functions. I intend to pursue this upstream so that these attributes can be removed in general, but it's slow going wading through C++ for me.", "tree": {"sha": "f6bfe00253a2bb38b997bfd862b1f2e48948fa0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6bfe00253a2bb38b997bfd862b1f2e48948fa0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a027b01f33e3280dff1a7be09d6090151d3f78a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1X/rCRBK7hj4Ov3rIwAAAsgIACr1yEALi32jw/o+P3jluonP\nGukYFiOcDyS92sMZqQ1uL8g9fojgY4umSWyZagTGRE+94DNhqUj4deelt44FwwNH\n6YzsUl1pGQGoOcBPV2KsVFL/OeGioWcLFLIMuF6P48UakO7xV/XYCTABeguWrj8R\nIDW3y+iU7vHOytHmk55/k99tnWQt8IgCpbTd/lulJGaDWhy3Qsa4POo+xn8RkaNW\ntrTOtv9tIzdjZKPTOWPOhSaw23bUdMkWNT9xlavgAjp4KgHDpAtRd1wD8umXUfnk\nSkzoFMNoM0vE0s+e0wRDoycDK9dhlyzK67irrWcXDeKzPAaMMkh+i73utzq4dfI=\n=lQCV\n-----END PGP SIGNATURE-----\n", "payload": "tree f6bfe00253a2bb38b997bfd862b1f2e48948fa0a\nparent 5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2\nparent 530b5da49b822fd65214ecbe85455114e0ce725f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658159083 +0530\ncommitter GitHub <noreply@github.com> 1658159083 +0530\n\nRollup merge of #98998 - workingjubilee:naked-means-no-clothes-enforcement-technology, r=Amanieu\n\nRemove branch target prologues from `#[naked] fn`\n\nThis patch hacks around rust-lang/rust#98768 for now via injecting appropriate attributes into the LLVMIR we emit for naked functions. I intend to pursue this upstream so that these attributes can be removed in general, but it's slow going wading through C++ for me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a027b01f33e3280dff1a7be09d6090151d3f78a9", "html_url": "https://github.com/rust-lang/rust/commit/a027b01f33e3280dff1a7be09d6090151d3f78a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a027b01f33e3280dff1a7be09d6090151d3f78a9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2", "html_url": "https://github.com/rust-lang/rust/commit/5ccdf1f6f7651001e3b15f48c6f2e5d0b56accf2"}, {"sha": "530b5da49b822fd65214ecbe85455114e0ce725f", "url": "https://api.github.com/repos/rust-lang/rust/commits/530b5da49b822fd65214ecbe85455114e0ce725f", "html_url": "https://github.com/rust-lang/rust/commit/530b5da49b822fd65214ecbe85455114e0ce725f"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "62da99ac3fb6605d10310c8d04ad5816e69176a5", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=a027b01f33e3280dff1a7be09d6090151d3f78a9", "patch": "@@ -299,6 +299,12 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n         to_add.push(AttributeKind::Naked.create_attr(cx.llcx));\n+        // HACK(jubilee): \"indirect branch tracking\" works by attaching prologues to functions.\n+        // And it is a module-level attribute, so the alternative is pulling naked functions into new LLVM modules.\n+        // Otherwise LLVM's \"naked\" functions come with endbr prefixes per https://github.com/rust-lang/rust/issues/98768\n+        to_add.push(AttributeKind::NoCfCheck.create_attr(cx.llcx));\n+        // Need this for AArch64.\n+        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"branch-target-enforcement\", \"false\"));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         // apply to return place instead of function (unlike all other attributes applied in this function)"}, {"sha": "73cedb59349d3467b31eeba1e253d2e6a7e5b1be", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=a027b01f33e3280dff1a7be09d6090151d3f78a9", "patch": "@@ -191,6 +191,7 @@ pub enum AttributeKind {\n     StackProtect = 32,\n     NoUndef = 33,\n     SanitizeMemTag = 34,\n+    NoCfCheck = 35,\n }\n \n /// LLVMIntPredicate"}, {"sha": "9fe84a6309b9c1cc26af214ae87a93e362718048", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=a027b01f33e3280dff1a7be09d6090151d3f78a9", "patch": "@@ -84,6 +84,7 @@ enum LLVMRustAttribute {\n   StackProtect = 32,\n   NoUndef = 33,\n   SanitizeMemTag = 34,\n+  NoCfCheck = 35,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "2d35ee8976e67c6bd925b0429cd9bcc9578a4605", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a027b01f33e3280dff1a7be09d6090151d3f78a9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=a027b01f33e3280dff1a7be09d6090151d3f78a9", "patch": "@@ -176,6 +176,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::NoAlias;\n   case NoCapture:\n     return Attribute::NoCapture;\n+  case NoCfCheck:\n+    return Attribute::NoCfCheck;\n   case NoInline:\n     return Attribute::NoInline;\n   case NonNull:"}, {"sha": "79b0bb2d7eead1ee88de7fc419d382d921c2f149", "filename": "src/test/assembly/aarch64-naked-fn-no-bti-prolog.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a027b01f33e3280dff1a7be09d6090151d3f78a9/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a027b01f33e3280dff1a7be09d6090151d3f78a9/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs?ref=a027b01f33e3280dff1a7be09d6090151d3f78a9", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -C no-prepopulate-passes -Zbranch-protection=bti\n+// assembly-output: emit-asm\n+// needs-asm-support\n+// only-aarch64\n+\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+use std::arch::asm;\n+\n+// The problem at hand: Rust has adopted a fairly strict meaning for \"naked functions\",\n+// meaning \"no prologue whatsoever, no, really, not one instruction.\"\n+// Unfortunately, aarch64's \"branch target identification\" works via hints at landing sites.\n+// LLVM implements this via making sure of that, even for functions with the naked attribute.\n+// So, we must emit an appropriate instruction instead!\n+#[no_mangle]\n+#[naked]\n+pub unsafe extern \"C\" fn _hlt() -> ! {\n+    // CHECK-NOT: hint #34\n+    // CHECK: hlt #0x1\n+    asm!(\"hlt #1\", options(noreturn))\n+}"}, {"sha": "bedcded731d95a015962e30fb636e6a58f67ac21", "filename": "src/test/assembly/x86_64-naked-fn-no-cet-prolog.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a027b01f33e3280dff1a7be09d6090151d3f78a9/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a027b01f33e3280dff1a7be09d6090151d3f78a9/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs?ref=a027b01f33e3280dff1a7be09d6090151d3f78a9", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -C no-prepopulate-passes -Zcf-protection=full\n+// assembly-output: emit-asm\n+// needs-asm-support\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+use std::arch::asm;\n+\n+// The problem at hand: Rust has adopted a fairly strict meaning for \"naked functions\",\n+// meaning \"no prologue whatsoever, no, really, not one instruction.\"\n+// Unfortunately, x86's control-flow enforcement, specifically indirect branch protection,\n+// works by using an instruction for each possible landing site,\n+// and LLVM implements this via making sure of that.\n+#[no_mangle]\n+#[naked]\n+pub unsafe extern \"sysv64\" fn will_halt() -> ! {\n+    // CHECK-NOT: endbr{{32|64}}\n+    // CHECK: hlt\n+    asm!(\"hlt\", options(noreturn))\n+}\n+\n+// what about aarch64?\n+// \"branch-protection\"=false"}, {"sha": "c0ac69f4ed77887847bd5421314ce21daa27acd7", "filename": "src/test/codegen/naked-noinline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a027b01f33e3280dff1a7be09d6090151d3f78a9/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a027b01f33e3280dff1a7be09d6090151d3f78a9/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs?ref=a027b01f33e3280dff1a7be09d6090151d3f78a9", "patch": "@@ -28,4 +28,4 @@ pub unsafe fn g() {\n     f();\n }\n \n-// CHECK: attributes [[ATTR]] = { naked noinline{{.*}} }\n+// CHECK: attributes [[ATTR]] = { naked{{.*}}noinline{{.*}} }"}]}