{"sha": "78d13e007f38d753bb335807b6ecb7f8c0129a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDEzZTAwN2YzOGQ3NTNiYjMzNTgwN2I2ZWNiN2Y4YzAxMjlhNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T18:39:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T18:39:00Z"}, "message": "Auto merge of #4043 - rust-lang:map-clone-iter, r=matthiaskrgr\n\nSuggest .copied() for map_clone on iterators too\n\nfixes https://github.com/rust-lang/rust-clippy/issues/3958\n\nchangelog: Make `map_clone` suggest the newly-stable `Iterator::copied()` when applicable\n\nr? @mikerite @matthiaskrgr", "tree": {"sha": "7abd2ebfa52dcf4f8af0c6986b9ef4eef705976b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abd2ebfa52dcf4f8af0c6986b9ef4eef705976b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d13e007f38d753bb335807b6ecb7f8c0129a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d13e007f38d753bb335807b6ecb7f8c0129a44", "html_url": "https://github.com/rust-lang/rust/commit/78d13e007f38d753bb335807b6ecb7f8c0129a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d13e007f38d753bb335807b6ecb7f8c0129a44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb61c21d9b950c70a842ce5e2e5a5219d972e811", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb61c21d9b950c70a842ce5e2e5a5219d972e811", "html_url": "https://github.com/rust-lang/rust/commit/fb61c21d9b950c70a842ce5e2e5a5219d972e811"}, {"sha": "770de14505271f33b92d1b0c77bff072ae8d842f", "url": "https://api.github.com/repos/rust-lang/rust/commits/770de14505271f33b92d1b0c77bff072ae8d842f", "html_url": "https://github.com/rust-lang/rust/commit/770de14505271f33b92d1b0c77bff072ae8d842f"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "d84036d459ae3c890a1881bf43dfb5f20808e1ae", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78d13e007f38d753bb335807b6ecb7f8c0129a44/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d13e007f38d753bb335807b6ecb7f8c0129a44/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=78d13e007f38d753bb335807b6ecb7f8c0129a44", "patch": "@@ -52,8 +52,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n             if args.len() == 2;\n             if method.ident.as_str() == \"map\";\n             let ty = cx.tables.expr_ty(&args[0]);\n-            let is_option = match_type(cx, ty, &paths::OPTION);\n-            if is_option || match_trait_method(cx, e, &paths::ITERATOR);\n+            if match_type(cx, ty, &paths::OPTION) || match_trait_method(cx, e, &paths::ITERATOR);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].node;\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);\n@@ -63,16 +62,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n                         hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.node {\n                         if ident_eq(name, closure_expr) {\n-                            // FIXME When Iterator::copied() stabilizes we can remove is_option\n-                            // from here and the other lint() calls\n-                            lint(cx, e.span, args[0].span, is_option);\n+                            lint(cx, e.span, args[0].span, true);\n                         }\n                     },\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.node {\n                             hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n                                 if ident_eq(name, inner) && !cx.tables.expr_ty(inner).is_box() {\n-                                    lint(cx, e.span, args[0].span, is_option);\n+                                    lint(cx, e.span, args[0].span, true);\n                                 }\n                             },\n                             hir::ExprKind::MethodCall(ref method, _, ref obj) => {\n@@ -82,7 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n                                     let obj_ty = cx.tables.expr_ty(&obj[0]);\n                                     if let ty::Ref(_, ty, _) = obj_ty.sty {\n                                         let copy = is_copy(cx, ty);\n-                                        lint(cx, e.span, args[0].span, is_option && copy);\n+                                        lint(cx, e.span, args[0].span, copy);\n                                     } else {\n                                         lint_needless_cloning(cx, e.span, args[0].span);\n                                     }"}, {"sha": "228671ca2097ec71857f4d784ac32aa1388fbf10", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78d13e007f38d753bb335807b6ecb7f8c0129a44/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/78d13e007f38d753bb335807b6ecb7f8c0129a44/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=78d13e007f38d753bb335807b6ecb7f8c0129a44", "patch": "@@ -6,9 +6,9 @@\n #![allow(clippy::redundant_closure)]\n \n fn main() {\n-    let _: Vec<i8> = vec![5_i8; 6].iter().cloned().collect();\n+    let _: Vec<i8> = vec![5_i8; 6].iter().copied().collect();\n     let _: Vec<String> = vec![String::new()].iter().cloned().collect();\n-    let _: Vec<u32> = vec![42, 43].iter().cloned().collect();\n+    let _: Vec<u32> = vec![42, 43].iter().copied().collect();\n     let _: Option<u64> = Some(Box::new(16)).map(|b| *b);\n     let _: Option<u64> = Some(&16).copied();\n     let _: Option<u8> = Some(&1).copied();"}, {"sha": "35e234a73296e3438ab618c01f7ea94b49039839", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78d13e007f38d753bb335807b6ecb7f8c0129a44/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d13e007f38d753bb335807b6ecb7f8c0129a44/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=78d13e007f38d753bb335807b6ecb7f8c0129a44", "patch": "@@ -1,8 +1,8 @@\n-error: You are using an explicit closure for cloning elements\n+error: You are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:9:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n@@ -12,11 +12,11 @@ error: You are using an explicit closure for cloning elements\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n-error: You are using an explicit closure for cloning elements\n+error: You are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:11:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![42, 43].iter().cloned()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n \n error: You are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:13:26"}]}