{"sha": "01951a61a49dca35747dc9ba03e5536f337de239", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOTUxYTYxYTQ5ZGNhMzU3NDdkYzliYTAzZTU1MzZmMzM3ZGUyMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-20T20:55:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-20T20:55:52Z"}, "message": "Auto merge of #42069 - QuietMisdreavus:low_pri, r=alexchrichton\n\nAdd an option to run rustbuild on low priority on Windows and Unix\n\nThis is a resurrection of #40776, combining their Windows setup with an additional setup on Unix to set the program group's *nice*ness to +10 (low-but-not-lowest priority, mirroring the priority in the Windows setup) when the `low_priority` option is on.", "tree": {"sha": "6aafa8ab9a72283d05b5be67208d245e6f9c3139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aafa8ab9a72283d05b5be67208d245e6f9c3139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01951a61a49dca35747dc9ba03e5536f337de239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01951a61a49dca35747dc9ba03e5536f337de239", "html_url": "https://github.com/rust-lang/rust/commit/01951a61a49dca35747dc9ba03e5536f337de239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01951a61a49dca35747dc9ba03e5536f337de239/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cda810970186cf01a8134db53b13f8177cc56ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cda810970186cf01a8134db53b13f8177cc56ab", "html_url": "https://github.com/rust-lang/rust/commit/1cda810970186cf01a8134db53b13f8177cc56ab"}, {"sha": "dd0855d44b61a979983ae329eb84d1928b5f7eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0855d44b61a979983ae329eb84d1928b5f7eb7", "html_url": "https://github.com/rust-lang/rust/commit/dd0855d44b61a979983ae329eb84d1928b5f7eb7"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "abad216d89be48c78482ca82fb6d67ee016bf1c6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=01951a61a49dca35747dc9ba03e5536f337de239", "patch": "@@ -94,6 +94,7 @@ pub struct Config {\n     pub backtrace: bool, // support for RUST_BACKTRACE\n \n     // misc\n+    pub low_priority: bool,\n     pub channel: String,\n     pub quiet_tests: bool,\n     // Fallback musl-root for all targets\n@@ -148,6 +149,7 @@ struct Build {\n     target: Vec<String>,\n     cargo: Option<String>,\n     rustc: Option<String>,\n+    low_priority: Option<bool>,\n     compiler_docs: Option<bool>,\n     docs: Option<bool>,\n     submodules: Option<bool>,\n@@ -306,6 +308,7 @@ impl Config {\n         config.nodejs = build.nodejs.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n+        set(&mut config.low_priority, build.low_priority);\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs, build.docs);\n         set(&mut config.submodules, build.submodules);"}, {"sha": "95cca96f7fcc027f1143a2f0a79393f6a651f7de", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=01951a61a49dca35747dc9ba03e5536f337de239", "patch": "@@ -152,6 +152,10 @@\n # known-good version of OpenSSL, compile it, and link it to Cargo.\n #openssl-static = false\n \n+# Run the build with low priority, by setting the process group's \"nice\" value\n+# to +10 on Unix platforms, and by using a \"low priority\" job object on Windows.\n+#low-priority = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "72a5d1338b8d05b1067f36e7c9998e6a29b43fd8", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=01951a61a49dca35747dc9ba03e5536f337de239", "patch": "@@ -42,6 +42,7 @@\n use std::env;\n use std::io;\n use std::mem;\n+use Build;\n \n type HANDLE = *mut u8;\n type BOOL = i32;\n@@ -60,8 +61,10 @@ const DUPLICATE_SAME_ACCESS: DWORD = 0x2;\n const PROCESS_DUP_HANDLE: DWORD = 0x40;\n const JobObjectExtendedLimitInformation: JOBOBJECTINFOCLASS = 9;\n const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: DWORD = 0x2000;\n+const JOB_OBJECT_LIMIT_PRIORITY_CLASS: DWORD = 0x00000020;\n const SEM_FAILCRITICALERRORS: UINT = 0x0001;\n const SEM_NOGPFAULTERRORBOX: UINT = 0x0002;\n+const BELOW_NORMAL_PRIORITY_CLASS: DWORD = 0x00004000;\n \n extern \"system\" {\n     fn CreateJobObjectW(lpJobAttributes: *mut u8, lpName: *const u8) -> HANDLE;\n@@ -118,7 +121,7 @@ struct JOBOBJECT_BASIC_LIMIT_INFORMATION {\n     SchedulingClass: DWORD,\n }\n \n-pub unsafe fn setup() {\n+pub unsafe fn setup(build: &mut Build) {\n     // Tell Windows to not show any UI on errors (such as not finding a required dll\n     // during startup or terminating abnormally).  This is important for running tests,\n     // since some of them use abnormal termination by design.\n@@ -136,6 +139,10 @@ pub unsafe fn setup() {\n     // children will reside in the job by default.\n     let mut info = mem::zeroed::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>();\n     info.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;\n+    if build.config.low_priority {\n+        info.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_PRIORITY_CLASS;\n+        info.BasicLimitInformation.PriorityClass = BELOW_NORMAL_PRIORITY_CLASS;\n+    }\n     let r = SetInformationJobObject(job,\n                                     JobObjectExtendedLimitInformation,\n                                     &mut info as *mut _ as LPVOID,"}, {"sha": "7eccc2a49c0ea230b2e6e6945f4fb6a9d5ec42a8", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01951a61a49dca35747dc9ba03e5536f337de239/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=01951a61a49dca35747dc9ba03e5536f337de239", "patch": "@@ -76,6 +76,9 @@ extern crate num_cpus;\n extern crate rustc_serialize;\n extern crate toml;\n \n+#[cfg(unix)]\n+extern crate libc;\n+\n use std::cmp;\n use std::collections::HashMap;\n use std::env;\n@@ -108,9 +111,21 @@ pub mod util;\n #[cfg(windows)]\n mod job;\n \n-#[cfg(not(windows))]\n+#[cfg(unix)]\n+mod job {\n+    use libc;\n+\n+    pub unsafe fn setup(build: &mut ::Build) {\n+        if build.config.low_priority {\n+            libc::setpriority(libc::PRIO_PGRP as _, 0, 10);\n+        }\n+    }\n+}\n+\n+#[cfg(not(any(unix, windows)))]\n mod job {\n-    pub unsafe fn setup() {}\n+    pub unsafe fn setup(_build: &mut ::Build) {\n+    }\n }\n \n pub use config::Config;\n@@ -263,7 +278,7 @@ impl Build {\n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n-            job::setup();\n+            job::setup(self);\n         }\n \n         if let Subcommand::Clean = self.flags.cmd {"}]}