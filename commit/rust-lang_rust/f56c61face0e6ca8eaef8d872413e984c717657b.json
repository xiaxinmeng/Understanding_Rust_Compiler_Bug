{"sha": "f56c61face0e6ca8eaef8d872413e984c717657b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NmM2MWZhY2UwZTZjYThlYWVmOGQ4NzI0MTNlOTg0YzcxNzY1N2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-04-20T02:51:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-04-20T22:59:00Z"}, "message": "Add suggestion to lint", "tree": {"sha": "961605ef52ee081bf9cf629db02b923b6186f2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/961605ef52ee081bf9cf629db02b923b6186f2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f56c61face0e6ca8eaef8d872413e984c717657b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f56c61face0e6ca8eaef8d872413e984c717657b", "html_url": "https://github.com/rust-lang/rust/commit/f56c61face0e6ca8eaef8d872413e984c717657b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f56c61face0e6ca8eaef8d872413e984c717657b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "html_url": "https://github.com/rust-lang/rust/commit/37d3bea3ec3d47dbf1f7352c32fab75ce408798c"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "109edffcde38a5d3cc9a22804c6b6e3b47ed5d7f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f56c61face0e6ca8eaef8d872413e984c717657b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56c61face0e6ca8eaef8d872413e984c717657b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f56c61face0e6ca8eaef8d872413e984c717657b", "patch": "@@ -332,7 +332,8 @@ impl LintPass for HardwiredLints {\n #[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum BuiltinLintDiagnostics {\n     Normal,\n-    BareTraitObject(Span, /* is_global */ bool)\n+    BareTraitObject(Span, /* is_global */ bool),\n+    AbsPathWithModule(Span),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -347,6 +348,23 @@ impl BuiltinLintDiagnostics {\n                 };\n                 db.span_suggestion(span, \"use `dyn`\", sugg);\n             }\n+            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n+                let sugg = match sess.codemap().span_to_snippet(span) {\n+                    Ok(ref s) => {\n+                        // FIXME(Manishearth) ideally the emitting code\n+                        // can tell us whether or not this is global\n+                        let opt_colon = if s.trim_left().starts_with(\"::\") {\n+                            \"\"\n+                        } else {\n+                            \"::\"\n+                        };\n+\n+                        format!(\"crate{}{}\", opt_colon, s)\n+                    }\n+                    Err(_) => format!(\"crate::<path>\")\n+                };\n+                db.span_suggestion(span, \"use `crate`\", sugg);\n+            }\n         }\n     }\n }"}, {"sha": "a41cd62ea7a8b8193b93242c1e09160dda05615e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f56c61face0e6ca8eaef8d872413e984c717657b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56c61face0e6ca8eaef8d872413e984c717657b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f56c61face0e6ca8eaef8d872413e984c717657b", "patch": "@@ -3344,11 +3344,14 @@ impl<'a> Resolver<'a> {\n                                 }\n \n                                 if !is_crate {\n-                                    self.session.buffer_lint(\n+                                    let diag = lint::builtin::BuiltinLintDiagnostics\n+                                                   ::AbsPathWithModule(path_span);\n+                                    self.session.buffer_lint_with_diagnostic(\n                                         lint::builtin::ABSOLUTE_PATH_STARTING_WITH_MODULE,\n                                         id, path_span,\n-                                        \"Fully-qualified paths must start with `self`, `super`,\n-                                        `crate`, or an external crate name in the 2018 edition\");\n+                                        \"Absolute paths must start with `self`, `super`, \\\n+                                        `crate`, or an external crate name in the 2018 edition\",\n+                                        diag);\n                                 }\n                             }\n                         }"}]}