{"sha": "cd48ce1e9a9c0965f01ede2ea1a554eca2c74336", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDhjZTFlOWE5YzA5NjVmMDFlZGUyZWExYTU1NGVjYTJjNzQzMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T17:31:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T17:31:15Z"}, "message": "Auto merge of #56282 - qnighy:additional-sizedness-fix, r=nikomatsakis\n\nFix #56237: normalize type before deferred sizedness checking.\n\nThis seems to fix #56237, which was introduced by #56045. I don't thoroughly understand how this works, but the problem seemed to be a lack of normalization.\n\nr? @cramertj", "tree": {"sha": "8acb9c494c96f9349ac5f44f7f6bf0a16433b2eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8acb9c494c96f9349ac5f44f7f6bf0a16433b2eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336", "html_url": "https://github.com/rust-lang/rust/commit/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb5d35659b6d8579007f49db09aa1d35782b834", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb5d35659b6d8579007f49db09aa1d35782b834", "html_url": "https://github.com/rust-lang/rust/commit/4bb5d35659b6d8579007f49db09aa1d35782b834"}, {"sha": "8cab350c85b9738e4dbc99c67e71bd4a5b6f62a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cab350c85b9738e4dbc99c67e71bd4a5b6f62a7", "html_url": "https://github.com/rust-lang/rust/commit/8cab350c85b9738e4dbc99c67e71bd4a5b6f62a7"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "a107cec9ef41b868b2de8d47cb083237ba1bad92", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cd48ce1e9a9c0965f01ede2ea1a554eca2c74336", "patch": "@@ -914,6 +914,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         fcx.resolve_generator_interiors(def_id);\n \n         for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n+            let ty = fcx.normalize_ty(span, ty);\n             fcx.require_type_is_sized(ty, span, code);\n         }\n         fcx.select_all_obligations_or_error();\n@@ -3969,15 +3970,27 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         //\n                         // to work in stable even if the Sized bound on `drop` is relaxed.\n                         for i in 0..fn_sig.inputs().skip_binder().len() {\n-                            let input = tcx.erase_late_bound_regions(&fn_sig.input(i));\n+                            // We just want to check sizedness, so instead of introducing\n+                            // placeholder lifetimes with probing, we just replace higher lifetimes\n+                            // with fresh vars.\n+                            let input = self.replace_bound_vars_with_fresh_vars(\n+                                expr.span,\n+                                infer::LateBoundRegionConversionTime::FnCall,\n+                                &fn_sig.input(i)).0;\n                             self.require_type_is_sized_deferred(input, expr.span,\n                                                                 traits::SizedArgumentType);\n                         }\n                     }\n                     // Here we want to prevent struct constructors from returning unsized types.\n                     // There were two cases this happened: fn pointer coercion in stable\n                     // and usual function call in presense of unsized_locals.\n-                    let output = tcx.erase_late_bound_regions(&fn_sig.output());\n+                    // Also, as we just want to check sizedness, instead of introducing\n+                    // placeholder lifetimes with probing, we just replace higher lifetimes\n+                    // with fresh vars.\n+                    let output = self.replace_bound_vars_with_fresh_vars(\n+                        expr.span,\n+                        infer::LateBoundRegionConversionTime::FnCall,\n+                        &fn_sig.output()).0;\n                     self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n                 }\n "}, {"sha": "87e10e83612d6ce36a9bf9d3dcf3be9a7d538d4e", "filename": "src/test/run-pass/issue-56237.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336/src%2Ftest%2Frun-pass%2Fissue-56237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48ce1e9a9c0965f01ede2ea1a554eca2c74336/src%2Ftest%2Frun-pass%2Fissue-56237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-56237.rs?ref=cd48ce1e9a9c0965f01ede2ea1a554eca2c74336", "patch": "@@ -0,0 +1,11 @@\n+use std::ops::Deref;\n+\n+fn foo<P>(_value: <P as Deref>::Target)\n+where\n+    P: Deref,\n+    <P as Deref>::Target: Sized,\n+{}\n+\n+fn main() {\n+    foo::<Box<u32>>(2);\n+}"}]}