{"sha": "f1425c7c3e62b519354d1a178181a66dad943b4e", "node_id": "C_kwDOAAsO6NoAKGYxNDI1YzdjM2U2MmI1MTkzNTRkMWExNzgxODFhNjZkYWQ5NDNiNGU", "commit": {"author": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-10-05T01:54:00Z"}, "committer": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-10-05T02:28:04Z"}, "message": "heading_level: u32 -> heading_offset: HeadingOffset", "tree": {"sha": "0543416710a4ece1a1bb6a233ea59ff82d0da890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0543416710a4ece1a1bb6a233ea59ff82d0da890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1425c7c3e62b519354d1a178181a66dad943b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1425c7c3e62b519354d1a178181a66dad943b4e", "html_url": "https://github.com/rust-lang/rust/commit/f1425c7c3e62b519354d1a178181a66dad943b4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1425c7c3e62b519354d1a178181a66dad943b4e/comments", "author": null, "committer": null, "parents": [{"sha": "13558ee0a06c544e68978766d0508b62ef3e22f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/13558ee0a06c544e68978766d0508b62ef3e22f7", "html_url": "https://github.com/rust-lang/rust/commit/13558ee0a06c544e68978766d0508b62ef3e22f7"}], "stats": {"total": 149, "additions": 88, "deletions": 61}, "files": [{"sha": "302fc5a677771ffe6b7957cdc512cbcf31815f18", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=f1425c7c3e62b519354d1a178181a66dad943b4e", "patch": "@@ -1,4 +1,4 @@\n-use crate::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n+use crate::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n use crate::rustc_span::edition::Edition;\n use std::fs;\n use std::path::Path;\n@@ -46,7 +46,7 @@ impl ExternalHtml {\n                 error_codes: codes,\n                 edition,\n                 playground,\n-                heading_level: 1\n+                heading_offset: HeadingOffset::H2,\n             }\n             .into_string()\n         );\n@@ -62,7 +62,7 @@ impl ExternalHtml {\n                 error_codes: codes,\n                 edition,\n                 playground,\n-                heading_level: 1\n+                heading_offset: HeadingOffset::H2,\n             }\n             .into_string()\n         );"}, {"sha": "9f2e282fce1c386a7ddc32254671a31c5fac29a8", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f1425c7c3e62b519354d1a178181a66dad943b4e", "patch": "@@ -8,7 +8,7 @@\n //! extern crate rustc_span;\n //!\n //! use rustc_span::edition::Edition;\n-//! use rustdoc::html::markdown::{IdMap, Markdown, ErrorCodes};\n+//! use rustdoc::html::markdown::{HeadingOffset, IdMap, Markdown, ErrorCodes};\n //!\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n@@ -19,7 +19,7 @@\n //!     error_codes: ErrorCodes::Yes,\n //!     edition: Edition::Edition2015,\n //!     playground: &None,\n-//!     heading_level: 1\n+//!     heading_offset: HeadingOffset::H2,\n //! };\n //! let html = md.into_string();\n //! // ... something using html\n@@ -75,6 +75,16 @@ pub(crate) fn summary_opts() -> Options {\n         | Options::ENABLE_SMART_PUNCTUATION\n }\n \n+#[derive(Debug, Clone, Copy)]\n+pub enum HeadingOffset {\n+    H1 = 0,\n+    H2,\n+    H3,\n+    H4,\n+    H5,\n+    H6,\n+}\n+\n /// When `to_string` is called, this struct will emit the HTML corresponding to\n /// the rendered version of the contained markdown string.\n pub struct Markdown<'a> {\n@@ -89,8 +99,8 @@ pub struct Markdown<'a> {\n     pub edition: Edition,\n     pub playground: &'a Option<Playground>,\n     /// Offset at which we render headings.\n-    /// E.g. if `heading_level: 1`, then `# something` renders an `<h2>` instead of `<h1>`\n-    pub heading_level: u32,\n+    /// E.g. if `heading_offset: HeadingOffset::H2`, then `# something` renders an `<h2>`.\n+    pub heading_offset: HeadingOffset,\n }\n /// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n crate struct MarkdownWithToc<'a>(\n@@ -502,12 +512,17 @@ struct HeadingLinks<'a, 'b, 'ids, I> {\n     toc: Option<&'b mut TocBuilder>,\n     buf: VecDeque<SpannedEvent<'a>>,\n     id_map: &'ids mut IdMap,\n-    level: u32,\n+    heading_offset: HeadingOffset,\n }\n \n impl<'a, 'b, 'ids, I> HeadingLinks<'a, 'b, 'ids, I> {\n-    fn new(iter: I, toc: Option<&'b mut TocBuilder>, ids: &'ids mut IdMap, level: u32) -> Self {\n-        HeadingLinks { inner: iter, toc, buf: VecDeque::new(), id_map: ids, level }\n+    fn new(\n+        iter: I,\n+        toc: Option<&'b mut TocBuilder>,\n+        ids: &'ids mut IdMap,\n+        heading_offset: HeadingOffset,\n+    ) -> Self {\n+        HeadingLinks { inner: iter, toc, buf: VecDeque::new(), id_map: ids, heading_offset }\n     }\n }\n \n@@ -544,7 +559,7 @@ impl<'a, 'b, 'ids, I: Iterator<Item = SpannedEvent<'a>>> Iterator\n                 self.buf.push_front((Event::Html(format!(\"{} \", sec).into()), 0..0));\n             }\n \n-            let level = std::cmp::min(level + self.level, MAX_HEADER_LEVEL);\n+            let level = std::cmp::min(level + (self.heading_offset as u32), MAX_HEADER_LEVEL);\n             self.buf.push_back((Event::Html(format!(\"</a></h{}>\", level).into()), 0..0));\n \n             let start_tags = format!(\n@@ -1027,7 +1042,7 @@ impl Markdown<'_> {\n             error_codes: codes,\n             edition,\n             playground,\n-            heading_level,\n+            heading_offset,\n         } = self;\n \n         // This is actually common enough to special-case\n@@ -1049,7 +1064,7 @@ impl Markdown<'_> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        let p = HeadingLinks::new(p, None, &mut ids, heading_level);\n+        let p = HeadingLinks::new(p, None, &mut ids, heading_offset);\n         let p = Footnotes::new(p);\n         let p = LinkReplacer::new(p.map(|(ev, _)| ev), links);\n         let p = TableWrapper::new(p);\n@@ -1071,7 +1086,7 @@ impl MarkdownWithToc<'_> {\n         let mut toc = TocBuilder::new();\n \n         {\n-            let p = HeadingLinks::new(p, Some(&mut toc), &mut ids, 0);\n+            let p = HeadingLinks::new(p, Some(&mut toc), &mut ids, HeadingOffset::H1);\n             let p = Footnotes::new(p);\n             let p = TableWrapper::new(p.map(|(ev, _)| ev));\n             let p = CodeBlocks::new(p, codes, edition, playground);\n@@ -1100,7 +1115,7 @@ impl MarkdownHtml<'_> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        let p = HeadingLinks::new(p, None, &mut ids, 0);\n+        let p = HeadingLinks::new(p, None, &mut ids, HeadingOffset::H1);\n         let p = Footnotes::new(p);\n         let p = TableWrapper::new(p.map(|(ev, _)| ev));\n         let p = CodeBlocks::new(p, codes, edition, playground);\n@@ -1318,7 +1333,7 @@ crate fn markdown_links(md: &str) -> Vec<MarkdownLink> {\n     // There's no need to thread an IdMap through to here because\n     // the IDs generated aren't going to be emitted anywhere.\n     let mut ids = IdMap::new();\n-    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids, 0));\n+    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids, HeadingOffset::H1));\n \n     for ev in iter {\n         if let Event::Start(Tag::Link(kind, dest, _)) = ev.0 {"}, {"sha": "68ab002f138676d878902e4e4c14d7d434f49f09", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=f1425c7c3e62b519354d1a178181a66dad943b4e", "patch": "@@ -1,5 +1,5 @@\n use super::{find_testable_code, plain_text_summary, short_markdown_summary};\n-use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n+use super::{ErrorCodes, HeadingOffset, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n \n #[test]\n@@ -154,7 +154,7 @@ fn test_header() {\n             error_codes: ErrorCodes::Yes,\n             edition: DEFAULT_EDITION,\n             playground: &None,\n-            heading_level: 1,\n+            heading_offset: HeadingOffset::H2,\n         }\n         .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n@@ -196,7 +196,7 @@ fn test_header_ids_multiple_blocks() {\n             error_codes: ErrorCodes::Yes,\n             edition: DEFAULT_EDITION,\n             playground: &None,\n-            heading_level: 1,\n+            heading_offset: HeadingOffset::H2,\n         }\n         .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);"}, {"sha": "11682afdf899ba0580be428629ebf1cb6a655c7d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=f1425c7c3e62b519354d1a178181a66dad943b4e", "patch": "@@ -67,7 +67,7 @@ use crate::html::format::{\n     href, print_abi_with_space, print_constness_with_space, print_default_space,\n     print_generic_bounds, print_where_clause, Buffer, HrefError, PrintWithSpace,\n };\n-use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -475,16 +475,16 @@ fn document(\n     cx: &Context<'_>,\n     item: &clean::Item,\n     parent: Option<&clean::Item>,\n-    level: u32,\n+    heading_offset: HeadingOffset,\n ) {\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n     document_item_info(w, cx, item, parent);\n     if parent.is_none() {\n-        document_full_collapsible(w, item, cx, level);\n+        document_full_collapsible(w, item, cx, heading_offset);\n     } else {\n-        document_full(w, item, cx, level);\n+        document_full(w, item, cx, heading_offset);\n     }\n }\n \n@@ -494,7 +494,7 @@ fn render_markdown(\n     cx: &Context<'_>,\n     md_text: &str,\n     links: Vec<RenderedLink>,\n-    heading_level: u32,\n+    heading_offset: HeadingOffset,\n ) {\n     let mut ids = cx.id_map.borrow_mut();\n     write!(\n@@ -507,7 +507,7 @@ fn render_markdown(\n             error_codes: cx.shared.codes,\n             edition: cx.shared.edition(),\n             playground: &cx.shared.playground,\n-            heading_level,\n+            heading_offset,\n         }\n         .into_string()\n     )\n@@ -544,20 +544,30 @@ fn document_short(\n     }\n }\n \n-fn document_full_collapsible(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, level: u32) {\n-    document_full_inner(w, item, cx, true, level);\n+fn document_full_collapsible(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    heading_offset: HeadingOffset,\n+) {\n+    document_full_inner(w, item, cx, true, heading_offset);\n }\n \n-fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, level: u32) {\n-    document_full_inner(w, item, cx, false, level);\n+fn document_full(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    heading_offset: HeadingOffset,\n+) {\n+    document_full_inner(w, item, cx, false, heading_offset);\n }\n \n fn document_full_inner(\n     w: &mut Buffer,\n     item: &clean::Item,\n     cx: &Context<'_>,\n     is_collapsible: bool,\n-    level: u32,\n+    heading_offset: HeadingOffset,\n ) {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n@@ -568,10 +578,10 @@ fn document_full_inner(\n                      <span>Expand description</span>\\\n                 </summary>\",\n             );\n-            render_markdown(w, cx, &s, item.links(cx), level);\n+            render_markdown(w, cx, &s, item.links(cx), heading_offset);\n             w.write_str(\"</details>\");\n         } else {\n-            render_markdown(w, cx, &s, item.links(cx), level);\n+            render_markdown(w, cx, &s, item.links(cx), heading_offset);\n         }\n     }\n }\n@@ -1340,7 +1350,7 @@ fn render_impl(\n                         // because impls can't have a stability.\n                         if item.doc_value().is_some() {\n                             document_item_info(&mut info_buffer, cx, it, Some(parent));\n-                            document_full(&mut doc_buffer, item, cx, 4);\n+                            document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                             short_documented = false;\n                         } else {\n                             // In case the item isn't documented,\n@@ -1358,7 +1368,7 @@ fn render_impl(\n                 } else {\n                     document_item_info(&mut info_buffer, cx, item, Some(parent));\n                     if rendering_params.show_def_docs {\n-                        document_full(&mut doc_buffer, item, cx, 4);\n+                        document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                         short_documented = false;\n                     }\n                 }\n@@ -1599,7 +1609,7 @@ fn render_impl(\n                     error_codes: cx.shared.codes,\n                     edition: cx.shared.edition(),\n                     playground: &cx.shared.playground,\n-                    heading_level: 1\n+                    heading_offset: HeadingOffset::H2\n                 }\n                 .into_string()\n             );"}, {"sha": "9b39a3eeaf0fa42c2b1d8ab018c1bfc1a7a8e5fb", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=f1425c7c3e62b519354d1a178181a66dad943b4e", "patch": "@@ -30,7 +30,7 @@ use crate::html::format::{\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n-use crate::html::markdown::MarkdownSummaryLine;\n+use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n \n const ITEM_TABLE_OPEN: &'static str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &'static str = \"</div>\";\n@@ -173,7 +173,7 @@ fn toggle_close(w: &mut Buffer) {\n }\n \n fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n-    document(w, cx, item, None, 1);\n+    document(w, cx, item, None, HeadingOffset::H2);\n \n     let mut indices = (0..items.len()).filter(|i| !items[*i].is_stripped()).collect::<Vec<usize>>();\n \n@@ -485,7 +485,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n             notable_traits = notable_traits_decl(&f.decl, cx),\n         );\n     });\n-    document(w, cx, it, None, 1)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Trait) {\n@@ -608,7 +608,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     });\n \n     // Trait documentation\n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n@@ -626,7 +626,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         let mut content = Buffer::empty_from(w);\n-        document(&mut content, cx, m, Some(t), 4);\n+        document(&mut content, cx, m, Some(t), HeadingOffset::H5);\n         let toggled = !content.is_empty();\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n@@ -840,7 +840,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n         );\n     });\n \n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -862,7 +862,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n         );\n     });\n \n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -893,7 +893,7 @@ fn item_typedef(\n         );\n     });\n \n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let def_id = it.def_id.expect_def_id();\n     // Render any items associated directly to this alias, as otherwise they\n@@ -911,7 +911,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n         });\n     });\n \n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let mut fields = s\n         .fields\n@@ -944,7 +944,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n             if let Some(stability_class) = field.stability_class(cx.tcx()) {\n                 write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n             }\n-            document(w, cx, field, Some(it), 1);\n+            document(w, cx, field, Some(it), HeadingOffset::H2);\n         }\n     }\n     let def_id = it.def_id.expect_def_id();\n@@ -1026,7 +1026,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n         });\n     });\n \n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     if !e.variants.is_empty() {\n         write!(\n@@ -1055,7 +1055,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\"</code>\");\n             render_stability_since(w, variant, it, cx.tcx());\n             w.write_str(\"</div>\");\n-            document(w, cx, variant, Some(it), 1);\n+            document(w, cx, variant, Some(it), HeadingOffset::H2);\n             document_non_exhaustive(w, variant);\n \n             use crate::clean::Variant;\n@@ -1095,7 +1095,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                                 f = field.name.as_ref().unwrap(),\n                                 t = ty.print(cx)\n                             );\n-                            document(w, cx, field, Some(variant), 1);\n+                            document(w, cx, field, Some(variant), HeadingOffset::H2);\n                         }\n                         _ => unreachable!(),\n                     }\n@@ -1122,7 +1122,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             None,\n         );\n     });\n-    document(w, cx, it, None, 1)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n@@ -1152,11 +1152,11 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean\n             });\n         }\n     }\n-    document(w, cx, it, None, 1)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n@@ -1195,7 +1195,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n         }\n     });\n \n-    document(w, cx, it, None, 1)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Struct) {\n@@ -1206,7 +1206,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n         });\n     });\n \n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let mut fields = s\n         .fields\n@@ -1242,7 +1242,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n                     name = field_name,\n                     ty = ty.print(cx)\n                 );\n-                document(w, cx, field, Some(it), 1);\n+                document(w, cx, field, Some(it), HeadingOffset::H2);\n             }\n         }\n     }\n@@ -1263,7 +1263,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             typ = s.type_.print(cx)\n         );\n     });\n-    document(w, cx, it, None, 1)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n@@ -1278,13 +1278,13 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n         );\n     });\n \n-    document(w, cx, it, None, 1);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n fn item_keyword(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None, 1)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n /// Compare two strings treating multi-digit numbers as single units (i.e. natural sort order)."}, {"sha": "47b24d40edc27ccaac299bfe59f804cd9ca4675d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=f1425c7c3e62b519354d1a178181a66dad943b4e", "patch": "@@ -10,7 +10,9 @@ use crate::config::{Options, RenderOptions};\n use crate::doctest::{Collector, TestOptions};\n use crate::html::escape::Escape;\n use crate::html::markdown;\n-use crate::html::markdown::{find_testable_code, ErrorCodes, IdMap, Markdown, MarkdownWithToc};\n+use crate::html::markdown::{\n+    find_testable_code, ErrorCodes, HeadingOffset, IdMap, Markdown, MarkdownWithToc,\n+};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n@@ -77,7 +79,7 @@ crate fn render<P: AsRef<Path>>(\n             error_codes,\n             edition,\n             playground: &playground,\n-            heading_level: 0,\n+            heading_offset: HeadingOffset::H1,\n         }\n         .into_string()\n     };"}, {"sha": "e796934961094724e4fb6faa6a46d4ba64a61870", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1425c7c3e62b519354d1a178181a66dad943b4e/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=f1425c7c3e62b519354d1a178181a66dad943b4e", "patch": "@@ -14,7 +14,7 @@ use std::path::PathBuf;\n \n use rustc_span::edition::DEFAULT_EDITION;\n \n-use rustdoc::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n+use rustdoc::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n \n pub struct ErrorMetadata {\n     pub description: Option<String>,\n@@ -126,7 +126,7 @@ impl Formatter for HTMLFormatter {\n                         error_codes: ErrorCodes::Yes,\n                         edition: DEFAULT_EDITION,\n                         playground: &Some(playground),\n-                        heading_level: 1\n+                        heading_offset: HeadingOffset::H2,\n                     }\n                     .into_string()\n                 )?"}]}