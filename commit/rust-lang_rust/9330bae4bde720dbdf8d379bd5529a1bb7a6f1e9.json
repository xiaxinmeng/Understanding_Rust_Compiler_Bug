{"sha": "9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMzBiYWU0YmRlNzIwZGJkZjhkMzc5YmQ1NTI5YTFiYjdhNmYxZTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-11T14:08:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-23T23:57:30Z"}, "message": "Fallout from changing fn traits to use inheritance rather than bridge\nimpls. This is a [breaking-change] (for gated code) in that when you\nimplement `Fn` (`FnMut`) you must also implement `FnOnce`. This commit\ndemonstrates how to fix it.", "tree": {"sha": "969855cd9cb464c2a238151829cfaed3933ff7ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/969855cd9cb464c2a238151829cfaed3933ff7ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "html_url": "https://github.com/rust-lang/rust/commit/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37601131a0ffc49e93b8797020429a980520171c", "url": "https://api.github.com/repos/rust-lang/rust/commits/37601131a0ffc49e93b8797020429a980520171c", "html_url": "https://github.com/rust-lang/rust/commit/37601131a0ffc49e93b8797020429a980520171c"}], "stats": {"total": 275, "additions": 216, "deletions": 59}, "files": [{"sha": "234cd6e0fd21ec23994810de197661005891dc0a", "filename": "src/libcollectionstest/btree/set.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fset.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -43,15 +43,21 @@ struct Counter<'a, 'b> {\n }\n \n impl<'a, 'b, 'c> FnMut<(&'c i32,)> for Counter<'a, 'b> {\n-    type Output = bool;\n-\n     extern \"rust-call\" fn call_mut(&mut self, (&x,): (&'c i32,)) -> bool {\n         assert_eq!(x, self.expected[*self.i]);\n         *self.i += 1;\n         true\n     }\n }\n \n+impl<'a, 'b, 'c> FnOnce<(&'c i32,)> for Counter<'a, 'b> {\n+    type Output = bool;\n+\n+    extern \"rust-call\" fn call_once(mut self, args: (&'c i32,)) -> bool {\n+        self.call_mut(args)\n+    }\n+}\n+\n fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F) where\n     // FIXME Replace Counter with `Box<FnMut(_) -> _>`\n     F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, Counter) -> bool,"}, {"sha": "93c37524bf565294dd07c4fba3c4ec794c49bd7a", "filename": "src/test/compile-fail/borrowck-overloaded-call.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,26 +18,36 @@ struct SFn {\n }\n \n impl Fn<(isize,)> for SFn {\n-    type Output = isize;\n-\n     extern \"rust-call\" fn call(&self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n }\n \n+impl FnMut<(isize,)> for SFn {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (isize,)) -> isize { self.call(args) }\n+}\n+\n+impl FnOnce<(isize,)> for SFn {\n+    type Output = isize;\n+    extern \"rust-call\" fn call_once(self, args: (isize,)) -> isize { self.call(args) }\n+}\n+\n struct SFnMut {\n     x: isize,\n     y: isize,\n }\n \n impl FnMut<(isize,)> for SFnMut {\n-    type Output = isize;\n-\n     extern \"rust-call\" fn call_mut(&mut self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n }\n \n+impl FnOnce<(isize,)> for SFnMut {\n+    type Output = isize;\n+    extern \"rust-call\" fn call_once(mut self, args: (isize,)) -> isize { self.call_mut(args) }\n+}\n+\n struct SFnOnce {\n     x: String,\n }"}, {"sha": "27b4a04054f073f203503b5ef9a01298e864a622", "filename": "src/test/compile-fail/coerce-unsafe-to-closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -10,5 +10,6 @@\n \n fn main() {\n     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n-    //~^ ERROR: is not implemented for the type\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }"}, {"sha": "d1abed9b2627c0a636bd9f1eb96ceb6ce7c3f008", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let _x: extern \"C\" fn() = f; // OK\n     is_fn(f);\n     //~^ ERROR the trait `core::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n-    //~| ERROR the trait `core::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n+    //~| ERROR the trait `core::ops::FnOnce<()>` is not implemented for the type `extern \"C\" fn()\n }"}, {"sha": "d86c5d211dc5fa2e339d1fa06582655ee0b44d3f", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-manual-impls.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,28 +18,21 @@\n struct Foo;\n impl Fn<()> for Foo {\n     //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family of traits\n-    type Output = ();\n-\n-    extern \"rust-call\" fn call(&self, args: ()) -> () {}\n+    extern \"rust-call\" fn call(self, args: ()) -> () {}\n }\n struct Foo1;\n-impl Fn() for Foo1 {\n+impl FnOnce() for Foo1 {\n     //~^ ERROR associated type bindings are not allowed here\n-\n-    extern \"rust-call\" fn call(&self, args: ()) -> () {}\n+    extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n }\n struct Bar;\n impl FnMut<()> for Bar {\n     //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family of traits\n-    type Output = ();\n-\n     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n }\n struct Baz;\n impl FnOnce<()> for Baz {\n     //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family of traits\n-    type Output = ();\n-\n     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n }\n "}, {"sha": "6433255bd4d2fcb7e3dd05894e669f8a38b0b945", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -35,5 +35,5 @@ fn main() {\n \n     needs_fn(1);\n     //~^ ERROR `core::ops::Fn<(isize,)>`\n-    //~| ERROR `core::ops::Fn<(isize,)>`\n+    //~| ERROR `core::ops::FnOnce<(isize,)>`\n }"}, {"sha": "8e1e88a92e452c09d0200806c4bfe2cdc7386394", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -17,9 +17,13 @@ fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n }\n \n fn main() {\n-    apply(&3, takes_mut); //~ ERROR (values differ in mutability)\n     apply(&3, takes_imm);\n+    apply(&3, takes_mut);\n+    //~^ ERROR (values differ in mutability)\n+    //~| ERROR (values differ in mutability)\n \n     apply(&mut 3, takes_mut);\n-    apply(&mut 3, takes_imm); //~ ERROR (values differ in mutability)\n+    apply(&mut 3, takes_imm);\n+    //~^ ERROR (values differ in mutability)\n+    //~| ERROR (values differ in mutability)\n }"}, {"sha": "3853434e128ebd0b9465747277150ddf0c9fc41b", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -16,11 +16,10 @@ struct Debuger<T> {\n     x: T\n }\n \n-impl<T: fmt::Debug> ops::Fn<(),> for Debuger<T> {\n+impl<T: fmt::Debug> ops::FnOnce<(),> for Debuger<T> {\n     type Output = ();\n-\n-    fn call(&self, _args: ()) {\n-//~^ ERROR `call` has an incompatible type for trait: expected \"rust-call\" fn, found \"Rust\" fn\n+    fn call_once(self, _args: ()) {\n+//~^ ERROR `call_once` has an incompatible type for trait: expected \"rust-call\" fn, found \"Rust\" fn\n         println!(\"{:?}\", self.x);\n     }\n }"}, {"sha": "fe427e02451af6a0587f2c7ae49cfc2f98dfa75e", "filename": "src/test/compile-fail/issue-20225.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -13,9 +13,19 @@\n struct Foo;\n \n impl<'a, T> Fn<(&'a T,)> for Foo {\n+  extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n+  //~^ ERROR: has an incompatible type for trait: expected &-ptr\n+}\n+\n+impl<'a, T> FnMut<(&'a T,)> for Foo {\n+  extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n+  //~^ ERROR: has an incompatible type for trait: expected &-ptr\n+}\n+\n+impl<'a, T> FnOnce<(&'a T,)> for Foo {\n   type Output = ();\n \n-  extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n+  extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait: expected &-ptr\n }\n "}, {"sha": "77ac97bc8b89951427bf7aaa9d69d0e45675f55a", "filename": "src/test/compile-fail/overloaded-calls-bad.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,13 +18,18 @@ struct S {\n }\n \n impl FnMut<(isize,)> for S {\n-    type Output = isize;\n-\n     extern \"rust-call\" fn call_mut(&mut self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n }\n \n+impl FnOnce<(isize,)> for S {\n+    type Output = isize;\n+    extern \"rust-call\" fn call_once(mut self, (z,): (isize,)) -> isize {\n+        self.call_mut((z,))\n+    }\n+}\n+\n fn main() {\n     let mut s = S {\n         x: 3,"}, {"sha": "ea47d676412098c04e54399afc0a05d7187a7be7", "filename": "src/test/compile-fail/overloaded-calls-nontuple.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,12 +18,16 @@ struct S {\n }\n \n impl FnMut<isize> for S {\n-    type Output = isize;\n     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n         self.x + self.y + z\n     }\n }\n \n+impl FnOnce<isize> for S {\n+    type Output = isize;\n+    extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n+}\n+\n fn main() {\n     let mut s = S {\n         x: 1,"}, {"sha": "93498ac7f83514c1768d1babc95dcd640c3435e2", "filename": "src/test/compile-fail/unboxed-closures-fnmut-as-fn.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -19,19 +19,22 @@ use std::ops::{Fn,FnMut,FnOnce};\n struct S;\n \n impl FnMut<(isize,)> for S {\n-    type Output = isize;\n-\n     extern \"rust-call\" fn call_mut(&mut self, (x,): (isize,)) -> isize {\n         x * x\n     }\n }\n \n+impl FnOnce<(isize,)> for S {\n+    type Output = isize;\n+\n+    extern \"rust-call\" fn call_once(mut self, args: (isize,)) -> isize { self.call_mut(args) }\n+}\n+\n fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n     f.call((x,))\n }\n \n fn main() {\n     let x = call_it(&S, 22);\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }"}, {"sha": "2dcd7a97d8977eec83fc37a53c8dd016bc3b31fa", "filename": "src/test/compile-fail/unboxed-closures-recursive-fn-using-fn-mut.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -28,14 +28,19 @@ impl<F,A,R> YCombinator<F,A,R> {\n }\n \n impl<A,R,F : FnMut(&mut FnMut(A) -> R, A) -> R> FnMut<(A,)> for YCombinator<F,A,R> {\n-    type Output = R;\n-\n     extern \"rust-call\" fn call_mut(&mut self, (arg,): (A,)) -> R {\n         (self.func)(self, arg)\n             //~^ ERROR cannot borrow `*self` as mutable more than once at a time\n     }\n }\n \n+impl<A,R,F : FnMut(&mut FnMut(A) -> R, A) -> R> FnOnce<(A,)> for YCombinator<F,A,R> {\n+    type Output = R;\n+    extern \"rust-call\" fn call_once(mut self, args: (A,)) -> R {\n+        self.call_mut(args)\n+    }\n+}\n+\n fn main() {\n     let mut counter = 0;\n     let factorial = |recur: &mut FnMut(u32) -> u32, arg: u32| -> u32 {"}, {"sha": "dc7c70ba649d8b0524766893a060679a1714c511", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -27,11 +27,15 @@ fn a() {\n }\n \n fn b() {\n-    let y = call_it_mut(&mut square, 22); //~ ERROR not implemented\n+    let y = call_it_mut(&mut square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn c() {\n-    let z = call_it_once(square, 22); //~ ERROR not implemented\n+    let z = call_it_once(square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "cdcb435b65a6acfcc8cdc3700d420022234385bb", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -27,11 +27,15 @@ fn a() {\n }\n \n fn b() {\n-    let y = call_it_mut(&mut square, 22); //~ ERROR not implemented\n+    let y = call_it_mut(&mut square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn c() {\n-    let z = call_it_once(square, 22); //~ ERROR not implemented\n+    let z = call_it_once(square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "150bf36dcc286db2befd582b8dd6fa055495e1b8", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -28,11 +28,15 @@ fn a() {\n }\n \n fn b() {\n-    let y = call_it_mut(&mut square, 22); //~ ERROR not implemented\n+    let y = call_it_mut(&mut square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn c() {\n-    let z = call_it_once(square, 22); //~ ERROR not implemented\n+    let z = call_it_once(square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "6c0e5edae72a655088ed1b2ae94956ba9597c106", "filename": "src/test/run-pass/issue-13655.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13655.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -14,14 +14,27 @@ use std::ops::Fn;\n struct Foo<T>(T);\n \n impl<T: Copy> Fn<()> for Foo<T> {\n-    type Output = T;\n     extern \"rust-call\" fn call(&self, _: ()) -> T {\n       match *self {\n         Foo(t) => t\n       }\n     }\n }\n \n+impl<T: Copy> FnMut<()> for Foo<T> {\n+    extern \"rust-call\" fn call_mut(&mut self, _: ()) -> T {\n+        self.call(())\n+    }\n+}\n+\n+impl<T: Copy> FnOnce<()> for Foo<T> {\n+    type Output = T;\n+\n+    extern \"rust-call\" fn call_once(self, _: ()) -> T {\n+        self.call(())\n+    }\n+}\n+\n fn main() {\n   let t: u8 = 1;\n   println!(\"{}\", Foo(t)());"}, {"sha": "ab5a2f03ece8cde20bba96bf68e22288801e1575", "filename": "src/test/run-pass/issue-14958.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14958.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -15,10 +15,18 @@ trait Foo { fn dummy(&self) { }}\n struct Bar;\n \n impl<'a> std::ops::Fn<(&'a (Foo+'a),)> for Bar {\n-    type Output = ();\n     extern \"rust-call\" fn call(&self, _: (&'a Foo,)) {}\n }\n \n+impl<'a> std::ops::FnMut<(&'a (Foo+'a),)> for Bar {\n+    extern \"rust-call\" fn call_mut(&mut self, a: (&'a Foo,)) { self.call(a) }\n+}\n+\n+impl<'a> std::ops::FnOnce<(&'a (Foo+'a),)> for Bar {\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, a: (&'a Foo,)) { self.call(a) }\n+}\n+\n struct Baz;\n \n impl Foo for Baz {}"}, {"sha": "91ad7e03623fd616902de69a03f09a72ae4008ce", "filename": "src/test/run-pass/issue-14959.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14959.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -34,9 +34,21 @@ impl Alloy {\n }\n \n impl<'b> Fn<(&'b mut (Response+'b),)> for SendFile {\n+    extern \"rust-call\" fn call(&self, (_res,): (&'b mut (Response+'b),)) {}\n+}\n+\n+impl<'b> FnMut<(&'b mut (Response+'b),)> for SendFile {\n+    extern \"rust-call\" fn call_mut(&mut self, (_res,): (&'b mut (Response+'b),)) {\n+        self.call((_res,))\n+    }\n+}\n+\n+impl<'b> FnOnce<(&'b mut (Response+'b),)> for SendFile {\n     type Output = ();\n \n-    extern \"rust-call\" fn call(&self, (_res,): (&'b mut (Response+'b),)) {}\n+    extern \"rust-call\" fn call_once(self, (_res,): (&'b mut (Response+'b),)) {\n+        self.call((_res,))\n+    }\n }\n \n impl<Rq: Request, Rs: Response> Ingot<Rq, Rs> for HelloWorld {"}, {"sha": "fda35d3e7f463ca470ac623db266c3c3b88dec26", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,20 +18,36 @@\n struct Foo { foo: u32 }\n \n impl FnMut<()> for Foo {\n-    type Output = u32;\n     extern \"rust-call\" fn call_mut(&mut self, _: ()) -> u32 { self.foo }\n }\n \n-impl FnMut<(u32,)> for Foo {\n+impl FnOnce<()> for Foo {\n     type Output = u32;\n+    extern \"rust-call\" fn call_once(mut self, _: ()) -> u32 { self.call_mut(()) }\n+}\n+\n+/////////////////////////////////////////////////////////////////////////\n+\n+impl FnMut<(u32,)> for Foo {\n     extern \"rust-call\" fn call_mut(&mut self, (x,): (u32,)) -> u32 { self.foo + x }\n }\n \n-impl FnMut<(u32,u32)> for Foo {\n+impl FnOnce<(u32,)> for Foo {\n     type Output = u32;\n+    extern \"rust-call\" fn call_once(mut self, args: (u32,)) -> u32 { self.call_mut(args) }\n+}\n+\n+/////////////////////////////////////////////////////////////////////////\n+\n+impl FnMut<(u32,u32)> for Foo {\n     extern \"rust-call\" fn call_mut(&mut self, (x, y): (u32, u32)) -> u32 { self.foo + x + y }\n }\n \n+impl FnOnce<(u32,u32)> for Foo {\n+    type Output = u32;\n+    extern \"rust-call\" fn call_once(mut self, args: (u32,u32)) -> u32 { self.call_mut(args) }\n+}\n+\n fn main() {\n     let mut f = box Foo { foo: 42 } as Box<FnMut() -> u32>;\n     assert_eq!(f.call_mut(()), 42);"}, {"sha": "9a476f563eda792d23bfbfc4e308009e3ea1df53", "filename": "src/test/run-pass/issue-19982.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-19982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Fissue-19982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19982.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -14,9 +14,17 @@\n struct Foo;\n \n impl<'a> Fn<(&'a (),)> for Foo {\n+    extern \"rust-call\" fn call(&self, (_,): (&(),)) {}\n+}\n+\n+impl<'a> FnMut<(&'a (),)> for Foo {\n+    extern \"rust-call\" fn call_mut(&mut self, (_,): (&(),)) {}\n+}\n+\n+impl<'a> FnOnce<(&'a (),)> for Foo {\n     type Output = ();\n \n-    extern \"rust-call\" fn call(&self, (_,): (&(),)) {}\n+    extern \"rust-call\" fn call_once(self, (_,): (&(),)) {}\n }\n \n fn main() {}"}, {"sha": "081e1417d5f45f49006bcf4c901ab1f8a0fc4408", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -19,13 +19,20 @@ use std::ops::Add;\n struct G<A>(PhantomData<A>);\n \n impl<'a, A: Add<i32, Output=i32>> Fn<(A,)> for G<A> {\n-    type Output = i32;\n-\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> i32 {\n         arg.add(1)\n     }\n }\n \n+impl<'a, A: Add<i32, Output=i32>> FnMut<(A,)> for G<A> {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (A,)) -> i32 { self.call(args) }\n+}\n+\n+impl<'a, A: Add<i32, Output=i32>> FnOnce<(A,)> for G<A> {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_once(self, args: (A,)) -> i32 { self.call(args) }\n+}\n+\n fn main() {\n     // ICE trigger\n     (G(PhantomData))(1);"}, {"sha": "b20c80dc4c944c21840a352b0ccd76585bcbf8be", "filename": "src/test/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,24 +18,38 @@ struct S1 {\n }\n \n impl FnMut<(i32,)> for S1 {\n-    type Output = i32;\n     extern \"rust-call\" fn call_mut(&mut self, (z,): (i32,)) -> i32 {\n         self.x * self.y * z\n     }\n }\n \n+impl FnOnce<(i32,)> for S1 {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_once(mut self, args: (i32,)) -> i32 {\n+        self.call_mut(args)\n+    }\n+}\n+\n struct S2 {\n     x: i32,\n     y: i32,\n }\n \n impl Fn<(i32,)> for S2 {\n-    type Output = i32;\n     extern \"rust-call\" fn call(&self, (z,): (i32,)) -> i32 {\n         self.x * self.y * z\n     }\n }\n \n+impl FnMut<(i32,)> for S2 {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (i32,)) -> i32 { self.call(args) }\n+}\n+\n+impl FnOnce<(i32,)> for S2 {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_once(self, args: (i32,)) -> i32 { self.call(args) }\n+}\n+\n struct S3 {\n     x: i32,\n     y: i32,"}, {"sha": "245ff6df6145f045ba64fff219358ec4414cac75", "filename": "src/test/run-pass/overloaded-calls-zero-args.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -18,12 +18,16 @@ struct S {\n }\n \n impl FnMut<()> for S {\n-    type Output = i32;\n     extern \"rust-call\" fn call_mut(&mut self, (): ()) -> i32 {\n         self.x * self.y\n     }\n }\n \n+impl FnOnce<()> for S {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_once(mut self, args: ()) -> i32 { self.call_mut(args) }\n+}\n+\n fn main() {\n     let mut s = S {\n         x: 3,"}, {"sha": "aad190d0236c982c387e2e4487c98bd2b5a4ffea", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -19,12 +19,20 @@ use std::ops::{Fn,FnMut,FnOnce};\n struct S;\n \n impl Fn<(i32,)> for S {\n-    type Output = i32;\n     extern \"rust-call\" fn call(&self, (x,): (i32,)) -> i32 {\n         x * x\n     }\n }\n \n+impl FnMut<(i32,)> for S {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (i32,)) -> i32 { self.call(args) }\n+}\n+\n+impl FnOnce<(i32,)> for S {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_once(self, args: (i32,)) -> i32 { self.call(args) }\n+}\n+\n fn call_it<F:Fn(i32)->i32>(f: &F, x: i32) -> i32 {\n     f(x)\n }"}, {"sha": "94be6406367189847a69bd6ee5593be3b5b5dc4a", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -19,13 +19,17 @@ use std::ops::{FnMut,FnOnce};\n struct S;\n \n impl FnMut<(i32,)> for S {\n-    type Output = i32;\n-\n     extern \"rust-call\" fn call_mut(&mut self, (x,): (i32,)) -> i32 {\n         x * x\n     }\n }\n \n+impl FnOnce<(i32,)> for S {\n+    type Output = i32;\n+\n+    extern \"rust-call\" fn call_once(mut self, args: (i32,)) -> i32 { self.call_mut(args) }\n+}\n+\n fn call_it_mut<F:FnMut(i32)->i32>(f: &mut F, x: i32) -> i32 {\n     f(x)\n }"}, {"sha": "a2ab06049d63d79225908eff37a3c504164756a1", "filename": "src/test/run-pass/unboxed-closures-infer-recursive-fn.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -30,13 +30,20 @@ impl<F,A,R> YCombinator<F,A,R> {\n }\n \n impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> Fn<(A,)> for YCombinator<F,A,R> {\n-    type Output = R;\n-\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> R {\n         (self.func)(self, arg)\n     }\n }\n \n+impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> FnMut<(A,)> for YCombinator<F,A,R> {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (A,)) -> R { self.call(args) }\n+}\n+\n+impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> FnOnce<(A,)> for YCombinator<F,A,R> {\n+    type Output = R;\n+    extern \"rust-call\" fn call_once(self, args: (A,)) -> R { self.call(args) }\n+}\n+\n fn main() {\n     let factorial = |recur: &Fn(u32) -> u32, arg: u32| -> u32 {\n         if arg == 0 {1} else {arg * recur(arg-1)}"}, {"sha": "439ec4af9ebfc49acd66fbf14bf08ea7e9a0a0a8", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9", "patch": "@@ -15,13 +15,17 @@ use std::ops::FnMut;\n struct S;\n \n impl FnMut<(i32,)> for S {\n-    type Output = i32;\n-\n     extern \"rust-call\" fn call_mut(&mut self, (x,): (i32,)) -> i32 {\n         x * x\n     }\n }\n \n+impl FnOnce<(i32,)> for S {\n+    type Output = i32;\n+\n+    extern \"rust-call\" fn call_once(mut self, args: (i32,)) -> i32 { self.call_mut(args) }\n+}\n+\n fn call_it<F:FnMut(i32)->i32>(mut f: F, x: i32) -> i32 {\n     f(x) + 3\n }"}]}