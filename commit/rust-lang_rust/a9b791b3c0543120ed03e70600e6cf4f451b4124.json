{"sha": "a9b791b3c0543120ed03e70600e6cf4f451b4124", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Yjc5MWIzYzA1NDMxMjBlZDAzZTcwNjAwZTZjZjRmNDUxYjQxMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-18T22:19:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-18T22:19:53Z"}, "message": "Auto merge of #55672 - RalfJung:miri-extern-types, r=eddyb\n\nmiri: accept extern types in structs if they are the only field\n\nFixes https://github.com/rust-lang/rust/issues/55541\n\nCc @oli-obk @eddyb https://github.com/rust-lang/rust/issues/43467", "tree": {"sha": "b55a44dde3f1298849e77c43d1f45edccde7ecf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b55a44dde3f1298849e77c43d1f45edccde7ecf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b791b3c0543120ed03e70600e6cf4f451b4124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b791b3c0543120ed03e70600e6cf4f451b4124", "html_url": "https://github.com/rust-lang/rust/commit/a9b791b3c0543120ed03e70600e6cf4f451b4124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b791b3c0543120ed03e70600e6cf4f451b4124/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c9439925797cd7a65c917d047c07a500d9bfe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c9439925797cd7a65c917d047c07a500d9bfe6", "html_url": "https://github.com/rust-lang/rust/commit/13c9439925797cd7a65c917d047c07a500d9bfe6"}, {"sha": "ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "html_url": "https://github.com/rust-lang/rust/commit/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "ca09857bbd5ffe6d0d3cca96418e0aa4ddd5ac74", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9b791b3c0543120ed03e70600e6cf4f451b4124/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b791b3c0543120ed03e70600e6cf4f451b4124/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a9b791b3c0543120ed03e70600e6cf4f451b4124", "patch": "@@ -341,8 +341,21 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 // the last field).  Can't have foreign types here, how would we\n                 // adjust alignment and size for them?\n                 let field = layout.field(self, layout.fields.count() - 1)?;\n-                let (unsized_size, unsized_align) = self.size_and_align_of(metadata, field)?\n-                    .expect(\"Fields cannot be extern types\");\n+                let (unsized_size, unsized_align) = match self.size_and_align_of(metadata, field)? {\n+                    Some(size_and_align) => size_and_align,\n+                    None => {\n+                        // A field with extern type.  If this field is at offset 0, we behave\n+                        // like the underlying extern type.\n+                        // FIXME: Once we have made decisions for how to handle size and alignment\n+                        // of `extern type`, this should be adapted.  It is just a temporary hack\n+                        // to get some code to work that probably ought to work.\n+                        if sized_size == Size::ZERO {\n+                            return Ok(None)\n+                        } else {\n+                            bug!(\"Fields cannot be extern types, unless they are at offset 0\")\n+                        }\n+                    }\n+                };\n \n                 // FIXME (#26403, #27023): We should be adding padding\n                 // to `sized_size` (to accommodate the `unsized_align`"}, {"sha": "fa76eeb2fedd580a99233cd760233f4100bc28c2", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9b791b3c0543120ed03e70600e6cf4f451b4124/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b791b3c0543120ed03e70600e6cf4f451b4124/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a9b791b3c0543120ed03e70600e6cf4f451b4124", "patch": "@@ -351,8 +351,17 @@ where\n         // Offset may need adjustment for unsized fields\n         let (meta, offset) = if field_layout.is_unsized() {\n             // re-use parent metadata to determine dynamic field layout\n-            let (_, align) = self.size_and_align_of(base.meta, field_layout)?\n-                .expect(\"Fields cannot be extern types\");\n+            let align = match self.size_and_align_of(base.meta, field_layout)? {\n+                Some((_, align)) => align,\n+                None if offset == Size::ZERO =>\n+                    // An extern type at offset 0, we fall back to its static alignment.\n+                    // FIXME: Once we have made decisions for how to handle size and alignment\n+                    // of `extern type`, this should be adapted.  It is just a temporary hack\n+                    // to get some code to work that probably ought to work.\n+                    field_layout.align,\n+                None =>\n+                    bug!(\"Cannot compute offset for extern type field at non-0 offset\"),\n+            };\n             (base.meta, offset.abi_align(align))\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized"}, {"sha": "611fb89341de4842fcffe63ece78aaf129d27250", "filename": "src/test/ui/consts/const-eval/issue-55541.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a9b791b3c0543120ed03e70600e6cf4f451b4124/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b791b3c0543120ed03e70600e6cf4f451b4124/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs?ref=a9b791b3c0543120ed03e70600e6cf4f451b4124", "patch": "@@ -0,0 +1,27 @@\n+// compile-pass\n+\n+// Test that we can handle newtypes wrapping extern types\n+\n+#![feature(extern_types, const_transmute)]\n+\n+use std::marker::PhantomData;\n+\n+extern \"C\" {\n+  pub type ExternType;\n+}\n+unsafe impl Sync for ExternType {}\n+static MAGIC_FFI_STATIC: u8 = 42;\n+\n+#[repr(transparent)]\n+pub struct Wrapper(ExternType);\n+pub static MAGIC_FFI_REF: &'static Wrapper = unsafe {\n+  std::mem::transmute(&MAGIC_FFI_STATIC)\n+};\n+\n+#[repr(transparent)]\n+pub struct Wrapper2(PhantomData<Vec<i32>>, ExternType);\n+pub static MAGIC_FFI_REF2: &'static Wrapper2 = unsafe {\n+  std::mem::transmute(&MAGIC_FFI_STATIC)\n+};\n+\n+fn main() {}"}]}