{"sha": "9f7bf0aebebd452481b8727d61c663527172a82f", "node_id": "C_kwDOAAsO6NoAKDlmN2JmMGFlYmViZDQ1MjQ4MWI4NzI3ZDYxYzY2MzUyNzE3MmE4MmY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-09T13:32:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-09T13:32:11Z"}, "message": "Merge #10495\n\n10495: internal: move some mbe tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c6427f74a3164e7909d6f6e08de9a175ab7ba706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6427f74a3164e7909d6f6e08de9a175ab7ba706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f7bf0aebebd452481b8727d61c663527172a82f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYZnbCRBK7hj4Ov3rIwAAKngIAFvPAu/kOEvqEnNFQ3l/yOx2\nsJ5AZ6l/2Jm2QrxpRJx2C9FaJd6WqGF9t5273P4tT3dqEtsxX68HZ+iDg7Phu4G1\njSD+uXzn4Asl4wCeK4pxiiFm5tyTTwrFOEd/rdXDs5O8fnQLgiv1wwR1bZCIY5k1\nN7ZBv8QFbPtffsezYyVHQjfbnNMbOoBbb2B0+78n4y8Uc81LHK4dSIdVClaXry1K\nxBDyIxKx8GVQDylfjqH41y7DIrUX/qBeCk7dpur75lVsNOr73NlYHEd1xdmErzbo\nBWN9JcSBs93KFojHkgm3uyg/tW7cxPrLTIctUvvvk94JwoQiycJtzOVdI6Qrk5E=\n=LW+I\n-----END PGP SIGNATURE-----\n", "payload": "tree c6427f74a3164e7909d6f6e08de9a175ab7ba706\nparent 26f4124b267c513fd930d12f93f8332246bf7651\nparent 959da8caa1a80c64b697863f0d61402ac19cf8ba\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633786331 +0000\ncommitter GitHub <noreply@github.com> 1633786331 +0000\n\nMerge #10495\n\n10495: internal: move some mbe tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7bf0aebebd452481b8727d61c663527172a82f", "html_url": "https://github.com/rust-lang/rust/commit/9f7bf0aebebd452481b8727d61c663527172a82f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f7bf0aebebd452481b8727d61c663527172a82f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f4124b267c513fd930d12f93f8332246bf7651", "url": "https://api.github.com/repos/rust-lang/rust/commits/26f4124b267c513fd930d12f93f8332246bf7651", "html_url": "https://github.com/rust-lang/rust/commit/26f4124b267c513fd930d12f93f8332246bf7651"}, {"sha": "959da8caa1a80c64b697863f0d61402ac19cf8ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/959da8caa1a80c64b697863f0d61402ac19cf8ba", "html_url": "https://github.com/rust-lang/rust/commit/959da8caa1a80c64b697863f0d61402ac19cf8ba"}], "stats": {"total": 254, "additions": 135, "deletions": 119}, "files": [{"sha": "96957471c8358d1d3ace4c3c0d69dd84d70e4662", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=9f7bf0aebebd452481b8727d61c663527172a82f", "patch": "@@ -20,7 +20,7 @@ use stdx::format_to;\n use syntax::{\n     ast::{self, edit::IndentLevel},\n     AstNode,\n-    SyntaxKind::{self, IDENT},\n+    SyntaxKind::{self, IDENT, LIFETIME_IDENT},\n     SyntaxNode, T,\n };\n \n@@ -102,8 +102,9 @@ fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n         let space = match (prev_kind, curr_kind) {\n             _ if prev_kind.is_trivia() || curr_kind.is_trivia() => \"\",\n             (T![=], _) | (_, T![=]) => \" \",\n-            (T![;], _) => \"\\n\",\n-            (IDENT, IDENT) => \" \",\n+            (_, T!['{']) => \" \",\n+            (T![;] | T!['}'], _) => \"\\n\",\n+            (IDENT | LIFETIME_IDENT, IDENT | LIFETIME_IDENT) => \" \",\n             (IDENT, _) if curr_kind.is_keyword() => \" \",\n             (_, IDENT) if prev_kind.is_keyword() => \" \",\n             _ => \"\","}, {"sha": "c57e9cd838ddc422c8ebb3ef039f270f64498ee0", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=9f7bf0aebebd452481b8727d61c663527172a82f", "patch": "@@ -46,3 +46,116 @@ macro_rules! m {\n \"#]],\n     );\n }\n+\n+#[test]\n+fn match_by_first_token_literally() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ i:ident) => ( mod $ i {} );\n+    (= $ i:ident) => ( fn $ i() {} );\n+    (+ $ i:ident) => ( struct $ i; )\n+}\n+m! { foo }\n+m! { = bar }\n+m! { + Baz }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($ i:ident) => ( mod $ i {} );\n+    (= $ i:ident) => ( fn $ i() {} );\n+    (+ $ i:ident) => ( struct $ i; )\n+}\n+mod foo {}\n+fn bar() {}\n+struct Baz;\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn match_by_last_token_literally() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ i:ident) => ( mod $ i {} );\n+    ($ i:ident =) => ( fn $ i() {} );\n+    ($ i:ident +) => ( struct $ i; )\n+}\n+m! { foo }\n+m! { bar = }\n+m! { Baz + }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($ i:ident) => ( mod $ i {} );\n+    ($ i:ident =) => ( fn $ i() {} );\n+    ($ i:ident +) => ( struct $ i; )\n+}\n+mod foo {}\n+fn bar() {}\n+struct Baz;\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn match_by_ident() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ i:ident) => ( mod $ i {} );\n+    (spam $ i:ident) => ( fn $ i() {} );\n+    (eggs $ i:ident) => ( struct $ i; )\n+}\n+m! { foo }\n+m! { spam bar }\n+m! { eggs Baz }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($ i:ident) => ( mod $ i {} );\n+    (spam $ i:ident) => ( fn $ i() {} );\n+    (eggs $ i:ident) => ( struct $ i; )\n+}\n+mod foo {}\n+fn bar() {}\n+struct Baz;\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn match_by_separator_token() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ($ ( mod $ i {} )*);\n+    ($ ($ i:ident)#*) => ($ ( fn $ i() {} )*);\n+    ($ i:ident ,# $ j:ident) => ( struct $ i; struct $ j; )\n+}\n+\n+m! { foo, bar }\n+\n+m! { foo# bar }\n+\n+m! { Foo,# Bar }\n+\"#,\n+        expect![[r##\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ($ ( mod $ i {} )*);\n+    ($ ($ i:ident)#*) => ($ ( fn $ i() {} )*);\n+    ($ i:ident ,# $ j:ident) => ( struct $ i; struct $ j; )\n+}\n+\n+mod foo {}\n+mod bar {}\n+\n+fn foo() {}\n+fn bar() {}\n+\n+struct Foo;\n+struct Bar;\n+\"##]],\n+    );\n+}"}, {"sha": "3450cda3fda205c1b935d122259d5a9e5c522901", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=9f7bf0aebebd452481b8727d61c663527172a82f", "patch": "@@ -63,6 +63,24 @@ fn f() {\n     );\n }\n \n+#[test]\n+fn roundtrip_lifetime() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($t:tt)*) => { $($t)*}\n+}\n+m!(static bar: &'static str = \"hello\";);\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($($t:tt)*) => { $($t)*}\n+}\n+static bar: & 'static str = \"hello\";\n+\"#]],\n+    );\n+}\n+\n #[test]\n fn broken_parenthesis_sequence() {\n     check("}, {"sha": "7becaa6658f2ece043a5cf9b72faaad79ec6b1e7", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7bf0aebebd452481b8727d61c663527172a82f/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=9f7bf0aebebd452481b8727d61c663527172a82f", "patch": "@@ -166,33 +166,6 @@ SUBTREE $\n     );\n }\n \n-#[test]\n-fn test_lifetime_split() {\n-    parse_macro(\n-        r#\"\n-macro_rules! foo {\n-    ($($t:tt)*) => { $($t)*}\n-}\n-\"#,\n-    )\n-    .assert_expand(\n-        r#\"foo!(static bar: &'static str = \"hello\";);\"#,\n-        r#\"\n-SUBTREE $\n-  IDENT   static 17\n-  IDENT   bar 18\n-  PUNCH   : [alone] 19\n-  PUNCH   & [alone] 20\n-  PUNCH   ' [joint] 21\n-  IDENT   static 22\n-  IDENT   str 23\n-  PUNCH   = [alone] 24\n-  LITERAL \"hello\" 25\n-  PUNCH   ; [joint] 26\n-\"#,\n-    );\n-}\n-\n #[test]\n fn test_expr_order() {\n     let expanded = parse_macro(\n@@ -236,95 +209,6 @@ fn test_expr_order() {\n     );\n }\n \n-#[test]\n-fn test_fail_match_pattern_by_first_token() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:ident) => (\n-                mod $ i {}\n-            );\n-            (= $ i:ident) => (\n-                fn $ i() {}\n-            );\n-            (+ $ i:ident) => (\n-                struct $ i;\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo }\", \"mod foo {}\")\n-    .assert_expand_items(\"foo! { = bar }\", \"fn bar () {}\")\n-    .assert_expand_items(\"foo! { + Baz }\", \"struct Baz ;\");\n-}\n-\n-#[test]\n-fn test_fail_match_pattern_by_last_token() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:ident) => (\n-                mod $ i {}\n-            );\n-            ($ i:ident =) => (\n-                fn $ i() {}\n-            );\n-            ($ i:ident +) => (\n-                struct $ i;\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo }\", \"mod foo {}\")\n-    .assert_expand_items(\"foo! { bar = }\", \"fn bar () {}\")\n-    .assert_expand_items(\"foo! { Baz + }\", \"struct Baz ;\");\n-}\n-\n-#[test]\n-fn test_fail_match_pattern_by_word_token() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:ident) => (\n-                mod $ i {}\n-            );\n-            (spam $ i:ident) => (\n-                fn $ i() {}\n-            );\n-            (eggs $ i:ident) => (\n-                struct $ i;\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo }\", \"mod foo {}\")\n-    .assert_expand_items(\"foo! { spam bar }\", \"fn bar () {}\")\n-    .assert_expand_items(\"foo! { eggs Baz }\", \"struct Baz ;\");\n-}\n-\n-#[test]\n-fn test_match_group_pattern_by_separator_token() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident),*) => ($ (\n-                mod $ i {}\n-            )*);\n-            ($ ($ i:ident)#*) => ($ (\n-                fn $ i() {}\n-            )*);\n-            ($ i:ident ,# $ j:ident) => (\n-                struct $ i;\n-                struct $ j;\n-            )\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"mod foo {} mod bar {}\")\n-    .assert_expand_items(\"foo! { foo# bar }\", \"fn foo () {} fn bar () {}\")\n-    .assert_expand_items(\"foo! { Foo,# Bar }\", \"struct Foo ; struct Bar ;\");\n-}\n-\n #[test]\n fn test_match_group_pattern_with_multiple_defs() {\n     parse_macro("}]}