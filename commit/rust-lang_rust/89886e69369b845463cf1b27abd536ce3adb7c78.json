{"sha": "89886e69369b845463cf1b27abd536ce3adb7c78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ODg2ZTY5MzY5Yjg0NTQ2M2NmMWIyN2FiZDUzNmNlM2FkYjdjNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-23T00:41:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-23T00:41:46Z"}, "message": "Auto merge of #80314 - GuillaumeGomez:rollup-9rc48vx, r=GuillaumeGomez\n\nRollup of 17 pull requests\n\nSuccessful merges:\n\n - #80136 (Add test for issue #74824)\n - #80203 (Edit rustc_middle::lint::LintSource docs)\n - #80204 (docs: Edit rustc_middle::ty::query::on_disk_cache)\n - #80219 (Fix labels for 'Library Tracking Issue' template)\n - #80222 (Fix rustc-std-workspace-core documentation)\n - #80223 (docs: Fix outdated crate reference)\n - #80225 (Add module-level docs to rustc_middle::ty)\n - #80241 (Fix typo)\n - #80248 (Remove `I-prioritize` from Zulip topic)\n - #80266 (Remove redundant test)\n - #80272 (rustc_span: Provide a reserved identifier check for a specific edition)\n - #80285 (Update books)\n - #80286 (docs: Edit rustc_middle::middle::privacy)\n - #80297 (Add some intra-doc links to compiler docs)\n - #80298 (Improve the code quality by using matches macro)\n - #80299 (Turn helper method into a closure)\n - #80302 (docs: Update rustc_middle::middle::region::ScopeTree)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a21ee9140c211ebe4413788603728da96513a4b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a21ee9140c211ebe4413788603728da96513a4b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89886e69369b845463cf1b27abd536ce3adb7c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89886e69369b845463cf1b27abd536ce3adb7c78", "html_url": "https://github.com/rust-lang/rust/commit/89886e69369b845463cf1b27abd536ce3adb7c78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89886e69369b845463cf1b27abd536ce3adb7c78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "html_url": "https://github.com/rust-lang/rust/commit/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf"}, {"sha": "67f8244975505a3d6138a12750466a67eae7b968", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f8244975505a3d6138a12750466a67eae7b968", "html_url": "https://github.com/rust-lang/rust/commit/67f8244975505a3d6138a12750466a67eae7b968"}], "stats": {"total": 244, "additions": 160, "deletions": 84}, "files": [{"sha": "3e42594c8280dc50b93fe31713b85194e4d71f1e", "filename": ".github/ISSUE_TEMPLATE/library_tracking_issue.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -2,7 +2,7 @@\n name: Library Tracking Issue\n about: A tracking issue for an unstable library feature.\n title: Tracking Issue for XXX\n-labels: C-tracking-issue T-libs\n+labels: C-tracking-issue, T-libs\n ---\n <!--\n Thank you for creating a tracking issue!"}, {"sha": "6531e68be9cdc30050d1623f21c7e176efe337ba", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -257,7 +257,10 @@ pub struct Substructure<'a> {\n     pub type_ident: Ident,\n     /// ident of the method\n     pub method_ident: Ident,\n-    /// dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments\n+    /// dereferenced access to any [`Self_`] or [`Ptr(Self_, _)][ptr]` arguments\n+    ///\n+    /// [`Self_`]: ty::Ty::Self_\n+    /// [ptr]: ty::Ty::Ptr\n     pub self_args: &'a [P<Expr>],\n     /// verbatim access to any other arguments\n     pub nonself_args: &'a [P<Expr>],"}, {"sha": "28eb1fed6a0ab6ae415bbab188878a0bb7fe8803", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -25,8 +25,9 @@ use std::sync::{Arc, Mutex};\n pub type Result<T> = result::Result<T, ErrorReported>;\n \n /// Represents a compiler session.\n+///\n /// Can be used to run `rustc_interface` queries.\n-/// Created by passing `Config` to `run_compiler`.\n+/// Created by passing [`Config`] to [`run_compiler`].\n pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,"}, {"sha": "3398da024c982f804a7a524e898ac46dea17a5ce", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -95,7 +95,7 @@ declare_box_region_type!(\n /// harness if one is to be provided, injection of a dependency on the\n /// standard library and prelude, and name resolution.\n ///\n-/// Returns `None` if we're aborting after handling -W help.\n+/// Returns [`None`] if we're aborting after handling -W help.\n pub fn configure_and_expand(\n     sess: Lrc<Session>,\n     lint_store: Lrc<LintStore>,"}, {"sha": "6ea0828cea0d9bdda381eefab3ca5eeb1391783b", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -23,7 +23,11 @@ use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n \n /// Represent the result of a query.\n-/// This result can be stolen with the `take` method and generated with the `compute` method.\n+///\n+/// This result can be stolen with the [`take`] method and generated with the [`compute`] method.\n+///\n+/// [`take`]: Self::take\n+/// [`compute`]: Self::compute\n pub struct Query<T> {\n     result: RefCell<Option<Result<T>>>,\n }"}, {"sha": "6ae83a7f667504a70c31e19fd84eb75f1ee87deb", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -8,7 +8,7 @@\n //! - **MIR.** The \"mid-level (M) intermediate representation (IR)\" is\n //!   defined in the `mir` module. This module contains only the\n //!   *definition* of the MIR; the passes that transform and operate\n-//!   on MIR are found in `librustc_mir` crate.\n+//!   on MIR are found in `rustc_mir` crate.\n //! - **Types.** The internal representation of types used in rustc is\n //!   defined in the `ty` module. This includes the **type context**\n //!   (or `tcx`), which is the central context during most of"}, {"sha": "0724d5034078520eb4a8c64c39b12a16703986d6", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -22,8 +22,8 @@ pub enum LintSource {\n     Node(Symbol, Span, Option<Symbol> /* RFC 2383 reason */),\n \n     /// Lint level was set by a command-line flag.\n-    /// The provided `Level` is the level specified on the command line -\n-    /// the actual level may be lower due to `--cap-lints`\n+    /// The provided `Level` is the level specified on the command line.\n+    /// (The actual level may be lower due to `--cap-lints`.)\n     CommandLine(Symbol, Level),\n }\n "}, {"sha": "54188985d7c5f18f56c24980d5f7ed37140d9e7a", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -8,7 +8,9 @@ use rustc_macros::HashStable;\n use std::fmt;\n use std::hash::Hash;\n \n-// Accessibility levels, sorted in ascending order\n+/// Represents the levels of accessibility an item can have.\n+///\n+/// The variants are sorted in ascending order of accessibility.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, HashStable)]\n pub enum AccessLevel {\n     /// Superset of `AccessLevel::Reachable` used to mark impl Trait items.\n@@ -18,13 +20,13 @@ pub enum AccessLevel {\n     /// public, then type `T` is reachable. Its values can be obtained by other crates\n     /// even if the type itself is not nameable.\n     Reachable,\n-    /// Public items + items accessible to other crates with help of `pub use` re-exports\n+    /// Public items + items accessible to other crates with the help of `pub use` re-exports.\n     Exported,\n-    /// Items accessible to other crates directly, without help of re-exports\n+    /// Items accessible to other crates directly, without the help of re-exports.\n     Public,\n }\n \n-// Accessibility levels for reachable HIR nodes\n+/// Holds a map of accessibility levels for reachable HIR nodes.\n #[derive(Clone)]\n pub struct AccessLevels<Id = HirId> {\n     pub map: FxHashMap<Id, AccessLevel>,"}, {"sha": "eb48198991c294dd08cf0864999d31bad36adf80", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -332,7 +332,7 @@ pub struct ScopeTree {\n pub struct YieldData {\n     /// The `Span` of the yield.\n     pub span: Span,\n-    /// The number of expressions and patterns appearing before the `yield` in the body plus one.\n+    /// The number of expressions and patterns appearing before the `yield` in the body, plus one.\n     pub expr_and_pat_count: usize,\n     pub source: hir::YieldSource,\n }\n@@ -449,9 +449,7 @@ impl ScopeTree {\n     }\n \n     /// Checks whether the given scope contains a `yield`. If so,\n-    /// returns `Some((span, expr_count))` with the span of a yield we found and\n-    /// the number of expressions and patterns appearing before the `yield` in the body + 1.\n-    /// If there a are multiple yields in a scope, the one with the highest number is returned.\n+    /// returns `Some(YieldData)`. If not, returns `None`.\n     pub fn yield_in_scope(&self, scope: Scope) -> Option<YieldData> {\n         self.yield_in_scope.get(&scope).cloned()\n     }"}, {"sha": "d9aebfc8293b6ef504f466fe0e038af7f13951b9", "filename": "compiler/rustc_middle/src/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -17,7 +17,7 @@ pub struct DefIdForest {\n     /// If A and B are DefIds in the `DefIdForest`, and A is a descendant\n     /// of B, then only B will be in `root_ids`.\n     /// We use a `SmallVec` here because (for its use for caching inhabitedness)\n-    /// its rare that this will contain even two IDs.\n+    /// it's rare that this will contain even two IDs.\n     root_ids: SmallVec<[DefId; 1]>,\n }\n "}, {"sha": "8395692446d70ee3de608e0cc19ca425ed8ae0fd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -1,3 +1,14 @@\n+//! Defines how the compiler represents types internally.\n+//!\n+//! Two important entities in this module are:\n+//!\n+//! - [`rustc_middle::ty::Ty`], used to represent the semantics of a type.\n+//! - [`rustc_middle::ty::TyCtxt`], the central data structure in the compiler.\n+//!\n+//! For more information, see [\"The `ty` module: representing types\"] in the ructc-dev-guide.\n+//!\n+//! [\"The `ty` module: representing types\"]: https://rustc-dev-guide.rust-lang.org/ty.html\n+\n // ignore-tidy-filelength\n pub use self::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n pub use self::AssocItemContainer::*;"}, {"sha": "8a1165bbd647a296bf8fc19ff2fdb387976e959c", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -666,7 +666,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n //- DECODING -------------------------------------------------------------------\n \n-/// A decoder that can read from the incr. comp. cache. It is similar to the one\n+/// A decoder that can read from the incremental compilation cache. It is similar to the one\n /// we use for crate metadata decoding in that it can rebase spans and eventually\n /// will also handle things that contain `Ty` instances.\n crate struct CacheDecoder<'a, 'tcx> {\n@@ -954,7 +954,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [Span] {\n \n //- ENCODING -------------------------------------------------------------------\n \n-/// An encoder that can write the incr. comp. cache.\n+/// An encoder that can write to the incremental compilation cache.\n struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n     tcx: TyCtxt<'tcx>,\n     encoder: &'a mut E,"}, {"sha": "9fa399a016979db8fb258382b2fb61d884d006f7", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -1572,17 +1572,11 @@ impl RegionKind {\n     }\n \n     pub fn is_late_bound(&self) -> bool {\n-        match *self {\n-            ty::ReLateBound(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, ty::ReLateBound(..))\n     }\n \n     pub fn is_placeholder(&self) -> bool {\n-        match *self {\n-            ty::RePlaceholder(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, ty::RePlaceholder(..))\n     }\n \n     pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {"}, {"sha": "99a523c3f3bb44d1e63deabc220d8abe5330d3dd", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n \n-use crate::{Span, DUMMY_SP, SESSION_GLOBALS};\n+use crate::{Edition, Span, DUMMY_SP, SESSION_GLOBALS};\n \n #[cfg(test)]\n mod tests;\n@@ -1609,12 +1609,32 @@ pub mod sym {\n }\n \n impl Symbol {\n-    fn is_used_keyword_2018(self) -> bool {\n-        self >= kw::Async && self <= kw::Dyn\n+    fn is_special(self) -> bool {\n+        self <= kw::Underscore\n     }\n \n-    fn is_unused_keyword_2018(self) -> bool {\n-        self == kw::Try\n+    fn is_used_keyword_always(self) -> bool {\n+        self >= kw::As && self <= kw::While\n+    }\n+\n+    fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {\n+        (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018\n+    }\n+\n+    fn is_unused_keyword_always(self) -> bool {\n+        self >= kw::Abstract && self <= kw::Yield\n+    }\n+\n+    fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {\n+        self == kw::Try && edition() >= Edition::Edition2018\n+    }\n+\n+    pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {\n+        self.is_special()\n+            || self.is_used_keyword_always()\n+            || self.is_unused_keyword_always()\n+            || self.is_used_keyword_conditional(edition)\n+            || self.is_unused_keyword_conditional(edition)\n     }\n \n     /// A keyword or reserved identifier that can be used as a path segment.\n@@ -1642,26 +1662,27 @@ impl Ident {\n     // Returns `true` for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special(self) -> bool {\n-        self.name <= kw::Underscore\n+        self.name.is_special()\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(self) -> bool {\n         // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n-        self.name >= kw::As && self.name <= kw::While\n-            || self.name.is_used_keyword_2018() && self.span.rust_2018()\n+        self.name.is_used_keyword_always()\n+            || self.name.is_used_keyword_conditional(|| self.span.edition())\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     pub fn is_unused_keyword(self) -> bool {\n         // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n-        self.name >= kw::Abstract && self.name <= kw::Yield\n-            || self.name.is_unused_keyword_2018() && self.span.rust_2018()\n+        self.name.is_unused_keyword_always()\n+            || self.name.is_unused_keyword_conditional(|| self.span.edition())\n     }\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved(self) -> bool {\n-        self.is_special() || self.is_used_keyword() || self.is_unused_keyword()\n+        // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n+        self.name.is_reserved(|| self.span.edition())\n     }\n \n     /// A keyword or reserved identifier that can be used as a path segment.\n@@ -1681,7 +1702,7 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     SESSION_GLOBALS.with(|session_globals| f(&mut *session_globals.symbol_interner.lock()))\n }\n \n-/// An alternative to `Symbol`, useful when the chars within the symbol need to\n+/// An alternative to [`Symbol`], useful when the chars within the symbol need to\n /// be accessed. It deliberately has limited functionality and should only be\n /// used for temporary values.\n ///"}, {"sha": "2728e03171a75df207825ecfa5c56049ae050c87", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -360,10 +360,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn replace_prefix(&self, s: &str, old: &str, new: &str) -> Option<String> {\n-        s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n-    }\n-\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -394,6 +390,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         }\n \n+        let replace_prefix = |s: &str, old: &str, new: &str| {\n+            s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n+        };\n+\n         let is_struct_pat_shorthand_field =\n             self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, sp);\n \n@@ -409,7 +409,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Str, &ty::Array(arr, _) | &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = self.replace_prefix(&src, \"b\\\"\", \"\\\"\") {\n+                            if let Some(src) = replace_prefix(&src, \"b\\\"\", \"\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider removing the leading `b`\",\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = self.replace_prefix(&src, \"\\\"\", \"b\\\"\") {\n+                            if let Some(src) = replace_prefix(&src, \"\\\"\", \"b\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider adding a leading `b`\",\n@@ -583,23 +583,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 hir::Mutability::Mut => {\n                                     let new_prefix = \"&mut \".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => self\n-                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            .map(|s| (s, Applicability::MachineApplicable)),\n-                                        hir::Mutability::Not => self\n-                                            .replace_prefix(&src, \"&\", &new_prefix)\n-                                            .map(|s| (s, Applicability::Unspecified)),\n+                                        hir::Mutability::Mut => {\n+                                            replace_prefix(&src, \"&mut \", &new_prefix)\n+                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                        }\n+                                        hir::Mutability::Not => {\n+                                            replace_prefix(&src, \"&\", &new_prefix)\n+                                                .map(|s| (s, Applicability::Unspecified))\n+                                        }\n                                     }\n                                 }\n                                 hir::Mutability::Not => {\n                                     let new_prefix = \"&\".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => self\n-                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            .map(|s| (s, Applicability::MachineApplicable)),\n-                                        hir::Mutability::Not => self\n-                                            .replace_prefix(&src, \"&\", &new_prefix)\n-                                            .map(|s| (s, Applicability::MachineApplicable)),\n+                                        hir::Mutability::Mut => {\n+                                            replace_prefix(&src, \"&mut \", &new_prefix)\n+                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                        }\n+                                        hir::Mutability::Not => {\n+                                            replace_prefix(&src, \"&\", &new_prefix)\n+                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                        }\n                                     }\n                                 }\n                             } {"}, {"sha": "40e0b62afabfbd34389018132acca990e208f89a", "filename": "library/rustc-std-workspace-core/README.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/library%2Frustc-std-workspace-core%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/library%2Frustc-std-workspace-core%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frustc-std-workspace-core%2FREADME.md?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -4,12 +4,12 @@ This crate is a shim and empty crate which simply depends on `libcore` and\n reexports all of its contents. The crate is the crux of empowering the standard\n library to depend on crates from crates.io\n \n-Crates on crates.io that the standard library depend on the\n-`rustc-std-workspace-core` crate from crates.io. On crates.io, however, this\n-crate is empty. We use `[patch]` to override it to this crate in this\n-repository. As a result, crates on crates.io will draw a dependency edge to\n-`libcore`, the version defined in this repository. That should draw all the\n-dependency edges to ensure Cargo builds crates successfully!\n+Crates on crates.io that the standard library depend on need to depend on the\n+`rustc-std-workspace-core` crate from crates.io, which is empty. We use\n+`[patch]` to override it to this crate in this repository. As a result, crates\n+on crates.io will draw a dependency edge to `libcore`, the version defined in\n+this repository. That should draw all the dependency edges to ensure Cargo\n+builds crates successfully!\n \n Note that crates on crates.io need to depend on this crate with the name `core`\n for everything to work correctly. To do that they can use:"}, {"sha": "5bb44f8b5b0aa105c8b22602e9b18800484afa21", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -1 +1 @@\n-Subproject commit a190438d77d28041f24da4f6592e287fab073a61\n+Subproject commit 5bb44f8b5b0aa105c8b22602e9b18800484afa21"}, {"sha": "a5a48441d411f61556b57d762b03d6874afe575d", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -1 +1 @@\n-Subproject commit d8383b65f7948c2ca19191b3b4bd709b403aaf45\n+Subproject commit a5a48441d411f61556b57d762b03d6874afe575d"}, {"sha": "b278478b766178491a8b6f67afa4bcd6b64d977a", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -1 +1 @@\n-Subproject commit a8afdca5d0715b2257b6f8b9a032fd4dd7dae855\n+Subproject commit b278478b766178491a8b6f67afa4bcd6b64d977a"}, {"sha": "1cce0737d6a7d3ceafb139b4a206861fb1dcb2ab", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -1 +1 @@\n-Subproject commit 236c734a2cb323541b3394f98682cb981b9ec086\n+Subproject commit 1cce0737d6a7d3ceafb139b4a206861fb1dcb2ab"}, {"sha": "21cb7eb9040bdecead088b4b46b3defe7705056c", "filename": "src/test/rustdoc-ui/reference-link-has-one-warning.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs?ref=969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "patch": "@@ -1,6 +0,0 @@\n-// ignore-test\n-// check-pass\n-\n-/// docs [label][with#anchor#error]\n-//~^ WARNING has an issue with the link anchor\n-pub struct S;"}, {"sha": "a1eeb60f1785a56ec8c0081c7a5ccd6c56545844", "filename": "src/test/rustdoc-ui/reference-link-has-one-warning.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr?ref=969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf", "patch": "@@ -1,10 +0,0 @@\n-warning: `[with#anchor#error]` has an issue with the link anchor.\n-  --> $DIR/reference-link-has-one-warning.rs:3:18\n-   |\n-LL | /// docs [label][with#anchor#error]\n-   |                  ^^^^^^^^^^^^^^^^^ only one `#` is allowed in a link\n-   |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "00761a97d00c729eac537bd4872f8aa70ba139fd", "filename": "src/test/ui/generic-associated-types/issue-74824.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -0,0 +1,27 @@\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+#![allow(incomplete_features)]\n+\n+use std::ops::Deref;\n+\n+trait UnsafeCopy {\n+    type Copy<T>: Copy = Box<T>;\n+    //~^ ERROR the trait bound `Box<T>: Copy` is not satisfied\n+    //~^^ ERROR the trait bound `T: Clone` is not satisfied\n+    fn copy<T>(x: &Self::Copy<T>) -> Self::Copy<T> {\n+        *x\n+    }\n+}\n+\n+impl<T> UnsafeCopy for T {}\n+\n+fn main() {\n+    let b = Box::new(42usize);\n+    let copy = <()>::copy(&b);\n+\n+    let raw_b = Box::deref(&b) as *const _;\n+    let raw_copy = Box::deref(&copy) as *const _;\n+\n+    // assert the addresses.\n+    assert_eq!(raw_b, raw_copy);\n+}"}, {"sha": "34a2c1932ebcccff2ef86b2d1c533eda6de463d4", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `Box<T>: Copy` is not satisfied\n+  --> $DIR/issue-74824.rs:8:5\n+   |\n+LL |     type Copy<T>: Copy = Box<T>;\n+   |     ^^^^^^^^^^^^^^----^^^^^^^^^^\n+   |     |             |\n+   |     |             required by this bound in `UnsafeCopy::Copy`\n+   |     the trait `Copy` is not implemented for `Box<T>`\n+\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n+  --> $DIR/issue-74824.rs:8:5\n+   |\n+LL |     type Copy<T>: Copy = Box<T>;\n+   |     ^^^^^^^^^^^^^^----^^^^^^^^^^\n+   |     |             |\n+   |     |             required by this bound in `UnsafeCopy::Copy`\n+   |     the trait `Clone` is not implemented for `T`\n+   |\n+   = note: required because of the requirements on the impl of `Clone` for `Box<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL |     type Copy<T: Clone>: Copy = Box<T>;\n+   |                ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c0cf50e516700b1d86aff94d8c6d0b3fc90ba51c", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89886e69369b845463cf1b27abd536ce3adb7c78/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/89886e69369b845463cf1b27abd536ce3adb7c78/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=89886e69369b845463cf1b27abd536ce3adb7c78", "patch": "@@ -90,7 +90,7 @@ exclude_labels = [\n \n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n-topic = \"I-prioritize #{number} {title}\"\n+topic = \"#{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* issue #{number} has been requested for prioritization.\n "}]}