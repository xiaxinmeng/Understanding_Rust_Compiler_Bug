{"sha": "4e69d377aa24cefbd40a9d0ad12137ad4cceec29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNjlkMzc3YWEyNGNlZmJkNDBhOWQwYWQxMjEzN2FkNGNjZWVjMjk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-26T20:36:36Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-26T20:47:26Z"}, "message": "Remove unused MIR visitor methods", "tree": {"sha": "e96ac0eea76bd15ee59e0ea69f752fa279c11b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e96ac0eea76bd15ee59e0ea69f752fa279c11b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e69d377aa24cefbd40a9d0ad12137ad4cceec29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e69d377aa24cefbd40a9d0ad12137ad4cceec29", "html_url": "https://github.com/rust-lang/rust/commit/4e69d377aa24cefbd40a9d0ad12137ad4cceec29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e69d377aa24cefbd40a9d0ad12137ad4cceec29/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "url": "https://api.github.com/repos/rust-lang/rust/commits/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320", "html_url": "https://github.com/rust-lang/rust/commit/22226fa7fba8af083593b3dd8ce1bc1ac5bf1320"}], "stats": {"total": 98, "additions": 22, "deletions": 76}, "files": [{"sha": "72c26f547631dc81e5f56311b87b2c00fc2cbacb", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 22, "deletions": 76, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4e69d377aa24cefbd40a9d0ad12137ad4cceec29/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e69d377aa24cefbd40a9d0ad12137ad4cceec29/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4e69d377aa24cefbd40a9d0ad12137ad4cceec29", "patch": "@@ -1,4 +1,3 @@\n-use crate::hir::def_id::DefId;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Ty};\n use crate::mir::*;\n@@ -165,24 +164,12 @@ macro_rules! make_mir_visitor {\n                 self.super_projection_elem(place, location);\n             }\n \n-            fn visit_branch(&mut self,\n-                            source: BasicBlock,\n-                            target: BasicBlock) {\n-                self.super_branch(source, target);\n-            }\n-\n             fn visit_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n                               location: Location) {\n                 self.super_constant(constant, location);\n             }\n \n-            fn visit_def_id(&mut self,\n-                            def_id: & $($mutability)? DefId,\n-                            _: Location) {\n-                self.super_def_id(def_id);\n-            }\n-\n             fn visit_span(&mut self,\n                           span: & $($mutability)? Span) {\n                 self.super_span(span);\n@@ -433,120 +420,92 @@ macro_rules! make_mir_visitor {\n             fn super_terminator_kind(&mut self,\n                                      kind: & $($mutability)? TerminatorKind<'tcx>,\n                                      source_location: Location) {\n-                let block = source_location.block;\n                 match kind {\n-                    TerminatorKind::Goto { target } => {\n-                        self.visit_branch(block, *target);\n+                    TerminatorKind::Goto { .. } |\n+                    TerminatorKind::Resume |\n+                    TerminatorKind::Abort |\n+                    TerminatorKind::Return |\n+                    TerminatorKind::GeneratorDrop |\n+                    TerminatorKind::Unreachable |\n+                    TerminatorKind::FalseEdges { .. } |\n+                    TerminatorKind::FalseUnwind { .. } => {\n                     }\n \n                     TerminatorKind::SwitchInt {\n                         discr,\n                         switch_ty,\n                         values: _,\n-                        targets\n+                        targets: _\n                     } => {\n                         self.visit_operand(discr, source_location);\n                         self.visit_ty(switch_ty, TyContext::Location(source_location));\n-                        for target in targets {\n-                            self.visit_branch(block, *target);\n-                        }\n-                    }\n-\n-                    TerminatorKind::Resume |\n-                    TerminatorKind::Abort |\n-                    TerminatorKind::Return |\n-                    TerminatorKind::GeneratorDrop |\n-                    TerminatorKind::Unreachable => {\n                     }\n \n                     TerminatorKind::Drop {\n                         location,\n-                        target,\n-                        unwind,\n+                        target: _,\n+                        unwind: _,\n                     } => {\n                         self.visit_place(\n                             location,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n                             source_location\n                         );\n-                        self.visit_branch(block, *target);\n-                        unwind.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::DropAndReplace {\n                         location,\n                         value,\n-                        target,\n-                        unwind,\n+                        target: _,\n+                        unwind: _,\n                     } => {\n                         self.visit_place(\n                             location,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n                             source_location\n                         );\n                         self.visit_operand(value, source_location);\n-                        self.visit_branch(block, *target);\n-                        unwind.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::Call {\n                         func,\n                         args,\n                         destination,\n-                        cleanup,\n+                        cleanup: _,\n                         from_hir_call: _,\n                     } => {\n                         self.visit_operand(func, source_location);\n                         for arg in args {\n                             self.visit_operand(arg, source_location);\n                         }\n-                        if let Some((destination, target)) = destination {\n+                        if let Some((destination, _)) = destination {\n                             self.visit_place(\n                                 destination,\n                                 PlaceContext::MutatingUse(MutatingUseContext::Call),\n                                 source_location\n                             );\n-                            self.visit_branch(block, *target);\n                         }\n-                        cleanup.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::Assert {\n                         cond,\n                         expected: _,\n                         msg,\n-                        target,\n-                        cleanup,\n+                        target: _,\n+                        cleanup: _,\n                     } => {\n                         self.visit_operand(cond, source_location);\n                         self.visit_assert_message(msg, source_location);\n-                        self.visit_branch(block, *target);\n-                        cleanup.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::Yield {\n                         value,\n-                        resume,\n-                        drop,\n+                        resume: _,\n+                        drop: _,\n                     } => {\n                         self.visit_operand(value, source_location);\n-                        self.visit_branch(block, *resume);\n-                        drop.map(|t| self.visit_branch(block, t));\n                     }\n \n-                    TerminatorKind::FalseEdges { real_target, imaginary_targets } => {\n-                        self.visit_branch(block, *real_target);\n-                        for target in imaginary_targets {\n-                            self.visit_branch(block, *target);\n-                        }\n-                    }\n-\n-                    TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                        self.visit_branch(block, *real_target);\n-                        if let Some(unwind) = unwind {\n-                            self.visit_branch(block, *unwind);\n-                        }\n-                    }\n                 }\n             }\n \n@@ -643,18 +602,16 @@ macro_rules! make_mir_visitor {\n                                 self.visit_substs(substs, location);\n                             }\n                             AggregateKind::Closure(\n-                                def_id,\n+                                _,\n                                 closure_substs\n                             ) => {\n-                                self.visit_def_id(def_id, location);\n                                 self.visit_closure_substs(closure_substs, location);\n                             }\n                             AggregateKind::Generator(\n-                                def_id,\n+                                _,\n                                 generator_substs,\n                                 _movability,\n                             ) => {\n-                                self.visit_def_id(def_id, location);\n                                 self.visit_generator_substs(generator_substs, location);\n                             }\n                         }\n@@ -722,10 +679,7 @@ macro_rules! make_mir_visitor {\n                     Place::Base(PlaceBase::Local(local)) => {\n                         self.visit_local(local, context, location);\n                     }\n-                    Place::Base(PlaceBase::Static(box Static { kind, ty })) => {\n-                        if let StaticKind::Static(def_id) = kind {\n-                            self.visit_def_id(& $($mutability)? *def_id, location)\n-                        }\n+                    Place::Base(PlaceBase::Static(box Static { kind: _, ty })) => {\n                         self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n                     }\n                     Place::Projection(proj) => {\n@@ -805,11 +759,6 @@ macro_rules! make_mir_visitor {\n                                       _scope: & $($mutability)? SourceScope) {\n             }\n \n-            fn super_branch(&mut self,\n-                            _source: BasicBlock,\n-                            _target: BasicBlock) {\n-            }\n-\n             fn super_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n                               location: Location) {\n@@ -826,9 +775,6 @@ macro_rules! make_mir_visitor {\n                 self.visit_const(literal, location);\n             }\n \n-            fn super_def_id(&mut self, _def_id: & $($mutability)? DefId) {\n-            }\n-\n             fn super_span(&mut self, _span: & $($mutability)? Span) {\n             }\n "}]}