{"sha": "416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f", "node_id": "C_kwDOAAsO6NoAKDQxNmQ2MDBhOWFkMzFkN2Y3OTBiMWYwYjFlZjk2OWZhYTFiZjJiNGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-07T20:44:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-07T20:44:39Z"}, "message": "Rollup merge of #96671 - mgeisler:current-exe-docstring, r=Mark-Simulacrum\n\nRemove hard links from `env::current_exe` security example\n\nThe security example shows that `env::current_exe` will return the path used when the program was started. This is not really surprising considering how hard links work: after `ln foo bar`, the two files are _equivalent_. It is _not_ the case that `bar` is a \u201clink\u201d to `foo`, nor is `foo` a link to `bar`. They are simply two names for the same underlying data.\n\nThe security vulnerability linked to seems to be different: there an attacker would start a SUID binary from a directory under the control of the attacker. The binary would respawn itself by executing the program found at `/proc/self/exe` (which the attacker can control). This is a real problem. In my opinion, the example given here doesn\u2019t really show the same problem, it just shows a misunderstanding of what hard links are.\n\nI looked through the history a bit and found that the example was introduced in https://github.com/rust-lang/rust/pull/33526. That PR actually has two commits, and the first (https://github.com/rust-lang/rust/commit/8478d48dad949b3b1374569a5391089a49094eeb) explains the race condition at the root of the linked security vulnerability. The second commit proceeds to replace the explanation with the example we have today.\n\nThis commit reverts most of the second commit from https://github.com/rust-lang/rust/pull/33526.", "tree": {"sha": "309627834f520523c550c47506cba668d199141b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/309627834f520523c550c47506cba668d199141b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidto3CRBK7hj4Ov3rIwAAoQkIACdhmwtSh7yL9ZKTnusw8j0G\nwFJ75fyoUoXoBP34UCklEo/yHNo4+NkGNcoDxIUq8lPynJ201TTioWA4TImzBR8Y\ntV9eZst0aHgkl3bjhtXh9yhbmQZr34uwx2jb+8qVVjscR3nuRIAE+CJvenFfQm6i\nymA9509YQYStrpoKnvJO2ji1TaaAODKpMHdBcdK4lDq9lGv+ibRosXghTMHo/GQR\n1+nbz+FygINizdDbWfVnhVX8v/DYxXfsG65/2NTEHNWyLr+p4EkUMhbysCqCZcjI\n1OGrj950+i3OsyubdhYC+6XfsQnN3D0rKDmNOS94E9Ule8C4N0sApmlYmj2/8zw=\n=8hvS\n-----END PGP SIGNATURE-----\n", "payload": "tree 309627834f520523c550c47506cba668d199141b\nparent f995b67a4cbc32fd256dc5f26b76ab1944aa5880\nparent 9a1dc2a0a2cff86d26563222f6c44e14bd5beea6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1651956279 +0200\ncommitter GitHub <noreply@github.com> 1651956279 +0200\n\nRollup merge of #96671 - mgeisler:current-exe-docstring, r=Mark-Simulacrum\n\nRemove hard links from `env::current_exe` security example\n\nThe security example shows that `env::current_exe` will return the path used when the program was started. This is not really surprising considering how hard links work: after `ln foo bar`, the two files are _equivalent_. It is _not_ the case that `bar` is a \u201clink\u201d to `foo`, nor is `foo` a link to `bar`. They are simply two names for the same underlying data.\n\nThe security vulnerability linked to seems to be different: there an attacker would start a SUID binary from a directory under the control of the attacker. The binary would respawn itself by executing the program found at `/proc/self/exe` (which the attacker can control). This is a real problem. In my opinion, the example given here doesn\u2019t really show the same problem, it just shows a misunderstanding of what hard links are.\n\nI looked through the history a bit and found that the example was introduced in https://github.com/rust-lang/rust/pull/33526. That PR actually has two commits, and the first (https://github.com/rust-lang/rust/commit/8478d48dad949b3b1374569a5391089a49094eeb) explains the race condition at the root of the linked security vulnerability. The second commit proceeds to replace the explanation with the example we have today.\n\nThis commit reverts most of the second commit from https://github.com/rust-lang/rust/pull/33526.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f", "html_url": "https://github.com/rust-lang/rust/commit/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f995b67a4cbc32fd256dc5f26b76ab1944aa5880", "url": "https://api.github.com/repos/rust-lang/rust/commits/f995b67a4cbc32fd256dc5f26b76ab1944aa5880", "html_url": "https://github.com/rust-lang/rust/commit/f995b67a4cbc32fd256dc5f26b76ab1944aa5880"}, {"sha": "9a1dc2a0a2cff86d26563222f6c44e14bd5beea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1dc2a0a2cff86d26563222f6c44e14bd5beea6", "html_url": "https://github.com/rust-lang/rust/commit/9a1dc2a0a2cff86d26563222f6c44e14bd5beea6"}], "stats": {"total": 47, "additions": 17, "deletions": 30}, "files": [{"sha": "e287a93da7b03ed837fd3cc7c09dbd5b6432dfdf", "filename": "library/std/src/env.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f", "patch": "@@ -644,36 +644,23 @@ pub fn temp_dir() -> PathBuf {\n ///\n /// # Security\n ///\n-/// The output of this function should not be used in anything that might have\n-/// security implications. For example:\n-///\n-/// ```\n-/// fn main() {\n-///     println!(\"{:?}\", std::env::current_exe());\n-/// }\n-/// ```\n-///\n-/// On Linux systems, if this is compiled as `foo`:\n-///\n-/// ```bash\n-/// $ rustc foo.rs\n-/// $ ./foo\n-/// Ok(\"/home/alex/foo\")\n-/// ```\n-///\n-/// And you make a hard link of the program:\n-///\n-/// ```bash\n-/// $ ln foo bar\n-/// ```\n-///\n-/// When you run it, you won\u2019t get the path of the original executable, you\u2019ll\n-/// get the path of the hard link:\n-///\n-/// ```bash\n-/// $ ./bar\n-/// Ok(\"/home/alex/bar\")\n-/// ```\n+/// The output of this function should not be trusted for anything\n+/// that might have security implications. Basically, if users can run\n+/// the executable, they can change the output arbitrarily.\n+///\n+/// As an example, you can easily introduce a race condition. It goes\n+/// like this:\n+///\n+/// 1. You get the path to the current executable using `current_exe()`, and\n+///    store it in a variable.\n+/// 2. Time passes. A malicious actor removes the current executable, and\n+///    replaces it with a malicious one.\n+/// 3. You then use the stored path to re-execute the current\n+///    executable.\n+///\n+/// You expected to safely execute the current executable, but you're\n+/// instead executing something completely different. The code you\n+/// just executed run with your privileges.\n ///\n /// This sort of behavior has been known to [lead to privilege escalation] when\n /// used incorrectly."}]}