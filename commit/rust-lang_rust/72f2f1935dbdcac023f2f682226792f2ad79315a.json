{"sha": "72f2f1935dbdcac023f2f682226792f2ad79315a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZjJmMTkzNWRiZGNhYzAyM2YyZjY4MjIyNjc5MmYyYWQ3OTMxNWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2018-06-04T05:28:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-04T05:28:56Z"}, "message": "Merge branch 'master' into stabilise/termination-test", "tree": {"sha": "fe325dfcda1636171bf779081f30c6e1e7163e9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe325dfcda1636171bf779081f30c6e1e7163e9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f2f1935dbdcac023f2f682226792f2ad79315a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbFM4YCRBK7hj4Ov3rIwAAdHIIAAfPD+OiunS/mdhxvJKfpvSK\ndp5F128CVuNNeMl1CRT/UnMjXRxRaHXAN0rT4zpuWpUL3WZc6bCRn98RUx9Mgm6w\n6otSbZFqvsW1dT4w/L0jLZFl4APw4Np4wW4uMwChG0nQq0vCsksnGZ3CFwYQYKs8\nFpteE8GX3WQ13B3U5w72U1znyUfoCJq9Dkd2NcDY2NWz9/IItc/Y7kxg41KqQWlu\nfn8qOfzM2Pz6C1OFM9oqTqQ2LGDL79KvGv5ulwlvmA+rzAZrhmpVobyEPxlD/HER\nrcAlyGCs8rYJEtgKRPrxnJhl6ClUEE80rL6RiPBKzkfDyFRFUBmsFbn0rKTM8yw=\n=2J7S\n-----END PGP SIGNATURE-----\n", "payload": "tree fe325dfcda1636171bf779081f30c6e1e7163e9e\nparent bc7416213c20e165ebe723c4328667e8008c0794\nparent 6232478d26b0feca02fd6660edbf78a5c6327ec5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1528090136 +0530\ncommitter GitHub <noreply@github.com> 1528090136 +0530\n\nMerge branch 'master' into stabilise/termination-test"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f2f1935dbdcac023f2f682226792f2ad79315a", "html_url": "https://github.com/rust-lang/rust/commit/72f2f1935dbdcac023f2f682226792f2ad79315a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f2f1935dbdcac023f2f682226792f2ad79315a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc7416213c20e165ebe723c4328667e8008c0794", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7416213c20e165ebe723c4328667e8008c0794", "html_url": "https://github.com/rust-lang/rust/commit/bc7416213c20e165ebe723c4328667e8008c0794"}, {"sha": "6232478d26b0feca02fd6660edbf78a5c6327ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6232478d26b0feca02fd6660edbf78a5c6327ec5", "html_url": "https://github.com/rust-lang/rust/commit/6232478d26b0feca02fd6660edbf78a5c6327ec5"}], "stats": {"total": 2720, "additions": 2164, "deletions": 556}, "files": [{"sha": "5054a8f44b971174adef42ff8a281fbfd857fc26", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -279,6 +279,9 @@\n # Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n #backtrace = true\n \n+# Whether to always use incremental compilation when building rustc\n+#incremental = false\n+\n # Build rustc with experimental parallelization\n #experimental-parallel-queries = false\n "}, {"sha": "4607ca5cf9f48e72b32672d424f97c48399c2e6c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -268,6 +268,15 @@ fn main() {\n         if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n         }\n+\n+        if let Ok(s) = env::var(\"RUSTC_HOST_CRT_STATIC\") {\n+            if s == \"true\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n+            }\n+            if s == \"false\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=-crt-static\");\n+            }\n+        }\n     }\n \n     if env::var_os(\"RUSTC_PARALLEL_QUERIES\").is_some() {"}, {"sha": "28f5192f2cdf455d9e6730f64ce324ab679a8af5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -489,7 +489,7 @@ def bin_root(self):\n         \"\"\"\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n-    def get_toml(self, key):\n+    def get_toml(self, key, section=None):\n         \"\"\"Returns the value of the given key in config.toml, otherwise returns None\n \n         >>> rb = RustBuild()\n@@ -501,12 +501,29 @@ def get_toml(self, key):\n \n         >>> rb.get_toml(\"key3\") is None\n         True\n+\n+        Optionally also matches the section the key appears in\n+\n+        >>> rb.config_toml = '[a]\\\\nkey = \"value1\"\\\\n[b]\\\\nkey = \"value2\"'\n+        >>> rb.get_toml('key', 'a')\n+        'value1'\n+        >>> rb.get_toml('key', 'b')\n+        'value2'\n+        >>> rb.get_toml('key', 'c') is None\n+        True\n         \"\"\"\n+\n+        cur_section = None\n         for line in self.config_toml.splitlines():\n+            section_match = re.match(r'^\\s*\\[(.*)\\]\\s*$', line)\n+            if section_match is not None:\n+                cur_section = section_match.group(1)\n+\n             match = re.match(r'^{}\\s*=(.*)$'.format(key), line)\n             if match is not None:\n                 value = match.group(1)\n-                return self.get_string(value) or value.strip()\n+                if section is None or section == cur_section:\n+                    return self.get_string(value) or value.strip()\n         return None\n \n     def cargo(self):\n@@ -589,7 +606,17 @@ def build_bootstrap(self):\n         env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n-        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2\"\n+        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2 \"\n+\n+        build_section = \"target.{}\".format(self.build_triple())\n+        target_features = []\n+        if self.get_toml(\"crt-static\", build_section) == \"true\":\n+            target_features += [\"+crt-static\"]\n+        elif self.get_toml(\"crt-static\", build_section) == \"false\":\n+            target_features += [\"-crt-static\"]\n+        if target_features:\n+            env[\"RUSTFLAGS\"] += \"-C target-feature=\" + (\",\".join(target_features)) + \" \"\n+\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):"}, {"sha": "9300b94156acbdd729483d275c8175a09b84da12", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -698,9 +698,14 @@ impl<'a> Builder<'a> {\n         let out_dir = self.stage_out(compiler, mode);\n         cargo\n             .env(\"CARGO_TARGET_DIR\", out_dir)\n-            .arg(cmd)\n-            .arg(\"--target\")\n-            .arg(target);\n+            .arg(cmd);\n+\n+        if cmd != \"install\" {\n+            cargo.arg(\"--target\")\n+                 .arg(target);\n+        } else {\n+            assert_eq!(target, compiler.host);\n+        }\n \n         // Set a flag for `check` so that certain build scripts can do less work\n         // (e.g. not building/requiring LLVM).\n@@ -801,7 +806,7 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n-        if mode == Mode::Tool {\n+        if mode.is_tool() {\n             // Tools like cargo and rls don't get debuginfo by default right now, but this can be\n             // enabled in the config.  Adding debuginfo makes them several times larger.\n             if self.config.rust_debuginfo_tools {\n@@ -842,6 +847,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_CRT_STATIC\", x.to_string());\n         }\n \n+        if let Some(x) = self.crt_static(compiler.host) {\n+            cargo.env(\"RUSTC_HOST_CRT_STATIC\", x.to_string());\n+        }\n+\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);\n@@ -862,7 +871,7 @@ impl<'a> Builder<'a> {\n         //\n         // If LLVM support is disabled we need to use the snapshot compiler to compile\n         // build scripts, as the new compiler doesn't support executables.\n-        if mode == Mode::Libstd || !self.config.llvm_enabled {\n+        if mode == Mode::Std || !self.config.llvm_enabled {\n             cargo\n                 .env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n@@ -894,7 +903,7 @@ impl<'a> Builder<'a> {\n         cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", self.verbosity));\n \n         // in std, we want to avoid denying warnings for stage 0 as that makes cfg's painful.\n-        if self.config.deny_warnings && !(mode == Mode::Libstd && stage == 0) {\n+        if self.config.deny_warnings && !(mode == Mode::Std && stage == 0) {\n             cargo.env(\"RUSTC_DENY_WARNINGS\", \"1\");\n         }\n \n@@ -954,7 +963,7 @@ impl<'a> Builder<'a> {\n         }\n \n         if cmd == \"build\"\n-            && mode == Mode::Libstd\n+            && mode == Mode::Std\n             && self.config.extended\n             && compiler.is_final_stage(self)\n         {\n@@ -1003,7 +1012,7 @@ impl<'a> Builder<'a> {\n         // be resolved because MinGW has the import library. The downside is we\n         // don't get newer functions from Windows, but we don't use any of them\n         // anyway.\n-        if mode != Mode::Tool {\n+        if !mode.is_tool() {\n             cargo.env(\"WINAPI_NO_BUNDLED_LIBRARIES\", \"1\");\n         }\n \n@@ -1018,8 +1027,8 @@ impl<'a> Builder<'a> {\n         }\n \n         if self.config.rust_optimize {\n-            // FIXME: cargo bench does not accept `--release`\n-            if cmd != \"bench\" {\n+            // FIXME: cargo bench/install do not accept `--release`\n+            if cmd != \"bench\" && cmd != \"install\" {\n                 cargo.arg(\"--release\");\n             }\n         }\n@@ -1742,7 +1751,7 @@ mod __test {\n             &[test::Crate {\n                 compiler: Compiler { host, stage: 0 },\n                 target: host,\n-                mode: Mode::Libstd,\n+                mode: Mode::Std,\n                 test_kind: test::TestKind::Test,\n                 krate: INTERNER.intern_str(\"std\"),\n             },]"}, {"sha": "b3ccb3cc3c926ca29dc823aed9a212e32ac4aec7", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -40,10 +40,10 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n \n-        let out_dir = builder.stage_out(compiler, Mode::Libstd);\n+        let out_dir = builder.stage_out(compiler, Mode::Std);\n         builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"check\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n@@ -87,11 +87,11 @@ impl Step for Rustc {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let stage_out = builder.stage_out(compiler, Mode::Librustc);\n+        let stage_out = builder.stage_out(compiler, Mode::Rustc);\n         builder.clear_if_dirty(&stage_out, &libstd_stamp(builder, compiler, target));\n         builder.clear_if_dirty(&stage_out, &libtest_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"check\");\n         rustc_cargo(builder, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n@@ -137,7 +137,7 @@ impl Step for CodegenBackend {\n         let target = self.target;\n         let backend = self.backend;\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"check\");\n         let features = builder.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\").arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n@@ -175,10 +175,10 @@ impl Step for Test {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let out_dir = builder.stage_out(compiler, Mode::Libtest);\n+        let out_dir = builder.stage_out(compiler, Mode::Test);\n         builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"check\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n@@ -219,6 +219,7 @@ impl Step for Rustdoc {\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            compiler,\n+                                           Mode::ToolRustc,\n                                            target,\n                                            \"check\",\n                                            \"src/tools/rustdoc\");\n@@ -236,27 +237,27 @@ impl Step for Rustdoc {\n         builder.ensure(tool::CleanTools {\n             compiler,\n             target,\n-            mode: Mode::Tool,\n+            cause: Mode::Rustc,\n         });\n     }\n }\n \n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libstd, target).join(\".libstd-check.stamp\")\n+    builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check.stamp\")\n }\n \n /// Cargo's output path for libtest in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn libtest_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libtest, target).join(\".libtest-check.stamp\")\n+    builder.cargo_out(compiler, Mode::Test, target).join(\".libtest-check.stamp\")\n }\n \n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn librustc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target).join(\".librustc-check.stamp\")\n+    builder.cargo_out(compiler, Mode::Rustc, target).join(\".librustc-check.stamp\")\n }\n \n /// Cargo's output path for librustc_codegen_llvm in a given stage, compiled by a particular\n@@ -265,12 +266,12 @@ fn codegen_backend_stamp(builder: &Builder,\n                          compiler: Compiler,\n                          target: Interned<String>,\n                          backend: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target)\n+    builder.cargo_out(compiler, Mode::Codegen, target)\n          .join(format!(\".librustc_codegen_llvm-{}-check.stamp\", backend))\n }\n \n /// Cargo's output path for rustdoc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn rustdoc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Tool, target).join(\".rustdoc-check.stamp\")\n+    builder.cargo_out(compiler, Mode::ToolRustc, target).join(\".rustdoc-check.stamp\")\n }"}, {"sha": "11d9154ba696c9db0965165ce2dfc4bec5d475c8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -98,9 +98,9 @@ impl Step for Std {\n             copy_musl_third_party_objects(builder, target, &libdir);\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Libstd, target);\n+        let out_dir = builder.cargo_out(compiler, Mode::Std, target);\n         builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n-        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n@@ -240,7 +240,7 @@ impl Step for StdLink {\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n             target,\n-            mode: Mode::Libstd,\n+            cause: Mode::Std,\n         });\n     }\n }\n@@ -368,9 +368,9 @@ impl Step for Test {\n             return;\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Libtest, target);\n+        let out_dir = builder.cargo_out(compiler, Mode::Test, target);\n         builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n-        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"build\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n@@ -431,7 +431,7 @@ impl Step for TestLink {\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n             target,\n-            mode: Mode::Libtest,\n+            cause: Mode::Test,\n         });\n     }\n }\n@@ -489,11 +489,11 @@ impl Step for Rustc {\n             compiler: builder.compiler(self.compiler.stage, builder.config.build),\n             target: builder.config.build,\n         });\n-        let cargo_out = builder.cargo_out(compiler, Mode::Librustc, target);\n+        let cargo_out = builder.cargo_out(compiler, Mode::Rustc, target);\n         builder.clear_if_dirty(&cargo_out, &libstd_stamp(builder, compiler, target));\n         builder.clear_if_dirty(&cargo_out, &libtest_stamp(builder, compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n         rustc_cargo(builder, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n@@ -585,7 +585,7 @@ impl Step for RustcLink {\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n             target,\n-            mode: Mode::Librustc,\n+            cause: Mode::Rustc,\n         });\n     }\n }\n@@ -634,15 +634,15 @@ impl Step for CodegenBackend {\n             return;\n         }\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n         let mut features = builder.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n         features += &build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n-        let tmp_stamp = builder.cargo_out(compiler, Mode::Librustc, target)\n+        let tmp_stamp = builder.cargo_out(compiler, Mode::Codegen, target)\n             .join(\".tmp.stamp\");\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n@@ -793,19 +793,19 @@ fn copy_lld_to_sysroot(builder: &Builder,\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libstd, target).join(\".libstd.stamp\")\n+    builder.cargo_out(compiler, Mode::Std, target).join(\".libstd.stamp\")\n }\n \n /// Cargo's output path for libtest in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn libtest_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Libtest, target).join(\".libtest.stamp\")\n+    builder.cargo_out(compiler, Mode::Test, target).join(\".libtest.stamp\")\n }\n \n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn librustc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target).join(\".librustc.stamp\")\n+    builder.cargo_out(compiler, Mode::Rustc, target).join(\".librustc.stamp\")\n }\n \n /// Cargo's output path for librustc_codegen_llvm in a given stage, compiled by a particular\n@@ -814,7 +814,7 @@ fn codegen_backend_stamp(builder: &Builder,\n                          compiler: Compiler,\n                          target: Interned<String>,\n                          backend: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Librustc, target)\n+    builder.cargo_out(compiler, Mode::Codegen, target)\n         .join(format!(\".librustc_codegen_llvm-{}.stamp\", backend))\n }\n \n@@ -971,7 +971,7 @@ impl Step for Assemble {\n         }\n \n         // Link the compiler binary itself into place\n-        let out_dir = builder.cargo_out(build_compiler, Mode::Librustc, host);\n+        let out_dir = builder.cargo_out(build_compiler, Mode::Rustc, host);\n         let rustc = out_dir.join(exe(\"rustc_binary\", &*host));\n         let bindir = sysroot.join(\"bin\");\n         t!(fs::create_dir_all(&bindir));"}, {"sha": "47feb8a8ab66d51c30733139b79f1fa2c53baf35", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -303,6 +303,7 @@ struct Rust {\n     dist_src: Option<bool>,\n     quiet_tests: Option<bool>,\n     test_miri: Option<bool>,\n+    incremental: Option<bool>,\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n     codegen_backends_dir: Option<String>,\n@@ -529,6 +530,10 @@ impl Config {\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.quiet_tests, rust.quiet_tests);\n             set(&mut config.test_miri, rust.test_miri);\n+            // in the case \"false\" is set explicitly, do not overwrite the command line args\n+            if let Some(true) = rust.incremental {\n+                config.incremental = true;\n+            }\n             set(&mut config.wasm_syscall, rust.wasm_syscall);\n             set(&mut config.lld_enabled, rust.lld);\n             config.rustc_parallel_queries = rust.experimental_parallel_queries.unwrap_or(false);"}, {"sha": "7341137e20d721101ac286ad00da1d844d51a607", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -722,7 +722,7 @@ impl Step for Analysis {\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n \n-        let src = builder.stage_out(compiler, Mode::Libstd)\n+        let src = builder.stage_out(compiler, Mode::Std)\n             .join(target).join(builder.cargo_dir()).join(\"deps\");\n \n         let image_src = src.join(\"save-analysis\");\n@@ -951,13 +951,16 @@ impl Step for PlainSourceTarball {\n                 has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n             }\n             if !has_cargo_vendor {\n-                let mut cmd = Command::new(&builder.initial_cargo);\n-                cmd.arg(\"install\")\n-                   .arg(\"--force\")\n+                let mut cmd = builder.cargo(\n+                    builder.compiler(0, builder.config.build),\n+                    Mode::ToolRustc,\n+                    builder.config.build,\n+                    \"install\"\n+                );\n+                cmd.arg(\"--force\")\n                    .arg(\"--debug\")\n                    .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n-                   .arg(\"cargo-vendor\")\n-                   .env(\"RUSTC\", &builder.initial_rustc);\n+                   .arg(\"cargo-vendor\");\n                 if let Some(dir) = builder.openssl_install_dir(builder.config.build) {\n                     builder.ensure(native::Openssl {\n                         target: builder.config.build,"}, {"sha": "19599b33ebe261d942156450ea2e4f2e2e1b3448", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -463,7 +463,7 @@ impl Step for Std {\n         };\n \n         builder.ensure(compile::Std { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Libstd)\n+        let out_dir = builder.stage_out(compiler, Mode::Std)\n                            .join(target).join(\"doc\");\n \n         // Here what we're doing is creating a *symlink* (directory junction on\n@@ -483,7 +483,7 @@ impl Step for Std {\n         builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"doc\");\n         compile::std_cargo(builder, &compiler, target, &mut cargo);\n \n         // Keep a whitelist so we do not build internal stdlib crates, these will be\n@@ -546,15 +546,15 @@ impl Step for Test {\n         builder.ensure(Std { stage, target });\n \n         builder.ensure(compile::Test { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Libtest)\n+        let out_dir = builder.stage_out(compiler, Mode::Test)\n                            .join(target).join(\"doc\");\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n         builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"doc\");\n         compile::test_cargo(builder, &compiler, target, &mut cargo);\n \n         cargo.arg(\"--no-deps\").arg(\"-p\").arg(\"test\");\n@@ -614,15 +614,15 @@ impl Step for WhitelistedRustc {\n         builder.ensure(Std { stage, target });\n \n         builder.ensure(compile::Rustc { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Librustc)\n+        let out_dir = builder.stage_out(compiler, Mode::Rustc)\n                            .join(target).join(\"doc\");\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n         builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n         compile::rustc_cargo(builder, &mut cargo);\n \n         // We don't want to build docs for internal compiler dependencies in this\n@@ -698,12 +698,12 @@ impl Step for Rustc {\n \n         // We do not symlink to the same shared folder that already contains std library\n         // documentation from previous steps as we do not want to include that.\n-        let out_dir = builder.stage_out(compiler, Mode::Librustc).join(target).join(\"doc\");\n+        let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target).join(\"doc\");\n         builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         compile::rustc_cargo(builder, &mut cargo);\n \n@@ -799,13 +799,15 @@ impl Step for Rustdoc {\n         builder.ensure(tool::Rustdoc { host: compiler.host });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n-        let out_dir = builder.stage_out(compiler, Mode::Tool).join(target).join(\"doc\");\n+        let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target).join(\"doc\");\n         t!(fs::create_dir_all(&out_dir));\n         builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n-        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"doc\", \"src/tools/rustdoc\");\n+        let mut cargo = prepare_tool_cargo(\n+            builder, compiler, Mode::ToolRustc, target, \"doc\", \"src/tools/rustdoc\");\n+\n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         builder.run(&mut cargo);\n     }"}, {"sha": "d16d7a520659b6313fd077dae3b80326a9c6c196", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -307,16 +307,30 @@ impl Crate {\n #[derive(Debug, Hash, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub enum Mode {\n     /// Build the standard library, placing output in the \"stageN-std\" directory.\n-    Libstd,\n+    Std,\n \n     /// Build libtest, placing output in the \"stageN-test\" directory.\n-    Libtest,\n+    Test,\n \n-    /// Build librustc and compiler libraries, placing output in the \"stageN-rustc\" directory.\n-    Librustc,\n+    /// Build librustc, and compiler libraries, placing output in the \"stageN-rustc\" directory.\n+    Rustc,\n \n-    /// Build some tool, placing output in the \"stageN-tools\" directory.\n-    Tool,\n+    /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n+    Codegen,\n+\n+    /// Build some tools, placing output in the \"stageN-tools\" directory.\n+    ToolStd,\n+    ToolTest,\n+    ToolRustc,\n+}\n+\n+impl Mode {\n+    pub fn is_tool(&self) -> bool {\n+        match self {\n+            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => true,\n+            _ => false\n+        }\n+    }\n }\n \n impl Build {\n@@ -517,10 +531,11 @@ impl Build {\n     /// The mode indicates what the root directory is for.\n     fn stage_out(&self, compiler: Compiler, mode: Mode) -> PathBuf {\n         let suffix = match mode {\n-            Mode::Libstd => \"-std\",\n-            Mode::Libtest => \"-test\",\n-            Mode::Tool => \"-tools\",\n-            Mode::Librustc => \"-rustc\",\n+            Mode::Std => \"-std\",\n+            Mode::Test => \"-test\",\n+            Mode::Codegen => \"-rustc\",\n+            Mode::Rustc => \"-rustc\",\n+            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => \"-tools\",\n         };\n         self.out.join(&*compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))"}, {"sha": "a0b6222421d71a78b83cde71bec69deafc80257c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -222,7 +222,7 @@ impl Step for Cargo {\n             compiler,\n             target: self.host,\n         });\n-        let mut cargo = builder.cargo(compiler, Mode::Tool, self.host, \"test\");\n+        let mut cargo = builder.cargo(compiler, Mode::ToolRustc, self.host, \"test\");\n         cargo\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/tools/cargo/Cargo.toml\"));\n@@ -281,7 +281,12 @@ impl Step for Rls {\n             return;\n         }\n \n-        let mut cargo = tool::prepare_tool_cargo(builder, compiler, host, \"test\", \"src/tools/rls\");\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/rls\");\n \n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -331,8 +336,12 @@ impl Step for Rustfmt {\n             return;\n         }\n \n-        let mut cargo =\n-            tool::prepare_tool_cargo(builder, compiler, host, \"test\", \"src/tools/rustfmt\");\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/rustfmt\");\n \n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -383,7 +392,7 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let Some(miri) = miri {\n-            let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n             cargo\n                 .arg(\"--manifest-path\")\n                 .arg(builder.src.join(\"src/tools/miri/Cargo.toml\"));\n@@ -441,7 +450,7 @@ impl Step for Clippy {\n             extra_features: Vec::new(),\n         });\n         if let Some(clippy) = clippy {\n-            let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n             cargo\n                 .arg(\"--manifest-path\")\n                 .arg(builder.src.join(\"src/tools/clippy/Cargo.toml\"));\n@@ -453,7 +462,7 @@ impl Step for Clippy {\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             let host_libs = builder\n-                .stage_out(compiler, Mode::Tool)\n+                .stage_out(compiler, Mode::ToolRustc)\n                 .join(builder.cargo_dir());\n             cargo.env(\"HOST_LIBS\", host_libs);\n             // clippy tests need to find the driver\n@@ -952,8 +961,7 @@ impl Step for Compiletest {\n         if suite.ends_with(\"fulldeps\") ||\n             // FIXME: Does pretty need librustc compiled? Note that there are\n             // fulldeps test suites with mode = pretty as well.\n-            mode == \"pretty\" ||\n-            mode == \"rustdoc\"\n+            mode == \"pretty\"\n         {\n             builder.ensure(compile::Rustc { compiler, target });\n         }\n@@ -1435,7 +1443,7 @@ impl Step for CrateLibrustc {\n         builder.ensure(Crate {\n             compiler: self.compiler,\n             target: self.target,\n-            mode: Mode::Librustc,\n+            mode: Mode::Rustc,\n             test_kind: self.test_kind,\n             krate: self.krate,\n         });\n@@ -1486,7 +1494,7 @@ impl Step for CrateNotDefault {\n         builder.ensure(Crate {\n             compiler: self.compiler,\n             target: self.target,\n-            mode: Mode::Libstd,\n+            mode: Mode::Std,\n             test_kind: self.test_kind,\n             krate: INTERNER.intern_str(self.krate),\n         });\n@@ -1539,12 +1547,12 @@ impl Step for Crate {\n \n         for krate in builder.in_tree_crates(\"std\") {\n             if run.path.ends_with(&krate.local_path(&builder)) {\n-                make(Mode::Libstd, krate);\n+                make(Mode::Std, krate);\n             }\n         }\n         for krate in builder.in_tree_crates(\"test\") {\n             if run.path.ends_with(&krate.local_path(&builder)) {\n-                make(Mode::Libtest, krate);\n+                make(Mode::Test, krate);\n             }\n         }\n     }\n@@ -1579,13 +1587,13 @@ impl Step for Crate {\n \n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {\n-            Mode::Libstd => {\n+            Mode::Std => {\n                 compile::std_cargo(builder, &compiler, target, &mut cargo);\n             }\n-            Mode::Libtest => {\n+            Mode::Test => {\n                 compile::test_cargo(builder, &compiler, target, &mut cargo);\n             }\n-            Mode::Librustc => {\n+            Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });\n                 compile::rustc_cargo(builder, &mut cargo);\n             }\n@@ -1719,13 +1727,12 @@ impl Step for CrateRustdoc {\n         let compiler = builder.compiler(builder.top_stage, self.host);\n         let target = compiler.host;\n \n-        let mut cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            target,\n-            test_kind.subcommand(),\n-            \"src/tools/rustdoc\",\n-        );\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 target,\n+                                                 test_kind.subcommand(),\n+                                                 \"src/tools/rustdoc\");\n         if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }"}, {"sha": "d4a2e96cc0d3f7c2bb28f8890d2e825cbc1e4270", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -28,7 +28,7 @@ use toolstate::ToolState;\n pub struct CleanTools {\n     pub compiler: Compiler,\n     pub target: Interned<String>,\n-    pub mode: Mode,\n+    pub cause: Mode,\n }\n \n impl Step for CleanTools {\n@@ -41,23 +41,23 @@ impl Step for CleanTools {\n     fn run(self, builder: &Builder) {\n         let compiler = self.compiler;\n         let target = self.target;\n-        let mode = self.mode;\n+        let cause = self.cause;\n \n         // This is for the original compiler, but if we're forced to use stage 1, then\n         // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n         // we copy the libs forward.\n-        let tools_dir = builder.stage_out(compiler, Mode::Tool);\n+        let tools_dir = builder.stage_out(compiler, Mode::ToolRustc);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n             compiler\n         };\n \n-        for &cur_mode in &[Mode::Libstd, Mode::Libtest, Mode::Librustc] {\n+        for &cur_mode in &[Mode::Std, Mode::Test, Mode::Rustc] {\n             let stamp = match cur_mode {\n-                Mode::Libstd => libstd_stamp(builder, compiler, target),\n-                Mode::Libtest => libtest_stamp(builder, compiler, target),\n-                Mode::Librustc => librustc_stamp(builder, compiler, target),\n+                Mode::Std => libstd_stamp(builder, compiler, target),\n+                Mode::Test => libtest_stamp(builder, compiler, target),\n+                Mode::Rustc => librustc_stamp(builder, compiler, target),\n                 _ => panic!(),\n             };\n \n@@ -67,7 +67,7 @@ impl Step for CleanTools {\n \n             // If we are a rustc tool, and std changed, we also need to clear ourselves out -- our\n             // dependencies depend on std. Therefore, we iterate up until our own mode.\n-            if mode == cur_mode {\n+            if cause == cur_mode {\n                 break;\n             }\n         }\n@@ -104,13 +104,13 @@ impl Step for ToolBuild {\n         let is_ext_tool = self.is_ext_tool;\n \n         match self.mode {\n-            Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n-            Mode::Libtest => builder.ensure(compile::Test { compiler, target }),\n-            Mode::Librustc => builder.ensure(compile::Rustc { compiler, target }),\n-            Mode::Tool => panic!(\"unexpected Mode::Tool for tool build\")\n+            Mode::ToolStd => builder.ensure(compile::Std { compiler, target }),\n+            Mode::ToolTest => builder.ensure(compile::Test { compiler, target }),\n+            Mode::ToolRustc => builder.ensure(compile::Rustc { compiler, target }),\n+            _ => panic!(\"unexpected Mode for tool build\")\n         }\n \n-        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n+        let mut cargo = prepare_tool_cargo(builder, compiler, self.mode, target, \"build\", path);\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n@@ -202,7 +202,7 @@ impl Step for ToolBuild {\n                 return None;\n             }\n         } else {\n-            let cargo_out = builder.cargo_out(compiler, Mode::Tool, target)\n+            let cargo_out = builder.cargo_out(compiler, self.mode, target)\n                 .join(exe(tool, &compiler.host));\n             let bin = builder.tools_dir(compiler).join(exe(tool, &compiler.host));\n             builder.copy(&cargo_out, &bin);\n@@ -214,11 +214,12 @@ impl Step for ToolBuild {\n pub fn prepare_tool_cargo(\n     builder: &Builder,\n     compiler: Compiler,\n+    mode: Mode,\n     target: Interned<String>,\n     command: &'static str,\n     path: &'static str,\n ) -> Command {\n-    let mut cargo = builder.cargo(compiler, Mode::Tool, target, command);\n+    let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n@@ -261,6 +262,15 @@ macro_rules! tool {\n             )+\n         }\n \n+        impl Tool {\n+            pub fn get_mode(&self) -> Mode {\n+                let mode = match self {\n+                    $(Tool::$name => $mode,)+\n+                };\n+                mode\n+            }\n+        }\n+\n         impl<'a> Builder<'a> {\n             pub fn tool_exe(&self, tool: Tool) -> PathBuf {\n                 let stage = self.tool_default_stage(tool);\n@@ -324,17 +334,17 @@ macro_rules! tool {\n }\n \n tool!(\n-    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::Librustc;\n-    ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::Librustc;\n-    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::Libstd;\n-    Tidy, \"src/tools/tidy\", \"tidy\", Mode::Libstd;\n-    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::Libstd;\n-    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::Libstd;\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::Libtest;\n-    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Libstd;\n-    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::Libstd;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::Libstd;\n-    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::Libstd;\n+    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::ToolRustc;\n+    ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::ToolRustc;\n+    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolStd;\n+    Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolStd;\n+    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolStd;\n+    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolStd;\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolTest;\n+    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolStd;\n+    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolStd;\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolStd;\n+    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolStd;\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -362,7 +372,7 @@ impl Step for RemoteTestServer {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"remote-test-server\",\n-            mode: Mode::Libstd,\n+            mode: Mode::ToolStd,\n             path: \"src/tools/remote-test-server\",\n             is_ext_tool: false,\n             extra_features: Vec::new(),\n@@ -414,6 +424,7 @@ impl Step for Rustdoc {\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            build_compiler,\n+                                           Mode::ToolRustc,\n                                            target,\n                                            \"build\",\n                                            \"src/tools/rustdoc\");\n@@ -430,7 +441,7 @@ impl Step for Rustdoc {\n         // Cargo adds a number of paths to the dylib search path on windows, which results in\n         // the wrong rustdoc being executed. To avoid the conflicting rustdocs, we name the \"tool\"\n         // rustdoc a different name.\n-        let tool_rustdoc = builder.cargo_out(build_compiler, Mode::Tool, target)\n+        let tool_rustdoc = builder.cargo_out(build_compiler, Mode::ToolRustc, target)\n             .join(exe(\"rustdoc_tool_binary\", &target_compiler.host));\n \n         // don't create a stage0-sysroot/bin directory.\n@@ -485,7 +496,7 @@ impl Step for Cargo {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"cargo\",\n-            mode: Mode::Librustc,\n+            mode: Mode::ToolRustc,\n             path: \"src/tools/cargo\",\n             is_ext_tool: false,\n             extra_features: Vec::new(),\n@@ -533,7 +544,7 @@ macro_rules! tool_extended {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n                     tool: $tool_name,\n-                    mode: Mode::Librustc,\n+                    mode: Mode::ToolRustc,\n                     path: $path,\n                     extra_features: $sel.extra_features,\n                     is_ext_tool: true,\n@@ -575,19 +586,19 @@ impl<'a> Builder<'a> {\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n         let compiler = self.compiler(self.tool_default_stage(tool), self.config.build);\n-        self.prepare_tool_cmd(compiler, &mut cmd);\n+        self.prepare_tool_cmd(compiler, tool.get_mode(), &mut cmd);\n         cmd\n     }\n \n     /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n     ///\n     /// Notably this munges the dynamic library lookup path to point to the\n     /// right location to run `compiler`.\n-    fn prepare_tool_cmd(&self, compiler: Compiler, cmd: &mut Command) {\n+    fn prepare_tool_cmd(&self, compiler: Compiler, mode: Mode, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n             PathBuf::from(&self.sysroot_libdir(compiler, compiler.host)),\n-            self.cargo_out(compiler, Mode::Tool, *host).join(\"deps\"),\n+            self.cargo_out(compiler, mode, *host).join(\"deps\"),\n         ];\n \n         // On MSVC a tool may invoke a C compiler (e.g. compiletest in run-make"}, {"sha": "bac619fd4a30d2c17e50d45415d55d1ef42600d6", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -19,6 +19,7 @@ sugar for dynamic allocations via `malloc` and `free`:\n #![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n #![no_std]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n extern crate libc;\n \n@@ -50,7 +51,7 @@ fn main(_argc: isize, _argv: *const *const u8) -> isize {\n }\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n+#[lang = \"panic_impl\"] extern fn rust_begin_panic(info: &PanicInfo) -> ! { unsafe { intrinsics::abort() } }\n #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n #[no_mangle] pub extern fn rust_eh_register_frames () {}\n #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n@@ -110,6 +111,7 @@ in the same format as C:\n #![feature(start)]\n #![no_std]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -134,12 +136,9 @@ pub extern fn rust_eh_personality() {\n pub extern fn rust_eh_unwind_resume() {\n }\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n #[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32,\n-                               _column: u32) -> ! {\n+pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n     unsafe { intrinsics::abort() }\n }\n ```\n@@ -155,6 +154,7 @@ compiler's name mangling too:\n #![no_std]\n #![no_main]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -179,12 +179,9 @@ pub extern fn rust_eh_personality() {\n pub extern fn rust_eh_unwind_resume() {\n }\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n #[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32,\n-                               _column: u32) -> ! {\n+pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n     unsafe { intrinsics::abort() }\n }\n ```\n@@ -215,7 +212,7 @@ called. The language item's name is `eh_personality`.\n \n The second function, `rust_begin_panic`, is also used by the failure mechanisms of the\n compiler. When a panic happens, this controls the message that's displayed on\n-the screen. While the language item's name is `panic_fmt`, the symbol name is\n+the screen. While the language item's name is `panic_impl`, the symbol name is\n `rust_begin_panic`.\n \n A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_resume`\n@@ -259,8 +256,8 @@ the source code.\n   - `msvc_try_filter`: `libpanic_unwind/seh.rs` (SEH)\n   - `panic`: `libcore/panicking.rs`\n   - `panic_bounds_check`: `libcore/panicking.rs`\n-  - `panic_fmt`: `libcore/panicking.rs`\n-  - `panic_fmt`: `libstd/panicking.rs`\n+  - `panic_impl`: `libcore/panicking.rs`\n+  - `panic_impl`: `libstd/panicking.rs`\n - Allocations\n   - `owned_box`: `liballoc/boxed.rs`\n   - `exchange_malloc`: `liballoc/heap.rs`"}, {"sha": "c3b7f2e41e15b27b265f37fcc75e53801538ef8c", "filename": "src/doc/unstable-book/src/language-features/used.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -87,11 +87,13 @@ This condition can be met using `#[used]` and `#[link_section]` plus a linker\n script.\n \n ``` rust,ignore\n-#![feature(lang_items)]\n+#![feature(panic_implementation)]\n #![feature(used)]\n #![no_main]\n #![no_std]\n \n+use core::panic::PanicInfo;\n+\n extern \"C\" fn reset_handler() -> ! {\n     loop {}\n }\n@@ -100,8 +102,10 @@ extern \"C\" fn reset_handler() -> ! {\n #[used]\n static RESET_HANDLER: extern \"C\" fn() -> ! = reset_handler;\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() {}\n+#[panic_implementation]\n+fn panic_impl(info: &PanicInfo) -> ! {\n+    loop {}\n+}\n ```\n \n ``` text"}, {"sha": "9b6f91c039feaa471360c47a83fa452d2cd95694", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -2369,6 +2369,11 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n \n     /// Gets a mutable reference to the value in the entry.\n     ///\n+    /// If you need a reference to the `OccupiedEntry` which may outlive the\n+    /// destruction of the `Entry` value, see [`into_mut`].\n+    ///\n+    /// [`into_mut`]: #method.into_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2380,9 +2385,13 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// assert_eq!(map[\"poneyland\"], 12);\n     /// if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n-    ///      *o.get_mut() += 10;\n+    ///     *o.get_mut() += 10;\n+    ///     assert_eq!(*o.get(), 22);\n+    ///\n+    ///     // We can use the same Entry multiple times.\n+    ///     *o.get_mut() += 2;\n     /// }\n-    /// assert_eq!(map[\"poneyland\"], 22);\n+    /// assert_eq!(map[\"poneyland\"], 24);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {\n@@ -2391,6 +2400,10 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n \n     /// Converts the entry into a mutable reference to its value.\n     ///\n+    /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n+    ///\n+    /// [`get_mut`]: #method.get_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "a56420d52d0d5528afb8f6ed09fd761f66bdce8a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -104,7 +104,6 @@\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]\n-#![feature(slice_get_slice)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]"}, {"sha": "c27c596e7975a33463042261b9ec17d33aa7990c", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -121,7 +121,7 @@ pub use core::slice::{RSplit, RSplitMut};\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub use core::slice::{from_ref, from_mut};\n-#[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n+#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;\n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n pub use core::slice::{ExactChunks, ExactChunksMut};"}, {"sha": "75306ac82dfd5df1e0131ec2315580af534265e0", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1326,6 +1326,7 @@ fn test_str_default() {\n \n     t::<&str>();\n     t::<String>();\n+    t::<&mut str>();\n }\n \n #[test]"}, {"sha": "229758803c87071e1d4497b6a69c0f50113e496f", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -20,6 +20,7 @@ use fmt;\n use mem;\n use usize;\n use ptr::{self, NonNull};\n+use num::NonZeroUsize;\n \n extern {\n     /// An opaque, unsized type. Used for pointers to allocated memory.\n@@ -66,7 +67,7 @@ fn size_align<T>() -> (usize, usize) {\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct Layout {\n     // size of the requested block of memory, measured in bytes.\n-    size: usize,\n+    size_: usize,\n \n     // alignment of the requested block of memory, measured in bytes.\n     // we ensure that this is always a power-of-two, because API's\n@@ -75,17 +76,12 @@ pub struct Layout {\n     //\n     // (However, we do not analogously require `align >= sizeof(void*)`,\n     //  even though that is *also* a requirement of `posix_memalign`.)\n-    align: usize,\n+    align_: NonZeroUsize,\n }\n \n-\n-// FIXME: audit default implementations for overflow errors,\n-// (potentially switching to overflowing_add and\n-//  overflowing_mul as necessary).\n-\n impl Layout {\n     /// Constructs a `Layout` from a given `size` and `align`,\n-    /// or returns `None` if either of the following conditions\n+    /// or returns `LayoutErr` if either of the following conditions\n     /// are not met:\n     ///\n     /// * `align` must be a power of two,\n@@ -126,23 +122,23 @@ impl Layout {\n     ///\n     /// # Safety\n     ///\n-    /// This function is unsafe as it does not verify that `align` is\n-    /// a power-of-two nor `size` aligned to `align` fits within the\n-    /// address space (i.e. the `Layout::from_size_align` preconditions).\n+    /// This function is unsafe as it does not verify the preconditions from\n+    /// [`Layout::from_size_align`](#method.from_size_align).\n     #[inline]\n     pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n-        Layout { size: size, align: align }\n+        Layout { size_: size, align_: NonZeroUsize::new_unchecked(align) }\n     }\n \n     /// The minimum size in bytes for a memory block of this layout.\n     #[inline]\n-    pub fn size(&self) -> usize { self.size }\n+    pub fn size(&self) -> usize { self.size_ }\n \n     /// The minimum byte alignment for a memory block of this layout.\n     #[inline]\n-    pub fn align(&self) -> usize { self.align }\n+    pub fn align(&self) -> usize { self.align_.get() }\n \n     /// Constructs a `Layout` suitable for holding a value of type `T`.\n+    #[inline]\n     pub fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();\n         // Note that the align is guaranteed by rustc to be a power of two and\n@@ -158,6 +154,7 @@ impl Layout {\n     /// Produces layout describing a record that could be used to\n     /// allocate backing structure for `T` (which could be a trait\n     /// or other unsized type like a slice).\n+    #[inline]\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n         // See rationale in `new` for why this us using an unsafe variant below\n@@ -181,18 +178,19 @@ impl Layout {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the combination of `self.size` and the given `align`\n-    /// violates the conditions listed in `from_size_align`.\n+    /// Panics if the combination of `self.size()` and the given `align`\n+    /// violates the conditions listed in\n+    /// [`Layout::from_size_align`](#method.from_size_align).\n     #[inline]\n     pub fn align_to(&self, align: usize) -> Self {\n-        Layout::from_size_align(self.size, cmp::max(self.align, align)).unwrap()\n+        Layout::from_size_align(self.size(), cmp::max(self.align(), align)).unwrap()\n     }\n \n     /// Returns the amount of padding we must insert after `self`\n     /// to ensure that the following address will satisfy `align`\n     /// (measured in bytes).\n     ///\n-    /// E.g. if `self.size` is 9, then `self.padding_needed_for(4)`\n+    /// E.g. if `self.size()` is 9, then `self.padding_needed_for(4)`\n     /// returns 3, because that is the minimum number of bytes of\n     /// padding required to get a 4-aligned address (assuming that the\n     /// corresponding memory block starts at a 4-aligned address).\n@@ -203,7 +201,7 @@ impl Layout {\n     /// Note that the utility of the returned value requires `align`\n     /// to be less than or equal to the alignment of the starting\n     /// address for the whole allocated block of memory. One way to\n-    /// satisfy this constraint is to ensure `align <= self.align`.\n+    /// satisfy this constraint is to ensure `align <= self.align()`.\n     #[inline]\n     pub fn padding_needed_for(&self, align: usize) -> usize {\n         let len = self.size();\n@@ -227,7 +225,8 @@ impl Layout {\n         // size and padding overflow in the above manner should cause\n         // the allocator to yield an error anyway.)\n \n-        let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);\n+        let len_rounded_up = len.wrapping_add(align).wrapping_sub(1)\n+            & !align.wrapping_sub(1);\n         return len_rounded_up.wrapping_sub(len);\n     }\n \n@@ -238,14 +237,19 @@ impl Layout {\n     /// layout of the array and `offs` is the distance between the start\n     /// of each element in the array.\n     ///\n-    /// On arithmetic overflow, returns `None`.\n+    /// On arithmetic overflow, returns `LayoutErr`.\n     #[inline]\n     pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutErr> {\n-        let padded_size = self.size.checked_add(self.padding_needed_for(self.align))\n+        let padded_size = self.size().checked_add(self.padding_needed_for(self.align()))\n             .ok_or(LayoutErr { private: () })?;\n         let alloc_size = padded_size.checked_mul(n)\n             .ok_or(LayoutErr { private: () })?;\n-        Ok((Layout::from_size_align(alloc_size, self.align)?, padded_size))\n+\n+        unsafe {\n+            // self.align is already known to be valid and alloc_size has been\n+            // padded already.\n+            Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size))\n+        }\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -258,16 +262,15 @@ impl Layout {\n     /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n-    /// On arithmetic overflow, returns `None`.\n+    /// On arithmetic overflow, returns `LayoutErr`.\n+    #[inline]\n     pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n-        let new_align = cmp::max(self.align, next.align);\n-        let realigned = Layout::from_size_align(self.size, new_align)?;\n-\n-        let pad = realigned.padding_needed_for(next.align);\n+        let new_align = cmp::max(self.align(), next.align());\n+        let pad = self.padding_needed_for(next.align());\n \n-        let offset = self.size.checked_add(pad)\n+        let offset = self.size().checked_add(pad)\n             .ok_or(LayoutErr { private: () })?;\n-        let new_size = offset.checked_add(next.size)\n+        let new_size = offset.checked_add(next.size())\n             .ok_or(LayoutErr { private: () })?;\n \n         let layout = Layout::from_size_align(new_size, new_align)?;\n@@ -285,10 +288,11 @@ impl Layout {\n     /// guaranteed that all elements in the array will be properly\n     /// aligned.\n     ///\n-    /// On arithmetic overflow, returns `None`.\n+    /// On arithmetic overflow, returns `LayoutErr`.\n+    #[inline]\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutErr> {\n         let size = self.size().checked_mul(n).ok_or(LayoutErr { private: () })?;\n-        Layout::from_size_align(size, self.align)\n+        Layout::from_size_align(size, self.align())\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -305,17 +309,19 @@ impl Layout {\n     ///  signature out of convenience in matching the signature of\n     ///  `extend`.)\n     ///\n-    /// On arithmetic overflow, returns `None`.\n+    /// On arithmetic overflow, returns `LayoutErr`.\n+    #[inline]\n     pub fn extend_packed(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n         let new_size = self.size().checked_add(next.size())\n             .ok_or(LayoutErr { private: () })?;\n-        let layout = Layout::from_size_align(new_size, self.align)?;\n+        let layout = Layout::from_size_align(new_size, self.align())?;\n         Ok((layout, self.size()))\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n     ///\n-    /// On arithmetic overflow, returns `None`.\n+    /// On arithmetic overflow, returns `LayoutErr`.\n+    #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {\n         Layout::new::<T>()\n             .repeat(n)\n@@ -842,7 +848,7 @@ pub unsafe trait Alloc {\n                             layout: Layout,\n                             new_size: usize) -> Result<(), CannotReallocInPlace> {\n         let _ = ptr; // this default implementation doesn't care about the actual address.\n-        debug_assert!(new_size >= layout.size);\n+        debug_assert!(new_size >= layout.size());\n         let (_l, u) = self.usable_size(&layout);\n         // _l <= layout.size()                       [guaranteed by usable_size()]\n         //       layout.size() <= new_layout.size()  [required by this method]\n@@ -897,7 +903,7 @@ pub unsafe trait Alloc {\n                               layout: Layout,\n                               new_size: usize) -> Result<(), CannotReallocInPlace> {\n         let _ = ptr; // this default implementation doesn't care about the actual address.\n-        debug_assert!(new_size <= layout.size);\n+        debug_assert!(new_size <= layout.size());\n         let (l, _u) = self.usable_size(&layout);\n         //                      layout.size() <= _u  [guaranteed by usable_size()]\n         // new_layout.size() <= layout.size()        [required by this method]"}, {"sha": "b27552651a08743cc7e8d12aea8c530d038bec4c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -41,7 +41,7 @@\n //!   dictate the panic message, the file at which panic was invoked, and the\n //!   line and column inside the file. It is up to consumers of this core\n //!   library to define this panic function; it is only required to never\n-//!   return. This requires a `lang` attribute named `panic_fmt`.\n+//!   return. This requires a `lang` attribute named `panic_impl`.\n //!\n //! * `rust_eh_personality` - is used by the failure mechanisms of the\n //!    compiler. This is often mapped to GCC's personality function, but crates\n@@ -81,6 +81,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n+#![feature(const_int_ops)]\n #![feature(core_float)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]"}, {"sha": "9fed49903455c25f180ba63dff5f8e048bcb7d0a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -635,8 +635,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n-/// Replaces the value at a mutable location with a new one, returning the old value, without\n-/// deinitializing either one.\n+/// Moves `src` into the referenced `dest`, returning the previous `dest` value.\n+///\n+/// Neither value is dropped.\n ///\n /// # Examples\n ///"}, {"sha": "577c823f9a060d8009f856a58bb4dee11a144b3f", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -31,7 +31,11 @@ pub const MANTISSA_DIGITS: u32 = 24;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = 6;\n \n-/// Difference between `1.0` and the next largest representable number.\n+/// [Machine epsilon] value for `f32`.\n+///\n+/// This is the difference between `1.0` and the next largest representable number.\n+///\n+/// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f32 = 1.19209290e-07_f32;\n "}, {"sha": "b8e3dd6ed646cb8e90ef36e1552646be11efd18c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -31,7 +31,11 @@ pub const MANTISSA_DIGITS: u32 = 53;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = 15;\n \n-/// Difference between `1.0` and the next largest representable number.\n+/// [Machine epsilon] value for `f64`.\n+///\n+/// This is the difference between `1.0` and the next largest representable number.\n+///\n+/// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n "}, {"sha": "26dd08b10b9b8778cb64b810a33022589eef60d9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 280, "deletions": 14, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -267,6 +267,16 @@ $EndFeature, \"\n ```\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }\n@@ -282,6 +292,18 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn count_zeros(self) -> u32 {\n+                (!self).count_ones()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentatio\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -302,6 +324,18 @@ assert_eq!(n.leading_zeros(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn leading_zeros(self) -> u32 {\n+                (self as $UnsignedT).leading_zeros()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn leading_zeros(self) -> u32 {\n                 (self as $UnsignedT).leading_zeros()\n@@ -322,6 +356,18 @@ assert_eq!(n.trailing_zeros(), 2);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn trailing_zeros(self) -> u32 {\n+                (self as $UnsignedT).trailing_zeros()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn trailing_zeros(self) -> u32 {\n                 (self as $UnsignedT).trailing_zeros()\n@@ -396,6 +442,16 @@ $EndFeature, \"\n         /// assert_eq!(m, 21760);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg(not(stage0))]\n+        #[rustc_const_unstable(feature = \"const_int_ops\")]\n+        #[inline]\n+        pub const fn swap_bytes(self) -> Self {\n+            (self as $UnsignedT).swap_bytes() as Self\n+        }\n+\n+        /// Dummy docs. See !stage0 documentation.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg(stage0)]\n         #[inline]\n         pub fn swap_bytes(self) -> Self {\n             (self as $UnsignedT).swap_bytes() as Self\n@@ -447,6 +503,25 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn from_be(x: Self) -> Self {\n+                #[cfg(target_endian = \"big\")]\n+                {\n+                    x\n+                }\n+                #[cfg(not(target_endian = \"big\"))]\n+                {\n+                    x.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn from_be(x: Self) -> Self {\n                 if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n@@ -473,6 +548,25 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn from_le(x: Self) -> Self {\n+                #[cfg(target_endian = \"little\")]\n+                {\n+                    x\n+                }\n+                #[cfg(not(target_endian = \"little\"))]\n+                {\n+                    x.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn from_le(x: Self) -> Self {\n                 if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n@@ -499,6 +593,25 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn to_be(self) -> Self { // or not to be?\n+                #[cfg(target_endian = \"big\")]\n+                {\n+                    self\n+                }\n+                #[cfg(not(target_endian = \"big\"))]\n+                {\n+                    self.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn to_be(self) -> Self { // or not to be?\n                 if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n@@ -525,6 +638,25 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn to_le(self) -> Self {\n+                #[cfg(target_endian = \"little\")]\n+                {\n+                    self\n+                }\n+                #[cfg(not(target_endian = \"little\"))]\n+                {\n+                    self.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn to_le(self) -> Self {\n                 if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }\n@@ -1943,6 +2075,19 @@ impl isize {\n     int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\" }\n }\n \n+// Emits the correct `cttz` call, depending on the size of the type.\n+macro_rules! uint_cttz_call {\n+    // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n+    // emits two conditional moves on x86_64. By promoting the value to\n+    // u16 and setting bit 8, we get better code without any conditional\n+    // operations.\n+    // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)\n+    // pending, remove this workaround once LLVM generates better code\n+    // for cttz8.\n+    ($value:expr, 8) => { intrinsics::cttz($value as u16 | 0x100) };\n+    ($value:expr, $_BITS:expr) => { intrinsics::cttz($value) }\n+}\n+\n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr) => {\n@@ -2020,6 +2165,18 @@ Basic usage:\n assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn count_ones(self) -> u32 {\n+                unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn count_ones(self) -> u32 {\n                 unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n@@ -2037,6 +2194,18 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn count_zeros(self) -> u32 {\n+                (!self).count_ones()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -2056,6 +2225,18 @@ Basic usage:\n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn leading_zeros(self) -> u32 {\n+                unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn leading_zeros(self) -> u32 {\n                 unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n@@ -2076,22 +2257,21 @@ Basic usage:\n assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn trailing_zeros(self) -> u32 {\n+                unsafe { uint_cttz_call!(self, $BITS) as u32 }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn trailing_zeros(self) -> u32 {\n-                // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n-                // emits two conditional moves on x86_64. By promoting the value to\n-                // u16 and setting bit 8, we get better code without any conditional\n-                // operations.\n-                // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)\n-                // pending, remove this workaround once LLVM generates better code\n-                // for cttz8.\n-                unsafe {\n-                    if $BITS == 8 {\n-                        intrinsics::cttz(self as u16 | 0x100) as u32\n-                    } else {\n-                        intrinsics::cttz(self) as u32\n-                    }\n-                }\n+                unsafe { uint_cttz_call!(self, $BITS) as u32 }\n             }\n         }\n \n@@ -2167,6 +2347,16 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n         /// assert_eq!(m, 21760);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg(not(stage0))]\n+        #[rustc_const_unstable(feature = \"const_int_ops\")]\n+        #[inline]\n+        pub const fn swap_bytes(self) -> Self {\n+            unsafe { intrinsics::bswap(self as $ActualT) as Self }\n+        }\n+\n+        /// Dummy docs. See !stage0 documentation.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg(stage0)]\n         #[inline]\n         pub fn swap_bytes(self) -> Self {\n             unsafe { intrinsics::bswap(self as $ActualT) as Self }\n@@ -2218,6 +2408,25 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn from_be(x: Self) -> Self {\n+                #[cfg(target_endian = \"big\")]\n+                {\n+                    x\n+                }\n+                #[cfg(not(target_endian = \"big\"))]\n+                {\n+                    x.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn from_be(x: Self) -> Self {\n                 if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n@@ -2244,6 +2453,25 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn from_le(x: Self) -> Self {\n+                #[cfg(target_endian = \"little\")]\n+                {\n+                    x\n+                }\n+                #[cfg(not(target_endian = \"little\"))]\n+                {\n+                    x.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn from_le(x: Self) -> Self {\n                 if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n@@ -2270,6 +2498,25 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn to_be(self) -> Self { // or not to be?\n+                #[cfg(target_endian = \"big\")]\n+                {\n+                    self\n+                }\n+                #[cfg(not(target_endian = \"big\"))]\n+                {\n+                    self.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn to_be(self) -> Self { // or not to be?\n                 if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n@@ -2296,6 +2543,25 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(not(stage0))]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn to_le(self) -> Self {\n+                #[cfg(target_endian = \"little\")]\n+                {\n+                    self\n+                }\n+                #[cfg(not(target_endian = \"little\"))]\n+                {\n+                    self.swap_bytes()\n+                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Dummy docs. See !stage0 documentation\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             #[inline]\n             pub fn to_le(self) -> Self {\n                 if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }"}, {"sha": "37ae05309af1dca6eb75cf6f2cfa0fca60fb6e16", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -35,6 +35,7 @@ use fmt;\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[cfg_attr(not(stage0), lang = \"panic_info\")]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct PanicInfo<'a> {\n@@ -53,7 +54,8 @@ impl<'a> PanicInfo<'a> {\n     pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n                                 location: Location<'a>)\n                                 -> Self {\n-        PanicInfo { payload: &(), location, message }\n+        struct NoPayload;\n+        PanicInfo { payload: &NoPayload, location, message }\n     }\n \n     #[doc(hidden)]\n@@ -121,7 +123,7 @@ impl<'a> PanicInfo<'a> {\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location> {\n         // NOTE: If this is changed to sometimes return None,\n-        // deal with that case in std::panicking::default_hook.\n+        // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n         Some(&self.location)\n     }\n }"}, {"sha": "0d4f8d1141e739490225c4a688bdc68198a540ea", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -37,6 +37,8 @@\n             issue = \"0\")]\n \n use fmt;\n+#[cfg(not(stage0))]\n+use panic::{Location, PanicInfo};\n \n #[cold] #[inline(never)] // this is the slow path, always\n #[lang = \"panic\"]\n@@ -59,6 +61,7 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                            len, index), file_line_col)\n }\n \n+#[cfg(stage0)]\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n     #[allow(improper_ctypes)]\n@@ -70,3 +73,21 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32))\n     let (file, line, col) = *file_line_col;\n     unsafe { panic_impl(fmt, file, line, col) }\n }\n+\n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)]\n+pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo) -> !;\n+    }\n+\n+    let (file, line, col) = *file_line_col;\n+    let pi = PanicInfo::internal_constructor(\n+        Some(&fmt),\n+        Location::internal_constructor(file, line, col),\n+    );\n+    unsafe { panic_impl(&pi) }\n+}"}, {"sha": "39315d8f0c8f8b5cac52b0a64d5d6f9bf20b8b68", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -239,8 +239,9 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     }\n }\n \n-/// Replaces the value at `dest` with `src`, returning the old\n-/// value, without dropping either.\n+/// Moves `src` into the pointed `dest`, returning the previous `dest` value.\n+///\n+/// Neither value is dropped.\n ///\n /// # Safety\n ///"}, {"sha": "c5792d62aa92c16f30d8095f10ad856d4b54896c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1977,35 +1977,63 @@ fn slice_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n+mod private_slice_index {\n+    use super::ops;\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    pub trait Sealed {}\n+\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for usize {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::Range<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeTo<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeFrom<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeFull {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeInclusive<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeToInclusive<usize> {}\n+}\n+\n /// A helper trait used for indexing operations.\n-#[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n+#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n #[rustc_on_unimplemented = \"slice indices are of type `usize` or ranges of `usize`\"]\n-pub trait SliceIndex<T: ?Sized> {\n+pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// The output type returned by methods.\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n     type Output: ?Sized;\n \n     /// Returns a shared reference to the output at this location, if in\n     /// bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn get(self, slice: &T) -> Option<&Self::Output>;\n \n     /// Returns a mutable reference to the output at this location, if in\n     /// bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn get_mut(self, slice: &mut T) -> Option<&mut Self::Output>;\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n \n     /// Returns a shared reference to the output at this location, panicking\n     /// if out of bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn index(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, panicking\n     /// if out of bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n \n@@ -2513,6 +2541,12 @@ macro_rules! iterator {\n                 accum\n             }\n         }\n+\n+        #[stable(feature = \"fused\", since = \"1.26.0\")]\n+        impl<'a, T> FusedIterator for $name<'a, T> {}\n+\n+        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+        unsafe impl<'a, T> TrustedLen for $name<'a, T> {}\n     }\n }\n \n@@ -2639,12 +2673,6 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n     }\n }\n \n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Iter<'a, T> {}\n-\n-#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for Iter<'a, T> {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n@@ -2706,9 +2734,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n     ///\n     /// To avoid creating `&mut` references that alias, this is forced\n-    /// to consume the iterator. Consider using the `Slice` and\n-    /// `SliceMut` implementations for obtaining slices with more\n-    /// restricted lifetimes that do not consume the iterator.\n+    /// to consume the iterator.\n     ///\n     /// # Examples\n     ///\n@@ -2767,13 +2793,6 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n     }\n }\n \n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for IterMut<'a, T> {}\n-\n-#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for IterMut<'a, T> {}\n-\n-\n // Return the number of elements of `T` from `start` to `end`.\n // Return the arithmetic difference if `T` is zero size.\n #[inline(always)]\n@@ -3371,6 +3390,9 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T> TrustedLen for Windows<'a, T> {}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Windows<'a, T> {}\n \n@@ -3490,6 +3512,9 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T> TrustedLen for Chunks<'a, T> {}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Chunks<'a, T> {}\n \n@@ -3606,6 +3631,9 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T> TrustedLen for ChunksMut<'a, T> {}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n \n@@ -3716,6 +3744,9 @@ impl<'a, T> ExactSizeIterator for ExactChunks<'a, T> {\n     }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T> TrustedLen for ExactChunks<'a, T> {}\n+\n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n impl<'a, T> FusedIterator for ExactChunks<'a, T> {}\n \n@@ -3813,6 +3844,9 @@ impl<'a, T> ExactSizeIterator for ExactChunksMut<'a, T> {\n     }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T> TrustedLen for ExactChunksMut<'a, T> {}\n+\n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n impl<'a, T> FusedIterator for ExactChunksMut<'a, T> {}\n "}, {"sha": "5e1a9c25a2190729b0696c65d43e50d2caba4fed", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -3875,6 +3875,12 @@ impl<'a> Default for &'a str {\n     fn default() -> &'a str { \"\" }\n }\n \n+#[stable(feature = \"default_mut_str\", since = \"1.28.0\")]\n+impl<'a> Default for &'a mut str {\n+    /// Creates an empty mutable str\n+    fn default() -> &'a mut str { unsafe { from_utf8_unchecked_mut(&mut []) } }\n+}\n+\n /// An iterator over the non-whitespace substrings of a string,\n /// separated by any amount of whitespace.\n ///"}, {"sha": "563eea0066d59abdb10f5fdcd1bbe72c31a62c24", "filename": "src/libcore/time.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -268,6 +268,57 @@ impl Duration {\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n \n+    /// Returns the total number of milliseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_millis(), 5730);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_millis(&self) -> u128 {\n+        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n+    }\n+\n+    /// Returns the total number of microseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_micros(), 5730023);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_micros(&self) -> u128 {\n+        self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n+    }\n+\n+    /// Returns the total number of nanoseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_nanos(), 5730023852);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_nanos(&self) -> u128 {\n+        self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n+    }\n+\n     /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n     /// if overflow occurred.\n     ///"}, {"sha": "61f05ca347358781a75f399b0d3d8963d6901dc9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -637,8 +637,8 @@ Erroneous code example:\n ```compile_fail,E0152\n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-struct Foo; // error: duplicate lang item found: `panic_fmt`\n+#[lang = \"panic_impl\"]\n+struct Foo; // error: duplicate lang item found: `panic_impl`\n ```\n \n Lang items are already implemented in the standard library. Unless you are\n@@ -824,7 +824,7 @@ A list of available external lang items is available in\n #![feature(lang_items)]\n \n extern \"C\" {\n-    #[lang = \"panic_fmt\"] // ok!\n+    #[lang = \"panic_impl\"] // ok!\n     fn cake();\n }\n ```"}, {"sha": "0adbdbe99333f1c2dd4e7f109f865f37fecc4c60", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -134,9 +134,6 @@ pub struct Export {\n     /// The visibility of the export.\n     /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n     pub vis: ty::Visibility,\n-    /// True if from a `use` or and `extern crate`.\n-    /// Used in rustdoc.\n-    pub is_import: bool,\n }\n \n impl CtorKind {"}, {"sha": "1e48a54e018d6b1e70aba0ba8924d33ec4a911e2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -2433,7 +2433,7 @@ impl<'a> LoweringContext<'a> {\n                     self.with_hir_id_owner(new_id, |this| {\n                         let vis = match vis {\n                             hir::Visibility::Public => hir::Visibility::Public,\n-                            hir::Visibility::Crate => hir::Visibility::Crate,\n+                            hir::Visibility::Crate(sugar) => hir::Visibility::Crate(sugar),\n                             hir::Visibility::Inherited => hir::Visibility::Inherited,\n                             hir::Visibility::Restricted { ref path, id: _ } => {\n                                 hir::Visibility::Restricted {\n@@ -3704,7 +3704,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::Visibility {\n         match v.node {\n             VisibilityKind::Public => hir::Public,\n-            VisibilityKind::Crate(..) => hir::Visibility::Crate,\n+            VisibilityKind::Crate(sugar) => hir::Visibility::Crate(sugar),\n             VisibilityKind::Restricted { ref path, id, .. } => hir::Visibility::Restricted {\n                 path: P(self.lower_path(id, path, ParamMode::Explicit)),\n                 id: if let Some(owner) = explicit_owner {"}, {"sha": "7835d4e782c430e86ad8231f98007a3833b53804", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -463,7 +463,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_vis(&mut self, visibility: &'hir Visibility) {\n         match *visibility {\n             Visibility::Public |\n-            Visibility::Crate |\n+            Visibility::Crate(_) |\n             Visibility::Inherited => {}\n             Visibility::Restricted { id, .. } => {\n                 self.insert(id, NodeVisibility(visibility));"}, {"sha": "b7c66398f8500e3119d129f3aa30c358dc59612d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -35,7 +35,7 @@ use mir::mono::Linkage;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::codemap::{self, Spanned};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n+use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};\n use syntax::attr::InlineAttr;\n use syntax::ext::hygiene::SyntaxContext;\n@@ -1953,7 +1953,7 @@ pub struct PolyTraitRef {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Visibility {\n     Public,\n-    Crate,\n+    Crate(CrateSugar),\n     Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }\n@@ -1964,7 +1964,7 @@ impl Visibility {\n         match self {\n             &Public |\n             &Inherited => false,\n-            &Crate |\n+            &Crate(_) |\n             &Restricted { .. } => true,\n         }\n     }"}, {"sha": "2cf627fdc162f556e409b4b6e2110829780aa3fa", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -801,15 +801,25 @@ impl<'a> State<'a> {\n \n     pub fn print_visibility(&mut self, vis: &hir::Visibility) -> io::Result<()> {\n         match *vis {\n-            hir::Public => self.word_nbsp(\"pub\"),\n-            hir::Visibility::Crate => self.word_nbsp(\"pub(crate)\"),\n+            hir::Public => self.word_nbsp(\"pub\")?,\n+            hir::Visibility::Crate(ast::CrateSugar::JustCrate) => self.word_nbsp(\"crate\")?,\n+            hir::Visibility::Crate(ast::CrateSugar::PubCrate) => self.word_nbsp(\"pub(crate)\")?,\n             hir::Visibility::Restricted { ref path, .. } => {\n                 self.s.word(\"pub(\")?;\n-                self.print_path(path, false)?;\n-                self.word_nbsp(\")\")\n+                if path.segments.len() == 1 && path.segments[0].name == keywords::Super.name() {\n+                    // Special case: `super` can print like `pub(super)`.\n+                    self.s.word(\"super\")?;\n+                } else {\n+                    // Everything else requires `in` at present.\n+                    self.word_nbsp(\"in\")?;\n+                    self.print_path(path, false)?;\n+                }\n+                self.word_nbsp(\")\")?;\n             }\n-            hir::Inherited => Ok(()),\n+            hir::Inherited => ()\n         }\n+\n+        Ok(())\n     }\n \n     pub fn print_defaultness(&mut self, defaultness: hir::Defaultness) -> io::Result<()> {"}, {"sha": "a781fc7240ab3882394c651dcadbda484e0d94c7", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -751,17 +751,24 @@ impl_stable_hash_for!(enum hir::ImplItemKind {\n     Type(t)\n });\n \n+impl_stable_hash_for!(enum ::syntax::ast::CrateSugar {\n+    JustCrate,\n+    PubCrate,\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Visibility {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n             hir::Visibility::Public |\n-            hir::Visibility::Crate |\n             hir::Visibility::Inherited => {\n                 // No fields to hash.\n             }\n+            hir::Visibility::Crate(sugar) => {\n+                sugar.hash_stable(hcx, hasher);\n+            }\n             hir::Visibility::Restricted { ref path, id } => {\n                 hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n                     id.hash_stable(hcx, hasher);\n@@ -1108,8 +1115,7 @@ impl_stable_hash_for!(struct hir::def::Export {\n     ident,\n     def,\n     vis,\n-    span,\n-    is_import\n+    span\n });\n \n impl<'a> HashStable<StableHashingContext<'a>>"}, {"sha": "7ebc0d4a4de5a4a358566bb002ad670eeb730ff0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt,\n                                     id: ast::NodeId,\n                                     attrs: &[ast::Attribute]) -> bool {\n-    if attr::contains_name(attrs, \"lang\") {\n+    if attr::contains_name(attrs, \"lang\") || attr::contains_name(attrs, \"panic_implementation\") {\n         return true;\n     }\n "}, {"sha": "fe676919a7d14d23aa08e0050e01869bcfdfb7e2", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -185,6 +185,8 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n             if let Some(value) = attribute.value_str() {\n                 return Some((value, attribute.span));\n             }\n+        } else if attribute.check_name(\"panic_implementation\") {\n+            return Some((Symbol::intern(\"panic_impl\"), attribute.span))\n         }\n     }\n \n@@ -299,7 +301,8 @@ language_item_table! {\n     // lang item, but do not have it defined.\n     PanicFnLangItem,                 \"panic\",                   panic_fn;\n     PanicBoundsCheckFnLangItem,      \"panic_bounds_check\",      panic_bounds_check_fn;\n-    PanicFmtLangItem,                \"panic_fmt\",               panic_fmt;\n+    PanicInfoLangItem,               \"panic_info\",              panic_info;\n+    PanicImplLangItem,               \"panic_impl\",              panic_impl;\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;"}, {"sha": "959dda69e30ed81d69ab2f88b9ab4e35adb45339", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -936,16 +936,32 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                            span: Span,\n                            expr_ty: Ty<'tcx>)\n                            -> cmt_<'tcx> {\n+        debug!(\n+            \"cat_rvalue_node(id={:?}, span={:?}, expr_ty={:?})\",\n+            id,\n+            span,\n+            expr_ty,\n+        );\n         let hir_id = self.tcx.hir.node_to_hir_id(id);\n         let promotable = self.rvalue_promotable_map.as_ref().map(|m| m.contains(&hir_id.local_id))\n                                                             .unwrap_or(false);\n \n+        debug!(\n+            \"cat_rvalue_node: promotable = {:?}\",\n+            promotable,\n+        );\n+\n         // Always promote `[T; 0]` (even when e.g. borrowed mutably).\n         let promotable = match expr_ty.sty {\n             ty::TyArray(_, len) if len.assert_usize(self.tcx) == Some(0) => true,\n             _ => promotable,\n         };\n \n+        debug!(\n+            \"cat_rvalue_node: promotable = {:?} (2)\",\n+            promotable,\n+        );\n+\n         // Compute maximum lifetime of this rvalue. This is 'static if\n         // we can promote to a constant, otherwise equal to enclosing temp\n         // lifetime."}, {"sha": "3c2ea047218a7bfb16d119383a0b23af10c24a94", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -148,7 +148,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n ) }\n \n weak_lang_items! {\n-    panic_fmt,          PanicFmtLangItem,           rust_begin_unwind;\n+    panic_impl,         PanicImplLangItem,          rust_begin_unwind;\n     eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n     eh_unwind_resume,   EhUnwindResumeLangItem,     rust_eh_unwind_resume;\n     oom,                OomLangItem,                rust_oom;"}, {"sha": "2c8f021c6a520b4d719e4820410a87b071b08b9f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1304,8 +1304,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable polonius-based borrow-checker\"),\n     codegen_time_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"generate a graphical HTML report of time spent in codegen and LLVM\"),\n-    trans_time_graph: bool = (false, parse_bool, [UNTRACKED],\n-        \"generate a graphical HTML report of time spent in trans and LLVM\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "82f351782bbcdd71a91f981399fd905bfecf6e91", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> ProjectionTyCandidateSet<'tcx> {\n         // was not used). On other paths, it is not assigned,\n         // and hence if those paths *could* reach the code that\n         // comes after the match, this fn would not compile.\n-        let convert_to_ambigious;\n+        let convert_to_ambiguous;\n \n         match self {\n             None => {\n@@ -169,10 +169,10 @@ impl<'tcx> ProjectionTyCandidateSet<'tcx> {\n                 // clauses are the safer choice. See the comment on\n                 // `select::SelectionCandidate` and #21974 for more details.\n                 match (current, candidate) {\n-                    (ParamEnv(..), ParamEnv(..)) => convert_to_ambigious = (),\n+                    (ParamEnv(..), ParamEnv(..)) => convert_to_ambiguous = (),\n                     (ParamEnv(..), _) => return false,\n                     (_, ParamEnv(..)) => { unreachable!(); }\n-                    (_, _) => convert_to_ambigious = (),\n+                    (_, _) => convert_to_ambiguous = (),\n                 }\n             }\n \n@@ -183,7 +183,7 @@ impl<'tcx> ProjectionTyCandidateSet<'tcx> {\n \n         // We only ever get here when we moved from a single candidate\n         // to ambiguous.\n-        let () = convert_to_ambigious;\n+        let () = convert_to_ambiguous;\n         *self = Ambiguous;\n         false\n     }"}, {"sha": "f08b95f59fa3da963a522eb4855047828a906fad", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -33,7 +33,7 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// normalized. If you don't care about regions, you should prefer\n     /// `normalize_erasing_regions`, which is more efficient.\n     ///\n-    /// If the normalization succeeds and is unambigious, returns back\n+    /// If the normalization succeeds and is unambiguous, returns back\n     /// the normalized value along with various outlives relations (in\n     /// the form of obligations that must be discharged).\n     ///"}, {"sha": "0bb0208e2a1b4a2d0b2737b60ca61f4f4a800e2f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -270,7 +270,7 @@ impl Visibility {\n     pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: TyCtxt) -> Self {\n         match *visibility {\n             hir::Public => Visibility::Public,\n-            hir::Visibility::Crate => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n+            hir::Visibility::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n             hir::Visibility::Restricted { ref path, .. } => match path.def {\n                 // If there is no resolution, `resolve` will have already reported an error, so\n                 // assume that the visibility is public to avoid reporting more privacy errors."}, {"sha": "4e9910e58f391dcb79aca2626d2b1c57100cc53a", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -625,6 +625,11 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n+        if sess.crt_static() {\n+            cmd.args(args);\n+        }\n+    }\n     if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n         cmd.args(args);\n     }\n@@ -639,6 +644,12 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n+    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+    }\n+\n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -660,6 +671,11 @@ fn link_natively(sess: &Session,\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }\n+    if sess.crt_static() {\n+        for obj in &sess.target.target.options.post_link_objects_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+    }\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }"}, {"sha": "14d20b6dbe2973a53597fbf2579ee9a9f473bddf", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -191,14 +191,23 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n \n             mir::TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n                 let discr = self.codegen_operand(&bx, discr);\n-                if switch_ty == bx.tcx().types.bool {\n+                if targets.len() == 2 {\n+                    // If there are two targets, emit br instead of switch\n                     let lltrue = llblock(self, targets[0]);\n                     let llfalse = llblock(self, targets[1]);\n-                    if let [0] = values[..] {\n-                        bx.cond_br(discr.immediate(), llfalse, lltrue);\n+                    if switch_ty == bx.tcx().types.bool {\n+                        // Don't generate trivial icmps when switching on bool\n+                        if let [0] = values[..] {\n+                            bx.cond_br(discr.immediate(), llfalse, lltrue);\n+                        } else {\n+                            assert_eq!(&values[..], &[1]);\n+                            bx.cond_br(discr.immediate(), lltrue, llfalse);\n+                        }\n                     } else {\n-                        assert_eq!(&values[..], &[1]);\n-                        bx.cond_br(discr.immediate(), lltrue, llfalse);\n+                        let switch_llty = bx.cx.layout_of(switch_ty).immediate_llvm_type(bx.cx);\n+                        let llval = C_uint_big(switch_llty, values[0]);\n+                        let cmp = bx.icmp(llvm::IntEQ, discr.immediate(), llval);\n+                        bx.cond_br(cmp, lltrue, llfalse);\n                     }\n                 } else {\n                     let (otherwise, targets) = targets.split_last().unwrap();"}, {"sha": "79c7a79114761785fc8e1cb9e8ce99ae88b01055", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1548,72 +1548,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n     }\n }\n \n-declare_lint! {\n-    pub UNNECESSARY_EXTERN_CRATES,\n-    Allow,\n-    \"suggest removing `extern crate` for the 2018 edition\"\n-}\n-\n-pub struct ExternCrate(/* depth */ u32);\n-\n-impl ExternCrate {\n-    pub fn new() -> Self {\n-        ExternCrate(0)\n-    }\n-}\n-\n-impl LintPass for ExternCrate {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNECESSARY_EXTERN_CRATES)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExternCrate {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        if !cx.tcx.features().extern_absolute_paths {\n-            return\n-        }\n-        if let hir::ItemExternCrate(ref orig) =  it.node {\n-            if it.attrs.iter().any(|a| a.check_name(\"macro_use\")) {\n-                return\n-            }\n-            let mut err = cx.struct_span_lint(UNNECESSARY_EXTERN_CRATES,\n-                it.span, \"`extern crate` is unnecessary in the new edition\");\n-            if it.vis == hir::Visibility::Public || self.0 > 1 || orig.is_some() {\n-                let pub_ = if it.vis == hir::Visibility::Public {\n-                    \"pub \"\n-                } else {\n-                    \"\"\n-                };\n-\n-                let help = format!(\"use `{}use`\", pub_);\n-\n-                if let Some(orig) = orig {\n-                    err.span_suggestion(it.span, &help,\n-                        format!(\"{}use {} as {};\", pub_, orig, it.name));\n-                } else {\n-                    err.span_suggestion(it.span, &help,\n-                        format!(\"{}use {};\", pub_, it.name));\n-                }\n-            } else {\n-                err.span_suggestion(it.span, \"remove it\", \"\".into());\n-            }\n-\n-            err.emit();\n-        }\n-    }\n-\n-    fn check_mod(&mut self, _: &LateContext, _: &hir::Mod,\n-                 _: Span, _: ast::NodeId) {\n-        self.0 += 1;\n-    }\n-\n-    fn check_mod_post(&mut self, _: &LateContext, _: &hir::Mod,\n-                      _: Span, _: ast::NodeId) {\n-        self.0 += 1;\n-    }\n-}\n-\n /// Lint for trait and lifetime bounds that don't depend on type parameters\n /// which either do nothing, or stop the item from being used.\n pub struct TrivialConstraints;"}, {"sha": "d6ce5b2ea57fe2228b2f0c6acf3aafda399b3098", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -145,7 +145,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                           TypeLimits,\n                           MissingDoc,\n                           MissingDebugImplementations,\n-                          ExternCrate,\n                           );\n \n     add_lint_group!(sess,\n@@ -185,7 +184,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     \"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n                     UNREACHABLE_PUB,\n-                    UNNECESSARY_EXTERN_CRATES);\n+                    UNUSED_EXTERN_CRATES);\n \n     // Guidelines for creating a future incompatibility lint:\n     //"}, {"sha": "fd00cde375b90054fcef50854f0509f1102ba581", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -665,7 +665,6 @@ impl<'a, 'tcx> CrateMetadata {\n                         def: def,\n                         vis: ty::Visibility::Public,\n                         span: DUMMY_SP,\n-                        is_import: false,\n                     });\n                 }\n             }\n@@ -705,7 +704,6 @@ impl<'a, 'tcx> CrateMetadata {\n                                     ident: Ident::from_interned_str(self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n-                                    is_import: false,\n                                 });\n                             }\n                         }\n@@ -722,8 +720,7 @@ impl<'a, 'tcx> CrateMetadata {\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n                     let ident = Ident::from_interned_str(name);\n                     let vis = self.get_visibility(child_index);\n-                    let is_import = false;\n-                    callback(def::Export { def, ident, vis, span, is_import });\n+                    callback(def::Export { def, ident, vis, span });\n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n                     match def {\n@@ -734,7 +731,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                 callback(def::Export {\n                                     def: ctor_def,\n                                     vis: self.get_visibility(ctor_def_id.index),\n-                                    ident, span, is_import,\n+                                    ident, span,\n                                 });\n                             }\n                         }\n@@ -744,7 +741,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             let ctor_kind = self.get_ctor_kind(child_index);\n                             let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n                             let vis = self.get_visibility(child_index);\n-                            callback(def::Export { def: ctor_def, ident, vis, span, is_import });\n+                            callback(def::Export { def: ctor_def, ident, vis, span });\n                         }\n                         _ => {}\n                     }"}, {"sha": "4c282f037a5cc9c663168c78bdab4ff1333b70c5", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -362,8 +362,8 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n         format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n                  type parameters (error E0133)\")\n     } else {\n-        format!(\"#[derive] can't be used on a non-Copy #[repr(packed)] struct \\\n-                 (error E0133)\")\n+        format!(\"#[derive] can't be used on a #[repr(packed)] struct that \\\n+                 does not derive Copy (error E0133)\")\n     };\n     tcx.lint_node(SAFE_PACKED_BORROWS,\n                   lint_node_id,"}, {"sha": "74b9315f0c1eed1a043313a99d23e964b9dc8bf9", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -150,6 +150,23 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n                 span.allows_unstable();\n         }\n     }\n+\n+    /// While the `ExprUseVisitor` walks, we will identify which\n+    /// expressions are borrowed, and insert their ids into this\n+    /// table. Actually, we insert the \"borrow-id\", which is normally\n+    /// the id of the expession being borrowed: but in the case of\n+    /// `ref mut` borrows, the `id` of the pattern is\n+    /// inserted. Therefore later we remove that entry from the table\n+    /// and transfer it over to the value being matched. This will\n+    /// then prevent said value from being promoted.\n+    fn remove_mut_rvalue_borrow(&mut self, pat: &hir::Pat) -> bool {\n+        let mut any_removed = false;\n+        pat.walk(|p| {\n+            any_removed |= self.mut_rvalue_borrows.remove(&p.id);\n+            true\n+        });\n+        any_removed\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n@@ -200,9 +217,15 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt) {\n         match stmt.node {\n             hir::StmtDecl(ref decl, _) => {\n-                match decl.node {\n-                    hir::DeclLocal(_) => {\n+                match &decl.node {\n+                    hir::DeclLocal(local) => {\n                         self.promotable = false;\n+\n+                        if self.remove_mut_rvalue_borrow(&local.pat) {\n+                            if let Some(init) = &local.init {\n+                                self.mut_rvalue_borrows.insert(init.id);\n+                            }\n+                        }\n                     }\n                     // Item statements are allowed\n                     hir::DeclItem(_) => {}\n@@ -229,9 +252,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n             // patterns and set that on the discriminator.\n             let mut mut_borrow = false;\n             for pat in arms.iter().flat_map(|arm| &arm.pats) {\n-                if self.mut_rvalue_borrows.remove(&pat.id) {\n-                    mut_borrow = true;\n-                }\n+                mut_borrow = self.remove_mut_rvalue_borrow(pat);\n             }\n             if mut_borrow {\n                 self.mut_rvalue_borrows.insert(discr.id);\n@@ -498,6 +519,14 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n               _loan_region: ty::Region<'tcx>,\n               bk: ty::BorrowKind,\n               loan_cause: euv::LoanCause) {\n+        debug!(\n+            \"borrow(borrow_id={:?}, cmt={:?}, bk={:?}, loan_cause={:?})\",\n+            borrow_id,\n+            cmt,\n+            bk,\n+            loan_cause,\n+        );\n+\n         // Kind of hacky, but we allow Unsafe coercions in constants.\n         // These occur when we convert a &T or *T to a *U, as well as\n         // when making a thin pointer (e.g., `*T`) into a fat pointer"}, {"sha": "fe6909f7591592b676614abeb523c94dd04cf70e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -803,7 +803,6 @@ impl<'a> Resolver<'a> {\n                     def: def,\n                     vis: ty::Visibility::Public,\n                     span: item.span,\n-                    is_import: false,\n                 });\n             } else {\n                 self.unused_macros.insert(def_id);"}, {"sha": "c44f330128a2323cf28b69c5be869ccef4746b49", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1008,7 +1008,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         def: def,\n                         span: binding.span,\n                         vis: binding.vis,\n-                        is_import: true,\n                     });\n                 }\n             }"}, {"sha": "7a3f3c2a518bc7d065602ce42d30d3f9abc1ad1e", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -15,7 +15,8 @@ pub fn opts() -> TargetOptions {\n \n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n+    base.pre_link_args_crt.insert(LinkerFlavor::Gcc, Vec::new());\n+    base.pre_link_args_crt.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n@@ -55,9 +56,9 @@ pub fn opts() -> TargetOptions {\n     //\n     // Each target directory for musl has these object files included in it so\n     // they'll be included from there.\n-    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n-    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n-    base.post_link_objects.push(\"crtn.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crti.o\".to_string());\n+    base.post_link_objects_crt.push(\"crtn.o\".to_string());\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;"}, {"sha": "e54cd773123c8e5b7b5d88ad4a2118d7ee2dd6ee", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -426,20 +426,22 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// Linker arguments that are unconditionally passed *before* any\n-    /// user-defined libraries.\n-    pub pre_link_args: LinkArgs,\n+    /// Linker arguments that are passed *before* any user-defined libraries.\n+    pub pre_link_args: LinkArgs, // ... unconditionally\n+    pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n     /// Objects to link before all others, always found within the\n     /// sysroot folder.\n-    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n+    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable, unconditionally\n+    pub pre_link_objects_exe_crt: Vec<String>, // ... when linking an executable with a bundled crt\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n     /// Objects to link after all others, always found within the\n     /// sysroot folder.\n-    pub post_link_objects: Vec<String>,\n+    pub post_link_objects: Vec<String>, // ... unconditionally\n+    pub post_link_objects_crt: Vec<String>, // ... when linking with a bundled crt\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n@@ -639,6 +641,7 @@ impl Default for TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n+            pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n@@ -672,8 +675,10 @@ impl Default for TargetOptions {\n             position_independent_executables: false,\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n+            pre_link_objects_exe_crt: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n+            post_link_objects_crt: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -892,10 +897,13 @@ impl Target {\n         key!(is_builtin, bool);\n         key!(linker, optional);\n         key!(pre_link_args, link_args);\n+        key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n+        key!(pre_link_objects_exe_crt, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n+        key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n         key!(asm_args, list);\n@@ -1097,10 +1105,13 @@ impl ToJson for Target {\n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n         target_option_val!(link_args - pre_link_args);\n+        target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);\n+        target_option_val!(pre_link_objects_exe_crt);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n+        target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n         target_option_val!(asm_args);"}, {"sha": "86cd8d0fb2c5207c0cdd5846ad235bb29e4583a7", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let ty_string = self.ty_to_string(actual);\n                 let is_method = mode == Mode::MethodCall;\n                 let mut suggestion = None;\n-                let type_str = if is_method {\n+                let item_kind = if is_method {\n                     \"method\"\n                 } else if actual.is_enum() {\n                     if let TyAdt(ref adt_def, _) = actual.sty {\n@@ -235,7 +235,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             span,\n                             E0689,\n                             \"can't call {} `{}` on ambiguous numeric type `{}`\",\n-                            type_str,\n+                            item_kind,\n                             item_name,\n                             ty_string\n                         );\n@@ -284,12 +284,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             span,\n                             E0599,\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n-                            type_str,\n+                            item_kind,\n                             item_name,\n                             ty_string\n                         );\n                         if let Some(suggestion) = suggestion {\n-                            err.note(&format!(\"did you mean `{}::{}`?\", type_str, suggestion));\n+                            err.note(&format!(\"did you mean `{}::{}`?\", ty_string, suggestion));\n                         }\n                         err\n                     }\n@@ -301,7 +301,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if let Some(full_sp) = tcx.hir.span_if_local(def.did) {\n                         let def_sp = tcx.sess.codemap().def_span(full_sp);\n                         err.span_label(def_sp, format!(\"{} `{}` not found {}\",\n-                                                       type_str,\n+                                                       item_kind,\n                                                        item_name,\n                                                        if def.is_enum() && !is_method {\n                                                            \"here\"\n@@ -355,7 +355,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                 } else {\n-                    err.span_label(span, format!(\"{} not found in `{}`\", type_str, ty_string));\n+                    err.span_label(span, format!(\"{} not found in `{}`\", item_kind, ty_string));\n                 }\n \n                 if self.is_fn_ty(&rcvr_ty, span) {"}, {"sha": "c2c71d90f06744e30ffaa93589c97e355a4d2ad3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -96,7 +96,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n-use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate};\n+use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::maps::Providers;\n@@ -130,7 +130,7 @@ use syntax_pos::{self, BytePos, Span, MultiSpan};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Node;\n-use rustc::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind, Item_};\n use rustc::middle::lang_items;\n \n mod autoderef;\n@@ -1129,6 +1129,60 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         }\n     }\n \n+    // Check that a function marked as `#[panic_implementation]` has signature `fn(&PanicInfo) -> !`\n+    if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n+        if panic_impl_did == fn_hir_id.owner_def_id() {\n+            if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n+                if declared_ret_ty.sty != ty::TyNever {\n+                    fcx.tcx.sess.span_err(\n+                        decl.output.span(),\n+                        \"return type should be `!`\",\n+                    );\n+                }\n+\n+                let inputs = fn_sig.inputs();\n+                let span = fcx.tcx.hir.span(fn_id);\n+                if inputs.len() == 1 {\n+                    let arg_is_panic_info = match inputs[0].sty {\n+                        ty::TyRef(region, ty, mutbl) => match ty.sty {\n+                            ty::TyAdt(ref adt, _) => {\n+                                adt.did == panic_info_did &&\n+                                    mutbl == hir::Mutability::MutImmutable &&\n+                                    *region != RegionKind::ReStatic\n+                            },\n+                            _ => false,\n+                        },\n+                        _ => false,\n+                    };\n+\n+                    if !arg_is_panic_info {\n+                        fcx.tcx.sess.span_err(\n+                            decl.inputs[0].span,\n+                            \"argument should be `&PanicInfo`\",\n+                        );\n+                    }\n+\n+                    if let Node::NodeItem(item) = fcx.tcx.hir.get(fn_id) {\n+                        if let Item_::ItemFn(_, _, _, _, ref generics, _) = item.node {\n+                            if !generics.params.is_empty() {\n+                                fcx.tcx.sess.span_err(\n+                                    span,\n+                                    \"`#[panic_implementation]` function should have no type \\\n+                                     parameters\",\n+                                );\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    fcx.tcx.sess.span_err(span, \"function should have one argument\");\n+                }\n+            } else {\n+                fcx.tcx.sess.err(\"language item required, but not found: `panic_info`\");\n+            }\n+        }\n+\n+    }\n+\n     (fcx, gen_ty)\n }\n "}, {"sha": "41adde0d4a1887c16cc599f870289814b5b26486", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 159, "deletions": 56, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -14,11 +14,46 @@ use rustc::ty::TyCtxt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::print::visibility_qualified;\n use rustc::hir;\n use rustc::util::nodemap::DefIdSet;\n \n+use rustc_data_structures::fx::FxHashMap;\n+\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    let mut used_trait_imports = DefIdSet();\n+    for &body_id in tcx.hir.krate().bodies.keys() {\n+        let item_def_id = tcx.hir.body_owner_def_id(body_id);\n+        let imports = tcx.used_trait_imports(item_def_id);\n+        debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n+        used_trait_imports.extend(imports.iter());\n+    }\n+\n+    let mut visitor = CheckVisitor { tcx, used_trait_imports };\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+\n+    unused_crates_lint(tcx);\n+}\n+\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        if item.vis == hir::Public || item.span == DUMMY_SP {\n+            return;\n+        }\n+        if let hir::ItemUse(ref path, _) = item.node {\n+            self.check_import(item.id, path.span);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    }\n+}\n+\n struct CheckVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     used_trait_imports: DefIdSet,\n@@ -45,70 +80,138 @@ impl<'a, 'tcx> CheckVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n-        if item.vis == hir::Public || item.span == DUMMY_SP {\n-            return;\n+fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n+    let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n+\n+    // Collect first the crates that are completely unused.  These we\n+    // can always suggest removing (no matter which edition we are\n+    // in).\n+    let unused_extern_crates: FxHashMap<DefId, Span> =\n+        tcx.maybe_unused_extern_crates(LOCAL_CRATE)\n+        .iter()\n+        .filter(|&&(def_id, _)| {\n+            // The `def_id` here actually was calculated during resolution (at least\n+            // at the time of this writing) and is being shipped to us via a side\n+            // channel of the tcx. There may have been extra expansion phases,\n+            // however, which ended up removing the `def_id` *after* expansion such\n+            // as the `ReplaceBodyWithLoop` pass (which is a bit of a hack, but hey)\n+            //\n+            // As a result we need to verify that `def_id` is indeed still valid for\n+            // our AST and actually present in the HIR map. If it's not there then\n+            // there's safely nothing to warn about, and otherwise we carry on with\n+            // our execution.\n+            //\n+            // Note that if we carry through to the `extern_mod_stmt_cnum` query\n+            // below it'll cause a panic because `def_id` is actually bogus at this\n+            // point in time otherwise.\n+            if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+                if tcx.hir.find(id).is_none() {\n+                    return false;\n+                }\n+            }\n+            true\n+        })\n+        .filter(|&&(def_id, _)| {\n+            let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n+            !tcx.is_compiler_builtins(cnum)\n+                && !tcx.is_panic_runtime(cnum)\n+                && !tcx.has_global_allocator(cnum)\n+        })\n+        .cloned()\n+        .collect();\n+\n+    // Collect all the extern crates (in a reliable order).\n+    let mut crates_to_lint = vec![];\n+    tcx.hir.krate().visit_all_item_likes(&mut CollectExternCrateVisitor {\n+        tcx,\n+        crates_to_lint: &mut crates_to_lint,\n+    });\n+\n+    for extern_crate in &crates_to_lint {\n+        assert!(extern_crate.def_id.is_local());\n+\n+        // If the crate is fully unused, we suggest removing it altogether.\n+        // We do this in any edition.\n+        if let Some(&span) = unused_extern_crates.get(&extern_crate.def_id) {\n+            assert_eq!(extern_crate.def_id.krate, LOCAL_CRATE);\n+            let hir_id = tcx.hir.definitions().def_index_to_hir_id(extern_crate.def_id.index);\n+            let id = tcx.hir.hir_to_node_id(hir_id);\n+            let msg = \"unused extern crate\";\n+            tcx.struct_span_lint_node(lint, id, span, msg)\n+                .span_suggestion_short(span, \"remove it\", \"\".to_string())\n+                .emit();\n+            continue;\n         }\n-        if let hir::ItemUse(ref path, _) = item.node {\n-            self.check_import(item.id, path.span);\n+\n+        // If we are not in Rust 2018 edition, then we don't make any further\n+        // suggestions.\n+        if !tcx.sess.rust_2018() {\n+            continue;\n         }\n-    }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n-    }\n+        // If the extern crate has any attributes, they may have funky\n+        // semantics we can't faithfully represent using `use` (most\n+        // notably `#[macro_use]`). Ignore it.\n+        if !tcx.get_attrs(extern_crate.def_id).is_empty() {\n+            continue;\n+        }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+        // Otherwise, we can convert it into a `use` of some kind.\n+        let hir_id = tcx.hir.definitions().def_index_to_hir_id(extern_crate.def_id.index);\n+        let id = tcx.hir.hir_to_node_id(hir_id);\n+        let item = tcx.hir.expect_item(id);\n+        let msg = \"`extern crate` is not idiomatic in the new edition\";\n+        let help = format!(\n+            \"convert it to a `{}`\",\n+            visibility_qualified(&item.vis, \"use\")\n+        );\n+        let base_replacement = match extern_crate.orig_name {\n+            Some(orig_name) => format!(\"use {} as {};\", orig_name, item.name),\n+            None => format!(\"use {};\", item.name),\n+        };\n+        let replacement = visibility_qualified(&item.vis, &base_replacement);\n+        tcx.struct_span_lint_node(lint, id, extern_crate.span, msg)\n+            .span_suggestion_short(extern_crate.span, &help, replacement)\n+            .emit();\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut used_trait_imports = DefIdSet();\n-    for &body_id in tcx.hir.krate().bodies.keys() {\n-        let item_def_id = tcx.hir.body_owner_def_id(body_id);\n-        let imports = tcx.used_trait_imports(item_def_id);\n-        debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n-        used_trait_imports.extend(imports.iter());\n-    }\n+struct CollectExternCrateVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    crates_to_lint: &'a mut Vec<ExternCrateToLint>,\n+}\n \n-    let mut visitor = CheckVisitor { tcx, used_trait_imports };\n-    tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+struct ExternCrateToLint {\n+    /// def-id of the extern crate\n+    def_id: DefId,\n \n-    for &(def_id, span) in tcx.maybe_unused_extern_crates(LOCAL_CRATE).iter() {\n-        // The `def_id` here actually was calculated during resolution (at least\n-        // at the time of this writing) and is being shipped to us via a side\n-        // channel of the tcx. There may have been extra expansion phases,\n-        // however, which ended up removing the `def_id` *after* expansion such\n-        // as the `ReplaceBodyWithLoop` pass (which is a bit of a hack, but hey)\n-        //\n-        // As a result we need to verify that `def_id` is indeed still valid for\n-        // our AST and actually present in the HIR map. If it's not there then\n-        // there's safely nothing to warn about, and otherwise we carry on with\n-        // our execution.\n-        //\n-        // Note that if we carry through to the `extern_mod_stmt_cnum` query\n-        // below it'll cause a panic because `def_id` is actually bogus at this\n-        // point in time otherwise.\n-        if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n-            if tcx.hir.find(id).is_none() {\n-                continue\n-            }\n-        }\n-        let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n-        if tcx.is_compiler_builtins(cnum) {\n-            continue\n-        }\n-        if tcx.is_panic_runtime(cnum) {\n-            continue\n-        }\n-        if tcx.has_global_allocator(cnum) {\n-            continue\n+    /// span from the item\n+    span: Span,\n+\n+    /// if `Some`, then this is renamed (`extern crate orig_name as\n+    /// crate_name`), and -- perhaps surprisingly -- this stores the\n+    /// *original* name (`item.name` will contain the new name)\n+    orig_name: Option<ast::Name>,\n+}\n+\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        if let hir::ItemExternCrate(orig_name) = item.node {\n+            let extern_crate_def_id = self.tcx.hir.local_def_id(item.id);\n+            self.crates_to_lint.push(\n+                ExternCrateToLint {\n+                    def_id: extern_crate_def_id,\n+                    span: item.span,\n+                    orig_name,\n+                }\n+            );\n         }\n-        assert_eq!(def_id.krate, LOCAL_CRATE);\n-        let hir_id = tcx.hir.definitions().def_index_to_hir_id(def_id.index);\n-        let id = tcx.hir.hir_to_node_id(hir_id);\n-        let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n-        let msg = \"unused extern crate\";\n-        tcx.lint_node(lint, id, span, msg);\n+    }\n+\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }\n+"}, {"sha": "1c1ba208678ed0e418faac4eba8cbd3025321142", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -57,6 +57,7 @@ use std::rc::Rc;\n use std::cell::RefCell;\n use std::sync::Arc;\n use std::u32;\n+use std::ops::Range;\n \n use core::{self, DocContext};\n use doctree;\n@@ -954,12 +955,20 @@ fn type_ns_kind(def: Def, path_str: &str) -> (&'static str, &'static str, String\n     (kind, article, format!(\"{}@{}\", kind, path_str))\n }\n \n+fn span_of_attrs(attrs: &Attributes) -> syntax_pos::Span {\n+    if attrs.doc_strings.is_empty() {\n+        return DUMMY_SP;\n+    }\n+    let start = attrs.doc_strings[0].span();\n+    let end = attrs.doc_strings.last().unwrap().span();\n+    start.to(end)\n+}\n+\n fn ambiguity_error(cx: &DocContext, attrs: &Attributes,\n                    path_str: &str,\n                    article1: &str, kind1: &str, disambig1: &str,\n                    article2: &str, kind2: &str, disambig2: &str) {\n-    let sp = attrs.doc_strings.first()\n-                  .map_or(DUMMY_SP, |a| a.span());\n+    let sp = span_of_attrs(attrs);\n     cx.sess()\n       .struct_span_warn(sp,\n                         &format!(\"`{}` is both {} {} and {} {}\",\n@@ -1174,8 +1183,39 @@ enum PathKind {\n     Type,\n }\n \n-fn resolution_failure(cx: &DocContext, path_str: &str) {\n-    cx.sess().warn(&format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+fn resolution_failure(\n+    cx: &DocContext,\n+    attrs: &Attributes,\n+    path_str: &str,\n+    dox: &str,\n+    link_range: Option<Range<usize>>,\n+) {\n+    let sp = span_of_attrs(attrs);\n+    let mut diag = cx.sess()\n+        .struct_span_warn(sp, &format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+\n+    if let Some(link_range) = link_range {\n+        // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n+        //                       ^    ~~~~~~\n+        //                       |    link_range\n+        //                       last_new_line_offset\n+\n+        let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n+        let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+\n+        // Print the line containing the `link_range` and manually mark it with '^'s\n+        diag.note(&format!(\n+            \"the link appears in this line:\\n\\n{line}\\n{indicator: <before$}{indicator:^<found$}\",\n+            line=line,\n+            indicator=\"\",\n+            before=link_range.start - last_new_line_offset,\n+            found=link_range.len(),\n+        ));\n+    } else {\n+\n+    }\n+\n+    diag.emit();\n }\n \n impl Clean<Attributes> for [ast::Attribute] {\n@@ -1184,7 +1224,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n \n         if UnstableFeatures::from_environment().is_nightly_build() {\n             let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n-            for ori_link in markdown_links(&dox) {\n+            for (ori_link, link_range) in markdown_links(&dox) {\n                 // bail early for real links\n                 if ori_link.contains('/') {\n                     continue;\n@@ -1228,7 +1268,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, true) {\n                                 def\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link or a broken link\n                                 // we could potentially check if something is\n                                 // \"intra-doc-link-like\" and warn in that case\n@@ -1239,7 +1279,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, false) {\n                                 def\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1284,7 +1324,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             } else if let Ok(value_def) = resolve(cx, path_str, true) {\n                                 value_def\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1293,7 +1333,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Some(def) = macro_resolve(cx, path_str) {\n                                 (def, None)\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 continue\n                             }\n                         }\n@@ -3030,7 +3070,7 @@ impl Clean<Option<Visibility>> for hir::Visibility {\n         Some(match *self {\n             hir::Visibility::Public => Visibility::Public,\n             hir::Visibility::Inherited => Visibility::Inherited,\n-            hir::Visibility::Crate => Visibility::Crate,\n+            hir::Visibility::Crate(_) => Visibility::Crate,\n             hir::Visibility::Restricted { ref path, .. } => {\n                 let path = path.clean(cx);\n                 let did = register_def(cx, path.def);"}, {"sha": "7088104cd7a31d8b6ee5a6f6baa1ca2b3a5c9cea", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -32,6 +32,8 @@ use std::cell::RefCell;\n use std::collections::{HashMap, VecDeque};\n use std::default::Default;\n use std::fmt::{self, Write};\n+use std::borrow::Cow;\n+use std::ops::Range;\n use std::str;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::codemap::Span;\n@@ -747,7 +749,7 @@ pub fn plain_summary_line(md: &str) -> String {\n     s\n }\n \n-pub fn markdown_links(md: &str) -> Vec<String> {\n+pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n     if md.is_empty() {\n         return vec![];\n     }\n@@ -760,8 +762,22 @@ pub fn markdown_links(md: &str) -> Vec<String> {\n     let shortcut_links = RefCell::new(vec![]);\n \n     {\n+        let locate = |s: &str| unsafe {\n+            let s_start = s.as_ptr();\n+            let s_end = s_start.add(s.len());\n+            let md_start = md.as_ptr();\n+            let md_end = md_start.add(md.len());\n+            if md_start <= s_start && s_end <= md_end {\n+                let start = s_start.offset_from(md_start) as usize;\n+                let end = s_end.offset_from(md_start) as usize;\n+                Some(start..end)\n+            } else {\n+                None\n+            }\n+        };\n+\n         let push = |_: &str, s: &str| {\n-            shortcut_links.borrow_mut().push(s.to_owned());\n+            shortcut_links.borrow_mut().push((s.to_owned(), locate(s)));\n             None\n         };\n         let p = Parser::new_with_broken_link_callback(md, opts,\n@@ -772,7 +788,10 @@ pub fn markdown_links(md: &str) -> Vec<String> {\n         for ev in iter {\n             if let Event::Start(Tag::Link(dest, _)) = ev {\n                 debug!(\"found link: {}\", dest);\n-                links.push(dest.into_owned());\n+                links.push(match dest {\n+                    Cow::Borrowed(s) => (s.to_owned(), locate(s)),\n+                    Cow::Owned(s) => (s, None),\n+                });\n             }\n         }\n     }"}, {"sha": "5377cd9a39143a4faeb40298897cc5b595aa6c34", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -3055,6 +3055,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n         } else {\n             (0, true)\n         };\n+        render_attributes(w, meth)?;\n         write!(w, \"{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                VisSpace(&meth.visibility),"}, {"sha": "0c937759120ef47e39df76218cffe5b6ab9cb6fd", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -2041,16 +2041,16 @@\n \n     autoCollapseAllImpls(getPageId());\n \n-    function createToggleWrapper() {\n+    function createToggleWrapper(tog) {\n         var span = document.createElement('span');\n         span.className = 'toggle-label';\n         span.style.display = 'none';\n         span.innerHTML = '&nbsp;Expand&nbsp;attributes';\n-        toggle.appendChild(span);\n+        tog.appendChild(span);\n \n         var wrapper = document.createElement('div');\n         wrapper.className = 'toggle-wrapper toggle-attributes';\n-        wrapper.appendChild(toggle);\n+        wrapper.appendChild(tog);\n         return wrapper;\n     }\n \n@@ -2078,13 +2078,11 @@\n         });\n     }\n \n-    onEach(document.getElementById('main').getElementsByTagName('pre'), function(e) {\n-        onEach(e.getElementsByClassName('attributes'), function(i_e) {\n-            i_e.parentNode.insertBefore(createToggleWrapper(), i_e);\n-            if (getCurrentValue(\"rustdoc-item-attributes\") !== \"false\") {\n-                collapseDocs(i_e.previousSibling.childNodes[0], \"toggle\");\n-            }\n-        });\n+    onEach(document.getElementById('main').getElementsByClassName('attributes'), function(i_e) {\n+        i_e.parentNode.insertBefore(createToggleWrapper(toggle.cloneNode(true)), i_e);\n+        if (getCurrentValue(\"rustdoc-item-attributes\") !== \"false\") {\n+            collapseDocs(i_e.previousSibling.childNodes[0], \"toggle\");\n+        }\n     });\n \n     onEach(document.getElementsByClassName('rust-example-rendered'), function(e) {"}, {"sha": "773b8174e56bc98b20c07298e3c96249d940493b", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -561,7 +561,8 @@ a {\n \tcontent: '\\2002\\00a7\\2002';\n }\n \n-.docblock a:not(.srclink):hover, .docblock-short a:not(.srclink):hover, .stability a {\n+.docblock a:not(.srclink):not(.test-arrow):hover,\n+.docblock-short a:not(.srclink):not(.test-arrow):hover, .stability a {\n \ttext-decoration: underline;\n }\n \n@@ -771,7 +772,7 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \n .toggle-wrapper {\n \tposition: relative;\n-\tmargin-top: 5px;\n+\tmargin-top: 0;\n }\n \n .toggle-wrapper.collapsed {\n@@ -854,10 +855,19 @@ span.since {\n \n .attributes {\n \tdisplay: block;\n-\tmargin: 0px 0px 0px 30px !important;\n+\tmargin-top: 0px !important;\n+\tmargin-right: 0px;\n+\tmargin-bottom: 0px !important;\n+\tmargin-left: 30px;\n }\n .toggle-attributes.collapsed {\n-\tmargin-bottom: 5px;\n+\tmargin-bottom: 0;\n+}\n+.impl-items > .toggle-attributes {\n+\tmargin-left: 20px;\n+}\n+.impl-items .attributes {\n+\tfont-weight: 500;\n }\n \n :target > code {"}, {"sha": "f96dcd9ec1c888bbfe6a8f5991a214b64ab7c5f2", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -163,7 +163,8 @@ a {\n \tcolor: #ddd;\n }\n \n-.docblock a:not(.srclink), .docblock-short a:not(.srclink), .stability a {\n+.docblock a:not(.srclink):not(.test-arrow), .docblock-short a:not(.srclink):not(.test-arrow),\n+.stability a {\n \tcolor: #D2991D;\n }\n "}, {"sha": "54cf50cfffd1e030467aa6bcc705aebab2c819ef", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -163,7 +163,8 @@ a {\n \tcolor: #000;\n }\n \n-.docblock a:not(.srclink), .docblock-short a:not(.srclink), .stability a {\n+.docblock a:not(.srclink):not(.test-arrow), .docblock-short a:not(.srclink):not(.test-arrow),\n+.stability a {\n \tcolor: #3873AD;\n }\n "}, {"sha": "97c84d8348f7c0ce6f142dcf29a9a6493beac68a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -23,6 +23,7 @@\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(entry_and_modify)]\n+#![feature(ptr_offset_from)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "4c773fc1dd78b7e1b7ae29b0fc8c489a836cd918", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -68,7 +68,8 @@ impl<'a, 'tcx, 'rcx> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n         }\n \n         for item in self.cx.tcx.item_children(def_id).iter() {\n-            if !item.is_import || item.vis == Visibility::Public {\n+            if self.cx.tcx.def_key(item.def.def_id()).parent.map_or(false, |d| d == def_id.index) ||\n+                item.vis == Visibility::Public {\n                 self.visit_item(item.def);\n             }\n         }"}, {"sha": "5cbd8891364dd0f0d15c73d2a7df085fceed21c5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -2250,6 +2250,11 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n \n     /// Gets a mutable reference to the value in the entry.\n     ///\n+    /// If you need a reference to the `OccupiedEntry` which may outlive the\n+    /// destruction of the `Entry` value, see [`into_mut`].\n+    ///\n+    /// [`into_mut`]: #method.into_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2261,10 +2266,14 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// assert_eq!(map[\"poneyland\"], 12);\n     /// if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n-    ///      *o.get_mut() += 10;\n+    ///     *o.get_mut() += 10;\n+    ///     assert_eq!(*o.get(), 22);\n+    ///\n+    ///     // We can use the same Entry multiple times.\n+    ///     *o.get_mut() += 2;\n     /// }\n     ///\n-    /// assert_eq!(map[\"poneyland\"], 22);\n+    /// assert_eq!(map[\"poneyland\"], 24);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {\n@@ -2274,6 +2283,10 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     ///\n+    /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n+    ///\n+    /// [`get_mut`]: #method.get_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "c576245edb755c1d271fbf04f431951efe50a265", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -317,6 +317,8 @@\n #![cfg_attr(windows, feature(used))]\n #![feature(doc_alias)]\n #![feature(float_internals)]\n+#![feature(panic_info_message)]\n+#![cfg_attr(not(stage0), feature(panic_implementation))]\n \n #![default_lib_allocator]\n "}, {"sha": "0808efa2ecea51f9974deb34b8582b4a7deefb30", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 75, "deletions": 27, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -319,68 +319,116 @@ pub fn panicking() -> bool {\n \n /// Entry point of panic from the libcore crate.\n #[cfg(not(test))]\n+#[cfg(stage0)]\n #[lang = \"panic_fmt\"]\n-#[unwind(allowed)]\n pub extern fn rust_begin_panic(msg: fmt::Arguments,\n                                file: &'static str,\n                                line: u32,\n                                col: u32) -> ! {\n     begin_panic_fmt(&msg, &(file, line, col))\n }\n \n+/// Entry point of panic from the libcore crate.\n+#[cfg(not(test))]\n+#[cfg(not(stage0))]\n+#[panic_implementation]\n+#[unwind(allowed)]\n+pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n+    continue_panic_fmt(&info)\n+}\n+\n /// The entry point for panicking with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call\n /// site as much as possible (so that `panic!()` has as low an impact\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n+#[cfg(stage0)]\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[inline(never)] #[cold]\n pub fn begin_panic_fmt(msg: &fmt::Arguments,\n                        file_line_col: &(&'static str, u32, u32)) -> ! {\n-    use fmt::Write;\n-\n     // We do two allocations here, unfortunately. But (a) they're\n     // required with the current scheme, and (b) we don't handle\n     // panic + OOM properly anyway (see comment in begin_panic\n     // below).\n \n     rust_panic_with_hook(&mut PanicPayload::new(msg), Some(msg), file_line_col);\n+}\n+\n+// NOTE(stage0) move into `continue_panic_fmt` on next stage0 update\n+struct PanicPayload<'a> {\n+    inner: &'a fmt::Arguments<'a>,\n+    string: Option<String>,\n+}\n \n-    struct PanicPayload<'a> {\n-        inner: &'a fmt::Arguments<'a>,\n-        string: Option<String>,\n+impl<'a> PanicPayload<'a> {\n+    fn new(inner: &'a fmt::Arguments<'a>) -> PanicPayload<'a> {\n+        PanicPayload { inner, string: None }\n     }\n \n-    impl<'a> PanicPayload<'a> {\n-        fn new(inner: &'a fmt::Arguments<'a>) -> PanicPayload<'a> {\n-            PanicPayload { inner, string: None }\n-        }\n+    fn fill(&mut self) -> &mut String {\n+        use fmt::Write;\n \n-        fn fill(&mut self) -> &mut String {\n-            let inner = self.inner;\n-            self.string.get_or_insert_with(|| {\n-                let mut s = String::new();\n-                drop(s.write_fmt(*inner));\n-                s\n-            })\n-        }\n+        let inner = self.inner;\n+        self.string.get_or_insert_with(|| {\n+            let mut s = String::new();\n+            drop(s.write_fmt(*inner));\n+            s\n+        })\n     }\n+}\n \n-    unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n-            let contents = mem::replace(self.fill(), String::new());\n-            Box::into_raw(Box::new(contents))\n-        }\n+unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n+    fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        let contents = mem::replace(self.fill(), String::new());\n+        Box::into_raw(Box::new(contents))\n+    }\n \n-        fn get(&mut self) -> &(Any + Send) {\n-            self.fill()\n-        }\n+    fn get(&mut self) -> &(Any + Send) {\n+        self.fill()\n     }\n }\n \n+/// The entry point for panicking with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `panic!()` has as low an impact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n+#[cfg(not(stage0))]\n+#[unstable(feature = \"libstd_sys_internals\",\n+           reason = \"used by the panic! macro\",\n+           issue = \"0\")]\n+#[inline(never)] #[cold]\n+pub fn begin_panic_fmt(msg: &fmt::Arguments,\n+                       file_line_col: &(&'static str, u32, u32)) -> ! {\n+    let (file, line, col) = *file_line_col;\n+    let info = PanicInfo::internal_constructor(\n+        Some(msg),\n+        Location::internal_constructor(file, line, col),\n+    );\n+    continue_panic_fmt(&info)\n+}\n+\n+#[cfg(not(stage0))]\n+fn continue_panic_fmt(info: &PanicInfo) -> ! {\n+    // We do two allocations here, unfortunately. But (a) they're\n+    // required with the current scheme, and (b) we don't handle\n+    // panic + OOM properly anyway (see comment in begin_panic\n+    // below).\n+\n+    let loc = info.location().unwrap(); // The current implementation always returns Some\n+    let msg = info.message().unwrap(); // The current implementation always returns Some\n+    let file_line_col = (loc.file(), loc.line(), loc.column());\n+    rust_panic_with_hook(\n+        &mut PanicPayload::new(msg),\n+        info.message(),\n+        &file_line_col);\n+}\n+\n /// This is the entry point of panicking for panic!() and assert!().\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n@@ -431,7 +479,7 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n /// abort or unwind.\n fn rust_panic_with_hook(payload: &mut BoxMeUp,\n                         message: Option<&fmt::Arguments>,\n-                        file_line_col: &(&'static str, u32, u32)) -> ! {\n+                        file_line_col: &(&str, u32, u32)) -> ! {\n     let (file, line, col) = *file_line_col;\n \n     let panics = update_panic_count(1);"}, {"sha": "17118e4dff2ee8d87f0287d8ce230c9b58854cdf", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -473,6 +473,8 @@ declare_features! (\n     // 'a: { break 'a; }\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n+    // #[panic_implementation]\n+    (active, panic_implementation, \"1.28.0\", Some(44489), None),\n );\n \n declare_features! (\n@@ -1069,6 +1071,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"attribute is currently unstable\",\n                                  cfg_fn!(wasm_custom_section))),\n \n+    // RFC 2070\n+    (\"panic_implementation\", Normal, Gated(Stability::Unstable,\n+                           \"panic_implementation\",\n+                           \"#[panic_implementation] is an unstable feature\",\n+                           cfg_fn!(panic_implementation))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),"}, {"sha": "db16ac325ac595c8d93335623d8e90c67a3859b8", "filename": "src/test/compile-fail/auxiliary/some-panic-impl.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+#![feature(panic_implementation)]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "176aa7cca53576065e0044acb25ff7660be18536", "filename": "src/test/compile-fail/duplicate_entry_error.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -14,9 +14,11 @@\n \n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() -> ! {\n-//~^ ERROR: duplicate lang item found: `panic_fmt`.\n+use std::panic::PanicInfo;\n+\n+#[lang = \"panic_impl\"]\n+fn panic_impl(info: &PanicInfo) -> ! {\n+//~^ ERROR: duplicate lang item found: `panic_impl`.\n     loop {}\n }\n "}, {"sha": "7368564e250d1b7a7e9a8c487f417e6ca125196f", "filename": "src/test/compile-fail/edition-extern-crate-allowed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -12,8 +12,9 @@\n // compile-flags: --edition 2015\n // compile-pass\n \n-#![deny(rust_2018_idioms)]\n+#![warn(rust_2018_idioms)]\n \n extern crate edition_extern_crate_allowed;\n+//~^ WARNING unused extern crate\n \n fn main() {}"}, {"sha": "ae9fbc7b13bd53db338dfc94f6e316e40194f767", "filename": "src/test/compile-fail/feature-gate-panic-implementation.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation] //~ ERROR #[panic_implementation] is an unstable feature (see issue #44489)\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "1c2bf1573dcc1900e2f2becbc6396ccc58a016f0", "filename": "src/test/compile-fail/no_owned_box_lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -21,4 +21,4 @@ fn main() {\n \n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n #[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\n-#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\n+#[lang = \"panic_impl\"] fn panic_impl() -> ! { loop {} }"}, {"sha": "fec11fdbd7ba13c247029efd2e81bbacffe88cb1", "filename": "src/test/compile-fail/panic-implementation-bad-signature-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(\n+    info: PanicInfo, //~ ERROR argument should be `&PanicInfo`\n+) -> () //~ ERROR return type should be `!`\n+{\n+}"}, {"sha": "2a628c05699cc57cd4fea776f700686dccc0e9b4", "filename": "src/test/compile-fail/panic-implementation-bad-signature-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(\n+    info: &'static PanicInfo, //~ ERROR argument should be `&PanicInfo`\n+) -> !\n+{\n+    loop {}\n+}"}, {"sha": "29337025b707667924b002781b83114bc558031b", "filename": "src/test/compile-fail/panic-implementation-bad-signature-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic() -> ! { //~ ERROR function should have one argument\n+    loop {}\n+}"}, {"sha": "d5f942ba2d62fc29b760d805042dd990c33abb70", "filename": "src/test/compile-fail/panic-implementation-bad-signature-4.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic<T>(pi: &PanicInfo) -> ! {\n+    //~^ ERROR `#[panic_implementation]` function should have no type parameters\n+    loop {}\n+}"}, {"sha": "017113af409bb2870e798d8bd9c94bbce3a46a72", "filename": "src/test/compile-fail/panic-implementation-duplicate.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(lang_items)]\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"panic_impl\"]\n+fn panic2(info: &PanicInfo) -> ! { //~ ERROR duplicate lang item found: `panic_impl`.\n+    loop {}\n+}"}, {"sha": "597f44d98326dc6e441cb4ea81bcd76462f44cf4", "filename": "src/test/compile-fail/panic-implementation-requires-panic-info.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+// error-pattern: language item required, but not found: `panic_info`\n+\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![feature(panic_implementation)]\n+#![no_core]\n+#![no_main]\n+\n+#[panic_implementation]\n+fn panic() -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}"}, {"sha": "f25cd3605c1dd00450651b1a9d06cf1cfaeee375", "filename": "src/test/compile-fail/panic-implementation-std.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-std.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: duplicate lang item found: `panic_impl`.\n+\n+#![feature(panic_implementation)]\n+\n+use std::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "78dc545c036f889b27420d8c4caf8c35ebcaff41", "filename": "src/test/compile-fail/panic-implementation-twice.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-twice.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:some-panic-impl.rs\n+\n+#![feature(panic_implementation)]\n+#![feature(lang_items)]\n+#![no_std]\n+#![no_main]\n+\n+extern crate some_panic_impl;\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    //~^ error duplicate lang item found: `panic_impl`\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh() {}"}, {"sha": "d9848a554aba5bbde1a5c0a0458e7d29c72e36c4", "filename": "src/test/compile-fail/panic-runtime/auxiliary/panic-runtime-lang-items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -15,8 +15,10 @@\n #![no_std]\n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() {}\n+use core::panic::PanicInfo;\n+\n+#[lang = \"panic_impl\"]\n+fn panic_impl(info: &PanicInfo) -> ! { loop {} }\n #[lang = \"eh_personality\"]\n fn eh_personality() {}\n #[lang = \"eh_unwind_resume\"]"}, {"sha": "7b988c3595f5eb123a90e1f299e1199d0c7030c0", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:weak-lang-items.rs\n-// error-pattern: language item required, but not found: `panic_fmt`\n+// error-pattern: language item required, but not found: `panic_impl`\n // error-pattern: language item required, but not found: `eh_personality`\n // ignore-wasm32-bare compiled with panic=abort, personality not required\n "}, {"sha": "928bdf532df8e0ab113a163e25d84831deea25f9", "filename": "src/test/run-make-fulldeps/issue-36710/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+ifeq (musl,$(findstring musl,$(TARGET)))\n+all: skip\n+else\n+all: test\n+endif\n+\n+test: foo\n+\t$(call RUN,foo)\n+\n+skip:\n+\techo \"expected failure\"\n+\n+foo: foo.rs $(call NATIVE_STATICLIB,foo)\n+\t$(RUSTC) $< -lfoo $(EXTRACXXFLAGS)\n+\n+$(TMPDIR)/libfoo.o: foo.cpp\n+\t$(call COMPILE_OBJ_CXX,$@,$<)\n+\n+.PHONY: all test skip"}, {"sha": "fbd0ead7a506cb9de7ea3766d3b8c4a68c1a7738", "filename": "src/test/run-make-fulldeps/issue-36710/foo.cpp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <stdint.h>\n+\n+struct A {\n+    A() { v = 1234; }\n+    ~A() { v = 1; }\n+    uint32_t v;\n+};\n+\n+A a;\n+\n+extern \"C\" {\n+    uint32_t get() {\n+        return a.v;\n+    }\n+}"}, {"sha": "6e50566ddfde02850b20ff9acf743915ad94d7f3", "filename": "src/test/run-make-fulldeps/issue-36710/foo.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that linking to C++ code with global destructors works.\n+\n+extern { fn get() -> u32; }\n+\n+fn main() {\n+    let i = unsafe { get() };\n+    assert_eq!(i, 1234);\n+}"}, {"sha": "1714578b2ba288d1f1198c8ee472ff8ca923a342", "filename": "src/test/run-make-fulldeps/panic-impl-transitive/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2FMakefile?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,7 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# NOTE we use --emit=llvm-ir to avoid running the linker (linking will fail because there's no main\n+# in this crate)\n+all:\n+\t$(RUSTC) panic-impl-provider.rs\n+\t$(RUSTC) panic-impl-consumer.rs -C panic=abort --emit=llvm-ir -L $(TMPDIR)"}, {"sha": "592fab8be85ece9c8b9a59a59c8692cbe5f3585b", "filename": "src/test/run-make-fulldeps/panic-impl-transitive/panic-impl-consumer.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-consumer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-consumer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-consumer.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![no_main]\n+\n+// this crate provides the `panic_impl` lang item so we don't need to define it here\n+extern crate panic_impl_provider;"}, {"sha": "46cdf2e2fa55e5397fb4d60ccdc436acebbbec8d", "filename": "src/test/run-make-fulldeps/panic-impl-transitive/panic-impl-provider.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-provider.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-provider.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpanic-impl-transitive%2Fpanic-impl-provider.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(panic_implementation)]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "3de358fa50007140e480d160ec4b66e01d70d08d", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -59,12 +59,14 @@ endif\n \n ifdef IS_MSVC\n COMPILE_OBJ = $(CC) -c -Fo:`cygpath -w $(1)` $(2)\n+COMPILE_OBJ_CXX = $(CXX) -c -Fo:`cygpath -w $(1)` $(2)\n NATIVE_STATICLIB_FILE = $(1).lib\n NATIVE_STATICLIB = $(TMPDIR)/$(call NATIVE_STATICLIB_FILE,$(1))\n OUT_EXE=-Fe:`cygpath -w $(TMPDIR)/$(call BIN,$(1))` \\\n \t-Fo:`cygpath -w $(TMPDIR)/$(1).obj`\n else\n COMPILE_OBJ = $(CC) -c -o $(1) $(2)\n+COMPILE_OBJ_CXX = $(CXX) -c -o $(1) $(2)\n NATIVE_STATICLIB_FILE = lib$(1).a\n NATIVE_STATICLIB = $(call STATICLIB,$(1))\n OUT_EXE=-o $(TMPDIR)/$(1)"}, {"sha": "fa34b49210a6a5b90341da4a932df66a92341bea", "filename": "src/test/run-pass/const-endianess.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-pass%2Fconst-endianess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frun-pass%2Fconst-endianess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-endianess.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_int_ops)]\n+#![feature(test)]\n+\n+extern crate test;\n+use test::black_box as b;\n+\n+const BE_U32: u32 = 55u32.to_be();\n+const LE_U32: u32 = 55u32.to_le();\n+\n+\n+fn main() {\n+    assert_eq!(BE_U32, b(55u32).to_be());\n+    assert_eq!(LE_U32, b(55u32).to_le());\n+\n+    #[cfg(not(target_arch = \"asmjs\"))]\n+    {\n+        const BE_U128: u128 = 999999u128.to_be();\n+        const LE_I128: i128 = -999999i128.to_le();\n+        assert_eq!(BE_U128, b(999999u128).to_be());\n+        assert_eq!(LE_I128, b(-999999i128).to_le());\n+    }\n+}"}, {"sha": "830aaabf9d231c801fd9fac3f18e03d104fd1ccf", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -10,7 +10,9 @@\n \n // compile-pass\n \n-//! Test with [Foo::baz], [Bar::foo], [Uniooon::X]\n+//! Test with [Foo::baz], [Bar::foo], ...\n+//!\n+//! and [Uniooon::X].\n \n pub struct Foo {\n     pub bar: usize,"}, {"sha": "1e8e9f04c26ace303e17597274859488e1cee8f9", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1,6 +1,39 @@\n warning: [Foo::baz] cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:1\n+   |\n+13 | / //! Test with [Foo::baz], [Bar::foo], ...\n+14 | | //!\n+15 | | //! and [Uniooon::X].\n+   | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            Test with [Foo::baz], [Bar::foo], ...\n+                       ^^^^^^^^\n \n warning: [Bar::foo] cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:1\n+   |\n+13 | / //! Test with [Foo::baz], [Bar::foo], ...\n+14 | | //!\n+15 | | //! and [Uniooon::X].\n+   | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            Test with [Foo::baz], [Bar::foo], ...\n+                                   ^^^^^^^^\n \n warning: [Uniooon::X] cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:1\n+   |\n+13 | / //! Test with [Foo::baz], [Bar::foo], ...\n+14 | | //!\n+15 | | //! and [Uniooon::X].\n+   | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            and [Uniooon::X].\n+                 ^^^^^^^^^^\n "}, {"sha": "d46f96844117212cb2bd055e25f57dd14a335733", "filename": "src/test/rustdoc/rustc-macro-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n+// ignore-stage1\n \n #![crate_type = \"proc-macro\"]\n "}, {"sha": "00d10408b4c91346b5dce57e51542c219a78697d", "filename": "src/test/rustdoc/trait-attributes.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+pub trait Foo {\n+    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//div[@class=\"docblock attributes\"]' '#[must_use]'\n+    #[must_use]\n+    fn foo();\n+}\n+\n+#[must_use]\n+pub struct Bar;\n+\n+impl Bar {\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//div[@class=\"docblock attributes\"]' '#[must_use]'\n+    #[must_use]\n+    pub fn bar() {}\n+\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//div[@class=\"docblock attributes\"]' '#[must_use]'\n+    #[must_use]\n+    pub fn bar2() {}\n+}"}, {"sha": "0811c79b0a4b9d5d50a4abd343c8756934c855d5", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs", "status": "modified", "additions": 63, "deletions": 21, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -10,48 +10,90 @@\n \n // compile-flags: --edition 2018\n \n-#![deny(unnecessary_extern_crates)]\n+#![deny(unused_extern_crates)]\n #![feature(alloc, test, libc)]\n \n extern crate alloc;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n+//~^ ERROR unused extern crate\n //~| HELP remove\n extern crate alloc as x;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n-//~| HELP use `use`\n+//~^ ERROR unused extern crate\n+//~| HELP remove\n \n #[macro_use]\n extern crate test;\n+\n pub extern crate test as y;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n-//~| HELP use `pub use`\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `pub use`\n+\n pub extern crate libc;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n-//~| HELP use `pub use`\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `pub use`\n+\n+pub(crate) extern crate libc as a;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `pub(crate) use`\n \n+crate extern crate libc as b;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `crate use`\n \n mod foo {\n+    pub(in crate::foo) extern crate libc as c;\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it to a `pub(in crate::foo) use`\n+\n+    pub(super) extern crate libc as d;\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it to a `pub(super) use`\n+\n     extern crate alloc;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `use`\n+    //~^ ERROR unused extern crate\n+    //~| HELP remove\n+\n     extern crate alloc as x;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `use`\n+    //~^ ERROR unused extern crate\n+    //~| HELP remove\n+\n     pub extern crate test;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `pub use`\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it\n+\n     pub extern crate test as y;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `pub use`\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it\n+\n     mod bar {\n         extern crate alloc;\n-        //~^ ERROR `extern crate` is unnecessary in the new edition\n-        //~| HELP use `use`\n+        //~^ ERROR unused extern crate\n+        //~| HELP remove\n+\n         extern crate alloc as x;\n-        //~^ ERROR `extern crate` is unnecessary in the new edition\n-        //~| HELP use `use`\n+        //~^ ERROR unused extern crate\n+        //~| HELP remove\n+\n+        pub(in crate::foo::bar) extern crate libc as e;\n+        //~^ ERROR `extern crate` is not idiomatic in the new edition\n+        //~| HELP convert it to a `pub(in crate::foo::bar) use`\n+\n+        fn dummy() {\n+            unsafe {\n+                e::getpid();\n+            }\n+        }\n+    }\n+\n+    fn dummy() {\n+        unsafe {\n+            c::getpid();\n+            d::getpid();\n+        }\n     }\n }\n \n \n-fn main() {}\n+fn main() {\n+    unsafe { a::getpid(); }\n+    unsafe { b::getpid(); }\n+}"}, {"sha": "a4307112157b068e6929388aad3faf9c90127ce6", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.stderr", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1,4 +1,4 @@\n-error: `extern crate` is unnecessary in the new edition\n+error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:16:1\n    |\n LL | extern crate alloc;\n@@ -7,62 +7,92 @@ LL | extern crate alloc;\n note: lint level defined here\n   --> $DIR/unnecessary-extern-crate.rs:13:9\n    |\n-LL | #![deny(unnecessary_extern_crates)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(unused_extern_crates)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: `extern crate` is unnecessary in the new edition\n+error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:19:1\n    |\n LL | extern crate alloc as x;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x;`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:25:1\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:26:1\n    |\n LL | pub extern crate test as y;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y;`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:28:1\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:30:1\n    |\n LL | pub extern crate libc;\n-   | ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use libc;`\n+   | ^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:34:5\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:34:1\n+   |\n+LL | pub(crate) extern crate libc as a;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(crate) use`\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:38:1\n+   |\n+LL | crate extern crate libc as b;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `crate use`\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:43:5\n+   |\n+LL |     pub(in crate::foo) extern crate libc as c;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(in crate::foo) use`\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:47:5\n+   |\n+LL |     pub(super) extern crate libc as d;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(super) use`\n+\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:51:5\n    |\n LL |     extern crate alloc;\n-   |     ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc;`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:37:5\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:55:5\n    |\n LL |     extern crate alloc as x;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x;`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:40:5\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:59:5\n    |\n LL |     pub extern crate test;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test;`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:43:5\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:63:5\n    |\n LL |     pub extern crate test as y;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y;`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:47:9\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:68:9\n    |\n LL |         extern crate alloc;\n-   |         ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc;`\n+   |         ^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:50:9\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:72:9\n    |\n LL |         extern crate alloc as x;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x;`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:76:9\n+   |\n+LL |         pub(in crate::foo::bar) extern crate libc as e;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(in crate::foo::bar) use`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "95acdab3e80012e3c7c94d179e2667901c7fc3b2", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.nll.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,63 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:21\n+   |\n+LL |   fn gimme_static_mut_let() -> &'static mut u32 {\n+   |  _______________________________________________-\n+LL | |     let ref mut x = 1234543; //~ ERROR\n+   | |                     ^^^^^^^ temporary value does not live long enough\n+LL | |     x\n+LL | | }\n+   | | -\n+   | | |\n+   | |_temporary value only lives until here\n+   |   borrow later used here\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:20:25\n+   |\n+LL |   fn gimme_static_mut_let_nested() -> &'static mut u32 {\n+   |  ______________________________________________________-\n+LL | |     let (ref mut x, ) = (1234543, ); //~ ERROR\n+   | |                         ^^^^^^^^^^^ temporary value does not live long enough\n+LL | |     x\n+LL | | }\n+   | | -\n+   | | |\n+   | |_temporary value only lives until here\n+   |   borrow later used here\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:25:11\n+   |\n+LL |     match 1234543 {\n+   |           ^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:31:11\n+   |\n+LL |     match (123443,) {\n+   |           ^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:37:10\n+   |\n+LL |     &mut 1234543 //~ ERROR\n+   |          ^^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "4c5f458d6a35f010ce9ffedc22d52619728d3d20", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we fail to promote the constant here which has a `ref\n+// mut` borrow.\n+\n+fn gimme_static_mut_let() -> &'static mut u32 {\n+    let ref mut x = 1234543; //~ ERROR\n+    x\n+}\n+\n+fn gimme_static_mut_let_nested() -> &'static mut u32 {\n+    let (ref mut x, ) = (1234543, ); //~ ERROR\n+    x\n+}\n+\n+fn gimme_static_mut_match() -> &'static mut u32 {\n+    match 1234543 {\n+        ref mut x => x //~ ERROR\n+    }\n+}\n+\n+fn gimme_static_mut_match_nested() -> &'static mut u32 {\n+    match (123443,) {\n+        (ref mut x,) => x, //~ ERROR\n+    }\n+}\n+\n+fn gimme_static_mut_ampersand() -> &'static mut u32 {\n+    &mut 1234543 //~ ERROR\n+}\n+\n+fn main() {\n+}"}, {"sha": "931eb7da744e94b412d6873e22a2d508fd3b5af6", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,57 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:9\n+   |\n+LL |     let ref mut x = 1234543; //~ ERROR\n+   |         ^^^^^^^^^ temporary value does not live long enough\n+LL |     x\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:20:10\n+   |\n+LL |     let (ref mut x, ) = (1234543, ); //~ ERROR\n+   |          ^^^^^^^^^ borrowed value does not live long enough\n+LL |     x\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:26:9\n+   |\n+LL |         ref mut x => x //~ ERROR\n+   |         ^^^^^^^^^ temporary value does not live long enough\n+LL |     }\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:32:10\n+   |\n+LL |         (ref mut x,) => x, //~ ERROR\n+   |          ^^^^^^^^^ borrowed value does not live long enough\n+LL |     }\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:37:10\n+   |\n+LL |     &mut 1234543 //~ ERROR\n+   |          ^^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "43375098cb5b4e6e515e85dfb7611062de483064", "filename": "src/test/ui/deriving-with-repr-packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -33,7 +33,7 @@ pub struct Bar(u32, u32, u32);\n struct Y(usize);\n \n #[derive(PartialEq)]\n-//~^ ERROR #[derive] can't be used on a non-Copy #[repr(packed)]\n+//~^ ERROR #[derive] can't be used\n //~| hard error\n #[repr(packed)]\n struct X(Y);"}, {"sha": "a7599c1e7db34d6e10a604d24e4f0610dfd5ab21", "filename": "src/test/ui/deriving-with-repr-packed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -21,7 +21,7 @@ LL | #[derive(Copy, Clone, PartialEq, Eq)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n-error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n+error: #[derive] can't be used on a #[repr(packed)] struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:26:10\n    |\n LL | #[derive(PartialEq, Eq)]\n@@ -30,7 +30,7 @@ LL | #[derive(PartialEq, Eq)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n-error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n+error: #[derive] can't be used on a #[repr(packed)] struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:35:10\n    |\n LL | #[derive(PartialEq)]"}, {"sha": "8fbad7b3ff301c0acd32e4cff9c11de2ec973051", "filename": "src/test/ui/error-codes/E0152.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n struct Foo; //~ ERROR E0152\n \n fn main() {"}, {"sha": "c7f5f362efb28492ccadfc82b5102ba16bb82731", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1,4 +1,4 @@\n-error[E0152]: duplicate lang item found: `panic_fmt`.\n+error[E0152]: duplicate lang item found: `panic_impl`.\n   --> $DIR/E0152.rs:14:1\n    |\n LL | struct Foo; //~ ERROR E0152"}, {"sha": "d87f239bca6906e865613569637a5ece0d89c80c", "filename": "src/test/ui/issue-23217.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -6,7 +6,7 @@ LL | pub enum SomeEnum {\n LL |     B = SomeEnum::A,\n    |         ^^^^^^^^^^^ variant not found in `SomeEnum`\n    |\n-   = note: did you mean `variant::B`?\n+   = note: did you mean `SomeEnum::B`?\n \n error: aborting due to previous error\n "}, {"sha": "c04e21f7c58572d7e6e63bd10dfc3ed01317e62b", "filename": "src/test/ui/issue-28971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -7,7 +7,7 @@ LL | enum Foo {\n LL |             Foo::Baz(..) => (),\n    |             ^^^^^^^^^^^^ variant not found in `Foo`\n    |\n-   = note: did you mean `variant::Bar`?\n+   = note: did you mean `Foo::Bar`?\n \n error: aborting due to previous error\n "}, {"sha": "c12c74b50e26402bbb54b2e5042dd19337073160", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -20,7 +20,7 @@ warning: unused extern crate\n   --> $DIR/basic.rs:33:5\n    |\n LL |     extern crate core as _; //~ WARN unused extern crate\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/basic.rs:14:25"}, {"sha": "4f99c1240f8f49a65baf52352a6e6ee8e91ca146", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:edition-lint-paths.rs\n+// run-rustfix\n+// compile-flags:--edition 2018\n+\n+// The \"normal case\". Ideally we would remove the `extern crate` here,\n+// but we don't.\n+\n+#![feature(rust_2018_preview)]\n+#![deny(rust_2018_idioms)]\n+#![allow(dead_code)]\n+\n+\n+//~^ ERROR unused extern crate\n+\n+use edition_lint_paths as bar;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+\n+fn main() {\n+    // This is not considered to *use* the `extern crate` in Rust 2018:\n+    use edition_lint_paths::foo;\n+    foo();\n+\n+    // But this should be a use of the (renamed) crate:\n+    crate::bar::foo();\n+}\n+"}, {"sha": "9c1235a296799cdd238f5a55705e3c7e18cd28fe", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:edition-lint-paths.rs\n+// run-rustfix\n+// compile-flags:--edition 2018\n+\n+// The \"normal case\". Ideally we would remove the `extern crate` here,\n+// but we don't.\n+\n+#![feature(rust_2018_preview)]\n+#![deny(rust_2018_idioms)]\n+#![allow(dead_code)]\n+\n+extern crate edition_lint_paths;\n+//~^ ERROR unused extern crate\n+\n+extern crate edition_lint_paths as bar;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+\n+fn main() {\n+    // This is not considered to *use* the `extern crate` in Rust 2018:\n+    use edition_lint_paths::foo;\n+    foo();\n+\n+    // But this should be a use of the (renamed) crate:\n+    crate::bar::foo();\n+}\n+"}, {"sha": "b3afa2bd1d59289bb9c7ffd23a23829793436a7b", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -0,0 +1,21 @@\n+error: unused extern crate\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:22:1\n+   |\n+LL | extern crate edition_lint_paths;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+   |\n+note: lint level defined here\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:19:9\n+   |\n+LL | #![deny(rust_2018_idioms)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: #[deny(unused_extern_crates)] implied by #[deny(rust_2018_idioms)]\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:25:1\n+   |\n+LL | extern crate edition_lint_paths as bar;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "83b35cec80956847ff2141afc27d63697b8b209f", "filename": "src/test/ui/suggestions/removing-extern-crate.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.fixed?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -16,12 +16,12 @@\n #![warn(rust_2018_idioms)]\n #![allow(unused_imports)]\n \n-use std as foo;\n+\n \n \n mod another {\n-    use std as foo;\n-    use std;\n+    \n+    \n }\n \n fn main() {}"}, {"sha": "f2eed27a2669391ad97f746eaaad535ecf11ad56", "filename": "src/test/ui/suggestions/removing-extern-crate.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1,31 +1,31 @@\n-warning: `extern crate` is unnecessary in the new edition\n+warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:19:1\n    |\n LL | extern crate std as foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use std as foo;`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/removing-extern-crate.rs:16:9\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[warn(unnecessary_extern_crates)] implied by #[warn(rust_2018_idioms)]\n+   = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n \n-warning: `extern crate` is unnecessary in the new edition\n+warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:20:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n \n-warning: `extern crate` is unnecessary in the new edition\n+warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:23:5\n    |\n LL |     extern crate std as foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use std as foo;`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-warning: `extern crate` is unnecessary in the new edition\n+warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:24:5\n    |\n LL |     extern crate std;\n-   |     ^^^^^^^^^^^^^^^^^ help: use `use`: `use std;`\n+   |     ^^^^^^^^^^^^^^^^^ help: remove it\n "}, {"sha": "cc00f200171d88261db9d626de728b9fdaa01fb9", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f2f1935dbdcac023f2f682226792f2ad79315a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -2529,7 +2529,7 @@ impl<'test> TestCx<'test> {\n                 .env(\"IS_WINDOWS\", \"1\")\n                 .env(\"MSVC_LIB\", format!(\"'{}' -nologo\", lib.display()))\n                 .env(\"CC\", format!(\"'{}' {}\", self.config.cc, cflags))\n-                .env(\"CXX\", &self.config.cxx);\n+                .env(\"CXX\", format!(\"'{}'\", &self.config.cxx));\n         } else {\n             cmd.env(\"CC\", format!(\"{} {}\", self.config.cc, self.config.cflags))\n                 .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags))"}, {"sha": "e1734470e780e05a3366a2f74cfa25ea88a518a5", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=72f2f1935dbdcac023f2f682226792f2ad79315a", "patch": "@@ -1 +1 @@\n-Subproject commit 066a284557ff6e6a2aa19084f599f167a724af7b\n+Subproject commit e1734470e780e05a3366a2f74cfa25ea88a518a5"}]}