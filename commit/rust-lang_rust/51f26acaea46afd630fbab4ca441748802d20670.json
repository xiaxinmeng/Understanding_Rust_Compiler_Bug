{"sha": "51f26acaea46afd630fbab4ca441748802d20670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZjI2YWNhZWE0NmFmZDYzMGZiYWI0Y2E0NDE3NDg4MDJkMjA2NzA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-28T07:00:58Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-28T11:25:43Z"}, "message": "Fix text overlap", "tree": {"sha": "6acefd9cc5492e79feecaa5195893ec8d90b115c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6acefd9cc5492e79feecaa5195893ec8d90b115c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51f26acaea46afd630fbab4ca441748802d20670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51f26acaea46afd630fbab4ca441748802d20670", "html_url": "https://github.com/rust-lang/rust/commit/51f26acaea46afd630fbab4ca441748802d20670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51f26acaea46afd630fbab4ca441748802d20670/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ac1b5faab32d268a85dfde6c6592b7183c5864", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ac1b5faab32d268a85dfde6c6592b7183c5864", "html_url": "https://github.com/rust-lang/rust/commit/14ac1b5faab32d268a85dfde6c6592b7183c5864"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "2eee60890e87d410e01d0e88a16beefd2760effc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -2243,14 +2243,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n                       implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> Result<(), fmt::Error> {\n-    write!(w, \"<li>\")?;\n-    if let Some(l) = (Item { cx, item: &implementor.impl_item }).src_href() {\n-        write!(w, \"<div class='out-of-band'>\")?;\n-        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n-                    l, \"goto source code\")?;\n-        write!(w, \"</div>\")?;\n-    }\n-    write!(w, \"<code>\")?;\n+    write!(w, \"<li><table class='table-display'><tbody><tr><td><code>\")?;\n     // If there's already another implementor that has the same abbridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n@@ -2269,7 +2262,14 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n             write!(w, \";</span>\")?;\n         }\n     }\n-    writeln!(w, \"</code></li>\")?;\n+    write!(w, \"</code><td>\")?;\n+    if let Some(l) = (Item { cx, item: &implementor.impl_item }).src_href() {\n+        write!(w, \"<div class='out-of-band'>\")?;\n+        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                    l, \"goto source code\")?;\n+        write!(w, \"</div>\")?;\n+    }\n+    writeln!(w, \"</td></tr></tbody></table></li>\")?;\n     Ok(())\n }\n \n@@ -3314,10 +3314,11 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             Some(ref t) => format!(\"impl-{}\", small_url_encode(&format!(\"{:#}\", t))),\n             None => \"impl\".to_string(),\n         });\n-        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><code>{}</code>\",\n+        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n+                   <tbody><tr><td><code>{}</code>\",\n                id, i.inner_impl())?;\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n-        write!(w, \"</span><span class='out-of-band'>\")?;\n+        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n         if let Some(l) = (Item { item: &i.impl_item, cx: cx }).src_href() {\n             write!(w, \"<div class='ghost'></div>\")?;\n@@ -3327,8 +3328,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         } else {\n             render_stability_since_raw(w, since, outer_version)?;\n         }\n-        write!(w, \"</span>\")?;\n-        write!(w, \"</h3>\\n\")?;\n+        write!(w, \"</span></td></tr></tbody></table></h3>\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             write!(w, \"<div class='docblock'>{}</div>\",\n                    Markdown(&*dox, &i.impl_item.links()))?;\n@@ -3357,19 +3357,20 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n                     write!(w, \"{}\", spotlight_decl(decl)?)?;\n                     write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n-                    write!(w, \"<code>\")?;\n+                    write!(w, \"<table class='table-display'><tbody><tr><td><code>\")?;\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl)?;\n                     write!(w, \"</code>\")?;\n                     if let Some(l) = (Item { cx, item }).src_href() {\n-                        write!(w, \"</span><span class='out-of-band'>\")?;\n+                        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n                         write!(w, \"<div class='ghost'></div>\")?;\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                         write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n                                l, \"goto source code\")?;\n                     } else {\n+                        write!(w, \"</td><td>\")?;\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     }\n-                    write!(w, \"</span></h4>\\n\")?;\n+                    write!(w, \"</td></tr></tbody></table></span></h4>\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {"}, {"sha": "5fb2aa4ef74f8c9ac0e2947fe524d8cb9e76a9ad", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -387,8 +387,6 @@ h4 > code, h3 > code, .invisible > code {\n .content .in-band {\n \tmargin: 0px;\n \tpadding: 0px;\n-\tdisplay: inline-block;\n-\tmax-width: calc(100% - 43px);\n }\n \n .in-band > code {\n@@ -403,7 +401,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-family: \"Fira Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n }\n \n-.content table {\n+.content table:not(.table-display) {\n \tborder-spacing: 0 5px;\n \tborder-collapse: separate;\n }\n@@ -470,7 +468,6 @@ h4 > code, h3 > code, .invisible > code {\n .content .methods > div:not(.important-traits) { margin-left: 40px; }\n \n .content .impl-items .docblock, .content .impl-items .stability {\n-\tmargin-left: 40px;\n \tmargin-bottom: .6em;\n }\n .content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n@@ -1254,3 +1251,28 @@ kbd {\n \t/* important because of conflicting rule for small screens */\n \tdisplay: none !important;\n }\n+\n+#implementations-list > h3 > span.in-band {\n+\twidth: 100%;\n+}\n+\n+.table-display {\n+\twidth: 100%;\n+\tborder: 0;\n+\tborder-collapse: collapse;\n+\tborder-spacing: 0;\n+\tfont-size: 16px;\n+}\n+\n+.table-display tr td:first-child {\n+\tpadding-right: 0;\n+}\n+\n+.table-display tr td:last-child {\n+\tfloat: right;\n+}\n+.table-display .out-of-band {\n+\tposition: relative;\n+\tfont-size: 19px;\n+\tdisplay: block;\n+}"}, {"sha": "a4ebf6d3a7e8335cd76aa2b497bace29caaaa843", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -30,7 +30,7 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'a, T, K: \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'a, T, K: \\\n // ?Sized> Send for NotOuter<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n "}, {"sha": "1c1e7bc2505261bd6efcc69b89a5e486853f1577", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -18,10 +18,10 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "ef6797ecf3c54277ce872fd01541907a3e46d171", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' 'impl<T> Sync for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' 'impl<T> Sync for \\\n // Foo<T> where T: Sync'\n //\n-// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]/*/code' \\\n+// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//*/code' \\\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 1"}, {"sha": "64480d28240b648eff8e9072b4b5b90e3fd1ddea", "filename": "src/test/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -13,10 +13,10 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<T> !Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> !Send for \\\n // Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<T> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> \\\n // !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,"}, {"sha": "ccdbe159b6c5a5c5144e69812cc3bec5f695943d", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -18,10 +18,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' 'impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' 'impl<T> Send for \\\n // Foo<T> where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \\\n // 'impl<T> Sync for Foo<T> where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "24fba221b99372947d21a520f5d1a0f2fd49a507", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -19,7 +19,7 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> Send for \\\n // Outer<T> where T: Copy + Send\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,"}, {"sha": "d588190c4f9d20748c4a373e835ede65af562684", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f26acaea46afd630fbab4ca441748802d20670/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=51f26acaea46afd630fbab4ca441748802d20670", "patch": "@@ -33,10 +33,10 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}]}