{"sha": "e014277b07049f0638662f4040c2af7b119cc8a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTQyNzdiMDcwNDlmMDYzODY2MmY0MDQwYzJhZjdiMTE5Y2M4YTQ=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-05-21T17:35:49Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-09T17:49:07Z"}, "message": "Ignore automatically derived impls of `Clone` and `Debug` in dead code analysis", "tree": {"sha": "34778651989ab9179c763571d4737a4f5d32ea4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34778651989ab9179c763571d4737a4f5d32ea4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e014277b07049f0638662f4040c2af7b119cc8a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e014277b07049f0638662f4040c2af7b119cc8a4", "html_url": "https://github.com/rust-lang/rust/commit/e014277b07049f0638662f4040c2af7b119cc8a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e014277b07049f0638662f4040c2af7b119cc8a4/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6271dedd8d1b72e8860ebeb19576be2fefd9bc2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6271dedd8d1b72e8860ebeb19576be2fefd9bc2d", "html_url": "https://github.com/rust-lang/rust/commit/6271dedd8d1b72e8860ebeb19576be2fefd9bc2d"}], "stats": {"total": 37, "additions": 6, "deletions": 31}, "files": [{"sha": "779a1149f413e5fa262104989096379340e91f8c", "filename": "src/macros.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e014277b07049f0638662f4040c2af7b119cc8a4/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e014277b07049f0638662f4040c2af7b119cc8a4/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=e014277b07049f0638662f4040c2af7b119cc8a4", "patch": "@@ -762,7 +762,6 @@ impl MacroArgKind {\n #[derive(Debug, Clone)]\n struct ParsedMacroArg {\n     kind: MacroArgKind,\n-    span: Span,\n }\n \n impl ParsedMacroArg {\n@@ -780,14 +779,10 @@ impl ParsedMacroArg {\n struct MacroArgParser {\n     /// Either a name of the next metavariable, a separator, or junk.\n     buf: String,\n-    /// The start position on the current buffer.\n-    lo: BytePos,\n     /// The first token of the current buffer.\n     start_tok: Token,\n     /// `true` if we are parsing a metavariable or a repeat.\n     is_meta_var: bool,\n-    /// The position of the last token.\n-    hi: BytePos,\n     /// The last token parsed.\n     last_tok: Token,\n     /// Holds the parsed arguments.\n@@ -807,8 +802,6 @@ fn last_tok(tt: &TokenTree) -> Token {\n impl MacroArgParser {\n     fn new() -> MacroArgParser {\n         MacroArgParser {\n-            lo: BytePos(0),\n-            hi: BytePos(0),\n             buf: String::new(),\n             is_meta_var: false,\n             last_tok: Token {\n@@ -824,7 +817,6 @@ impl MacroArgParser {\n     }\n \n     fn set_last_tok(&mut self, tok: &TokenTree) {\n-        self.hi = tok.span().hi();\n         self.last_tok = last_tok(tok);\n     }\n \n@@ -836,7 +828,6 @@ impl MacroArgParser {\n         };\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Separator(self.buf.clone(), prefix),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         self.buf.clear();\n     }\n@@ -849,7 +840,6 @@ impl MacroArgParser {\n         };\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Other(self.buf.clone(), prefix),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         self.buf.clear();\n     }\n@@ -858,11 +848,10 @@ impl MacroArgParser {\n         match iter.next() {\n             Some(TokenTree::Token(Token {\n                 kind: TokenKind::Ident(name, _),\n-                span,\n+                ..\n             })) => {\n                 self.result.push(ParsedMacroArg {\n                     kind: MacroArgKind::MetaVariable(name, self.buf.clone()),\n-                    span: mk_sp(self.lo, span.hi()),\n                 });\n \n                 self.buf.clear();\n@@ -873,10 +862,9 @@ impl MacroArgParser {\n         }\n     }\n \n-    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: DelimToken, span: Span) {\n+    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: DelimToken) {\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Delimited(delim, inner),\n-            span,\n         });\n     }\n \n@@ -886,19 +874,15 @@ impl MacroArgParser {\n         inner: Vec<ParsedMacroArg>,\n         delim: DelimToken,\n         iter: &mut Cursor,\n-        span: Span,\n     ) -> Option<()> {\n         let mut buffer = String::new();\n         let mut first = true;\n-        let mut lo = span.lo();\n-        let mut hi = span.hi();\n \n         // Parse '*', '+' or '?.\n         for tok in iter {\n             self.set_last_tok(&tok);\n             if first {\n                 first = false;\n-                lo = tok.span().lo();\n             }\n \n             match tok {\n@@ -918,7 +902,6 @@ impl MacroArgParser {\n                 }\n                 TokenTree::Token(ref t) => {\n                     buffer.push_str(&pprust::token_to_string(&t));\n-                    hi = t.span.hi();\n                 }\n                 _ => return None,\n             }\n@@ -930,20 +913,17 @@ impl MacroArgParser {\n         } else {\n             Some(Box::new(ParsedMacroArg {\n                 kind: MacroArgKind::Other(buffer, \"\".to_owned()),\n-                span: mk_sp(lo, hi),\n             }))\n         };\n \n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Repeat(delim, inner, another, self.last_tok.clone()),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         Some(())\n     }\n \n     fn update_buffer(&mut self, t: &Token) {\n         if self.buf.is_empty() {\n-            self.lo = t.span.lo();\n             self.start_tok = t.clone();\n         } else {\n             let needs_space = match next_space(&self.last_tok.kind) {\n@@ -999,7 +979,6 @@ impl MacroArgParser {\n \n                     // Start keeping the name of this metavariable in the buffer.\n                     self.is_meta_var = true;\n-                    self.lo = span.lo();\n                     self.start_tok = Token {\n                         kind: TokenKind::Dollar,\n                         span,\n@@ -1012,7 +991,7 @@ impl MacroArgParser {\n                     self.add_meta_variable(&mut iter)?;\n                 }\n                 TokenTree::Token(ref t) => self.update_buffer(t),\n-                TokenTree::Delimited(delimited_span, delimited, ref tts) => {\n+                TokenTree::Delimited(_delimited_span, delimited, ref tts) => {\n                     if !self.buf.is_empty() {\n                         if next_space(&self.last_tok.kind) == SpaceState::Always {\n                             self.add_separator();\n@@ -1022,16 +1001,14 @@ impl MacroArgParser {\n                     }\n \n                     // Parse the stuff inside delimiters.\n-                    let mut parser = MacroArgParser::new();\n-                    parser.lo = delimited_span.open.lo();\n+                    let parser = MacroArgParser::new();\n                     let delimited_arg = parser.parse(tts.clone())?;\n \n-                    let span = delimited_span.entire();\n                     if self.is_meta_var {\n-                        self.add_repeat(delimited_arg, delimited, &mut iter, span)?;\n+                        self.add_repeat(delimited_arg, delimited, &mut iter)?;\n                         self.is_meta_var = false;\n                     } else {\n-                        self.add_delimited(delimited_arg, delimited, span);\n+                        self.add_delimited(delimited_arg, delimited);\n                     }\n                 }\n             }"}, {"sha": "ded34d9032f91f188c11c9437b41691cdcce75b5", "filename": "src/modules.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e014277b07049f0638662f4040c2af7b119cc8a4/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e014277b07049f0638662f4040c2af7b119cc8a4/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=e014277b07049f0638662f4040c2af7b119cc8a4", "patch": "@@ -27,7 +27,6 @@ type FileModMap<'ast> = BTreeMap<FileName, Module<'ast>>;\n pub(crate) struct Module<'a> {\n     ast_mod_kind: Option<Cow<'a, ast::ModKind>>,\n     pub(crate) items: Cow<'a, Vec<rustc_ast::ptr::P<ast::Item>>>,\n-    attrs: Cow<'a, Vec<ast::Attribute>>,\n     inner_attr: Vec<ast::Attribute>,\n     pub(crate) span: Span,\n }\n@@ -46,7 +45,6 @@ impl<'a> Module<'a> {\n             .collect();\n         Module {\n             items: mod_items,\n-            attrs: mod_attrs,\n             inner_attr,\n             span: mod_span,\n             ast_mod_kind,"}]}