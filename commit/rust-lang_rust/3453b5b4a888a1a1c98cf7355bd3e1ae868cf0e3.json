{"sha": "3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NTNiNWI0YTg4OGExYTFjOThjZjczNTViZDNlMWFlODY4Y2YwZTM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-03-15T01:08:09Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-03-15T01:08:09Z"}, "message": "Remove incorrect references to _raw stdio functions\n\nstd::io does not currently expose the stdin_raw, stdout_raw, or\nstderr_raw functions. According to the current plans for stdio (see RFC\n#517), raw access will likely be provided using the platform-specific\nstd::os::{unix,windows} modules. At the moment we don't expose any way\nto do this. As such, delete all mention of the _raw functions from the\nstdin/stdout/stderr function documentation.\n\nWhile we're at it, remove a few `pub`s from items that aren't exposed.\nThis is done just to lessen the confusion experienced by anyone who\nlooks at the source in an attempt to find the _raw functions.", "tree": {"sha": "d6e3de89c6c8edb6ac9efd83c778aeec71192a69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e3de89c6c8edb6ac9efd83c778aeec71192a69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3", "html_url": "https://github.com/rust-lang/rust/commit/3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3400c9ed9f1200a59f6452db5c71af2182db29a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3400c9ed9f1200a59f6452db5c71af2182db29a5", "html_url": "https://github.com/rust-lang/rust/commit/3400c9ed9f1200a59f6452db5c71af2182db29a5"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "0e68be8d9e25b5feb3f84e2b3c269a15de8c7117", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=3453b5b4a888a1a1c98cf7355bd3e1ae868cf0e3", "patch": "@@ -21,20 +21,20 @@ use sys::stdio;\n /// A handle to a raw instance of the standard input stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n-/// the `std::io::stdin_raw` function.\n-pub struct StdinRaw(stdio::Stdin);\n+/// the `std::io::stdio::stdin_raw` function.\n+struct StdinRaw(stdio::Stdin);\n \n /// A handle to a raw instance of the standard output stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n-/// the `std::io::stdout_raw` function.\n-pub struct StdoutRaw(stdio::Stdout);\n+/// the `std::io::stdio::stdout_raw` function.\n+struct StdoutRaw(stdio::Stdout);\n \n /// A handle to a raw instance of the standard output stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n-/// the `std::io::stderr_raw` function.\n-pub struct StderrRaw(stdio::Stderr);\n+/// the `std::io::stdio::stderr_raw` function.\n+struct StderrRaw(stdio::Stderr);\n \n /// Construct a new raw handle to the standard input of this process.\n ///\n@@ -43,7 +43,7 @@ pub struct StderrRaw(stdio::Stderr);\n /// handles is **not** available to raw handles returned from this function.\n ///\n /// The returned handle has no external synchronization or buffering.\n-pub fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n+fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n \n /// Construct a new raw handle to the standard input stream of this process.\n ///\n@@ -54,7 +54,7 @@ pub fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-pub fn stdout_raw() -> StdoutRaw { StdoutRaw(stdio::Stdout::new()) }\n+fn stdout_raw() -> StdoutRaw { StdoutRaw(stdio::Stdout::new()) }\n \n /// Construct a new raw handle to the standard input stream of this process.\n ///\n@@ -63,7 +63,7 @@ pub fn stdout_raw() -> StdoutRaw { StdoutRaw(stdio::Stdout::new()) }\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-pub fn stderr_raw() -> StderrRaw { StderrRaw(stdio::Stderr::new()) }\n+fn stderr_raw() -> StderrRaw { StderrRaw(stdio::Stderr::new()) }\n \n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n@@ -109,9 +109,6 @@ pub struct StdinLock<'a> {\n /// The `Read` trait is implemented for the returned value but the `BufRead`\n /// trait is not due to the global nature of the standard input stream. The\n /// locked version, `StdinLock`, implements both `Read` and `BufRead`, however.\n-///\n-/// To avoid locking and buffering altogether, it is recommended to use the\n-/// `stdin_raw` constructor.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n     static INSTANCE: Lazy<Mutex<BufReader<StdinRaw>>> = lazy_init!(stdin_init);\n@@ -224,9 +221,6 @@ pub struct StdoutLock<'a> {\n /// provided via the `lock` method.\n ///\n /// The returned handle implements the `Write` trait.\n-///\n-/// To avoid locking and buffering altogether, it is recommended to use the\n-/// `stdout_raw` constructor.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n     static INSTANCE: Lazy<Mutex<LineWriter<StdoutRaw>>> = lazy_init!(stdout_init);\n@@ -297,9 +291,6 @@ pub struct StderrLock<'a> {\n /// this function. No handles are buffered, however.\n ///\n /// The returned handle implements the `Write` trait.\n-///\n-/// To avoid locking altogether, it is recommended to use the `stderr_raw`\n-/// constructor.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stderr() -> Stderr {\n     static INSTANCE: Lazy<Mutex<StderrRaw>> = lazy_init!(stderr_init);"}]}