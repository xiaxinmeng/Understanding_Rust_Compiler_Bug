{"sha": "bf52e262e20efaaadf3fec47f20880ffc171a34f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTJlMjYyZTIwZWZhYWFkZjNmZWM0N2YyMDg4MGZmYzE3MWEzNGY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T22:23:01Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:14Z"}, "message": "trans: remove remaining boxed closures", "tree": {"sha": "de1b8d4b576b1bb05407851a5c36f2caa9e8dc3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de1b8d4b576b1bb05407851a5c36f2caa9e8dc3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf52e262e20efaaadf3fec47f20880ffc171a34f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf52e262e20efaaadf3fec47f20880ffc171a34f", "html_url": "https://github.com/rust-lang/rust/commit/bf52e262e20efaaadf3fec47f20880ffc171a34f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf52e262e20efaaadf3fec47f20880ffc171a34f/comments", "author": null, "committer": null, "parents": [{"sha": "977e151b9a74af6cdb92b7afb57a4dbacc799841", "url": "https://api.github.com/repos/rust-lang/rust/commits/977e151b9a74af6cdb92b7afb57a4dbacc799841", "html_url": "https://github.com/rust-lang/rust/commit/977e151b9a74af6cdb92b7afb57a4dbacc799841"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "9814a4ed183a81b20affe508c22b4ca191fb74d1", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bf52e262e20efaaadf3fec47f20880ffc171a34f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf52e262e20efaaadf3fec47f20880ffc171a34f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=bf52e262e20efaaadf3fec47f20880ffc171a34f", "patch": "@@ -669,30 +669,31 @@ pub fn compare_simd_types<'blk, 'tcx>(\n     }\n }\n \n-pub type val_and_ty_fn<'a, 'blk, 'tcx> =\n-    |Block<'blk, 'tcx>, ValueRef, Ty<'tcx>|: 'a -> Block<'blk, 'tcx>;\n-\n // Iterates through the elements of a structural type.\n-pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n-                                          av: ValueRef,\n-                                          t: Ty<'tcx>,\n-                                          f: val_and_ty_fn<'a, 'blk, 'tcx>)\n-                                          -> Block<'blk, 'tcx> {\n+pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n+                                         av: ValueRef,\n+                                         t: Ty<'tcx>,\n+                                         mut f: F)\n+                                         -> Block<'blk, 'tcx> where\n+    F: FnMut(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"iter_structural_ty\");\n \n-    fn iter_variant<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n-                                    repr: &adt::Repr<'tcx>,\n-                                    av: ValueRef,\n-                                    variant: &ty::VariantInfo<'tcx>,\n-                                    substs: &subst::Substs<'tcx>,\n-                                    f: val_and_ty_fn<'a, 'blk, 'tcx>)\n-                                    -> Block<'blk, 'tcx> {\n+    fn iter_variant<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n+                                   repr: &adt::Repr<'tcx>,\n+                                   av: ValueRef,\n+                                   variant: &ty::VariantInfo<'tcx>,\n+                                   substs: &subst::Substs<'tcx>,\n+                                   f: &mut F)\n+                                   -> Block<'blk, 'tcx> where\n+        F: FnMut(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+    {\n         let _icx = push_ctxt(\"iter_variant\");\n         let tcx = cx.tcx();\n         let mut cx = cx;\n \n         for (i, &arg) in variant.args.iter().enumerate() {\n-            cx = f(cx,\n+            cx = (*f)(cx,\n                    adt::trans_field_ptr(cx, repr, av, variant.disr_val, i),\n                    arg.subst(tcx, substs));\n         }\n@@ -764,7 +765,7 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n           match adt::trans_switch(cx, &*repr, av) {\n               (_match::Single, None) => {\n                   cx = iter_variant(cx, &*repr, av, &*(*variants)[0],\n-                                    substs, f);\n+                                    substs, &mut f);\n               }\n               (_match::Switch, Some(lldiscrim_a)) => {\n                   cx = f(cx, lldiscrim_a, cx.tcx().types.int);\n@@ -793,7 +794,7 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                        data_ptr,\n                                        &**variant,\n                                        substs,\n-                                       |x,y,z| f(x,y,z));\n+                                       &mut f);\n                       Br(variant_cx, next_cx.llbb);\n                   }\n                   cx = next_cx;"}, {"sha": "116ce2bf51dbeb19ddebf290c7b216524b2bfd93", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf52e262e20efaaadf3fec47f20880ffc171a34f/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf52e262e20efaaadf3fec47f20880ffc171a34f/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=bf52e262e20efaaadf3fec47f20880ffc171a34f", "patch": "@@ -531,13 +531,14 @@ fn declare_generic_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n     return (fn_nm, llfn);\n }\n \n-fn make_generic_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                               t: Ty<'tcx>,\n-                               llfn: ValueRef,\n-                               helper: for<'blk> |Block<'blk, 'tcx>, ValueRef, Ty<'tcx>|\n-                                                  -> Block<'blk, 'tcx>,\n-                               name: &str)\n-                               -> ValueRef {\n+fn make_generic_glue<'a, 'tcx, F>(ccx: &CrateContext<'a, 'tcx>,\n+                                  t: Ty<'tcx>,\n+                                  llfn: ValueRef,\n+                                  helper: F,\n+                                  name: &str)\n+                                  -> ValueRef where\n+    F: for<'blk> FnOnce(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"make_generic_glue\");\n     let glue_name = format!(\"glue {} {}\", name, ty_to_short_str(ccx.tcx(), t));\n     let _s = StatRecorder::new(ccx, glue_name);"}, {"sha": "e3288466aa79c6c617890e58d86360dc15303dc3", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bf52e262e20efaaadf3fec47f20880ffc171a34f/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf52e262e20efaaadf3fec47f20880ffc171a34f/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=bf52e262e20efaaadf3fec47f20880ffc171a34f", "patch": "@@ -416,15 +416,14 @@ pub fn get_base_and_len(bcx: Block,\n     }\n }\n \n-pub type iter_vec_block<'a, 'blk, 'tcx> =\n-    |Block<'blk, 'tcx>, ValueRef, Ty<'tcx>|: 'a -> Block<'blk, 'tcx>;\n-\n-pub fn iter_vec_loop<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n                                      data_ptr: ValueRef,\n                                      vt: &VecTypes<'tcx>,\n                                      count: ValueRef,\n-                                     f: iter_vec_block<'a, 'blk, 'tcx>)\n-                                     -> Block<'blk, 'tcx> {\n+                                     f: F)\n+                                     -> Block<'blk, 'tcx> where\n+    F: FnOnce(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"tvec::iter_vec_loop\");\n     let fcx = bcx.fcx;\n \n@@ -475,12 +474,14 @@ pub fn iter_vec_loop<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     next_bcx\n }\n \n-pub fn iter_vec_raw<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                    data_ptr: ValueRef,\n-                                    unit_ty: Ty<'tcx>,\n-                                    len: ValueRef,\n-                                    f: iter_vec_block<'a, 'blk, 'tcx>)\n-                                    -> Block<'blk, 'tcx> {\n+pub fn iter_vec_raw<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n+                                   data_ptr: ValueRef,\n+                                   unit_ty: Ty<'tcx>,\n+                                   len: ValueRef,\n+                                   f: F)\n+                                   -> Block<'blk, 'tcx> where\n+    F: FnOnce(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"tvec::iter_vec_raw\");\n     let fcx = bcx.fcx;\n "}]}