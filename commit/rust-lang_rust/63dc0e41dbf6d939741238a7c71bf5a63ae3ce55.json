{"sha": "63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZGMwZTQxZGJmNmQ5Mzk3NDEyMzhhN2M3MWJmNWE2M2FlM2NlNTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T11:48:48Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T13:28:40Z"}, "message": "discriminant -> scrutinee", "tree": {"sha": "04176f82b004a5f752539937f3b08f519beaa627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04176f82b004a5f752539937f3b08f519beaa627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "html_url": "https://github.com/rust-lang/rust/commit/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d2cce0ce24981269e6994c332bff7f033b59e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d2cce0ce24981269e6994c332bff7f033b59e0", "html_url": "https://github.com/rust-lang/rust/commit/f8d2cce0ce24981269e6994c332bff7f033b59e0"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "b3a79c0883358895c38b36484d36d500bad2a7d0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "patch": "@@ -607,7 +607,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 source,\n                 ref prior_arms,\n                 last_ty,\n-                discrim_hir_id,\n+                scrut_hir_id,\n                 ..\n             }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n@@ -616,16 +616,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 hir::MatchSource::TryDesugar => {\n                     if let Some(ty::error::ExpectedFound { expected, .. }) = exp_found {\n-                        let discrim_expr = self.tcx.hir().expect_expr(discrim_hir_id);\n-                        let discrim_ty = if let hir::ExprKind::Call(_, args) = &discrim_expr.kind {\n+                        let scrut_expr = self.tcx.hir().expect_expr(scrut_hir_id);\n+                        let scrut_ty = if let hir::ExprKind::Call(_, args) = &scrut_expr.kind {\n                             let arg_expr = args.first().expect(\"try desugaring call w/out arg\");\n                             self.in_progress_tables\n                                 .and_then(|tables| tables.borrow().expr_ty_opt(arg_expr))\n                         } else {\n-                            bug!(\"try desugaring w/out call expr as discriminant\");\n+                            bug!(\"try desugaring w/out call expr as scrutinee\");\n                         };\n \n-                        match discrim_ty {\n+                        match scrut_ty {\n                             Some(ty) if expected == ty => {\n                                 let source_map = self.tcx.sess.source_map();\n                                 err.span_suggestion("}, {"sha": "fe373e02e10f368cbdfb96a3df20b391f60e6b30", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "patch": "@@ -315,7 +315,7 @@ pub struct MatchExpressionArmCause<'tcx> {\n     pub source: hir::MatchSource,\n     pub prior_arms: Vec<Span>,\n     pub last_ty: Ty<'tcx>,\n-    pub discrim_hir_id: hir::HirId,\n+    pub scrut_hir_id: hir::HirId,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "c439f20d640024d4784c1ec58b6ba85470ea643a", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "patch": "@@ -511,14 +511,14 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 source,\n                 ref prior_arms,\n                 last_ty,\n-                discrim_hir_id,\n+                scrut_hir_id,\n             }) => tcx.lift(&last_ty).map(|last_ty| {\n                 super::MatchExpressionArm(box super::MatchExpressionArmCause {\n                     arm_span,\n                     source,\n                     prior_arms: prior_arms.clone(),\n                     last_ty,\n-                    discrim_hir_id,\n+                    scrut_hir_id,\n                 })\n             }),\n             super::Pattern { span, root_ty, origin_expr } => {"}, {"sha": "841dd226b40583166b06679d04abb21459c68a21", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dc0e41dbf6d939741238a7c71bf5a63ae3ce55/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=63dc0e41dbf6d939741238a7c71bf5a63ae3ce55", "patch": "@@ -11,7 +11,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_match(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n-        discrim: &'tcx hir::Expr<'tcx>,\n+        scrut: &'tcx hir::Expr<'tcx>,\n         arms: &'tcx [hir::Arm<'tcx>],\n         expected: Expectation<'tcx>,\n         match_src: hir::MatchSource,\n@@ -27,7 +27,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // Type check the descriminant and get its type.\n-        let discrim_ty = if force_scrutinee_bool {\n+        let scrut_ty = if force_scrutinee_bool {\n             // Here we want to ensure:\n             //\n             // 1. That default match bindings are *not* accepted in the condition of an\n@@ -36,9 +36,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // 2. By expecting `bool` for `expr` we get nice diagnostics for e.g. `if x = y { .. }`.\n             //\n             // FIXME(60707): Consider removing hack with principled solution.\n-            self.check_expr_has_type_or_error(discrim, self.tcx.types.bool, |_| {})\n+            self.check_expr_has_type_or_error(scrut, self.tcx.types.bool, |_| {})\n         } else {\n-            self.demand_discriminant_type(arms, discrim)\n+            self.demand_scrutinee_type(arms, scrut)\n         };\n \n         // If there are no arms, that is a diverging match; a special case.\n@@ -51,7 +51,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Otherwise, we have to union together the types that the\n         // arms produce and so forth.\n-        let discrim_diverges = self.diverges.get();\n+        let scrut_diverges = self.diverges.get();\n         self.diverges.set(Diverges::Maybe);\n \n         // rust-lang/rust#55810: Typecheck patterns first (via eager\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .map(|arm| {\n                 let mut all_pats_diverge = Diverges::WarnedAlways;\n                 self.diverges.set(Diverges::Maybe);\n-                self.check_pat_top(&arm.pat, discrim_ty, Some(discrim.span), true);\n+                self.check_pat_top(&arm.pat, scrut_ty, Some(scrut.span), true);\n                 all_pats_diverge &= self.diverges.get();\n \n                 // As discussed with @eddyb, this is for disabling unreachable_code\n@@ -157,7 +157,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             source: match_src,\n                             prior_arms: other_arms.clone(),\n                             last_ty: prior_arm_ty.unwrap(),\n-                            discrim_hir_id: discrim.hir_id,\n+                            scrut_hir_id: scrut.hir_id,\n                         }),\n                     ),\n                 };\n@@ -186,8 +186,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n         }\n \n-        // We won't diverge unless the discriminant or all arms diverge.\n-        self.diverges.set(discrim_diverges | all_arms_diverge);\n+        // We won't diverge unless the scrutinee or all arms diverge.\n+        self.diverges.set(scrut_diverges | all_arms_diverge);\n \n         coercion.complete(self)\n     }\n@@ -388,14 +388,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    fn demand_discriminant_type(\n+    fn demand_scrutinee_type(\n         &self,\n         arms: &'tcx [hir::Arm<'tcx>],\n-        discrim: &'tcx hir::Expr<'tcx>,\n+        scrut: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         // Not entirely obvious: if matches may create ref bindings, we want to\n-        // use the *precise* type of the discriminant, *not* some supertype, as\n-        // the \"discriminant type\" (issue #23116).\n+        // use the *precise* type of the scrutinee, *not* some supertype, as\n+        // the \"scrutinee type\" (issue #23116).\n         //\n         // arielb1 [writes here in this comment thread][c] that there\n         // is certainly *some* potential danger, e.g., for an example\n@@ -454,17 +454,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n \n         if let Some(m) = contains_ref_bindings {\n-            self.check_expr_with_needs(discrim, Needs::maybe_mut_place(m))\n+            self.check_expr_with_needs(scrut, Needs::maybe_mut_place(m))\n         } else {\n             // ...but otherwise we want to use any supertype of the\n-            // discriminant. This is sort of a workaround, see note (*) in\n+            // scrutinee. This is sort of a workaround, see note (*) in\n             // `check_pat` for some details.\n-            let discrim_ty = self.next_ty_var(TypeVariableOrigin {\n+            let scrut_ty = self.next_ty_var(TypeVariableOrigin {\n                 kind: TypeVariableOriginKind::TypeInference,\n-                span: discrim.span,\n+                span: scrut.span,\n             });\n-            self.check_expr_has_type_or_error(discrim, discrim_ty, |_| {});\n-            discrim_ty\n+            self.check_expr_has_type_or_error(scrut, scrut_ty, |_| {});\n+            scrut_ty\n         }\n     }\n }"}]}