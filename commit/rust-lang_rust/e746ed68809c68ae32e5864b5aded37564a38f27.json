{"sha": "e746ed68809c68ae32e5864b5aded37564a38f27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NDZlZDY4ODA5YzY4YWUzMmU1ODY0YjVhZGVkMzc1NjRhMzhmMjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-06T00:03:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-06T00:03:31Z"}, "message": "rustc: Add cargo's lib directory to search paths", "tree": {"sha": "20f17429d54ef3875415405bcc258ca894b1084a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f17429d54ef3875415405bcc258ca894b1084a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e746ed68809c68ae32e5864b5aded37564a38f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e746ed68809c68ae32e5864b5aded37564a38f27", "html_url": "https://github.com/rust-lang/rust/commit/e746ed68809c68ae32e5864b5aded37564a38f27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e746ed68809c68ae32e5864b5aded37564a38f27/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54cf0e9c0d1151f82e86cab5488162bd7e0706a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/54cf0e9c0d1151f82e86cab5488162bd7e0706a2", "html_url": "https://github.com/rust-lang/rust/commit/54cf0e9c0d1151f82e86cab5488162bd7e0706a2"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "2e119cdb7dd80c7efcfdff8623005f2e0285eb41", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e746ed68809c68ae32e5864b5aded37564a38f27/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e746ed68809c68ae32e5864b5aded37564a38f27/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=e746ed68809c68ae32e5864b5aded37564a38f27", "patch": "@@ -5,6 +5,7 @@ use std;\n \n import rustc::syntax::{ast, codemap, visit};\n import rustc::syntax::parse::parser;\n+import rustc::util::filesearch::get_cargo_root;\n \n import std::fs;\n import std::generic_os;\n@@ -300,14 +301,9 @@ fn load_source_packages(&c: cargo, &src: source) {\n }\n \n fn configure() -> cargo {\n-    let p = alt generic_os::getenv(\"CARGO_ROOT\") {\n-        some(_p) { _p }\n-        none. {\n-            alt generic_os::getenv(\"HOME\") {\n-                some(_q) { fs::connect(_q, \".cargo\") }\n-                none. { fail \"no CARGO_ROOT or HOME\"; }\n-            }\n-        }\n+    let p = alt get_cargo_root() {\n+      result::ok(p) { p }\n+      result::err(e) { fail e }\n     };\n \n     let sources = map::new_str_hash::<source>();"}, {"sha": "e4ac615d97314ca5cdf30b762554a3b8a3c926f5", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e746ed68809c68ae32e5864b5aded37564a38f27/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e746ed68809c68ae32e5864b5aded37564a38f27/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=e746ed68809c68ae32e5864b5aded37564a38f27", "patch": "@@ -6,13 +6,16 @@ import core::option;\n import std::fs;\n import vec;\n import std::os;\n+import result;\n+import std::generic_os;\n \n export filesearch;\n export mk_filesearch;\n export pick;\n export pick_file;\n export search;\n export relative_target_lib_path;\n+export get_cargo_root;\n \n type pick<T> = block(path: fs::path) -> option::t<T>;\n \n@@ -38,6 +41,10 @@ fn mk_filesearch(maybe_sysroot: option::t<fs::path>,\n         fn lib_search_paths() -> [fs::path] {\n             addl_lib_search_paths\n                 + [make_target_lib_path(sysroot, target_triple)]\n+                + alt get_cargo_lib_path() {\n+                  result::ok(p) { [p] }\n+                  result::err(p) { [] }\n+                }\n         }\n \n         fn get_target_lib_path() -> fs::path {\n@@ -99,3 +106,21 @@ fn get_sysroot(maybe_sysroot: option::t<fs::path>) -> fs::path {\n       option::none. { get_default_sysroot() }\n     }\n }\n+\n+fn get_cargo_root() -> result::t<fs::path, str> {\n+    alt generic_os::getenv(\"CARGO_ROOT\") {\n+        some(_p) { result::ok(_p) }\n+        none. {\n+            alt generic_os::getenv(\"HOME\") {\n+                some(_q) { result::ok(fs::connect(_q, \".cargo\")) }\n+                none. { result::err(\"no CARGO_ROOT or HOME\") }\n+            }\n+        }\n+    }\n+}\n+\n+fn get_cargo_lib_path() -> result::t<fs::path, str> {\n+    result::chain(get_cargo_root()) { |p|\n+        result::ok(fs::connect(p, \"lib\"))\n+    }\n+}\n\\ No newline at end of file"}]}