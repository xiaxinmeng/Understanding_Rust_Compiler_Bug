{"sha": "fde38f11742fd789c70c73ba11eca0c430546cfa", "node_id": "C_kwDOAAsO6NoAKGZkZTM4ZjExNzQyZmQ3ODljNzBjNzNiYTExZWNhMGM0MzA1NDZjZmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-20T13:32:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-20T13:32:54Z"}, "message": "Rollup merge of #108124 - kornelski:cstr_c_char, r=thomcc\n\nDocument that CStr::as_ptr returns a type alias\n\nRustdoc resolves type aliases too eagerly #15823 which makes the [std re-export](https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.as_ptr) of `CStr::as_ptr` show `i8` instead of `c_char`. To work around this I've added info about `c_char` in the method's description.\n\nBTW, I've also added a comment to what-not-to-do example in case someone copypasted it without reading the surrounding text.", "tree": {"sha": "8d184e9d9cb8500e607819b988d0f4a0d5e84d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d184e9d9cb8500e607819b988d0f4a0d5e84d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fde38f11742fd789c70c73ba11eca0c430546cfa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj83aGCRBK7hj4Ov3rIwAAjjIIAHwe9blbUdAUXcXYJdhsbzpj\nWvUbO3wkqONuB2AZ76ujaTxn2ppfKIaHa3oOcAk7EOHej/+5/bcpWFo1wfW97oCR\n0KFzkdOtJlAkqfPrOECoy4QV/v4gdlwGJUJ2vkXu07v8GUjnYro5Jo9RJr+OWXRT\nrVtVz/7PFzSn2bNkHQMJvxwyVQXZkfUsLwJi15SRWgzzyG32t+G2kNpcADGu7sZT\nmSA26O+b0J/aWTdXPH+DwIv0U8Ltrtj4OpjKn8jPWL/QBMuXbDMAsT/+sfhOg2fX\n74nSLG6tOkT9RucsR1t7+elwQwdQFfaS7vRZNpMFbI0mV9gDaWVJy/GrBuN452Q=\n=3zAW\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d184e9d9cb8500e607819b988d0f4a0d5e84d47\nparent e7eaed21d50d7bfb8d614d6ee7fcea940b39185d\nparent fd8947095678c61c5cbc70509e053621baca282d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676899974 +0100\ncommitter GitHub <noreply@github.com> 1676899974 +0100\n\nRollup merge of #108124 - kornelski:cstr_c_char, r=thomcc\n\nDocument that CStr::as_ptr returns a type alias\n\nRustdoc resolves type aliases too eagerly #15823 which makes the [std re-export](https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.as_ptr) of `CStr::as_ptr` show `i8` instead of `c_char`. To work around this I've added info about `c_char` in the method's description.\n\nBTW, I've also added a comment to what-not-to-do example in case someone copypasted it without reading the surrounding text.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fde38f11742fd789c70c73ba11eca0c430546cfa", "html_url": "https://github.com/rust-lang/rust/commit/fde38f11742fd789c70c73ba11eca0c430546cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fde38f11742fd789c70c73ba11eca0c430546cfa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7eaed21d50d7bfb8d614d6ee7fcea940b39185d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7eaed21d50d7bfb8d614d6ee7fcea940b39185d", "html_url": "https://github.com/rust-lang/rust/commit/e7eaed21d50d7bfb8d614d6ee7fcea940b39185d"}, {"sha": "fd8947095678c61c5cbc70509e053621baca282d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8947095678c61c5cbc70509e053621baca282d", "html_url": "https://github.com/rust-lang/rust/commit/fd8947095678c61c5cbc70509e053621baca282d"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "87f077325f8bef527102c17c1bcdbb810cc98bc9", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fde38f11742fd789c70c73ba11eca0c430546cfa/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde38f11742fd789c70c73ba11eca0c430546cfa/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=fde38f11742fd789c70c73ba11eca0c430546cfa", "patch": "@@ -457,6 +457,10 @@ impl CStr {\n     /// to a contiguous region of memory terminated with a 0 byte to represent\n     /// the end of the string.\n     ///\n+    /// The type of the returned pointer is\n+    /// [`*const c_char`][crate::ffi::c_char], and whether it's\n+    /// an alias for `*const i8` or `*const u8` is platform-specific.\n+    ///\n     /// **WARNING**\n     ///\n     /// The returned pointer is read-only; writing to it (including passing it\n@@ -470,6 +474,7 @@ impl CStr {\n     /// # #![allow(unused_must_use)] #![allow(temporary_cstring_as_ptr)]\n     /// use std::ffi::CString;\n     ///\n+    /// // Do not do this:\n     /// let ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();\n     /// unsafe {\n     ///     // `ptr` is dangling"}]}