{"sha": "cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiM2E1NTdlMGNhZTY1ZDVkNGExZDg3ZWU0MzE2ZTc5OTUxODhjMzQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-07T19:59:03Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-09T19:52:06Z"}, "message": "trans: deal with the fact that ZSTs are always \"initialized\".", "tree": {"sha": "419433231694feffa9890f10a4b6a687241e03f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/419433231694feffa9890f10a4b6a687241e03f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "html_url": "https://github.com/rust-lang/rust/commit/cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3a557e0cae65d5d4a1d87ee4316e7995188c34/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d460597e3373c7ec2a54f64faf6a1f8874b958bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d460597e3373c7ec2a54f64faf6a1f8874b958bd", "html_url": "https://github.com/rust-lang/rust/commit/d460597e3373c7ec2a54f64faf6a1f8874b958bd"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "b39a6ac1ce38178ea3da711a16b0e31a362804e2", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb3a557e0cae65d5d4a1d87ee4316e7995188c34/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3a557e0cae65d5d4a1d87ee4316e7995188c34/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "patch": "@@ -16,11 +16,11 @@ use abi;\n use adt;\n use base;\n use builder::Builder;\n-use common::{self, BlockAndBuilder, CrateContext, C_uint};\n+use common::{self, BlockAndBuilder, CrateContext, C_uint, C_undef};\n use consts;\n use machine;\n+use type_of::type_of;\n use mir::drop;\n-use llvm;\n use Disr;\n \n use std::ptr;\n@@ -116,10 +116,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     // Ergo, we return an undef ValueRef, so we do not have to special-case every\n                     // place using lvalues, and could use it the same way you use a regular\n                     // ReturnPointer LValue (i.e. store into it, load from it etc).\n-                    let llty = fcx.fn_ty.ret.original_ty.ptr_to();\n-                    unsafe {\n-                        llvm::LLVMGetUndef(llty.to_ref())\n-                    }\n+                    C_undef(fcx.fn_ty.ret.original_ty.ptr_to())\n                 };\n                 let fn_return_ty = bcx.monomorphize(&self.mir.return_ty);\n                 let return_ty = fn_return_ty.unwrap();\n@@ -228,7 +225,19 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         ret\n                     }\n                     TempRef::Operand(Some(_)) => {\n-                        bug!(\"Lvalue temp already set\");\n+                        let lvalue_ty = self.mir.lvalue_ty(bcx.tcx(), lvalue);\n+                        let lvalue_ty = bcx.monomorphize(&lvalue_ty);\n+\n+                        // See comments in TempRef::new_operand as to why\n+                        // we always have Some in a ZST TempRef::Operand.\n+                        let ty = lvalue_ty.to_ty(bcx.tcx());\n+                        if common::type_is_zero_size(bcx.ccx(), ty) {\n+                            // Pass an undef pointer as no stores can actually occur.\n+                            let llptr = C_undef(type_of(bcx.ccx(), ty).ptr_to());\n+                            f(self, LvalueRef::new_sized(llptr, lvalue_ty))\n+                        } else {\n+                            bug!(\"Lvalue temp already set\");\n+                        }\n                     }\n                 }\n             }"}, {"sha": "31e2c8925711cc28959bda1a13351178f03ceb14", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb3a557e0cae65d5d4a1d87ee4316e7995188c34/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3a557e0cae65d5d4a1d87ee4316e7995188c34/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "patch": "@@ -138,6 +138,15 @@ fn test_fn_nil_call<F>(f: &F) -> i32\n     f()\n }\n \n+#[rustc_mir]\n+fn test_fn_transmute_zst(x: ()) -> [(); 1] {\n+    fn id<T>(x: T) -> T {x}\n+\n+    id(unsafe {\n+        std::mem::transmute(x)\n+    })\n+}\n+\n fn main() {\n     assert_eq!(test1(1, (2, 3), &[4, 5, 6]), (1, (2, 3), &[4, 5, 6][..]));\n     assert_eq!(test2(98), 98);\n@@ -159,4 +168,5 @@ fn main() {\n     assert_eq!(test_fn_direct_call(&closure, 100, 4), 324);\n \n     assert_eq!(test_fn_nil_call(&(|| 42)), 42);\n+    assert_eq!(test_fn_transmute_zst(()), [()]);\n }"}]}