{"sha": "fc069d3241bae47273c969c34fa2d95113dc0b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDY5ZDMyNDFiYWU0NzI3M2M5NjljMzRmYTJkOTUxMTNkYzBiMGQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-16T08:14:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-16T08:16:31Z"}, "message": "Remove remains of rustc_dirty.", "tree": {"sha": "89eda732f332eae7635cee808fe9fe336ad5b2b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89eda732f332eae7635cee808fe9fe336ad5b2b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc069d3241bae47273c969c34fa2d95113dc0b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc069d3241bae47273c969c34fa2d95113dc0b0d", "html_url": "https://github.com/rust-lang/rust/commit/fc069d3241bae47273c969c34fa2d95113dc0b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc069d3241bae47273c969c34fa2d95113dc0b0d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175345b8640e774089fd89cddc000f677c4fb316", "url": "https://api.github.com/repos/rust-lang/rust/commits/175345b8640e774089fd89cddc000f677c4fb316", "html_url": "https://github.com/rust-lang/rust/commit/175345b8640e774089fd89cddc000f677c4fb316"}], "stats": {"total": 135, "additions": 56, "deletions": 79}, "files": [{"sha": "987efdc1f7ade10b76894ad2b94552c5c6406505", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -567,10 +567,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(TEST, rustc_dump_user_substs, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_if_this_changed, AssumedUsed, template!(Word, List: \"DepNode\")),\n     rustc_attr!(TEST, rustc_then_this_would_need, AssumedUsed, template!(List: \"DepNode\")),\n-    rustc_attr!(\n-        TEST, rustc_dirty, AssumedUsed,\n-        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n-    ),\n     rustc_attr!(\n         TEST, rustc_clean, AssumedUsed,\n         template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),"}, {"sha": "9abd4eae914b3652efe7f806a0126b2802907346", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 18, "deletions": 43, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -1,6 +1,5 @@\n-//! Debugging code to test fingerprints computed for query results.\n-//! For each node marked with `#[rustc_clean]` or `#[rustc_dirty]`,\n-//! we will compare the fingerprint from the current and from the previous\n+//! Debugging code to test fingerprints computed for query results.  For each node marked with\n+//! `#[rustc_clean]` we will compare the fingerprint from the current and from the previous\n //! compilation session as appropriate:\n //!\n //! - `#[rustc_clean(cfg=\"rev2\", except=\"typeck\")]` if we are\n@@ -132,7 +131,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n         return;\n     }\n \n-    // can't add `#[rustc_dirty]` etc without opting in to this feature\n+    // can't add `#[rustc_clean]` etc without opting in to this feature\n     if !tcx.features().rustc_attrs {\n         return;\n     }\n@@ -142,11 +141,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n         let mut dirty_clean_visitor = DirtyCleanVisitor { tcx, checked_attrs: Default::default() };\n         krate.visit_all_item_likes(&mut dirty_clean_visitor);\n \n-        let mut all_attrs = FindAllAttrs {\n-            tcx,\n-            attr_names: &[sym::rustc_dirty, sym::rustc_clean],\n-            found_attrs: vec![],\n-        };\n+        let mut all_attrs = FindAllAttrs { tcx, found_attrs: vec![] };\n         intravisit::walk_crate(&mut all_attrs, krate);\n \n         // Note that we cannot use the existing \"unused attribute\"-infrastructure\n@@ -164,29 +159,20 @@ pub struct DirtyCleanVisitor<'tcx> {\n impl DirtyCleanVisitor<'tcx> {\n     /// Possibly \"deserialize\" the attribute into a clean/dirty assertion\n     fn assertion_maybe(&mut self, item_id: LocalDefId, attr: &Attribute) -> Option<Assertion> {\n-        let is_clean = if self.tcx.sess.check_name(attr, sym::rustc_dirty) {\n-            false\n-        } else if self.tcx.sess.check_name(attr, sym::rustc_clean) {\n-            true\n-        } else {\n+        if !self.tcx.sess.check_name(attr, sym::rustc_clean) {\n             // skip: not rustc_clean/dirty\n             return None;\n-        };\n+        }\n         if !check_config(self.tcx, attr) {\n             // skip: not the correct `cfg=`\n             return None;\n         }\n-        let assertion = self.assertion_auto(item_id, attr, is_clean);\n+        let assertion = self.assertion_auto(item_id, attr);\n         Some(assertion)\n     }\n \n     /// Gets the \"auto\" assertion on pre-validated attr, along with the `except` labels.\n-    fn assertion_auto(\n-        &mut self,\n-        item_id: LocalDefId,\n-        attr: &Attribute,\n-        is_clean: bool,\n-    ) -> Assertion {\n+    fn assertion_auto(&mut self, item_id: LocalDefId, attr: &Attribute) -> Assertion {\n         let (name, mut auto) = self.auto_labels(item_id, attr);\n         let except = self.except(attr);\n         for e in except.iter() {\n@@ -198,11 +184,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 self.tcx.sess.span_fatal(attr.span, &msg);\n             }\n         }\n-        if is_clean {\n-            Assertion { clean: auto, dirty: except }\n-        } else {\n-            Assertion { clean: except, dirty: auto }\n-        }\n+        Assertion { clean: auto, dirty: except }\n     }\n \n     /// `except=` attribute value\n@@ -398,9 +380,8 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     }\n }\n \n-/// Given a `#[rustc_dirty]` or `#[rustc_clean]` attribute, scan\n-/// for a `cfg=\"foo\"` attribute and check whether we have a cfg\n-/// flag called `foo`.\n+/// Given a `#[rustc_clean]` attribute, scan for a `cfg=\"foo\"` attribute and check whether we have\n+/// a cfg flag called `foo`.\n fn check_config(tcx: TyCtxt<'_>, attr: &Attribute) -> bool {\n     debug!(\"check_config(attr={:?})\", attr);\n     let config = &tcx.sess.parse_sess.config;\n@@ -436,21 +417,18 @@ fn expect_associated_value(tcx: TyCtxt<'_>, item: &NestedMetaItem) -> Symbol {\n     }\n }\n \n-// A visitor that collects all #[rustc_dirty]/#[rustc_clean] attributes from\n+// A visitor that collects all #[rustc_clean] attributes from\n // the HIR. It is used to verify that we really ran checks for all annotated\n // nodes.\n-pub struct FindAllAttrs<'a, 'tcx> {\n+pub struct FindAllAttrs<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    attr_names: &'a [Symbol],\n     found_attrs: Vec<&'tcx Attribute>,\n }\n \n-impl FindAllAttrs<'_, 'tcx> {\n+impl FindAllAttrs<'tcx> {\n     fn is_active_attr(&mut self, attr: &Attribute) -> bool {\n-        for attr_name in self.attr_names {\n-            if self.tcx.sess.check_name(attr, *attr_name) && check_config(self.tcx, attr) {\n-                return true;\n-            }\n+        if self.tcx.sess.check_name(attr, sym::rustc_clean) && check_config(self.tcx, attr) {\n+            return true;\n         }\n \n         false\n@@ -459,17 +437,14 @@ impl FindAllAttrs<'_, 'tcx> {\n     fn report_unchecked_attrs(&self, mut checked_attrs: FxHashSet<ast::AttrId>) {\n         for attr in &self.found_attrs {\n             if !checked_attrs.contains(&attr.id) {\n-                self.tcx.sess.span_err(\n-                    attr.span,\n-                    \"found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\",\n-                );\n+                self.tcx.sess.span_err(attr.span, \"found unchecked `#[rustc_clean]` attribute\");\n                 checked_attrs.insert(attr.id);\n             }\n         }\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for FindAllAttrs<'_, 'tcx> {\n+impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "11d999ab32859b7b90e2e2b4de2583742ccd84d1", "filename": "src/test/incremental/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -25,7 +25,10 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_dirty(except=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of,fn_sig\",\n+        cfg=\"cfail2\",\n+    )]\n     pub fn y() {\n         //[cfail2]~^ ERROR `hir_owner(y)` should be dirty but is not\n         //[cfail2]~| ERROR `hir_owner_nodes(y)` should be dirty but is not"}, {"sha": "76bff3cad3882b56f63c85242941680da0ba21a5", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -370,7 +370,7 @@ enum EnumChangeNameOfTypeParameter<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameOfTypeParameter<T> {\n     Variant1(T),\n@@ -386,7 +386,7 @@ enum EnumAddTypeParameter<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTypeParameter<S, T> {\n     Variant1(S),\n@@ -402,7 +402,7 @@ enum EnumChangeNameOfLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"predicates_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameOfLifetimeParameter<'b> {\n     Variant1(&'b u32),\n@@ -418,7 +418,7 @@ enum EnumAddLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"predicates_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameter<'a, 'b> {\n     Variant1(&'a u32),\n@@ -435,7 +435,7 @@ enum EnumAddLifetimeParameterBound<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"generics_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n     Variant1(&'a u32),\n@@ -450,7 +450,7 @@ enum EnumAddLifetimeBoundToParameter<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n     Variant1(T),\n@@ -466,7 +466,7 @@ enum EnumAddTraitBound<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTraitBound<T: Sync> {\n     Variant1(T),\n@@ -482,7 +482,7 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"generics_of,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n     Variant1(&'a u32),\n@@ -499,7 +499,7 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n     Variant1(T),\n@@ -515,7 +515,7 @@ enum EnumAddTraitBoundWhere<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTraitBoundWhere<T> where T: Sync {\n     Variant1(T),"}, {"sha": "1160bc376c49a182296ec26f99496eac7b9c79c2", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -21,7 +21,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn change_function_name2(c: i64) -> i32;\n@@ -34,7 +34,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn change_parameter_name(d: i64) -> i32;\n@@ -47,7 +47,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn change_parameter_type(c: i32) -> i32;\n@@ -60,7 +60,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn change_return_type(c: i32) -> i8;\n@@ -73,7 +73,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn add_parameter(c: i32, d: i32) -> i32;\n@@ -86,7 +86,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn add_return_type(c: i32) -> i32;\n@@ -99,7 +99,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn make_function_variadic(c: i32, ...);\n@@ -112,7 +112,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"rust-call\" {\n     pub fn change_calling_convention(c: i32);\n@@ -125,7 +125,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn make_function_public(c: i32);\n@@ -138,7 +138,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn add_function1(c: i32);\n@@ -153,7 +153,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail2\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[link(name = \"bar\")]\n extern \"C\" {\n@@ -170,7 +170,7 @@ mod indirectly_change_parameter_type {\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg = \"cfail2\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     extern \"C\" {\n         pub fn indirectly_change_parameter_type(c: c_int);\n@@ -184,7 +184,7 @@ mod indirectly_change_return_type {\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg = \"cfail2\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     extern \"C\" {\n         pub fn indirectly_change_return_type() -> c_int;"}, {"sha": "284a95f1a68b627fff0f3fc14a246e738ed335d4", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -103,7 +103,10 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of,promoted_mir\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,generics_of,typeck,associated_item,optimized_mir\",\n+    )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n }"}, {"sha": "3c8692a302ddd259418cd1a5875b07266102b9dc", "filename": "src/test/incremental/unchecked_dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -4,31 +4,31 @@\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n \n-// Sanity check for the dirty-clean system. We add #[rustc_dirty]/#[rustc_clean]\n+// Sanity check for the dirty-clean system. We add #[rustc_clean]\n // attributes in places that are not checked and make sure that this causes an\n // error.\n \n fn main() {\n \n     #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n \n     #[rustc_clean(cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n }\n \n struct _Struct {\n     #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_clean]` attribute\n     _field1: i32,\n \n     #[rustc_clean(cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_clean]` attribute\n     _field2: i32,\n }"}, {"sha": "a45bf24f8c1fffe40656e33780b0f524d68b7e08", "filename": "src/test/ui/dep-graph/dep-graph-check-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-check-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-check-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-check-attr.rs?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -5,7 +5,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#[rustc_dirty(hir_owner)] //~ ERROR attribute requires -Z query-dep-graph\n+#[rustc_clean(hir_owner)] //~ ERROR attribute requires -Z query-dep-graph\n fn main() {}\n \n #[rustc_if_this_changed(hir_owner)] //~ ERROR attribute requires -Z query-dep-graph"}, {"sha": "46f4e4358cf6a146abb03e71559fef9c4dd71bb7", "filename": "src/test/ui/dep-graph/dep-graph-check-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-check-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc069d3241bae47273c969c34fa2d95113dc0b0d/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-check-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-check-attr.stderr?ref=fc069d3241bae47273c969c34fa2d95113dc0b0d", "patch": "@@ -1,7 +1,7 @@\n error: attribute requires -Z query-dep-graph to be enabled\n   --> $DIR/dep-graph-check-attr.rs:8:1\n    |\n-LL | #[rustc_dirty(hir_owner)]\n+LL | #[rustc_clean(hir_owner)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: attribute requires -Z query-dep-graph to be enabled"}]}