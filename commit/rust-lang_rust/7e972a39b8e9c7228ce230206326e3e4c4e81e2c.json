{"sha": "7e972a39b8e9c7228ce230206326e3e4c4e81e2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOTcyYTM5YjhlOWM3MjI4Y2UyMzAyMDYzMjZlM2U0YzRlODFlMmM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-11T23:41:51Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-13T21:55:15Z"}, "message": "Report error for each invalid nested attribute", "tree": {"sha": "d60ac857a407f4e661d253a379d9568f8c2e7725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d60ac857a407f4e661d253a379d9568f8c2e7725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e972a39b8e9c7228ce230206326e3e4c4e81e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e972a39b8e9c7228ce230206326e3e4c4e81e2c", "html_url": "https://github.com/rust-lang/rust/commit/7e972a39b8e9c7228ce230206326e3e4c4e81e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e972a39b8e9c7228ce230206326e3e4c4e81e2c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7189c05bf8fe5b9d21815c44540d76301c90a8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7189c05bf8fe5b9d21815c44540d76301c90a8aa", "html_url": "https://github.com/rust-lang/rust/commit/7189c05bf8fe5b9d21815c44540d76301c90a8aa"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "a1871e796d8adc70a08a0e756b92182348043d4f", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e972a39b8e9c7228ce230206326e3e4c4e81e2c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e972a39b8e9c7228ce230206326e3e4c4e81e2c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7e972a39b8e9c7228ce230206326e3e4c4e81e2c", "patch": "@@ -531,6 +531,8 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     fn check_doc_attrs(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n+        let mut is_valid = true;\n+\n         if let Some(list) = attr.meta().and_then(|mi| mi.meta_item_list().map(|l| l.to_vec())) {\n             for meta in list {\n                 if let Some(i_meta) = meta.meta_item() {\n@@ -539,14 +541,14 @@ impl CheckAttrVisitor<'tcx> {\n                             if !self.check_attr_crate_level(&meta, hir_id, \"alias\")\n                                 || !self.check_doc_alias(&meta, hir_id, target) =>\n                         {\n-                            return false;\n+                            is_valid = false\n                         }\n \n                         sym::keyword\n                             if !self.check_attr_crate_level(&meta, hir_id, \"keyword\")\n                                 || !self.check_doc_keyword(&meta, hir_id) =>\n                         {\n-                            return false;\n+                            is_valid = false\n                         }\n \n                         sym::test if CRATE_HIR_ID != hir_id => {\n@@ -562,7 +564,7 @@ impl CheckAttrVisitor<'tcx> {\n                                     .emit();\n                                 },\n                             );\n-                            return false;\n+                            is_valid = false;\n                         }\n \n                         // no_default_passes: deprecated\n@@ -602,7 +604,7 @@ impl CheckAttrVisitor<'tcx> {\n                                     .emit();\n                                 },\n                             );\n-                            return false;\n+                            is_valid = false;\n                         }\n                     }\n                 } else {\n@@ -614,11 +616,12 @@ impl CheckAttrVisitor<'tcx> {\n                             lint.build(&format!(\"unknown `doc` attribute\")).emit();\n                         },\n                     );\n-                    return false;\n+                    is_valid = false;\n                 }\n             }\n         }\n-        true\n+\n+        is_valid\n     }\n \n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid."}, {"sha": "1b037985a18d1be2af4ad2382acb03bb41b3e680", "filename": "src/test/ui/attributes/doc-attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e972a39b8e9c7228ce230206326e3e4c4e81e2c/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e972a39b8e9c7228ce230206326e3e4c4e81e2c/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs?ref=7e972a39b8e9c7228ce230206326e3e4c4e81e2c", "patch": "@@ -15,4 +15,6 @@ pub fn foo() {}\n #[doc(\"hello\", \"bar\")]\n //~^ ERROR unknown `doc` attribute\n //~| WARN\n+//~| ERROR unknown `doc` attribute\n+//~| WARN\n fn bar() {}"}, {"sha": "51714d2da86322fdec21f7cb1077ed63af2a0ec3", "filename": "src/test/ui/attributes/doc-attr.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e972a39b8e9c7228ce230206326e3e4c4e81e2c/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e972a39b8e9c7228ce230206326e3e4c4e81e2c/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr?ref=7e972a39b8e9c7228ce230206326e3e4c4e81e2c", "patch": "@@ -31,6 +31,15 @@ LL | #[doc(\"hello\", \"bar\")]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n+error: unknown `doc` attribute\n+  --> $DIR/doc-attr.rs:15:16\n+   |\n+LL | #[doc(\"hello\", \"bar\")]\n+   |                ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n error: unknown `doc` attribute `as_ptr`\n   --> $DIR/doc-attr.rs:3:8\n    |\n@@ -40,5 +49,5 @@ LL | #![doc(as_ptr)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}