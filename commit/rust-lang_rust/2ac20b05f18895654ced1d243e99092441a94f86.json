{"sha": "2ac20b05f18895654ced1d243e99092441a94f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzIwYjA1ZjE4ODk1NjU0Y2VkMWQyNDNlOTkwOTI0NDFhOTRmODY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-09T15:13:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-09T15:13:11Z"}, "message": "Cleanup tests", "tree": {"sha": "58793a5db718831aeca8c998d6496eb8da70c043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58793a5db718831aeca8c998d6496eb8da70c043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac20b05f18895654ced1d243e99092441a94f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac20b05f18895654ced1d243e99092441a94f86", "html_url": "https://github.com/rust-lang/rust/commit/2ac20b05f18895654ced1d243e99092441a94f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac20b05f18895654ced1d243e99092441a94f86/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc67c85b94a8e858706568c4116b3123348941b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc67c85b94a8e858706568c4116b3123348941b", "html_url": "https://github.com/rust-lang/rust/commit/2dc67c85b94a8e858706568c4116b3123348941b"}], "stats": {"total": 108, "additions": 53, "deletions": 55}, "files": [{"sha": "cc6641ba13558a9185497ff26862879e804af4ed", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ac20b05f18895654ced1d243e99092441a94f86/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac20b05f18895654ced1d243e99092441a94f86/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=2ac20b05f18895654ced1d243e99092441a94f86", "patch": "@@ -1,5 +1,6 @@\n //! Utilities for creating `Analysis` instances for tests.\n use ide_db::base_db::fixture::ChangeFixture;\n+use syntax::{TextRange, TextSize};\n use test_utils::{extract_annotations, RangeOrOffset};\n \n use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n@@ -68,3 +69,18 @@ pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(Fil\n         .collect();\n     (host.analysis(), FilePosition { file_id, offset }, annotations)\n }\n+\n+pub(crate) fn nav_target_annotation(ra_fixture: &str) -> (Analysis, FilePosition, FileRange) {\n+    let (analysis, position, mut annotations) = annotations(ra_fixture);\n+    let (mut expected, data) = annotations.pop().unwrap();\n+    assert!(annotations.is_empty());\n+    match data.as_str() {\n+        \"\" => (),\n+        \"file\" => {\n+            expected.range =\n+                TextRange::up_to(TextSize::of(&*analysis.file_text(expected.file_id).unwrap()))\n+        }\n+        data => panic!(\"bad data: {}\", data),\n+    }\n+    (analysis, position, expected)\n+}"}, {"sha": "c91eb128330b56e2bcec8213746a5a866f7af4d0", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ac20b05f18895654ced1d243e99092441a94f86/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac20b05f18895654ced1d243e99092441a94f86/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=2ac20b05f18895654ced1d243e99092441a94f86", "patch": "@@ -136,17 +136,7 @@ mod tests {\n     use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, position, mut annotations) = fixture::annotations(ra_fixture);\n-        let (mut expected, data) = annotations.pop().unwrap();\n-        match data.as_str() {\n-            \"\" => (),\n-            \"file\" => {\n-                expected.range =\n-                    TextRange::up_to(TextSize::of(&*analysis.file_text(expected.file_id).unwrap()))\n-            }\n-            data => panic!(\"bad data: {}\", data),\n-        }\n-\n+        let (analysis, position, expected) = fixture::nav_target_annotation(ra_fixture);\n         let mut navs =\n             analysis.goto_definition(position).unwrap().expect(\"no definition found\").info;\n         if navs.len() == 0 {"}, {"sha": "e5515ef2c067408accf5500ce7c82f04b7ae0fac", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 36, "deletions": 44, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2ac20b05f18895654ced1d243e99092441a94f86/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac20b05f18895654ced1d243e99092441a94f86/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=2ac20b05f18895654ced1d243e99092441a94f86", "patch": "@@ -63,69 +63,61 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n \n #[cfg(test)]\n mod tests {\n+    use ide_db::base_db::FileRange;\n     use test_utils::mark;\n \n-    use crate::fixture::{self};\n+    use crate::fixture;\n+\n+    fn check(ra_fixture: &str) {\n+        let (analysis, position, expected) = fixture::nav_target_annotation(ra_fixture);\n+        let mut navs = analysis.parent_module(position).unwrap();\n+        assert_eq!(navs.len(), 1);\n+        let nav = navs.pop().unwrap();\n+        assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n+    }\n \n     #[test]\n     fn test_resolve_parent_module() {\n-        let (analysis, pos) = fixture::position(\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-            //- /foo.rs\n-            $0// empty\n-            \",\n+        check(\n+            r#\"\n+//- /lib.rs\n+  mod foo;\n+//^^^^^^^^\n+\n+//- /foo.rs\n+$0// empty\n+\"#,\n         );\n-        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo Module FileId(0) 0..8\");\n     }\n \n     #[test]\n     fn test_resolve_parent_module_on_module_decl() {\n         mark::check!(test_resolve_parent_module_on_module_decl);\n-        let (analysis, pos) = fixture::position(\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-\n-            //- /foo.rs\n-            mod $0bar;\n+        check(\n+            r#\"\n+//- /lib.rs\n+  mod foo;\n+//^^^^^^^^\n+//- /foo.rs\n+mod $0bar;\n \n-            //- /foo/bar.rs\n-            // empty\n-            \",\n+//- /foo/bar.rs\n+// empty\n+\"#,\n         );\n-        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo Module FileId(0) 0..8\");\n     }\n \n     #[test]\n     fn test_resolve_parent_module_for_inline() {\n-        let (analysis, pos) = fixture::position(\n-            \"\n-            //- /lib.rs\n-            mod foo {\n-                mod bar {\n-                    mod baz { $0 }\n-                }\n-            }\n-            \",\n-        );\n-        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"baz Module FileId(0) 32..44\");\n-    }\n-\n-    #[test]\n-    fn test_resolve_crate_root() {\n-        let (analysis, file_id) = fixture::file(\n+        check(\n             r#\"\n-//- /main.rs\n-mod foo;\n-//- /foo.rs\n-$0\n+//- /lib.rs\n+mod foo {\n+    mod bar {\n+        mod baz { $0 }\n+    } //^^^^^^^^^^^^\n+}\n \"#,\n         );\n-        assert_eq!(analysis.crate_for(file_id).unwrap().len(), 1);\n     }\n }"}]}