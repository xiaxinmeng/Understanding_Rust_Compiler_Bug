{"sha": "0e05280d75e43da007efd50ce49f4e1e8456bcbd", "node_id": "C_kwDOAAsO6NoAKDBlMDUyODBkNzVlNDNkYTAwN2VmZDUwY2U0OWY0ZTFlODQ1NmJjYmQ", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-19T20:50:00Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-20T04:14:58Z"}, "message": "Add an InstCombine for redundant casts", "tree": {"sha": "08cdddb70f0147fbb2a8e87adc88f8f1e01744ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08cdddb70f0147fbb2a8e87adc88f8f1e01744ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e05280d75e43da007efd50ce49f4e1e8456bcbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e05280d75e43da007efd50ce49f4e1e8456bcbd", "html_url": "https://github.com/rust-lang/rust/commit/0e05280d75e43da007efd50ce49f4e1e8456bcbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e05280d75e43da007efd50ce49f4e1e8456bcbd/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebdfb55fce148676c24555505aebf648123b2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebdfb55fce148676c24555505aebf648123b2de", "html_url": "https://github.com/rust-lang/rust/commit/eebdfb55fce148676c24555505aebf648123b2de"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "3896f0e57ead92e141c64ee46b3b9fbe7584fb0f", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e05280d75e43da007efd50ce49f4e1e8456bcbd/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e05280d75e43da007efd50ce49f4e1e8456bcbd/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=0e05280d75e43da007efd50ce49f4e1e8456bcbd", "patch": "@@ -30,6 +30,7 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n                         ctx.combine_bool_cmp(&statement.source_info, rvalue);\n                         ctx.combine_ref_deref(&statement.source_info, rvalue);\n                         ctx.combine_len(&statement.source_info, rvalue);\n+                        ctx.combine_cast(&statement.source_info, rvalue);\n                     }\n                     _ => {}\n                 }\n@@ -142,6 +143,14 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         }\n     }\n \n+    fn combine_cast(&self, _source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n+        if let Rvalue::Cast(_kind, operand, ty) = rvalue {\n+            if operand.ty(self.local_decls, self.tcx) == *ty {\n+                *rvalue = Rvalue::Use(operand.clone());\n+            }\n+        }\n+    }\n+\n     fn combine_primitive_clone(\n         &self,\n         terminator: &mut Terminator<'tcx>,"}, {"sha": "528a8e5a90f268a828fae097e5767896b50ed7f8", "filename": "tests/mir-opt/casts.redundant.InstCombine.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.redundant.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.redundant.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.redundant.InstCombine.diff?ref=0e05280d75e43da007efd50ce49f4e1e8456bcbd", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `redundant` before InstCombine\n++ // MIR for `redundant` after InstCombine\n+  \n+  fn redundant(_1: *const &u8) -> *const &u8 {\n+      debug x => _1;                       // in scope 0 at $DIR/casts.rs:+0:30: +0:31\n+      let mut _0: *const &u8;              // return place in scope 0 at $DIR/casts.rs:+0:51: +0:64\n+      let mut _2: *const &u8;              // in scope 0 at $DIR/casts.rs:+1:5: +1:55\n+      let mut _3: *const &u8;              // in scope 0 at $DIR/casts.rs:+1:36: +1:37\n+      scope 1 (inlined generic_cast::<&u8, &u8>) { // at $DIR/casts.rs:6:5: 6:38\n+          debug x => _3;                   // in scope 1 at $DIR/casts.rs:10:23: 10:24\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/casts.rs:+1:5: +1:55\n+          StorageLive(_3);                 // scope 0 at $DIR/casts.rs:+1:36: +1:37\n+          _3 = _1;                         // scope 0 at $DIR/casts.rs:+1:36: +1:37\n+-         _2 = _3 as *const &u8 (PtrToPtr); // scope 1 at $DIR/casts.rs:11:5: 11:18\n++         _2 = _3;                         // scope 1 at $DIR/casts.rs:11:5: 11:18\n+          StorageDead(_3);                 // scope 0 at $DIR/casts.rs:+1:37: +1:38\n+          _0 = _2;                         // scope 0 at $DIR/casts.rs:+1:5: +1:55\n+          StorageDead(_2);                 // scope 0 at $DIR/casts.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/casts.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "21a470ea30075fb4a95b710f34cb2d9a777a47b2", "filename": "tests/mir-opt/casts.redundant.PreCodegen.after.mir", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.redundant.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.redundant.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.redundant.PreCodegen.after.mir?ref=0e05280d75e43da007efd50ce49f4e1e8456bcbd", "patch": "@@ -0,0 +1,14 @@\n+// MIR for `redundant` after PreCodegen\n+\n+fn redundant(_1: *const &u8) -> *const &u8 {\n+    debug x => _1;                       // in scope 0 at $DIR/casts.rs:+0:30: +0:31\n+    let mut _0: *const &u8;              // return place in scope 0 at $DIR/casts.rs:+0:51: +0:64\n+    scope 1 (inlined generic_cast::<&u8, &u8>) { // at $DIR/casts.rs:6:5: 6:38\n+        debug x => _1;                   // in scope 1 at $DIR/casts.rs:10:23: 10:24\n+    }\n+\n+    bb0: {\n+        _0 = _1;                         // scope 0 at $DIR/casts.rs:+1:5: +1:55\n+        return;                          // scope 0 at $DIR/casts.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "0c793984ceb6ce347cee838b90de1108c7db1d45", "filename": "tests/mir-opt/casts.roundtrip.PreCodegen.after.mir", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.roundtrip.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.roundtrip.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.roundtrip.PreCodegen.after.mir?ref=0e05280d75e43da007efd50ce49f4e1e8456bcbd", "patch": "@@ -0,0 +1,15 @@\n+// MIR for `roundtrip` after PreCodegen\n+\n+fn roundtrip(_1: *const u8) -> *const u8 {\n+    debug x => _1;                       // in scope 0 at $DIR/casts.rs:+0:18: +0:19\n+    let mut _0: *const u8;               // return place in scope 0 at $DIR/casts.rs:+0:35: +0:44\n+    let mut _2: *mut u8;                 // in scope 0 at $DIR/casts.rs:+1:5: +1:17\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/casts.rs:+1:5: +1:17\n+        _2 = _1 as *mut u8 (PtrToPtr);   // scope 0 at $DIR/casts.rs:+1:5: +1:17\n+        _0 = move _2 as *const u8 (Pointer(MutToConstPointer)); // scope 0 at $DIR/casts.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/casts.rs:+1:16: +1:17\n+        return;                          // scope 0 at $DIR/casts.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "259c462da3d42810db41de52e535d00b9f3ba112", "filename": "tests/mir-opt/casts.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e05280d75e43da007efd50ce49f4e1e8456bcbd/tests%2Fmir-opt%2Fcasts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.rs?ref=0e05280d75e43da007efd50ce49f4e1e8456bcbd", "patch": "@@ -0,0 +1,17 @@\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR casts.redundant.InstCombine.diff\n+// EMIT_MIR casts.redundant.PreCodegen.after.mir\n+pub fn redundant<'a, 'b: 'a>(x: *const &'a u8) -> *const &'a u8 {\n+    generic_cast::<&'a u8, &'b u8>(x) as *const &'a u8\n+}\n+\n+#[inline]\n+fn generic_cast<T, U>(x: *const T) -> *const U {\n+    x as *const U\n+}\n+\n+// EMIT_MIR casts.roundtrip.PreCodegen.after.mir\n+pub fn roundtrip(x: *const u8) -> *const u8 {\n+    x as *mut u8 as *const u8\n+}"}]}