{"sha": "4f5c7aafffa5a424302275677da39f666f498d3e", "node_id": "C_kwDOAAsO6NoAKDRmNWM3YWFmZmZhNWE0MjQzMDIyNzU2NzdkYTM5ZjY2NmY0OThkM2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T10:18:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T10:18:50Z"}, "message": "Auto merge of #12431 - Veykril:request-retry, r=Veykril\n\nfix: Fix completions disappearing when typing two keys in quick succession\n\nWith this PR we now retry requests if they get cancelled due to document changes.\n\nThis fixes the completions problem we have where completions seem to randomly disappear, see https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Completions.20not.20always.20appearing\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/10187\nFixes https://github.com/rust-lang/rust-analyzer/issues/7560\nFixes https://github.com/rust-lang/rust-analyzer/issues/12153", "tree": {"sha": "c3587da8e22d392567804c0d10a8ac19a94152e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3587da8e22d392567804c0d10a8ac19a94152e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f5c7aafffa5a424302275677da39f666f498d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5c7aafffa5a424302275677da39f666f498d3e", "html_url": "https://github.com/rust-lang/rust/commit/4f5c7aafffa5a424302275677da39f666f498d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f5c7aafffa5a424302275677da39f666f498d3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30672cbf0c13ba81bd507bad91391076a67f5d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/30672cbf0c13ba81bd507bad91391076a67f5d58", "html_url": "https://github.com/rust-lang/rust/commit/30672cbf0c13ba81bd507bad91391076a67f5d58"}, {"sha": "d88ae66ed9b5e5a33bd5121a4db4fa599e274170", "url": "https://api.github.com/repos/rust-lang/rust/commits/d88ae66ed9b5e5a33bd5121a4db4fa599e274170", "html_url": "https://github.com/rust-lang/rust/commit/d88ae66ed9b5e5a33bd5121a4db4fa599e274170"}], "stats": {"total": 141, "additions": 70, "deletions": 71}, "files": [{"sha": "a9e79cc7c3e7894e59936b1b5f76c3e00b0991c6", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=4f5c7aafffa5a424302275677da39f666f498d3e", "patch": "@@ -157,7 +157,7 @@ fn run_server() -> Result<()> {\n     let (initialize_id, initialize_params) = connection.initialize_start()?;\n     tracing::info!(\"InitializeParams: {}\", initialize_params);\n     let initialize_params =\n-        from_json::<lsp_types::InitializeParams>(\"InitializeParams\", initialize_params)?;\n+        from_json::<lsp_types::InitializeParams>(\"InitializeParams\", &initialize_params)?;\n \n     let root_path = match initialize_params\n         .root_uri"}, {"sha": "4d94630a56475b2234593b17acc255fa9890a285", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 48, "deletions": 45, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=4f5c7aafffa5a424302275677da39f666f498d3e", "patch": "@@ -1,12 +1,12 @@\n //! See [RequestDispatcher].\n use std::{fmt, panic, thread};\n \n+use ide::Cancelled;\n use lsp_server::ExtractError;\n use serde::{de::DeserializeOwned, Serialize};\n \n use crate::{\n     global_state::{GlobalState, GlobalStateSnapshot},\n-    lsp_utils::is_cancelled,\n     main_loop::Task,\n     LspError, Result,\n };\n@@ -37,49 +37,53 @@ impl<'a> RequestDispatcher<'a> {\n     pub(crate) fn on_sync_mut<R>(\n         &mut self,\n         f: fn(&mut GlobalState, R::Params) -> Result<R::Result>,\n-    ) -> Result<&mut Self>\n+    ) -> &mut Self\n     where\n         R: lsp_types::request::Request,\n         R::Params: DeserializeOwned + panic::UnwindSafe + fmt::Debug,\n         R::Result: Serialize,\n     {\n-        let (id, params, panic_context) = match self.parse::<R>() {\n+        let (req, params, panic_context) = match self.parse::<R>() {\n             Some(it) => it,\n-            None => return Ok(self),\n+            None => return self,\n         };\n-        let _pctx = stdx::panic_context::enter(panic_context);\n-\n-        let result = f(self.global_state, params);\n-        let response = result_to_response::<R>(id, result);\n+        let result = {\n+            let _pctx = stdx::panic_context::enter(panic_context);\n+            f(self.global_state, params)\n+        };\n+        if let Ok(response) = result_to_response::<R>(req.id.clone(), result) {\n+            self.global_state.respond(response);\n+        }\n \n-        self.global_state.respond(response);\n-        Ok(self)\n+        self\n     }\n \n     /// Dispatches the request onto the current thread.\n     pub(crate) fn on_sync<R>(\n         &mut self,\n         f: fn(GlobalStateSnapshot, R::Params) -> Result<R::Result>,\n-    ) -> Result<&mut Self>\n+    ) -> &mut Self\n     where\n-        R: lsp_types::request::Request + 'static,\n+        R: lsp_types::request::Request,\n         R::Params: DeserializeOwned + panic::UnwindSafe + fmt::Debug,\n         R::Result: Serialize,\n     {\n-        let (id, params, panic_context) = match self.parse::<R>() {\n+        let (req, params, panic_context) = match self.parse::<R>() {\n             Some(it) => it,\n-            None => return Ok(self),\n+            None => return self,\n         };\n         let global_state_snapshot = self.global_state.snapshot();\n \n         let result = panic::catch_unwind(move || {\n             let _pctx = stdx::panic_context::enter(panic_context);\n             f(global_state_snapshot, params)\n         });\n-        let response = thread_result_to_response::<R>(id, result);\n \n-        self.global_state.respond(response);\n-        Ok(self)\n+        if let Ok(response) = thread_result_to_response::<R>(req.id.clone(), result) {\n+            self.global_state.respond(response);\n+        }\n+\n+        self\n     }\n \n     /// Dispatches the request onto thread pool\n@@ -92,7 +96,7 @@ impl<'a> RequestDispatcher<'a> {\n         R::Params: DeserializeOwned + panic::UnwindSafe + Send + fmt::Debug,\n         R::Result: Serialize,\n     {\n-        let (id, params, panic_context) = match self.parse::<R>() {\n+        let (req, params, panic_context) = match self.parse::<R>() {\n             Some(it) => it,\n             None => return self,\n         };\n@@ -104,8 +108,10 @@ impl<'a> RequestDispatcher<'a> {\n                     let _pctx = stdx::panic_context::enter(panic_context);\n                     f(world, params)\n                 });\n-                let response = thread_result_to_response::<R>(id, result);\n-                Task::Response(response)\n+                match thread_result_to_response::<R>(req.id.clone(), result) {\n+                    Ok(response) => Task::Response(response),\n+                    Err(_) => Task::Retry(req),\n+                }\n             }\n         });\n \n@@ -124,7 +130,7 @@ impl<'a> RequestDispatcher<'a> {\n         }\n     }\n \n-    fn parse<R>(&mut self) -> Option<(lsp_server::RequestId, R::Params, String)>\n+    fn parse<R>(&mut self) -> Option<(lsp_server::Request, R::Params, String)>\n     where\n         R: lsp_types::request::Request,\n         R::Params: DeserializeOwned + fmt::Debug,\n@@ -134,12 +140,12 @@ impl<'a> RequestDispatcher<'a> {\n             _ => return None,\n         };\n \n-        let res = crate::from_json(R::METHOD, req.params);\n+        let res = crate::from_json(R::METHOD, &req.params);\n         match res {\n             Ok(params) => {\n                 let panic_context =\n                     format!(\"\\nversion: {}\\nrequest: {} {:#?}\", env!(\"REV\"), R::METHOD, params);\n-                Some((req.id, params, panic_context))\n+                Some((req, params, panic_context))\n             }\n             Err(err) => {\n                 let response = lsp_server::Response::new_err(\n@@ -157,7 +163,7 @@ impl<'a> RequestDispatcher<'a> {\n fn thread_result_to_response<R>(\n     id: lsp_server::RequestId,\n     result: thread::Result<Result<R::Result>>,\n-) -> lsp_server::Response\n+) -> Result<lsp_server::Response, Cancelled>\n where\n     R: lsp_types::request::Request,\n     R::Params: DeserializeOwned,\n@@ -166,53 +172,50 @@ where\n     match result {\n         Ok(result) => result_to_response::<R>(id, result),\n         Err(panic) => {\n-            let mut message = \"request handler panicked\".to_string();\n-\n             let panic_message = panic\n                 .downcast_ref::<String>()\n                 .map(String::as_str)\n                 .or_else(|| panic.downcast_ref::<&str>().copied());\n \n+            let mut message = \"request handler panicked\".to_string();\n             if let Some(panic_message) = panic_message {\n                 message.push_str(\": \");\n                 message.push_str(panic_message)\n             };\n \n-            lsp_server::Response::new_err(id, lsp_server::ErrorCode::InternalError as i32, message)\n+            Ok(lsp_server::Response::new_err(\n+                id,\n+                lsp_server::ErrorCode::InternalError as i32,\n+                message,\n+            ))\n         }\n     }\n }\n \n fn result_to_response<R>(\n     id: lsp_server::RequestId,\n     result: Result<R::Result>,\n-) -> lsp_server::Response\n+) -> Result<lsp_server::Response, Cancelled>\n where\n     R: lsp_types::request::Request,\n     R::Params: DeserializeOwned,\n     R::Result: Serialize,\n {\n-    match result {\n+    let res = match result {\n         Ok(resp) => lsp_server::Response::new_ok(id, &resp),\n         Err(e) => match e.downcast::<LspError>() {\n             Ok(lsp_error) => lsp_server::Response::new_err(id, lsp_error.code, lsp_error.message),\n-            Err(e) => {\n-                if is_cancelled(&*e) {\n-                    lsp_server::Response::new_err(\n-                        id,\n-                        lsp_server::ErrorCode::ContentModified as i32,\n-                        \"content modified\".to_string(),\n-                    )\n-                } else {\n-                    lsp_server::Response::new_err(\n-                        id,\n-                        lsp_server::ErrorCode::InternalError as i32,\n-                        e.to_string(),\n-                    )\n-                }\n-            }\n+            Err(e) => match e.downcast::<Cancelled>() {\n+                Ok(cancelled) => return Err(*cancelled),\n+                Err(e) => lsp_server::Response::new_err(\n+                    id,\n+                    lsp_server::ErrorCode::InternalError as i32,\n+                    e.to_string(),\n+                ),\n+            },\n         },\n-    }\n+    };\n+    Ok(res)\n }\n \n pub(crate) struct NotificationDispatcher<'a> {"}, {"sha": "7bdd34d1f093a0f242bed934e1e646b45c10f4ea", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=4f5c7aafffa5a424302275677da39f666f498d3e", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn annotation(\n ) -> Result<Annotation> {\n     let data =\n         code_lens.data.ok_or_else(|| invalid_params_error(\"code lens without data\".to_string()))?;\n-    let resolve = from_json::<lsp_ext::CodeLensResolveData>(\"CodeLensResolveData\", data)?;\n+    let resolve = from_json::<lsp_ext::CodeLensResolveData>(\"CodeLensResolveData\", &data)?;\n \n     match resolve {\n         lsp_ext::CodeLensResolveData::Impls(params) => {"}, {"sha": "d5bc8f65f829525ecf19ba92b0c7a01fc83d0795", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=4f5c7aafffa5a424302275677da39f666f498d3e", "patch": "@@ -49,7 +49,7 @@ pub use crate::{caps::server_capabilities, main_loop::main_loop};\n pub type Error = Box<dyn std::error::Error + Send + Sync>;\n pub type Result<T, E = Error> = std::result::Result<T, E>;\n \n-pub fn from_json<T: DeserializeOwned>(what: &'static str, json: serde_json::Value) -> Result<T> {\n+pub fn from_json<T: DeserializeOwned>(what: &'static str, json: &serde_json::Value) -> Result<T> {\n     let res = serde_json::from_value(json.clone())\n         .map_err(|e| format!(\"Failed to deserialize {}: {}; {}\", what, e, json))?;\n     Ok(res)"}, {"sha": "22bab8fa82047991869990429add3484a2499dda", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=4f5c7aafffa5a424302275677da39f666f498d3e", "patch": "@@ -1,7 +1,6 @@\n //! Utilities for LSP-related boilerplate code.\n-use std::{error::Error, ops::Range, sync::Arc};\n+use std::{ops::Range, sync::Arc};\n \n-use ide_db::base_db::Cancelled;\n use lsp_server::Notification;\n \n use crate::{\n@@ -15,10 +14,6 @@ pub(crate) fn invalid_params_error(message: String) -> LspError {\n     LspError { code: lsp_server::ErrorCode::InvalidParams as i32, message }\n }\n \n-pub(crate) fn is_cancelled(e: &(dyn Error + 'static)) -> bool {\n-    e.downcast_ref::<Cancelled>().is_some()\n-}\n-\n pub(crate) fn notification_is<N: lsp_types::notification::Notification>(\n     notification: &Notification,\n ) -> bool {"}, {"sha": "0fc5fd9dfa5e1d48e8a63246448d64ba3824cf86", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5c7aafffa5a424302275677da39f666f498d3e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=4f5c7aafffa5a424302275677da39f666f498d3e", "patch": "@@ -8,7 +8,7 @@ use std::{\n \n use always_assert::always;\n use crossbeam_channel::{select, Receiver};\n-use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n+use ide_db::base_db::{Cancelled, SourceDatabaseExt, VfsPath};\n use lsp_server::{Connection, Notification, Request};\n use lsp_types::notification::Notification as _;\n use vfs::{ChangeKind, FileId};\n@@ -19,7 +19,7 @@ use crate::{\n     from_proto,\n     global_state::{file_id_to_url, url_to_file_id, GlobalState},\n     handlers, lsp_ext,\n-    lsp_utils::{apply_document_changes, is_cancelled, notification_is, Progress},\n+    lsp_utils::{apply_document_changes, notification_is, Progress},\n     mem_docs::DocumentData,\n     reload::{self, BuildDataProgress, ProjectWorkspaceProgress},\n     Result,\n@@ -60,6 +60,7 @@ enum Event {\n #[derive(Debug)]\n pub(crate) enum Task {\n     Response(lsp_server::Response),\n+    Retry(lsp_server::Request),\n     Diagnostics(Vec<(FileId, Vec<lsp_types::Diagnostic>)>),\n     PrimeCaches(PrimeCachesProgress),\n     FetchWorkspace(ProjectWorkspaceProgress),\n@@ -196,7 +197,7 @@ impl GlobalState {\n         let was_quiescent = self.is_quiescent();\n         match event {\n             Event::Lsp(msg) => match msg {\n-                lsp_server::Message::Request(req) => self.on_request(loop_start, req)?,\n+                lsp_server::Message::Request(req) => self.on_request(loop_start, req),\n                 lsp_server::Message::Notification(not) => {\n                     self.on_notification(not)?;\n                 }\n@@ -208,6 +209,7 @@ impl GlobalState {\n                 loop {\n                     match task {\n                         Task::Response(response) => self.respond(response),\n+                        Task::Retry(req) => self.on_request(loop_start, req),\n                         Task::Diagnostics(diagnostics_per_file) => {\n                             for (file_id, diagnostics) in diagnostics_per_file {\n                                 self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n@@ -553,7 +555,7 @@ impl GlobalState {\n         Ok(())\n     }\n \n-    fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n+    fn on_request(&mut self, request_received: Instant, req: Request) {\n         self.register_request(&req, request_received);\n \n         if self.shutdown_requested {\n@@ -562,8 +564,7 @@ impl GlobalState {\n                 lsp_server::ErrorCode::InvalidRequest as i32,\n                 \"Shutdown already requested.\".to_owned(),\n             ));\n-\n-            return Ok(());\n+            return;\n         }\n \n         // Avoid flashing a bunch of unresolved references during initial load.\n@@ -573,21 +574,21 @@ impl GlobalState {\n                 lsp_server::ErrorCode::ContentModified as i32,\n                 \"waiting for cargo metadata or cargo check\".to_owned(),\n             ));\n-            return Ok(());\n+            return;\n         }\n \n         RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync_mut::<lsp_types::request::Shutdown>(|s, ()| {\n                 s.shutdown_requested = true;\n                 Ok(())\n-            })?\n-            .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)?\n-            .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)?\n-            .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)?\n-            .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)?\n-            .on_sync::<lsp_ext::OnEnter>(handlers::handle_on_enter)?\n-            .on_sync::<lsp_types::request::SelectionRangeRequest>(handlers::handle_selection_range)?\n-            .on_sync::<lsp_ext::MatchingBrace>(handlers::handle_matching_brace)?\n+            })\n+            .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n+            .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n+            .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)\n+            .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)\n+            .on_sync::<lsp_ext::OnEnter>(handlers::handle_on_enter)\n+            .on_sync::<lsp_types::request::SelectionRangeRequest>(handlers::handle_selection_range)\n+            .on_sync::<lsp_ext::MatchingBrace>(handlers::handle_matching_brace)\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n             .on::<lsp_ext::ViewHir>(handlers::handle_view_hir)\n@@ -644,8 +645,8 @@ impl GlobalState {\n             .on::<lsp_types::request::WillRenameFiles>(handlers::handle_will_rename_files)\n             .on::<lsp_ext::Ssr>(handlers::handle_ssr)\n             .finish();\n-        Ok(())\n     }\n+\n     fn on_notification(&mut self, not: Notification) -> Result<()> {\n         NotificationDispatcher { not: Some(not), global_state: self }\n             .on::<lsp_types::notification::Cancel>(|this, params| {\n@@ -792,7 +793,7 @@ impl GlobalState {\n                 .filter_map(|file_id| {\n                     handlers::publish_diagnostics(&snapshot, file_id)\n                         .map_err(|err| {\n-                            if !is_cancelled(&*err) {\n+                            if err.is::<Cancelled>() {\n                                 tracing::error!(\"failed to compute diagnostics: {:?}\", err);\n                             }\n                         })"}]}