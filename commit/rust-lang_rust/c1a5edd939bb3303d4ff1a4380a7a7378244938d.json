{"sha": "c1a5edd939bb3303d4ff1a4380a7a7378244938d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTVlZGQ5MzliYjMzMDNkNGZmMWE0MzgwYTdhNzM3ODI0NDkzOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-20T12:18:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-20T12:18:25Z"}, "message": "Auto merge of #61929 - 95th:master, r=GuillaumeGomez\n\nFix Into trait docs links\n\nhttps://doc.rust-lang.org/std/convert/trait.Into.html", "tree": {"sha": "7094497b28723965ac235356a0802f229ee2a21d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7094497b28723965ac235356a0802f229ee2a21d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a5edd939bb3303d4ff1a4380a7a7378244938d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5edd939bb3303d4ff1a4380a7a7378244938d", "html_url": "https://github.com/rust-lang/rust/commit/c1a5edd939bb3303d4ff1a4380a7a7378244938d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5edd939bb3303d4ff1a4380a7a7378244938d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb77a0398d0339f35f1b18595b375428babd431", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb77a0398d0339f35f1b18595b375428babd431", "html_url": "https://github.com/rust-lang/rust/commit/4fb77a0398d0339f35f1b18595b375428babd431"}, {"sha": "34188fb6367f8583560d353aae32f097ed0af51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/34188fb6367f8583560d353aae32f097ed0af51f", "html_url": "https://github.com/rust-lang/rust/commit/34188fb6367f8583560d353aae32f097ed0af51f"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "a697b7bd6e589ca8f7fd97910b4f2307ad0a2c1c", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5edd939bb3303d4ff1a4380a7a7378244938d/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5edd939bb3303d4ff1a4380a7a7378244938d/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=c1a5edd939bb3303d4ff1a4380a7a7378244938d", "patch": "@@ -202,9 +202,9 @@ pub trait AsMut<T: ?Sized> {\n /// A value-to-value conversion that consumes the input value. The\n /// opposite of [`From`].\n ///\n-/// One should only implement `Into` if a conversion to a type outside the current crate is\n-/// required. Otherwise one should always prefer implementing [`From`] over `Into` because\n-/// implementing [`From`] automatically provides one with a implementation of `Into` thanks to\n+/// One should only implement [`Into`] if a conversion to a type outside the current crate is\n+/// required. Otherwise one should always prefer implementing [`From`] over [`Into`] because\n+/// implementing [`From`] automatically provides one with a implementation of [`Into`] thanks to\n /// the blanket implementation in the standard library. [`From`] cannot do these type of\n /// conversions because of Rust's orphaning rules.\n ///\n@@ -213,9 +213,9 @@ pub trait AsMut<T: ?Sized> {\n /// # Generic Implementations\n ///\n /// - [`From`]`<T> for U` implies `Into<U> for T`\n-/// - `Into` is reflexive, which means that `Into<T> for T` is implemented\n+/// - [`Into`] is reflexive, which means that `Into<T> for T` is implemented\n ///\n-/// # Implementing `Into` for conversions to external types\n+/// # Implementing [`Into`] for conversions to external types\n ///\n /// If the destination type is not part of the current crate\n /// then you can't implement [`From`] directly.\n@@ -231,7 +231,7 @@ pub trait AsMut<T: ?Sized> {\n /// ```\n /// This will fail to compile because we cannot implement a trait for a type\n /// if both the trait and the type are not defined by the current crate.\n-/// This is due to Rust's orphaning rules. To bypass this, you can implement `Into` directly:\n+/// This is due to Rust's orphaning rules. To bypass this, you can implement [`Into`] directly:\n ///\n /// ```\n /// struct Wrapper<T>(Vec<T>);\n@@ -242,19 +242,19 @@ pub trait AsMut<T: ?Sized> {\n /// }\n /// ```\n ///\n-/// It is important to understand that `Into` does not provide a [`From`] implementation\n-/// (as [`From`] does with `Into`). Therefore, you should always try to implement [`From`]\n-/// and then fall back to `Into` if [`From`] can't be implemented.\n+/// It is important to understand that [`Into`] does not provide a [`From`] implementation\n+/// (as [`From`] does with [`Into`]). Therefore, you should always try to implement [`From`]\n+/// and then fall back to [`Into`] if [`From`] can't be implemented.\n ///\n-/// Prefer using `Into` over [`From`] when specifying trait bounds on a generic function\n-/// to ensure that types that only implement `Into` can be used as well.\n+/// Prefer using [`Into`] over [`From`] when specifying trait bounds on a generic function\n+/// to ensure that types that only implement [`Into`] can be used as well.\n ///\n /// # Examples\n ///\n /// [`String`] implements `Into<Vec<u8>>`:\n ///\n /// In order to express that we want a generic function to take all arguments that can be\n-/// converted to a specified type `T`, we can use a trait bound of `Into<T>`.\n+/// converted to a specified type `T`, we can use a trait bound of [`Into`]`<T>`.\n /// For example: The function `is_hello` takes all arguments that can be converted into a\n /// `Vec<u8>`.\n ///\n@@ -273,7 +273,7 @@ pub trait AsMut<T: ?Sized> {\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`From`]: trait.From.html\n-/// [`into`]: trait.Into.html#tymethod.into\n+/// [`Into`]: trait.Into.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion."}]}