{"sha": "88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDViMmY0YjRlNGYwYTQ0NjA2ZjE3ZjJlYjUxMjA1MDdiN2VkMWU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-28T21:04:51Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Refactor mod/check (part vi)", "tree": {"sha": "ff869e40fdb677815f8e3fd1c7c2b0a76dd32b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff869e40fdb677815f8e3fd1c7c2b0a76dd32b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e", "html_url": "https://github.com/rust-lang/rust/commit/88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14", "html_url": "https://github.com/rust-lang/rust/commit/c9941a8a859e89cfebd4e85f8f9581c6b91e4f14"}], "stats": {"total": 56, "additions": 7, "deletions": 49}, "files": [{"sha": "bbf41ddb81ba019ffc7f17d00a9b97f332869f28", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 49, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=88d5b2f4b4e4f0a44606f17f2eb5120507b7ed1e", "patch": "@@ -4937,46 +4937,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ => {}\n         }\n \n-        let mut type_segment = None;\n-        let mut fn_segment = None;\n-        match def {\n-            // Case 1. Reference to a struct/variant constructor.\n-            Def::StructCtor(def_id, ..) |\n-            Def::VariantCtor(def_id, ..) => {\n-                // Everything but the final segment should have no\n-                // parameters at all.\n-                let mut generics = self.tcx.generics_of(def_id);\n-                if let Some(def_id) = generics.parent {\n-                    // Variant and struct constructors use the\n-                    // generics of their parent type definition.\n-                    generics = self.tcx.generics_of(def_id);\n-                }\n-                type_segment = Some((segments.last().unwrap(), generics));\n-            }\n-\n-            // Case 2. Reference to a top-level value.\n-            Def::Fn(def_id) |\n-            Def::Const(def_id) |\n-            Def::Static(def_id, _) => {\n-                fn_segment = Some((segments.last().unwrap(), self.tcx.generics_of(def_id)));\n-            }\n-\n-            // Case 3. Reference to a method or associated const.\n-            Def::Method(def_id) |\n-            Def::AssociatedConst(def_id) => {\n-                let generics = self.tcx.generics_of(def_id);\n-                if segments.len() >= 2 {\n-                    let parent_generics = self.tcx.generics_of(generics.parent.unwrap());\n-                    type_segment = Some((&segments[segments.len() - 2], parent_generics));\n-                }\n-                fn_segment = Some((segments.last().unwrap(), generics));\n-            }\n-\n-            _ => {}\n-        }\n-\n-        debug!(\"type_segment={:?} fn_segment={:?}\", type_segment, fn_segment);\n-\n         // Now we have to compare the types that the user *actually*\n         // provided against the types that were *expected*. If the user\n         // did not provide any types, then we want to substitute inference\n@@ -5004,14 +4964,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }).unwrap_or(false);\n \n         let def_id = def.def_id();\n-        let defs = self.tcx.generics_of(def_id);\n-        let count = defs.count();\n+        let mut parent_defs = self.tcx.generics_of(def_id);\n+        let count = parent_defs.count();\n         let mut substs = if count <= 8 {\n             AccumulateVec::Array(ArrayVec::new())\n         } else {\n             AccumulateVec::Heap(Vec::with_capacity(count))\n         };\n-        let mut parent_defs = defs;\n         let mut stack = vec![(def_id, parent_defs)];\n         while let Some(def_id) = parent_defs.parent {\n             parent_defs = self.tcx.generics_of(def_id);\n@@ -5030,7 +4989,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 let infer_types = if let Some(&PathSeg(_, index)) = path_segs\n                     .iter()\n-                    .find(|&PathSeg(di, _)| *di == def_id) {\n+                    .find(|&PathSeg(did, _)| *did == def_id) {\n \n                     if let Some(ref data) = segments[index].args {\n                         let lifetime_offset = if infer_lifetimes[&index] {\n@@ -5048,7 +5007,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     _ => bug!(\"expected a lifetime arg\"),\n                                 }\n                                 GenericParamDefKind::Type { .. } => match arg {\n-                                    // A provided type parameter.\n                                     GenericArg::Type(ty) => self.to_ty(ty).into(),\n                                     _ => bug!(\"expected a type arg\"),\n                                 }\n@@ -5088,15 +5046,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // The things we are substituting into the type should not contain\n         // escaping late-bound regions, and nor should the base type scheme.\n-        let ty = self.tcx.type_of(def.def_id());\n+        let ty = self.tcx.type_of(def_id);\n         assert!(!substs.has_escaping_regions());\n         assert!(!ty.has_escaping_regions());\n \n         // Add all the obligations that are required, substituting and\n         // normalized appropriately.\n-        let bounds = self.instantiate_bounds(span, def.def_id(), &substs);\n+        let bounds = self.instantiate_bounds(span, def_id, &substs);\n         self.add_obligations_for_parameters(\n-            traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def.def_id())),\n+            traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n             &bounds);\n \n         // Substitute the values for the type parameters into the type of\n@@ -5122,7 +5080,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.check_rustc_args_require_const(def.def_id(), node_id, span);\n+        self.check_rustc_args_require_const(def_id, node_id, span);\n \n         debug!(\"instantiate_value_path: type of {:?} is {:?}\",\n                node_id,"}]}