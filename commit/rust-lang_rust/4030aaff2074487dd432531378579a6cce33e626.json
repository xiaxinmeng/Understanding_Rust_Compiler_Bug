{"sha": "4030aaff2074487dd432531378579a6cce33e626", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMzBhYWZmMjA3NDQ4N2RkNDMyNTMxMzc4NTc5YTZjY2UzM2U2MjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-31T00:21:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-31T00:21:19Z"}, "message": "rustc: make integral type inference transactional, close #3211, close #4401, close #3398.", "tree": {"sha": "b7a8f3bc24227eed1c7598164d1bd62afff5cdcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a8f3bc24227eed1c7598164d1bd62afff5cdcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4030aaff2074487dd432531378579a6cce33e626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4030aaff2074487dd432531378579a6cce33e626", "html_url": "https://github.com/rust-lang/rust/commit/4030aaff2074487dd432531378579a6cce33e626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4030aaff2074487dd432531378579a6cce33e626/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "url": "https://api.github.com/repos/rust-lang/rust/commits/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "html_url": "https://github.com/rust-lang/rust/commit/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698"}], "stats": {"total": 155, "additions": 64, "deletions": 91}, "files": [{"sha": "532dd0007d561a1de8ca179767970cfa14d96601", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -18,7 +18,6 @@ use char;\n use cmp::{Eq, Ord};\n use cmp;\n use from_str::FromStr;\n-use iter;\n use num;\n use num::Num::from_int;\n use prelude::*;\n@@ -201,26 +200,6 @@ impl T: num::One {\n     static pure fn one() -> T { 1 }\n }\n \n-impl T: iter::Times {\n-    #[inline(always)]\n-    #[doc = \"A convenience form for basic iteration. Given a variable `x` \\\n-        of any numeric type, the expression `for x.times { /* anything */ }` \\\n-        will execute the given function exactly x times. If we assume that \\\n-        `x` is an int, this is functionally equivalent to \\\n-        `for int::range(0, x) |_i| { /* anything */ }`.\"]\n-    pure fn times(&self, it: fn() -> bool) {\n-        if is_negative(*self) {\n-            fail fmt!(\"The .times method expects a nonnegative number, \\\n-                       but found %?\", self);\n-        }\n-        let mut i = *self;\n-        while i > 0 {\n-            if !it() { break }\n-            i -= 1;\n-        }\n-    }\n-}\n-\n /**\n  * Parse a buffer of bytes\n  *\n@@ -357,23 +336,6 @@ fn test_interfaces() {\n     test(10 as T);\n }\n \n-#[test]\n-fn test_times() {\n-    use iter::Times;\n-    let ten = 10 as T;\n-    let mut accum = 0;\n-    for ten.times { accum += 1; }\n-    assert (accum == 10);\n-}\n-\n-#[test]\n-#[should_fail]\n-#[ignore(cfg(windows))]\n-fn test_times_negative() {\n-    use iter::Times;\n-    for (-10).times { log(error, ~\"nope!\"); }\n-}\n-\n #[test]\n pub fn test_ranges() {\n     let mut l = ~[];"}, {"sha": "b1fb1fdd483c43782610008e214f2f6295a60010", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -146,8 +146,8 @@ impl<A: ToStr> ~A: ToStr {\n mod tests {\n     #[test]\n     fn test_simple_types() {\n-        assert 1.to_str() == ~\"1\";\n-        assert (-1).to_str() == ~\"-1\";\n+        assert 1i.to_str() == ~\"1\";\n+        assert (-1i).to_str() == ~\"-1\";\n         assert 200u.to_str() == ~\"200\";\n         assert 2u8.to_str() == ~\"2\";\n         assert true.to_str() == ~\"true\";"}, {"sha": "e4cc66519585a5141ec38dff2dd79da1b37868ac", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -18,7 +18,6 @@ use T_SIGNED = self::inst::T_SIGNED;\n use char;\n use cmp::{Eq, Ord};\n use from_str::FromStr;\n-use iter;\n use num;\n use option::{None, Option, Some};\n use str;\n@@ -161,22 +160,6 @@ impl T: num::One {\n     static pure fn one() -> T { 1 }\n }\n \n-impl T: iter::Times {\n-    #[inline(always)]\n-    #[doc = \"A convenience form for basic iteration. Given a variable `x` \\\n-        of any numeric type, the expression `for x.times { /* anything */ }` \\\n-        will execute the given function exactly x times. If we assume that \\\n-        `x` is an int, this is functionally equivalent to \\\n-        `for int::range(0, x) |_i| { /* anything */ }`.\"]\n-    pure fn times(&self, it: fn() -> bool) {\n-        let mut i = *self;\n-        while i > 0 {\n-            if !it() { break }\n-            i -= 1;\n-        }\n-    }\n-}\n-\n /**\n  * Parse a buffer of bytes\n  *\n@@ -349,14 +332,6 @@ pub fn to_str_radix17() {\n     uint::to_str(100u, 17u);\n }\n \n-#[test]\n-pub fn test_times() {\n-    use iter::Times;\n-    let ten = 10 as T;\n-    let mut accum = 0;\n-    for ten.times { accum += 1; }\n-    assert (accum == 10);\n-}\n use io;\n #[test]\n pub fn test_ranges() {"}, {"sha": "93f59cd2d9f97eefed4e5d0215085cb8ff44b020", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -15,9 +15,10 @@ pub use self::inst::{\n     next_power_of_two\n };\n \n-mod inst {\n+pub mod inst {\n     use sys;\n     use uint;\n+    use iter;\n \n     pub type T = uint;\n     #[allow(non_camel_case_types)]\n@@ -107,6 +108,27 @@ mod inst {\n         return true;\n     }\n \n+    pub impl uint: iter::Times {\n+        #[inline(always)]\n+        /**\n+        * A convenience form for basic iteration. Given a uint `x`,\n+        * `for x.times { ... }` executes the given block x times.\n+        *\n+        * Equivalent to `for uint::range(0, x) |_| { ... }`.\n+        *\n+        * Not defined on all integer types to permit unambiguous\n+        * use with integer literals of inferred integer-type as\n+        * the self-value (eg. `for 100.times { ... }`).\n+        */\n+        pure fn times(&self, it: fn() -> bool) {\n+            let mut i = *self;\n+            while i > 0 {\n+                if !it() { break }\n+                i -= 1;\n+            }\n+        }\n+    }\n+\n     /// Returns the smallest power of 2 greater than or equal to `n`\n     #[inline(always)]\n     pub pure fn next_power_of_two(n: uint) -> uint {\n@@ -174,4 +196,13 @@ mod inst {\n         assert(uint::div_ceil(3u, 4u)  == 1u);\n         assert(uint::div_round(3u, 4u) == 1u);\n     }\n+\n+    #[test]\n+    pub fn test_times() {\n+        use iter::Times;\n+        let ten = 10 as uint;\n+        let mut accum = 0;\n+        for ten.times { accum += 1; }\n+        assert (accum == 10);\n+    }\n }"}, {"sha": "1c92526d3d35d4e0dd99f345f3cf1030ef9bd9da", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -41,7 +41,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     let legacy_exports = has_legacy_export_attr(crate.node.attrs);\n \n     // Adds structs that are privileged to this scope.\n-    let add_privileged_items: @fn(&[@ast::item]) -> int = |items| {\n+    let add_privileged_items: @fn(&[@ast::item]) -> uint = |items| {\n         let mut count = 0;\n         for items.each |item| {\n             match item.node {"}, {"sha": "44dd65f238b36541347854024909e409f35759f9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -257,7 +257,6 @@ pub impl LookupContext {\n         match ty::deref(self.tcx(), ty, false) {\n             None => None,\n             Some(t) => {\n-                //FIXME(#3211) -- probably want to force ivars\n                 Some(structurally_resolved_type(self.fcx,\n                                                 self.self_expr.span,\n                                                 t.ty))\n@@ -907,8 +906,8 @@ pub impl LookupContext {\n         let tcx = self.tcx();\n         match ty::get(self_ty).sty {\n             ty_box(*) | ty_uniq(*) | ty_rptr(*) |\n-            ty_infer(IntVar(_)) | // FIXME(#3211)---should be resolved\n-            ty_infer(FloatVar(_)) | // FIXME(#3211)---should be resolved\n+            ty_infer(IntVar(_)) |\n+            ty_infer(FloatVar(_)) |\n             ty_self | ty_param(*) | ty_nil | ty_bot | ty_bool |\n             ty_int(*) | ty_uint(*) |\n             ty_float(*) | ty_enum(*) | ty_ptr(*) | ty_rec(*) |"}, {"sha": "2272e99995d171876361b6667f4003823f433cbc", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -562,11 +562,10 @@ impl @InferCtxt {\n         debug!(\"rollback!\");\n         rollback_to(&self.ty_var_bindings, snapshot.ty_var_bindings_len);\n \n-        // FIXME(#3211) -- int_var and float_var not transactional\n-        //rollback_to(&self.int_var_bindings,\n-        //            snapshot.int_var_bindings_len);\n-        //rollback_to(&self.float_var_bindings,\n-        //            snapshot.float_var_bindings_len);\n+        rollback_to(&self.int_var_bindings,\n+                    snapshot.int_var_bindings_len);\n+        rollback_to(&self.float_var_bindings,\n+                    snapshot.float_var_bindings_len);\n \n         self.region_vars.rollback_to(snapshot.region_vars_snapshot);\n     }"}, {"sha": "7f5f65fe52ba4d6237e02e402ab595240695c9c1", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -54,13 +54,13 @@ impl f64: FuzzyEq {\n \n #[test]\n fn test_fuzzy_equals() {\n-    assert (&1.0).fuzzy_eq(&1.0);\n+    assert (&1.0f).fuzzy_eq(&1.0);\n     assert (&1.0f32).fuzzy_eq(&1.0f32);\n     assert (&1.0f64).fuzzy_eq(&1.0f64);\n }\n \n #[test]\n fn test_fuzzy_eq_eps() {\n-    assert (&1.2).fuzzy_eq_eps(&0.9, &0.5);\n-    assert !(&1.5).fuzzy_eq_eps(&0.9, &0.5);\n+    assert (&1.2f).fuzzy_eq_eps(&0.9, &0.5);\n+    assert !(&1.5f).fuzzy_eq_eps(&0.9, &0.5);\n }"}, {"sha": "2442af5a4025e6c9ede64438b02196e3efc8d2d7", "filename": "src/test/run-pass/fn-pattern-expected-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type-2.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let v = [ (1, 2), (3, 4), (5, 6) ];\n+    let v : &[(int,int)] = &[ (1, 2), (3, 4), (5, 6) ];\n     for v.each |&(x, y)| {\n         io::println(y.to_str());\n         io::println(x.to_str());"}, {"sha": "8b9d6479ed3d1b155b17919dad6fef682fd5c9b3", "filename": "src/test/run-pass/generic-newtype-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fgeneric-newtype-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fgeneric-newtype-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-newtype-struct.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -1,7 +1,7 @@\n struct S<T>(T);\n \n fn main() {\n-    let s = S(2);\n+    let s = S(2i);\n     io::println(s.to_str());\n }\n "}, {"sha": "ecdd0a2c2a7a0678ba2432c3ba7b2cb75d32c209", "filename": "src/test/run-pass/issue-3211.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut x = 0;\n+    for 4096.times {\n+        x += 1;\n+    }\n+    assert x == 4096;\n+    io::println(fmt!(\"x = %u\", x));\n+}\n\\ No newline at end of file"}, {"sha": "0fc2e4f1695ba35a60b4210bee4bf657016b6406", "filename": "src/test/run-pass/issue-4401.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut count = 0;\n+    for 999_999.times() {\n+        count += 1;\n+    }\n+    assert count == 999_999;\n+    io::println(fmt!(\"%u\", count));\n+}\n\\ No newline at end of file"}, {"sha": "d94d2bf5811621fd7e36ba35327873fd049a6a17", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030aaff2074487dd432531378579a6cce33e626/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=4030aaff2074487dd432531378579a6cce33e626", "patch": "@@ -15,17 +15,11 @@\n fn main() {\n // ints\n     // num\n-    assert 15.add(&6) == 21;\n+    assert 15i.add(&6) == 21;\n     assert 15i8.add(&6i8) == 21i8;\n     assert 15i16.add(&6i16) == 21i16;\n     assert 15i32.add(&6i32) == 21i32;\n     assert 15i64.add(&6i64) == 21i64;\n-    // times\n-     15.times(|| false);\n-     15i8.times(|| false);\n-     15i16.times(|| false);\n-     15i32.times(|| false);\n-     15i64.times(|| false);\n \n // uints\n     // num\n@@ -34,12 +28,9 @@ fn main() {\n     assert 15u16.add(&6u16) == 21u16;\n     assert 15u32.add(&6u32) == 21u32;\n     assert 15u64.add(&6u64) == 21u64;\n+\n     // times\n      15u.times(|| false);\n-     15u8.times(|| false);\n-     15u16.times(|| false);\n-     15u32.times(|| false);\n-     15u64.times(|| false);\n \n // floats\n     // num"}]}