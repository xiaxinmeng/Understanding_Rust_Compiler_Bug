{"sha": "59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZWJlOGUxMTU1NzIwZDU2Y2ZkZTE4OTBmYzJmNmI5YmRiMzMyNDM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-31T11:54:38Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-31T11:54:38Z"}, "message": "Make a newtype for DefPathHash so they are not confused with content hashes", "tree": {"sha": "313045adff40d7a205dfc1d0d2d5b17c1b709053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313045adff40d7a205dfc1d0d2d5b17c1b709053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "html_url": "https://github.com/rust-lang/rust/commit/59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "html_url": "https://github.com/rust-lang/rust/commit/f89d8d184490ecb3cf91f7b6bb7296d649f931ba"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "7f91e8e0c304e9fef0784b3342bcf954043a4685", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -36,7 +36,7 @@ use util::nodemap::NodeMap;\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n     key_to_index: FxHashMap<DefKey, DefIndex>,\n-    def_path_hashes: [Vec<Fingerprint>; 2],\n+    def_path_hashes: [Vec<DefPathHash>; 2],\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -57,7 +57,7 @@ impl DefPathTable {\n \n     fn allocate(&mut self,\n                 key: DefKey,\n-                def_path_hash: Fingerprint,\n+                def_path_hash: DefPathHash,\n                 address_space: DefIndexAddressSpace)\n                 -> DefIndex {\n         let index = {\n@@ -81,7 +81,7 @@ impl DefPathTable {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n+    pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n         self.def_path_hashes[index.address_space().index()]\n                             [index.as_array_index()]\n     }\n@@ -148,8 +148,8 @@ impl Decodable for DefPathTable {\n         let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n         let index_to_key_hi: Vec<DefKey> = Decodable::decode(d)?;\n \n-        let def_path_hashes_lo: Vec<Fingerprint> = Decodable::decode(d)?;\n-        let def_path_hashes_hi: Vec<Fingerprint> = Decodable::decode(d)?;\n+        let def_path_hashes_lo: Vec<DefPathHash> = Decodable::decode(d)?;\n+        let def_path_hashes_hi: Vec<DefPathHash> = Decodable::decode(d)?;\n \n         let index_to_key = [index_to_key_lo, index_to_key_hi];\n         let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n@@ -216,25 +216,25 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    fn compute_stable_hash(&self, parent_hash: Fingerprint) -> Fingerprint {\n+    fn compute_stable_hash(&self, parent_hash: DefPathHash) -> DefPathHash {\n         let mut hasher = StableHasher::new();\n \n         // We hash a 0u8 here to disambiguate between regular DefPath hashes,\n         // and the special \"root_parent\" below.\n         0u8.hash(&mut hasher);\n         parent_hash.hash(&mut hasher);\n         self.disambiguated_data.hash(&mut hasher);\n-        hasher.finish()\n+        DefPathHash(hasher.finish())\n     }\n \n-    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> Fingerprint {\n+    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> DefPathHash {\n         let mut hasher = StableHasher::new();\n         // Disambiguate this from a regular DefPath hash,\n         // see compute_stable_hash() above.\n         1u8.hash(&mut hasher);\n         crate_name.hash(&mut hasher);\n         crate_disambiguator.hash(&mut hasher);\n-        hasher.finish()\n+        DefPathHash(hasher.finish())\n     }\n }\n \n@@ -372,6 +372,12 @@ pub enum DefPathData {\n     Typeof,\n }\n \n+#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n+         RustcEncodable, RustcDecodable)]\n+pub struct DefPathHash(pub Fingerprint);\n+\n+impl_stable_hash_for!(tuple_struct DefPathHash { fingerprint });\n+\n impl Definitions {\n     /// Create new empty definition map.\n     pub fn new() -> Definitions {\n@@ -404,7 +410,7 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n+    pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n         self.table.def_path_hash(index)\n     }\n "}, {"sha": "176760c255c00f50c742dbdf1c7cf0c5246e056d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -13,7 +13,7 @@ use self::MapEntry::*;\n use self::collector::NodeCollector;\n pub use self::def_collector::{DefCollector, MacroInvocationData};\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n-                            DisambiguatedDefPathData};\n+                            DisambiguatedDefPathData, DefPathHash};\n \n use dep_graph::{DepGraph, DepNode};\n "}, {"sha": "a835548894182493fed5f506a4f53fbea9ba8e29", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -10,6 +10,7 @@\n \n use hir;\n use hir::def_id::DefId;\n+use hir::map::DefPathHash;\n use ich::{self, CachingCodemapView};\n use session::config::DebugInfoLevel::NoDebugInfo;\n use ty;\n@@ -115,7 +116,7 @@ impl<'a, 'tcx: 'a> StableHashingContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&mut self, def_id: DefId) -> ich::Fingerprint {\n+    pub fn def_path_hash(&mut self, def_id: DefId) -> DefPathHash {\n         self.tcx.def_path_hash(def_id)\n     }\n "}, {"sha": "55a6de62732597e6fcbcebc9366d37da7cf5d8b5", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -281,7 +281,7 @@ pub trait CrateStore {\n                     -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n-    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint;\n+    fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -412,8 +412,8 @@ impl CrateStore for DummyCrateStore {\n     fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")\n     }\n-    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n-        bug!(\"wa\")\n+    fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash {\n+        bug!(\"def_path_hash\")\n     }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n     fn item_children(&self, did: DefId) -> Vec<def::Export> { bug!(\"item_children\") }"}, {"sha": "b4e33e7f5a84a6f57a98e7f7259fb40d6ad238f2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -19,7 +19,7 @@ use dep_graph::DepNode;\n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use ich::{self, StableHashingContext};\n+use ich::StableHashingContext;\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n@@ -2244,7 +2244,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(self, def_id: DefId) -> ich::Fingerprint {\n+    pub fn def_path_hash(self, def_id: DefId) -> hir_map::DefPathHash {\n         if def_id.is_local() {\n             self.hir.definitions().def_path_hash(def_id.index)\n         } else {"}, {"sha": "a507191b4f2cb2823edb827e3e1d2d3732f30a63", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -11,6 +11,7 @@\n //! This module contains TypeVariants and its major components\n \n use hir::def_id::DefId;\n+use hir::map::DefPathHash;\n \n use middle::region;\n use ty::subst::Substs;\n@@ -29,7 +30,6 @@ use util::nodemap::FxHashMap;\n use serialize;\n \n use hir;\n-use ich;\n \n use self::InferTy::*;\n use self::TypeVariants::*;\n@@ -850,7 +850,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         self.item_name // safe to skip the binder to access a name\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (DefPathHash, InternedString) {\n         // We want something here that is stable across crate boundaries.\n         // The DefId isn't but the `deterministic_hash` of the corresponding\n         // DefPath is.\n@@ -885,7 +885,7 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n         self.skip_binder().item_name()\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (DefPathHash, InternedString) {\n         self.skip_binder().sort_key(tcx)\n     }\n "}, {"sha": "ef6bce8a3d9d101bf7809fc1edd51909b25878f5", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ich::Fingerprint;\n+use hir::map::DefPathHash;\n use traits::specialization_graph;\n use ty::fast_reject;\n use ty::fold::TypeFoldable;\n@@ -33,7 +33,7 @@ pub struct TraitDef {\n \n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n-    pub def_path_hash: Fingerprint,\n+    pub def_path_hash: DefPathHash,\n }\n \n // We don't store the list of impls in a flat list because each cached list of\n@@ -95,7 +95,7 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n                unsafety: hir::Unsafety,\n                paren_sugar: bool,\n                has_default_impl: bool,\n-               def_path_hash: Fingerprint)\n+               def_path_hash: DefPathHash)\n                -> TraitDef {\n         TraitDef {\n             def_id,"}, {"sha": "be4d610a89559e5484ef35fd037590f4b04be30a", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -32,6 +32,7 @@ use std::hash::Hash;\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::map::DefPathHash;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ich::{Fingerprint, StableHashingContext};\n use rustc::ty::TyCtxt;\n@@ -218,7 +219,7 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n     {\n         let tcx = self.hcx.tcx();\n \n-        let mut impls: Vec<(Fingerprint, Fingerprint)> = krate\n+        let mut impls: Vec<(DefPathHash, Fingerprint)> = krate\n             .trait_impls\n             .iter()\n             .map(|(&trait_id, impls)| {"}, {"sha": "c6695ebc4bfe012ad4830c2092ed32278bb513f4", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -17,15 +17,14 @@ use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             ExternCrate, NativeLibrary, MetadataLoader, LinkMeta,\n                             LinkagePreference, LoadedMacro, EncodedMetadata};\n use rustc::hir::def;\n-use rustc::ich;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n use rustc::dep_graph::{DepNode, GlobalMetaDataKind};\n-use rustc::hir::map::{DefKey, DefPath, DisambiguatedDefPathData};\n+use rustc::hir::map::{DefKey, DefPath, DisambiguatedDefPathData, DefPathHash};\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n use rustc_back::PanicStrategy;\n \n@@ -334,7 +333,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n-    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n+    fn def_path_hash(&self, def: DefId) -> DefPathHash {\n         self.get_crate_data(def.krate).def_path_hash(def.index)\n     }\n "}, {"sha": "91470f238ecb12ec00656681a53a7f3878fc22ce", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe8e1155720d56cfde1890fc2f6b9bdb33243/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "patch": "@@ -14,9 +14,8 @@ use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n use schema::*;\n \n use rustc::dep_graph::{DepGraph, DepNode, GlobalMetaDataKind};\n-use rustc::hir::map::{DefKey, DefPath, DefPathData};\n+use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n-use rustc::ich;\n \n use rustc::middle::cstore::LinkagePreference;\n use rustc::hir::def::{self, Def, CtorKind};\n@@ -1109,7 +1108,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&self, index: DefIndex) -> ich::Fingerprint {\n+    pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n         self.def_path_table.def_path_hash(index)\n     }\n "}]}