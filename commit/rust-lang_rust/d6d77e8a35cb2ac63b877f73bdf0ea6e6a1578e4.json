{"sha": "d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZDc3ZThhMzVjYjJhYzYzYjg3N2Y3M2JkZjBlYTZlNmExNTc4ZTQ=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-06T12:26:05Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:47Z"}, "message": "Treat ctor of unhandled type as non-exhaustive.", "tree": {"sha": "feea1e81b0dc0bdbb21466c04c373559b5508c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feea1e81b0dc0bdbb21466c04c373559b5508c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "html_url": "https://github.com/rust-lang/rust/commit/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e711abc29032ddd395b60fccc47063e49785168f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e711abc29032ddd395b60fccc47063e49785168f", "html_url": "https://github.com/rust-lang/rust/commit/e711abc29032ddd395b60fccc47063e49785168f"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "7b0b63d0bfa8c58326f2e8a459f48d192157f5b6", "filename": "crates/hir_ty/src/diagnostics/pattern.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs?ref=d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "patch": "@@ -353,6 +353,24 @@ fn main() {\n         //^^^^ Missing match arm\n \n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_panic_at_unimplemented_subpattern_type() {\n+        check_diagnostics(\n+            r#\"\n+struct S { a: char}\n+fn main(v: S) {\n+    match v { S{ a }      => {} }\n+    match v { S{ a: x }   => {} }\n+    match v { S{ a: 'a' } => {} }\n+    match v { S{..}       => {} }\n+    match v { _           => {} }\n+    match v { }\n+        //^ Missing match arm\n+}\n \"#,\n         );\n     }"}, {"sha": "1319745ce147108713f457244b7d0a80783ce2c8", "filename": "crates/hir_ty/src/diagnostics/pattern/deconstruct_pat.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs?ref=d6d77e8a35cb2ac63b877f73bdf0ea6e6a1578e4", "patch": "@@ -419,6 +419,8 @@ impl SplitWildcard {\n         let cx = pcx.cx;\n         let make_range =\n             |start, end, scalar| IntRange(IntRange::from_range(cx, start, end, scalar));\n+        // FIXME(iDawer) using NonExhaustive ctor for unhandled types\n+        let unhandled = || smallvec![NonExhaustive];\n \n         // This determines the set of all possible constructors for the type `pcx.ty`. For numbers,\n         // arrays and slices we use ranges and variable-length slices when appropriate.\n@@ -431,7 +433,7 @@ impl SplitWildcard {\n         let all_ctors = match pcx.ty.kind(&Interner) {\n             TyKind::Scalar(Scalar::Bool) => smallvec![make_range(0, 1, Scalar::Bool)],\n             // TyKind::Array(..) if ... => todo!(),\n-            TyKind::Array(..) | TyKind::Slice(..) => todo!(),\n+            TyKind::Array(..) | TyKind::Slice(..) => unhandled(),\n             &TyKind::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), ref _substs) => {\n                 let enum_data = cx.db.enum_data(enum_id);\n \n@@ -466,7 +468,7 @@ impl SplitWildcard {\n                 } else if cx.feature_exhaustive_patterns() {\n                     // If `exhaustive_patterns` is enabled, we exclude variants known to be\n                     // uninhabited.\n-                    todo!()\n+                    unhandled()\n                 } else {\n                     enum_data\n                         .variants\n@@ -475,8 +477,8 @@ impl SplitWildcard {\n                         .collect()\n                 }\n             }\n-            TyKind::Scalar(Scalar::Char) => todo!(),\n-            TyKind::Scalar(Scalar::Int(..)) | TyKind::Scalar(Scalar::Uint(..)) => todo!(),\n+            TyKind::Scalar(Scalar::Char) => unhandled(),\n+            TyKind::Scalar(Scalar::Int(..)) | TyKind::Scalar(Scalar::Uint(..)) => unhandled(),\n             TyKind::Never if !cx.feature_exhaustive_patterns() && !pcx.is_top_level => {\n                 smallvec![NonExhaustive]\n             }"}]}