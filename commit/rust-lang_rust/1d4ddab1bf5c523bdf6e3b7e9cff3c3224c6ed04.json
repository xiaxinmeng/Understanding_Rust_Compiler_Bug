{"sha": "1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "node_id": "C_kwDOAAsO6NoAKDFkNGRkYWIxYmY1YzUyM2JkZjZlM2I3ZTljZmYzYzMyMjRjNmVkMDQ", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-24T13:26:44Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-24T13:26:44Z"}, "message": "suggest dereferencing index when trying to use a reference of usize as index", "tree": {"sha": "325b68e8067b679a961dc965de26528defd8443e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/325b68e8067b679a961dc965de26528defd8443e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "html_url": "https://github.com/rust-lang/rust/commit/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "html_url": "https://github.com/rust-lang/rust/commit/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3"}], "stats": {"total": 136, "additions": 104, "deletions": 32}, "files": [{"sha": "1b7928a10bd1263e4c435aa1da575d9db3ab12f4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -534,6 +534,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);\n+                        self.suggest_dereferencing_index(&obligation, &mut err, trait_predicate);\n                         let mut suggested =\n                             self.suggest_dereferences(&obligation, &mut err, trait_predicate);\n                         suggested |= self.suggest_fn_call(&obligation, &mut err, trait_predicate);"}, {"sha": "c51f3dacd54665e6824941b19e0129789f25b656", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -320,6 +320,13 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n+\n+    fn suggest_dereferencing_index(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -2927,6 +2934,26 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             );\n         }\n     }\n+\n+    fn suggest_dereferencing_index(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) {\n+        if let ObligationCauseCode::ImplDerivedObligation(_) = obligation.cause.code()\n+            && self.tcx.is_diagnostic_item(sym::SliceIndex, trait_pred.skip_binder().trait_ref.def_id)\n+            && let ty::Ref(_, inner_ty, _) = trait_pred.skip_binder().self_ty().kind()\n+            && let ty::Uint(ty::UintTy::Usize) = inner_ty.kind()\n+        {\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_lo(),\n+            \"consider dereferencing here\",\n+            '*',\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "4c0a2bd9199aa1cee68bd8b908a84573df1afe20", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -2648,6 +2648,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some((index_ty, element_ty)) => {\n                     // two-phase not needed because index_ty is never mutable\n                     self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n+                    self.select_obligations_where_possible(false, |errors| {\n+                        for error in errors {\n+                            match error.obligation.predicate.kind().skip_binder() {\n+                                ty::PredicateKind::Trait(predicate)\n+                                    if self.tcx.is_diagnostic_item(\n+                                        sym::SliceIndex,\n+                                        predicate.trait_ref.def_id,\n+                                    ) => {}\n+                                _ => continue,\n+                            }\n+                            error.obligation.cause.span = idx.span;\n+                        }\n+                    });\n                     element_ty\n                 }\n                 None => {"}, {"sha": "b36f4dab8291db56a6dc355e253f4e34910af8f2", "filename": "src/test/ui/index-help.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `[{integer}]` cannot be indexed by `i32`\n-  --> $DIR/index-help.rs:3:5\n+  --> $DIR/index-help.rs:3:7\n    |\n LL |     x[0i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "fbff20f8deeabec8f35eea6fa09af31f19c5e767", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `[{integer}]` cannot be indexed by `u8`\n-  --> $DIR/indexing-requires-a-uint.rs:6:5\n+  --> $DIR/indexing-requires-a-uint.rs:6:9\n    |\n LL |     [0][0u8];\n-   |     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |         ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "3f9094d124eea340fd9782dfea7aaebdf02fcf53", "filename": "src/test/ui/integral-indexing.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-indexing.stderr?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -1,78 +1,78 @@\n error[E0277]: the type `[isize]` cannot be indexed by `u8`\n-  --> $DIR/integral-indexing.rs:6:5\n+  --> $DIR/integral-indexing.rs:6:7\n    |\n LL |     v[3u8];\n-   |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i8`\n-  --> $DIR/integral-indexing.rs:7:5\n+  --> $DIR/integral-indexing.rs:7:7\n    |\n LL |     v[3i8];\n-   |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `u32`\n-  --> $DIR/integral-indexing.rs:8:5\n+  --> $DIR/integral-indexing.rs:8:7\n    |\n LL |     v[3u32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i32`\n-  --> $DIR/integral-indexing.rs:9:5\n+  --> $DIR/integral-indexing.rs:9:7\n    |\n LL |     v[3i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `Vec<isize>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u8`\n-  --> $DIR/integral-indexing.rs:12:5\n+  --> $DIR/integral-indexing.rs:12:18\n    |\n LL |     s.as_bytes()[3u8];\n-   |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i8`\n-  --> $DIR/integral-indexing.rs:13:5\n+  --> $DIR/integral-indexing.rs:13:18\n    |\n LL |     s.as_bytes()[3i8];\n-   |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u32`\n-  --> $DIR/integral-indexing.rs:14:5\n+  --> $DIR/integral-indexing.rs:14:18\n    |\n LL |     s.as_bytes()[3u32];\n-   |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i32`\n-  --> $DIR/integral-indexing.rs:15:5\n+  --> $DIR/integral-indexing.rs:15:18\n    |\n LL |     s.as_bytes()[3i32];\n-   |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "72f67a685156dba2f8652ef43d7dc9270def6699", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -1,18 +1,18 @@\n error[E0277]: the type `[i32]` cannot be indexed by `i32`\n-  --> $DIR/slice-index.rs:8:5\n+  --> $DIR/slice-index.rs:8:7\n    |\n LL |     x[1i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `[i32]`\n \n error[E0277]: the type `[i32]` cannot be indexed by `RangeTo<i32>`\n-  --> $DIR/slice-index.rs:9:5\n+  --> $DIR/slice-index.rs:9:7\n    |\n LL |     x[..1i32];\n-   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `RangeTo<i32>`\n    = help: the following other types implement trait `SliceIndex<T>`:"}, {"sha": "9079a18d6a67b80cc37ff515f26a1b672b9c97c1", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-idx.rs:3:17\n+  --> $DIR/str-idx.rs:3:19\n    |\n LL |     let _: u8 = s[4];\n-   |                 ^^^^ string indices are ranges of `usize`\n+   |                   ^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n@@ -47,10 +47,10 @@ LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i:\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n-  --> $DIR/str-idx.rs:6:17\n+  --> $DIR/str-idx.rs:6:19\n    |\n LL |     let _: u8 = s['c'];\n-   |                 ^^^^^^ string indices are ranges of `usize`\n+   |                   ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required because of the requirements on the impl of `Index<char>` for `str`"}, {"sha": "2d062e56a9bdd121b9f2f1924eca64323a7a479d", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -25,10 +25,10 @@ LL |     s[1..2] = bot();\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error[E0277]: the type `str` cannot be indexed by `usize`\n-  --> $DIR/str-mut-idx.rs:7:5\n+  --> $DIR/str-mut-idx.rs:7:7\n    |\n LL |     s[1usize] = bot();\n-   |     ^^^^^^^^^ string indices are ranges of `usize`\n+   |       ^^^^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `usize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n@@ -71,10 +71,10 @@ LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n-  --> $DIR/str-mut-idx.rs:13:5\n+  --> $DIR/str-mut-idx.rs:13:7\n    |\n LL |     s['c'];\n-   |     ^^^^^^ string indices are ranges of `usize`\n+   |       ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required because of the requirements on the impl of `Index<char>` for `str`"}, {"sha": "dd4ae4eb14c3051c3911be0e5ee80a8721c1ceee", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let i: &usize = &1;\n+    let one_item_please: i32 = [1, 2, 3][*i]; //~ ERROR the type `[{integer}]` cannot be indexed by `&usize`\n+}"}, {"sha": "82ebacc49f235cccdb16f58fa1d76b4917241b0d", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let i: &usize = &1;\n+    let one_item_please: i32 = [1, 2, 3][i]; //~ ERROR the type `[{integer}]` cannot be indexed by `&usize`\n+}"}, {"sha": "c0bb5044338c214b36fc60269165e17411513ad3", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr?ref=1d4ddab1bf5c523bdf6e3b7e9cff3c3224c6ed04", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the type `[{integer}]` cannot be indexed by `&usize`\n+  --> $DIR/suggest-dereferencing-index.rs:6:42\n+   |\n+LL |     let one_item_please: i32 = [1, 2, 3][i];\n+   |                                          ^ slice indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&usize`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n+   = note: required because of the requirements on the impl of `Index<&usize>` for `[{integer}]`\n+help: consider dereferencing here\n+   |\n+LL |     let one_item_please: i32 = [1, 2, 3][*i];\n+   |                                          +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}