{"sha": "03e34f8f816c2594238585bdca39716f4050cb69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZTM0ZjhmODE2YzI1OTQyMzg1ODViZGNhMzk3MTZmNDA1MGNiNjk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-21T23:15:25Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-31T17:37:21Z"}, "message": "Remove dependency on error handling from find_testable_code", "tree": {"sha": "dd3a63e35155a04fa7729dca7b8e60d8fb29e924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3a63e35155a04fa7729dca7b8e60d8fb29e924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e34f8f816c2594238585bdca39716f4050cb69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e34f8f816c2594238585bdca39716f4050cb69", "html_url": "https://github.com/rust-lang/rust/commit/03e34f8f816c2594238585bdca39716f4050cb69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e34f8f816c2594238585bdca39716f4050cb69/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "html_url": "https://github.com/rust-lang/rust/commit/de5cebdba58770ab555476bc4cdf23d89bd0c3ea"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "54fd041fb004bcaf97bdc6230758a884d79089fc", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/03e34f8f816c2594238585bdca39716f4050cb69/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e34f8f816c2594238585bdca39716f4050cb69/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=03e34f8f816c2594238585bdca39716f4050cb69", "patch": "@@ -34,10 +34,8 @@ use std::fmt::{self, Write};\n use std::borrow::Cow;\n use std::ops::Range;\n use std::str;\n-use syntax::feature_gate::UnstableFeatures;\n-use syntax::codemap::Span;\n-use errors;\n \n+use syntax::feature_gate::UnstableFeatures;\n use html::render::derive_id;\n use html::toc::TocBuilder;\n use html::highlight;\n@@ -469,10 +467,17 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n     }\n }\n \n-pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span,\n-                          handler: &errors::Handler) {\n-    tests.set_position(position);\n+pub struct TestableCodeError(());\n+\n+impl fmt::Display for TestableCodeError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"invalid start of a new code block\")\n+    }\n+}\n \n+pub fn find_testable_code(\n+    doc: &str, tests: &mut test::Collector\n+) -> Result<(), TestableCodeError> {\n     let is_nightly = UnstableFeatures::from_environment().is_nightly_build();\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;\n@@ -516,8 +521,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                     tests.add_test(text, block_info, line);\n                     prev_offset = offset;\n                 } else {\n-                    handler.span_warn(position, \"invalid start of a new code block\");\n-                    break;\n+                    return Err(TestableCodeError(()));\n                 }\n             }\n             Event::Start(Tag::Header(level)) => {\n@@ -535,6 +539,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n             _ => {}\n         }\n     }\n+    Ok(())\n }\n \n #[derive(Eq, PartialEq, Clone, Debug)]"}, {"sha": "4d1eae1470f041bff74bf319f3e67f39cee4a6df", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03e34f8f816c2594238585bdca39716f4050cb69/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e34f8f816c2594238585bdca39716f4050cb69/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=03e34f8f816c2594238585bdca39716f4050cb69", "patch": "@@ -156,7 +156,11 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(PathBuf::from(input)),\n                                        linker, edition);\n-    find_testable_code(&input_str, &mut collector, DUMMY_SP, diag);\n+    collector.set_position(DUMMY_SP);\n+    let res = find_testable_code(&input_str, &mut collector);\n+    if let Err(err) = res {\n+        diag.span_warn(DUMMY_SP, &err.to_string());\n+    }\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests,\n                        testing::Options::new().display_output(display_warnings));"}, {"sha": "9723b4528008956b80c64b99494ac22a5c5aa23d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03e34f8f816c2594238585bdca39716f4050cb69/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e34f8f816c2594238585bdca39716f4050cb69/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=03e34f8f816c2594238585bdca39716f4050cb69", "patch": "@@ -687,10 +687,12 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         // the collapse-docs pass won't combine sugared/raw doc attributes, or included files with\n         // anything else, this will combine them for us\n         if let Some(doc) = attrs.collapsed_doc_value() {\n-            markdown::find_testable_code(&doc,\n-                                         self.collector,\n-                                         attrs.span.unwrap_or(DUMMY_SP),\n-                                         self.sess.diagnostic());\n+            self.collector.set_position(attrs.span.unwrap_or(DUMMY_SP));\n+            let res = markdown::find_testable_code(&doc, self.collector);\n+            if let Err(err) = res {\n+                self.sess.diagnostic().span_warn(attrs.span.unwrap_or(DUMMY_SP),\n+                    &err.to_string());\n+            }\n         }\n \n         nested(self);"}]}