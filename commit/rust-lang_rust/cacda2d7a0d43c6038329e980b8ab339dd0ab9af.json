{"sha": "cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhY2RhMmQ3YTBkNDNjNjAzODMyOWU5ODBiOGFiMzM5ZGQwYWI5YWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T03:02:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-11T03:02:28Z"}, "message": "Rollup merge of #68084 - estebank:ice-68000, r=varkor\n\nDo not ICE on unicode next point\n\nUse `shrink_to_hi` instead of `next_point` and fix `next_point`.\n\nFix #68000, fix #68091, fix #68092.", "tree": {"sha": "c4377179a96549ab98208b254315fb7d5497f858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4377179a96549ab98208b254315fb7d5497f858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGTrFCRBK7hj4Ov3rIwAAdHIIAJhv6S1qg6mD02k2zyXP/5pr\nyGl/StMLlLTYoa48QCOiqIsbZ9TCMSPwCYZ20OC/6bFZCQGZJYJsAMsOi44D3wKG\nyTA2y4WL/fmsYPJQl/0lqZhcxXALPcPT8FtxxWRmjC+1KohBHx9v6WR0nkyMxfGC\neHAC5/JCyRsluL31aqeJrMCn20sketNKZFVUYxjLFJCMooe+ZOAHz/R69uYF7Ot9\nAxTeVY1DA5FXhMyJ2/j20LU7vahie9dQyKveuFaAw2BwaeoSWLkpu7N3WSU1P9IK\n2HE7mfv2OPR9dmn6H7BFJJpQp6j3RUF8UTCIertmUOjqOxrfnwiqSHfDxVszaUQ=\n=zXK7\n-----END PGP SIGNATURE-----\n", "payload": "tree c4377179a96549ab98208b254315fb7d5497f858\nparent ba14f9429ab60f383e038012866a2f6c52b6fec4\nparent f6e9fd037a7b55f8f4fe78694b77d9788b18dfeb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578711748 +0100\ncommitter GitHub <noreply@github.com> 1578711748 +0100\n\nRollup merge of #68084 - estebank:ice-68000, r=varkor\n\nDo not ICE on unicode next point\n\nUse `shrink_to_hi` instead of `next_point` and fix `next_point`.\n\nFix #68000, fix #68091, fix #68092.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "html_url": "https://github.com/rust-lang/rust/commit/cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba14f9429ab60f383e038012866a2f6c52b6fec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba14f9429ab60f383e038012866a2f6c52b6fec4", "html_url": "https://github.com/rust-lang/rust/commit/ba14f9429ab60f383e038012866a2f6c52b6fec4"}, {"sha": "f6e9fd037a7b55f8f4fe78694b77d9788b18dfeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e9fd037a7b55f8f4fe78694b77d9788b18dfeb", "html_url": "https://github.com/rust-lang/rust/commit/f6e9fd037a7b55f8f4fe78694b77d9788b18dfeb"}], "stats": {"total": 104, "additions": 83, "deletions": 21}, "files": [{"sha": "a992b6e2662d2ec34537dce0b3e4e82425702cc5", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -106,7 +106,7 @@ fn parse_assert<'a>(\n     let custom_message =\n         if let token::Literal(token::Lit { kind: token::Str, .. }) = parser.token.kind {\n             let mut err = cx.struct_span_warn(parser.token.span, \"unexpected string literal\");\n-            let comma_span = cx.source_map().next_point(parser.prev_span);\n+            let comma_span = parser.prev_span.shrink_to_hi();\n             err.span_suggestion_short(\n                 comma_span,\n                 \"try adding a comma\","}, {"sha": "e24e8719133a987574b2d9def7200801d42a9b93", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -182,7 +182,7 @@ impl CodeSuggestion {\n \n                 // Find the bounding span.\n                 let lo = substitution.parts.iter().map(|part| part.span.lo()).min().unwrap();\n-                let hi = substitution.parts.iter().map(|part| part.span.hi()).min().unwrap();\n+                let hi = substitution.parts.iter().map(|part| part.span.hi()).max().unwrap();\n                 let bounding_span = Span::with_root_ctxt(lo, hi);\n                 let lines = cm.span_to_lines(bounding_span).unwrap();\n                 assert!(!lines.lines.is_empty());"}, {"sha": "246f66084b813b1d6c7660bf3bc09929d62a3fdd", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -696,7 +696,7 @@ pub(super) fn parse(\n                         if parser.token.span.is_dummy() {\n                             parser.token.span\n                         } else {\n-                            sess.source_map().next_point(parser.token.span)\n+                            parser.token.span.shrink_to_hi()\n                         },\n                     ),\n                     \"missing tokens in macro arguments\","}, {"sha": "a5056c1665e30a10928eaccc8e464ecb54eeb5dd", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -259,10 +259,7 @@ impl<'a> Parser<'a> {\n             };\n             (\n                 format!(\"expected one of {}, found {}\", expect, actual),\n-                (\n-                    self.sess.source_map().next_point(self.prev_span),\n-                    format!(\"expected one of {}\", short_expect),\n-                ),\n+                (self.prev_span.shrink_to_hi(), format!(\"expected one of {}\", short_expect)),\n             )\n         } else if expected.is_empty() {\n             (\n@@ -272,7 +269,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (\n                 format!(\"expected {}, found {}\", expect, actual),\n-                (self.sess.source_map().next_point(self.prev_span), format!(\"expected {}\", expect)),\n+                (self.prev_span.shrink_to_hi(), format!(\"expected {}\", expect)),\n             )\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n@@ -803,7 +800,7 @@ impl<'a> Parser<'a> {\n             _ if self.prev_span == DUMMY_SP => (self.token.span, self.token.span),\n             // EOF, don't want to point at the following char, but rather the last token.\n             (token::Eof, None) => (self.prev_span, self.token.span),\n-            _ => (self.sess.source_map().next_point(self.prev_span), self.token.span),\n+            _ => (self.prev_span.shrink_to_hi(), self.token.span),\n         };\n         let msg = format!(\n             \"expected `{}`, found {}\",\n@@ -1126,7 +1123,7 @@ impl<'a> Parser<'a> {\n                     err.span_label(sp, \"unclosed delimiter\");\n                 }\n                 err.span_suggestion_short(\n-                    self.sess.source_map().next_point(self.prev_span),\n+                    self.prev_span.shrink_to_hi(),\n                     &format!(\"{} may belong here\", delim.to_string()),\n                     delim.to_string(),\n                     Applicability::MaybeIncorrect,"}, {"sha": "b0c78ad7e4bcc1155914ac85420a56c0a08cd294", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -1645,7 +1645,7 @@ impl<'a> Parser<'a> {\n                             //   |      |\n                             //   |      parsed until here as `\"y\" & X`\n                             err.span_suggestion_short(\n-                                cm.next_point(arm_start_span),\n+                                arm_start_span.shrink_to_hi(),\n                                 \"missing a comma here to end this `match` arm\",\n                                 \",\".to_owned(),\n                                 Applicability::MachineApplicable,"}, {"sha": "d4756dff49a9d8cd6ac4ebb5f1b4486b0d29ea85", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -1510,7 +1510,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n             _ => {\n-                let sp = self.sess.source_map().next_point(self.prev_span);\n+                let sp = self.prev_span.shrink_to_hi();\n                 let mut err = self.struct_span_err(\n                     sp,\n                     &format!(\"expected `,`, or `}}`, found {}\", super::token_descr(&self.token)),\n@@ -1649,7 +1649,7 @@ impl<'a> Parser<'a> {\n             // it's safe to peel off one character only when it has the close delim\n             self.prev_span.with_lo(self.prev_span.hi() - BytePos(1))\n         } else {\n-            self.sess.source_map().next_point(self.prev_span)\n+            self.prev_span.shrink_to_hi()\n         };\n \n         self.struct_span_err(\n@@ -1665,7 +1665,7 @@ impl<'a> Parser<'a> {\n             Applicability::MaybeIncorrect,\n         )\n         .span_suggestion(\n-            self.sess.source_map().next_point(self.prev_span),\n+            self.prev_span.shrink_to_hi(),\n             \"add a semicolon\",\n             ';'.to_string(),\n             Applicability::MaybeIncorrect,"}, {"sha": "a1035d320b31c426e33c4e0df663014992052d9e", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -765,7 +765,7 @@ impl<'a> Parser<'a> {\n                             break;\n                         }\n                         Err(mut expect_err) => {\n-                            let sp = self.sess.source_map().next_point(self.prev_span);\n+                            let sp = self.prev_span.shrink_to_hi();\n                             let token_str = pprust::token_kind_to_string(t);\n \n                             // Attempt to keep parsing if it was a similar separator."}, {"sha": "fb5fcf4a8303badacd9ae0bdc69ec90b8607e7bb", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -710,7 +710,7 @@ impl SourceMap {\n     pub fn next_point(&self, sp: Span) -> Span {\n         let start_of_next_point = sp.hi().0;\n \n-        let width = self.find_width_of_character_at_span(sp, true);\n+        let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);\n         // If the width is 1, then the next span should point to the same `lo` and `hi`. However,\n         // in the case of a multibyte character, where the width != 1, the next span should\n         // span multiple bytes to include the whole character."}, {"sha": "58f407b89027851a9211630cfe4ae4d6cc2794b5", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -240,7 +240,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ) = (parent_node, callee_node)\n         {\n             let start = sp.shrink_to_lo();\n-            let end = self.tcx.sess.source_map().next_point(callee_span);\n+            let end = callee_span.shrink_to_hi();\n             err.multipart_suggestion(\n                 \"if you meant to create this closure and immediately call it, surround the \\\n                 closure with parenthesis\",\n@@ -317,9 +317,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let call_is_multiline =\n                                 self.tcx.sess.source_map().is_multiline(call_expr.span);\n                             if call_is_multiline {\n-                                let span = self.tcx.sess.source_map().next_point(callee.span);\n                                 err.span_suggestion(\n-                                    span,\n+                                    callee.span.shrink_to_hi(),\n                                     \"try adding a semicolon\",\n                                     \";\".to_owned(),\n                                     Applicability::MaybeIncorrect,"}, {"sha": "92a7e18a8600f557dbf5195689e6baf92906a50d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -4952,9 +4952,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::Loop(..)\n                 | ExprKind::Match(..)\n                 | ExprKind::Block(..) => {\n-                    let sp = self.tcx.sess.source_map().next_point(cause_span);\n                     err.span_suggestion(\n-                        sp,\n+                        cause_span.shrink_to_hi(),\n                         \"try adding a semicolon\",\n                         \";\".to_string(),\n                         Applicability::MachineApplicable,"}, {"sha": "3c49a5a975209eedc7b31ec2496bf72abefce925", "filename": "src/test/ui/issues/issue-68000-unicode-ident-after-missing-comma.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -0,0 +1,6 @@\n+pub struct Foo {\n+    pub bar: Vec<i32>\u00f6\n+    //~^ ERROR expected `,`, or `}`, found `\u00f6`\n+} //~ ERROR expected `:`, found `}`\n+\n+fn main() {}"}, {"sha": "ef365a616437be09a73f32738943e6afc847ee13", "filename": "src/test/ui/issues/issue-68000-unicode-ident-after-missing-comma.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -0,0 +1,17 @@\n+error: expected `,`, or `}`, found `\u00f6`\n+  --> $DIR/issue-68000-unicode-ident-after-missing-comma.rs:2:22\n+   |\n+LL |     pub bar: Vec<i32>\u00f6\n+   |                      ^ help: try adding a comma: `,`\n+\n+error: expected `:`, found `}`\n+  --> $DIR/issue-68000-unicode-ident-after-missing-comma.rs:4:1\n+   |\n+LL |     pub bar: Vec<i32>\u00f6\n+   |                       - expected `:`\n+LL |\n+LL | }\n+   | ^ unexpected token\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "00f90cc73b344489e10765116834215a7212ce71", "filename": "src/test/ui/issues/issue-68091-unicode-ident-after-if.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! x {\n+    ($($c:tt)*) => {\n+        $($c)\u00f6* {} //~ ERROR missing condition for `if` expression\n+    };             //~| ERROR mismatched types\n+}\n+\n+fn main() {\n+    x!(if);\n+}"}, {"sha": "8d1a03ac207e18390a5f2559097969286108eb9f", "filename": "src/test/ui/issues/issue-68091-unicode-ident-after-if.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -0,0 +1,18 @@\n+error: missing condition for `if` expression\n+  --> $DIR/issue-68091-unicode-ident-after-if.rs:3:14\n+   |\n+LL |         $($c)\u00f6* {}\n+   |              ^ expected if condition here\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-68091-unicode-ident-after-if.rs:3:17\n+   |\n+LL |         $($c)\u00f6* {}\n+   |                 ^^ expected `bool`, found `()`\n+...\n+LL |     x!(if);\n+   |     ------- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1a90b4724d49d259ce76fd049f0b2b19190e7837", "filename": "src/test/ui/issues/issue-68092-unicode-ident-after-incomplete-expr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.rs?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! x {\n+    ($($c:tt)*) => {\n+        $($c)\u00f6* //~ ERROR macro expansion ends with an incomplete expression: expected expression\n+    };\n+}\n+\n+fn main() {\n+    x!(!);\n+}"}, {"sha": "0b9c364f1f1fbb907e173aff1f91b4e402c44e27", "filename": "src/test/ui/issues/issue-68092-unicode-ident-after-incomplete-expr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacda2d7a0d43c6038329e980b8ab339dd0ab9af/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.stderr?ref=cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "patch": "@@ -0,0 +1,8 @@\n+error: macro expansion ends with an incomplete expression: expected expression\n+  --> $DIR/issue-68092-unicode-ident-after-incomplete-expr.rs:3:14\n+   |\n+LL |         $($c)\u00f6*\n+   |              ^ expected expression\n+\n+error: aborting due to previous error\n+"}]}