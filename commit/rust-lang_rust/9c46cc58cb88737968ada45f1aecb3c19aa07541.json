{"sha": "9c46cc58cb88737968ada45f1aecb3c19aa07541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDZjYzU4Y2I4ODczNzk2OGFkYTQ1ZjFhZWNiM2MxOWFhMDc1NDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-10T19:42:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-11T17:51:09Z"}, "message": "Add a temporary syntax for bare functions\n\nBare functions will be represented as 'fn#' until they're implemented. Then\nwe'll switch it over to just 'fn'.\n\nIssue #1022", "tree": {"sha": "0d159e9dda93d126404212081f588ab53deda2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d159e9dda93d126404212081f588ab53deda2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c46cc58cb88737968ada45f1aecb3c19aa07541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c46cc58cb88737968ada45f1aecb3c19aa07541", "html_url": "https://github.com/rust-lang/rust/commit/9c46cc58cb88737968ada45f1aecb3c19aa07541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c46cc58cb88737968ada45f1aecb3c19aa07541/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a0644f882ad38c6b35e6d0983a24909e13a350c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0644f882ad38c6b35e6d0983a24909e13a350c", "html_url": "https://github.com/rust-lang/rust/commit/2a0644f882ad38c6b35e6d0983a24909e13a350c"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "462bfe258e4f1637ee3c92cc6b5b047731313fe5", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c46cc58cb88737968ada45f1aecb3c19aa07541/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c46cc58cb88737968ada45f1aecb3c19aa07541/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9c46cc58cb88737968ada45f1aecb3c19aa07541", "patch": "@@ -293,7 +293,7 @@ fn parse_ty_fn(proto: ast::proto, p: parser) -> ast::ty_ {\n     ret ast::ty_fn(proto, inputs.node, ret_ty, ret_style, constrs);\n }\n \n-fn parse_proto(p: parser) -> ast::proto {\n+fn parse_method_proto(p: parser) -> ast::proto {\n     if eat_word(p, \"iter\") {\n         ret ast::proto_iter;\n     } else if eat_word(p, \"fn\") {\n@@ -306,7 +306,7 @@ fn parse_proto(p: parser) -> ast::proto {\n fn parse_ty_obj(p: parser, &hi: uint) -> ast::ty_ {\n     fn parse_method_sig(p: parser) -> ast::ty_method {\n         let flo = p.get_lo_pos();\n-        let proto: ast::proto = parse_proto(p);\n+        let proto: ast::proto = parse_method_proto(p);\n         let ident = parse_value_ident(p);\n         let f = parse_ty_fn(proto, p);\n         expect(p, token::SEMI);\n@@ -568,7 +568,8 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n         hi = p.get_hi_pos();\n         expect(p, token::RBRACKET);\n     } else if eat_word(p, \"fn\") {\n-        t = parse_ty_fn(ast::proto_fn, p);\n+        let proto = parse_fn_proto(p);\n+        t = parse_ty_fn(proto, p);\n         alt t { ast::ty_fn(_, _, out, _, _) { hi = out.span.hi; } }\n     } else if eat_word(p, \"block\") {\n         t = parse_ty_fn(ast::proto_block, p);\n@@ -844,7 +845,8 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n                 ret parse_spawn_expr(p);\n         */\n     } else if eat_word(p, \"fn\") {\n-        ret parse_fn_expr(p, ast::proto_fn);\n+        let proto = parse_fn_proto(p);\n+        ret parse_fn_expr(p, proto);\n     } else if eat_word(p, \"block\") {\n         ret parse_fn_expr(p, ast::proto_block);\n     } else if eat_word(p, \"lambda\") {\n@@ -1851,7 +1853,7 @@ fn parse_anon_obj_field(p: parser) -> ast::anon_obj_field {\n \n fn parse_method(p: parser) -> @ast::method {\n     let lo = p.get_lo_pos();\n-    let proto = parse_proto(p);\n+    let proto = parse_method_proto(p);\n     let ident = parse_value_ident(p);\n     let f = parse_fn(p, proto, ast::impure_fn, ast::il_normal);\n     let meth = {ident: ident, meth: f, id: p.get_id()};\n@@ -2124,20 +2126,32 @@ fn parse_auth(p: parser) -> ast::_auth {\n     } else { unexpected(p, p.peek()); }\n }\n \n+fn parse_fn_proto(p: parser) -> ast::proto {\n+    if p.peek() == token::POUND {\n+        p.bump();\n+        ast::proto_fn\n+    } else {\n+        ast::proto_fn\n+    }\n+}\n+\n fn parse_item(p: parser, attrs: [ast::attribute]) -> option::t<@ast::item> {\n     if eat_word(p, \"const\") {\n         ret some(parse_item_const(p, attrs));\n     } else if eat_word(p, \"inline\") {\n         expect_word(p, \"fn\");\n-        ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_fn,\n+        let proto = parse_fn_proto(p);\n+        ret some(parse_item_fn_or_iter(p, ast::impure_fn, proto,\n                                        attrs, ast::il_inline));\n     } else if is_word(p, \"fn\") && p.look_ahead(1u) != token::LPAREN {\n         p.bump();\n-        ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_fn,\n+        let proto = parse_fn_proto(p);\n+        ret some(parse_item_fn_or_iter(p, ast::impure_fn, proto,\n                                        attrs, ast::il_normal));\n     } else if eat_word(p, \"pure\") {\n         expect_word(p, \"fn\");\n-        ret some(parse_item_fn_or_iter(p, ast::pure_fn, ast::proto_fn, attrs,\n+        let proto = parse_fn_proto(p);\n+        ret some(parse_item_fn_or_iter(p, ast::pure_fn, proto, attrs,\n                                        ast::il_normal));\n     } else if eat_word(p, \"iter\") {\n         ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_iter,"}, {"sha": "08fb613e0ad6065b8e41d4399bb7ead63f16efc2", "filename": "src/test/run-pass/fn-bare-anon.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c46cc58cb88737968ada45f1aecb3c19aa07541/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c46cc58cb88737968ada45f1aecb3c19aa07541/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs?ref=9c46cc58cb88737968ada45f1aecb3c19aa07541", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let f: fn#() = fn# () {\n+        log \"This is a bare function\"\n+    };\n+    f();\n+}\n\\ No newline at end of file"}, {"sha": "a5cdc2e82abb7e1407166193acc8d99837847cef", "filename": "src/test/run-pass/fn-bare-item.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c46cc58cb88737968ada45f1aecb3c19aa07541/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c46cc58cb88737968ada45f1aecb3c19aa07541/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs?ref=9c46cc58cb88737968ada45f1aecb3c19aa07541", "patch": "@@ -0,0 +1,7 @@\n+fn# f() {\n+    log \"This is a bare function\";\n+}\n+\n+fn main() {\n+    f();\n+}\n\\ No newline at end of file"}]}