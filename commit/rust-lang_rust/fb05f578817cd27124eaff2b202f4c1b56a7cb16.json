{"sha": "fb05f578817cd27124eaff2b202f4c1b56a7cb16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMDVmNTc4ODE3Y2QyNzEyNGVhZmYyYjIwMmY0YzFiNTZhN2NiMTY=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-13T23:29:40Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-14T16:02:47Z"}, "message": "Compile default methods; un-xfail default methods test (cc: #2794).", "tree": {"sha": "811959cdc409122208ecd828ff77907d0437e684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811959cdc409122208ecd828ff77907d0437e684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb05f578817cd27124eaff2b202f4c1b56a7cb16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb05f578817cd27124eaff2b202f4c1b56a7cb16", "html_url": "https://github.com/rust-lang/rust/commit/fb05f578817cd27124eaff2b202f4c1b56a7cb16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb05f578817cd27124eaff2b202f4c1b56a7cb16/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8271b3f0c89f052612c5bb8262f399995121e061", "url": "https://api.github.com/repos/rust-lang/rust/commits/8271b3f0c89f052612c5bb8262f399995121e061", "html_url": "https://github.com/rust-lang/rust/commit/8271b3f0c89f052612c5bb8262f399995121e061"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "57ad119d11e9ca321470423e2b267676bfa2f3ba", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fb05f578817cd27124eaff2b202f4c1b56a7cb16/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb05f578817cd27124eaff2b202f4c1b56a7cb16/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fb05f578817cd27124eaff2b202f4c1b56a7cb16", "patch": "@@ -5023,6 +5023,9 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n       ast::item_class(struct_def, tps) => {\n         trans_struct_def(ccx, struct_def, tps, path, item.ident, item.id);\n       }\n+      ast::item_trait(tps, _, trait_methods) => {\n+        trans_trait(ccx, tps, trait_methods, path, item.ident);\n+      }\n       _ => {/* fall through */ }\n     }\n }\n@@ -5051,6 +5054,14 @@ fn trans_struct_def(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n     impl::trans_impl(ccx, *path, ident, ms, tps);\n }\n \n+fn trans_trait(ccx: @crate_ctxt, tps: ~[ast::ty_param],\n+               trait_methods: ~[ast::trait_method],\n+               path: @ast_map::path, ident: ast::ident) {\n+    // Translate any methods that have provided implementations\n+    let (_, provided_methods) = ast_util::split_trait_methods(trait_methods);\n+    impl::trans_impl(ccx, *path, ident, provided_methods, tps);\n+}\n+\n // Translate a module. Doing this amounts to translating the items in the\n // module; there ends up being no artifact (aside from linkage names) of\n // separate modules in the compiled program.  That's because modules exist\n@@ -5275,28 +5286,14 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                                get_item_val()\");\n               }\n               ast::provided(m) => {\n-                // FIXME (#2794): Default methods currently compiling but not\n-                // linking successfully; not sure if this is correct.  It's\n-                // just copypasta from the node_method case.\n                 exprt = true;\n-                let mty = ty::node_id_to_type(ccx.tcx, id);\n-                let pth =\n-                    vec::append(*pth, ~[path_name(@ccx.names(~\"meth\")),\n-                                        path_name(m.ident)]);\n-                let llfn = register_fn_full(ccx, m.span, pth, id, mty);\n-                set_inline_hint_if_appr(m.attrs, llfn);\n-                llfn\n+                trans_method(ccx, id, pth, m)\n               }\n             }\n           }\n-          ast_map::node_method(m, impl_id, pth) => {\n+          ast_map::node_method(m, _, pth) => {\n             exprt = true;\n-            let mty = ty::node_id_to_type(ccx.tcx, id);\n-            let pth = vec::append(*pth, ~[path_name(@ccx.names(~\"meth\")),\n-                                          path_name(m.ident)]);\n-            let llfn = register_fn_full(ccx, m.span, pth, id, mty);\n-            set_inline_hint_if_appr(m.attrs, llfn);\n-            llfn\n+            trans_method(ccx, id, pth, m)\n           }\n           ast_map::node_foreign_item(ni, _, pth) => {\n             exprt = true;\n@@ -5336,7 +5333,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                     assert args.len() != 0u;\n                     let pth = vec::append(*pth,\n                                           ~[path_name(enm.ident),\n-                                           path_name(v.node.name)]);\n+                                            path_name(v.node.name)]);\n                     llfn = match check enm.node {\n                       ast::item_enum(_, _) => {\n                         register_fn(ccx, v.span, pth, id)\n@@ -5366,6 +5363,16 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n     }\n }\n \n+fn trans_method(ccx: @crate_ctxt, id: ast::node_id, pth: @ast_map::path,\n+                m: @ast::method) -> ValueRef {\n+    let mty = ty::node_id_to_type(ccx.tcx, id);\n+    let pth = vec::append(*pth, ~[path_name(@ccx.names(~\"meth\")),\n+                                  path_name(m.ident)]);\n+    let llfn = register_fn_full(ccx, m.span, pth, id, mty);\n+    set_inline_hint_if_appr(m.attrs, llfn);\n+    llfn\n+}\n+\n // The constant translation pass.\n fn trans_constant(ccx: @crate_ctxt, it: @ast::item) {\n     let _icx = ccx.insn_ctxt(~\"trans_constant\");"}, {"sha": "5fc4d73f175b0a92bc87fa4a3639d9eb92725a84", "filename": "src/test/run-pass/traits-default-method-trivial.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb05f578817cd27124eaff2b202f4c1b56a7cb16/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb05f578817cd27124eaff2b202f4c1b56a7cb16/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs?ref=fb05f578817cd27124eaff2b202f4c1b56a7cb16", "patch": "@@ -1,5 +1,3 @@\n-//xfail-test\n-\n trait Cat {\n     fn meow() -> bool;\n     fn scratch() -> bool;"}]}