{"sha": "d0863adf24b316d8ecaca5a1b8866ee5db902313", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwODYzYWRmMjRiMzE2ZDhlY2FjYTVhMWI4ODY2ZWU1ZGI5MDIzMTM=", "commit": {"author": {"name": "Daniel Grunwald", "email": "daniel@danielgrunwald.de", "date": "2015-01-10T23:14:03Z"}, "committer": {"name": "Daniel Grunwald", "email": "daniel@danielgrunwald.de", "date": "2015-01-10T23:14:03Z"}, "message": "Update Token::can_begin_expr() to make it consistent with the grammar:\n * add Token::AndAnd (double borrow)\n * add Token::DotDot (range notation)\n * remove Token::Pound and Token::At\n\nFixes a syntax error when parsing \"fn f() -> RangeTo<i32> { return ..1; }\".\n\nAlso, remove \"fn_expr_lookahead\".\nIt's from the fn~ days and seems to no longer be necessary.", "tree": {"sha": "ef28bce96abf5308f57ca5ad8eb45723af71a943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef28bce96abf5308f57ca5ad8eb45723af71a943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0863adf24b316d8ecaca5a1b8866ee5db902313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0863adf24b316d8ecaca5a1b8866ee5db902313", "html_url": "https://github.com/rust-lang/rust/commit/d0863adf24b316d8ecaca5a1b8866ee5db902313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0863adf24b316d8ecaca5a1b8866ee5db902313/comments", "author": {"login": "dgrunwald", "id": 243140, "node_id": "MDQ6VXNlcjI0MzE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/243140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgrunwald", "html_url": "https://github.com/dgrunwald", "followers_url": "https://api.github.com/users/dgrunwald/followers", "following_url": "https://api.github.com/users/dgrunwald/following{/other_user}", "gists_url": "https://api.github.com/users/dgrunwald/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgrunwald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgrunwald/subscriptions", "organizations_url": "https://api.github.com/users/dgrunwald/orgs", "repos_url": "https://api.github.com/users/dgrunwald/repos", "events_url": "https://api.github.com/users/dgrunwald/events{/privacy}", "received_events_url": "https://api.github.com/users/dgrunwald/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dgrunwald", "id": 243140, "node_id": "MDQ6VXNlcjI0MzE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/243140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgrunwald", "html_url": "https://github.com/dgrunwald", "followers_url": "https://api.github.com/users/dgrunwald/followers", "following_url": "https://api.github.com/users/dgrunwald/following{/other_user}", "gists_url": "https://api.github.com/users/dgrunwald/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgrunwald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgrunwald/subscriptions", "organizations_url": "https://api.github.com/users/dgrunwald/orgs", "repos_url": "https://api.github.com/users/dgrunwald/repos", "events_url": "https://api.github.com/users/dgrunwald/events{/privacy}", "received_events_url": "https://api.github.com/users/dgrunwald/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099b411e080d302ec0dc5f3aebe53d76c50acfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/099b411e080d302ec0dc5f3aebe53d76c50acfc7", "html_url": "https://github.com/rust-lang/rust/commit/099b411e080d302ec0dc5f3aebe53d76c50acfc7"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "8d1599e176e873f95de6a973d6df039cf4a260e8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0863adf24b316d8ecaca5a1b8866ee5db902313/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0863adf24b316d8ecaca5a1b8866ee5db902313/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d0863adf24b316d8ecaca5a1b8866ee5db902313", "patch": "@@ -2167,6 +2167,7 @@ impl<'a> Parser<'a> {\n \n         let ex: Expr_;\n \n+        // Note: when adding new syntax here, don't forget to adjust Token::can_begin_expr().\n         match self.token {\n             token::OpenDelim(token::Paren) => {\n                 self.bump();\n@@ -2773,6 +2774,7 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n         let hi;\n \n+        // Note: when adding new unary operators, don't forget to adjust Token::can_begin_expr()\n         let ex;\n         match self.token {\n           token::Not => {\n@@ -5590,13 +5592,6 @@ impl<'a> Parser<'a> {\n         (id, ItemEnum(enum_definition, generics), None)\n     }\n \n-    fn fn_expr_lookahead(tok: &token::Token) -> bool {\n-        match *tok {\n-          token::OpenDelim(token::Paren) | token::At | token::Tilde | token::BinOp(_) => true,\n-          _ => false\n-        }\n-    }\n-\n     /// Parses a string as an ABI spec on an extern type or module. Consumes\n     /// the `extern` keyword, if one is found.\n     fn parse_opt_abi(&mut self) -> Option<abi::Abi> {\n@@ -5779,8 +5774,7 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return IoviItem(item);\n         }\n-        if self.token.is_keyword(keywords::Fn) &&\n-                self.look_ahead(1, |f| !Parser::fn_expr_lookahead(f)) {\n+        if self.token.is_keyword(keywords::Fn) {\n             // FUNCTION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) ="}, {"sha": "e5aef12e82795b807201d64794e3b4fb55a9d066", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0863adf24b316d8ecaca5a1b8866ee5db902313/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0863adf24b316d8ecaca5a1b8866ee5db902313/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d0863adf24b316d8ecaca5a1b8866ee5db902313", "patch": "@@ -183,14 +183,14 @@ impl Token {\n             Underscore                  => true,\n             Tilde                       => true,\n             Literal(_, _)               => true,\n-            Pound                       => true,\n-            At                          => true,\n             Not                         => true,\n             BinOp(Minus)                => true,\n             BinOp(Star)                 => true,\n             BinOp(And)                  => true,\n             BinOp(Or)                   => true, // in lambda syntax\n             OrOr                        => true, // in lambda syntax\n+            AndAnd                      => true, // double borrow\n+            DotDot                      => true, // range notation\n             ModSep                      => true,\n             Interpolated(NtExpr(..))    => true,\n             Interpolated(NtIdent(..))   => true,"}]}