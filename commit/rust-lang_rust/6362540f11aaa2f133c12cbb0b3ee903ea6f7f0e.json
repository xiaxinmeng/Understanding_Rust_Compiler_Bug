{"sha": "6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjI1NDBmMTFhYWEyZjEzM2MxMmNiYjBiM2VlOTAzZWE2ZjdmMGU=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-10T03:13:27Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-10T03:13:27Z"}, "message": "Limit all types to 64 lanes", "tree": {"sha": "315f33788c5a5b6c6b338477d0ef151629d4dfbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/315f33788c5a5b6c6b338477d0ef151629d4dfbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "html_url": "https://github.com/rust-lang/rust/commit/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa7ba7d4c1ac9b9e58969dc1558b29e9b02a48a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa7ba7d4c1ac9b9e58969dc1558b29e9b02a48a", "html_url": "https://github.com/rust-lang/rust/commit/8aa7ba7d4c1ac9b9e58969dc1558b29e9b02a48a"}], "stats": {"total": 607, "additions": 470, "deletions": 137}, "files": [{"sha": "6fa238cfda6ac823089ae6622f74e608d9214443", "filename": "crates/core_simd/src/fmt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -33,7 +33,10 @@ macro_rules! impl_fmt_trait {\n     { $($type:ident => $(($trait:ident, $format:ident)),*;)* } => {\n         $( // repeat type\n             $( // repeat trait\n-                impl<const LANES: usize> core::fmt::$trait for crate::$type<LANES> {\n+                impl<const LANES: usize> core::fmt::$trait for crate::$type<LANES>\n+                where\n+                    Self: crate::LanesAtMost64,\n+                {\n                     fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                         $format(self.as_ref(), f)\n                     }"}, {"sha": "63882152b6d9f6fbb0fabd06938a96b8454357ff", "filename": "crates/core_simd/src/lanes_at_most_64.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_64.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -0,0 +1,35 @@\n+/// Implemented for bitmask sizes that are supported by the implementation.\n+pub trait LanesAtMost64 {}\n+\n+macro_rules! impl_for {\n+    { $name:ident } => {\n+        impl LanesAtMost64 for $name<1> {}\n+        impl LanesAtMost64 for $name<2> {}\n+        impl LanesAtMost64 for $name<4> {}\n+        impl LanesAtMost64 for $name<8> {}\n+        impl LanesAtMost64 for $name<16> {}\n+        impl LanesAtMost64 for $name<32> {}\n+        impl LanesAtMost64 for $name<64> {}\n+    }\n+}\n+\n+use crate::*;\n+\n+impl_for! { SimdU8 }\n+impl_for! { SimdU16 }\n+impl_for! { SimdU32 }\n+impl_for! { SimdU64 }\n+impl_for! { SimdU128 }\n+impl_for! { SimdUsize }\n+\n+impl_for! { SimdI8 }\n+impl_for! { SimdI16 }\n+impl_for! { SimdI32 }\n+impl_for! { SimdI64 }\n+impl_for! { SimdI128 }\n+impl_for! { SimdIsize }\n+\n+impl_for! { SimdF32 }\n+impl_for! { SimdF64 }\n+\n+impl_for! { BitMask }"}, {"sha": "e2e4864cc758fc1327ea14c28df2c9963b965049", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -14,6 +14,9 @@ mod intrinsics;\n mod ops;\n mod round;\n \n+mod lanes_at_most_64;\n+pub use lanes_at_most_64::*;\n+\n mod masks;\n pub use masks::*;\n "}, {"sha": "5328f22b42ab61a6783c426f3381870aa024c111", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -29,7 +29,7 @@ macro_rules! from_transmute_x86 {\n /// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! impl_vector {\n     { $name:ident, $type:ty } => {\n-        impl<const LANES: usize> $name<LANES> {\n+        impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost64 {\n             /// Construct a SIMD vector by setting all lanes to the given value.\n             pub const fn splat(value: $type) -> Self {\n                 Self([value; LANES])\n@@ -72,31 +72,31 @@ macro_rules! impl_vector {\n             }\n         }\n \n-        impl<const LANES: usize> Copy for $name<LANES> {}\n+        impl<const LANES: usize> Copy for $name<LANES> where Self: crate::LanesAtMost64 {}\n \n-        impl<const LANES: usize> Clone for $name<LANES> {\n+        impl<const LANES: usize> Clone for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn clone(&self) -> Self {\n                 *self\n             }\n         }\n \n-        impl<const LANES: usize> Default for $name<LANES> {\n+        impl<const LANES: usize> Default for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn default() -> Self {\n                 Self::splat(<$type>::default())\n             }\n         }\n \n-        impl<const LANES: usize> PartialEq for $name<LANES> {\n+        impl<const LANES: usize> PartialEq for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn eq(&self, other: &Self) -> bool {\n                 // TODO use SIMD equality\n                 self.to_array() == other.to_array()\n             }\n         }\n \n-        impl<const LANES: usize> PartialOrd for $name<LANES> {\n+        impl<const LANES: usize> PartialOrd for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n                 // TODO use SIMD equalitya\n@@ -105,44 +105,44 @@ macro_rules! impl_vector {\n         }\n \n         // array references\n-        impl<const LANES: usize> AsRef<[$type; LANES]> for $name<LANES> {\n+        impl<const LANES: usize> AsRef<[$type; LANES]> for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn as_ref(&self) -> &[$type; LANES] {\n                 &self.0\n             }\n         }\n \n-        impl<const LANES: usize> AsMut<[$type; LANES]> for $name<LANES> {\n+        impl<const LANES: usize> AsMut<[$type; LANES]> for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn as_mut(&mut self) -> &mut [$type; LANES] {\n                 &mut self.0\n             }\n         }\n \n         // slice references\n-        impl<const LANES: usize> AsRef<[$type]> for $name<LANES> {\n+        impl<const LANES: usize> AsRef<[$type]> for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn as_ref(&self) -> &[$type] {\n                 &self.0\n             }\n         }\n \n-        impl<const LANES: usize> AsMut<[$type]> for $name<LANES> {\n+        impl<const LANES: usize> AsMut<[$type]> for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn as_mut(&mut self) -> &mut [$type] {\n                 &mut self.0\n             }\n         }\n \n         // vector/array conversion\n-        impl<const LANES: usize> From<[$type; LANES]> for $name<LANES> {\n+        impl<const LANES: usize> From<[$type; LANES]> for $name<LANES> where Self: crate::LanesAtMost64 {\n             fn from(array: [$type; LANES]) -> Self {\n                 Self(array)\n             }\n         }\n \n         // splat\n-        impl<const LANES: usize> From<$type> for $name<LANES> {\n+        impl<const LANES: usize> From<$type> for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn from(value: $type) -> Self {\n                 Self::splat(value)\n@@ -158,17 +158,17 @@ macro_rules! impl_integer_vector {\n     { $name:ident, $type:ty } => {\n         impl_vector! { $name, $type }\n \n-        impl<const LANES: usize> Eq for $name<LANES> {}\n+        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::LanesAtMost64 {}\n \n-        impl<const LANES: usize> Ord for $name<LANES> {\n+        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n                 // TODO use SIMD cmp\n                 self.to_array().cmp(other.as_ref())\n             }\n         }\n \n-        impl<const LANES: usize> core::hash::Hash for $name<LANES> {\n+        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::LanesAtMost64 {\n             #[inline]\n             fn hash<H>(&self, state: &mut H)\n             where\n@@ -187,7 +187,11 @@ macro_rules! impl_float_vector {\n     { $name:ident, $type:ty, $bits_ty:ident } => {\n         impl_vector! { $name, $type }\n \n-        impl<const LANES: usize> $name<LANES> {\n+        impl<const LANES: usize> $name<LANES>\n+        where\n+            Self: crate::LanesAtMost64,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost64,\n+        {\n             /// Raw transmutation to an unsigned integer vector type with the\n             /// same size and number of lanes.\n             #[inline]"}, {"sha": "b9b1160a3f38cc00ae91c1d9f07081bc22049bd7", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -1,12 +1,4 @@\n-/// Implemented for bitmask sizes that are supported by the implementation.\n-pub trait LanesAtMost64 {}\n-impl LanesAtMost64 for BitMask<1> {}\n-impl LanesAtMost64 for BitMask<2> {}\n-impl LanesAtMost64 for BitMask<4> {}\n-impl LanesAtMost64 for BitMask<8> {}\n-impl LanesAtMost64 for BitMask<16> {}\n-impl LanesAtMost64 for BitMask<32> {}\n-impl LanesAtMost64 for BitMask<64> {}\n+use crate::LanesAtMost64;\n \n /// A mask where each lane is represented by a single bit.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "fa93d252df464cbfbfb2cca8730dd9024903dc60", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 123, "deletions": 29, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -16,11 +16,31 @@ impl core::fmt::Display for TryFromMaskError {\n macro_rules! define_mask {\n     { $(#[$attr:meta])* struct $name:ident<const $lanes:ident: usize>($type:ty); } => {\n         $(#[$attr])*\n-        #[derive(Copy, Clone, Default, PartialEq, PartialOrd, Eq, Ord, Hash)]\n+        #[derive(Default, PartialEq, PartialOrd, Eq, Ord, Hash)]\n         #[repr(transparent)]\n-        pub struct $name<const $lanes: usize>($type);\n+        pub struct $name<const $lanes: usize>($type)\n+        where\n+            $type: crate::LanesAtMost64;\n+\n+        impl<const LANES: usize> Copy for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {}\n \n-        impl<const $lanes: usize> $name<$lanes> {\n+        impl<const LANES: usize> Clone for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n+            #[inline]\n+            fn clone(&self) -> Self {\n+                *self\n+            }\n+        }\n+\n+        impl<const $lanes: usize> $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             /// Construct a mask by setting all lanes to the given value.\n             pub fn splat(value: bool) -> Self {\n                 Self(<$type>::splat(\n@@ -57,13 +77,19 @@ macro_rules! define_mask {\n             }\n         }\n \n-        impl<const $lanes: usize> core::convert::From<bool> for $name<$lanes> {\n+        impl<const $lanes: usize> core::convert::From<bool> for $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             fn from(value: bool) -> Self {\n                 Self::splat(value)\n             }\n         }\n \n-        impl<const $lanes: usize> core::convert::TryFrom<$type> for $name<$lanes> {\n+        impl<const $lanes: usize> core::convert::TryFrom<$type> for $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Error = TryFromMaskError;\n             fn try_from(value: $type) -> Result<Self, Self::Error> {\n                 if value.as_slice().iter().all(|x| *x == 0 || *x == -1) {\n@@ -74,14 +100,18 @@ macro_rules! define_mask {\n             }\n         }\n \n-        impl<const $lanes: usize> core::convert::From<$name<$lanes>> for $type {\n+        impl<const $lanes: usize> core::convert::From<$name<$lanes>> for $type\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             fn from(value: $name<$lanes>) -> Self {\n                 value.0\n             }\n         }\n \n         impl<const $lanes: usize> core::convert::From<crate::BitMask<$lanes>> for $name<$lanes>\n         where\n+            $type: crate::LanesAtMost64,\n             crate::BitMask<$lanes>: crate::LanesAtMost64,\n         {\n             fn from(value: crate::BitMask<$lanes>) -> Self {\n@@ -96,6 +126,7 @@ macro_rules! define_mask {\n \n         impl<const $lanes: usize> core::convert::From<$name<$lanes>> for crate::BitMask<$lanes>\n         where\n+            $type: crate::LanesAtMost64,\n             crate::BitMask<$lanes>: crate::LanesAtMost64,\n         {\n             fn from(value: $name<$lanes>) -> Self {\n@@ -108,154 +139,217 @@ macro_rules! define_mask {\n             }\n         }\n \n-        impl<const $lanes: usize> core::fmt::Debug for $name<$lanes> {\n+        impl<const $lanes: usize> core::fmt::Debug for $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                 f.debug_list()\n                     .entries((0..LANES).map(|lane| self.test(lane)))\n                     .finish()\n             }\n         }\n \n-        impl<const $lanes: usize> core::fmt::Binary for $name<$lanes> {\n+        impl<const $lanes: usize> core::fmt::Binary for $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                 core::fmt::Binary::fmt(&self.0, f)\n             }\n         }\n \n-        impl<const $lanes: usize> core::fmt::Octal for $name<$lanes> {\n+        impl<const $lanes: usize> core::fmt::Octal for $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                 core::fmt::Octal::fmt(&self.0, f)\n             }\n         }\n \n-        impl<const $lanes: usize> core::fmt::LowerHex for $name<$lanes> {\n+        impl<const $lanes: usize> core::fmt::LowerHex for $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                 core::fmt::LowerHex::fmt(&self.0, f)\n             }\n         }\n \n-        impl<const $lanes: usize> core::fmt::UpperHex for $name<$lanes> {\n+        impl<const $lanes: usize> core::fmt::UpperHex for $name<$lanes>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                 core::fmt::UpperHex::fmt(&self.0, f)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAnd for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitAnd for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitand(self, rhs: Self) -> Self {\n                 Self(self.0 & rhs.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAnd<bool> for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitAnd<bool> for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitand(self, rhs: bool) -> Self {\n                 self & Self::splat(rhs)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAnd<$name<LANES>> for bool {\n+        impl<const LANES: usize> core::ops::BitAnd<$name<LANES>> for bool\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn bitand(self, rhs: $name<LANES>) -> $name<LANES> {\n                 $name::<LANES>::splat(self) & rhs\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOr for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitOr for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitor(self, rhs: Self) -> Self {\n                 Self(self.0 | rhs.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOr<bool> for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitOr<bool> for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitor(self, rhs: bool) -> Self {\n                 self | Self::splat(rhs)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOr<$name<LANES>> for bool {\n+        impl<const LANES: usize> core::ops::BitOr<$name<LANES>> for bool\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn bitor(self, rhs: $name<LANES>) -> $name<LANES> {\n                 $name::<LANES>::splat(self) | rhs\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXor for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitXor for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitxor(self, rhs: Self) -> Self::Output {\n                 Self(self.0 ^ rhs.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXor<bool> for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitXor<bool> for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitxor(self, rhs: bool) -> Self::Output {\n                 self ^ Self::splat(rhs)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXor<$name<LANES>> for bool {\n+        impl<const LANES: usize> core::ops::BitXor<$name<LANES>> for bool\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn bitxor(self, rhs: $name<LANES>) -> Self::Output {\n                 $name::<LANES>::splat(self) ^ rhs\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::Not for $name<LANES> {\n+        impl<const LANES: usize> core::ops::Not for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn not(self) -> Self::Output {\n                 Self(!self.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAndAssign for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitAndAssign for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             #[inline]\n             fn bitand_assign(&mut self, rhs: Self) {\n                 self.0 &= rhs.0;\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAndAssign<bool> for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitAndAssign<bool> for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             #[inline]\n             fn bitand_assign(&mut self, rhs: bool) {\n                 *self &= Self::splat(rhs);\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOrAssign for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitOrAssign for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             #[inline]\n             fn bitor_assign(&mut self, rhs: Self) {\n                 self.0 |= rhs.0;\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOrAssign<bool> for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitOrAssign<bool> for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             #[inline]\n             fn bitor_assign(&mut self, rhs: bool) {\n                 *self |= Self::splat(rhs);\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXorAssign for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitXorAssign for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             #[inline]\n             fn bitxor_assign(&mut self, rhs: Self) {\n                 self.0 ^= rhs.0;\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXorAssign<bool> for $name<LANES> {\n+        impl<const LANES: usize> core::ops::BitXorAssign<bool> for $name<LANES>\n+        where\n+            $type: crate::LanesAtMost64,\n+        {\n             #[inline]\n             fn bitxor_assign(&mut self, rhs: bool) {\n                 *self ^= Self::splat(rhs);\n@@ -291,11 +385,11 @@ define_mask! {\n define_mask! {\n     /// A mask equivalent to [SimdI128](crate::SimdI128), where all bits in the lane must be either set\n     /// or unset.\n-    struct SimdMask128<const LANES: usize>(crate::SimdI64<LANES>);\n+    struct SimdMask128<const LANES: usize>(crate::SimdI128<LANES>);\n }\n \n define_mask! {\n     /// A mask equivalent to [SimdIsize](crate::SimdIsize), where all bits in the lane must be either set\n     /// or unset.\n-    struct SimdMaskSize<const LANES: usize>(crate::SimdI64<LANES>);\n+    struct SimdMaskSize<const LANES: usize>(crate::SimdIsize<LANES>);\n }"}, {"sha": "7d7f7af627df2df422686cc34ad1220f18d027dc", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 129, "deletions": 44, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -7,16 +7,22 @@ pub use full_masks::*;\n mod bitmask;\n pub use bitmask::*;\n \n+use crate::LanesAtMost64;\n+\n macro_rules! define_opaque_mask {\n     {\n         $(#[$attr:meta])*\n         struct $name:ident<const $lanes:ident: usize>($inner_ty:ty);\n+        @bits $bits_ty:ty\n     } => {\n         $(#[$attr])*\n         #[allow(non_camel_case_types)]\n-        pub struct $name<const $lanes: usize>($inner_ty) where BitMask<LANES>: LanesAtMost64;\n+        pub struct $name<const $lanes: usize>($inner_ty) where $bits_ty: LanesAtMost64;\n \n-        impl<const $lanes: usize> $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {\n+        impl<const $lanes: usize> $name<$lanes>\n+        where\n+            $bits_ty: LanesAtMost64\n+        {\n             /// Construct a mask by setting all lanes to the given value.\n             pub fn splat(value: bool) -> Self {\n                 Self(<$inner_ty>::splat(value))\n@@ -43,6 +49,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const $lanes: usize> From<BitMask<$lanes>> for $name<$lanes>\n         where\n+            $bits_ty: LanesAtMost64,\n             BitMask<$lanes>: LanesAtMost64,\n         {\n             fn from(value: BitMask<$lanes>) -> Self {\n@@ -52,6 +59,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const $lanes: usize> From<$name<$lanes>> for crate::BitMask<$lanes>\n         where\n+            $bits_ty: LanesAtMost64,\n             BitMask<$lanes>: LanesAtMost64,\n         {\n             fn from(value: $name<$lanes>) -> Self {\n@@ -61,7 +69,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const $lanes: usize> From<$inner_ty> for $name<$lanes>\n         where\n-            BitMask<$lanes>: LanesAtMost64,\n+            $bits_ty: LanesAtMost64,\n         {\n             fn from(value: $inner_ty) -> Self {\n                 Self(value)\n@@ -70,165 +78,232 @@ macro_rules! define_opaque_mask {\n \n         impl<const $lanes: usize> From<$name<$lanes>> for $inner_ty\n         where\n-            BitMask<$lanes>: LanesAtMost64,\n+            $bits_ty: LanesAtMost64,\n         {\n             fn from(value: $name<$lanes>) -> Self {\n                 value.0\n             }\n         }\n \n-        impl<const $lanes: usize> Copy for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {}\n+        impl<const $lanes: usize> Copy for $name<$lanes>\n+        where\n+            $inner_ty: Copy,\n+            $bits_ty: LanesAtMost64,\n+        {}\n \n-        impl<const $lanes: usize> Clone for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {\n+        impl<const $lanes: usize> Clone for $name<$lanes>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn clone(&self) -> Self {\n                 *self\n             }\n         }\n \n-        impl<const $lanes: usize> Default for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {\n+        impl<const $lanes: usize> Default for $name<$lanes>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn default() -> Self {\n                 Self::splat(false)\n             }\n         }\n \n-        impl<const $lanes: usize> PartialEq for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {\n+        impl<const $lanes: usize> PartialEq for $name<$lanes>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn eq(&self, other: &Self) -> bool {\n                 self.0 == other.0\n             }\n         }\n \n-        impl<const $lanes: usize> PartialOrd for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {\n+        impl<const $lanes: usize> PartialOrd for $name<$lanes>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n                 self.0.partial_cmp(&other.0)\n             }\n         }\n \n-        impl<const $lanes: usize> core::fmt::Debug for $name<$lanes> where BitMask<$lanes>: LanesAtMost64 {\n+        impl<const $lanes: usize> core::fmt::Debug for $name<$lanes>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                 core::fmt::Debug::fmt(&self.0, f)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAnd for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitAnd for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitand(self, rhs: Self) -> Self {\n                 Self(self.0 & rhs.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAnd<bool> for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitAnd<bool> for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitand(self, rhs: bool) -> Self {\n                 self & Self::splat(rhs)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAnd<$name<LANES>> for bool where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitAnd<$name<LANES>> for bool\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn bitand(self, rhs: $name<LANES>) -> $name<LANES> {\n                 $name::<LANES>::splat(self) & rhs\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOr for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitOr for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitor(self, rhs: Self) -> Self {\n                 Self(self.0 | rhs.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOr<bool> for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitOr<bool> for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitor(self, rhs: bool) -> Self {\n                 self | Self::splat(rhs)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOr<$name<LANES>> for bool where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitOr<$name<LANES>> for bool\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn bitor(self, rhs: $name<LANES>) -> $name<LANES> {\n                 $name::<LANES>::splat(self) | rhs\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXor for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitXor for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitxor(self, rhs: Self) -> Self::Output {\n                 Self(self.0 ^ rhs.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXor<bool> for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitXor<bool> for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = Self;\n             #[inline]\n             fn bitxor(self, rhs: bool) -> Self::Output {\n                 self ^ Self::splat(rhs)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXor<$name<LANES>> for bool where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitXor<$name<LANES>> for bool\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn bitxor(self, rhs: $name<LANES>) -> Self::Output {\n                 $name::<LANES>::splat(self) ^ rhs\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::Not for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::Not for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             type Output = $name<LANES>;\n             #[inline]\n             fn not(self) -> Self::Output {\n                 Self(!self.0)\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAndAssign for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitAndAssign for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn bitand_assign(&mut self, rhs: Self) {\n                 self.0 &= rhs.0;\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitAndAssign<bool> for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitAndAssign<bool> for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn bitand_assign(&mut self, rhs: bool) {\n                 *self &= Self::splat(rhs);\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOrAssign for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitOrAssign for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn bitor_assign(&mut self, rhs: Self) {\n                 self.0 |= rhs.0;\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitOrAssign<bool> for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitOrAssign<bool> for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn bitor_assign(&mut self, rhs: bool) {\n                 *self |= Self::splat(rhs);\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXorAssign for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitXorAssign for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn bitxor_assign(&mut self, rhs: Self) {\n                 self.0 ^= rhs.0;\n             }\n         }\n \n-        impl<const LANES: usize> core::ops::BitXorAssign<bool> for $name<LANES> where BitMask<LANES>: LanesAtMost64 {\n+        impl<const LANES: usize> core::ops::BitXorAssign<bool> for $name<LANES>\n+        where\n+            $bits_ty: LanesAtMost64,\n+        {\n             #[inline]\n             fn bitxor_assign(&mut self, rhs: bool) {\n                 *self ^= Self::splat(rhs);\n@@ -242,47 +317,57 @@ define_opaque_mask! {\n     ///\n     /// The layout of this type is unspecified.\n     struct Mask8<const LANES: usize>(SimdMask8<LANES>);\n+    @bits crate::SimdI8<LANES>\n }\n \n define_opaque_mask! {\n     /// Mask for vectors with `LANES` 16-bit elements.\n     ///\n     /// The layout of this type is unspecified.\n     struct Mask16<const LANES: usize>(SimdMask16<LANES>);\n+    @bits crate::SimdI16<LANES>\n }\n \n define_opaque_mask! {\n     /// Mask for vectors with `LANES` 32-bit elements.\n     ///\n     /// The layout of this type is unspecified.\n     struct Mask32<const LANES: usize>(SimdMask32<LANES>);\n+    @bits crate::SimdI32<LANES>\n }\n \n define_opaque_mask! {\n     /// Mask for vectors with `LANES` 64-bit elements.\n     ///\n     /// The layout of this type is unspecified.\n     struct Mask64<const LANES: usize>(SimdMask64<LANES>);\n+    @bits crate::SimdI64<LANES>\n }\n \n define_opaque_mask! {\n     /// Mask for vectors with `LANES` 128-bit elements.\n     ///\n     /// The layout of this type is unspecified.\n     struct Mask128<const LANES: usize>(SimdMask128<LANES>);\n+    @bits crate::SimdI128<LANES>\n }\n \n define_opaque_mask! {\n     /// Mask for vectors with `LANES` pointer-width elements.\n     ///\n     /// The layout of this type is unspecified.\n     struct MaskSize<const LANES: usize>(SimdMaskSize<LANES>);\n+    @bits crate::SimdIsize<LANES>\n }\n \n macro_rules! implement_mask_ops {\n-    { $($vector:ident => $mask:ident,)* } => {\n+    { $($vector:ident => $mask:ident ($inner_ty:ident),)* } => {\n         $(\n-            impl<const LANES: usize> crate::$vector<LANES> where BitMask<LANES>: LanesAtMost64 {\n+            impl<const LANES: usize> crate::$vector<LANES>\n+            where\n+                crate::$vector<LANES>: LanesAtMost64,\n+                crate::$inner_ty<LANES>: LanesAtMost64,\n+            {\n                 /// Test if each lane is equal to the corresponding lane in `other`.\n                 #[inline]\n                 pub fn lanes_eq(&self, other: &Self) -> $mask<LANES> {\n@@ -324,22 +409,22 @@ macro_rules! implement_mask_ops {\n }\n \n implement_mask_ops! {\n-    SimdI8 => Mask8,\n-    SimdI16 => Mask16,\n-    SimdI32 => Mask32,\n-    SimdI64 => Mask64,\n-    SimdI128 => Mask128,\n-    SimdIsize => MaskSize,\n-\n-    SimdU8 => Mask8,\n-    SimdU16 => Mask16,\n-    SimdU32 => Mask32,\n-    SimdU64 => Mask64,\n-    SimdU128 => Mask128,\n-    SimdUsize => MaskSize,\n-\n-    SimdF32 => Mask32,\n-    SimdF64 => Mask64,\n+    SimdI8 => Mask8 (SimdI8),\n+    SimdI16 => Mask16 (SimdI16),\n+    SimdI32 => Mask32 (SimdI32),\n+    SimdI64 => Mask64 (SimdI64),\n+    SimdI128 => Mask128 (SimdI128),\n+    SimdIsize => MaskSize (SimdIsize),\n+\n+    SimdU8 => Mask8 (SimdI8),\n+    SimdU16 => Mask16 (SimdI16),\n+    SimdU32 => Mask32 (SimdI32),\n+    SimdU64 => Mask64 (SimdI64),\n+    SimdU128 => Mask128 (SimdI128),\n+    SimdUsize => MaskSize (SimdIsize),\n+\n+    SimdF32 => Mask32 (SimdI32),\n+    SimdF64 => Mask64 (SimdI64),\n }\n \n /// Vector of eight 8-bit masks"}, {"sha": "1d9e1eeb92cecd6211f3d5c7835bc5ef0ca9b446", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 154, "deletions": 37, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -1,3 +1,5 @@\n+use crate::LanesAtMost64;\n+\n /// Checks if the right-hand side argument of a left- or right-shift would cause overflow.\n fn invalid_shift_rhs<T>(rhs: T) -> bool\n where\n@@ -12,21 +14,30 @@ where\n macro_rules! impl_ref_ops {\n     // binary op\n     {\n-        impl<const $lanes:ident: usize> core::ops::$trait:ident<$rhs:ty> for $type:ty {\n+        impl<const $lanes:ident: usize> core::ops::$trait:ident<$rhs:ty> for $type:ty\n+        where\n+            $($bound:path: LanesAtMost64,)*\n+        {\n             type Output = $output:ty;\n \n             $(#[$attrs:meta])*\n             fn $fn:ident($self_tok:ident, $rhs_arg:ident: $rhs_arg_ty:ty) -> Self::Output $body:tt\n         }\n     } => {\n-        impl<const $lanes: usize> core::ops::$trait<$rhs> for $type {\n+        impl<const $lanes: usize> core::ops::$trait<$rhs> for $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             type Output = $output;\n \n             $(#[$attrs])*\n             fn $fn($self_tok, $rhs_arg: $rhs_arg_ty) -> Self::Output $body\n         }\n \n-        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type {\n+        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             type Output = <$type as core::ops::$trait<$rhs>>::Output;\n \n             $(#[$attrs])*\n@@ -35,7 +46,10 @@ macro_rules! impl_ref_ops {\n             }\n         }\n \n-        impl<const $lanes: usize> core::ops::$trait<$rhs> for &'_ $type {\n+        impl<const $lanes: usize> core::ops::$trait<$rhs> for &'_ $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             type Output = <$type as core::ops::$trait<$rhs>>::Output;\n \n             $(#[$attrs])*\n@@ -44,7 +58,10 @@ macro_rules! impl_ref_ops {\n             }\n         }\n \n-        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for &'_ $type {\n+        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for &'_ $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             type Output = <$type as core::ops::$trait<$rhs>>::Output;\n \n             $(#[$attrs])*\n@@ -56,17 +73,26 @@ macro_rules! impl_ref_ops {\n \n     // binary assignment op\n     {\n-        impl<const $lanes:ident: usize> core::ops::$trait:ident<$rhs:ty> for $type:ty {\n+        impl<const $lanes:ident: usize> core::ops::$trait:ident<$rhs:ty> for $type:ty\n+        where\n+            $($bound:path: LanesAtMost64,)*\n+        {\n             $(#[$attrs:meta])*\n             fn $fn:ident(&mut $self_tok:ident, $rhs_arg:ident: $rhs_arg_ty:ty) $body:tt\n         }\n     } => {\n-        impl<const $lanes: usize> core::ops::$trait<$rhs> for $type {\n+        impl<const $lanes: usize> core::ops::$trait<$rhs> for $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             $(#[$attrs])*\n             fn $fn(&mut $self_tok, $rhs_arg: $rhs_arg_ty) $body\n         }\n \n-        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type {\n+        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             $(#[$attrs])*\n             fn $fn(&mut $self_tok, $rhs_arg: &$rhs_arg_ty) {\n                 core::ops::$trait::$fn($self_tok, *$rhs_arg)\n@@ -76,17 +102,26 @@ macro_rules! impl_ref_ops {\n \n     // unary op\n     {\n-        impl<const $lanes:ident: usize> core::ops::$trait:ident for $type:ty {\n+        impl<const $lanes:ident: usize> core::ops::$trait:ident for $type:ty\n+        where\n+            $($bound:path: LanesAtMost64,)*\n+        {\n             type Output = $output:ty;\n             fn $fn:ident($self_tok:ident) -> Self::Output $body:tt\n         }\n     } => {\n-        impl<const $lanes: usize> core::ops::$trait for $type {\n+        impl<const $lanes: usize> core::ops::$trait for $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             type Output = $output;\n             fn $fn($self_tok) -> Self::Output $body\n         }\n \n-        impl<const $lanes: usize> core::ops::$trait for &'_ $type {\n+        impl<const $lanes: usize> core::ops::$trait for &'_ $type\n+        where\n+            $($bound: LanesAtMost64,)*\n+        {\n             type Output = <$type as core::ops::$trait>::Output;\n             fn $fn($self_tok) -> Self::Output {\n                 core::ops::$trait::$fn(*$self_tok)\n@@ -130,7 +165,10 @@ macro_rules! impl_op {\n \n     { impl Not for $type:ident, $scalar:ty } => {\n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::Not for crate::$type<LANES> {\n+            impl<const LANES: usize> core::ops::Not for crate::$type<LANES>\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+            {\n                 type Output = Self;\n                 fn not(self) -> Self::Output {\n                     self ^ Self::splat(!<$scalar>::default())\n@@ -141,7 +179,10 @@ macro_rules! impl_op {\n \n     { impl Neg for $type:ident, $scalar:ty } => {\n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::Neg for crate::$type<LANES> {\n+            impl<const LANES: usize> core::ops::Neg for crate::$type<LANES>\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+            {\n                 type Output = Self;\n                 fn neg(self) -> Self::Output {\n                     Self::splat(0) - self\n@@ -152,7 +193,12 @@ macro_rules! impl_op {\n \n     { impl Neg for $type:ident, $scalar:ty, @float } => {\n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::Neg for crate::$type<LANES> {\n+            impl<const LANES: usize> core::ops::Neg for crate::$type<LANES>\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+                crate::SimdU32<LANES>: LanesAtMost64,\n+                crate::SimdU64<LANES>: LanesAtMost64,\n+            {\n                 type Output = Self;\n                 fn neg(self) -> Self::Output {\n                     // FIXME: Replace this with fneg intrinsic once available.\n@@ -166,6 +212,7 @@ macro_rules! impl_op {\n     { impl Index for $type:ident, $scalar:ty } => {\n         impl<I, const LANES: usize> core::ops::Index<I> for crate::$type<LANES>\n         where\n+            Self: LanesAtMost64,\n             I: core::slice::SliceIndex<[$scalar]>,\n         {\n             type Output = I::Output;\n@@ -177,6 +224,7 @@ macro_rules! impl_op {\n \n         impl<I, const LANES: usize> core::ops::IndexMut<I> for crate::$type<LANES>\n         where\n+            Self: LanesAtMost64,\n             I: core::slice::SliceIndex<[$scalar]>,\n         {\n             fn index_mut(&mut self, index: I) -> &mut Self::Output {\n@@ -189,7 +237,10 @@ macro_rules! impl_op {\n     // generic binary op with assignment when output is `Self`\n     { @binary $type:ident, $scalar:ty, $trait:ident :: $trait_fn:ident, $assign_trait:ident :: $assign_trait_fn:ident, $intrinsic:ident } => {\n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::$trait<Self> for crate::$type<LANES> {\n+            impl<const LANES: usize> core::ops::$trait<Self> for crate::$type<LANES>\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+            {\n                 type Output = Self;\n \n                 #[inline]\n@@ -202,7 +253,10 @@ macro_rules! impl_op {\n         }\n \n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::$trait<$scalar> for crate::$type<LANES> {\n+            impl<const LANES: usize> core::ops::$trait<$scalar> for crate::$type<LANES>\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+            {\n                 type Output = Self;\n \n                 #[inline]\n@@ -213,7 +267,10 @@ macro_rules! impl_op {\n         }\n \n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::$trait<crate::$type<LANES>> for $scalar {\n+            impl<const LANES: usize> core::ops::$trait<crate::$type<LANES>> for $scalar\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+            {\n                 type Output = crate::$type<LANES>;\n \n                 #[inline]\n@@ -224,7 +281,10 @@ macro_rules! impl_op {\n         }\n \n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::$assign_trait<Self> for crate::$type<LANES> {\n+            impl<const LANES: usize> core::ops::$assign_trait<Self> for crate::$type<LANES>\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+            {\n                 #[inline]\n                 fn $assign_trait_fn(&mut self, rhs: Self) {\n                     unsafe {\n@@ -235,7 +295,10 @@ macro_rules! impl_op {\n         }\n \n         impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::$assign_trait<$scalar> for crate::$type<LANES> {\n+            impl<const LANES: usize> core::ops::$assign_trait<$scalar> for crate::$type<LANES>\n+            where\n+                crate::$type<LANES>: LanesAtMost64,\n+            {\n                 #[inline]\n                 fn $assign_trait_fn(&mut self, rhs: $scalar) {\n                     core::ops::$assign_trait::$assign_trait_fn(self, Self::splat(rhs));\n@@ -278,7 +341,10 @@ macro_rules! impl_unsigned_int_ops {\n \n                 // Integers panic on divide by 0\n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Div<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Div<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -303,7 +369,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Div<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Div<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -323,7 +392,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Div<crate::$vector<LANES>> for $scalar {\n+                    impl<const LANES: usize> core::ops::Div<crate::$vector<LANES>> for $scalar\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = crate::$vector<LANES>;\n \n                         #[inline]\n@@ -334,7 +406,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::DivAssign<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::DivAssign<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn div_assign(&mut self, rhs: Self) {\n                             *self = *self / rhs;\n@@ -343,7 +418,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::DivAssign<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::DivAssign<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn div_assign(&mut self, rhs: $scalar) {\n                             *self = *self / rhs;\n@@ -353,7 +431,10 @@ macro_rules! impl_unsigned_int_ops {\n \n                 // remainder panics on zero divisor\n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Rem<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Rem<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -378,7 +459,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Rem<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Rem<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -398,7 +482,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Rem<crate::$vector<LANES>> for $scalar {\n+                    impl<const LANES: usize> core::ops::Rem<crate::$vector<LANES>> for $scalar\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = crate::$vector<LANES>;\n \n                         #[inline]\n@@ -409,7 +496,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::RemAssign<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::RemAssign<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn rem_assign(&mut self, rhs: Self) {\n                             *self = *self % rhs;\n@@ -418,7 +508,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::RemAssign<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::RemAssign<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn rem_assign(&mut self, rhs: $scalar) {\n                             *self = *self % rhs;\n@@ -428,7 +521,10 @@ macro_rules! impl_unsigned_int_ops {\n \n                 // shifts panic on overflow\n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Shl<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Shl<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -447,7 +543,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Shl<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Shl<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -463,7 +562,10 @@ macro_rules! impl_unsigned_int_ops {\n \n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::ShlAssign<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::ShlAssign<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn shl_assign(&mut self, rhs: Self) {\n                             *self = *self << rhs;\n@@ -472,7 +574,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::ShlAssign<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::ShlAssign<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn shl_assign(&mut self, rhs: $scalar) {\n                             *self = *self << rhs;\n@@ -481,7 +586,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Shr<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Shr<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -500,7 +608,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::Shr<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::Shr<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         type Output = Self;\n \n                         #[inline]\n@@ -516,7 +627,10 @@ macro_rules! impl_unsigned_int_ops {\n \n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::ShrAssign<Self> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::ShrAssign<Self> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn shr_assign(&mut self, rhs: Self) {\n                             *self = *self >> rhs;\n@@ -525,7 +639,10 @@ macro_rules! impl_unsigned_int_ops {\n                 }\n \n                 impl_ref_ops! {\n-                    impl<const LANES: usize> core::ops::ShrAssign<$scalar> for crate::$vector<LANES> {\n+                    impl<const LANES: usize> core::ops::ShrAssign<$scalar> for crate::$vector<LANES>\n+                    where\n+                        crate::$vector<LANES>: LanesAtMost64,\n+                    {\n                         #[inline]\n                         fn shr_assign(&mut self, rhs: $scalar) {\n                             *self = *self >> rhs;"}, {"sha": "6cf623f680136a0a212a447a9ef56e8e76dd4152", "filename": "crates/core_simd/src/vectors_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs?ref=6362540f11aaa2f133c12cbb0b3ee903ea6f7f0e", "patch": "@@ -2,7 +2,7 @@\n \n /// A SIMD vector of containing `LANES` `u8` values.\n #[repr(simd)]\n-pub struct SimdU8<const LANES: usize>([u8; LANES]);\n+pub struct SimdU8<const LANES: usize>([u8; LANES]) where Self: crate::LanesAtMost64;\n \n impl_integer_vector! { SimdU8, u8 }\n "}]}