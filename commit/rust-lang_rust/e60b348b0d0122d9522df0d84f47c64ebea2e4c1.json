{"sha": "e60b348b0d0122d9522df0d84f47c64ebea2e4c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MGIzNDhiMGQwMTIyZDk1MjJkZjBkODRmNDdjNjRlYmVhMmU0YzE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-19T13:09:30Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-19T14:16:03Z"}, "message": "refactor gating of tools", "tree": {"sha": "2ec528d477586c006f272bd491c6d847e349b0b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ec528d477586c006f272bd491c6d847e349b0b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60b348b0d0122d9522df0d84f47c64ebea2e4c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmD1iSMACgkQzXazX3c0\ndp4uJQ//ZYP9F1SayX7V7zUz5cwYQaYoYycH45yXHlz0EXwJqAbJNfwlaVgVOf4L\notlW/PykAN7Ut+CGhmd1ANRaPU925+0ECN0dxfT75FLpvLXF210cCvtm5qXWzToF\n97ByHK9jWHHs9UfWUgN2AmfvWHzrJkJowLjo36Ek7ekMh025vT9OLx6079MnVtgh\ntdmTXFd+n+Kwbwltgv49IWk4AhTSJMib9/aYush1GcQRJLikXdo6PvGh+mxiRPb0\nxqXby7TuhTpar2PIyQuezajDwiVXWo91rHVa95UBiuTRY27A2GnNsW0eKZ8nKncK\nM9W+B0SnmUcgmE4R0iSvsvos/rNBKsHM0nBMN9CnnffXO86uOj2ZlQtb87GloL7F\nCy73Og6M42A5Qwrowg2UxiklF/DmaucwWjGlXiuQysDg3Lu9mvzlqfvoTX7DffM2\n77nWQd1kCx0bY6y7GXtZ+tbRqhv0Wcp5lRyJA+AMNdh42nMlYTzTC8exMiugQnFL\nD7dbfxAOc2XCo+Heh7vRRyCAF71/3U984RuG1f0Y8X3kTTZcR0yD0HvRtJaKh033\nq+3K2ss5EE35HKH94n7/mL0roQwGBil6nMLkW1TA19ScLdhfa4ZgpI89jPYwyfNY\ngQIWwdBjVcWPbJIM0rdukX6BmQaBfa/YoBW1YqcKPLByZe2ZLi8=\n=uc/q\n-----END PGP SIGNATURE-----", "payload": "tree 2ec528d477586c006f272bd491c6d847e349b0b3\nparent 7167f8b83f8dc441541a5bfeb087c5b25f787a84\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1626700170 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1626704163 +0200\n\nrefactor gating of tools\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60b348b0d0122d9522df0d84f47c64ebea2e4c1", "html_url": "https://github.com/rust-lang/rust/commit/e60b348b0d0122d9522df0d84f47c64ebea2e4c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60b348b0d0122d9522df0d84f47c64ebea2e4c1/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7167f8b83f8dc441541a5bfeb087c5b25f787a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/7167f8b83f8dc441541a5bfeb087c5b25f787a84", "html_url": "https://github.com/rust-lang/rust/commit/7167f8b83f8dc441541a5bfeb087c5b25f787a84"}], "stats": {"total": 149, "additions": 75, "deletions": 74}, "files": [{"sha": "2237f5e3e0cb5f4dbd4b5a4acb93ce9cf51f1721", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 75, "deletions": 74, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/e60b348b0d0122d9522df0d84f47c64ebea2e4c1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60b348b0d0122d9522df0d84f47c64ebea2e4c1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e60b348b0d0122d9522df0d84f47c64ebea2e4c1", "patch": "@@ -8,6 +8,7 @@\n //! out to `rust-installer` still. This may one day be replaced with bits and\n //! pieces of `rustup.rs`!\n \n+use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n@@ -45,6 +46,18 @@ fn missing_tool(tool_name: &str, skip: bool) {\n     }\n }\n \n+fn should_build_extended_tool(builder: &Builder<'_>, tool: &str) -> bool {\n+    if !builder.config.extended {\n+        return false;\n+    }\n+\n+    if let Some(tools) = &builder.config.tools {\n+        tools.is_empty() || tools.contains(tool)\n+    } else {\n+        true\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Docs {\n     pub host: TargetSelection,\n@@ -671,11 +684,10 @@ pub struct Analysis {\n \n impl Step for Analysis {\n     type Output = Option<GeneratedTarball>;\n-    const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let builder = run.builder;\n-        run.path(\"analysis\").default_condition(builder.config.extended)\n+        let default = should_build_extended_tool(&run.builder, \"analysis\");\n+        run.path(\"analysis\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -696,7 +708,6 @@ impl Step for Analysis {\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n         if compiler.host != builder.config.build {\n             return None;\n         }\n@@ -955,7 +966,8 @@ impl Step for Cargo {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"cargo\")\n+        let default = should_build_extended_tool(&run.builder, \"cargo\");\n+        run.path(\"cargo\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1009,7 +1021,8 @@ impl Step for Rls {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rls\")\n+        let default = should_build_extended_tool(&run.builder, \"rls\");\n+        run.path(\"rls\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1026,7 +1039,6 @@ impl Step for Rls {\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         let rls = builder\n             .ensure(tool::Rls { compiler, target, extra_features: Vec::new() })\n@@ -1055,7 +1067,8 @@ impl Step for RustAnalyzer {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-analyzer\")\n+        let default = should_build_extended_tool(&run.builder, \"rust-analyzer\");\n+        run.path(\"rust-analyzer\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1078,7 +1091,6 @@ impl Step for RustAnalyzer {\n         }\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         if target.contains(\"riscv64\") {\n             // riscv64 currently has an LLVM bug that makes rust-analyzer unable\n@@ -1110,7 +1122,8 @@ impl Step for Clippy {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"clippy\")\n+        let default = should_build_extended_tool(&run.builder, \"clippy\");\n+        run.path(\"clippy\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1127,7 +1140,6 @@ impl Step for Clippy {\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         // Prepare the image directory\n         // We expect clippy to build, because we've exited this step above if tool\n@@ -1160,7 +1172,8 @@ impl Step for Miri {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"miri\")\n+        let default = should_build_extended_tool(&run.builder, \"miri\");\n+        run.path(\"miri\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1183,7 +1196,6 @@ impl Step for Miri {\n         }\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         let miri = builder\n             .ensure(tool::Miri { compiler, target, extra_features: Vec::new() })\n@@ -1219,7 +1231,8 @@ impl Step for Rustfmt {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rustfmt\")\n+        let default = should_build_extended_tool(&run.builder, \"rustfmt\");\n+        run.path(\"rustfmt\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1344,6 +1357,17 @@ impl Step for Extended {\n         builder.info(&format!(\"Dist extended stage{} ({})\", compiler.stage, target));\n \n         let mut tarballs = Vec::new();\n+        let mut built_tools = HashSet::new();\n+        macro_rules! add_tool {\n+            ($name:expr => $step:expr) => {\n+                if should_build_extended_tool(builder, $name) {\n+                    if let Some(tarball) = builder.ensure($step) {\n+                        tarballs.push(tarball);\n+                        built_tools.insert($name);\n+                    }\n+                }\n+            };\n+        }\n \n         // When rust-std package split from rustc, we needed to ensure that during\n         // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n@@ -1356,16 +1380,17 @@ impl Step for Extended {\n             tarballs.push(builder.ensure(Docs { host: target }));\n         }\n \n-        let cargo_installer = builder.ensure(Cargo { compiler, target });\n-        let rustfmt_installer = builder.ensure(Rustfmt { compiler, target });\n+        add_tool!(\"cargo\" => Cargo { compiler, target });\n+        add_tool!(\"rustfmt\" => Rustfmt { compiler, target });\n+        add_tool!(\"rls\" => Rls { compiler, target });\n+        add_tool!(\"rust-analyzer\" => RustAnalyzer { compiler, target });\n+        add_tool!(\"llvm-tools\" => LlvmTools { target });\n+        add_tool!(\"clippy\" => Clippy { compiler, target });\n+        add_tool!(\"miri\" => Miri { compiler, target });\n+        add_tool!(\"analysis\" => Analysis { compiler, target });\n+\n         let rust_demangler_installer = builder.ensure(RustDemangler { compiler, target });\n-        let rls_installer = builder.ensure(Rls { compiler, target });\n-        let rust_analyzer_installer = builder.ensure(RustAnalyzer { compiler, target });\n-        let llvm_tools_installer = builder.ensure(LlvmTools { target });\n-        let clippy_installer = builder.ensure(Clippy { compiler, target });\n-        let miri_installer = builder.ensure(Miri { compiler, target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n-        let analysis_installer = builder.ensure(Analysis { compiler, target });\n \n         let etc = builder.src.join(\"src/etc/installer\");\n \n@@ -1374,17 +1399,8 @@ impl Step for Extended {\n             return;\n         }\n \n-        tarballs.extend(cargo_installer);\n-        tarballs.extend(clippy_installer);\n         tarballs.extend(rust_demangler_installer.clone());\n-        tarballs.extend(rls_installer.clone());\n-        tarballs.extend(rust_analyzer_installer.clone());\n-        tarballs.extend(miri_installer.clone());\n-        tarballs.extend(rustfmt_installer.clone());\n-        tarballs.extend(llvm_tools_installer);\n-        if let Some(analysis_installer) = analysis_installer {\n-            tarballs.push(analysis_installer);\n-        }\n+\n         if target.contains(\"pc-windows-gnu\") {\n             tarballs.push(mingw_installer.unwrap());\n         }\n@@ -1434,17 +1450,11 @@ impl Step for Extended {\n             if rust_demangler_installer.is_none() {\n                 contents = filter(&contents, \"rust-demangler\");\n             }\n-            if rls_installer.is_none() {\n-                contents = filter(&contents, \"rls\");\n-            }\n-            if rust_analyzer_installer.is_none() {\n-                contents = filter(&contents, \"rust-analyzer\");\n-            }\n-            if miri_installer.is_none() {\n-                contents = filter(&contents, \"miri\");\n-            }\n-            if rustfmt_installer.is_none() {\n-                contents = filter(&contents, \"rustfmt\");\n+\n+            for tool in &[\"rls\", \"rust-analyzer\", \"miri\", \"rustfmt\"] {\n+                if !built_tools.contains(tool) {\n+                    contents = filter(&contents, tool);\n+                }\n             }\n             let ret = tmp.join(p.file_name().unwrap());\n             t!(fs::write(&ret, &contents));\n@@ -1485,16 +1495,11 @@ impl Step for Extended {\n             if rust_demangler_installer.is_some() {\n                 prepare(\"rust-demangler\");\n             }\n-            if rls_installer.is_some() {\n-                prepare(\"rls\");\n-            }\n-            if rust_analyzer_installer.is_some() {\n-                prepare(\"rust-analyzer\");\n-            }\n-            if miri_installer.is_some() {\n-                prepare(\"miri\");\n+            for tool in &[\"rls\", \"rust-analyzer\", \"miri\"] {\n+                if built_tools.contains(tool) {\n+                    prepare(tool);\n+                }\n             }\n-\n             // create an 'uninstall' package\n             builder.install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"uninstall\"), 0o755);\n             pkgbuild(\"uninstall\");\n@@ -1554,14 +1559,10 @@ impl Step for Extended {\n             if rust_demangler_installer.is_some() {\n                 prepare(\"rust-demangler\");\n             }\n-            if rls_installer.is_some() {\n-                prepare(\"rls\");\n-            }\n-            if rust_analyzer_installer.is_some() {\n-                prepare(\"rust-analyzer\");\n-            }\n-            if miri_installer.is_some() {\n-                prepare(\"miri\");\n+            for tool in &[\"rls\", \"rust-analyzer\", \"miri\"] {\n+                if built_tools.contains(tool) {\n+                    prepare(tool);\n+                }\n             }\n             if target.contains(\"windows-gnu\") {\n                 prepare(\"rust-mingw\");\n@@ -1640,7 +1641,7 @@ impl Step for Extended {\n                     .arg(\"-out\")\n                     .arg(exe.join(\"StdGroup.wxs\")),\n             );\n-            if rls_installer.is_some() {\n+            if built_tools.contains(\"rls\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1659,7 +1660,7 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n-            if rust_analyzer_installer.is_some() {\n+            if built_tools.contains(\"rust-analyzer\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1714,7 +1715,7 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n-            if miri_installer.is_some() {\n+            if built_tools.contains(\"miri\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1790,13 +1791,13 @@ impl Step for Extended {\n                 if rust_demangler_installer.is_some() {\n                     cmd.arg(\"-dRustDemanglerDir=rust-demangler\");\n                 }\n-                if rls_installer.is_some() {\n+                if built_tools.contains(\"rls\") {\n                     cmd.arg(\"-dRlsDir=rls\");\n                 }\n-                if rust_analyzer_installer.is_some() {\n+                if built_tools.contains(\"rust-analyzer\") {\n                     cmd.arg(\"-dRustAnalyzerDir=rust-analyzer\");\n                 }\n-                if miri_installer.is_some() {\n+                if built_tools.contains(\"miri\") {\n                     cmd.arg(\"-dMiriDir=miri\");\n                 }\n                 if target.contains(\"windows-gnu\") {\n@@ -1815,13 +1816,13 @@ impl Step for Extended {\n             if rust_demangler_installer.is_some() {\n                 candle(\"RustDemanglerGroup.wxs\".as_ref());\n             }\n-            if rls_installer.is_some() {\n+            if built_tools.contains(\"rls\") {\n                 candle(\"RlsGroup.wxs\".as_ref());\n             }\n-            if rust_analyzer_installer.is_some() {\n+            if built_tools.contains(\"rust-analyzer\") {\n                 candle(\"RustAnalyzerGroup.wxs\".as_ref());\n             }\n-            if miri_installer.is_some() {\n+            if built_tools.contains(\"miri\") {\n                 candle(\"MiriGroup.wxs\".as_ref());\n             }\n             candle(\"AnalysisGroup.wxs\".as_ref());\n@@ -1855,16 +1856,16 @@ impl Step for Extended {\n                 .arg(\"ClippyGroup.wixobj\")\n                 .current_dir(&exe);\n \n-            if rls_installer.is_some() {\n+            if built_tools.contains(\"rls\") {\n                 cmd.arg(\"RlsGroup.wixobj\");\n             }\n-            if rust_analyzer_installer.is_some() {\n+            if built_tools.contains(\"rust-analyzer\") {\n                 cmd.arg(\"RustAnalyzerGroup.wixobj\");\n             }\n             if rust_demangler_installer.is_some() {\n                 cmd.arg(\"RustDemanglerGroup.wixobj\");\n             }\n-            if miri_installer.is_some() {\n+            if built_tools.contains(\"miri\") {\n                 cmd.arg(\"MiriGroup.wixobj\");\n             }\n \n@@ -1994,7 +1995,8 @@ impl Step for LlvmTools {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"llvm-tools\")\n+        let default = should_build_extended_tool(&run.builder, \"llvm-tools\");\n+        run.path(\"llvm-tools\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -2003,7 +2005,6 @@ impl Step for LlvmTools {\n \n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         /* run only if llvm-config isn't used */\n         if let Some(config) = builder.config.target_config.get(&target) {"}]}