{"sha": "0e489f322155113fe911352895a8fee68a9751d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDg5ZjMyMjE1NTExM2ZlOTExMzUyODk1YThmZWU2OGE5NzUxZDc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-20T15:39:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-20T15:39:34Z"}, "message": "Merge pull request #2146 from MaloJaffre/println_empty_string\n\nAdd PRINTLN_EMPTY_STRING lint.", "tree": {"sha": "3e79e60a1b5c6ca405bfa2552f4906aadac162b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e79e60a1b5c6ca405bfa2552f4906aadac162b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e489f322155113fe911352895a8fee68a9751d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e489f322155113fe911352895a8fee68a9751d7", "html_url": "https://github.com/rust-lang/rust/commit/0e489f322155113fe911352895a8fee68a9751d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e489f322155113fe911352895a8fee68a9751d7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03e12b1c430e9d736351c4ead02c014589f4cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03e12b1c430e9d736351c4ead02c014589f4cc3", "html_url": "https://github.com/rust-lang/rust/commit/f03e12b1c430e9d736351c4ead02c014589f4cc3"}, {"sha": "22f3ca0e2ce547ceb0138d8acc209a0f29d924f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f3ca0e2ce547ceb0138d8acc209a0f29d924f0", "html_url": "https://github.com/rust-lang/rust/commit/22f3ca0e2ce547ceb0138d8acc209a0f29d924f0"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "110f6b63c82564b4526b8800ffea73240a8ad1ad", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e489f322155113fe911352895a8fee68a9751d7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e489f322155113fe911352895a8fee68a9751d7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0e489f322155113fe911352895a8fee68a9751d7", "patch": "@@ -538,6 +538,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n         precedence::PRECEDENCE,\n         print::PRINT_WITH_NEWLINE,\n+        print::PRINTLN_EMPTY_STRING,\n         ptr::CMP_NULL,\n         ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,"}, {"sha": "b7ccf19a313b0cf1b3944838f1ba8e13ddbcc324", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 65, "deletions": 16, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0e489f322155113fe911352895a8fee68a9751d7/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e489f322155113fe911352895a8fee68a9751d7/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=0e489f322155113fe911352895a8fee68a9751d7", "patch": "@@ -1,11 +1,30 @@\n+use std::ops::Deref;\n use rustc::hir::*;\n use rustc::hir::map::Node::{NodeImplItem, NodeItem};\n use rustc::lint::*;\n use syntax::ast::LitKind;\n use syntax::symbol::InternedString;\n+use syntax_pos::Span;\n use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint};\n use utils::{paths, opt_def_id};\n \n+/// **What it does:** This lint warns when you using `println!(\"\")` to\n+/// print a newline.\n+///\n+/// **Why is this bad?** You should use `println!()`, which is simpler.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// println!(\"\");\n+/// ```\n+declare_lint! {\n+    pub PRINTLN_EMPTY_STRING,\n+    Warn,\n+    \"using `print!()` with a format string that ends in a newline\"\n+}\n+\n /// **What it does:** This lint warns when you using `print!()` with a format\n /// string that\n /// ends in a newline.\n@@ -64,7 +83,7 @@ pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PRINT_WITH_NEWLINE, PRINT_STDOUT, USE_DEBUG)\n+        lint_array!(PRINT_WITH_NEWLINE, PRINTLN_EMPTY_STRING, PRINT_STDOUT, USE_DEBUG)\n     }\n }\n \n@@ -88,10 +107,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n                     span_lint(cx, PRINT_STDOUT, span, &format!(\"use of `{}!`\", name));\n \n-                    // Check print! with format string ending in \"\\n\".\n                     if_let_chain!{[\n-                        name == \"print\",\n-\n                         // ensure we're calling Arguments::new_v1\n                         args.len() == 1,\n                         let ExprCall(ref args_fun, ref args_args) = args[0].node,\n@@ -102,20 +118,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let ExprAddrOf(_, ref match_expr) = args_args[1].node,\n                         let ExprMatch(ref args, _, _) = match_expr.node,\n                         let ExprTup(ref args) = args.node,\n-\n-                        // collect the format string parts and check the last one\n                         let Some((fmtstr, fmtlen)) = get_argument_fmtstr_parts(&args_args[0]),\n-                        let Some('\\n') = fmtstr.chars().last(),\n-\n-                        // \"foo{}bar\" is made into two strings + one argument,\n-                        // if the format string starts with `{}` (eg. \"{}foo\"),\n-                        // the string array is prepended an empty string \"\".\n-                        // We only want to check the last string after any `{}`:\n-                        args.len() < fmtlen,\n                     ], {\n-                        span_lint(cx, PRINT_WITH_NEWLINE, span,\n-                                  \"using `print!()` with a format string that ends in a \\\n-                                   newline, consider using `println!()` instead\");\n+                        match name {\n+                            \"print\" => check_print(cx, span, args, fmtstr, fmtlen),\n+                            \"println\" => check_println(cx, span, fmtstr, fmtlen),\n+                            _ => (),\n+                        }\n                     }}\n                 }\n             }\n@@ -135,6 +144,46 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n+// Check for print!(\"... \\n\", ...).\n+fn check_print<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    span: Span,\n+    args: &HirVec<Expr>,\n+    fmtstr: InternedString,\n+    fmtlen: usize,\n+) {\n+    if_let_chain!{[\n+        // check the final format string part\n+        let Some('\\n') = fmtstr.chars().last(),\n+\n+        // \"foo{}bar\" is made into two strings + one argument,\n+        // if the format string starts with `{}` (eg. \"{}foo\"),\n+        // the string array is prepended an empty string \"\".\n+        // We only want to check the last string after any `{}`:\n+        args.len() < fmtlen,\n+    ], {\n+        span_lint(cx, PRINT_WITH_NEWLINE, span,\n+                  \"using `print!()` with a format string that ends in a \\\n+                   newline, consider using `println!()` instead\");\n+    }}\n+}\n+\n+/// Check for println!(\"\")\n+fn check_println<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: InternedString, fmtlen: usize) {\n+    if_let_chain!{[\n+        // check that the string is empty\n+        fmtlen == 1,\n+        fmtstr.deref() == \"\\n\",\n+\n+        // check the presence of that string\n+        let Ok(snippet) = cx.sess().codemap().span_to_snippet(span),\n+        snippet.contains(\"\\\"\\\"\"),\n+    ], {\n+        span_lint(cx, PRINT_WITH_NEWLINE, span,\n+                  \"using `println!(\\\"\\\")`, consider using `println!()` instead\");\n+     }}\n+}\n+\n fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n     let map = &cx.tcx.hir;\n "}, {"sha": "82495f1b39da9db3c921ef0e266a17f052f8e00d", "filename": "tests/ui/println_empty_string.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e489f322155113fe911352895a8fee68a9751d7/tests%2Fui%2Fprintln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e489f322155113fe911352895a8fee68a9751d7/tests%2Fui%2Fprintln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.rs?ref=0e489f322155113fe911352895a8fee68a9751d7", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!();\n+    println!(\"\");\n+}"}, {"sha": "8beca8b88cb314d9852a471ad21735c17daa8e62", "filename": "tests/ui/println_empty_string.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e489f322155113fe911352895a8fee68a9751d7/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e489f322155113fe911352895a8fee68a9751d7/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=0e489f322155113fe911352895a8fee68a9751d7", "patch": "@@ -0,0 +1,8 @@\n+error: using `println!(\"\")`, consider using `println!()` instead\n+ --> $DIR/println_empty_string.rs:3:5\n+  |\n+3 |     println!(\"\");\n+  |     ^^^^^^^^^^^^^\n+  |\n+  = note: `-D print-with-newline` implied by `-D warnings`\n+"}]}