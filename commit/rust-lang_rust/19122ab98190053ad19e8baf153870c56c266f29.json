{"sha": "19122ab98190053ad19e8baf153870c56c266f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MTIyYWI5ODE5MDA1M2FkMTllOGJhZjE1Mzg3MGM1NmMyNjZmMjk=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-10-03T23:14:25Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-10-27T13:47:22Z"}, "message": "add and use struct_help", "tree": {"sha": "ac8df99e057bd0b5a50bb921e3e521b31a3ca658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac8df99e057bd0b5a50bb921e3e521b31a3ca658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19122ab98190053ad19e8baf153870c56c266f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19122ab98190053ad19e8baf153870c56c266f29", "html_url": "https://github.com/rust-lang/rust/commit/19122ab98190053ad19e8baf153870c56c266f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19122ab98190053ad19e8baf153870c56c266f29/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89a184a39921f10782f986c9e5bcd8b92ef60818", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a184a39921f10782f986c9e5bcd8b92ef60818", "html_url": "https://github.com/rust-lang/rust/commit/89a184a39921f10782f986c9e5bcd8b92ef60818"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "705c802d90acbf41a98222d74c9dd52f3a09a7bd", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19122ab98190053ad19e8baf153870c56c266f29/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19122ab98190053ad19e8baf153870c56c266f29/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=19122ab98190053ad19e8baf153870c56c266f29", "patch": "@@ -619,6 +619,11 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n+    /// Construct a builder at the `Help` level with the `msg`.\n+    pub fn struct_help(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+        DiagnosticBuilder::new(self, Level::Help, msg)\n+    }\n+\n     pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: &str) -> FatalError {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n         FatalError"}, {"sha": "57f844f2924374bcd8426dd9cc9e67ccffffe8ee", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/outlives_suggestion.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/19122ab98190053ad19e8baf153870c56c266f29/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19122ab98190053ad19e8baf153870c56c266f29/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs?ref=19122ab98190053ad19e8baf153870c56c266f29", "patch": "@@ -6,7 +6,7 @@ use std::collections::BTreeMap;\n use log::debug;\n use rustc::{hir::def_id::DefId, infer::InferCtxt, mir::Body, ty::RegionVid};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, Level};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder};\n \n use smallvec::SmallVec;\n \n@@ -258,29 +258,24 @@ impl OutlivesSuggestionBuilder {\n         // If there is exactly one suggestable constraints, then just suggest it. Otherwise, emit a\n         // list of diagnostics.\n         let mut diag = if suggested.len() == 1 {\n-            DiagnosticBuilder::new(\n-                infcx.tcx.sess.diagnostic(),\n-                Level::Help,\n-                &match suggested.last().unwrap() {\n-                    SuggestedConstraint::Outlives(a, bs) => {\n-                        let bs: SmallVec<[String; 2]> =\n-                            bs.iter().map(|r| format!(\"{}\", r)).collect();\n-                        format!(\"add bound `{}: {}`\", a, bs.join(\" + \"))\n-                    }\n+            infcx.tcx.sess.diagnostic().struct_help(&match suggested.last().unwrap() {\n+                SuggestedConstraint::Outlives(a, bs) => {\n+                    let bs: SmallVec<[String; 2]> = bs.iter().map(|r| format!(\"{}\", r)).collect();\n+                    format!(\"add bound `{}: {}`\", a, bs.join(\" + \"))\n+                }\n \n-                    SuggestedConstraint::Equal(a, b) => {\n-                        format!(\"`{}` and `{}` must be the same: replace one with the other\", a, b)\n-                    }\n-                    SuggestedConstraint::Static(a) => format!(\"replace `{}` with `'static`\", a),\n-                },\n-            )\n+                SuggestedConstraint::Equal(a, b) => {\n+                    format!(\"`{}` and `{}` must be the same: replace one with the other\", a, b)\n+                }\n+                SuggestedConstraint::Static(a) => format!(\"replace `{}` with `'static`\", a),\n+            })\n         } else {\n             // Create a new diagnostic.\n-            let mut diag = DiagnosticBuilder::new(\n-                infcx.tcx.sess.diagnostic(),\n-                Level::Help,\n-                \"the following changes may resolve your lifetime errors\",\n-            );\n+            let mut diag = infcx\n+                .tcx\n+                .sess\n+                .diagnostic()\n+                .struct_help(\"the following changes may resolve your lifetime errors\");\n \n             // Add suggestions.\n             for constraint in suggested {"}]}