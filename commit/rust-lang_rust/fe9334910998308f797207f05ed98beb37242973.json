{"sha": "fe9334910998308f797207f05ed98beb37242973", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOTMzNDkxMDk5ODMwOGY3OTcyMDdmMDVlZDk4YmViMzcyNDI5NzM=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-01T11:52:44Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-01T15:48:19Z"}, "message": "Minor adjustments and refactoring", "tree": {"sha": "4273bf8887b415a53a64398af5d3f6744501f363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4273bf8887b415a53a64398af5d3f6744501f363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9334910998308f797207f05ed98beb37242973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9334910998308f797207f05ed98beb37242973", "html_url": "https://github.com/rust-lang/rust/commit/fe9334910998308f797207f05ed98beb37242973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9334910998308f797207f05ed98beb37242973/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2befc27b2e65e0ffdd9e8280951e7349317e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2befc27b2e65e0ffdd9e8280951e7349317e39", "html_url": "https://github.com/rust-lang/rust/commit/7b2befc27b2e65e0ffdd9e8280951e7349317e39"}], "stats": {"total": 97, "additions": 30, "deletions": 67}, "files": [{"sha": "ec86ec44ece8e2e9a8a03ff23b600f21a847f710", "filename": "compiler/rustc_error_codes/src/error_codes/E0094.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe9334910998308f797207f05ed98beb37242973/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe9334910998308f797207f05ed98beb37242973/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md?ref=fe9334910998308f797207f05ed98beb37242973", "patch": "@@ -1,5 +1,4 @@\n-An invalid number of generic type, lifetime, or const parameters was\n-given to an intrinsic function.\n+An invalid number of generic parameters was passed to an intrinsic function.\n \n Erroneous code example:\n "}, {"sha": "38ace42618bfcdd5fdd4903b5c40d5bb99a19357", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 24, "deletions": 53, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fe9334910998308f797207f05ed98beb37242973/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9334910998308f797207f05ed98beb37242973/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=fe9334910998308f797207f05ed98beb37242973", "patch": "@@ -3,7 +3,7 @@\n \n use crate::errors::{\n     SimdShuffleMissingLength, UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n-    WrongNumberOfGenericArgumentsToInstrinsic,\n+    WrongNumberOfGenericArgumentsToIntrinsic,\n };\n use crate::require_same_types;\n \n@@ -24,27 +24,10 @@ fn equate_intrinsic_type<'tcx>(\n     n_lts: usize,\n     sig: ty::PolyFnSig<'tcx>,\n ) {\n-    let (gen_lts, gen_tys, gen_cns, span) = match &it.kind {\n+    let (own_counts, span) = match &it.kind {\n         hir::ForeignItemKind::Fn(.., generics) => {\n-            let mut gen_lts = 0;\n-            let mut gen_tys = 0;\n-            let mut gen_cns = 0;\n-\n-            for param in generics.params {\n-                match param.kind {\n-                    hir::GenericParamKind::Lifetime { .. } => {\n-                        gen_lts += 1;\n-                    }\n-                    hir::GenericParamKind::Type { .. } => {\n-                        gen_tys += 1;\n-                    }\n-                    hir::GenericParamKind::Const { .. } => {\n-                        gen_cns += 1;\n-                    }\n-                }\n-            }\n-\n-            (gen_lts, gen_tys, gen_cns, generics.span)\n+            let own_counts = tcx.generics_of(it.def_id.to_def_id()).own_counts();\n+            (own_counts, generics.span)\n         }\n         _ => {\n             struct_span_err!(tcx.sess, it.span, E0622, \"intrinsic must be a function\")\n@@ -54,31 +37,25 @@ fn equate_intrinsic_type<'tcx>(\n         }\n     };\n \n-    if gen_lts != n_lts {\n-        tcx.sess.emit_err(WrongNumberOfGenericArgumentsToInstrinsic {\n-            span,\n-            found: gen_lts,\n-            expected: n_lts,\n-            expected_pluralize: pluralize!(n_lts),\n-            descr: \"lifetime\",\n-        });\n-    } else if gen_tys != n_tps {\n-        tcx.sess.emit_err(WrongNumberOfGenericArgumentsToInstrinsic {\n-            span,\n-            found: gen_tys,\n-            expected: n_tps,\n-            expected_pluralize: pluralize!(n_tps),\n-            descr: \"type\",\n-        });\n-    } else if gen_cns != 0 {\n-        tcx.sess.emit_err(WrongNumberOfGenericArgumentsToInstrinsic {\n-            span,\n-            found: gen_cns,\n-            expected: 0,\n-            expected_pluralize: pluralize!(0),\n-            descr: \"const\",\n-        });\n-    } else {\n+    let gen_count_ok = |found: usize, expected: usize, descr: &str| -> bool {\n+        if found != expected {\n+            tcx.sess.emit_err(WrongNumberOfGenericArgumentsToIntrinsic {\n+                span,\n+                found,\n+                expected,\n+                expected_pluralize: pluralize!(expected),\n+                descr,\n+            });\n+            false\n+        } else {\n+            true\n+        }\n+    };\n+\n+    if gen_count_ok(own_counts.lifetimes, n_lts, \"lifetime\")\n+        && gen_count_ok(own_counts.types, n_tps, \"type\")\n+        && gen_count_ok(own_counts.consts, 0, \"const\")\n+    {\n         let fty = tcx.mk_fn_ptr(sig);\n         let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n         require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n@@ -404,13 +381,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n         };\n-        (\n-            n_tps,\n-            if matches!(intrinsic_name, sym::va_copy) { 1 } else { 0 },\n-            inputs,\n-            output,\n-            unsafety,\n-        )\n+        (n_tps, 0, inputs, output, unsafety)\n     };\n     let sig = tcx.mk_fn_sig(inputs.into_iter(), output, false, unsafety, Abi::RustIntrinsic);\n     let sig = ty::Binder::bind_with_vars(sig, bound_vars);"}, {"sha": "184a827a4f90205d33098c0388be01dbac76360d", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9334910998308f797207f05ed98beb37242973/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9334910998308f797207f05ed98beb37242973/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=fe9334910998308f797207f05ed98beb37242973", "patch": "@@ -24,7 +24,7 @@ pub struct UnrecognizedAtomicOperation<'a> {\n \n #[derive(SessionDiagnostic)]\n #[error = \"E0094\"]\n-pub struct WrongNumberOfGenericArgumentsToInstrinsic<'a> {\n+pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     #[message = \"intrinsic has wrong number of {descr} \\\n                          parameters: found {found}, expected {expected}\"]\n     #[label = \"expected {expected} {descr} parameter{expected_pluralize}\"]"}, {"sha": "f276fbd669470baa2e94ccf00ab5ccd2d5995126", "filename": "src/test/ui/simd-intrinsic/issue-85855.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe9334910998308f797207f05ed98beb37242973/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9334910998308f797207f05ed98beb37242973/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs?ref=fe9334910998308f797207f05ed98beb37242973", "patch": "@@ -9,8 +9,7 @@ extern \"platform-intrinsic\" {\n     fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n     //~^ ERROR: intrinsic has wrong number of lifetime parameters\n \n-    fn simd_add<'a, T>(x: T, y: T);\n-    //~^ ERROR: intrinsic has wrong number of lifetime parameters\n+    fn simd_add<'a, T>(x: T, y: T) -> T;\n \n     fn simd_sub<T, U>(x: T, y: U);\n     //~^ ERROR: intrinsic has wrong number of type parameters"}, {"sha": "fb2f1fbc5b1ccc47b756d29b82e45b69ea00b7fd", "filename": "src/test/ui/simd-intrinsic/issue-85855.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe9334910998308f797207f05ed98beb37242973/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe9334910998308f797207f05ed98beb37242973/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr?ref=fe9334910998308f797207f05ed98beb37242973", "patch": "@@ -4,24 +4,18 @@ error[E0094]: intrinsic has wrong number of lifetime parameters: found 1, expect\n LL |     fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n    |                           ^^^^^^^^^^^ expected 0 lifetime parameters\n \n-error[E0094]: intrinsic has wrong number of lifetime parameters: found 1, expected 0\n-  --> $DIR/issue-85855.rs:12:16\n-   |\n-LL |     fn simd_add<'a, T>(x: T, y: T);\n-   |                ^^^^^^^ expected 0 lifetime parameters\n-\n error[E0094]: intrinsic has wrong number of type parameters: found 2, expected 1\n-  --> $DIR/issue-85855.rs:15:16\n+  --> $DIR/issue-85855.rs:14:16\n    |\n LL |     fn simd_sub<T, U>(x: T, y: U);\n    |                ^^^^^^ expected 1 type parameter\n \n error[E0094]: intrinsic has wrong number of const parameters: found 1, expected 0\n-  --> $DIR/issue-85855.rs:18:16\n+  --> $DIR/issue-85855.rs:17:16\n    |\n LL |     fn simd_mul<T, const N: usize>(x: T, y: T);\n    |                ^^^^^^^^^^^^^^^^^^^ expected 0 const parameters\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0094`."}]}