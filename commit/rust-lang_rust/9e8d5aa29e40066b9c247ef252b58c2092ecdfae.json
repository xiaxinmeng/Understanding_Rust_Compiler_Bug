{"sha": "9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOGQ1YWEyOWU0MDA2NmI5YzI0N2VmMjUyYjU4YzIwOTJlY2RmYWU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-21T12:56:09Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-23T14:15:39Z"}, "message": "arena,std,serialize: remove some unnecessary transmutes.\n\n`as`-able transmutes, duplication and manual slice decomposition are\nsilly.", "tree": {"sha": "c60800bafd66f03ddaf6a70370e23158e40fc7ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c60800bafd66f03ddaf6a70370e23158e40fc7ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "comment_count": 20, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "html_url": "https://github.com/rust-lang/rust/commit/9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "html_url": "https://github.com/rust-lang/rust/commit/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "717e5ec7b18b8988c202a74d325c686342d672e7", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "patch": "@@ -167,13 +167,12 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n // is necessary in order to properly do cleanup if a failure occurs\n // during an initializer.\n #[inline]\n-unsafe fn bitpack_tydesc_ptr(p: *TyDesc, is_done: bool) -> uint {\n-    let p_bits: uint = transmute(p);\n-    p_bits | (is_done as uint)\n+fn bitpack_tydesc_ptr(p: *TyDesc, is_done: bool) -> uint {\n+    p as uint | (is_done as uint)\n }\n #[inline]\n-unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TyDesc, bool) {\n-    (transmute(p & !1), p & 1 == 1)\n+fn un_bitpack_tydesc_ptr(p: uint) -> (*TyDesc, bool) {\n+    ((p & !1) as *TyDesc, p & 1 == 1)\n }\n \n impl Arena {"}, {"sha": "bc9eee517536dae4e6c7695ea7b756d974b1a92a", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "patch": "@@ -161,9 +161,7 @@ pub mod reader {\n         ];\n \n         unsafe {\n-            let (ptr, _): (*u8, uint) = transmute(data);\n-            let ptr = ptr.offset(start as int);\n-            let ptr: *i32 = transmute(ptr);\n+            let ptr = data.as_ptr().offset(start as int) as *i32;\n             let val = from_be32(*ptr) as u32;\n \n             let i = (val >> 28u) as uint;"}, {"sha": "8fdb42afd5e4e9616551702ae58f7d28e7a9f569", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "patch": "@@ -351,10 +351,8 @@ impl Float for f32 {\n         static EXP_MASK: u32 = 0x7f800000;\n         static MAN_MASK: u32 = 0x007fffff;\n \n-        match (\n-            unsafe { ::cast::transmute::<f32,u32>(*self) } & MAN_MASK,\n-            unsafe { ::cast::transmute::<f32,u32>(*self) } & EXP_MASK,\n-        ) {\n+        let bits: u32 = unsafe {::cast::transmute(*self)};\n+        match (bits & MAN_MASK, bits & EXP_MASK) {\n             (0, 0)        => FPZero,\n             (_, 0)        => FPSubnormal,\n             (0, EXP_MASK) => FPInfinite,"}, {"sha": "7f6f02492abb0d4f6d46e00ee7ac0ce12dc9b9b5", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8d5aa29e40066b9c247ef252b58c2092ecdfae/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "patch": "@@ -353,10 +353,8 @@ impl Float for f64 {\n         static EXP_MASK: u64 = 0x7ff0000000000000;\n         static MAN_MASK: u64 = 0x000fffffffffffff;\n \n-        match (\n-            unsafe { ::cast::transmute::<f64,u64>(*self) } & MAN_MASK,\n-            unsafe { ::cast::transmute::<f64,u64>(*self) } & EXP_MASK,\n-        ) {\n+        let bits: u64 = unsafe {::cast::transmute(*self)};\n+        match (bits & MAN_MASK, bits & EXP_MASK) {\n             (0, 0)        => FPZero,\n             (_, 0)        => FPSubnormal,\n             (0, EXP_MASK) => FPInfinite,"}]}