{"sha": "386e9fbda225bd04039a47caad9138983faff18c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NmU5ZmJkYTIyNWJkMDQwMzlhNDdjYWFkOTEzODk4M2ZhZmYxOGM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:10:22Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:07:37Z"}, "message": "Add type_flags helper methods to consts\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "7a117cb4ddb9e206b681eeb179d82404d636f752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a117cb4ddb9e206b681eeb179d82404d636f752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/386e9fbda225bd04039a47caad9138983faff18c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/386e9fbda225bd04039a47caad9138983faff18c", "html_url": "https://github.com/rust-lang/rust/commit/386e9fbda225bd04039a47caad9138983faff18c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/386e9fbda225bd04039a47caad9138983faff18c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cbbbaae6c1956d2c070e7f7447a9478adbf0dcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbbbaae6c1956d2c070e7f7447a9478adbf0dcd", "html_url": "https://github.com/rust-lang/rust/commit/8cbbbaae6c1956d2c070e7f7447a9478adbf0dcd"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "1aa4ca7ff97abd3d34f36fd058e26b36972f7bbc", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/386e9fbda225bd04039a47caad9138983faff18c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386e9fbda225bd04039a47caad9138983faff18c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=386e9fbda225bd04039a47caad9138983faff18c", "patch": "@@ -2110,6 +2110,22 @@ impl<'tcx> LazyConst<'tcx> {\n     pub fn unwrap_usize(&self, tcx: TyCtxt<'_, '_, '_>) -> u64 {\n         self.assert_usize(tcx).expect(\"expected `LazyConst` to contain a usize\")\n     }\n+\n+    pub fn type_flags(&self) -> TypeFlags {\n+        // FIXME(const_generics): incorporate substs flags.\n+        let flags = match self {\n+            LazyConst::Unevaluated(..) => {\n+                TypeFlags::HAS_NORMALIZABLE_PROJECTION | TypeFlags::HAS_PROJECTION\n+            }\n+            LazyConst::Evaluated(c) => {\n+                c.type_flags()\n+            }\n+        };\n+\n+        debug!(\"type_flags({:?}) = {:?}\", self, flags);\n+\n+        flags\n+    }\n }\n \n /// Typed constant value.\n@@ -2225,6 +2241,33 @@ impl<'tcx> Const<'tcx> {\n         self.assert_usize(tcx).unwrap_or_else(||\n             bug!(\"expected constant usize, got {:#?}\", self))\n     }\n+\n+    pub fn type_flags(&self) -> TypeFlags {\n+        let mut flags = self.ty.flags;\n+\n+        match self.val {\n+            ConstValue::Param(_) => {\n+                flags |= TypeFlags::HAS_FREE_LOCAL_NAMES;\n+                flags |= TypeFlags::HAS_PARAMS;\n+            }\n+            ConstValue::Infer(infer) => {\n+                flags |= TypeFlags::HAS_FREE_LOCAL_NAMES;\n+                flags |= TypeFlags::HAS_CT_INFER;\n+                match infer {\n+                    InferConst::Fresh(_) |\n+                    InferConst::Canonical(_, _) => {}\n+                    InferConst::Var(_) => {\n+                        flags |= TypeFlags::KEEP_IN_LOCAL_TCX;\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        debug!(\"type_flags({:?}) = {:?}\", self, flags);\n+\n+        flags\n+    }\n }\n \n impl<'tcx> serialize::UseSpecializedDecodable for &'tcx LazyConst<'tcx> {}"}]}