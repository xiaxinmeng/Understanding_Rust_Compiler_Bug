{"sha": "aacc8941342d9b04fe65164018c07c994ff981b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhY2M4OTQxMzQyZDliMDRmZTY1MTY0MDE4YzA3Yzk5NGZmOTgxYjc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-09T15:59:59Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-09T15:59:59Z"}, "message": "Add display::Description", "tree": {"sha": "437afc068961faadbe6ad30f93d82eb88f5bc1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/437afc068961faadbe6ad30f93d82eb88f5bc1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aacc8941342d9b04fe65164018c07c994ff981b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aacc8941342d9b04fe65164018c07c994ff981b7", "html_url": "https://github.com/rust-lang/rust/commit/aacc8941342d9b04fe65164018c07c994ff981b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aacc8941342d9b04fe65164018c07c994ff981b7/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f", "html_url": "https://github.com/rust-lang/rust/commit/2acf1e16fc89c51725a1bd6aafe8dfe4b9d19b1f"}], "stats": {"total": 230, "additions": 163, "deletions": 67}, "files": [{"sha": "1d0e8ba12ed7e861c7dc7624a1497e65842fd25c", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=aacc8941342d9b04fe65164018c07c994ff981b7", "patch": "@@ -4,13 +4,16 @@\n mod function_signature;\n mod navigation_target;\n mod structure;\n+mod description;\n \n use ra_syntax::{ast::{self, AstNode, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n \n pub use navigation_target::NavigationTarget;\n pub use structure::{StructureNode, file_structure};\n pub use function_signature::FunctionSignature;\n \n+pub(crate) use description::Description;\n+\n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n     FunctionSignature::from(node).to_string()\n }"}, {"sha": "fd0f564de60a936949de2790c93a6b9556ebed88", "filename": "crates/ra_ide_api/src/display/description.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fdescription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fdescription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fdescription.rs?ref=aacc8941342d9b04fe65164018c07c994ff981b7", "patch": "@@ -0,0 +1,92 @@\n+use ra_syntax::{\n+    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner, AstNode},\n+};\n+\n+pub(crate) trait Description {\n+    fn description(&self) -> Option<String>;\n+}\n+\n+impl Description for ast::FnDef {\n+    fn description(&self) -> Option<String> {\n+        Some(crate::display::function_label(self))\n+    }\n+}\n+\n+impl Description for ast::StructDef {\n+    fn description(&self) -> Option<String> {\n+        visit_node(self, \"struct \")\n+    }\n+}\n+\n+impl Description for ast::EnumDef {\n+    fn description(&self) -> Option<String> {\n+        visit_node(self, \"enum \")\n+    }\n+}\n+\n+impl Description for ast::TraitDef {\n+    fn description(&self) -> Option<String> {\n+        visit_node(self, \"trait \")\n+    }\n+}\n+\n+impl Description for ast::Module {\n+    fn description(&self) -> Option<String> {\n+        visit_node(self, \"mod \")\n+    }\n+}\n+\n+impl Description for ast::TypeAliasDef {\n+    fn description(&self) -> Option<String> {\n+        visit_node(self, \"type \")\n+    }\n+}\n+\n+impl Description for ast::ConstDef {\n+    fn description(&self) -> Option<String> {\n+        visit_ascribed_node(self, \"const \")\n+    }\n+}\n+\n+impl Description for ast::StaticDef {\n+    fn description(&self) -> Option<String> {\n+        visit_ascribed_node(self, \"static \")\n+    }\n+}\n+\n+impl Description for ast::NamedFieldDef {\n+    fn description(&self) -> Option<String> {\n+        visit_ascribed_node(self, \"\")\n+    }\n+}\n+\n+impl Description for ast::EnumVariant {\n+    fn description(&self) -> Option<String> {\n+        Some(self.name()?.text().to_string())\n+    }\n+}\n+\n+fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+where\n+    T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+{\n+    let mut string = visit_node(node, prefix)?;\n+\n+    if let Some(type_ref) = node.ascribed_type() {\n+        string.push_str(\": \");\n+        type_ref.syntax().text().push_to(&mut string);\n+    }\n+\n+    Some(string)\n+}\n+\n+fn visit_node<T>(node: &T, label: &str) -> Option<String>\n+where\n+    T: NameOwner + VisibilityOwner,\n+{\n+    let mut string =\n+        node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n+    string.push_str(label);\n+    string.push_str(node.name()?.text().as_str());\n+    Some(string)\n+}"}, {"sha": "f60a07f1d6998cd51cc7d35a9c79f9346d86ee57", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=aacc8941342d9b04fe65164018c07c994ff981b7", "patch": "@@ -2,12 +2,13 @@ use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     SyntaxNode, AstNode, SmolStr, TextRange, AstPtr,\n     SyntaxKind::{self, NAME},\n-    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner, DocCommentsOwner},\n+    ast::{self, DocCommentsOwner},\n     algo::visit::{visitor, Visitor},\n };\n use hir::{ModuleSource, FieldSource, ImplItem};\n \n use crate::{FileSymbol, db::RootDatabase};\n+use super::description::Description;\n \n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n@@ -63,7 +64,7 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn from_bind_pat(file_id: FileId, pat: &ast::BindPat) -> NavigationTarget {\n-        NavigationTarget::from_named(file_id, pat, None)\n+        NavigationTarget::from_named(file_id, pat, None, None)\n     }\n \n     pub(crate) fn from_symbol(db: &RootDatabase, symbol: FileSymbol) -> NavigationTarget {\n@@ -77,7 +78,7 @@ impl NavigationTarget {\n             full_range: symbol.ptr.range(),\n             focus_range: symbol.name_range,\n             container_name: symbol.container_name.clone(),\n-            description: description_inner(&node),\n+            description: description_from_symbol(&node),\n             docs: docs_from_symbol(db, &symbol),\n         }\n     }\n@@ -92,7 +93,6 @@ impl NavigationTarget {\n             ast::PatKind::BindPat(pat) => return NavigationTarget::from_bind_pat(file_id, &pat),\n             _ => (\"_\".into(), pat.syntax_node_ptr().range()),\n         };\n-        let node = pat.to_node(file.syntax()).syntax().to_owned();\n \n         NavigationTarget {\n             file_id,\n@@ -101,20 +101,16 @@ impl NavigationTarget {\n             focus_range: None,\n             kind: NAME,\n             container_name: None,\n-            description: description_inner(&node),\n-            docs: None, //< No documentation for Pattern\n+            description: None, //< No documentation for Description\n+            docs: None,        //< No documentation for Pattern\n         }\n     }\n \n     pub(crate) fn from_self_param(\n-        db: &RootDatabase,\n         file_id: FileId,\n         par: AstPtr<ast::SelfParam>,\n     ) -> NavigationTarget {\n         let (name, full_range) = (\"self\".into(), par.syntax_node_ptr().range());\n-        let file = db.parse(file_id).tree;\n-        let ast = par.to_node(file.syntax());\n-        let node = ast.syntax().to_owned();\n \n         NavigationTarget {\n             file_id,\n@@ -123,8 +119,8 @@ impl NavigationTarget {\n             focus_range: None,\n             kind: NAME,\n             container_name: None,\n-            description: description_inner(&node),\n-            docs: None, //< No document node for SelfParam\n+            description: None, //< No document node for SelfParam\n+            docs: None,        //< No document node for SelfParam\n         }\n     }\n \n@@ -134,14 +130,15 @@ impl NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         match source {\n             ModuleSource::SourceFile(node) => {\n-                NavigationTarget::from_syntax(file_id, name, None, node.syntax(), None)\n+                NavigationTarget::from_syntax(file_id, name, None, node.syntax(), None, None)\n             }\n             ModuleSource::Module(node) => NavigationTarget::from_syntax(\n                 file_id,\n                 name,\n                 None,\n                 node.syntax(),\n                 node.doc_comment_text(),\n+                node.description(),\n             ),\n         }\n     }\n@@ -156,25 +153,31 @@ impl NavigationTarget {\n                 None,\n                 source.syntax(),\n                 source.doc_comment_text(),\n+                source.description(),\n             );\n         }\n         NavigationTarget::from_module(db, module)\n     }\n \n     pub(crate) fn from_function(db: &RootDatabase, func: hir::Function) -> NavigationTarget {\n         let (file_id, fn_def) = func.source(db);\n-        NavigationTarget::from_named(file_id.original_file(db), &*fn_def, fn_def.doc_comment_text())\n+        NavigationTarget::from_named(\n+            file_id.original_file(db),\n+            &*fn_def,\n+            fn_def.doc_comment_text(),\n+            fn_def.description(),\n+        )\n     }\n \n     pub(crate) fn from_field(db: &RootDatabase, field: hir::StructField) -> NavigationTarget {\n         let (file_id, field) = field.source(db);\n         let file_id = file_id.original_file(db);\n         match field {\n             FieldSource::Named(it) => {\n-                NavigationTarget::from_named(file_id, &*it, it.doc_comment_text())\n+                NavigationTarget::from_named(file_id, &*it, it.doc_comment_text(), it.description())\n             }\n             FieldSource::Pos(it) => {\n-                NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax(), None)\n+                NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax(), None, None)\n             }\n         }\n     }\n@@ -187,6 +190,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::AdtDef::Union(s) => {\n@@ -195,6 +199,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::AdtDef::Enum(s) => {\n@@ -203,6 +208,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n         }\n@@ -221,6 +227,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::Union(s) => {\n@@ -229,6 +236,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::Const(s) => {\n@@ -237,6 +245,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::Static(s) => {\n@@ -245,6 +254,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::Enum(e) => {\n@@ -253,6 +263,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::EnumVariant(var) => {\n@@ -261,6 +272,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::Trait(e) => {\n@@ -269,6 +281,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::TypeAlias(e) => {\n@@ -277,6 +290,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             hir::ModuleDef::BuiltinType(..) => {\n@@ -297,6 +311,7 @@ impl NavigationTarget {\n             None,\n             node.syntax(),\n             None,\n+            None,\n         )\n     }\n \n@@ -309,6 +324,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n             ImplItem::TypeAlias(a) => {\n@@ -317,6 +333,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n+                    node.description(),\n                 )\n             }\n         }\n@@ -325,7 +342,12 @@ impl NavigationTarget {\n     pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n         let (file_id, node) = macro_call.source(db);\n         log::debug!(\"nav target {}\", node.syntax().debug_dump());\n-        NavigationTarget::from_named(file_id.original_file(db), &*node, node.doc_comment_text())\n+        NavigationTarget::from_named(\n+            file_id.original_file(db),\n+            &*node,\n+            node.doc_comment_text(),\n+            None,\n+        )\n     }\n \n     #[cfg(test)]\n@@ -357,11 +379,12 @@ impl NavigationTarget {\n         file_id: FileId,\n         node: &impl ast::NameOwner,\n         docs: Option<String>,\n+        description: Option<String>,\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range = node.name().map(|it| it.syntax().range());\n-        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax(), docs)\n+        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax(), docs, description)\n     }\n \n     fn from_syntax(\n@@ -370,6 +393,7 @@ impl NavigationTarget {\n         focus_range: Option<TextRange>,\n         node: &SyntaxNode,\n         docs: Option<String>,\n+        description: Option<String>,\n     ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n@@ -379,7 +403,7 @@ impl NavigationTarget {\n             focus_range,\n             // ptr: Some(LocalSyntaxPtr::new(node)),\n             container_name: None,\n-            description: description_inner(node),\n+            description,\n             docs,\n         }\n     }\n@@ -408,46 +432,22 @@ fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n         .accept(&node)?\n }\n \n-/// Get a description of a node.\n+/// Get a description of a symbol.\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n-fn description_inner(node: &SyntaxNode) -> Option<String> {\n+fn description_from_symbol(node: &SyntaxNode) -> Option<String> {\n     // FIXME: After type inference is done, add type information to improve the output\n-    fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n-    where\n-        T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n-    {\n-        let mut string = visit_node(node, prefix)?;\n-\n-        if let Some(type_ref) = node.ascribed_type() {\n-            string.push_str(\": \");\n-            type_ref.syntax().text().push_to(&mut string);\n-        }\n-\n-        Some(string)\n-    }\n-\n-    fn visit_node<T>(node: &T, label: &str) -> Option<String>\n-    where\n-        T: NameOwner + VisibilityOwner,\n-    {\n-        let mut string =\n-            node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n-        string.push_str(label);\n-        string.push_str(node.name()?.text().as_str());\n-        Some(string)\n-    }\n \n     visitor()\n-        .visit(|node: &ast::FnDef| Some(crate::display::function_label(node)))\n-        .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n-        .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n-        .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n-        .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n-        .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n-        .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n-        .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n-        .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n-        .visit(|node: &ast::EnumVariant| Some(node.name()?.text().to_string()))\n+        .visit(|node: &ast::FnDef| node.description())\n+        .visit(|node: &ast::StructDef| node.description())\n+        .visit(|node: &ast::EnumDef| node.description())\n+        .visit(|node: &ast::TraitDef| node.description())\n+        .visit(|node: &ast::Module| node.description())\n+        .visit(|node: &ast::TypeAliasDef| node.description())\n+        .visit(|node: &ast::ConstDef| node.description())\n+        .visit(|node: &ast::StaticDef| node.description())\n+        .visit(|node: &ast::NamedFieldDef| node.description())\n+        .visit(|node: &ast::EnumVariant| node.description())\n         .accept(&node)?\n }"}, {"sha": "359fc2da18124d13ca6b4936f8d8b1d842bec8d1", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aacc8941342d9b04fe65164018c07c994ff981b7/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=aacc8941342d9b04fe65164018c07c994ff981b7", "patch": "@@ -13,6 +13,7 @@ use crate::{\n     db::RootDatabase,\n     RangeInfo,\n     name_ref_kind::{NameRefKind::*, classify_name_ref},\n+    display::Description,\n };\n \n pub(crate) fn goto_definition(\n@@ -72,7 +73,7 @@ pub(crate) fn reference_definition(\n             }\n         }\n         Some(Pat(pat)) => return Exact(NavigationTarget::from_pat(db, file_id, pat)),\n-        Some(SelfParam(par)) => return Exact(NavigationTarget::from_self_param(db, file_id, par)),\n+        Some(SelfParam(par)) => return Exact(NavigationTarget::from_self_param(file_id, par)),\n         Some(GenericParam(_)) => {\n             // FIXME: go to the generic param def\n         }\n@@ -115,37 +116,37 @@ pub(crate) fn name_definition(\n fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n     visitor()\n         .visit(|node: &ast::StructDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::EnumDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::EnumVariant| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::FnDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::TypeAliasDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::ConstDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::StaticDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::TraitDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::NamedFieldDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::Module| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n         })\n         .visit(|node: &ast::MacroCall| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), None)\n         })\n         .accept(node)\n }"}]}