{"sha": "9151599ec87e86b429e049b251a5470a29ea5948", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTE1OTllYzg3ZTg2YjQyOWUwNDliMjUxYTU0NzBhMjllYTU5NDg=", "commit": {"author": {"name": "Peer Aramillo Irizar", "email": "peer.aramillo.irizar@gmail.com", "date": "2014-08-09T07:29:07Z"}, "committer": {"name": "Peer Aramillo Irizar", "email": "peer.aramillo.irizar@gmail.com", "date": "2014-08-11T05:12:22Z"}, "message": "Fix some minor issues in the guide.", "tree": {"sha": "6a122370f3140b9ad7b4f6ec4b161ad384bed88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a122370f3140b9ad7b4f6ec4b161ad384bed88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9151599ec87e86b429e049b251a5470a29ea5948", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9151599ec87e86b429e049b251a5470a29ea5948", "html_url": "https://github.com/rust-lang/rust/commit/9151599ec87e86b429e049b251a5470a29ea5948", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9151599ec87e86b429e049b251a5470a29ea5948/comments", "author": {"login": "parir", "id": 5346552, "node_id": "MDQ6VXNlcjUzNDY1NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5346552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parir", "html_url": "https://github.com/parir", "followers_url": "https://api.github.com/users/parir/followers", "following_url": "https://api.github.com/users/parir/following{/other_user}", "gists_url": "https://api.github.com/users/parir/gists{/gist_id}", "starred_url": "https://api.github.com/users/parir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parir/subscriptions", "organizations_url": "https://api.github.com/users/parir/orgs", "repos_url": "https://api.github.com/users/parir/repos", "events_url": "https://api.github.com/users/parir/events{/privacy}", "received_events_url": "https://api.github.com/users/parir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "parir", "id": 5346552, "node_id": "MDQ6VXNlcjUzNDY1NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5346552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parir", "html_url": "https://github.com/parir", "followers_url": "https://api.github.com/users/parir/followers", "following_url": "https://api.github.com/users/parir/following{/other_user}", "gists_url": "https://api.github.com/users/parir/gists{/gist_id}", "starred_url": "https://api.github.com/users/parir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parir/subscriptions", "organizations_url": "https://api.github.com/users/parir/orgs", "repos_url": "https://api.github.com/users/parir/repos", "events_url": "https://api.github.com/users/parir/events{/privacy}", "received_events_url": "https://api.github.com/users/parir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4a63fabe345967e7d6b4570752ea081cae21785", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a63fabe345967e7d6b4570752ea081cae21785", "html_url": "https://github.com/rust-lang/rust/commit/c4a63fabe345967e7d6b4570752ea081cae21785"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "f6b25d20e12ddda11fc37b24b4fb0ad01c3387c4", "filename": "src/doc/guide.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9151599ec87e86b429e049b251a5470a29ea5948/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/9151599ec87e86b429e049b251a5470a29ea5948/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=9151599ec87e86b429e049b251a5470a29ea5948", "patch": "@@ -27,7 +27,7 @@ Sound good? Let's go!\n # Installing Rust\n \n The first step to using Rust is to install it! There are a number of ways to\n-install Rust, but the easiest is to use the the `rustup` script. If you're on\n+install Rust, but the easiest is to use the `rustup` script. If you're on\n Linux or a Mac, all you need to do is this (note that you don't need to type\n in the `$`s, they just indicate the start of each command):\n \n@@ -120,7 +120,7 @@ to make a projects directory in my home directory, and keep all my projects\n there. Rust does not care where your code lives.\n \n This actually leads to one other concern we should address: this tutorial will\n-assume that you have basic familiarity with the command-line. Rust does not\n+assume that you have basic familiarity with the command line. Rust does not\n require that you know a whole ton about the command line, but until the\n language is in a more finished state, IDE support is spotty. Rust makes no\n specific demands on your editing tooling, or where your code lives.\n@@ -452,7 +452,7 @@ what you need, so it's not verboten.\n \n Let's get back to bindings. Rust variable bindings have one more aspect that\n differs from other languages: bindings are required to be initialized with a\n-value before you're allowed to use it. If we try...\n+value before you're allowed to use them. If we try...\n \n ```{ignore}\n let x;\n@@ -2090,7 +2090,7 @@ In this case, I happen to prefer the latter, and in the `random()` case, I prefe\n the former. I think the nested `<>`s make the first option especially ugly and\n a bit harder to read.\n \n-Anyway, with us now convering our input to a number, our code looks like this:\n+Anyway, with us now converting our input to a number, our code looks like this:\n \n ```{rust,ignore}\n use std::io;\n@@ -2281,7 +2281,7 @@ change that by adding loops!\n \n ## Looping\n \n-As we already discussed, the `loop` key word gives us an infinite loop. So\n+As we already discussed, the `loop` keyword gives us an infinite loop. So\n let's add that in:\n \n ```{rust,no_run}\n@@ -4099,7 +4099,7 @@ fn inverse(x: f64) -> Result<f64, String> {\n ```\n \n We don't want to take the inverse of zero, so we check to make sure that we\n-weren't passed one. If we weren't, then we return an `Err`, with a message. If\n+weren't passed zero. If we were, then we return an `Err`, with a message. If\n it's okay, we return an `Ok`, with the answer.\n \n Why does this matter? Well, remember how `match` does exhaustive matches?"}]}