{"sha": "703603a3623051b9f1a882b389f40f6a6dc5cfb0", "node_id": "C_kwDOAAsO6NoAKDcwMzYwM2EzNjIzMDUxYjlmMWE4ODJiMzg5ZjQwZjZhNmRjNWNmYjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-27T20:59:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-27T22:36:04Z"}, "message": "Only suggest call on nonexistent fields and methods if they make sense", "tree": {"sha": "2bf6a1f83a1c7c4836921bc255ab3ffeba0b304d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf6a1f83a1c7c4836921bc255ab3ffeba0b304d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/703603a3623051b9f1a882b389f40f6a6dc5cfb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/703603a3623051b9f1a882b389f40f6a6dc5cfb0", "html_url": "https://github.com/rust-lang/rust/commit/703603a3623051b9f1a882b389f40f6a6dc5cfb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/703603a3623051b9f1a882b389f40f6a6dc5cfb0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0734200e801d52662f02aff7fdd5026337798620", "url": "https://api.github.com/repos/rust-lang/rust/commits/0734200e801d52662f02aff7fdd5026337798620", "html_url": "https://github.com/rust-lang/rust/commit/0734200e801d52662f02aff7fdd5026337798620"}], "stats": {"total": 265, "additions": 94, "deletions": 171}, "files": [{"sha": "1ae4075aab6319cfe25e9506c9c349028cc9aefd", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -21,7 +21,6 @@ use crate::errors::{\n };\n use crate::type_error_struct;\n \n-use super::suggest_call_constructor;\n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n@@ -44,7 +43,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::FieldMisMatch;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, AdtKind, Ty, TypeVisitable};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -2280,35 +2279,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx().ty_error()\n     }\n \n-    fn check_call_constructor(\n-        &self,\n-        err: &mut Diagnostic,\n-        base: &'tcx hir::Expr<'tcx>,\n-        def_id: DefId,\n-    ) {\n-        if let Some(local_id) = def_id.as_local() {\n-            let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_id);\n-            let node = self.tcx.hir().get(hir_id);\n-\n-            if let Some(fields) = node.tuple_fields() {\n-                let kind = match self.tcx.opt_def_kind(local_id) {\n-                    Some(DefKind::Ctor(of, _)) => of,\n-                    _ => return,\n-                };\n-\n-                suggest_call_constructor(base.span, kind, fields.len(), err);\n-            }\n-        } else {\n-            // The logic here isn't smart but `associated_item_def_ids`\n-            // doesn't work nicely on local.\n-            if let DefKind::Ctor(of, _) = self.tcx.def_kind(def_id) {\n-                let parent_def_id = self.tcx.parent(def_id);\n-                let fields = self.tcx.associated_item_def_ids(parent_def_id);\n-                suggest_call_constructor(base.span, of, fields.len(), err);\n-            }\n-        }\n-    }\n-\n     fn suggest_await_on_field_access(\n         &self,\n         err: &mut Diagnostic,\n@@ -2378,12 +2348,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Opaque(_, _) => {\n                 self.suggest_await_on_field_access(&mut err, ident, base, base_ty.peel_refs());\n             }\n-            ty::FnDef(def_id, _) => {\n-                self.check_call_constructor(&mut err, base, def_id);\n-            }\n             _ => {}\n         }\n \n+        self.suggest_fn_call(&mut err, base, base_ty, |output_ty| {\n+            if let ty::Adt(def, _) = output_ty.kind() && !def.is_enum() {\n+                def.non_enum_variant().fields.iter().any(|field| {\n+                    field.ident(self.tcx) == ident\n+                        && field.vis.is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx)\n+                })\n+            } else if let ty::Tuple(tys) = output_ty.kind()\n+                && let Ok(idx) = ident.as_str().parse::<usize>()\n+            {\n+                idx < tys.len()\n+            } else {\n+                false\n+            }\n+        });\n+\n         if ident.name == kw::Await {\n             // We know by construction that `<expr>.await` is either on Rust 2015\n             // or results in `ExprKind::Await`. Suggest switching the edition to 2018."}, {"sha": "cfedd145fed30b3ea43a6a20f5e2a22f0910b6e5", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 39, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -31,7 +31,7 @@ use std::cmp::Ordering;\n use std::iter;\n \n use super::probe::{Mode, ProbeScope};\n-use super::{super::suggest_call_constructor, CandidateSource, MethodError, NoMatchData};\n+use super::{CandidateSource, MethodError, NoMatchData};\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn is_fn_ty(&self, ty: Ty<'tcx>, span: Span) -> bool {\n@@ -363,44 +363,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 }\n \n-                if self.is_fn_ty(rcvr_ty, span) {\n-                    if let SelfSource::MethodCall(expr) = source {\n-                        let suggest = if let ty::FnDef(def_id, _) = rcvr_ty.kind() {\n-                            if let Some(local_id) = def_id.as_local() {\n-                                let hir_id = tcx.hir().local_def_id_to_hir_id(local_id);\n-                                let node = tcx.hir().get(hir_id);\n-                                let fields = node.tuple_fields();\n-                                if let Some(fields) = fields\n-                                    && let Some(DefKind::Ctor(of, _)) = self.tcx.opt_def_kind(local_id) {\n-                                        Some((fields.len(), of))\n-                                } else {\n-                                    None\n-                                }\n-                            } else {\n-                                // The logic here isn't smart but `associated_item_def_ids`\n-                                // doesn't work nicely on local.\n-                                if let DefKind::Ctor(of, _) = tcx.def_kind(def_id) {\n-                                    let parent_def_id = tcx.parent(*def_id);\n-                                    Some((tcx.associated_item_def_ids(parent_def_id).len(), of))\n-                                } else {\n-                                    None\n-                                }\n-                            }\n-                        } else {\n-                            None\n-                        };\n-\n-                        // If the function is a tuple constructor, we recommend that they call it\n-                        if let Some((fields, kind)) = suggest {\n-                            suggest_call_constructor(expr.span, kind, fields, &mut err);\n-                        } else {\n-                            // General case\n-                            err.span_label(\n-                                expr.span,\n-                                \"this is a function, perhaps you wish to call it\",\n-                            );\n-                        }\n-                    }\n+                if let SelfSource::MethodCall(rcvr_expr) = source {\n+                    self.suggest_fn_call(&mut err, rcvr_expr, rcvr_ty, |output_ty| {\n+                        let call_expr = self\n+                            .tcx\n+                            .hir()\n+                            .expect_expr(self.tcx.hir().get_parent_node(rcvr_expr.hir_id));\n+                        let probe = self.lookup_probe(\n+                            span,\n+                            item_name,\n+                            output_ty,\n+                            call_expr,\n+                            ProbeScope::AllTraits,\n+                        );\n+                        probe.is_ok()\n+                    });\n                 }\n \n                 let mut custom_span_label = false;"}, {"sha": "343ea9e0fa5a12fb6b1eb9c8e6e078f7c4e329e0", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -96,7 +96,6 @@ use check::{check_abi, check_fn, check_mod_item_types};\n pub use diverges::Diverges;\n pub use expectation::Expectation;\n pub use fn_ctxt::*;\n-use hir::def::CtorOf;\n pub use inherited::{Inherited, InheritedBuilder};\n \n use crate::astconv::AstConv;\n@@ -960,31 +959,3 @@ fn has_expected_num_generic_args<'tcx>(\n         generics.count() == expected + if generics.has_self { 1 } else { 0 }\n     })\n }\n-\n-/// Suggests calling the constructor of a tuple struct or enum variant\n-///\n-/// * `snippet` - The snippet of code that references the constructor\n-/// * `span` - The span of the snippet\n-/// * `params` - The number of parameters the constructor accepts\n-/// * `err` - A mutable diagnostic builder to add the suggestion to\n-fn suggest_call_constructor(span: Span, kind: CtorOf, params: usize, err: &mut Diagnostic) {\n-    // Note: tuple-structs don't have named fields, so just use placeholders\n-    let args = vec![\"_\"; params].join(\", \");\n-    let applicable = if params > 0 {\n-        Applicability::HasPlaceholders\n-    } else {\n-        // When n = 0, it's an empty-tuple struct/enum variant\n-        // so we trivially know how to construct it\n-        Applicability::MachineApplicable\n-    };\n-    let kind = match kind {\n-        CtorOf::Struct => \"a struct\",\n-        CtorOf::Variant => \"an enum variant\",\n-    };\n-    err.span_label(span, &format!(\"this is the constructor of {kind}\"));\n-    err.multipart_suggestion(\n-        \"call the constructor\",\n-        vec![(span.shrink_to_lo(), \"(\".to_string()), (span.shrink_to_hi(), format!(\")({args})\"))],\n-        applicable,\n-    );\n-}"}, {"sha": "49a514a8b4e3461007e609d85d42a5522cdb4a81", "filename": "src/test/ui/functions-closures/fn-help-with-err.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -1,16 +1,28 @@\n // This test case checks the behavior of typeck::check::method::suggest::is_fn on Ty::Error.\n+\n+struct Foo;\n+\n+trait Bar {\n+    //~^ NOTE `Bar` defines an item `bar`, perhaps you need to implement it\n+    //~| NOTE `Bar` defines an item `bar`, perhaps you need to implement it\n+    fn bar(&self) {}\n+}\n+\n+impl Bar for Foo {}\n+\n fn main() {\n     let arc = std::sync::Arc::new(oops);\n     //~^ ERROR cannot find value `oops` in this scope\n     //~| NOTE not found\n-    // The error \"note: this is a function, perhaps you wish to call it\" MUST NOT appear.\n-    arc.blablabla();\n-    //~^ ERROR no method named `blablabla`\n+    arc.bar();\n+    //~^ ERROR no method named `bar`\n     //~| NOTE method not found\n-    let arc2 = std::sync::Arc::new(|| 1);\n-    // The error \"note: this is a function, perhaps you wish to call it\" SHOULD appear\n-    arc2.blablabla();\n-    //~^ ERROR no method named `blablabla`\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n+\n+    let arc2 = std::sync::Arc::new(|| Foo);\n+    arc2.bar();\n+    //~^ ERROR no method named `bar`\n     //~| NOTE method not found\n-    //~| NOTE this is a function, perhaps you wish to call it\n+    //~| HELP items from traits can only be used if the trait is implemented and in scope\n+    //~| HELP use parentheses to call this closure\n }"}, {"sha": "2296666219eef2fbb284e11e7699db91b4adb20d", "filename": "src/test/ui/functions-closures/fn-help-with-err.stderr", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -1,22 +1,38 @@\n error[E0425]: cannot find value `oops` in this scope\n-  --> $DIR/fn-help-with-err.rs:3:35\n+  --> $DIR/fn-help-with-err.rs:14:35\n    |\n LL |     let arc = std::sync::Arc::new(oops);\n    |                                   ^^^^ not found in this scope\n \n-error[E0599]: no method named `blablabla` found for struct `Arc<_>` in the current scope\n-  --> $DIR/fn-help-with-err.rs:7:9\n+error[E0599]: no method named `bar` found for struct `Arc<_>` in the current scope\n+  --> $DIR/fn-help-with-err.rs:17:9\n    |\n-LL |     arc.blablabla();\n-   |         ^^^^^^^^^ method not found in `Arc<_>`\n+LL |     arc.bar();\n+   |         ^^^ method not found in `Arc<_>`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Bar` defines an item `bar`, perhaps you need to implement it\n+  --> $DIR/fn-help-with-err.rs:5:1\n+   |\n+LL | trait Bar {\n+   | ^^^^^^^^^\n \n-error[E0599]: no method named `blablabla` found for struct `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:38]>` in the current scope\n-  --> $DIR/fn-help-with-err.rs:12:10\n+error[E0599]: no method named `bar` found for struct `Arc<[closure@$DIR/fn-help-with-err.rs:22:36: 22:38]>` in the current scope\n+  --> $DIR/fn-help-with-err.rs:23:10\n+   |\n+LL |     arc2.bar();\n+   |          ^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:22:36: 22:38]>`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Bar` defines an item `bar`, perhaps you need to implement it\n+  --> $DIR/fn-help-with-err.rs:5:1\n+   |\n+LL | trait Bar {\n+   | ^^^^^^^^^\n+help: use parentheses to call this closure\n    |\n-LL |     arc2.blablabla();\n-   |     ---- ^^^^^^^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:38]>`\n-   |     |\n-   |     this is a function, perhaps you wish to call it\n+LL |     arc2().bar();\n+   |         ++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b10273f14bd0338c4a2a6c2c4831e7c92519af7d", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no method named `f` found for fn pointer `fn(&u8)` in the current\n   --> $DIR/issue-57362-1.rs:20:7\n    |\n LL |     a.f();\n-   |     - ^ method not found in `fn(&u8)`\n-   |     |\n-   |     this is a function, perhaps you wish to call it\n+   |       ^ method not found in `fn(&u8)`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Trait` defines an item `f`, perhaps you need to implement it"}, {"sha": "a837a7d2d62d178833e6607ad3e12b2ec53fecf5", "filename": "src/test/ui/typeck/issue-29124.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,17 +2,13 @@ error[E0599]: no method named `x` found for fn item `fn() -> Ret {Obj::func}` in\n   --> $DIR/issue-29124.rs:15:15\n    |\n LL |     Obj::func.x();\n-   |     --------- ^ method not found in `fn() -> Ret {Obj::func}`\n-   |     |\n-   |     this is a function, perhaps you wish to call it\n+   |               ^ method not found in `fn() -> Ret {Obj::func}`\n \n error[E0599]: no method named `x` found for fn item `fn() -> Ret {func}` in the current scope\n   --> $DIR/issue-29124.rs:17:10\n    |\n LL |     func.x();\n-   |     ---- ^ method not found in `fn() -> Ret {func}`\n-   |     |\n-   |     this is a function, perhaps you wish to call it\n+   |          ^ method not found in `fn() -> Ret {func}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "be68ad32ae55bb35e1b097361f86492acee30df5", "filename": "src/test/ui/typeck/issue-87181/empty-tuple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -4,7 +4,7 @@ struct Bar<T> {\n \n struct Foo();\n impl Foo {\n-    fn foo() { }\n+    fn foo(&self) { }\n }\n \n fn main() {"}, {"sha": "a18c54a29b52c0e875b580fa15e0b069b5acc6bb", "filename": "src/test/ui/typeck/issue-87181/empty-tuple-method.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,11 +2,9 @@ error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo}` in the\n   --> $DIR/empty-tuple-method.rs:12:15\n    |\n LL |     thing.bar.foo();\n-   |     --------- ^^^ method not found in `fn() -> Foo {Foo}`\n-   |     |\n-   |     this is the constructor of a struct\n+   |               ^^^ method not found in `fn() -> Foo {Foo}`\n    |\n-help: call the constructor\n+help: use parentheses to instantiate this tuple struct\n    |\n LL |     (thing.bar)().foo();\n    |     +         +++"}, {"sha": "d87f99c3c5a193dc3ba7f3382744d43bdf8dced4", "filename": "src/test/ui/typeck/issue-87181/enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -6,7 +6,7 @@ enum Foo{\n     Tup()\n }\n impl Foo {\n-    fn foo() { }\n+    fn foo(&self) { }\n }\n \n fn main() {"}, {"sha": "90641410d8e967430f568da85b4507012eb2cd48", "filename": "src/test/ui/typeck/issue-87181/enum-variant.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,11 +2,9 @@ error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` i\n   --> $DIR/enum-variant.rs:14:15\n    |\n LL |     thing.bar.foo();\n-   |     --------- ^^^ method not found in `fn() -> Foo {Foo::Tup}`\n-   |     |\n-   |     this is the constructor of an enum variant\n+   |               ^^^ method not found in `fn() -> Foo {Foo::Tup}`\n    |\n-help: call the constructor\n+help: use parentheses to instantiate this tuple variant\n    |\n LL |     (thing.bar)().foo();\n    |     +         +++"}, {"sha": "0e43ace893396a4efba8d5b3a6bceb34b33c1f92", "filename": "src/test/ui/typeck/issue-87181/tuple-field.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,11 +2,9 @@ error[E0609]: no field `0` on type `fn(char, u16) -> Foo {Foo}`\n   --> $DIR/tuple-field.rs:12:15\n    |\n LL |     thing.bar.0;\n-   |     --------- ^\n-   |     |\n-   |     this is the constructor of a struct\n+   |               ^\n    |\n-help: call the constructor\n+help: use parentheses to instantiate this tuple struct\n    |\n LL |     (thing.bar)(_, _).0;\n    |     +         +++++++"}, {"sha": "e27c41858d322e181021cf02313543d6a25264e2", "filename": "src/test/ui/typeck/issue-87181/tuple-method.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,14 +2,7 @@ error[E0599]: no method named `foo` found for fn item `fn(u8, i32) -> Foo {Foo}`\n   --> $DIR/tuple-method.rs:12:15\n    |\n LL |     thing.bar.foo();\n-   |     --------- ^^^ method not found in `fn(u8, i32) -> Foo {Foo}`\n-   |     |\n-   |     this is the constructor of a struct\n-   |\n-help: call the constructor\n-   |\n-LL |     (thing.bar)(_, _).foo();\n-   |     +         +++++++\n+   |               ^^^ method not found in `fn(u8, i32) -> Foo {Foo}`\n \n error: aborting due to previous error\n "}, {"sha": "0d4d87ef47e2b99db2886049828f3ee0ac59997b", "filename": "src/test/ui/typeck/issue-96738.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,27 +2,13 @@ error[E0599]: no method named `nonexistent_method` found for fn item `fn(_) -> O\n   --> $DIR/issue-96738.rs:2:10\n    |\n LL |     Some.nonexistent_method();\n-   |     ---- ^^^^^^^^^^^^^^^^^^ method not found in `fn(_) -> Option<_> {Option::<_>::Some}`\n-   |     |\n-   |     this is the constructor of an enum variant\n-   |\n-help: call the constructor\n-   |\n-LL |     (Some)(_).nonexistent_method();\n-   |     +    ++++\n+   |          ^^^^^^^^^^^^^^^^^^ method not found in `fn(_) -> Option<_> {Option::<_>::Some}`\n \n error[E0609]: no field `nonexistent_field` on type `fn(_) -> Option<_> {Option::<_>::Some}`\n   --> $DIR/issue-96738.rs:3:10\n    |\n LL |     Some.nonexistent_field;\n-   |     ---- ^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     this is the constructor of an enum variant\n-   |\n-help: call the constructor\n-   |\n-LL |     (Some)(_).nonexistent_field;\n-   |     +    ++++\n+   |          ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5ca0edd7a91c62826aa111d4be9dada4161bb37", "filename": "src/test/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703603a3623051b9f1a882b389f40f6a6dc5cfb0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr?ref=703603a3623051b9f1a882b389f40f6a6dc5cfb0", "patch": "@@ -2,9 +2,7 @@ error[E0599]: no method named `call` found for closure `[closure@$DIR/unboxed-cl\n   --> $DIR/unboxed-closures-static-call-wrong-trait.rs:7:10\n    |\n LL |     mut_.call((0, ));\n-   |     ---- ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:29]`\n-   |     |\n-   |     this is a function, perhaps you wish to call it\n+   |          ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:29]`\n \n error: aborting due to previous error\n "}]}