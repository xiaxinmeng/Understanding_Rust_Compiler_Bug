{"sha": "d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWY5YjdmZDZkNGU0MTI1N2JiNGE2ZGI2NGU5ODczNzY3Mzc0ZGM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-11-01T12:46:05Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-11-01T14:05:45Z"}, "message": "targeted revert of PR rust-lang/rust#64324 (just undo change to dylib generics export).\n\nIncludes the anticipated fallout to run-make-fulldeps test suite from\nthis change. (We need to reopen issue 64319 as part of landing this.)", "tree": {"sha": "26e0a471861b57531dec4e64350b2c16fd0250a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e0a471861b57531dec4e64350b2c16fd0250a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "html_url": "https://github.com/rust-lang/rust/commit/d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3d28a49209a21628fda0245b631e5fc3465be1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d28a49209a21628fda0245b631e5fc3465be1a", "html_url": "https://github.com/rust-lang/rust/commit/d3d28a49209a21628fda0245b631e5fc3465be1a"}], "stats": {"total": 110, "additions": 18, "deletions": 92}, "files": [{"sha": "8d8974c6cbbe8986050d0810883095bc21376ed8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "patch": "@@ -1514,8 +1514,14 @@ impl<'tcx> TyCtxt<'tcx> {\n                 CrateType::Executable |\n                 CrateType::Staticlib  |\n                 CrateType::ProcMacro  |\n-                CrateType::Dylib      |\n                 CrateType::Cdylib     => false,\n+\n+                // FIXME rust-lang/rust#64319, rust-lang/rust#64872:\n+                // We want to block export of generics from dylibs,\n+                // but we must fix rust-lang/rust#65890 before we can\n+                // do that robustly.\n+                CrateType::Dylib      => true,\n+\n                 CrateType::Rlib       => true,\n             }\n         })"}, {"sha": "999cc406585030253ae30ac0efde7e465d645667", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "patch": "@@ -14,7 +14,6 @@ use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n                              LinkerPluginLto, Lto};\n-use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use rustc_serialize::{json, Encoder};\n@@ -1112,20 +1111,10 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n                     continue;\n                 }\n \n-                // Do not export generic symbols from upstream crates in linked\n-                // artifact (notably the `dylib` crate type). The main reason\n-                // for this is that `symbol_name` is actually wrong for generic\n-                // symbols because it guesses the name we'd give them locally\n-                // rather than the name it has upstream (depending on\n-                // `share_generics` settings and such).\n-                //\n-                // To fix that issue we just say that linked artifacts, aka\n-                // `dylib`s, never export generic symbols and they aren't\n-                // available to downstream crates. (the not available part is\n-                // handled elsewhere).\n-                if let ExportedSymbol::Generic(..) = symbol {\n-                    continue;\n-                }\n+                // FIXME rust-lang/rust#64319, rust-lang/rust#64872:\n+                // We want to block export of generics from dylibs,\n+                // but we must fix rust-lang/rust#65890 before we can\n+                // do that robustly.\n \n                 symbols.push(symbol.symbol_name(tcx).to_string());\n             }"}, {"sha": "5e5c94b03140eb0c91f1baa67f55fd47580ec6ed", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "patch": "@@ -9,7 +9,6 @@ use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateSource, CrateStore, DepKind, EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n-use rustc::middle::dependency_format::Linkage;\n use rustc::hir::def;\n use rustc::hir;\n use rustc::session::{CrateDisambiguator, Session};\n@@ -235,26 +234,11 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     used_crate_source => { Lrc::new(cdata.source.clone()) }\n \n     exported_symbols => {\n-        let mut syms = cdata.exported_symbols(tcx);\n-\n-        // When linked into a dylib crates don't export their generic symbols,\n-        // so if that's happening then we can't load upstream monomorphizations\n-        // from this crate.\n-        let formats = tcx.dependency_formats(LOCAL_CRATE);\n-        let remove_generics = formats.iter().any(|(_ty, list)| {\n-            match list.get(def_id.krate.as_usize() - 1) {\n-                Some(Linkage::IncludedFromDylib) | Some(Linkage::Dynamic) => true,\n-                _ => false,\n-            }\n-        });\n-        if remove_generics {\n-            syms.retain(|(sym, _threshold)| {\n-                match sym {\n-                    ExportedSymbol::Generic(..) => false,\n-                    _ => return true,\n-                }\n-            });\n-        }\n+        let syms = cdata.exported_symbols(tcx);\n+\n+        // FIXME rust-lang/rust#64319, rust-lang/rust#64872: We want\n+        // to block export of generics from dylibs, but we must fix\n+        // rust-lang/rust#65890 before we can do that robustly.\n \n         Arc::new(syms)\n     }"}, {"sha": "b2c6b8b3cbbf2bf4d15e5fdc3b71681a799522ae", "filename": "src/test/run-make-fulldeps/issue-64319/Makefile", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d3d28a49209a21628fda0245b631e5fc3465be1a/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d3d28a49209a21628fda0245b631e5fc3465be1a/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile?ref=d3d28a49209a21628fda0245b631e5fc3465be1a", "patch": "@@ -1,39 +0,0 @@\n--include ../tools.mk\n-\n-# Different optimization levels imply different values for `-Zshare-generics`,\n-# so try out a whole bunch of combinations to make sure everything is compatible\n-all:\n-\t# First up, try some defaults\n-\t$(RUSTC) --crate-type rlib foo.rs\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3\n-\n-\t# Next try mixing up some things explicitly\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n-\n-\t# Now combine a whole bunch of options together\n-\t$(RUSTC) --crate-type rlib foo.rs\n-\t$(RUSTC) --crate-type dylib bar.rs\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1 -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1 -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2 -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2 -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3 -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3 -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z -Z share-generics=yes"}, {"sha": "3895c0b6cdbb3d760b7df23c8934eca5da0210e8", "filename": "src/test/run-make-fulldeps/issue-64319/bar.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3d28a49209a21628fda0245b631e5fc3465be1a/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d28a49209a21628fda0245b631e5fc3465be1a/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs?ref=d3d28a49209a21628fda0245b631e5fc3465be1a", "patch": "@@ -1,5 +0,0 @@\n-extern crate foo;\n-\n-pub fn bar() {\n-    foo::foo();\n-}"}, {"sha": "c54a238e9add7f8ae13a1602df43d48467bf2b57", "filename": "src/test/run-make-fulldeps/issue-64319/foo.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3d28a49209a21628fda0245b631e5fc3465be1a/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d28a49209a21628fda0245b631e5fc3465be1a/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs?ref=d3d28a49209a21628fda0245b631e5fc3465be1a", "patch": "@@ -1,9 +0,0 @@\n-pub fn foo() {\n-    bar::<usize>();\n-}\n-\n-pub fn bar<T>() {\n-    baz();\n-}\n-\n-fn baz() {}"}, {"sha": "7901866015bf2ffa564a7a4b8e10ddb8961baeb4", "filename": "src/test/run-make-fulldeps/symbol-visibility/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d21f9b7fd6d4e41257bb4a6db64e9873767374dc/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile?ref=d21f9b7fd6d4e41257bb4a6db64e9873767374dc", "patch": "@@ -79,12 +79,12 @@ all:\n \t# Check that a Rust dylib exports its monomorphic functions, including generics this time\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"1\" ]\n \n \t# Check that a Rust dylib exports the monomorphic functions from its dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"1\" ]\n \n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]"}]}