{"sha": "745b1942925c53156389f3ea731c360e507f71eb", "node_id": "C_kwDOAAsO6NoAKDc0NWIxOTQyOTI1YzUzMTU2Mzg5ZjNlYTczMWMzNjBlNTA3ZjcxZWI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-08T01:44:32Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-08T01:55:10Z"}, "message": "Small cleanup for `check_proc_macro.rs`", "tree": {"sha": "f11984d89a17ceda86ae900b409747f1be294ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11984d89a17ceda86ae900b409747f1be294ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/745b1942925c53156389f3ea731c360e507f71eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/745b1942925c53156389f3ea731c360e507f71eb", "html_url": "https://github.com/rust-lang/rust/commit/745b1942925c53156389f3ea731c360e507f71eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/745b1942925c53156389f3ea731c360e507f71eb/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dda974a2753c0cf4d552e6054303376bc62c7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dda974a2753c0cf4d552e6054303376bc62c7bb", "html_url": "https://github.com/rust-lang/rust/commit/8dda974a2753c0cf4d552e6054303376bc62c7bb"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "0f00a1cdf0fa29a1b99c6cdeccb4c963c327e8b3", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/745b1942925c53156389f3ea731c360e507f71eb/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745b1942925c53156389f3ea731c360e507f71eb/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=745b1942925c53156389f3ea731c360e507f71eb", "patch": "@@ -24,11 +24,16 @@ use rustc_session::Session;\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::abi::Abi;\n \n+/// The search pattern to look for. Used by `span_matches_pat`\n #[derive(Clone, Copy)]\n pub enum Pat {\n+    /// A single string.\n     Str(&'static str),\n+    /// Any of the given strings.\n     MultiStr(&'static [&'static str]),\n+    /// The string representation of the symbol.\n     Sym(Symbol),\n+    /// Any decimal or hexadecimal digit depending on the location.\n     Num,\n }\n \n@@ -108,9 +113,9 @@ fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n         ExprKind::Box(e) => (Pat::Str(\"box\"), expr_search_pat(tcx, e).1),\n         ExprKind::ConstBlock(_) => (Pat::Str(\"const\"), Pat::Str(\"}\")),\n         ExprKind::Tup([]) => (Pat::Str(\")\"), Pat::Str(\"(\")),\n-        ExprKind::Unary(UnOp::Deref, _) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),\n-        ExprKind::Unary(UnOp::Not, _) => (Pat::Str(\"!\"), expr_search_pat(tcx, e).1),\n-        ExprKind::Unary(UnOp::Neg, _) => (Pat::Str(\"-\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Unary(UnOp::Not, e) => (Pat::Str(\"!\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Unary(UnOp::Neg, e) => (Pat::Str(\"-\"), expr_search_pat(tcx, e).1),\n         ExprKind::Lit(ref lit) => lit_search_pat(&lit.node),\n         ExprKind::Array(_) | ExprKind::Repeat(..) => (Pat::Str(\"[\"), Pat::Str(\"]\")),\n         ExprKind::Call(e, []) | ExprKind::MethodCall(_, [e], _) => (expr_search_pat(tcx, e).0, Pat::Str(\"(\")),\n@@ -154,6 +159,7 @@ fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n         ExprKind::Continue(Destination { label: None, .. }) => (Pat::Str(\"continue\"), Pat::Str(\"continue\")),\n         ExprKind::Continue(Destination { label: Some(name), .. }) => (Pat::Str(\"continue\"), Pat::Sym(name.ident.name)),\n         ExprKind::Ret(None) => (Pat::Str(\"return\"), Pat::Str(\"return\")),\n+        ExprKind::Ret(Some(e)) => (Pat::Str(\"return\"), expr_search_pat(tcx, e).1),\n         ExprKind::Struct(path, _, _) => (qpath_search_pat(path).0, Pat::Str(\"}\")),\n         ExprKind::Yield(e, YieldSource::Yield) => (Pat::Str(\"yield\"), expr_search_pat(tcx, e).1),\n         _ => (Pat::Str(\"\"), Pat::Str(\"\")),"}]}