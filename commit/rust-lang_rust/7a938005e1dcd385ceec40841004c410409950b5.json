{"sha": "7a938005e1dcd385ceec40841004c410409950b5", "node_id": "C_kwDOAAsO6NoAKDdhOTM4MDA1ZTFkY2QzODVjZWVjNDA4NDEwMDRjNDEwNDA5OTUwYjU", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-10-09T04:57:44Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-10-09T06:02:12Z"}, "message": "Add template for print_item\n\nAdd print_item.html and the code in print_item.rs to use it.", "tree": {"sha": "7ec7bfc6b2e5f0a314fd044d64ab6a768dc48a4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec7bfc6b2e5f0a314fd044d64ab6a768dc48a4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a938005e1dcd385ceec40841004c410409950b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a938005e1dcd385ceec40841004c410409950b5", "html_url": "https://github.com/rust-lang/rust/commit/7a938005e1dcd385ceec40841004c410409950b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a938005e1dcd385ceec40841004c410409950b5/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8751436ffce35cd1b7291b03b394166b77ff0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8751436ffce35cd1b7291b03b394166b77ff0da", "html_url": "https://github.com/rust-lang/rust/commit/f8751436ffce35cd1b7291b03b394166b77ff0da"}], "stats": {"total": 142, "additions": 96, "deletions": 46}, "files": [{"sha": "904a65b493104e51284a3d0e333dd3c5bdaaacf2", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=7a938005e1dcd385ceec40841004c410409950b5", "patch": "@@ -33,7 +33,7 @@ use crate::formats::FormatRenderer;\n use crate::html::escape::Escape;\n use crate::html::format::Buffer;\n use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n-use crate::html::static_files::PAGE;\n+use crate::html::static_files::{PAGE, PRINT_ITEM};\n use crate::html::{layout, sources};\n \n /// Major driving force in all rustdoc rendering. This contains information\n@@ -225,7 +225,7 @@ impl<'tcx> Context<'tcx> {\n                 &self.shared.layout,\n                 &page,\n                 |buf: &mut _| print_sidebar(self, it, buf),\n-                |buf: &mut _| print_item(self, it, buf, &page),\n+                |buf: &mut _| print_item(self, &self.shared.templates, it, buf, &page),\n                 &self.shared.style_files,\n             )\n         } else {\n@@ -422,6 +422,10 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             file: \"page.html\".into(),\n             error: format!(\"{}: {}\", e, e.source().map(|e| e.to_string()).unwrap_or_default()),\n         })?;\n+        templates.add_raw_template(\"print_item.html\", PRINT_ITEM).map_err(|e| Error {\n+            file: \"print_item.html\".into(),\n+            error: format!(\"{}: {}\", e, e.source().map(|e| e.to_string()).unwrap_or_default()),\n+        })?;\n \n         // Crawl the crate attributes looking for attributes which control how we're\n         // going to emit HTML"}, {"sha": "4cfc57ac99588d5aa859424438111c0a6a8c44f3", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 63, "deletions": 44, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7a938005e1dcd385ceec40841004c410409950b5", "patch": "@@ -32,16 +32,41 @@ use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n \n+use serde::Serialize;\n+\n const ITEM_TABLE_OPEN: &'static str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &'static str = \"</div>\";\n const ITEM_TABLE_ROW_OPEN: &'static str = \"<div class=\\\"item-row\\\">\";\n const ITEM_TABLE_ROW_CLOSE: &'static str = \"</div>\";\n \n-pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, page: &Page<'_>) {\n+// A component in a `use` path, like `string` in std::string::ToString\n+#[derive(Serialize)]\n+struct PathComponent<'a> {\n+    path: String,\n+    name: &'a str,\n+}\n+\n+#[derive(Serialize)]\n+struct ItemVars<'a> {\n+    page: &'a Page<'a>,\n+    static_root_path: &'a str,\n+    typ: &'a str,\n+    name: &'a str,\n+    item_type: &'a str,\n+    path_components: Vec<PathComponent<'a>>,\n+    stability_since_raw: &'a str,\n+    src_href: Option<&'a str>,\n+}\n+\n+pub(super) fn print_item(\n+    cx: &Context<'_>,\n+    templates: &tera::Tera,\n+    item: &clean::Item,\n+    buf: &mut Buffer,\n+    page: &Page<'_>,\n+) {\n     debug_assert!(!item.is_stripped());\n-    // Write the breadcrumb trail header for the top\n-    buf.write_str(\"<h1 class=\\\"fqn\\\"><span class=\\\"in-band\\\">\");\n-    let name = match *item.kind {\n+    let typ = match *item.kind {\n         clean::ModuleItem(_) => {\n             if item.is_crate() {\n                 \"Crate \"\n@@ -73,60 +98,54 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n             unreachable!();\n         }\n     };\n-    buf.write_str(name);\n-    if !item.is_primitive() && !item.is_keyword() {\n-        let cur = &cx.current;\n-        let amt = if item.is_mod() { cur.len() - 1 } else { cur.len() };\n-        for (i, component) in cur.iter().enumerate().take(amt) {\n-            write!(\n-                buf,\n-                \"<a href=\\\"{}index.html\\\">{}</a>::<wbr>\",\n-                \"../\".repeat(cur.len() - i - 1),\n-                component\n-            );\n-        }\n-    }\n-    write!(buf, \"<a class=\\\"{}\\\" href=\\\"#\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n-    write!(\n-        buf,\n-        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\" title=\\\"Copy item path to clipboard\\\">\\\n-            <img src=\\\"{static_root_path}clipboard{suffix}.svg\\\" \\\n-                width=\\\"19\\\" height=\\\"18\\\" \\\n-                alt=\\\"Copy item path\\\">\\\n-         </button>\",\n-        static_root_path = page.get_static_root_path(),\n-        suffix = page.resource_suffix,\n-    );\n-\n-    buf.write_str(\"</span>\"); // in-band\n-    buf.write_str(\"<span class=\\\"out-of-band\\\">\");\n+    let mut stability_since_raw = Buffer::new();\n     render_stability_since_raw(\n-        buf,\n+        &mut stability_since_raw,\n         item.stable_since(cx.tcx()).as_deref(),\n         item.const_stability(cx.tcx()),\n         None,\n         None,\n     );\n-    buf.write_str(\n-        \"<span id=\\\"render-detail\\\">\\\n-                <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n-                    title=\\\"collapse all docs\\\">\\\n-                    [<span class=\\\"inner\\\">&#x2212;</span>]\\\n-                </a>\\\n-            </span>\",\n-    );\n+    let stability_since_raw: String = stability_since_raw.into_inner();\n \n     // Write `src` tag\n     //\n     // When this item is part of a `crate use` in a downstream crate, the\n     // [src] link in the downstream documentation will actually come back to\n     // this page, and this link will be auto-clicked. The `id` attribute is\n     // used to find the link to auto-click.\n-    if cx.include_sources && !item.is_primitive() {\n-        write_srclink(cx, item, buf);\n-    }\n+    let src_href =\n+        if cx.include_sources && !item.is_primitive() { cx.src_href(item) } else { None };\n+\n+    let path_components = if item.is_primitive() || item.is_keyword() {\n+        vec![]\n+    } else {\n+        let cur = &cx.current;\n+        let amt = if item.is_mod() { cur.len() - 1 } else { cur.len() };\n+        cur.iter()\n+            .enumerate()\n+            .take(amt)\n+            .map(|(i, component)| PathComponent {\n+                path: \"../\".repeat(cur.len() - i - 1),\n+                name: component,\n+            })\n+            .collect()\n+    };\n+\n+    let item_vars = ItemVars {\n+        page: page,\n+        static_root_path: page.get_static_root_path(),\n+        typ: typ,\n+        name: &item.name.as_ref().unwrap().as_str(),\n+        item_type: &item.type_().to_string(),\n+        path_components: path_components,\n+        stability_since_raw: &stability_since_raw,\n+        src_href: src_href.as_deref(),\n+    };\n \n-    buf.write_str(\"</span></h1>\"); // out-of-band\n+    let teractx = tera::Context::from_serialize(item_vars).unwrap();\n+    let heading = templates.render(\"print_item.html\", &teractx).unwrap();\n+    buf.write_str(&heading);\n \n     match *item.kind {\n         clean::ModuleItem(ref m) => item_module(buf, cx, item, &m.items),"}, {"sha": "a498bd2d7f93894a47ef8df6ddee6916600b3bc3", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=7a938005e1dcd385ceec40841004c410409950b5", "patch": "@@ -71,6 +71,7 @@ crate static RUST_FAVICON_PNG_16: &[u8] = include_bytes!(\"static/images/favicon-\n crate static RUST_FAVICON_PNG_32: &[u8] = include_bytes!(\"static/images/favicon-32x32.png\");\n \n crate static PAGE: &str = include_str!(\"templates/page.html\");\n+crate static PRINT_ITEM: &str = include_str!(\"templates/print_item.html\");\n \n /// The built-in themes given to every documentation site.\n crate mod themes {"}, {"sha": "67a7934e399f6d75987a4093444903fa283079e8", "filename": "src/librustdoc/html/templates/print_item.html", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/7a938005e1dcd385ceec40841004c410409950b5/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=7a938005e1dcd385ceec40841004c410409950b5", "patch": "@@ -0,0 +1,26 @@\n+<h1 class=\"fqn\"> {#- -#}\n+    <span class=\"in-band\"> {#- -#}\n+        {{-typ-}}\n+        {#- The breadcrumbs of the item path, like std::string -#}\n+        {%- for component in path_components -%}\n+        <a href=\"{{component.path | safe}}index.html\">{{component.name}}</a>::<wbr>\n+        {%- endfor -%}\n+        <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n+        <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n+            <img src=\"{{static_root_path | safe}}clipboard{{page.resource_suffix}}.svg\"\n+                width=\"19\" height=\"18\"\n+                alt=\"Copy item path\">\n+        </button> {#- -#}\n+    </span> {#- -#}\n+    <span class=\"out-of-band\"> {#- -#}\n+        {{- stability_since_raw | safe -}}\n+        <span id=\"render-detail\"> {#- -#}\n+            <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\"> {#- -#}\n+                [<span class=\"inner\">&#x2212;</span>] {#- -#}\n+            </a> {#- -#}\n+        </span> {#- -#}\n+        {%- if src_href -%}\n+        <a class=\"srclink\" href=\"{{src_href | safe}}\" title=\"goto source code\">[src]</a>\n+        {%- endif -%}\n+    </span> {#- -#}\n+</h1> {#- -#}"}]}