{"sha": "97e9299a1024fcce1875f90b872194dae55f1329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZTkyOTlhMTAyNGZjY2UxODc1ZjkwYjg3MjE5NGRhZTU1ZjEzMjk=", "commit": {"author": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T21:26:41Z"}, "committer": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T21:26:41Z"}, "message": "fixed array bounds checking", "tree": {"sha": "424ce540681cfafb04f8ea6fd49c64d4317d441c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424ce540681cfafb04f8ea6fd49c64d4317d441c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97e9299a1024fcce1875f90b872194dae55f1329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97e9299a1024fcce1875f90b872194dae55f1329", "html_url": "https://github.com/rust-lang/rust/commit/97e9299a1024fcce1875f90b872194dae55f1329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97e9299a1024fcce1875f90b872194dae55f1329/comments", "author": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57f21945bfbff83293a7d495d53faebc449a0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57f21945bfbff83293a7d495d53faebc449a0a7", "html_url": "https://github.com/rust-lang/rust/commit/a57f21945bfbff83293a7d495d53faebc449a0a7"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "a0c11bbb4ab0f7a30181cea898812360ba4b15d5", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97e9299a1024fcce1875f90b872194dae55f1329/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e9299a1024fcce1875f90b872194dae55f1329/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=97e9299a1024fcce1875f90b872194dae55f1329", "patch": "@@ -38,11 +38,16 @@ impl LateLintPass for OkIfLetPass {\n             let MatchSource::IfLetDesugar { .. } = *source, //test if it is an If Let\n             let ExprMethodCall(_, _, ref result_types) = op.node, //check is expr.ok() has type Result<T,E>.ok()\n             let PatKind::TupleStruct(ref x, ref y, _)  = body[0].pats[0].node, //get operation\n-            let Some(some_expr_string) = snippet_opt(cx, y[0].span),\n             let Some(_) = method_chain_args(op, &[\"ok\"]) //test to see if using ok() methoduse std::marker::Sized;\n \n         ], {\n             let is_result_type = match_type(cx, cx.tcx.expr_ty(&result_types[0]), &paths::RESULT);\n+            let mut some_expr_string = String::from(\"\");\n+            if y.len() > 0 {\n+                if let Some(x) = snippet_opt(cx, y[0].span) {\n+                    some_expr_string = x;\n+                }\n+            }\n             if print::path_to_string(x) == \"Some\" && is_result_type {\n                 span_help_and_lint(cx, IF_LET_SOME_RESULT, expr.span,\n                 \"Matching on `Some` with `ok()` is redundant\","}]}