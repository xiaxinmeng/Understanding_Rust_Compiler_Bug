{"sha": "1d262cd71317709000c63d8e7e899b46f9aa33a5", "node_id": "C_kwDOAAsO6NoAKDFkMjYyY2Q3MTMxNzcwOTAwMGM2M2Q4ZTdlODk5YjQ2ZjlhYTMzYTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-09T13:51:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T13:51:24Z"}, "message": "Rollup merge of #103952 - ehuss:dont-intra-linkcheck-reference, r=Mark-Simulacrum\n\nDon't intra linkcheck reference\n\nThis removes the reference from the intra-doc link checks. This causes problems if any of the reference content needs to change, it causes the linkchecker to break. The reference has its own broken link check (https://github.com/rust-lang/reference/tree/master/style-check) which uses pulldown-cmark on the source to find actual broken links (instead of false-positives like this regex does).\n\nI think the intra-doc link check could potentially be removed completely, since I think rustdoc is now checking for them well enough. However, it may serve as a decent regression check.", "tree": {"sha": "91021618ad14f9799b6a3bf7a5209769ce22865e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91021618ad14f9799b6a3bf7a5209769ce22865e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d262cd71317709000c63d8e7e899b46f9aa33a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJja7BcCRBK7hj4Ov3rIwAA444IAFhM1z0ilUtx20N1CSn4NBko\n9CoHWyGXXef2D5O2fVt22O4qQD8zEkKK7EhNmbNGsxapQaN3KvXzsVmTvWWCs5DS\nIcZ7nLUoJ6vp2FLlLUXj6FrDr+g6B47MiOrTpPevCR3QcjKhGNAPqJ2fZC1A4P9S\n+TlH6W/KMlBlqEoLrQt7YR7XPTKNuQsYCsBCfSmpyL9XbSHoSmN0u8CPk8bCEJZp\nGC9JIhFP09XjnTqecxwDV4O81NmBjrt2uAmJcrdAcrP7mnBWwQC6qzIaUhdNzzAu\naLx70vOQq6WQUmEkRZrKW/ekXFeA0vf+0hfXwsUwN6WjvFHdZ3C882ZOl7WkVt8=\n=DZTS\n-----END PGP SIGNATURE-----\n", "payload": "tree 91021618ad14f9799b6a3bf7a5209769ce22865e\nparent 2313d32c36db3cd29b34e5db99a8b1812ee52c04\nparent 57b229086e274c21e5544e6719271ae79a952194\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1668001884 +0530\ncommitter GitHub <noreply@github.com> 1668001884 +0530\n\nRollup merge of #103952 - ehuss:dont-intra-linkcheck-reference, r=Mark-Simulacrum\n\nDon't intra linkcheck reference\n\nThis removes the reference from the intra-doc link checks. This causes problems if any of the reference content needs to change, it causes the linkchecker to break. The reference has its own broken link check (https://github.com/rust-lang/reference/tree/master/style-check) which uses pulldown-cmark on the source to find actual broken links (instead of false-positives like this regex does).\n\nI think the intra-doc link check could potentially be removed completely, since I think rustdoc is now checking for them well enough. However, it may serve as a decent regression check.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d262cd71317709000c63d8e7e899b46f9aa33a5", "html_url": "https://github.com/rust-lang/rust/commit/1d262cd71317709000c63d8e7e899b46f9aa33a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d262cd71317709000c63d8e7e899b46f9aa33a5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2313d32c36db3cd29b34e5db99a8b1812ee52c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/2313d32c36db3cd29b34e5db99a8b1812ee52c04", "html_url": "https://github.com/rust-lang/rust/commit/2313d32c36db3cd29b34e5db99a8b1812ee52c04"}, {"sha": "57b229086e274c21e5544e6719271ae79a952194", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b229086e274c21e5544e6719271ae79a952194", "html_url": "https://github.com/rust-lang/rust/commit/57b229086e274c21e5544e6719271ae79a952194"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "4170c32f1fe253350e5bed1e1881f0dfb0131f64", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1d262cd71317709000c63d8e7e899b46f9aa33a5/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d262cd71317709000c63d8e7e899b46f9aa33a5/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=1d262cd71317709000c63d8e7e899b46f9aa33a5", "patch": "@@ -55,30 +55,6 @@ const LINKCHECK_EXCEPTIONS: &[(&str, &[&str])] = &[\n \n #[rustfmt::skip]\n const INTRA_DOC_LINK_EXCEPTIONS: &[(&str, &[&str])] = &[\n-    // This will never have links that are not in other pages.\n-    // To avoid repeating the exceptions twice, an empty list means all broken links are allowed.\n-    (\"reference/print.html\", &[]),\n-    // All the reference 'links' are actually ENBF highlighted as code\n-    (\"reference/comments.html\", &[\n-         \"/</code> <code>!\",\n-         \"*</code> <code>!\",\n-    ]),\n-    (\"reference/identifiers.html\", &[\n-         \"a</code>-<code>z</code> <code>A</code>-<code>Z\",\n-         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n-         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code>]\u00a0[<code>a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n-    ]),\n-    (\"reference/tokens.html\", &[\n-         \"0</code>-<code>1\",\n-         \"0</code>-<code>7\",\n-         \"0</code>-<code>9\",\n-         \"0</code>-<code>9\",\n-         \"0</code>-<code>9</code> <code>a</code>-<code>f</code> <code>A</code>-<code>F\",\n-    ]),\n-    (\"reference/notation.html\", &[\n-         \"b</code> <code>B\",\n-         \"a</code>-<code>z\",\n-    ]),\n     // This is being used in the sense of 'inclusive range', not a markdown link\n     (\"core/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n     (\"std/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n@@ -365,6 +341,33 @@ impl Checker {\n             }\n         });\n \n+        self.check_intra_doc_links(file, &pretty_path, &source, report);\n+\n+        // we don't need the source anymore,\n+        // so drop to reduce memory-usage\n+        match self.cache.get_mut(&pretty_path).unwrap() {\n+            FileEntry::HtmlFile { source, .. } => *source = Rc::new(String::new()),\n+            _ => unreachable!(\"must be html file\"),\n+        }\n+    }\n+\n+    fn check_intra_doc_links(\n+        &mut self,\n+        file: &Path,\n+        pretty_path: &str,\n+        source: &str,\n+        report: &mut Report,\n+    ) {\n+        let relative = file.strip_prefix(&self.root).expect(\"should always be relative to root\");\n+        // Don't check the reference. It has several legitimate things that\n+        // look like [<code>\u2026</code>]. The reference has its own broken link\n+        // checker in its CI which handles this using pulldown_cmark.\n+        //\n+        // This checks both the end of the root (when checking just the\n+        // reference directory) or the beginning (when checking all docs).\n+        if self.root.ends_with(\"reference\") || relative.starts_with(\"reference\") {\n+            return;\n+        }\n         // Search for intra-doc links that rustdoc didn't warn about\n         // FIXME(#77199, 77200) Rustdoc should just warn about these directly.\n         // NOTE: only looks at one line at a time; in practice this should find most links\n@@ -379,12 +382,6 @@ impl Checker {\n                 }\n             }\n         }\n-        // we don't need the source anymore,\n-        // so drop to reduce memory-usage\n-        match self.cache.get_mut(&pretty_path).unwrap() {\n-            FileEntry::HtmlFile { source, .. } => *source = Rc::new(String::new()),\n-            _ => unreachable!(\"must be html file\"),\n-        }\n     }\n \n     /// Load a file from disk, or from the cache if available."}]}