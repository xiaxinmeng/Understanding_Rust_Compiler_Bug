{"sha": "0d9afb67174131c16ca111dc368d342d120824e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOWFmYjY3MTc0MTMxYzE2Y2ExMTFkYzM2OGQzNDJkMTIwODI0ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T00:59:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T00:59:12Z"}, "message": "Auto merge of #77133 - tmandry:bootstrap-host, r=Mark-Simulacrum\n\nbootstrap: Always build for host, even when target is given\n\nThis changes the behavior from *not* building for host whenever an\nexplicit target is specified. I find this much less confusing.\n\nYou can still disable host steps by passing an explicit empty list for\nhost.\n\nFixes #76990.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "e8428c28cade0bd231ddce652c84e0d4879b4b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8428c28cade0bd231ddce652c84e0d4879b4b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d9afb67174131c16ca111dc368d342d120824e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9afb67174131c16ca111dc368d342d120824e2", "html_url": "https://github.com/rust-lang/rust/commit/0d9afb67174131c16ca111dc368d342d120824e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d9afb67174131c16ca111dc368d342d120824e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d97f7a96877a96015d70ece41ad08bb7af12377", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d97f7a96877a96015d70ece41ad08bb7af12377", "html_url": "https://github.com/rust-lang/rust/commit/0d97f7a96877a96015d70ece41ad08bb7af12377"}, {"sha": "bf7aeaa617e309c31e6d28a469ea6092e28393df", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7aeaa617e309c31e6d28a469ea6092e28393df", "html_url": "https://github.com/rust-lang/rust/commit/bf7aeaa617e309c31e6d28a469ea6092e28393df"}], "stats": {"total": 138, "additions": 52, "deletions": 86}, "files": [{"sha": "fe426c4cec768a2fce37e148c6b47d4bfef4ecf7", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -6,6 +6,15 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n ## [Non-breaking changes since the last major version]\n \n+None.\n+\n+## [Version 2] - 2020-09-25\n+\n+- `host` now defaults to the value of `build` in all cases\n+  + Previously `host` defaulted to an empty list when `target` was overridden, and to `build` otherwise\n+\n+### Non-breaking changes\n+\n - Add `x.py setup` [#76631](https://github.com/rust-lang/rust/pull/76631)\n - Add a changelog for x.py [#76626](https://github.com/rust-lang/rust/pull/76626)\n - Optionally, download LLVM from CI on Linux and NixOS\n@@ -21,7 +30,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n   [#77120](https://github.com/rust-lang/rust/pull/77120).\n \n \n-## [Version 0] - 2020-09-11\n+## [Version 1] - 2020-09-11\n \n This is the first changelog entry, and it does not attempt to be an exhaustive list of features in x.py.\n Instead, this documents the changes to bootstrap in the past 2 months."}, {"sha": "d31f95ee5e94c5bf8a75a7d1f6dc606846740189", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -40,7 +40,7 @@ fn main() {\n }\n \n fn check_version(config: &Config) -> Option<String> {\n-    const VERSION: usize = 1;\n+    const VERSION: usize = 2;\n \n     let mut msg = String::new();\n "}, {"sha": "4beeb9c87c4fde54ab7ca9527bf7fe90db7bd7f0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -172,15 +172,7 @@ impl StepDescription {\n         }\n \n         // Determine the targets participating in this rule.\n-        let targets = if self.only_hosts {\n-            if builder.config.skip_only_host_steps {\n-                return; // don't run anything\n-            } else {\n-                &builder.hosts\n-            }\n-        } else {\n-            &builder.targets\n-        };\n+        let targets = if self.only_hosts { &builder.hosts } else { &builder.targets };\n \n         for target in targets {\n             let run = RunConfig { builder, path: pathset.path(builder), target: *target };"}, {"sha": "a367aa53496677e30c3a4ff1415cfa57bf428b62", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 24, "deletions": 52, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -6,7 +6,6 @@ fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n     let mut config = Config::parse(&[cmd.to_owned()]);\n     // don't save toolstates\n     config.save_toolstates = None;\n-    config.skip_only_host_steps = false;\n     config.dry_run = true;\n     config.ninja_in_file = false;\n     // try to avoid spurious failures in dist where we create/delete each others file\n@@ -20,16 +19,8 @@ fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n     t!(fs::create_dir_all(&dir));\n     config.out = dir;\n     config.build = TargetSelection::from_user(\"A\");\n-    config.hosts = vec![config.build]\n-        .into_iter()\n-        .chain(host.iter().map(|s| TargetSelection::from_user(s)))\n-        .collect::<Vec<_>>();\n-    config.targets = config\n-        .hosts\n-        .clone()\n-        .into_iter()\n-        .chain(target.iter().map(|s| TargetSelection::from_user(s)))\n-        .collect::<Vec<_>>();\n+    config.hosts = host.iter().map(|s| TargetSelection::from_user(s)).collect();\n+    config.targets = target.iter().map(|s| TargetSelection::from_user(s)).collect();\n     config\n }\n \n@@ -45,7 +36,7 @@ mod defaults {\n \n     #[test]\n     fn build_default() {\n-        let build = Build::new(configure(\"build\", &[], &[]));\n+        let build = Build::new(configure(\"build\", &[\"A\"], &[\"A\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n \n@@ -73,7 +64,7 @@ mod defaults {\n \n     #[test]\n     fn build_stage_0() {\n-        let config = Config { stage: 0, ..configure(\"build\", &[], &[]) };\n+        let config = Config { stage: 0, ..configure(\"build\", &[\"A\"], &[\"A\"]) };\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n@@ -95,7 +86,7 @@ mod defaults {\n \n     #[test]\n     fn build_cross_compile() {\n-        let config = Config { stage: 1, ..configure(\"build\", &[\"B\"], &[\"B\"]) };\n+        let config = Config { stage: 1, ..configure(\"build\", &[\"A\", \"B\"], &[\"A\", \"B\"]) };\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n@@ -143,7 +134,7 @@ mod defaults {\n \n     #[test]\n     fn doc_default() {\n-        let mut config = configure(\"doc\", &[], &[]);\n+        let mut config = configure(\"doc\", &[\"A\"], &[\"A\"]);\n         config.compiler_docs = true;\n         config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n         let build = Build::new(config);\n@@ -182,7 +173,7 @@ mod dist {\n \n     #[test]\n     fn dist_baseline() {\n-        let build = Build::new(configure(&[], &[]));\n+        let build = Build::new(configure(&[\"A\"], &[\"A\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -208,7 +199,7 @@ mod dist {\n \n     #[test]\n     fn dist_with_targets() {\n-        let build = Build::new(configure(&[], &[\"B\"]));\n+        let build = Build::new(configure(&[\"A\"], &[\"A\", \"B\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -239,7 +230,7 @@ mod dist {\n \n     #[test]\n     fn dist_with_hosts() {\n-        let build = Build::new(configure(&[\"B\"], &[]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -285,7 +276,7 @@ mod dist {\n     fn dist_only_cross_host() {\n         let a = TargetSelection::from_user(\"A\");\n         let b = TargetSelection::from_user(\"B\");\n-        let mut build = Build::new(configure(&[\"B\"], &[]));\n+        let mut build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n         build.config.docs = false;\n         build.config.extended = true;\n         build.hosts = vec![b];\n@@ -307,7 +298,7 @@ mod dist {\n \n     #[test]\n     fn dist_with_targets_and_hosts() {\n-        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\", \"C\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -342,40 +333,26 @@ mod dist {\n     }\n \n     #[test]\n-    fn dist_with_target_flag() {\n-        let mut config = configure(&[\"B\"], &[\"C\"]);\n-        config.skip_only_host_steps = true; // as-if --target=C was passed\n+    fn dist_with_empty_host() {\n+        let config = configure(&[], &[\"C\"]);\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n         let a = TargetSelection::from_user(\"A\");\n-        let b = TargetSelection::from_user(\"B\");\n         let c = TargetSelection::from_user(\"C\");\n \n-        assert_eq!(\n-            first(builder.cache.all::<dist::Docs>()),\n-            &[dist::Docs { host: a }, dist::Docs { host: b }, dist::Docs { host: c },]\n-        );\n-        assert_eq!(\n-            first(builder.cache.all::<dist::Mingw>()),\n-            &[dist::Mingw { host: a }, dist::Mingw { host: b }, dist::Mingw { host: c },]\n-        );\n-        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[]);\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[dist::Docs { host: c },]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[dist::Mingw { host: c },]);\n         assert_eq!(\n             first(builder.cache.all::<dist::Std>()),\n-            &[\n-                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-                dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-            ]\n+            &[dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },]\n         );\n-        assert_eq!(first(builder.cache.all::<dist::Src>()), &[]);\n     }\n \n     #[test]\n     fn dist_with_same_targets_and_hosts() {\n-        let build = Build::new(configure(&[\"B\"], &[\"B\"]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n@@ -428,7 +405,7 @@ mod dist {\n \n     #[test]\n     fn build_all() {\n-        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let build = Build::new(configure(&[\"A\", \"B\"], &[\"A\", \"B\", \"C\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(\n             &Builder::get_step_descriptions(Kind::Build),\n@@ -464,25 +441,20 @@ mod dist {\n     }\n \n     #[test]\n-    fn build_with_target_flag() {\n-        let mut config = configure(&[\"B\"], &[\"C\"]);\n-        config.skip_only_host_steps = true;\n+    fn build_with_empty_host() {\n+        let config = configure(&[], &[\"C\"]);\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n \n         let a = TargetSelection::from_user(\"A\");\n-        let b = TargetSelection::from_user(\"B\");\n         let c = TargetSelection::from_user(\"C\");\n \n         assert_eq!(\n             first(builder.cache.all::<compile::Std>()),\n             &[\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n             ]\n         );\n@@ -505,7 +477,7 @@ mod dist {\n \n     #[test]\n     fn test_with_no_doc_stage0() {\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.stage = 0;\n         config.cmd = Subcommand::Test {\n             paths: vec![\"library/std\".into()],\n@@ -545,7 +517,7 @@ mod dist {\n \n     #[test]\n     fn test_exclude() {\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.exclude = vec![\"src/tools/tidy\".into()];\n         config.cmd = Subcommand::Test {\n             paths: Vec::new(),\n@@ -572,7 +544,7 @@ mod dist {\n \n     #[test]\n     fn doc_ci() {\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.compiler_docs = true;\n         config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n         let build = Build::new(config);\n@@ -601,7 +573,7 @@ mod dist {\n     #[test]\n     fn test_docs() {\n         // Behavior of `x.py test` doing various documentation tests.\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.cmd = Subcommand::Test {\n             paths: vec![],\n             test_args: vec![],"}, {"sha": "9c6b88243e245bb0336ab7c58c9183c760c0e8e3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -66,8 +66,6 @@ pub struct Config {\n     pub test_compare_mode: bool,\n     pub llvm_libunwind: bool,\n \n-    pub skip_only_host_steps: bool,\n-\n     pub on_fail: Option<String>,\n     pub stage: u32,\n     pub keep_stage: Vec<u32>,\n@@ -586,11 +584,6 @@ impl Config {\n \n         let build = toml.build.unwrap_or_default();\n \n-        // If --target was specified but --host wasn't specified, don't run any host-only tests.\n-        let has_hosts = build.host.is_some() || flags.host.is_some();\n-        let has_targets = build.target.is_some() || flags.target.is_some();\n-        config.skip_only_host_steps = !has_hosts && has_targets;\n-\n         config.hosts = if let Some(arg_host) = flags.host {\n             arg_host\n         } else if let Some(file_host) = build.host {"}, {"sha": "795244e7cd4a486c04ca9600a35b0f3e246ede7f", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -679,7 +679,7 @@ impl Subcommand {\n }\n \n fn split(s: &[String]) -> Vec<String> {\n-    s.iter().flat_map(|s| s.split(',')).map(|s| s.to_string()).collect()\n+    s.iter().flat_map(|s| s.split(',')).filter(|s| !s.is_empty()).map(|s| s.to_string()).collect()\n }\n \n fn parse_deny_warnings(matches: &getopts::Matches) -> Option<bool> {"}, {"sha": "f675252fb169df3b0bf4a0064d5d1701f46f9dcb", "filename": "src/ci/docker/host-x86_64/arm-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -31,7 +31,7 @@ ENV TARGETS=arm-linux-androideabi\n \n ENV RUST_CONFIGURE_ARGS --arm-linux-androideabi-ndk=/android/ndk/arm-14\n \n-ENV SCRIPT python3 ../x.py --stage 2 test --target $TARGETS\n+ENV SCRIPT python3 ../x.py --stage 2 test --host='' --target $TARGETS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "9fb5faf3ee0f472223cd4ec6b52f2624ae0c8756", "filename": "src/ci/docker/host-x86_64/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -79,6 +79,6 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --qemu-armhf-rootfs=/tmp/rootfs\n-ENV SCRIPT python3 ../x.py --stage 2 test --target arm-unknown-linux-gnueabihf\n+ENV SCRIPT python3 ../x.py --stage 2 test --host='' --target arm-unknown-linux-gnueabihf\n \n ENV NO_CHANGE_USER=1"}, {"sha": "e04f6409f54feb94ccac38ac2ee32464a4e5722a", "filename": "src/ci/docker/host-x86_64/disabled/asmjs/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fasmjs%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -34,7 +34,7 @@ ENV EMCC_CFLAGS=-O1\n # Emscripten installation is user-specific\n ENV NO_CHANGE_USER=1\n \n-ENV SCRIPT python3 ../x.py --stage 2 test --target $TARGETS\n+ENV SCRIPT python3 ../x.py --stage 2 test --host='' --target $TARGETS\n \n # This is almost identical to the wasm32-unknown-emscripten target, so\n # running with assertions again is not useful"}, {"sha": "e9188b42f5d75bb30ebe722b813c5c35482c8241", "filename": "src/ci/docker/host-x86_64/disabled/dist-x86_64-redox/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -19,4 +19,4 @@ ENV \\\n     CXX_x86_64_unknown_redox=x86_64-unknown-redox-g++\n \n ENV RUST_CONFIGURE_ARGS --enable-extended\n-ENV SCRIPT python3 ../x.py dist --target x86_64-unknown-redox\n+ENV SCRIPT python3 ../x.py dist --host='' --target x86_64-unknown-redox"}, {"sha": "258dcea06e6dcb658d0ea19282281147c7349da5", "filename": "src/ci/docker/host-x86_64/dist-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -32,7 +32,7 @@ ENV RUST_CONFIGURE_ARGS \\\n       --x86_64-linux-android-ndk=/android/ndk/x86_64-21 \\\n       --disable-docs\n \n-ENV SCRIPT python3 ../x.py dist --target $TARGETS\n+ENV SCRIPT python3 ../x.py dist --host='' --target $TARGETS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "c734202eef642e1e70bef8bcc235eba60f8ae5b6", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -47,5 +47,5 @@ ENV CFLAGS_i586_unknown_linux_musl=-Wa,-mrelax-relocations=no\n ENV TARGETS=i586-unknown-linux-gnu,i686-unknown-linux-musl\n \n ENV SCRIPT \\\n-      python3 ../x.py --stage 2 test --target $TARGETS && \\\n-      python3 ../x.py dist --target $TARGETS,i586-unknown-linux-musl\n+      python3 ../x.py --stage 2 test --host='' --target $TARGETS && \\\n+      python3 ../x.py dist --host='' --target $TARGETS,i586-unknown-linux-musl"}, {"sha": "104b608529ca151db3eb6e91a3231aaa016f3ae8", "filename": "src/ci/docker/host-x86_64/dist-various-1/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -187,8 +187,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --disable-docs\n \n ENV SCRIPT \\\n-      python3 ../x.py --stage 2 test --target $RUN_MAKE_TARGETS src/test/run-make && \\\n-      python3 ../x.py dist --target $TARGETS\n+      python3 ../x.py --stage 2 test --host='' --target $RUN_MAKE_TARGETS src/test/run-make && \\\n+      python3 ../x.py dist --host='' --target $TARGETS\n \n # sccache\n COPY scripts/sccache.sh /scripts/"}, {"sha": "47a66f748087c555d463238e8d08d0119099434a", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -110,4 +110,4 @@ ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs \\\n   --set target.wasm32-wasi.wasi-root=/wasm32-wasi \\\n   --musl-root-armv7=/musl-armv7\n \n-ENV SCRIPT python3 ../x.py dist --target $TARGETS\n+ENV SCRIPT python3 ../x.py dist --host='' --target $TARGETS"}, {"sha": "8653aecc12c547bb70ce636ffeee783cfb4774dd", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -41,7 +41,7 @@ ENV RUST_CONFIGURE_ARGS \\\n ENV NO_DEBUG_ASSERTIONS=1\n \n ENV WASM_TARGETS=wasm32-unknown-unknown\n-ENV WASM_SCRIPT python3 /checkout/x.py --stage 2 test --target $WASM_TARGETS \\\n+ENV WASM_SCRIPT python3 /checkout/x.py --stage 2 test --host='' --target $WASM_TARGETS \\\n   src/test/run-make \\\n   src/test/ui \\\n   src/test/compile-fail \\\n@@ -50,13 +50,13 @@ ENV WASM_SCRIPT python3 /checkout/x.py --stage 2 test --target $WASM_TARGETS \\\n   library/core\n \n ENV NVPTX_TARGETS=nvptx64-nvidia-cuda\n-ENV NVPTX_SCRIPT python3 /checkout/x.py --stage 2 test --target $NVPTX_TARGETS \\\n+ENV NVPTX_SCRIPT python3 /checkout/x.py --stage 2 test --host='' --target $NVPTX_TARGETS \\\n   src/test/run-make \\\n   src/test/assembly\n \n ENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n     CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc \\\n     CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++\n-ENV MUSL_SCRIPT python3 /checkout/x.py --stage 2 test --target $MUSL_TARGETS\n+ENV MUSL_SCRIPT python3 /checkout/x.py --stage 2 test --host='' --target $MUSL_TARGETS\n \n ENV SCRIPT $WASM_SCRIPT && $NVPTX_SCRIPT && $MUSL_SCRIPT"}, {"sha": "096b66453461e42931c7a018e6051fda447c8797", "filename": "src/ci/docker/host-x86_64/wasm32/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fwasm32%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -53,7 +53,7 @@ ENV NO_CHANGE_USER=1\n \n # FIXME: Re-enable these tests once https://github.com/rust-lang/cargo/pull/7476\n # is picked up by CI\n-ENV SCRIPT python3 ../x.py test --stage 2 --target $TARGETS \\\n+ENV SCRIPT python3 ../x.py test --stage 2 --host='' --target $TARGETS \\\n     --exclude library/core \\\n     --exclude library/alloc \\\n     --exclude library/proc_macro \\"}, {"sha": "34c6396b7b59fe32c90e25be429556ba0ad9dac5", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-8/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-8%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0d9afb67174131c16ca111dc368d342d120824e2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-8%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-8%2FDockerfile?ref=0d9afb67174131c16ca111dc368d342d120824e2", "patch": "@@ -45,7 +45,7 @@ ENV SCRIPT python2.7 ../x.py --stage 2 test --exclude src/tools/tidy && \\\n            # on the `x86_64` host when they're built as `armv5te` binaries.\n            # (we're only interested in the MIR output, so this doesn't matter)\n            python2.7 ../x.py --stage 2 test src/test/mir-opt --pass=build \\\n-                                  --target=armv5te-unknown-linux-gnueabi && \\\n+                             --host='' --target=armv5te-unknown-linux-gnueabi && \\\n            # Run the UI test suite again, but in `--pass=check` mode\n            #\n            # This is intended to make sure that both `--pass=check` continues to"}]}