{"sha": "310f2deb99a95bae63173f8f972a1f91f2138ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMGYyZGViOTlhOTViYWU2MzE3M2Y4Zjk3MmExZjkxZjIxMzhjYTM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-10T09:18:42Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-10T15:42:30Z"}, "message": "implement Box<[T]> <-> Vec<T> conversions", "tree": {"sha": "0035502af60e67b7d6e70cea778e9fc699985700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0035502af60e67b7d6e70cea778e9fc699985700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/310f2deb99a95bae63173f8f972a1f91f2138ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/310f2deb99a95bae63173f8f972a1f91f2138ca3", "html_url": "https://github.com/rust-lang/rust/commit/310f2deb99a95bae63173f8f972a1f91f2138ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/310f2deb99a95bae63173f8f972a1f91f2138ca3/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0075c2762626d42a2b3036e0664f1372e1b143f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0075c2762626d42a2b3036e0664f1372e1b143f4", "html_url": "https://github.com/rust-lang/rust/commit/0075c2762626d42a2b3036e0664f1372e1b143f4"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "138bc63737ed0ca5482a9cd9b1124581481a9361", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/310f2deb99a95bae63173f8f972a1f91f2138ca3/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310f2deb99a95bae63173f8f972a1f91f2138ca3/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=310f2deb99a95bae63173f8f972a1f91f2138ca3", "patch": "@@ -87,6 +87,7 @@\n \n #![doc(primitive = \"slice\")]\n \n+use alloc::boxed::Box;\n use core::cmp;\n use core::mem::size_of;\n use core::mem;\n@@ -298,6 +299,23 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     fn into_vec(self) -> Vec<T> { self.to_vec() }\n }\n \n+#[experimental]\n+pub trait BoxedSlice<T> {\n+    /// Convert `self` into a vector without clones or allocation.\n+    fn into_vec(self) -> Vec<T>;\n+}\n+\n+impl<T> BoxedSlice<T> for Box<[T]> {\n+    #[experimental]\n+    fn into_vec(mut self) -> Vec<T> {\n+        unsafe {\n+            let xs = Vec::from_raw_parts(self.len(), self.len(), self.as_mut_ptr());\n+            mem::forget(self);\n+            xs\n+        }\n+    }\n+}\n+\n /// Extension methods for vectors containing `Clone` elements.\n pub trait ImmutableCloneableVector<T> {\n     /// Partitions the vector into two vectors `(a, b)`, where all\n@@ -2308,6 +2326,13 @@ mod tests {\n         let y: &mut [int] = [];\n         assert!(y.last_mut().is_none());\n     }\n+\n+    #[test]\n+    fn test_into_vec() {\n+        let xs = box [1u, 2, 3];\n+        let ys = xs.into_vec();\n+        assert_eq!(ys.as_slice(), [1u, 2, 3]);\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "d0105e3b24ab38c73a4eb3d6f8b7d8771fa0236d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/310f2deb99a95bae63173f8f972a1f91f2138ca3/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310f2deb99a95bae63173f8f972a1f91f2138ca3/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=310f2deb99a95bae63173f8f972a1f91f2138ca3", "patch": "@@ -14,6 +14,7 @@\n \n use core::prelude::*;\n \n+use alloc::boxed::Box;\n use alloc::heap::{EMPTY, allocate, reallocate, deallocate};\n use core::cmp::max;\n use core::default::Default;\n@@ -757,6 +758,20 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Convert the vector into Box<[T]>.\n+    ///\n+    /// Note that this will drop any excess capacity. Calling this and converting back to a vector\n+    /// with `into_vec()` is equivalent to calling `shrink_to_fit()`.\n+    #[experimental]\n+    pub fn into_boxed_slice(mut self) -> Box<[T]> {\n+        self.shrink_to_fit();\n+        unsafe {\n+            let xs: Box<[T]> = mem::transmute(self.as_mut_slice());\n+            mem::forget(self);\n+            xs\n+        }\n+    }\n+\n     /// Deprecated, call `push` instead\n     #[inline]\n     #[deprecated = \"call .push() instead\"]\n@@ -2631,6 +2646,13 @@ mod tests {\n         assert!(vec2 == vec!((), (), ()));\n     }\n \n+    #[test]\n+    fn test_into_boxed_slice() {\n+        let xs = vec![1u, 2, 3];\n+        let ys = xs.into_boxed_slice();\n+        assert_eq!(ys.as_slice(), [1u, 2, 3]);\n+    }\n+\n     #[bench]\n     fn bench_new(b: &mut Bencher) {\n         b.iter(|| {"}, {"sha": "db9f3114cda14b255dabaf4638fa51b1dd46fc44", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/310f2deb99a95bae63173f8f972a1f91f2138ca3/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310f2deb99a95bae63173f8f972a1f91f2138ca3/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=310f2deb99a95bae63173f8f972a1f91f2138ca3", "patch": "@@ -88,7 +88,7 @@\n #[doc(no_inline)] pub use slice::{MutableCloneableSlice, MutableOrdSlice};\n #[doc(no_inline)] pub use slice::{ImmutableSlice, MutableSlice};\n #[doc(no_inline)] pub use slice::{ImmutablePartialEqSlice, ImmutableOrdSlice};\n-#[doc(no_inline)] pub use slice::{AsSlice, VectorVector};\n+#[doc(no_inline)] pub use slice::{AsSlice, VectorVector, BoxedSlice};\n #[doc(no_inline)] pub use slice::MutableSliceAllocating;\n #[doc(no_inline)] pub use string::String;\n #[doc(no_inline)] pub use vec::Vec;"}]}