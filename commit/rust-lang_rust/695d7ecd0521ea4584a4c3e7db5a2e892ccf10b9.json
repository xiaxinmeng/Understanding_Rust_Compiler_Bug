{"sha": "695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NWQ3ZWNkMDUyMWVhNDU4NGE0YzNlN2RiNWEyZTg5MmNjZjEwYjk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-17T12:48:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-17T12:48:53Z"}, "message": "Rollup merge of #40458 - frewsxcv:frewsxcv-osstr, r=GuillaumeGomez\n\nAdd doc examples for `OsStr`, `OsString`.\n\nNone", "tree": {"sha": "5f0e518adf6ca474eeb2e89031abe02daf35d1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f0e518adf6ca474eeb2e89031abe02daf35d1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9", "html_url": "https://github.com/rust-lang/rust/commit/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee6989b437c966a7cb0b3b6f572f71f529f282c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee6989b437c966a7cb0b3b6f572f71f529f282c", "html_url": "https://github.com/rust-lang/rust/commit/dee6989b437c966a7cb0b3b6f572f71f529f282c"}, {"sha": "bc6eecd0c2ed7854d52fc823be0b093f3bc76ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6eecd0c2ed7854d52fc823be0b093f3bc76ba8", "html_url": "https://github.com/rust-lang/rust/commit/bc6eecd0c2ed7854d52fc823be0b093f3bc76ba8"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "bf3f41b13c18493b87c6bfe1280787d03fc7b255", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=695d7ecd0521ea4584a4c3e7db5a2e892ccf10b9", "patch": "@@ -188,6 +188,16 @@ impl OsString {\n     /// in the given `OsString`.\n     ///\n     /// The collection may reserve more space to avoid frequent reallocations.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::new();\n+    /// s.reserve(10);\n+    /// assert!(s.capacity() >= 10);\n+    /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         self.inner.reserve(additional)\n@@ -200,18 +210,56 @@ impl OsString {\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore capacity can not be relied upon to be precisely\n     /// minimal. Prefer reserve if future insertions are expected.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::new();\n+    /// s.reserve_exact(10);\n+    /// assert!(s.capacity() >= 10);\n+    /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n \n     /// Shrinks the capacity of the `OsString` to match its length.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_shrink_to_fit)]\n+    ///\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::from(\"foo\");\n+    ///\n+    /// s.reserve(100);\n+    /// assert!(s.capacity() >= 100);\n+    ///\n+    /// s.shrink_to_fit();\n+    /// assert_eq!(3, s.capacity());\n+    /// ```\n     #[unstable(feature = \"osstring_shrink_to_fit\", issue = \"40421\")]\n     pub fn shrink_to_fit(&mut self) {\n         self.inner.shrink_to_fit()\n     }\n \n     /// Converts this `OsString` into a boxed `OsStr`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(into_boxed_os_str)]\n+    ///\n+    /// use std::ffi::{OsString, OsStr};\n+    ///\n+    /// let s = OsString::from(\"hello\");\n+    ///\n+    /// let b: Box<OsStr> = s.into_boxed_os_str();\n+    /// ```\n     #[unstable(feature = \"into_boxed_os_str\", issue = \"40380\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {\n         unsafe { mem::transmute(self.inner.into_box()) }\n@@ -398,6 +446,16 @@ impl OsStr {\n     /// Copies the slice into an owned [`OsString`].\n     ///\n     /// [`OsString`]: struct.OsString.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::{OsStr, OsString};\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// let os_string = os_str.to_os_string();\n+    /// assert_eq!(os_string, OsString::from(\"foo\"));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }"}]}