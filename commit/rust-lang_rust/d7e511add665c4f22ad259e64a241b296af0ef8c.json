{"sha": "d7e511add665c4f22ad259e64a241b296af0ef8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZTUxMWFkZDY2NWM0ZjIyYWQyNTllNjRhMjQxYjI5NmFmMGVmOGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-21T14:01:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-21T14:01:25Z"}, "message": "Rollup merge of #64136 - crgl:doc-from-parser-lhs, r=Centril\n\nDocument From trait for LhsExpr in parser\n\nAdd doc for From trait for converting P<Expr> and Option<ThinVec<Attribute>> to LhsExpr\n\nAs part of issue rust-lang#51430 (cc @skade).\n\nBoth of these should just be moving an address and setting a discriminant in an enum. The main thing I'm not sure about is whether it's worth documenting the branch in the From<Option<ThinVec<Attribute>>. As far as I can tell it doesn't seem like it is optimized away (although if the discriminant happened to work out you could just copy the pointer and the discriminant which might be cheaper, but that's not guaranteed). So it seems like if it's being called often, it's doubling the number of possible branch mispredictions on this Option, which could be a significant cost.\n\nLet me know if there's anything that needs fixing and I'll get to it as soon as possible!", "tree": {"sha": "0f49337a2b79639b56add224167d0a81e4e69247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f49337a2b79639b56add224167d0a81e4e69247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7e511add665c4f22ad259e64a241b296af0ef8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdhi01CRBK7hj4Ov3rIwAAdHIIAIMsQDOU/aaUTKsAezUt42L4\nO3FhghYBsgEm60vTqrlc9vAolrpRn/JiCPb3wgWiElin7WWRu89D1P3/2XHYwBue\n5cBczunvrOFEC4Nrnw2mvo6EfRzTOF5k2nuw9wegRYC/Msbr99GMvYWaQ1aS4VBg\njmOyk/NU40JUy6HHdA0xjz9J4girs9U4hgwknGRYa31MVqaZLygxV923DFX9C435\n7yXXf1wLdGPuKRymaSU08MRjsc1Ot9QwOeGEwfPqFtwWDAlgx8ZrI/DsrH+v5LkD\n6LGP4WJrmDZGPrcpjL+xmyjix5eRTmrIbq/Y849vrl32+HFYzPKjrAlvt5a3qUk=\n=FAOj\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f49337a2b79639b56add224167d0a81e4e69247\nparent 8646c81e8a9127bda2f5360a636c7bf443bf73e9\nparent 194d357e03dcee73bfdb32a45175c97f4c3ce422\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569074485 +0200\ncommitter GitHub <noreply@github.com> 1569074485 +0200\n\nRollup merge of #64136 - crgl:doc-from-parser-lhs, r=Centril\n\nDocument From trait for LhsExpr in parser\n\nAdd doc for From trait for converting P<Expr> and Option<ThinVec<Attribute>> to LhsExpr\n\nAs part of issue rust-lang#51430 (cc @skade).\n\nBoth of these should just be moving an address and setting a discriminant in an enum. The main thing I'm not sure about is whether it's worth documenting the branch in the From<Option<ThinVec<Attribute>>. As far as I can tell it doesn't seem like it is optimized away (although if the discriminant happened to work out you could just copy the pointer and the discriminant which might be cheaper, but that's not guaranteed). So it seems like if it's being called often, it's doubling the number of possible branch mispredictions on this Option, which could be a significant cost.\n\nLet me know if there's anything that needs fixing and I'll get to it as soon as possible!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e511add665c4f22ad259e64a241b296af0ef8c", "html_url": "https://github.com/rust-lang/rust/commit/d7e511add665c4f22ad259e64a241b296af0ef8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7e511add665c4f22ad259e64a241b296af0ef8c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8646c81e8a9127bda2f5360a636c7bf443bf73e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8646c81e8a9127bda2f5360a636c7bf443bf73e9", "html_url": "https://github.com/rust-lang/rust/commit/8646c81e8a9127bda2f5360a636c7bf443bf73e9"}, {"sha": "194d357e03dcee73bfdb32a45175c97f4c3ce422", "url": "https://api.github.com/repos/rust-lang/rust/commits/194d357e03dcee73bfdb32a45175c97f4c3ce422", "html_url": "https://github.com/rust-lang/rust/commit/194d357e03dcee73bfdb32a45175c97f4c3ce422"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "41c3747b950ec7eab6e512ce1734be8ed5e737ee", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7e511add665c4f22ad259e64a241b296af0ef8c/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7e511add665c4f22ad259e64a241b296af0ef8c/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=d7e511add665c4f22ad259e64a241b296af0ef8c", "patch": "@@ -66,6 +66,10 @@ pub(super) enum LhsExpr {\n }\n \n impl From<Option<ThinVec<Attribute>>> for LhsExpr {\n+    /// Converts `Some(attrs)` into `LhsExpr::AttributesParsed(attrs)`\n+    /// and `None` into `LhsExpr::NotYetParsed`.\n+    ///\n+    /// This conversion does not allocate.\n     fn from(o: Option<ThinVec<Attribute>>) -> Self {\n         if let Some(attrs) = o {\n             LhsExpr::AttributesParsed(attrs)\n@@ -76,6 +80,9 @@ impl From<Option<ThinVec<Attribute>>> for LhsExpr {\n }\n \n impl From<P<Expr>> for LhsExpr {\n+    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.\n+    ///\n+    /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n         LhsExpr::AlreadyParsed(expr)\n     }"}]}