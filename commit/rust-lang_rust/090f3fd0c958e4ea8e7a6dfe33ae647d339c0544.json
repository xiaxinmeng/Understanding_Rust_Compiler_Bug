{"sha": "090f3fd0c958e4ea8e7a6dfe33ae647d339c0544", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MGYzZmQwYzk1OGU0ZWE4ZTdhNmRmZTMzYWU2NDdkMzM5YzA1NDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T11:48:54Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-07T04:01:38Z"}, "message": "syntax: further item parsing cleanup", "tree": {"sha": "8ceb1f9763135467ba89f886a398b1085c4d69d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ceb1f9763135467ba89f886a398b1085c4d69d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/090f3fd0c958e4ea8e7a6dfe33ae647d339c0544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/090f3fd0c958e4ea8e7a6dfe33ae647d339c0544", "html_url": "https://github.com/rust-lang/rust/commit/090f3fd0c958e4ea8e7a6dfe33ae647d339c0544", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/090f3fd0c958e4ea8e7a6dfe33ae647d339c0544/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e", "html_url": "https://github.com/rust-lang/rust/commit/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "004c179b7c7fd3e4f857f380bd263032e0024936", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/090f3fd0c958e4ea8e7a6dfe33ae647d339c0544/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090f3fd0c958e4ea8e7a6dfe33ae647d339c0544/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=090f3fd0c958e4ea8e7a6dfe33ae647d339c0544", "patch": "@@ -141,14 +141,14 @@ impl<'a> Parser<'a> {\n             self.bump();\n             // STATIC ITEM\n             let m = self.parse_mutability();\n-            let info = self.parse_item_const(Some(m));\n+            let info = self.parse_item_const(Some(m))?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if self.eat_keyword(kw::Const) {\n             let const_span = self.prev_span;\n             if [kw::Fn, kw::Unsafe, kw::Extern].iter().any(|k| self.check_keyword(*k)) {\n                 // CONST FUNCTION ITEM\n-\n                 let unsafety = self.parse_unsafety();\n \n                 if self.check_keyword(kw::Extern) {\n@@ -157,7 +157,7 @@ impl<'a> Parser<'a> {\n                     );\n                 }\n                 let abi = self.parse_extern_abi()?;\n-                self.bump(); // 'fn'\n+                self.bump(); // `fn`\n \n                 let header = FnHeader {\n                     unsafety,\n@@ -181,7 +181,8 @@ impl<'a> Parser<'a> {\n                     )\n                     .emit();\n             }\n-            let info = self.parse_item_const(None);\n+\n+            let info = self.parse_item_const(None)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n@@ -210,6 +211,7 @@ impl<'a> Parser<'a> {\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n         }\n+\n         if self.check_keyword(kw::Unsafe) &&\n             self.is_keyword_ahead(1, &[kw::Trait, kw::Auto])\n         {\n@@ -222,21 +224,24 @@ impl<'a> Parser<'a> {\n                 self.expect_keyword(kw::Trait)?;\n                 IsAuto::Yes\n             };\n-            let info = self.parse_item_trait(is_auto, Unsafety::Unsafe);\n+            let info = self.parse_item_trait(is_auto, Unsafety::Unsafe)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if self.check_keyword(kw::Impl) ||\n            self.check_keyword(kw::Unsafe) &&\n                 self.is_keyword_ahead(1, &[kw::Impl]) ||\n            self.check_keyword(kw::Default) &&\n-                self.is_keyword_ahead(1, &[kw::Impl, kw::Unsafe]) {\n+                self.is_keyword_ahead(1, &[kw::Impl, kw::Unsafe])\n+        {\n             // IMPL ITEM\n             let defaultness = self.parse_defaultness();\n             let unsafety = self.parse_unsafety();\n             self.expect_keyword(kw::Impl)?;\n-            let info = self.parse_item_impl(unsafety, defaultness);\n+            let info = self.parse_item_impl(unsafety, defaultness)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if self.check_keyword(kw::Fn) {\n             // FUNCTION ITEM\n             self.bump();\n@@ -249,8 +254,10 @@ impl<'a> Parser<'a> {\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n+\n         if self.check_keyword(kw::Unsafe)\n-            && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace)) {\n+            && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace))\n+        {\n             // UNSAFE FUNCTION ITEM\n             self.bump(); // `unsafe`\n             // `{` is also expected after `unsafe`; in case of error, include it in the diagnostic.\n@@ -266,11 +273,13 @@ impl<'a> Parser<'a> {\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n+\n         if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n-            let info = self.parse_item_mod(&attrs[..]);\n+            let info = self.parse_item_mod(&attrs[..])?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if let Some(type_) = self.eat_type() {\n             let (ident, alias, generics) = type_?;\n             // TYPE ITEM\n@@ -281,37 +290,41 @@ impl<'a> Parser<'a> {\n             let span = lo.to(self.prev_span);\n             return Ok(Some(self.mk_item(span, ident, item_, vis, attrs)));\n         }\n+\n         if self.eat_keyword(kw::Enum) {\n             // ENUM ITEM\n-            let info = self.parse_item_enum();\n+            let info = self.parse_item_enum()?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if self.check_keyword(kw::Trait)\n             || (self.check_keyword(kw::Auto)\n                 && self.is_keyword_ahead(1, &[kw::Trait]))\n         {\n-            let is_auto = if self.eat_keyword(kw::Trait) {\n-                IsAuto::No\n-            } else {\n-                self.expect_keyword(kw::Auto)?;\n-                self.expect_keyword(kw::Trait)?;\n+            // TRAIT ITEM\n+            let is_auto = if self.eat_keyword(kw::Auto) {\n                 IsAuto::Yes\n+            } else {\n+                IsAuto::No\n             };\n-            // TRAIT ITEM\n-            let info = self.parse_item_trait(is_auto, Unsafety::Normal);\n+            self.expect_keyword(kw::Trait)?;\n+            let info = self.parse_item_trait(is_auto, Unsafety::Normal)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if self.eat_keyword(kw::Struct) {\n             // STRUCT ITEM\n-            let info = self.parse_item_struct();\n+            let info = self.parse_item_struct()?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if self.is_union_item() {\n             // UNION ITEM\n             self.bump();\n-            let info = self.parse_item_union();\n+            let info = self.parse_item_union()?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n+\n         if let Some(macro_def) = self.eat_macro_def(&attrs, &vis, lo)? {\n             return Ok(Some(macro_def));\n         }\n@@ -417,9 +430,9 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         lo: Span,\n         vis: Visibility,\n-        info: PResult<'a, ItemInfo>,\n+        info: ItemInfo,\n     ) -> PResult<'a, Option<P<Item>>> {\n-        let (ident, item, extra_attrs) = info?;\n+        let (ident, item, extra_attrs) = info;\n         let span = lo.to(self.prev_span);\n         let attrs = maybe_append(attrs, extra_attrs);\n         Ok(Some(self.mk_item(span, ident, item, vis, attrs)))\n@@ -1195,10 +1208,8 @@ impl<'a> Parser<'a> {\n         let allow_c_variadic = header.abi == Abi::C && header.unsafety == Unsafety::Unsafe;\n         let (ident, decl, generics) = self.parse_fn_sig(allow_c_variadic)?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let span = lo.to(self.prev_span);\n         let kind = ItemKind::Fn(decl, header, generics, body);\n-        let attrs = maybe_append(attrs, Some(inner_attrs));\n-        Ok(Some(self.mk_item(span, ident, kind, vis, attrs)))\n+        self.mk_item_with_info(attrs, lo, vis, (ident, kind, Some(inner_attrs)))\n     }\n \n     /// Parse the \"signature\", including the identifier, parameters, and generics of a function."}]}