{"sha": "3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NDljMmEzOWYyNmU1OWM3M2U5NmJjN2U2YmY3ZDdkMDI1YjZiZTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-26T17:44:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-27T00:49:35Z"}, "message": "rollup merge of #19273: ogham/rename-file-types\n\nAll of the enum components had a redundant 'Type' specifier: TypeSymlink, TypeDirectory, TypeFile. This change removes them, replacing them with a namespace: FileType::Symlink, FileType::Directory, and FileType::RegularFile.\n\nRegularFile is used instead of just File, as File by itself could be mistakenly thought of as referring to the struct.\n\nPart of #19253.", "tree": {"sha": "1a85c5f46c9d3fd3d160197e2b1ea2adf286a255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a85c5f46c9d3fd3d160197e2b1ea2adf286a255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "html_url": "https://github.com/rust-lang/rust/commit/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d4526e1bea858f08014cb48bee0ad02059ab63", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d4526e1bea858f08014cb48bee0ad02059ab63", "html_url": "https://github.com/rust-lang/rust/commit/52d4526e1bea858f08014cb48bee0ad02059ab63"}, {"sha": "3b9dfd6af04ca008a4c2ef13b7fd2e8433dc473f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9dfd6af04ca008a4c2ef13b7fd2e8433dc473f", "html_url": "https://github.com/rust-lang/rust/commit/3b9dfd6af04ca008a4c2ef13b7fd2e8433dc473f"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "d7deb09985f78203cb4e3e7ad2fa99d964c7a0f7", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "patch": "@@ -37,7 +37,7 @@ pub fn realpath(original: &Path) -> io::IoResult<Path> {\n \n             match fs::lstat(&result) {\n                 Err(..) => break,\n-                Ok(ref stat) if stat.kind != io::TypeSymlink => break,\n+                Ok(ref stat) if stat.kind != io::FileType::Symlink => break,\n                 Ok(..) => {\n                     followed += 1;\n                     let path = try!(fs::readlink(&result));"}, {"sha": "64bb0508321a9850657d7576ce35dbcd31e2d395", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "patch": "@@ -54,7 +54,7 @@ fs::unlink(&path);\n \n use clone::Clone;\n use io::standard_error;\n-use io::{FilePermission, Write, Open, FileAccess, FileMode};\n+use io::{FilePermission, Write, Open, FileAccess, FileMode, FileType};\n use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};\n use io::{Read, Truncate, ReadWrite, Append};\n use io::UpdateIoError;\n@@ -592,7 +592,7 @@ pub fn mkdir_recursive(path: &Path, mode: FilePermission) -> IoResult<()> {\n         match result {\n             Err(mkdir_err) => {\n                 // already exists ?\n-                if try!(stat(&curpath)).kind != io::TypeDirectory {\n+                if try!(stat(&curpath)).kind != FileType::Directory {\n                     return Err(mkdir_err);\n                 }\n             }\n@@ -638,7 +638,7 @@ pub fn rmdir_recursive(path: &Path) -> IoResult<()> {\n                 false => try!(update_err(lstat(&child), path))\n             };\n \n-            if child_type.kind == io::TypeDirectory {\n+            if child_type.kind == FileType::Directory {\n                 rm_stack.push(child);\n                 has_child_dir = true;\n             } else {\n@@ -772,13 +772,13 @@ impl PathExtensions for path::Path {\n     }\n     fn is_file(&self) -> bool {\n         match self.stat() {\n-            Ok(s) => s.kind == io::TypeFile,\n+            Ok(s) => s.kind == FileType::RegularFile,\n             Err(..) => false\n         }\n     }\n     fn is_dir(&self) -> bool {\n         match self.stat() {\n-            Ok(s) => s.kind == io::TypeDirectory,\n+            Ok(s) => s.kind == FileType::Directory,\n             Err(..) => false\n         }\n     }\n@@ -806,7 +806,7 @@ fn access_string(access: FileAccess) -> &'static str {\n #[allow(unused_mut)]\n mod test {\n     use prelude::*;\n-    use io::{SeekSet, SeekCur, SeekEnd, Read, Open, ReadWrite};\n+    use io::{SeekSet, SeekCur, SeekEnd, Read, Open, ReadWrite, FileType};\n     use io;\n     use str;\n     use io::fs::*;\n@@ -1028,12 +1028,12 @@ mod test {\n             fs.write(msg.as_bytes()).unwrap();\n \n             let fstat_res = check!(fs.stat());\n-            assert_eq!(fstat_res.kind, io::TypeFile);\n+            assert_eq!(fstat_res.kind, FileType::RegularFile);\n         }\n         let stat_res_fn = check!(stat(filename));\n-        assert_eq!(stat_res_fn.kind, io::TypeFile);\n+        assert_eq!(stat_res_fn.kind, FileType::RegularFile);\n         let stat_res_meth = check!(filename.stat());\n-        assert_eq!(stat_res_meth.kind, io::TypeFile);\n+        assert_eq!(stat_res_meth.kind, FileType::RegularFile);\n         check!(unlink(filename));\n     }\n \n@@ -1043,9 +1043,9 @@ mod test {\n         let filename = &tmpdir.join(\"file_stat_correct_on_is_dir\");\n         check!(mkdir(filename, io::USER_RWX));\n         let stat_res_fn = check!(stat(filename));\n-        assert!(stat_res_fn.kind == io::TypeDirectory);\n+        assert!(stat_res_fn.kind == FileType::Directory);\n         let stat_res_meth = check!(filename.stat());\n-        assert!(stat_res_meth.kind == io::TypeDirectory);\n+        assert!(stat_res_meth.kind == FileType::Directory);\n         check!(rmdir(filename));\n     }\n \n@@ -1315,8 +1315,8 @@ mod test {\n         check!(File::create(&input).write(\"foobar\".as_bytes()));\n         check!(symlink(&input, &out));\n         if cfg!(not(windows)) {\n-            assert_eq!(check!(lstat(&out)).kind, io::TypeSymlink);\n-            assert_eq!(check!(out.lstat()).kind, io::TypeSymlink);\n+            assert_eq!(check!(lstat(&out)).kind, FileType::Symlink);\n+            assert_eq!(check!(out.lstat()).kind, FileType::Symlink);\n         }\n         assert_eq!(check!(stat(&out)).size, check!(stat(&input)).size);\n         assert_eq!(check!(File::open(&out).read_to_end()),\n@@ -1350,8 +1350,8 @@ mod test {\n         check!(File::create(&input).write(\"foobar\".as_bytes()));\n         check!(link(&input, &out));\n         if cfg!(not(windows)) {\n-            assert_eq!(check!(lstat(&out)).kind, io::TypeFile);\n-            assert_eq!(check!(out.lstat()).kind, io::TypeFile);\n+            assert_eq!(check!(lstat(&out)).kind, FileType::RegularFile);\n+            assert_eq!(check!(out.lstat()).kind, FileType::RegularFile);\n             assert_eq!(check!(stat(&out)).unstable.nlink, 2);\n             assert_eq!(check!(out.stat()).unstable.nlink, 2);\n         }"}, {"sha": "ba9b074470d9cf84d9f0b5319799a9455a2e5082", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "patch": "@@ -224,7 +224,6 @@ responding to errors that may occur while attempting to read the numbers.\n pub use self::SeekStyle::*;\n pub use self::FileMode::*;\n pub use self::FileAccess::*;\n-pub use self::FileType::*;\n pub use self::IoErrorKind::*;\n \n use char::Char;\n@@ -1698,22 +1697,22 @@ pub enum FileAccess {\n #[deriving(PartialEq, Show, Hash, Clone)]\n pub enum FileType {\n     /// This is a normal file, corresponding to `S_IFREG`\n-    TypeFile,\n+    RegularFile,\n \n     /// This file is a directory, corresponding to `S_IFDIR`\n-    TypeDirectory,\n+    Directory,\n \n     /// This file is a named pipe, corresponding to `S_IFIFO`\n-    TypeNamedPipe,\n+    NamedPipe,\n \n     /// This file is a block device, corresponding to `S_IFBLK`\n-    TypeBlockSpecial,\n+    BlockSpecial,\n \n     /// This file is a symbolic link to another file, corresponding to `S_IFLNK`\n-    TypeSymlink,\n+    Symlink,\n \n     /// The type of this file is not recognized as one of the other categories\n-    TypeUnknown,\n+    Unknown,\n }\n \n /// A structure used to describe metadata information about a file. This"}, {"sha": "4b47b768d600c5176dda94dba70e8974b1032f0a", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "patch": "@@ -305,12 +305,12 @@ fn mkstat(stat: &libc::stat) -> FileStat {\n     FileStat {\n         size: stat.st_size as u64,\n         kind: match (stat.st_mode as libc::mode_t) & libc::S_IFMT {\n-            libc::S_IFREG => io::TypeFile,\n-            libc::S_IFDIR => io::TypeDirectory,\n-            libc::S_IFIFO => io::TypeNamedPipe,\n-            libc::S_IFBLK => io::TypeBlockSpecial,\n-            libc::S_IFLNK => io::TypeSymlink,\n-            _ => io::TypeUnknown,\n+            libc::S_IFREG => io::FileType::RegularFile,\n+            libc::S_IFDIR => io::FileType::Directory,\n+            libc::S_IFIFO => io::FileType::NamedPipe,\n+            libc::S_IFBLK => io::FileType::BlockSpecial,\n+            libc::S_IFLNK => io::FileType::Symlink,\n+            _ => io::FileType::Unknown,\n         },\n         perm: FilePermission::from_bits_truncate(stat.st_mode as u32),\n         created: mktime(stat.st_ctime as u64, stat.st_ctime_nsec as u64),"}, {"sha": "9c4ffb926b5ae5da70404d7d3b2fda0e4030b818", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "patch": "@@ -407,12 +407,12 @@ fn mkstat(stat: &libc::stat) -> FileStat {\n     FileStat {\n         size: stat.st_size as u64,\n         kind: match (stat.st_mode as libc::c_int) & libc::S_IFMT {\n-            libc::S_IFREG => io::TypeFile,\n-            libc::S_IFDIR => io::TypeDirectory,\n-            libc::S_IFIFO => io::TypeNamedPipe,\n-            libc::S_IFBLK => io::TypeBlockSpecial,\n-            libc::S_IFLNK => io::TypeSymlink,\n-            _ => io::TypeUnknown,\n+            libc::S_IFREG => io::FileType::RegularFile,\n+            libc::S_IFDIR => io::FileType::Directory,\n+            libc::S_IFIFO => io::FileType::NamedPipe,\n+            libc::S_IFBLK => io::FileType::BlockSpecial,\n+            libc::S_IFLNK => io::FileType::Symlink,\n+            _ => io::FileType::Unknown,\n         },\n         perm: FilePermission::from_bits_truncate(stat.st_mode as u32),\n         created: stat.st_ctime as u64,"}, {"sha": "a885513611d3b03afb1f7bb6ae65d99437b064a1", "filename": "src/test/run-pass/issue-18619.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18619.rs?ref=3649c2a39f26e59c73e96bc7e6bf7d7d025b6be3", "patch": "@@ -11,5 +11,5 @@\n use std::io::FileType;\n \n pub fn main() {\n-    let _ = FileType::TypeFile.clone();\n+    let _ = FileType::RegularFile.clone();\n }"}]}