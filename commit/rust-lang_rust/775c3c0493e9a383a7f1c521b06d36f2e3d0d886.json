{"sha": "775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "node_id": "C_kwDOAAsO6NoAKDc3NWMzYzA0OTNlOWEzODNhN2YxYzUyMWIwNmQzNmYyZTNkMGQ4ODY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-31T19:02:31Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-08T19:48:11Z"}, "message": "Add `x.sh` and `x.ps1` shell scripts\n\nThis is a more ambitious version of https://github.com/rust-lang/rust/pull/98716.\nIt still changes the shebang back to python3, for compatibility with non-Unix systems,\nbut also adds alternative entrypoints for systems without `python3` installed.\n\nThese scripts will be necessary for the rust entrypoint (#94829), so I see\nlittle downside in adding them early.", "tree": {"sha": "1ce415b145ade3c3c926e9d671b3e22ec7e5e44b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce415b145ade3c3c926e9d671b3e22ec7e5e44b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "html_url": "https://github.com/rust-lang/rust/commit/775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a7d8f945f4259fb6b8c4953a65248243c054d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a7d8f945f4259fb6b8c4953a65248243c054d1", "html_url": "https://github.com/rust-lang/rust/commit/e5a7d8f945f4259fb6b8c4953a65248243c054d1"}], "stats": {"total": 128, "additions": 94, "deletions": 34}, "files": [{"sha": "1e0f7e9acf4f2bcbc6eb6c16fe79a516115ad6c1", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "patch": "@@ -66,16 +66,21 @@ TESTS_IN_2 := \\\n \tsrc/test/ui \\\n \tsrc/tools/linkchecker\n \n+## MSVC native builders\n+\n+# these intentionally don't use `$(BOOTSTRAP)` so we can test the shebang on Windows\n ci-subset-1:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_2:%=--exclude %)\n+\t$(Q)$(CFG_SRC_DIR)/x.py test --stage 2 $(TESTS_IN_2:%=--exclude %)\n ci-subset-2:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_2)\n+\t$(Q)$(CFG_SRC_DIR)/x.ps1 test --stage 2 $(TESTS_IN_2)\n+\n+## MingW native builders\n \n TESTS_IN_MINGW_2 := \\\n \tsrc/test/ui\n \n ci-mingw-subset-1:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)\n+\t$(Q)$(CFG_SRC_DIR)/x.sh test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)\n ci-mingw-subset-2:\n \t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2)\n "}, {"sha": "8de9045c3baa73e768223e97192fafc79b4eba30", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-12/Dockerfile", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile?ref=775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "patch": "@@ -1,6 +1,8 @@\n FROM ubuntu:20.04\n \n ARG DEBIAN_FRONTEND=noninteractive\n+\n+# NOTE: intentionally installs both python2 and python3 so we can test support for both.\n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n   gcc-multilib \\\n@@ -10,6 +12,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   curl \\\n   ca-certificates \\\n   python2.7 \\\n+  python3.9 \\\n   git \\\n   cmake \\\n   sudo \\\n@@ -23,6 +26,14 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils \\\n   nodejs\n \n+# Install powershell so we can test x.ps1 on Linux\n+RUN apt-get update && \\\n+    apt-get install -y apt-transport-https software-properties-common && \\\n+    curl -s \"https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb\" > packages-microsoft-prod.deb && \\\n+    dpkg -i packages-microsoft-prod.deb && \\\n+    apt-get update && \\\n+    apt-get install -y powershell\n+\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n@@ -33,21 +44,22 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n \n-ENV SCRIPT python2.7 ../x.py --stage 2 test --exclude src/tools/tidy && \\\n+# NOTE: intentionally uses all of `x.py`, `x.sh`, and `x.ps1` to make sure they all work on Linux.\n+ENV SCRIPT ../x.py --stage 2 test --exclude src/tools/tidy && \\\n            # Run the `mir-opt` tests again but this time for a 32-bit target.\n            # This enforces that tests using `// EMIT_MIR_FOR_EACH_BIT_WIDTH` have\n            # both 32-bit and 64-bit outputs updated by the PR author, before\n            # the PR is approved and tested for merging.\n            # It will also detect tests lacking `// EMIT_MIR_FOR_EACH_BIT_WIDTH`,\n            # despite having different output on 32-bit vs 64-bit targets.\n-           python2.7 ../x.py --stage 2 test src/test/mir-opt \\\n+           ../x.sh --stage 2 test src/test/mir-opt \\\n                              --host='' --target=i686-unknown-linux-gnu && \\\n            # Run the UI test suite again, but in `--pass=check` mode\n            #\n            # This is intended to make sure that both `--pass=check` continues to\n            # work.\n            #\n-           python2.7 ../x.py --stage 2 test src/test/ui --pass=check \\\n+           ../x.ps1 --stage 2 test src/test/ui --pass=check \\\n                              --host='' --target=i686-unknown-linux-gnu && \\\n            # Run tidy at the very end, after all the other tests.\n            python2.7 ../x.py --stage 2 test src/tools/tidy"}, {"sha": "025b8ab9f0af5f620809e1121c22c7ac224e96c1", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "patch": "@@ -96,6 +96,8 @@ mod os_impl {\n \n     #[cfg(unix)]\n     pub fn check(path: &Path, bad: &mut bool) {\n+        use std::ffi::OsStr;\n+\n         const ALLOWED: &[&str] = &[\"configure\"];\n \n         crate::walk_no_read(\n@@ -117,9 +119,9 @@ mod os_impl {\n             },\n             &mut |entry| {\n                 let file = entry.path();\n-                let filename = file.file_name().unwrap().to_string_lossy();\n-                let extensions = [\".py\", \".sh\"];\n-                if extensions.iter().any(|e| filename.ends_with(e)) {\n+                let extension = file.extension();\n+                let scripts = [\"py\", \"sh\", \"ps1\"];\n+                if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n                     return;\n                 }\n "}, {"sha": "1225443735f7b14627e2887e9467d954ca5785f1", "filename": "x.ps1", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/x.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/x.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.ps1?ref=775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "patch": "@@ -0,0 +1,28 @@\n+#!/usr/bin/env pwsh\n+\n+# See x.sh for why these scripts exist.\n+\n+$xpy = Join-Path $PSScriptRoot x.py\n+# Start-Process for some reason splits arguments on spaces. (Isn't powershell supposed to be simpler than bash?)\n+# Double-quote all the arguments so it doesn't do that.\n+$xpy_args = @(\"\"\"$xpy\"\"\")\n+foreach ($arg in $args) {\n+    $xpy_args += \"\"\"$arg\"\"\"\n+}\n+\n+foreach ($python in \"py\", \"python3\", \"python\", \"python2\") {\n+    # NOTE: this only tests that the command exists in PATH, not that it's actually\n+    # executable. The latter is not possible in a portable way, see\n+    # https://github.com/PowerShell/PowerShell/issues/12625.\n+    if (Get-Command $python -ErrorAction SilentlyContinue) {\n+        if ($python -eq \"py\") {\n+            # Use python3, not python2\n+            $xpy_args = @(\"-3\") + $xpy_args\n+        }\n+        $process = Start-Process -NoNewWindow -Wait -PassThru $python $xpy_args\n+        Exit $process.ExitCode\n+    }\n+}\n+\n+Write-Error \"${PSCommandPath}: error: did not find python installed\"\n+Exit 1"}, {"sha": "6c68907c581457c200050e841768c5763e06d6b3", "filename": "x.py", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "patch": "@@ -1,36 +1,16 @@\n-#!/usr/bin/env bash\n+#!/usr/bin/env python3\n+# Some systems don't have `python3` in their PATH. This isn't supported by x.py directly;\n+# they should use `x.sh` or `x.ps1` instead.\n \n-# Modern Linux and macOS systems commonly only have a thing called `python3` and\n-# not `python`, while Windows commonly does not have `python3`, so we cannot\n-# directly use python in the shebang and have it consistently work. Instead we\n-# embed some bash to look for a python to run the rest of the script.\n-#\n-# On Windows, `py -3` sometimes works. We need to try it first because `python3`\n-# sometimes tries to launch the app store on Windows.\n-'''':\n-for PYTHON in \"py -3\" python3 python python2; do\n-    if command -v $PYTHON >/dev/null; then\n-        exec $PYTHON \"$0\" \"$@\"\n-        break\n-    fi\n-done\n-echo \"$0: error: did not find python installed\" >&2\n-exit 1\n-'''\n-\n-# The rest of this file is Python.\n-#\n # This file is only a \"symlink\" to bootstrap.py, all logic should go there.\n \n import os\n import sys\n \n # If this is python2, check if python3 is available and re-execute with that\n-# interpreter.\n+# interpreter. Only python3 allows downloading CI LLVM.\n #\n-# `./x.py` would not normally benefit from this because the bash above tries\n-# python3 before 2, but this matters if someone ran `python x.py` and their\n-# system's `python` is python2.\n+# This matters if someone's system `python` is python2.\n if sys.version_info.major < 3:\n     try:\n         os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)"}, {"sha": "704d0f791f333d0ddca4c333a16fdf62643bb4c7", "filename": "x.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/x.sh", "raw_url": "https://github.com/rust-lang/rust/raw/775c3c0493e9a383a7f1c521b06d36f2e3d0d886/x.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.sh?ref=775c3c0493e9a383a7f1c521b06d36f2e3d0d886", "patch": "@@ -0,0 +1,33 @@\n+#!/bin/sh\n+\n+# Modern Linux and macOS systems commonly only have a thing called `python3` and\n+# not `python`, while Windows commonly does not have `python3`, so we cannot\n+# directly use python in the x.py shebang and have it consistently work. Instead we\n+# have a shell script to look for a python to run x.py.\n+\n+set -eu\n+\n+realpath() {\n+    if [ -d \"$1\" ]; then\n+        CDPATH='' command cd \"$1\" && pwd -P   \n+    else\n+        echo \"$(realpath \"$(dirname \"$1\")\")/$(basename \"$1\")\"\n+    fi\n+}\n+\n+xpy=$(dirname \"$(realpath \"$0\")\")/x.py\n+\n+# On Windows, `py -3` sometimes works. We need to try it first because `python3`\n+# sometimes tries to launch the app store on Windows.\n+for SEARCH_PYTHON in py python3 python python2; do\n+    if python=$(command -v $SEARCH_PYTHON) && [ -x \"$python\" ]; then\n+        if [ $SEARCH_PYTHON = py ]; then\n+            extra_arg=\"-3\"\n+        else\n+            extra_arg=\"\"\n+        fi\n+        exec \"$python\" $extra_arg \"$xpy\" \"$@\"\n+    fi\n+done\n+echo \"$0: error: did not find python installed\" >&2\n+exit 1"}]}