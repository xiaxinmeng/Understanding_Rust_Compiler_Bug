{"sha": "e13090e8b2f8adce9277f2ebfa37efa75c8837a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzA5MGU4YjJmOGFkY2U5Mjc3ZjJlYmZhMzdlZmE3NWM4ODM3YTg=", "commit": {"author": {"name": "Alexey Tarasov", "email": "tarasov@dodologics.com", "date": "2017-08-20T11:35:00Z"}, "committer": {"name": "Alexey Tarasov", "email": "tarasov@dodologics.com", "date": "2017-08-23T13:10:03Z"}, "message": "Fixes issue #43205: ICE in Rvalue::Len evaluation.\n\n- fixes evaluation of array length for zero-sized type referenced by\n  rvalue operand.\n- adds test to verify fix.\n\nCause of the issue.\n\nZero-sized aggregates are handled as operands, not lvalues. Therefore while\nvisiting Assign statement by LocalAnalyser, mark_as_lvalue() is not called for\nrelated Local. This behaviour is controlled by rvalue_creates_operand() method.\nAs result it causes error later, when rvalue operand is evaluated in\ntrans_rvalue_operand() while handling Rvalue::Len case. Array length evaluation\ninvokes trans_lvalue() which expects referenced Local to be value, not operand.\n\nHow it is fixed.\n\nIn certain cases result of Rvalue::Len can be evaluated without calling\ntrans_lvalue(). Method evaluate_array_len() is introduced to handle length\nevaluation for zero-sized types referenced by Locals.", "tree": {"sha": "f7cee317cf6ed47503d3ee921d0615cd977027cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7cee317cf6ed47503d3ee921d0615cd977027cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e13090e8b2f8adce9277f2ebfa37efa75c8837a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e13090e8b2f8adce9277f2ebfa37efa75c8837a8", "html_url": "https://github.com/rust-lang/rust/commit/e13090e8b2f8adce9277f2ebfa37efa75c8837a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e13090e8b2f8adce9277f2ebfa37efa75c8837a8/comments", "author": {"login": "taleks", "id": 93178, "node_id": "MDQ6VXNlcjkzMTc4", "avatar_url": "https://avatars.githubusercontent.com/u/93178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleks", "html_url": "https://github.com/taleks", "followers_url": "https://api.github.com/users/taleks/followers", "following_url": "https://api.github.com/users/taleks/following{/other_user}", "gists_url": "https://api.github.com/users/taleks/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleks/subscriptions", "organizations_url": "https://api.github.com/users/taleks/orgs", "repos_url": "https://api.github.com/users/taleks/repos", "events_url": "https://api.github.com/users/taleks/events{/privacy}", "received_events_url": "https://api.github.com/users/taleks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taleks", "id": 93178, "node_id": "MDQ6VXNlcjkzMTc4", "avatar_url": "https://avatars.githubusercontent.com/u/93178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleks", "html_url": "https://github.com/taleks", "followers_url": "https://api.github.com/users/taleks/followers", "following_url": "https://api.github.com/users/taleks/following{/other_user}", "gists_url": "https://api.github.com/users/taleks/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleks/subscriptions", "organizations_url": "https://api.github.com/users/taleks/orgs", "repos_url": "https://api.github.com/users/taleks/repos", "events_url": "https://api.github.com/users/taleks/events{/privacy}", "received_events_url": "https://api.github.com/users/taleks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f0ee9a7b17d522bfc6385f841d040445730f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f0ee9a7b17d522bfc6385f841d040445730f28", "html_url": "https://github.com/rust-lang/rust/commit/a3f0ee9a7b17d522bfc6385f841d040445730f28"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "096f43e44ab0f5496b24b973bbb1c9393bcdd05f", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e13090e8b2f8adce9277f2ebfa37efa75c8837a8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13090e8b2f8adce9277f2ebfa37efa75c8837a8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=e13090e8b2f8adce9277f2ebfa37efa75c8837a8", "patch": "@@ -29,7 +29,7 @@ use type_of;\n use tvec;\n use value::Value;\n \n-use super::MirContext;\n+use super::{MirContext, LocalRef};\n use super::constant::const_scalar_checked_binop;\n use super::operand::{OperandRef, OperandValue};\n use super::lvalue::LvalueRef;\n@@ -381,9 +381,9 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             mir::Rvalue::Len(ref lvalue) => {\n-                let tr_lvalue = self.trans_lvalue(&bcx, lvalue);\n+                let size = self.evaluate_array_len(&bcx, lvalue);\n                 let operand = OperandRef {\n-                    val: OperandValue::Immediate(tr_lvalue.len(bcx.ccx)),\n+                    val: OperandValue::Immediate(size),\n                     ty: bcx.tcx().types.usize,\n                 };\n                 (bcx, operand)\n@@ -512,6 +512,26 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         }\n     }\n \n+    fn evaluate_array_len(&mut self,\n+                          bcx: &Builder<'a, 'tcx>,\n+                          lvalue: &mir::Lvalue<'tcx>) -> ValueRef\n+    {\n+        // ZST are passed as operands and require special handling\n+        // because trans_lvalue() panics if Local is operand.\n+        if let mir::Lvalue::Local(index) = *lvalue {\n+            if let LocalRef::Operand(Some(op)) = self.locals[index] {\n+                if common::type_is_zero_size(bcx.ccx, op.ty) {\n+                    if let ty::TyArray(_, n) = op.ty.sty {\n+                        return common::C_uint(bcx.ccx, n);\n+                    }\n+                }\n+            }\n+        }\n+        // use common size calculation for non zero-sized types\n+        let tr_value = self.trans_lvalue(&bcx, lvalue);\n+        return tr_value.len(bcx.ccx);\n+    }\n+\n     pub fn trans_scalar_binop(&mut self,\n                               bcx: &Builder<'a, 'tcx>,\n                               op: mir::BinOp,"}, {"sha": "0e613ac0727a6ee146001d4ae6f775f336162efc", "filename": "src/test/run-pass/issue-43205.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e13090e8b2f8adce9277f2ebfa37efa75c8837a8/src%2Ftest%2Frun-pass%2Fissue-43205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13090e8b2f8adce9277f2ebfa37efa75c8837a8/src%2Ftest%2Frun-pass%2Fissue-43205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43205.rs?ref=e13090e8b2f8adce9277f2ebfa37efa75c8837a8", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+   &&[()][0];\n+   println!(\"{:?}\", &[(),()][1]);\n+}"}]}