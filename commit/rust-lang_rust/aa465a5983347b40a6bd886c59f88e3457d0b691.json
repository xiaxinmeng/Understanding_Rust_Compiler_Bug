{"sha": "aa465a5983347b40a6bd886c59f88e3457d0b691", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNDY1YTU5ODMzNDdiNDBhNmJkODg2YzU5Zjg4ZTM0NTdkMGI2OTE=", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-07-28T12:21:59Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-07-28T12:21:59Z"}, "message": "Bail on any found recursion when expanding opaque types\n\nFixes #87450. More of a bandaid because it does not fix the exponential complexity of the type folding used for opaque type expansion.", "tree": {"sha": "7beb9178a97a4b56b8ee45be15f6c644dd09d3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7beb9178a97a4b56b8ee45be15f6c644dd09d3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa465a5983347b40a6bd886c59f88e3457d0b691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa465a5983347b40a6bd886c59f88e3457d0b691", "html_url": "https://github.com/rust-lang/rust/commit/aa465a5983347b40a6bd886c59f88e3457d0b691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa465a5983347b40a6bd886c59f88e3457d0b691/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba3228b2a9875d268ff3990903d04e19f6cdb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba3228b2a9875d268ff3990903d04e19f6cdb0c", "html_url": "https://github.com/rust-lang/rust/commit/eba3228b2a9875d268ff3990903d04e19f6cdb0c"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "9ba85e58018aafaa1744596a3da607f28c315a95", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa465a5983347b40a6bd886c59f88e3457d0b691/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa465a5983347b40a6bd886c59f88e3457d0b691/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=aa465a5983347b40a6bd886c59f88e3457d0b691", "patch": "@@ -540,6 +540,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             expanded_cache: FxHashMap::default(),\n             primary_def_id: Some(def_id),\n             found_recursion: false,\n+            found_any_recursion: false,\n             check_recursion: true,\n             tcx: self,\n         };\n@@ -560,6 +561,7 @@ struct OpaqueTypeExpander<'tcx> {\n     expanded_cache: FxHashMap<(DefId, SubstsRef<'tcx>), Ty<'tcx>>,\n     primary_def_id: Option<DefId>,\n     found_recursion: bool,\n+    found_any_recursion: bool,\n     /// Whether or not to check for recursive opaque types.\n     /// This is `true` when we're explicitly checking for opaque type\n     /// recursion, and 'false' otherwise to avoid unnecessary work.\n@@ -569,7 +571,7 @@ struct OpaqueTypeExpander<'tcx> {\n \n impl<'tcx> OpaqueTypeExpander<'tcx> {\n     fn expand_opaque_ty(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) -> Option<Ty<'tcx>> {\n-        if self.found_recursion {\n+        if self.found_any_recursion {\n             return None;\n         }\n         let substs = substs.fold_with(self);\n@@ -591,6 +593,7 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n         } else {\n             // If another opaque type that we contain is recursive, then it\n             // will report the error, so we don't have to.\n+            self.found_any_recursion = true;\n             self.found_recursion = def_id == *self.primary_def_id.as_ref().unwrap();\n             None\n         }\n@@ -1078,6 +1081,7 @@ pub fn normalize_opaque_types(\n         expanded_cache: FxHashMap::default(),\n         primary_def_id: None,\n         found_recursion: false,\n+        found_any_recursion: false,\n         check_recursion: false,\n         tcx,\n     };"}]}