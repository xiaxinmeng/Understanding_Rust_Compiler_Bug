{"sha": "ae7a296c85bba6ab279dd17b193f86db22ec3437", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlN2EyOTZjODViYmE2YWIyNzlkZDE3YjE5M2Y4NmRiMjJlYzM0Mzc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-23T16:20:51Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:56Z"}, "message": "Unify and test attribute handling", "tree": {"sha": "42875a67886a80ca0ca3c4467cfea08ebe2f214f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42875a67886a80ca0ca3c4467cfea08ebe2f214f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae7a296c85bba6ab279dd17b193f86db22ec3437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7a296c85bba6ab279dd17b193f86db22ec3437", "html_url": "https://github.com/rust-lang/rust/commit/ae7a296c85bba6ab279dd17b193f86db22ec3437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae7a296c85bba6ab279dd17b193f86db22ec3437/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689e147c9dc416027fd36e94673431533df545f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/689e147c9dc416027fd36e94673431533df545f9", "html_url": "https://github.com/rust-lang/rust/commit/689e147c9dc416027fd36e94673431533df545f9"}], "stats": {"total": 260, "additions": 227, "deletions": 33}, "files": [{"sha": "e0f468bf39d05b4003a590ea2f0b42bc1f1416e4", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=ae7a296c85bba6ab279dd17b193f86db22ec3437", "patch": "@@ -107,6 +107,18 @@ impl Attrs {\n         Attrs { entries }\n     }\n \n+    pub fn merge(&self, other: Attrs) -> Attrs {\n+        match (&self.entries, &other.entries) {\n+            (None, None) => Attrs { entries: None },\n+            (Some(entries), None) | (None, Some(entries)) => {\n+                Attrs { entries: Some(entries.clone()) }\n+            }\n+            (Some(a), Some(b)) => {\n+                Attrs { entries: Some(a.iter().chain(b.iter()).cloned().collect()) }\n+            }\n+        }\n+    }\n+\n     pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n         AttrQuery { attrs: self, key }\n     }"}, {"sha": "51c97c5847081ce04a6df9ab4c5f23d2f98a68d2", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=ae7a296c85bba6ab279dd17b193f86db22ec3437", "patch": "@@ -40,7 +40,7 @@ impl FunctionData {\n             name: func.name.clone(),\n             params: func.params.clone(),\n             ret_type: func.ret_type.clone(),\n-            attrs: func.attrs.clone(),\n+            attrs: item_tree.attrs(loc.id.value.into()).clone(),\n             has_self_param: func.has_self_param,\n             is_unsafe: func.is_unsafe,\n             visibility: func.visibility.clone(),\n@@ -224,7 +224,8 @@ fn collect_items(\n         match item {\n             AssocItem::Function(id) => {\n                 let item = &item_tree[id];\n-                if !item.attrs.is_cfg_enabled(&cfg_options) {\n+                let attrs = item_tree.attrs(id.into());\n+                if !attrs.is_cfg_enabled(&cfg_options) {\n                     continue;\n                 }\n                 let def = FunctionLoc { container, id: ItemTreeId::new(file_id, id) }.intern(db);"}, {"sha": "6eb0c1b912003d39a7485a0bbf7e3e9ef4db51f0", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=ae7a296c85bba6ab279dd17b193f86db22ec3437", "patch": "@@ -355,7 +355,6 @@ pub struct ExternCrate {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Function {\n     pub name: Name,\n-    pub attrs: Attrs,\n     pub visibility: RawVisibility,\n     pub generic_params: GenericParams,\n     pub has_self_param: bool,\n@@ -368,7 +367,6 @@ pub struct Function {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Struct {\n     pub name: Name,\n-    pub attrs: Attrs,\n     pub visibility: RawVisibility,\n     pub generic_params: GenericParams,\n     pub fields: Fields,\n@@ -389,7 +387,6 @@ pub enum StructDefKind {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Union {\n     pub name: Name,\n-    pub attrs: Attrs,\n     pub visibility: RawVisibility,\n     pub generic_params: GenericParams,\n     pub fields: Fields,\n@@ -399,7 +396,6 @@ pub struct Union {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Enum {\n     pub name: Name,\n-    pub attrs: Attrs,\n     pub visibility: RawVisibility,\n     pub generic_params: GenericParams,\n     pub variants: Range<Idx<Variant>>,"}, {"sha": "88530af74b7e4450fb60cd74162588eb12351cca", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=ae7a296c85bba6ab279dd17b193f86db22ec3437", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n     SyntaxNode,\n };\n use smallvec::SmallVec;\n-use std::{mem, sync::Arc};\n+use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n fn id<N: ItemTreeNode>(index: Idx<N>) -> FileItemTreeId<N> {\n     FileItemTreeId { index, _p: PhantomData }\n@@ -116,13 +116,24 @@ impl Ctx {\n \n         if !attrs.is_empty() {\n             for item in items.iter().flat_map(|items| &items.0) {\n-                self.tree.attrs.insert(*item, attrs.clone());\n+                self.add_attrs(*item, attrs.clone());\n             }\n         }\n \n         items\n     }\n \n+    fn add_attrs(&mut self, item: ModItem, attrs: Attrs) {\n+        match self.tree.attrs.entry(item) {\n+            Entry::Occupied(mut entry) => {\n+                *entry.get_mut() = entry.get().merge(attrs);\n+            }\n+            Entry::Vacant(entry) => {\n+                entry.insert(attrs);\n+            }\n+        }\n+    }\n+\n     fn collect_inner_items(&mut self, container: &SyntaxNode) {\n         let forced_vis = self.forced_visibility.take();\n         let mut inner_items = mem::replace(&mut self.tree.inner_items, FxHashMap::default());\n@@ -147,7 +158,6 @@ impl Ctx {\n     }\n \n     fn lower_struct(&mut self, strukt: &ast::StructDef) -> Option<FileItemTreeId<Struct>> {\n-        let attrs = self.lower_attrs(strukt);\n         let visibility = self.lower_visibility(strukt);\n         let name = strukt.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Struct, strukt);\n@@ -158,7 +168,7 @@ impl Ctx {\n             ast::StructKind::Tuple(_) => StructDefKind::Tuple,\n             ast::StructKind::Unit => StructDefKind::Unit,\n         };\n-        let res = Struct { name, attrs, visibility, generic_params, fields, ast_id, kind };\n+        let res = Struct { name, visibility, generic_params, fields, ast_id, kind };\n         Some(id(self.tree.structs.alloc(res)))\n     }\n \n@@ -215,7 +225,6 @@ impl Ctx {\n     }\n \n     fn lower_union(&mut self, union: &ast::UnionDef) -> Option<FileItemTreeId<Union>> {\n-        let attrs = self.lower_attrs(union);\n         let visibility = self.lower_visibility(union);\n         let name = union.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Union, union);\n@@ -226,12 +235,11 @@ impl Ctx {\n             None => Fields::Record(self.next_field_idx()..self.next_field_idx()),\n         };\n         let ast_id = self.source_ast_id_map.ast_id(union);\n-        let res = Union { name, attrs, visibility, generic_params, fields, ast_id };\n+        let res = Union { name, visibility, generic_params, fields, ast_id };\n         Some(id(self.tree.unions.alloc(res)))\n     }\n \n     fn lower_enum(&mut self, enum_: &ast::EnumDef) -> Option<FileItemTreeId<Enum>> {\n-        let attrs = self.lower_attrs(enum_);\n         let visibility = self.lower_visibility(enum_);\n         let name = enum_.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Enum, enum_);\n@@ -240,7 +248,7 @@ impl Ctx {\n             None => self.next_variant_idx()..self.next_variant_idx(),\n         };\n         let ast_id = self.source_ast_id_map.ast_id(enum_);\n-        let res = Enum { name, attrs, visibility, generic_params, variants, ast_id };\n+        let res = Enum { name, visibility, generic_params, variants, ast_id };\n         Some(id(self.tree.enums.alloc(res)))\n     }\n \n@@ -263,7 +271,6 @@ impl Ctx {\n     }\n \n     fn lower_function(&mut self, func: &ast::FnDef) -> Option<FileItemTreeId<Function>> {\n-        let attrs = self.lower_attrs(func);\n         let visibility = self.lower_visibility(func);\n         let name = func.name()?.as_name();\n \n@@ -309,7 +316,6 @@ impl Ctx {\n         let ast_id = self.source_ast_id_map.ast_id(func);\n         let mut res = Function {\n             name,\n-            attrs,\n             visibility,\n             generic_params: GenericParams::default(),\n             has_self_param,\n@@ -390,9 +396,13 @@ impl Ctx {\n         let items = trait_def.item_list().map(|list| {\n             self.with_inherited_visibility(visibility.clone(), |this| {\n                 list.items()\n-                    .flat_map(|item| {\n+                    .filter_map(|item| {\n+                        let attrs = Attrs::new(&item, &this.hygiene);\n                         this.collect_inner_items(item.syntax());\n-                        this.lower_assoc_item(&item)\n+                        this.lower_assoc_item(&item).map(|item| {\n+                            this.add_attrs(item.into(), attrs);\n+                            item\n+                        })\n                     })\n                     .collect()\n             })\n@@ -422,6 +432,8 @@ impl Ctx {\n             .filter_map(|item| {\n                 self.collect_inner_items(item.syntax());\n                 let assoc = self.lower_assoc_item(&item)?;\n+                let attrs = Attrs::new(&item, &self.hygiene);\n+                self.add_attrs(assoc.into(), attrs);\n                 Some(assoc)\n             })\n             .collect();\n@@ -506,6 +518,7 @@ impl Ctx {\n             list.extern_items()\n                 .filter_map(|item| {\n                     self.collect_inner_items(item.syntax());\n+                    let attrs = Attrs::new(&item, &self.hygiene);\n                     let id = match item {\n                         ast::ExternItem::FnDef(ast) => {\n                             let func = self.lower_function(&ast)?;\n@@ -516,6 +529,7 @@ impl Ctx {\n                             statik.into()\n                         }\n                     };\n+                    self.add_attrs(id, attrs);\n                     Some(id)\n                 })\n                 .collect()\n@@ -576,9 +590,6 @@ impl Ctx {\n         }\n     }\n \n-    fn lower_attrs(&self, item: &impl ast::AttrsOwner) -> Attrs {\n-        Attrs::new(item, &self.hygiene)\n-    }\n     fn lower_visibility(&self, item: &impl ast::VisibilityOwner) -> RawVisibility {\n         if let Some(vis) = self.forced_visibility.as_ref() {\n             vis.clone()"}, {"sha": "2df1b3e0cbc3a17abdb9a6ab4ddc07572bc88411", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 186, "deletions": 12, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7a296c85bba6ab279dd17b193f86db22ec3437/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=ae7a296c85bba6ab279dd17b193f86db22ec3437", "patch": "@@ -77,13 +77,12 @@ fn print_item_tree(ra_fixture: &str) -> String {\n     }\n \n     if !tree.inner_items.is_empty() {\n-        format_to!(out, \"\\ninner items:\\n\");\n+        format_to!(out, \"\\ninner items:\\n\\n\");\n         for (ast_id, items) in &tree.inner_items {\n-            format_to!(out, \"{:?}:\\n\", ast_id);\n+            format_to!(out, \"for AST {:?}:\\n\", ast_id);\n             for inner in items {\n-                format_to!(out, \"- \");\n                 fmt_mod_item(&mut out, &tree, *inner);\n-                format_to!(out, \"\\n\");\n+                format_to!(out, \"\\n\\n\");\n             }\n         }\n     }\n@@ -92,6 +91,12 @@ fn print_item_tree(ra_fixture: &str) -> String {\n }\n \n fn fmt_mod_item(out: &mut String, tree: &ItemTree, item: ModItem) {\n+    let attrs = tree.attrs(item);\n+    if !attrs.is_empty() {\n+        format_to!(out, \"#[{:?}]\\n\", attrs);\n+    }\n+\n+    let mut children = String::new();\n     match item {\n         ModItem::ExternCrate(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n@@ -119,65 +124,125 @@ fn fmt_mod_item(out: &mut String, tree: &ItemTree, item: ModItem) {\n         }\n         ModItem::Trait(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n+            for item in &tree[it].items {\n+                fmt_mod_item(&mut children, tree, ModItem::from(*item));\n+                format_to!(children, \"\\n\");\n+            }\n         }\n         ModItem::Impl(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n+            for item in &tree[it].items {\n+                fmt_mod_item(&mut children, tree, ModItem::from(*item));\n+                format_to!(children, \"\\n\");\n+            }\n         }\n         ModItem::TypeAlias(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n         }\n         ModItem::Mod(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n+            match &tree[it].kind {\n+                ModKind::Inline { items } => {\n+                    for item in items {\n+                        fmt_mod_item(&mut children, tree, *item);\n+                        format_to!(children, \"\\n\");\n+                    }\n+                }\n+                ModKind::Outline {} => {}\n+            }\n         }\n         ModItem::MacroCall(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n         }\n     }\n+\n+    for line in children.lines() {\n+        format_to!(out, \"\\n> {}\", line);\n+    }\n }\n \n #[test]\n fn smoke() {\n     assert_snapshot!(print_item_tree(r\"\n         #![attr]\n \n+        #[attr_on_use]\n         use {a, b::*};\n+\n+        #[ext_crate]\n         extern crate krate;\n \n+        #[on_trait]\n         trait Tr<U> {\n+            #[assoc_ty]\n             type AssocTy: Tr<()>;\n+\n+            #[assoc_const]\n             const CONST: u8;\n+\n+            #[assoc_method]\n             fn method(&self);\n+\n+            #[assoc_dfl_method]\n             fn dfl_method(&mut self) {}\n         }\n \n+        #[struct0]\n         struct Struct0<T = ()>;\n-        struct Struct1<T>(u8);\n+\n+        #[struct1]\n+        struct Struct1<T>(#[struct1fld] u8);\n+\n+        #[struct2]\n         struct Struct2<T> {\n+            #[struct2fld]\n             fld: (T, ),\n         }\n \n+        #[en]\n         enum En {\n+            #[enum_variant]\n             Variant {\n+                #[enum_field]\n                 field: u8,\n             },\n         }\n \n+        #[un]\n         union Un {\n+            #[union_fld]\n             fld: u16,\n         }\n     \"), @r###\"\n inner attrs: Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr\"))] }, input: None }]) }\n \n top-level items:\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: Module(ModPath { kind: Super(0), segments: [] }), is_glob: false, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: Module(ModPath { kind: Super(0), segments: [] }), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: Module(ModPath { kind: Super(0), segments: [] }), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrateItem>(1) }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n Trait { name: Name(Text(\"Tr\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 2, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }, TypeParamData { name: Some(Name(Text(\"U\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n-Struct { name: Name(Text(\"Struct0\")), attrs: Attrs { entries: None }, visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: Some(Tuple([])), provenance: TypeParamList }] }, where_predicates: [] }, fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n-Struct { name: Name(Text(\"Struct1\")), attrs: Attrs { entries: None }, visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Tuple(Idx::<Field>(0)..Idx::<Field>(1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n-Struct { name: Name(Text(\"Struct2\")), attrs: Attrs { entries: None }, visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Record(Idx::<Field>(1)..Idx::<Field>(2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n-Enum { name: Name(Text(\"En\")), attrs: Attrs { entries: None }, visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n-Union { name: Name(Text(\"Un\")), attrs: Attrs { entries: None }, visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, fields: Record(Idx::<Field>(3)..Idx::<Field>(4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n+> TypeAlias { name: Name(Text(\"AssocTy\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAliasDef>(8) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n+> Const { name: Some(Name(Text(\"CONST\"))), visibility: Module(ModPath { kind: Super(0), segments: [] }), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]\n+> Function { name: Name(Text(\"method\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]\n+> Function { name: Name(Text(\"dfl_method\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n+Struct { name: Name(Text(\"Struct0\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: Some(Tuple([])), provenance: TypeParamList }] }, where_predicates: [] }, fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n+Struct { name: Name(Text(\"Struct1\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Tuple(Idx::<Field>(0)..Idx::<Field>(1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n+Struct { name: Name(Text(\"Struct2\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Record(Idx::<Field>(1)..Idx::<Field>(2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n+Enum { name: Name(Text(\"En\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n+Union { name: Name(Text(\"Un\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, fields: Record(Idx::<Field>(3)..Idx::<Field>(4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n     \"###);\n }\n \n@@ -201,10 +266,92 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n Impl { generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"A\"))] }, generic_args: [None] }) }] }, target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+> Function { name: Name(Text(\"foo\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n \n inner items:\n-FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(2):\n-- Function { name: Name(Text(\"end\")), attrs: Attrs { entries: None }, visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"W\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"W\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Write\"))] }, generic_args: [None] }) }] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+\n+for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(2):\n+Function { name: Name(Text(\"end\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"W\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"W\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Write\"))] }, generic_args: [None] }) }] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+\n+    \"###);\n+}\n+\n+#[test]\n+fn extern_attrs() {\n+    let tree = print_item_tree(\n+        r#\"\n+        #[block_attr]\n+        extern \"C\" {\n+            #[attr_a]\n+            fn a() {}\n+            #[attr_b]\n+            fn b() {}\n+        }\n+    \"#,\n+    );\n+\n+    assert_snapshot!(tree, @r###\"\n+inner attrs: Attrs { entries: None }\n+\n+top-level items:\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n+Function { name: Name(Text(\"a\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n+Function { name: Name(Text(\"b\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+    \"###);\n+}\n+\n+#[test]\n+fn trait_attrs() {\n+    let tree = print_item_tree(\n+        r#\"\n+        #[trait_attr]\n+        trait Tr {\n+            #[attr_a]\n+            fn a() {}\n+            #[attr_b]\n+            fn b() {}\n+        }\n+    \"#,\n+    );\n+\n+    assert_snapshot!(tree, @r###\"\n+inner attrs: Attrs { entries: None }\n+\n+top-level items:\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"trait_attr\"))] }, input: None }]) }]\n+Trait { name: Name(Text(\"Tr\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }] }, where_predicates: [] }, auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n+> Function { name: Name(Text(\"a\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n+> Function { name: Name(Text(\"b\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+    \"###);\n+}\n+\n+#[test]\n+fn impl_attrs() {\n+    let tree = print_item_tree(\n+        r#\"\n+        #[impl_attr]\n+        impl Ty {\n+            #[attr_a]\n+            fn a() {}\n+            #[attr_b]\n+            fn b() {}\n+        }\n+    \"#,\n+    );\n+\n+    assert_snapshot!(tree, @r###\"\n+inner attrs: Attrs { entries: None }\n+\n+top-level items:\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"impl_attr\"))] }, input: None }]) }]\n+Impl { generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n+> Function { name: Name(Text(\"a\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+> #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n+> Function { name: Name(Text(\"b\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n     \"###);\n }\n \n@@ -235,6 +382,32 @@ fn cursed_inner_items() {\n     );\n }\n \n+#[test]\n+fn inner_item_attrs() {\n+    let tree = print_item_tree(\n+        r\"\n+        fn foo() {\n+            #[on_inner]\n+            fn inner() {}\n+        }\n+    \",\n+    );\n+\n+    assert_snapshot!(tree, @r###\"\n+inner attrs: Attrs { entries: None }\n+\n+top-level items:\n+Function { name: Name(Text(\"foo\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n+\n+inner items:\n+\n+for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(1):\n+#[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_inner\"))] }, input: None }]) }]\n+Function { name: Name(Text(\"inner\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+\n+    \"###);\n+}\n+\n #[test]\n fn assoc_item_macros() {\n     let tree = print_item_tree(\n@@ -250,5 +423,6 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n Impl { generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"S\"))] }, generic_args: [None] }), is_negative: false, items: [MacroCall(Idx::<MacroCall>(0))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+> MacroCall { name: None, path: ModPath { kind: Plain, segments: [Name(Text(\"items\"))] }, is_export: false, is_local_inner: false, is_builtin: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::MacroCall>(1) }\n     \"###);\n }"}]}