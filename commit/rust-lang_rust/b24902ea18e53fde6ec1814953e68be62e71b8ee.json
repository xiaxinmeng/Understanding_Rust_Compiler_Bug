{"sha": "b24902ea18e53fde6ec1814953e68be62e71b8ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDkwMmVhMThlNTNmZGU2ZWMxODE0OTUzZTY4YmU2MmU3MWI4ZWU=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-12T07:02:51Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-12T07:08:44Z"}, "message": "Run analyses before thir-tree dumps\n\nFixes #83048", "tree": {"sha": "befc967bce2114211dcfdcfb4dc20c521d89eb8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/befc967bce2114211dcfdcfb4dc20c521d89eb8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b24902ea18e53fde6ec1814953e68be62e71b8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b24902ea18e53fde6ec1814953e68be62e71b8ee", "html_url": "https://github.com/rust-lang/rust/commit/b24902ea18e53fde6ec1814953e68be62e71b8ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b24902ea18e53fde6ec1814953e68be62e71b8ee/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b996e1c628e8089f058244b011a2ee945a8984", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b996e1c628e8089f058244b011a2ee945a8984", "html_url": "https://github.com/rust-lang/rust/commit/77b996e1c628e8089f058244b011a2ee945a8984"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "1544c9758387f81ed3312577d77bb34427d32083", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b24902ea18e53fde6ec1814953e68be62e71b8ee/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24902ea18e53fde6ec1814953e68be62e71b8ee/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=b24902ea18e53fde6ec1814953e68be62e71b8ee", "patch": "@@ -471,21 +471,6 @@ pub fn print_after_hir_lowering<'tcx>(\n             format!(\"{:#?}\", krate)\n         }),\n \n-        ThirTree => {\n-            let mut out = String::new();\n-            abort_on_err(rustc_typeck::check_crate(tcx), tcx.sess);\n-            debug!(\"pretty printing THIR tree\");\n-            for did in tcx.body_owners() {\n-                let hir = tcx.hir();\n-                let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(did)));\n-                let arena = thir::Arena::default();\n-                let thir =\n-                    thir::build_thir(tcx, ty::WithOptConstParam::unknown(did), &arena, &body.value);\n-                let _ = writeln!(out, \"{:?}:\\n{:#?}\\n\", did, thir);\n-            }\n-            out\n-        }\n-\n         _ => unreachable!(),\n     };\n \n@@ -501,18 +486,40 @@ fn print_with_analysis(\n     ppm: PpMode,\n     ofile: Option<&Path>,\n ) -> Result<(), ErrorReported> {\n-    let mut out = Vec::new();\n-\n     tcx.analysis(LOCAL_CRATE)?;\n \n-    match ppm {\n-        Mir => write_mir_pretty(tcx, None, &mut out).unwrap(),\n-        MirCFG => write_mir_graphviz(tcx, None, &mut out).unwrap(),\n+    let out = match ppm {\n+        Mir => {\n+            let mut out = Vec::new();\n+            write_mir_pretty(tcx, None, &mut out).unwrap();\n+            String::from_utf8(out).unwrap()\n+        }\n+\n+        MirCFG => {\n+            let mut out = Vec::new();\n+            write_mir_graphviz(tcx, None, &mut out).unwrap();\n+            String::from_utf8(out).unwrap()\n+        }\n+\n+        ThirTree => {\n+            let mut out = String::new();\n+            abort_on_err(rustc_typeck::check_crate(tcx), tcx.sess);\n+            debug!(\"pretty printing THIR tree\");\n+            for did in tcx.body_owners() {\n+                let hir = tcx.hir();\n+                let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(did)));\n+                let arena = thir::Arena::default();\n+                let thir =\n+                    thir::build_thir(tcx, ty::WithOptConstParam::unknown(did), &arena, &body.value);\n+                let _ = writeln!(out, \"{:?}:\\n{:#?}\\n\", did, thir);\n+            }\n+            out\n+        }\n+\n         _ => unreachable!(),\n-    }\n+    };\n \n-    let out = std::str::from_utf8(&out).unwrap();\n-    write_or_print(out, ofile);\n+    write_or_print(&out, ofile);\n \n     Ok(())\n }"}, {"sha": "f98c8a7916ea49e68d89e06ff02f2ff8c80b0669", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24902ea18e53fde6ec1814953e68be62e71b8ee/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24902ea18e53fde6ec1814953e68be62e71b8ee/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b24902ea18e53fde6ec1814953e68be62e71b8ee", "patch": "@@ -2293,7 +2293,7 @@ impl PpMode {\n \n     pub fn needs_analysis(&self) -> bool {\n         use PpMode::*;\n-        matches!(*self, Mir | MirCFG)\n+        matches!(*self, Mir | MirCFG | ThirTree)\n     }\n }\n "}, {"sha": "520ae974398b4c4d3aa0bc68f0ca103d5e43ee93", "filename": "src/test/ui/issues/issue-83048.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b24902ea18e53fde6ec1814953e68be62e71b8ee/src%2Ftest%2Fui%2Fissues%2Fissue-83048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24902ea18e53fde6ec1814953e68be62e71b8ee/src%2Ftest%2Fui%2Fissues%2Fissue-83048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83048.rs?ref=b24902ea18e53fde6ec1814953e68be62e71b8ee", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags: -Z unpretty=thir-tree\n+\n+pub fn main() {\n+    break; //~ ERROR: `break` outside of a loop [E0268]\n+}"}, {"sha": "62d67d75844a46f040cc4f8c3b93985a64721d0b", "filename": "src/test/ui/issues/issue-83048.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b24902ea18e53fde6ec1814953e68be62e71b8ee/src%2Ftest%2Fui%2Fissues%2Fissue-83048.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b24902ea18e53fde6ec1814953e68be62e71b8ee/src%2Ftest%2Fui%2Fissues%2Fissue-83048.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83048.stderr?ref=b24902ea18e53fde6ec1814953e68be62e71b8ee", "patch": "@@ -0,0 +1,9 @@\n+error[E0268]: `break` outside of a loop\n+  --> $DIR/issue-83048.rs:4:5\n+   |\n+LL |     break;\n+   |     ^^^^^ cannot `break` outside of a loop\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0268`."}]}