{"sha": "d2bc99135f9a8df325de6b6359390f97ad654831", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYmM5OTEzNWY5YThkZjMyNWRlNmI2MzU5MzkwZjk3YWQ2NTQ4MzE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-31T21:48:48Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:24:22Z"}, "message": "Deny internal lints on librustc_lint", "tree": {"sha": "8ce14f83b3b9dd0b8fc9316d7a3c35b16098b507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce14f83b3b9dd0b8fc9316d7a3c35b16098b507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2bc99135f9a8df325de6b6359390f97ad654831", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3jYACgkQaTCGhp1Q\nZjeMkQ//TYxLvObyNzQuFpJsvTHu3wt4ORzQhfewu4EZdY33WVdetp0JUWKNgMtY\nzy/FT3SwyfbOAGphK8OvwPW+wsHbv3qL/6FtEnDKZKCSYPLQ5t+vz+Mfphpsvy3A\nU/cDoXBmQSRvWSbsC+bvUpFwb5toD9rZNkhUcXtmMb3BygJzJzgwoKfkQ+p5ZkUU\nZUndFbNLlLKNF4MzhRbejIkspkjeruVstpVKOqT7lY47DCpAf9IU5SDE6Ga7Hn7O\nLXmKs+KKhQLkznXWbwbvtj4AGQowktHN9bztuAr+rZ6Z4WmqWCGr+YwSaO90+Zf5\nV/uBKEzQqTH3pF6vvqYMVD8e17gbE/GfZ6kgn79C0ESknvQtoadCOekuszUy8/SG\ncQAPEwttsclZLvvVOt9VFUPZdJCMhvts0dkz+3i60iiXJXb+/GINn0Zl8Thg2Uc4\nWEsYVaCEaNeWtVqa19Rjyxf9KBvZ9zwjoNBASdJdVIbFmFFFBFd+P0Er2kp5/uHC\n8ZyFXUkleQ1MDpUf9RqHeUTqMm0EmwmIxVmojtdc5Y1IMS++lYLohqvIKMaJ9jAk\nsZjclN57cscDAoUAdg3DmR3UWe3GPHp3dPn/b4608bMWI2455bmbMteOq+i5H6Gi\nJaoBHenhoUdoMRliErK0SEROhkHGlzcSWpXpFSHXDaejYESd9l8=\n=GzUi\n-----END PGP SIGNATURE-----", "payload": "tree 8ce14f83b3b9dd0b8fc9316d7a3c35b16098b507\nparent 818d300451591b456e7e7b2fc6dbb95698b0ed74\nauthor flip1995 <hello@philkrones.com> 1554068928 +0200\ncommitter flip1995 <hello@philkrones.com> 1554308662 +0200\n\nDeny internal lints on librustc_lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bc99135f9a8df325de6b6359390f97ad654831", "html_url": "https://github.com/rust-lang/rust/commit/d2bc99135f9a8df325de6b6359390f97ad654831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2bc99135f9a8df325de6b6359390f97ad654831/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818d300451591b456e7e7b2fc6dbb95698b0ed74", "url": "https://api.github.com/repos/rust-lang/rust/commits/818d300451591b456e7e7b2fc6dbb95698b0ed74", "html_url": "https://github.com/rust-lang/rust/commit/818d300451591b456e7e7b2fc6dbb95698b0ed74"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "541d779c477fc4ba55fb9f4616929d3b5c273ac5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2bc99135f9a8df325de6b6359390f97ad654831/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2bc99135f9a8df325de6b6359390f97ad654831/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d2bc99135f9a8df325de6b6359390f97ad654831", "patch": "@@ -1036,7 +1036,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n \n         let msg = \"mutating transmuted &mut T from &T may cause undefined behavior, \\\n                    consider instead using an UnsafeCell\";\n-        match get_transmute_from_to(cx, expr) {\n+        match get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (&ty1.sty, &ty2.sty)) {\n             Some((&ty::Ref(_, _, from_mt), &ty::Ref(_, _, to_mt))) => {\n                 if to_mt == hir::Mutability::MutMutable &&\n                    from_mt == hir::Mutability::MutImmutable {\n@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n         fn get_transmute_from_to<'a, 'tcx>\n             (cx: &LateContext<'a, 'tcx>,\n              expr: &hir::Expr)\n-             -> Option<(&'tcx ty::TyKind<'tcx>, &'tcx ty::TyKind<'tcx>)> {\n+             -> Option<(Ty<'tcx>, Ty<'tcx>)> {\n             let def = if let hir::ExprKind::Path(ref qpath) = expr.node {\n                 cx.tables.qpath_def(qpath, expr.hir_id)\n             } else {\n@@ -1062,7 +1062,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n                 let sig = cx.tables.node_type(expr.hir_id).fn_sig(cx.tcx);\n                 let from = sig.inputs().skip_binder()[0];\n                 let to = *sig.output().skip_binder();\n-                return Some((&from.sty, &to.sty));\n+                return Some((from, to));\n             }\n             None\n         }"}, {"sha": "7e77962a16e0bda1f154cc03135c4c4e582de9ac", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2bc99135f9a8df325de6b6359390f97ad654831/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2bc99135f9a8df325de6b6359390f97ad654831/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=d2bc99135f9a8df325de6b6359390f97ad654831", "patch": "@@ -20,6 +20,7 @@\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "fa106532662d18d2fbcffd17a356a409056ef060", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d2bc99135f9a8df325de6b6359390f97ad654831/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2bc99135f9a8df325de6b6359390f97ad654831/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d2bc99135f9a8df325de6b6359390f97ad654831", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         //\n         // No suggestion for: `isize`, `usize`.\n         fn get_type_suggestion<'a>(\n-            t: &ty::TyKind<'_>,\n+            t: Ty<'_>,\n             val: u128,\n             negative: bool,\n         ) -> Option<String> {\n@@ -347,14 +347,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                     }\n                 }\n             }\n-            match t {\n-                &ty::Int(i) => find_fit!(i, val, negative,\n+            match t.sty {\n+                ty::Int(i) => find_fit!(i, val, negative,\n                               I8 => [U8] => [I16, I32, I64, I128],\n                               I16 => [U16] => [I32, I64, I128],\n                               I32 => [U32] => [I64, I128],\n                               I64 => [U64] => [I128],\n                               I128 => [U128] => []),\n-                &ty::Uint(u) => find_fit!(u, val, negative,\n+                ty::Uint(u) => find_fit!(u, val, negative,\n                               U8 => [U8, U16, U32, U64, U128] => [],\n                               U16 => [U16, U32, U64, U128] => [],\n                               U32 => [U32, U64, U128] => [],\n@@ -364,6 +364,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             }\n         }\n \n+        #[cfg_attr(not(stage0), allow(usage_of_ty_tykind))]\n         fn report_bin_hex_error(\n             cx: &LateContext<'_, '_>,\n             expr: &hir::Expr,\n@@ -398,7 +399,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 repr_str, val, t, actually, t\n             ));\n             if let Some(sugg_ty) =\n-                get_type_suggestion(&cx.tables.node_type(expr.hir_id).sty, val, negative)\n+                get_type_suggestion(&cx.tables.node_type(expr.hir_id), val, negative)\n             {\n                 if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n                     let (sans_suffix, _) = repr_str.split_at(pos);"}]}