{"sha": "df93deab10850d52252829770895b0249b0d7f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOTNkZWFiMTA4NTBkNTIyNTI4Mjk3NzA4OTViMDI0OWIwZDdmMWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-05-05T12:47:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-05-21T15:47:30Z"}, "message": "Make various fixes:\n- add feature gate\n- add basic tests\n- adjust parser to eliminate conflict between `const fn` and associated\nconstants\n- allow `const fn` in traits/trait-impls, but forbid later in type check\n- correct some merge conflicts", "tree": {"sha": "4e8a7657c0d2714319800a07c485bff473043bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e8a7657c0d2714319800a07c485bff473043bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df93deab10850d52252829770895b0249b0d7f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df93deab10850d52252829770895b0249b0d7f1e", "html_url": "https://github.com/rust-lang/rust/commit/df93deab10850d52252829770895b0249b0d7f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df93deab10850d52252829770895b0249b0d7f1e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb206bf34a2463317b9fa1ef3c0ff35d921f8920", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb206bf34a2463317b9fa1ef3c0ff35d921f8920", "html_url": "https://github.com/rust-lang/rust/commit/fb206bf34a2463317b9fa1ef3c0ff35d921f8920"}], "stats": {"total": 430, "additions": 322, "deletions": 108}, "files": [{"sha": "b70d73c9141aebc1a572be1e0b6e0c2a79a215ff", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -845,5 +845,6 @@ register_diagnostics! {\n     E0314, // closure outlives stack frame\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n-    E0370  // discriminant overflow\n+    E0370, // discriminant overflow\n+    E0378  // method calls limited to constant inherent methods\n }"}, {"sha": "88e0b739a0fbba683185bd3509007b941595eccf", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -879,12 +879,11 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n             let any_types = !scheme.generics.types.is_empty();\n             let needs_inline = any_types || is_default_impl ||\n                                attr::requests_inline(&impl_item.attrs);\n-            let constness = ast_method.pe_constness();\n-            if needs_inline || constness == ast::Constness::Const {\n+            if needs_inline || sig.constness == ast::Constness::Const {\n                 encode_inlined_item(ecx, rbml_w, IIImplItemRef(local_def(parent_id),\n                                                                impl_item));\n             }\n-            encode_constness(rbml_w, constness);\n+            encode_constness(rbml_w, sig.constness);\n             if !any_types {\n                 encode_symbol(ecx, rbml_w, m.def_id.node);\n             }"}, {"sha": "a70df34bd70a82037ad022031e5748cf493ff08d", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -36,7 +36,6 @@ use util::nodemap::NodeMap;\n use util::ppaux::Repr;\n \n use syntax::ast;\n-use syntax::ast_util::PostExpansionMethod;\n use syntax::codemap::Span;\n use syntax::visit::{self, Visitor};\n \n@@ -149,16 +148,16 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             Entry::Occupied(entry) => return *entry.get(),\n             Entry::Vacant(entry) => {\n                 // Prevent infinite recursion on re-entry.\n-                entry.insert(PURE_CONST);\n+                entry.insert(ConstQualif::empty());\n             }\n         }\n \n         let mode = match fk {\n-            visit::FkItemFn(_, _, _, ast::Constness::Const, _) => {\n+            visit::FkItemFn(_, _, _, ast::Constness::Const, _, _) => {\n                 Mode::ConstFn\n             }\n-            visit::FkMethod(_, _, m) => {\n-                if m.pe_constness() == ast::Constness::Const {\n+            visit::FkMethod(_, m, _) => {\n+                if m.constness == ast::Constness::Const {\n                     Mode::ConstFn\n                 } else {\n                     Mode::Var\n@@ -189,7 +188,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n         // Keep only bits that aren't affected by function body (NON_ZERO_SIZED),\n         // and bits that don't change semantics, just optimizations (PREFER_IN_PLACE).\n-        let qualif = qualif & (NON_ZERO_SIZED | PREFER_IN_PLACE);\n+        let qualif = qualif & (ConstQualif::NON_ZERO_SIZED | ConstQualif::PREFER_IN_PLACE);\n \n         self.tcx.const_qualif_map.borrow_mut().insert(fn_id, qualif);\n         qualif\n@@ -210,7 +209,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             self.add_qualif(qualif);\n \n             if ty::type_contents(self.tcx, ret_ty).interior_unsafe() {\n-                self.add_qualif(MUTABLE_MEM);\n+                self.add_qualif(ConstQualif::MUTABLE_MEM);\n             }\n \n             true\n@@ -366,7 +365,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                                                        macro in const?!\")\n                 }\n             };\n-            self.add_qualif(NOT_CONST);\n+            self.add_qualif(ConstQualif::NOT_CONST);\n             if self.mode != Mode::Var {\n                 span_err!(self.tcx.sess, span, E0016,\n                           \"blocks in {}s are limited to items and \\\n@@ -602,7 +601,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                 }\n                 Some(def::DefLocal(_)) if v.mode == Mode::ConstFn => {\n                     // Sadly, we can't determine whether the types are zero-sized.\n-                    v.add_qualif(NOT_CONST | NON_ZERO_SIZED);\n+                    v.add_qualif(ConstQualif::NOT_CONST | ConstQualif::NON_ZERO_SIZED);\n                 }\n                 def => {\n                     v.add_qualif(ConstQualif::NOT_CONST);\n@@ -651,20 +650,8 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                 }\n             }\n         }\n-        ast::ExprBlock(ref block) => {\n-            // Check all statements in the block\n-            let mut block_span_err = |span| {\n-                v.add_qualif(ConstQualif::NOT_CONST);\n-                if v.mode != Mode::Var {\n-                    span_err!(v.tcx.sess, e.span, E0015,\n-                              \"function calls in {}s are limited to \\\n-                               constant functions, \\\n-                               struct and enum constructors\", v.msg());\n-                }\n-            }\n-        }\n         ast::ExprMethodCall(..) => {\n-            let method_did = match v.tcx.method_map.borrow()[method_call].origin {\n+            let method_did = match v.tcx.method_map.borrow()[&method_call].origin {\n                 ty::MethodStatic(did) => Some(did),\n                 _ => None\n             };\n@@ -673,9 +660,9 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                 None => false\n             };\n             if !is_const {\n-                v.add_qualif(NOT_CONST);\n+                v.add_qualif(ConstQualif::NOT_CONST);\n                 if v.mode != Mode::Var {\n-                    span_err!(v.tcx.sess, e.span, E0021,\n+                    span_err!(v.tcx.sess, e.span, E0378,\n                               \"method calls in {}s are limited to \\\n                                constant inherent methods\", v.msg());\n                 }"}, {"sha": "e5100c32cc2da48e3bc472b360144534f6dede43", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -25,7 +25,7 @@ use util::ppaux::Repr;\n \n use syntax::ast::{self, Expr};\n use syntax::ast_map::blocks::FnLikeNode;\n-use syntax::ast_util::{self, PostExpansionMethod};\n+use syntax::ast_util;\n use syntax::codemap::Span;\n use syntax::feature_gate;\n use syntax::parse::token::InternedString;\n@@ -216,17 +216,17 @@ fn inline_const_fn_from_external_crate(tcx: &ty::ctxt, def_id: ast::DefId)\n     let fn_id = match csearch::maybe_get_item_ast(tcx, def_id,\n         box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n         csearch::FoundAst::Found(&ast::IIItem(ref item)) => Some(item.id),\n-        csearch::FoundAst::Found(&ast::IIImplItem(_, ast::MethodImplItem(ref m))) => Some(m.id),\n+        csearch::FoundAst::Found(&ast::IIImplItem(_, ref item)) => Some(item.id),\n         _ => None\n     };\n     tcx.extern_const_fns.borrow_mut().insert(def_id,\n                                              fn_id.unwrap_or(ast::DUMMY_NODE_ID));\n     fn_id\n }\n \n-pub fn lookup_const_fn_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n-                                 -> Option<FnLikeNode<'a>> {\n-\n+pub fn lookup_const_fn_by_id<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: ast::DefId)\n+                                   -> Option<FnLikeNode<'tcx>>\n+{\n     let fn_id = if !ast_util::is_local(def_id) {\n         if let Some(fn_id) = inline_const_fn_from_external_crate(tcx, def_id) {\n             fn_id\n@@ -243,11 +243,11 @@ pub fn lookup_const_fn_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n     };\n \n     match fn_like.kind() {\n-        visit::FkItemFn(_, _, _, ast::Constness::Const, _) => {\n+        visit::FkItemFn(_, _, _, ast::Constness::Const, _, _) => {\n             Some(fn_like)\n         }\n-        visit::FkMethod(_, _, m) => {\n-            if m.pe_constness() == ast::Constness::Const {\n+        visit::FkMethod(_, m, _) => {\n+            if m.constness == ast::Constness::Const {\n                 Some(fn_like)\n             } else {\n                 None"}, {"sha": "cfff439f02d19d13215369ea7977cfcb2824775d", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 block: &'v ast::Block, span: Span, _: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n-            visit::FkItemFn(_, _, unsafety, _, _) =>\n+            visit::FkItemFn(_, _, unsafety, _, _, _) =>\n                 (true, unsafety == ast::Unsafety::Unsafe),\n             visit::FkMethod(_, sig, _) =>\n                 (true, sig.unsafety == ast::Unsafety::Unsafe),"}, {"sha": "dfdcba1678f19578c871d597c6421391aed4ef9e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -447,7 +447,7 @@ impl<'a> LifetimeContext<'a> {\n                    fb: &'b ast::Block,\n                    _span: Span) {\n         match fk {\n-            visit::FkItemFn(_, generics, _, _, _) => {\n+            visit::FkItemFn(_, generics, _, _, _, _) => {\n                 visit::walk_fn_decl(self, fd);\n                 self.visit_generics(generics);\n             }"}, {"sha": "d75dc861e83304a0702fb699333b7df9c3e3185c", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -23,7 +23,7 @@ use syntax::{attr, visit};\n use syntax::ast;\n use syntax::ast::{Attribute, Block, Crate, DefId, FnDecl, NodeId, Variant};\n use syntax::ast::{Item, Generics, StructField};\n-use syntax::ast_util::{is_local, PostExpansionMethod};\n+use syntax::ast_util::is_local;\n use syntax::attr::{Stability, AttrMetaMethods};\n use syntax::visit::{FnKind, Visitor};\n use syntax::feature_gate::emit_feature_err;"}, {"sha": "e9a459b91191b73b05d4bffb32e324e51b544174", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1324,7 +1324,7 @@ impl LintPass for UnsafeCode {\n     fn check_fn(&mut self, cx: &Context, fk: visit::FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, span: Span, _: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(_, _, ast::Unsafety::Unsafe, _, _) =>\n+            visit::FkItemFn(_, _, ast::Unsafety::Unsafe, _, _, _) =>\n                 cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\"),\n \n             visit::FkMethod(_, sig, _) => {"}, {"sha": "7afc1afc224eefbd48675c476fef1452f5da7fa0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -245,7 +245,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n-            visit::FkItemFn(_, generics, _, _, _) => {\n+            visit::FkItemFn(_, generics, _, _, _, _) => {\n                 self.visit_generics(generics);\n                 ItemRibKind\n             }"}, {"sha": "00a1f728b9b0003e859a05810e799b8477b61dc0", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1167,7 +1167,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                           &location[..],\n                                           self.cur_scope);\n             }\n-            ast::ItemFn(ref decl, _, _, ref ty_params, ref body) =>\n+            ast::ItemFn(ref decl, _, _, _, ref ty_params, ref body) =>\n                 self.process_fn(item, &**decl, ty_params, &**body),\n             ast::ItemStatic(ref typ, _, ref expr) =>\n                 self.process_static_or_const_item(item, typ, expr),"}, {"sha": "c11bb922f1cb2708413df1f75515e3df8a56f417", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -41,7 +41,7 @@ use syntax::{ast, ast_util};\n use syntax::parse::token;\n use syntax::ptr::P;\n \n-type FnArgMap<'a> = Option<&'a NodeMap<ValueRef>>;\n+pub type FnArgMap<'a> = Option<&'a NodeMap<ValueRef>>;\n \n pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: &ast::Lit)\n     -> ValueRef {\n@@ -863,7 +863,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                       _ => break\n                   };\n               }\n-              let def = cx.tcx().def_map.borrow()[callee.id].full_def();\n+              let def = cx.tcx().def_map.borrow()[&callee.id].full_def();\n               let arg_vals = map_list(args);\n               match def {\n                   def::DefFn(did, _) | def::DefMethod(did, _) => {\n@@ -893,7 +893,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n           ast::ExprMethodCall(_, _, ref args) => {\n               let arg_vals = map_list(args);\n               let method_call = ty::MethodCall::expr(e.id);\n-              let method_did = match cx.tcx().method_map.borrow()[method_call].origin {\n+              let method_did = match cx.tcx().method_map.borrow()[&method_call].origin {\n                   ty::MethodStatic(did) => did,\n                   _ => cx.sess().span_bug(e.span, \"expected a const method def\")\n               };"}, {"sha": "f9ad3d1a857f11cd751f3e3977a2daa27b472a2e", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -232,7 +232,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             }\n \n             match item.node {\n-                ast::ItemFn(ref fn_decl, _, _, ref generics, ref top_level_block) => {\n+                ast::ItemFn(ref fn_decl, _, _, _, ref generics, ref top_level_block) => {\n                     (item.ident.name, fn_decl, generics, top_level_block, item.span, true)\n                 }\n                 _ => {"}, {"sha": "24f429a9ca015603094625f221f82afb47f57b04", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -830,11 +830,15 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx ast::Item) {\n                     check_const(ccx, trait_item.span, &*expr, trait_item.id)\n                 }\n                 ast::MethodTraitItem(ref sig, Some(ref body)) => {\n+                    check_trait_fn_not_const(ccx, trait_item.span, sig.constness);\n+\n                     check_method_body(ccx, &trait_def.generics, sig, body,\n                                       trait_item.id, trait_item.span);\n                 }\n+                ast::MethodTraitItem(ref sig, None) => {\n+                    check_trait_fn_not_const(ccx, trait_item.span, sig.constness);\n+                }\n                 ast::ConstTraitItem(_, None) |\n-                ast::MethodTraitItem(_, None) |\n                 ast::TypeTraitItem(..) => {\n                     // Nothing to do.\n                 }\n@@ -845,6 +849,20 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx ast::Item) {\n     }\n }\n \n+fn check_trait_fn_not_const<'a,'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n+                                     span: Span,\n+                                     constness: ast::Constness)\n+{\n+    match constness {\n+        ast::Constness::NotConst => {\n+            // good\n+        }\n+        ast::Constness::Const => {\n+            span_err!(ccx.tcx.sess, span, E0379, \"trait fns cannot be declared const\");\n+        }\n+    }\n+}\n+\n fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                generics: &ast::Generics,\n                                item: &ast::Item) {\n@@ -966,7 +984,9 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     }\n                 }\n             }\n-            ast::MethodImplItem(_, ref body) => {\n+            ast::MethodImplItem(ref sig, ref body) => {\n+                check_trait_fn_not_const(ccx, impl_item.span, sig.constness);\n+\n                 let impl_method_def_id = local_def(impl_item.id);\n                 let impl_item_ty = ty::impl_or_trait_item(ccx.tcx,\n                                                           impl_method_def_id);"}, {"sha": "5796a5599ce99af1b8d85d8bbdb7e69edc88f1f5", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1113,6 +1113,7 @@ register_diagnostics! {\n            // fields need coercions\n     E0376, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures\n-    E0377  // the trait `CoerceUnsized` may only be implemented for a coercion\n+    E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n+    E0379  // trait fns cannot be const\n }"}, {"sha": "045a38228c68539060d30aa94c06d18724096ab4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1352,15 +1352,18 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n                 generics: generics,\n                 self_: self_,\n                 decl: decl,\n-                abi: self.fty.abi\n+                abi: self.fty.abi,\n+\n+                // trait methods canot (currently, at least) be const\n+                constness: ast::Constness::NotConst,\n             })\n         } else {\n             TyMethodItem(TyMethod {\n                 unsafety: self.fty.unsafety,\n                 generics: generics,\n                 self_: self_,\n                 decl: decl,\n-                abi: self.fty.abi\n+                abi: self.fty.abi,\n             })\n         };\n "}, {"sha": "6e70b3711e4e8d105ef2e55ec6260f290642715c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -37,7 +37,7 @@ pub struct VisSpace(pub Option<ast::Visibility>);\n pub struct UnsafetySpace(pub ast::Unsafety);\n /// Similarly to VisSpace, this structure is used to render a function constness\n /// with a space after it.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ConstnessSpace(pub ast::Constness);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);"}, {"sha": "e86d77a3be03e0350135dd29b1e1f15b14a375c0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     name: ast::Ident, fd: &ast::FnDecl,\n                     unsafety: &ast::Unsafety,\n                     constness: ast::Constness,\n-                    _abi: &abi::Abi,\n+                    abi: &abi::Abi,\n                     gen: &ast::Generics) -> Function {\n         debug!(\"Visiting fn\");\n         Function {\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.enums.push(self.visit_enum_def(item, name, ed, gen)),\n             ast::ItemStruct(ref sd, ref gen) =>\n                 om.structs.push(self.visit_struct_def(item, name, &**sd, gen)),\n-            ast::ItemFn(ref fd, unsafety, constness, ref abi, ref gen, _) =>\n+            ast::ItemFn(ref fd, ref unsafety, constness, ref abi, ref gen, _) =>\n                 om.fns.push(self.visit_fn(item, name, &**fd, unsafety,\n                                           constness, abi, gen)),\n             ast::ItemTy(ref ty, ref gen) => {"}, {"sha": "5b03b3bf0385c1daa4f66a2089723bcc74ea0136", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1215,6 +1215,7 @@ pub struct TypeField {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MethodSig {\n     pub unsafety: Unsafety,\n+    pub constness: Constness,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n     pub generics: Generics,\n@@ -1549,7 +1550,6 @@ pub enum ExplicitSelf_ {\n pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-             Constness,\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token"}, {"sha": "99686d54ce5893ca638ed4c1257ba0fc19c865ff", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -189,7 +189,7 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> visit::FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n-            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi, p.constness, p.vis)\n+            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n         };\n         let closure = |_: ClosureParts| {\n             visit::FkFnBlock\n@@ -213,13 +213,12 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             ast_map::NodeItem(i) => match i.node {\n-                ast::ItemFn(ref decl, unsafety, constness, ref abi, ref generics, ref block) =>\n+                ast::ItemFn(ref decl, unsafety, constness, abi, ref generics, ref block) =>\n                     item_fn(ItemFnParts {\n                         id: i.id,\n                         ident: i.ident,\n                         decl: &**decl,\n                         unsafety: unsafety,\n-                        constness: constness,\n                         body: &**block,\n                         generics: generics,\n                         abi: abi,"}, {"sha": "bb8096f2770693b5f23aa9bdc2cc993523a074bc", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -251,7 +251,6 @@ pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: Option<&Ty>) -> Ident\n     token::gensym_ident(&pretty[..])\n }\n \n-                 _,\n pub fn struct_field_visibility(field: ast::StructField) -> Visibility {\n     match field.node.kind {\n         ast::NamedField(_, v) | ast::UnnamedField(v) => v\n@@ -441,7 +440,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n         self.operation.visit_id(node_id);\n \n         match function_kind {\n-            visit::FkItemFn(_, generics, _, _, _) => {\n+            visit::FkItemFn(_, generics, _, _, _, _) => {\n                 self.visit_generics_helper(generics)\n             }\n             visit::FkMethod(_, sig, _) => {"}, {"sha": "5f0efd14eecc3106675440a583f6ef92c5ce90ac", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1396,6 +1396,7 @@ fn expand_and_rename_method(sig: ast::MethodSig, body: P<ast::Block>,\n         abi: sig.abi,\n         explicit_self: fld.fold_explicit_self(sig.explicit_self),\n         unsafety: sig.unsafety,\n+        constness: sig.constness,\n         decl: rewritten_fn_decl\n     }, rewritten_body)\n }"}, {"sha": "2b749dd890ece21b6f39a7b26b3123ee73c31e2b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -155,6 +155,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n     (\"associated_consts\", \"1.0.0\", Active),\n+\n+    // Allows the definition of `const fn` functions.\n+    (\"const_fn\", \"1.2.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -640,6 +643,19 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 block: &'v ast::Block,\n                 span: Span,\n                 _node_id: NodeId) {\n+        // check for const fn declarations\n+        match fn_kind {\n+            visit::FkItemFn(_, _, _, ast::Constness::Const, _, _) => {\n+                self.gate_feature(\"const_fn\", span, \"const fn is unstable\");\n+            }\n+            _ => {\n+                // stability of const fn methods are covered in\n+                // visit_trait_item and visit_impl_item below; this is\n+                // because default methods don't pass through this\n+                // point.\n+            }\n+        }\n+\n         match fn_kind {\n             visit::FkItemFn(_, _, _, _, abi, _) if abi == Abi::RustIntrinsic => {\n                 self.gate_feature(\"intrinsics\",\n@@ -664,6 +680,11 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   ti.span,\n                                   \"associated constants are experimental\")\n             }\n+            ast::MethodTraitItem(ref sig, _) => {\n+                if sig.constness == ast::Constness::Const {\n+                    self.gate_feature(\"const_fn\", ti.span, \"const fn is unstable\");\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_trait_item(self, ti);\n@@ -676,6 +697,11 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   ii.span,\n                                   \"associated constants are experimental\")\n             }\n+            ast::MethodImplItem(ref sig, _) => {\n+                if sig.constness == ast::Constness::Const {\n+                    self.gate_feature(\"const_fn\", ii.span, \"const fn is unstable\");\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_impl_item(self, ii);"}, {"sha": "7806a27c53e1c622500064631bb3917d71718080", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1125,10 +1125,9 @@ pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> Method\n         abi: sig.abi,\n         explicit_self: folder.fold_explicit_self(sig.explicit_self),\n         unsafety: sig.unsafety,\n+        constness: sig.constness,\n         decl: folder.fold_fn_decl(sig.decl)\n     }\n-                     constness,\n-                         constness,\n }\n \n pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {"}, {"sha": "eb6420165dab7b4194f22ea253d7ebe2abfffe20", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -1160,7 +1160,8 @@ impl<'a> Parser<'a> {\n                 let TyParam {ident, bounds, default, ..} = try!(p.parse_ty_param());\n                 try!(p.expect(&token::Semi));\n                 (ident, TypeTraitItem(bounds, default))\n-            } else if try!(p.eat_keyword(keywords::Const)) {\n+            } else if p.is_const_item() {\n+                try!(p.expect_keyword(keywords::Const));\n                 let ident = try!(p.parse_ident());\n                 try!(p.expect(&token::Colon));\n                 let ty = try!(p.parse_ty_sum());\n@@ -1175,13 +1176,7 @@ impl<'a> Parser<'a> {\n                 };\n                 (ident, ConstTraitItem(ty, default))\n             } else {\n-                let unsafety = try!(p.parse_unsafety());\n-                let abi = if try!(p.eat_keyword(keywords::Extern)) {\n-                    try!(p.parse_opt_abi()).unwrap_or(abi::C)\n-                } else {\n-                    abi::Rust\n-                };\n-                try!(p.expect_keyword(keywords::Fn));\n+                let (constness, unsafety, abi) = try!(p.parse_fn_front_matter());\n \n                 let ident = try!(p.parse_ident());\n                 let mut generics = try!(p.parse_generics());\n@@ -1196,7 +1191,7 @@ impl<'a> Parser<'a> {\n                 generics.where_clause = try!(p.parse_where_clause());\n                 let sig = ast::MethodSig {\n                     unsafety: unsafety,\n-                    constness: ast::Constness::NotConst;\n+                    constness: constness,\n                     decl: d,\n                     generics: generics,\n                     abi: abi,\n@@ -4372,6 +4367,36 @@ impl<'a> Parser<'a> {\n         Ok((ident, ItemFn(decl, unsafety, constness, abi, generics, body), Some(inner_attrs)))\n     }\n \n+    /// true if we are looking at `const ID`, false for things like `const fn` etc\n+    pub fn is_const_item(&mut self) -> bool {\n+        self.token.is_keyword(keywords::Const) &&\n+            !self.look_ahead(1, |t| t.is_keyword(keywords::Fn))\n+    }\n+\n+    /// parses all the \"front matter\" for a `fn` declaration, up to\n+    /// and including the `fn` keyword:\n+    ///\n+    /// - `const fn`\n+    /// - `unsafe fn`\n+    /// - `extern fn`\n+    /// - etc\n+    pub fn parse_fn_front_matter(&mut self) -> PResult<(ast::Constness, ast::Unsafety, abi::Abi)> {\n+        let is_const_fn = try!(self.eat_keyword(keywords::Const));\n+        let (constness, unsafety, abi) = if is_const_fn {\n+            (Constness::Const, Unsafety::Normal, abi::Rust)\n+        } else {\n+            let unsafety = try!(self.parse_unsafety());\n+            let abi = if try!(self.eat_keyword(keywords::Extern)) {\n+                try!(self.parse_opt_abi()).unwrap_or(abi::C)\n+            } else {\n+                abi::Rust\n+            };\n+            (Constness::NotConst, unsafety, abi)\n+        };\n+        try!(self.expect_keyword(keywords::Fn));\n+        Ok((constness, unsafety, abi))\n+    }\n+\n     /// Parse an impl item.\n     pub fn parse_impl_item(&mut self) -> PResult<P<ImplItem>> {\n         maybe_whole!(no_clone self, NtImplItem);\n@@ -4385,7 +4410,8 @@ impl<'a> Parser<'a> {\n             let typ = try!(self.parse_ty_sum());\n             try!(self.expect(&token::Semi));\n             (name, TypeImplItem(typ))\n-        } else if try!(self.eat_keyword(keywords::Const)) {\n+        } else if self.is_const_item() {\n+            try!(self.expect_keyword(keywords::Const));\n             let name = try!(self.parse_ident());\n             try!(self.expect(&token::Colon));\n             let typ = try!(self.parse_ty_sum());\n@@ -4450,19 +4476,7 @@ impl<'a> Parser<'a> {\n             }\n             Ok((token::special_idents::invalid, vec![], ast::MacImplItem(m)))\n         } else {\n-            let is_const_fn = !is_trait_impl && self.eat_keyword(keywords::Const);\n-            let (constness, unsafety, abi) = if is_const_fn {\n-                (Constness::Const, Unsafety::Normal, abi::Rust)\n-            } else {\n-                let unsafety = try!(self.parse_unsafety());\n-                let abi = if try!(self.eat_keyword(keywords::Extern)) {\n-                    try!(self.parse_opt_abi()).unwrap_or(abi::C)\n-                } else {\n-                    abi::Rust\n-                };\n-                (Constness::NotConst, unsafety, abi)\n-            };\n-            try!(self.expect_keyword(keywords::Fn));\n+            let (constness, unsafety, abi) = try!(self.parse_fn_front_matter());\n             let ident = try!(self.parse_ident());\n             let mut generics = try!(self.parse_generics());\n             let (explicit_self, decl) = try!(self.parse_fn_decl_with_self(|p| {\n@@ -4475,7 +4489,7 @@ impl<'a> Parser<'a> {\n                 abi: abi,\n                 explicit_self: explicit_self,\n                 unsafety: unsafety,\n-                constness: constness;\n+                constness: constness,\n                 decl: decl\n              }, body)))\n         }\n@@ -5301,17 +5315,17 @@ impl<'a> Parser<'a> {\n         if try!(self.eat_keyword(keywords::Const) ){\n             if self.check_keyword(keywords::Fn) {\n                 // CONST FUNCTION ITEM\n-                self.bump();\n+                try!(self.bump());\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(Unsafety::Normal, Constness::Const, abi::Rust);\n+                    try!(self.parse_item_fn(Unsafety::Normal, Constness::Const, abi::Rust));\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n                                         ident,\n                                         item_,\n                                         visibility,\n                                         maybe_append(attrs, extra_attrs));\n-                return Ok(item);\n+                return Ok(Some(item));\n             }\n \n             // CONST ITEM"}, {"sha": "0b211cd07332075d7ea29fb7b7e4ab224a2b9b28", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -378,26 +378,14 @@ pub fn ident_to_string(id: &ast::Ident) -> String {\n     to_string(|s| s.print_ident(*id))\n }\n \n-<<<<<<< HEAD\n-pub fn fun_to_string(decl: &ast::FnDecl, unsafety: ast::Unsafety, name: ast::Ident,\n-                  opt_explicit_self: Option<&ast::ExplicitSelf_>,\n-                  generics: &ast::Generics) -> String {\n-    to_string(|s| {\n-||||||| parent of 61a958e... syntax: parse `const fn` for free functions and inherent methods.\n-pub fn fun_to_string(decl: &ast::FnDecl, unsafety: ast::Unsafety, name: ast::Ident,\n-                  opt_explicit_self: Option<&ast::ExplicitSelf_>,\n-                  generics: &ast::Generics) -> String {\n-    $to_string(|s| {\n-=======\n pub fn fun_to_string(decl: &ast::FnDecl,\n                      unsafety: ast::Unsafety,\n                      constness: ast::Constness,\n                      name: ast::Ident,\n                      opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                      generics: &ast::Generics)\n                      -> String {\n-    $to_string(|s| {\n->>>>>>> 61a958e... syntax: parse `const fn` for free functions and inherent methods.\n+    to_string(|s| {\n         try!(s.head(\"\"));\n         try!(s.print_fn(decl, unsafety, constness, abi::Rust, Some(name),\n                         generics, opt_explicit_self, ast::Inherited));\n@@ -2751,7 +2739,7 @@ impl<'a> State<'a> {\n                            ast::Constness::NotConst,\n                            abi,\n                            name,\n-                           generics,\n+                           &generics,\n                            opt_explicit_self,\n                            ast::Inherited));\n         self.end()"}, {"sha": "61fddd6bed801d813a51d75fe4f9912706dbfdf3", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -605,7 +605,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n     walk_fn_decl(visitor, function_declaration);\n \n     match function_kind {\n-        FkItemFn(_, generics, _, _, _) => {\n+        FkItemFn(_, generics, _, _, _, _) => {\n             visitor.visit_generics(generics);\n         }\n         FkMethod(_, sig, _) => {"}, {"sha": "c3a1de11752f813460c1d33e622a576893d23a5a", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -117,7 +117,7 @@ static mut STATIC14: SafeStruct = SafeStruct {\n //~^ ERROR mutable statics are not allowed to have destructors\n     field1: SafeEnum::Variant1,\n     field2: SafeEnum::Variant4(\"str\".to_string())\n-//~^ ERROR static contains unimplemented expression type\n+//~^ ERROR method calls in statics are limited to constant inherent methods\n };\n \n static STATIC15: &'static [Box<MyOwned>] = &["}, {"sha": "d813cf32954e3349edcbfe5c1e21a7d3bb6af584", "filename": "src/test/compile-fail/const-fn-mismatch.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can't declare a const fn in an impl -- right now it's\n+// just not allowed at all, though eventually it'd make sense to allow\n+// it if the trait fn is const (but right now no trait fns can be\n+// const).\n+\n+#![feature(const_fn)]\n+\n+trait Foo {\n+    fn f() -> u32;\n+}\n+\n+impl Foo for u32 {\n+    const fn f() -> u32 { 22 } //~ ERROR E0379\n+}\n+\n+fn main() { }"}, {"sha": "191f3e025270fd7c23b2911c3a7790a296ea059e", "filename": "src/test/compile-fail/const-fn-not-in-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that const fn is illegal in a trait declaration, whether or\n+// not a default is provided.\n+\n+#![feature(const_fn)]\n+\n+trait Foo {\n+    const fn f() -> u32; //~ ERROR trait fns cannot be declared const\n+    const fn g() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n+}\n+\n+fn main() { }"}, {"sha": "baa3eba06805facb90af3a3a33d8956dce186b3b", "filename": "src/test/compile-fail/const-fn-not-safe-for-const.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can't call random fns in a const fn or do other bad things.\n+\n+#![feature(const_fn)]\n+\n+use std::mem::transmute;\n+\n+fn random() -> u32 { 0 }\n+\n+const fn sub(x: &u32) -> usize {\n+    unsafe { transmute(x) } //~ ERROR E0015\n+}\n+\n+const fn sub1() -> u32 {\n+    random() //~ ERROR E0015\n+}\n+\n+static Y: u32 = 0;\n+\n+const fn get_Y() -> u32 {\n+    Y\n+        //~^ ERROR E0013\n+        //~| ERROR cannot refer to other statics by value\n+}\n+\n+const fn get_Y_addr() -> &'static u32 {\n+    &Y\n+        //~^ ERROR E0013\n+}\n+\n+const fn get() -> u32 {\n+    let x = 22; //~ ERROR E0016\n+    let y = 44; //~ ERROR E0016\n+    x + y\n+}\n+\n+fn main() {\n+}"}, {"sha": "8aa5189bcd6bb844a18db0734725470d48c2c7c2", "filename": "src/test/compile-fail/const-fn-stability.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const fn without feature gate.\n+\n+const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n+\n+trait Foo {\n+    const fn foo() -> u32; //~ ERROR const fn is unstable\n+    const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+}\n+\n+impl Foo {\n+    const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n+}\n+\n+impl Foo for u32 {\n+    const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+}\n+\n+fn main() { }"}, {"sha": "2b53e92d9bce6b63b3a510bfed7e096c146e1f93", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -20,6 +20,6 @@ mod Y {\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n //~^ ERROR the trait `core::marker::Sync` is not implemented for the type\n-//~| ERROR function calls in statics are limited to struct and enum constructors\n+//~| ERROR E0015\n \n fn main() {}"}, {"sha": "5d85fe93a48886905c4aefa49ae204690569f79a", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -17,6 +17,6 @@ static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n //~| ERROR the trait `core::marker::Sync` is not implemented for the type\n //~| ERROR the trait `core::marker::Sync` is not implemented for the type\n-//~| ERROR function calls in statics are limited to struct and enum constructors\n+//~| ERROR E0015\n \n fn main() { }"}, {"sha": "a533a5bd54dccdd3d5d5b3b17463a458a41ee521", "filename": "src/test/compile-fail/static-vec-repeat-not-constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fstatic-vec-repeat-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Fcompile-fail%2Fstatic-vec-repeat-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-vec-repeat-not-constant.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -11,6 +11,6 @@\n fn foo() -> isize { 23 }\n \n static a: [isize; 2] = [foo(); 2];\n-//~^ ERROR: function calls in statics are limited to struct and enum constructors\n+//~^ ERROR: E0015\n \n fn main() {}"}, {"sha": "86f5dedc4d1b1fdc5717999ab855fc1bc5d88d9c", "filename": "src/test/run-pass/const-fn-nested.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Frun-pass%2Fconst-fn-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Frun-pass%2Fconst-fn-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-nested.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a call whose argument is the result of another call.\n+\n+#![feature(const_fn)]\n+\n+const fn sub(x: u32, y: u32) -> u32 {\n+    x - y\n+}\n+\n+const X: u32 = sub(sub(88, 44), 22);\n+\n+fn main() {\n+    assert_eq!(X, 22);\n+}"}, {"sha": "9bd8eb55cc388351f937a64e4bf4dd0cad349afb", "filename": "src/test/run-pass/const-fn.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Frun-pass%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df93deab10850d52252829770895b0249b0d7f1e/src%2Ftest%2Frun-pass%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn.rs?ref=df93deab10850d52252829770895b0249b0d7f1e", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A very basic test of const fn functionality.\n+\n+#![feature(const_fn)]\n+\n+const fn add(x: u32, y: u32) -> u32 {\n+    x + y\n+}\n+\n+const fn sub(x: u32, y: u32) -> u32 {\n+    x - y\n+}\n+\n+const SUM: u32 = add(44, 22);\n+const DIFF: u32 = sub(44, 22);\n+\n+fn main() {\n+    assert_eq!(SUM, 66);\n+    assert!(SUM != 88);\n+\n+    assert_eq!(DIFF, 22);\n+\n+}"}]}