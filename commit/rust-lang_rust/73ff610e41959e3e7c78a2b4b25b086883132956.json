{"sha": "73ff610e41959e3e7c78a2b4b25b086883132956", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZmY2MTBlNDE5NTllM2U3Yzc4YTJiNGIyNWIwODY4ODMxMzI5NTY=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-07-10T23:23:33Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-07-10T23:23:33Z"}, "message": "Use From instead of Into in resolver method", "tree": {"sha": "ececc181c9e62ef31f3f5751180ace77c76880e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ececc181c9e62ef31f3f5751180ace77c76880e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73ff610e41959e3e7c78a2b4b25b086883132956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73ff610e41959e3e7c78a2b4b25b086883132956", "html_url": "https://github.com/rust-lang/rust/commit/73ff610e41959e3e7c78a2b4b25b086883132956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73ff610e41959e3e7c78a2b4b25b086883132956/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f9e8806a26c5998a691974ba8e3655a2186766", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f9e8806a26c5998a691974ba8e3655a2186766", "html_url": "https://github.com/rust-lang/rust/commit/d6f9e8806a26c5998a691974ba8e3655a2186766"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8c5e1b74601ab04344c6155b278b22bc94ff41d7", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73ff610e41959e3e7c78a2b4b25b086883132956/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ff610e41959e3e7c78a2b4b25b086883132956/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=73ff610e41959e3e7c78a2b4b25b086883132956", "patch": "@@ -203,18 +203,18 @@ impl ModuleDef {\n \n     pub fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n         Some(match self {\n-            ModuleDef::Module(m) => Into::<ModuleId>::into(m.clone()).resolver(db),\n-            ModuleDef::Function(f) => Into::<FunctionId>::into(f.clone()).resolver(db),\n-            ModuleDef::Adt(adt) => Into::<AdtId>::into(adt.clone()).resolver(db),\n+            ModuleDef::Module(m) => ModuleId::from(m.clone()).resolver(db),\n+            ModuleDef::Function(f) => FunctionId::from(f.clone()).resolver(db),\n+            ModuleDef::Adt(adt) => AdtId::from(adt.clone()).resolver(db),\n             ModuleDef::EnumVariant(ev) => {\n-                Into::<GenericDefId>::into(Into::<GenericDef>::into(ev.clone())).resolver(db)\n+                GenericDefId::from(GenericDef::from(ev.clone())).resolver(db)\n             }\n             ModuleDef::Const(c) => {\n-                Into::<GenericDefId>::into(Into::<GenericDef>::into(c.clone())).resolver(db)\n+                GenericDefId::from(GenericDef::from(c.clone())).resolver(db)\n             }\n-            ModuleDef::Static(s) => Into::<StaticId>::into(s.clone()).resolver(db),\n-            ModuleDef::Trait(t) => Into::<TraitId>::into(t.clone()).resolver(db),\n-            ModuleDef::TypeAlias(t) => Into::<ModuleId>::into(t.module(db)).resolver(db),\n+            ModuleDef::Static(s) => StaticId::from(s.clone()).resolver(db),\n+            ModuleDef::Trait(t) => TraitId::from(t.clone()).resolver(db),\n+            ModuleDef::TypeAlias(t) => ModuleId::from(t.module(db)).resolver(db),\n             // FIXME: This should be a resolver relative to `std/core`\n             ModuleDef::BuiltinType(_t) => None?,\n         })"}]}