{"sha": "1bcb4df16678a71b484ea9d1b65911f22b381d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiY2I0ZGYxNjY3OGE3MWI0ODRlYTlkMWI2NTkxMWYyMmIzODFkODY=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-21T15:39:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:09Z"}, "message": "Generalized OperandBundleDef in BuilderMethods", "tree": {"sha": "370b780f16b7594c571022d6f6efb4f27f12ab28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/370b780f16b7594c571022d6f6efb4f27f12ab28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bcb4df16678a71b484ea9d1b65911f22b381d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcb4df16678a71b484ea9d1b65911f22b381d86", "html_url": "https://github.com/rust-lang/rust/commit/1bcb4df16678a71b484ea9d1b65911f22b381d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bcb4df16678a71b484ea9d1b65911f22b381d86/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc86624c43a24ed569a08aaeae3bdea7be181bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc86624c43a24ed569a08aaeae3bdea7be181bf7", "html_url": "https://github.com/rust-lang/rust/commit/bc86624c43a24ed569a08aaeae3bdea7be181bf7"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "f8ab6fc4ec2f233002f23e5e70a08cef3cb09020", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=1bcb4df16678a71b484ea9d1b65911f22b381d86", "patch": "@@ -191,15 +191,15 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n                   args: &[&'ll Value],\n                   then: &'ll BasicBlock,\n                   catch: &'ll BasicBlock,\n-                  bundle: Option<&OperandBundleDef<'ll>>) -> &'ll Value {\n+                  bundle: Option<&traits::OperandBundleDef<'ll, &'ll Value>>) -> &'ll Value {\n         self.count_insn(\"invoke\");\n \n         debug!(\"Invoke {:?} with args ({:?})\",\n                llfn,\n                args);\n \n         let args = self.check_call(\"invoke\", llfn, args);\n-        let bundle = bundle.map(|b| &*b.raw);\n+        let bundle = bundle.map(|b| &*(OperandBundleDef::from_generic(b)).raw);\n \n         unsafe {\n             llvm::LLVMRustBuildInvoke(self.llbuilder,\n@@ -1191,15 +1191,15 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n     }\n \n     fn call(&self, llfn: &'ll Value, args: &[&'ll Value],\n-                bundle: Option<&OperandBundleDef<'ll>>) -> &'ll Value {\n+                bundle: Option<&traits::OperandBundleDef<'ll, &'ll Value>>) -> &'ll Value {\n         self.count_insn(\"call\");\n \n         debug!(\"Call {:?} with args ({:?})\",\n                llfn,\n                args);\n \n         let args = self.check_call(\"call\", llfn, args);\n-        let bundle = bundle.map(|b| &*b.raw);\n+        let bundle = bundle.map(|b| &*(OperandBundleDef::from_generic(b)).raw);\n \n         unsafe {\n             llvm::LLVMRustBuildCall("}, {"sha": "b4b75ddd181f8e4cbfeaf516ed269106947f80e6", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=1bcb4df16678a71b484ea9d1b65911f22b381d86", "patch": "@@ -13,7 +13,7 @@\n //! Code that is useful in various codegen modules.\n \n use llvm::{self, TypeKind};\n-use llvm::{True, False, Bool, OperandBundleDef};\n+use llvm::{True, False, Bool};\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::LangItem;\n use abi;\n@@ -28,7 +28,7 @@ use value::{Value, ValueTrait};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};\n use rustc::hir;\n-use traits::BuilderMethods;\n+use traits::{BuilderMethods, OperandBundleDef};\n \n use libc::{c_uint, c_char};\n \n@@ -91,22 +91,22 @@ pub fn type_is_freeze<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bo\n /// the `OperandBundleDef` value created for MSVC landing pads.\n pub struct Funclet<'ll> {\n     cleanuppad: &'ll Value,\n-    operand: OperandBundleDef<'ll>,\n+    operand: OperandBundleDef<'ll, &'ll Value>,\n }\n \n impl Funclet<'ll> {\n     pub fn new(cleanuppad: &'ll Value) -> Self {\n         Funclet {\n             cleanuppad,\n-            operand: OperandBundleDef::new(\"funclet\", &[cleanuppad]),\n+            operand: OperandBundleDef::new(\"funclet\", cleanuppad),\n         }\n     }\n \n     pub fn cleanuppad(&self) -> &'ll Value {\n         self.cleanuppad\n     }\n \n-    pub fn bundle(&self) -> &OperandBundleDef<'ll> {\n+    pub fn bundle(&self) -> &OperandBundleDef<'ll, &'ll Value> {\n         &self.operand\n     }\n }"}, {"sha": "3b5f0b0f7df28eb425bb8049f9b913feb46d8ddc", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=1bcb4df16678a71b484ea9d1b65911f22b381d86", "patch": "@@ -28,6 +28,7 @@ use std::ffi::CStr;\n use std::cell::RefCell;\n use libc::{self, c_uint, c_char, size_t};\n use rustc_data_structures::small_c_str::SmallCStr;\n+use traits;\n \n pub mod archive_ro;\n pub mod diagnostic;\n@@ -271,6 +272,10 @@ impl OperandBundleDef<'a> {\n         };\n         OperandBundleDef { raw: def }\n     }\n+\n+    pub fn from_generic(bundle : &traits::OperandBundleDef<'a, &'a Value>) -> Self {\n+        Self::new(bundle.name, &[bundle.val])\n+    }\n }\n \n impl Drop for OperandBundleDef<'a> {"}, {"sha": "e23eeac1c29a816f5c0a8c437afe8560252f40e9", "filename": "src/librustc_codegen_llvm/traits.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcb4df16678a71b484ea9d1b65911f22b381d86/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftraits.rs?ref=1bcb4df16678a71b484ea9d1b65911f22b381d86", "patch": "@@ -9,18 +9,32 @@\n // except according to those terms.\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n-use llvm::OperandBundleDef;\n use common::*;\n use type_::Type;\n use libc::c_char;\n use rustc::ty::TyCtxt;\n use rustc::ty::layout::{Align, Size};\n use rustc::session::Session;\n use builder::MemFlags;\n+use value::Value;\n \n use std::borrow::Cow;\n use std::ops::Range;\n \n+pub struct OperandBundleDef<'a, Value : 'a> {\n+    pub name: &'a str,\n+    pub val: Value\n+}\n+\n+impl OperandBundleDef<'ll, &'ll Value> {\n+    pub fn new(name: &'ll str, val: &'ll Value) -> Self {\n+        OperandBundleDef {\n+            name,\n+            val,\n+        }\n+    }\n+}\n+\n pub enum IntPredicate {\n     IntEQ,\n     IntNE,\n@@ -97,7 +111,7 @@ pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll,\n         args: &[&'ll Value],\n         then: &'ll BasicBlock,\n         catch: &'ll BasicBlock,\n-        bundle: Option<&OperandBundleDef<'ll>>\n+        bundle: Option<&OperandBundleDef<'ll, &'ll Value>>\n     ) -> &'ll Value;\n     fn unreachable(&self);\n     fn add(&self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value;\n@@ -313,6 +327,6 @@ pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll,\n     fn call_lifetime_intrinsic(&self, intrinsic: &str, ptr: &'ll Value, size: Size);\n \n     fn call(&self, llfn: &'ll Value, args: &[&'ll Value],\n-                bundle: Option<&OperandBundleDef<'ll>>) -> &'ll Value;\n+                bundle: Option<&OperandBundleDef<'ll, &'ll Value>>) -> &'ll Value;\n     fn zext(&self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value;\n }"}]}