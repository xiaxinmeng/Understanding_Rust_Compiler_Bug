{"sha": "067cb928f09482c63ec2bfbdafb04fbd53b754e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2N2NiOTI4ZjA5NDgyYzYzZWMyYmZiZGFmYjA0ZmJkNTNiNzU0ZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T21:43:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T21:43:13Z"}, "message": "Simplify", "tree": {"sha": "4a39fe02cab714a84eca5742ecaa2592cfe5d57b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a39fe02cab714a84eca5742ecaa2592cfe5d57b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/067cb928f09482c63ec2bfbdafb04fbd53b754e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/067cb928f09482c63ec2bfbdafb04fbd53b754e1", "html_url": "https://github.com/rust-lang/rust/commit/067cb928f09482c63ec2bfbdafb04fbd53b754e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/067cb928f09482c63ec2bfbdafb04fbd53b754e1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61ba56d433a4d3d2651999efee43be8917ada747", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ba56d433a4d3d2651999efee43be8917ada747", "html_url": "https://github.com/rust-lang/rust/commit/61ba56d433a4d3d2651999efee43be8917ada747"}], "stats": {"total": 26, "additions": 3, "deletions": 23}, "files": [{"sha": "c8bf181f94005f92bc4a61d65fb02d1bb2aaef39", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/067cb928f09482c63ec2bfbdafb04fbd53b754e1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067cb928f09482c63ec2bfbdafb04fbd53b754e1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=067cb928f09482c63ec2bfbdafb04fbd53b754e1", "patch": "@@ -52,7 +52,6 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n         group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), |edit| {\n             edit.target(auto_import_assets.syntax_under_caret.text_range());\n             insert_use_statement(\n-                &auto_import_assets.syntax_under_caret,\n                 &auto_import_assets.syntax_under_caret,\n                 &import,\n                 edit.text_edit_builder(),"}, {"sha": "94f5d6c5036f8792aa6111cd7524223c0de76bd1", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/067cb928f09482c63ec2bfbdafb04fbd53b754e1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067cb928f09482c63ec2bfbdafb04fbd53b754e1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=067cb928f09482c63ec2bfbdafb04fbd53b754e1", "patch": "@@ -33,26 +33,12 @@ pub(crate) fn replace_qualified_name_with_use(ctx: AssistCtx) -> Option<Assist>\n         return None;\n     }\n \n-    let module = path.syntax().ancestors().find_map(ast::Module::cast);\n-    let position = match module.and_then(|it| it.item_list()) {\n-        Some(item_list) => item_list.syntax().clone(),\n-        None => {\n-            let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n-            current_file.syntax().clone()\n-        }\n-    };\n-\n     ctx.add_assist(\n         AssistId(\"replace_qualified_name_with_use\"),\n         \"Replace qualified path with use\",\n         |edit| {\n             let path_to_import = hir_path.mod_path().clone();\n-            insert_use_statement(\n-                &position,\n-                &path.syntax(),\n-                &path_to_import,\n-                edit.text_edit_builder(),\n-            );\n+            insert_use_statement(path.syntax(), &path_to_import, edit.text_edit_builder());\n \n             if let Some(last) = path.segment() {\n                 // Here we are assuming the assist will provide a correct use statement"}, {"sha": "36fd2fc0b1327e18110c81bd403e1081660492d7", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/067cb928f09482c63ec2bfbdafb04fbd53b754e1/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067cb928f09482c63ec2bfbdafb04fbd53b754e1/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=067cb928f09482c63ec2bfbdafb04fbd53b754e1", "patch": "@@ -15,8 +15,6 @@ use ra_text_edit::TextEditBuilder;\n pub fn insert_use_statement(\n     // Ideally the position of the cursor, used to\n     position: &SyntaxNode,\n-    // The statement to use as anchor (last resort)\n-    anchor: &SyntaxNode,\n     path_to_import: &ModPath,\n     edit: &mut TextEditBuilder,\n ) {\n@@ -29,7 +27,7 @@ pub fn insert_use_statement(\n     });\n \n     if let Some(container) = container {\n-        let action = best_action_for_target(container, anchor.clone(), &target);\n+        let action = best_action_for_target(container, position.clone(), &target);\n         make_assist(&action, &target, edit);\n     }\n }\n@@ -379,10 +377,7 @@ fn best_action_for_target(\n             // another item and we use it as anchor.\n             // If there are no items above, we choose the target path itself as anchor.\n             // todo: we should include even whitespace blocks as anchor candidates\n-            let anchor = container\n-                .children()\n-                .find(|n| n.text_range().start() < anchor.text_range().start())\n-                .or_else(|| Some(anchor));\n+            let anchor = container.children().next().or_else(|| Some(anchor));\n \n             let add_after_anchor = anchor\n                 .clone()"}]}