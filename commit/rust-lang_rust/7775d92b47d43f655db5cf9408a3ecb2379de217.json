{"sha": "7775d92b47d43f655db5cf9408a3ecb2379de217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NzVkOTJiNDdkNDNmNjU1ZGI1Y2Y5NDA4YTNlY2IyMzc5ZGUyMTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-22T13:15:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T13:15:04Z"}, "message": "Merge #7749\n\n7749: Make more common assist easier to ues r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b4602b819847b6d7419048dd26b29374bd28f18b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4602b819847b6d7419048dd26b29374bd28f18b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7775d92b47d43f655db5cf9408a3ecb2379de217", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgM65YCRBK7hj4Ov3rIwAAdHIIAGg91xPTiabQeDSu/1cmBCMB\nNziBLp/s47X7poB+xBUSe4UyA8M5woaP7K5sIWiUJD/tbvOjGJfCmuX0akmE6NBT\nnPzibqS36DJ56+FqwCOfngZXA2rpbe0mnrNqKbOUWqH2GaBFgWuB9Q5DE0B+UUCt\nGbe6mTEbTZp//vFq0QSaVL5r/IobJa+qrYJwz9MVGT0qjFkX5VwOUt0FN/o11wdj\n8T1kKiLm3Aam0w1H6vPzS2rjLiWant5jwnv5J1iEh3AFT+TK29OOUBQDfk0dWRf6\nkYYSUJpq4YH3kZgcs91nMafQIFMfytGvOY+wPnCq2jDpJh/mfSItkVdfHLLfsJo=\n=yIOa\n-----END PGP SIGNATURE-----\n", "payload": "tree b4602b819847b6d7419048dd26b29374bd28f18b\nparent 14de9e54a6d9ef070399b34a11634294a8cc3ca5\nparent 58be1edfbb86658dcf9ce58800f53ef2a333b7da\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613999704 +0000\ncommitter GitHub <noreply@github.com> 1613999704 +0000\n\nMerge #7749\n\n7749: Make more common assist easier to ues r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7775d92b47d43f655db5cf9408a3ecb2379de217", "html_url": "https://github.com/rust-lang/rust/commit/7775d92b47d43f655db5cf9408a3ecb2379de217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7775d92b47d43f655db5cf9408a3ecb2379de217/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14de9e54a6d9ef070399b34a11634294a8cc3ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14de9e54a6d9ef070399b34a11634294a8cc3ca5", "html_url": "https://github.com/rust-lang/rust/commit/14de9e54a6d9ef070399b34a11634294a8cc3ca5"}, {"sha": "58be1edfbb86658dcf9ce58800f53ef2a333b7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/58be1edfbb86658dcf9ce58800f53ef2a333b7da", "html_url": "https://github.com/rust-lang/rust/commit/58be1edfbb86658dcf9ce58800f53ef2a333b7da"}], "stats": {"total": 130, "additions": 88, "deletions": 42}, "files": [{"sha": "6139679fab79aa48803c00c2722c9d8e4eb2c45b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7775d92b47d43f655db5cf9408a3ecb2379de217/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7775d92b47d43f655db5cf9408a3ecb2379de217/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7775d92b47d43f655db5cf9408a3ecb2379de217", "patch": "@@ -58,6 +58,7 @@ name = \"assists\"\n version = \"0.0.0\"\n dependencies = [\n  \"either\",\n+ \"expect-test\",\n  \"hir\",\n  \"ide_db\",\n  \"itertools 0.10.0\","}, {"sha": "c78cb99afe274ba2cb821f35fab77ae573aadb9b", "filename": "crates/assists/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fassists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fassists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2FCargo.toml?ref=7775d92b47d43f655db5cf9408a3ecb2379de217", "patch": "@@ -21,3 +21,6 @@ profile = { path = \"../profile\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+\n+[dev-dependencies]\n+expect-test = \"1.1\""}, {"sha": "7067cf8b69803b1cd0f7213f17d1d6f38461317e", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=7775d92b47d43f655db5cf9408a3ecb2379de217", "patch": "@@ -179,9 +179,7 @@ mod handlers {\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n             move_module_to_file::move_module_to_file,\n-            extract_function::extract_function,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n-            extract_variable::extract_variable,\n             fill_match_arms::fill_match_arms,\n             fix_visibility::fix_visibility,\n             flip_binexpr::flip_binexpr,\n@@ -229,12 +227,18 @@ mod handlers {\n             unmerge_use::unmerge_use,\n             unwrap_block::unwrap_block,\n             wrap_return_type_in_result::wrap_return_type_in_result,\n-            // These are manually sorted for better priorities\n+            // These are manually sorted for better priorities. By default,\n+            // priority is determined by the size of the target range (smaller\n+            // target wins). If the ranges are equal, position in this list is\n+            // used as a tie-breaker.\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n             //\n             replace_string_with_char::replace_string_with_char,\n             raw_string::make_raw_string,\n+            //\n+            extract_variable::extract_variable,\n+            extract_function::extract_function,\n             // Are you sure you want to add new assist here, and not to the\n             // sorted list above?\n         ]"}, {"sha": "384eb7eeea21078998b9257fc1ef5f9690511492", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 67, "deletions": 38, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=7775d92b47d43f655db5cf9408a3ecb2379de217", "patch": "@@ -1,5 +1,6 @@\n mod generated;\n \n+use expect_test::expect;\n use hir::Semantics;\n use ide_db::{\n     base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt},\n@@ -10,11 +11,11 @@ use ide_db::{\n     source_change::FileSystemEdit,\n     RootDatabase,\n };\n+use stdx::{format_to, trim_indent};\n use syntax::TextRange;\n-use test_utils::{assert_eq_text, extract_offset, extract_range};\n+use test_utils::{assert_eq_text, extract_offset};\n \n use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind, Assists};\n-use stdx::{format_to, trim_indent};\n \n pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n     snippet_cap: SnippetCap::new(true),\n@@ -163,6 +164,22 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n     };\n }\n \n+fn labels(assists: &[Assist]) -> String {\n+    let mut labels = assists\n+        .iter()\n+        .map(|assist| {\n+            let mut label = match &assist.group {\n+                Some(g) => g.0.clone(),\n+                None => assist.label.to_string(),\n+            };\n+            label.push('\\n');\n+            label\n+        })\n+        .collect::<Vec<_>>();\n+    labels.dedup();\n+    labels.into_iter().collect::<String>()\n+}\n+\n #[test]\n fn assist_order_field_struct() {\n     let before = \"struct Foo { $0bar: u32 }\";\n@@ -181,66 +198,78 @@ fn assist_order_field_struct() {\n \n #[test]\n fn assist_order_if_expr() {\n-    let before = \"\n-    pub fn test_some_range(a: int) -> bool {\n-        if let 2..6 = $05$0 {\n-            true\n-        } else {\n-            false\n-        }\n-    }\";\n-    let (range, before) = extract_range(before);\n-    let (db, file_id) = with_single_file(&before);\n-    let frange = FileRange { file_id, range };\n+    let (db, frange) = RootDatabase::with_range(\n+        r#\"\n+pub fn test_some_range(a: int) -> bool {\n+    if let 2..6 = $05$0 {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\"#,\n+    );\n+\n     let assists = Assist::get(&db, &TEST_CONFIG, false, frange);\n-    let mut assists = assists.iter();\n+    let expected = labels(&assists);\n \n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Extract into function\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Extract into variable\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Replace with match\");\n+    expect![[r#\"\n+        Convert integer base\n+        Extract into variable\n+        Extract into function\n+        Replace with match\n+    \"#]]\n+    .assert_eq(&expected);\n }\n \n #[test]\n fn assist_filter_works() {\n-    let before = \"\n-    pub fn test_some_range(a: int) -> bool {\n-        if let 2..6 = $05$0 {\n-            true\n-        } else {\n-            false\n-        }\n-    }\";\n-    let (range, before) = extract_range(before);\n-    let (db, file_id) = with_single_file(&before);\n-    let frange = FileRange { file_id, range };\n-\n+    let (db, frange) = RootDatabase::with_range(\n+        r#\"\n+pub fn test_some_range(a: int) -> bool {\n+    if let 2..6 = $05$0 {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\"#,\n+    );\n     {\n         let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::Refactor]);\n \n         let assists = Assist::get(&db, &cfg, false, frange);\n-        let mut assists = assists.iter();\n+        let expected = labels(&assists);\n \n-        assert_eq!(assists.next().expect(\"expected assist\").label, \"Extract into function\");\n-        assert_eq!(assists.next().expect(\"expected assist\").label, \"Extract into variable\");\n-        assert_eq!(assists.next().expect(\"expected assist\").label, \"Replace with match\");\n+        expect![[r#\"\n+            Convert integer base\n+            Extract into variable\n+            Extract into function\n+            Replace with match\n+        \"#]]\n+        .assert_eq(&expected);\n     }\n \n     {\n         let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::RefactorExtract]);\n         let assists = Assist::get(&db, &cfg, false, frange);\n-        assert_eq!(assists.len(), 2);\n+        let expected = labels(&assists);\n \n-        let mut assists = assists.iter();\n-        assert_eq!(assists.next().expect(\"expected assist\").label, \"Extract into function\");\n-        assert_eq!(assists.next().expect(\"expected assist\").label, \"Extract into variable\");\n+        expect![[r#\"\n+            Extract into variable\n+            Extract into function\n+        \"#]]\n+        .assert_eq(&expected);\n     }\n \n     {\n         let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::QuickFix]);\n         let assists = Assist::get(&db, &cfg, false, frange);\n-        assert!(assists.is_empty(), \"All asserts but quickfixes should be filtered out\");\n+        let expected = labels(&assists);\n+\n+        expect![[r#\"\"#]].assert_eq(&expected);\n     }\n }"}, {"sha": "5c9824814e89dbfc4d9b47950b16ef7a34ae438c", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7775d92b47d43f655db5cf9408a3ecb2379de217/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=7775d92b47d43f655db5cf9408a3ecb2379de217", "patch": "@@ -67,7 +67,7 @@ use test_utils::{\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n-    input::CrateName, Change, CrateGraph, CrateId, Edition, Env, FileId, FilePosition,\n+    input::CrateName, Change, CrateGraph, CrateId, Edition, Env, FileId, FilePosition, FileRange,\n     SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n@@ -99,6 +99,15 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n         (db, FilePosition { file_id, offset })\n     }\n \n+    fn with_range(ra_fixture: &str) -> (Self, FileRange) {\n+        let (db, file_id, range_or_offset) = Self::with_range_or_offset(ra_fixture);\n+        let range = match range_or_offset {\n+            RangeOrOffset::Range(it) => it,\n+            RangeOrOffset::Offset(_) => panic!(),\n+        };\n+        (db, FileRange { file_id, range })\n+    }\n+\n     fn with_range_or_offset(ra_fixture: &str) -> (Self, FileId, RangeOrOffset) {\n         let fixture = ChangeFixture::parse(ra_fixture);\n         let mut db = Self::default();"}]}