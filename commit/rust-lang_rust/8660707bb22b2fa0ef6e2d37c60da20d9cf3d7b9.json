{"sha": "8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9", "node_id": "C_kwDOAAsO6NoAKDg2NjA3MDdiYjIyYjJmYTBlZjZlMmQzN2M2MGRhMjBkOWNmM2Q3Yjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-07T08:20:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-07T08:20:11Z"}, "message": "Auto merge of #111125 - xfix:inline-socketaddr-methods, r=Mark-Simulacrum\n\nInline SocketAddr methods", "tree": {"sha": "92f060c6b006856e84c7be1658192089771e8c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92f060c6b006856e84c7be1658192089771e8c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9", "html_url": "https://github.com/rust-lang/rust/commit/8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc75b56a67ab33407b43faa0efc0f6483ff5664", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc75b56a67ab33407b43faa0efc0f6483ff5664", "html_url": "https://github.com/rust-lang/rust/commit/8cc75b56a67ab33407b43faa0efc0f6483ff5664"}, {"sha": "4603f0b8afb495ae56cd4c8f70d5d478d906ac54", "url": "https://api.github.com/repos/rust-lang/rust/commits/4603f0b8afb495ae56cd4c8f70d5d478d906ac54", "html_url": "https://github.com/rust-lang/rust/commit/4603f0b8afb495ae56cd4c8f70d5d478d906ac54"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "8396aecf947a1a1d2b73073447f460849387cfff", "filename": "library/core/src/net/socket_addr.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs?ref=8660707bb22b2fa0ef6e2d37c60da20d9cf3d7b9", "patch": "@@ -122,6 +122,7 @@ impl SocketAddr {\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[must_use]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -142,6 +143,7 @@ impl SocketAddr {\n     #[must_use]\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n@@ -161,6 +163,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(10, 10, 0, 1)));\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_ip(&mut self, new_ip: IpAddr) {\n         // `match (*self, new_ip)` would have us mutate a copy of self only to throw it away.\n         match (self, new_ip) {\n@@ -183,6 +186,7 @@ impl SocketAddr {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn port(&self) -> u16 {\n         match *self {\n             SocketAddr::V4(ref a) => a.port(),\n@@ -202,6 +206,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.port(), 1025);\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_port(&mut self, new_port: u16) {\n         match *self {\n             SocketAddr::V4(ref mut a) => a.set_port(new_port),\n@@ -227,6 +232,7 @@ impl SocketAddr {\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(*self, SocketAddr::V4(_))\n     }\n@@ -249,6 +255,7 @@ impl SocketAddr {\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(*self, SocketAddr::V6(_))\n     }\n@@ -269,6 +276,7 @@ impl SocketAddrV4 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 { ip, port }\n     }\n@@ -286,6 +294,7 @@ impl SocketAddrV4 {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn ip(&self) -> &Ipv4Addr {\n         &self.ip\n     }\n@@ -302,6 +311,7 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.ip(), &Ipv4Addr::new(192, 168, 0, 1));\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_ip(&mut self, new_ip: Ipv4Addr) {\n         self.ip = new_ip;\n     }\n@@ -319,6 +329,7 @@ impl SocketAddrV4 {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -335,6 +346,7 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.port(), 4242);\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_port(&mut self, new_port: u16) {\n         self.port = new_port;\n     }\n@@ -360,6 +372,7 @@ impl SocketAddrV6 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n         SocketAddrV6 { ip, port, flowinfo, scope_id }\n     }\n@@ -377,6 +390,7 @@ impl SocketAddrV6 {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn ip(&self) -> &Ipv6Addr {\n         &self.ip\n     }\n@@ -393,6 +407,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.ip(), &Ipv6Addr::new(76, 45, 0, 0, 0, 0, 0, 0));\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_ip(&mut self, new_ip: Ipv6Addr) {\n         self.ip = new_ip;\n     }\n@@ -410,6 +425,7 @@ impl SocketAddrV6 {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -426,6 +442,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.port(), 4242);\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_port(&mut self, new_port: u16) {\n         self.port = new_port;\n     }\n@@ -453,6 +470,7 @@ impl SocketAddrV6 {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn flowinfo(&self) -> u32 {\n         self.flowinfo\n     }\n@@ -471,6 +489,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.flowinfo(), 56);\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_flowinfo(&mut self, new_flowinfo: u32) {\n         self.flowinfo = new_flowinfo;\n     }\n@@ -493,6 +512,7 @@ impl SocketAddrV6 {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n+    #[inline]\n     pub const fn scope_id(&self) -> u32 {\n         self.scope_id\n     }\n@@ -511,6 +531,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.scope_id(), 42);\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn set_scope_id(&mut self, new_scope_id: u32) {\n         self.scope_id = new_scope_id;\n     }\n@@ -519,6 +540,7 @@ impl SocketAddrV6 {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV4> for SocketAddr {\n     /// Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].\n+    #[inline]\n     fn from(sock4: SocketAddrV4) -> SocketAddr {\n         SocketAddr::V4(sock4)\n     }\n@@ -527,6 +549,7 @@ impl From<SocketAddrV4> for SocketAddr {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV6> for SocketAddr {\n     /// Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].\n+    #[inline]\n     fn from(sock6: SocketAddrV6) -> SocketAddr {\n         SocketAddr::V6(sock6)\n     }\n@@ -624,27 +647,31 @@ impl fmt::Debug for SocketAddrV6 {\n \n #[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n impl PartialOrd for SocketAddrV4 {\n+    #[inline]\n     fn partial_cmp(&self, other: &SocketAddrV4) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n #[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n impl PartialOrd for SocketAddrV6 {\n+    #[inline]\n     fn partial_cmp(&self, other: &SocketAddrV6) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n #[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n impl Ord for SocketAddrV4 {\n+    #[inline]\n     fn cmp(&self, other: &SocketAddrV4) -> Ordering {\n         self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n     }\n }\n \n #[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n impl Ord for SocketAddrV6 {\n+    #[inline]\n     fn cmp(&self, other: &SocketAddrV6) -> Ordering {\n         self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n     }"}]}