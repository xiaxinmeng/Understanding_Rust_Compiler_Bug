{"sha": "2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "node_id": "C_kwDOAAsO6NoAKDJmMjY2NDkyM2JlM2NiNDdiODhkZmE2OTA1NGYyMGI4N2MyZWIxZTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-08T12:38:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-08T12:38:19Z"}, "message": "Rollup merge of #102778 - nbdd0121:mir, r=tmiasko\n\nFix MIR inlining of asm_unwind\n\nThe MIR inlining currently doesn't handle inline asm's unwind edge correctly.\n\nThis code will cause ICE:\n```rust\nstruct D;\n\nimpl Drop for D {\n    fn drop(&mut self) {}\n}\n\n#[inline(always)]\nfn foo() {\n    let _d = D;\n    unsafe { std::arch::asm!(\"\", options(may_unwind)) };\n}\n\npub fn main() {\n    foo();\n}\n```\n\nThis PR fixes this issue. I also take the opportunity to extract common code into a method.", "tree": {"sha": "a44b1049eabcbbbfbee9a823845d9ce48d666037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a44b1049eabcbbbfbee9a823845d9ce48d666037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQW87CRBK7hj4Ov3rIwAAk/wIAALaca0OW5/+5zo/I0Mzd00m\nwKIV37Hwbr2amOPcQVjbQ0c5Z4uW7C/8UNpycIpKGvXcxQeXF7Mkb9kXLA+IsuFz\nzvQ+rgX0Ay4KZV+PpliaBDQP0dQM43elVt29VDk/WNXWTfcycpZrOuMGIebzBqdS\nlKbeb0WC2lrErOHhiNnSUdgSMTaEJej6w0RTTcvW2GauCvobQDu/zyXIHlm9QTop\nU1LEdLZ+idDDT3idbd5CkL9cT8PcmDlQO0HTINiz42xvz71rUAYLYGT1w/BGYzZi\nwlu+Xf4uuFxX9UQUSCwoJE29UoLiEbpqx03sN7SNqxLi/hLxOIxgi2aYbtx5cKw=\n=vrPP\n-----END PGP SIGNATURE-----\n", "payload": "tree a44b1049eabcbbbfbee9a823845d9ce48d666037\nparent c731646d6aea3969cc4a0eb343c73cac9389c75d\nparent fc83427066f0370aa13e0fd425b36eeddb90f4fa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665232699 +0200\ncommitter GitHub <noreply@github.com> 1665232699 +0200\n\nRollup merge of #102778 - nbdd0121:mir, r=tmiasko\n\nFix MIR inlining of asm_unwind\n\nThe MIR inlining currently doesn't handle inline asm's unwind edge correctly.\n\nThis code will cause ICE:\n```rust\nstruct D;\n\nimpl Drop for D {\n    fn drop(&mut self) {}\n}\n\n#[inline(always)]\nfn foo() {\n    let _d = D;\n    unsafe { std::arch::asm!(\"\", options(may_unwind)) };\n}\n\npub fn main() {\n    foo();\n}\n```\n\nThis PR fixes this issue. I also take the opportunity to extract common code into a method.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "html_url": "https://github.com/rust-lang/rust/commit/2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f2664923be3cb47b88dfa69054f20b87c2eb1e1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c731646d6aea3969cc4a0eb343c73cac9389c75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c731646d6aea3969cc4a0eb343c73cac9389c75d", "html_url": "https://github.com/rust-lang/rust/commit/c731646d6aea3969cc4a0eb343c73cac9389c75d"}, {"sha": "fc83427066f0370aa13e0fd425b36eeddb90f4fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc83427066f0370aa13e0fd425b36eeddb90f4fa", "html_url": "https://github.com/rust-lang/rust/commit/fc83427066f0370aa13e0fd425b36eeddb90f4fa"}], "stats": {"total": 111, "additions": 86, "deletions": 25}, "files": [{"sha": "780b91d9215d5e2c08c68d32c9a081efff1a66b6", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2f2664923be3cb47b88dfa69054f20b87c2eb1e1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2664923be3cb47b88dfa69054f20b87c2eb1e1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "patch": "@@ -977,6 +977,21 @@ impl Integrator<'_, '_> {\n         trace!(\"mapping block `{:?}` to `{:?}`\", block, new);\n         new\n     }\n+\n+    fn map_unwind(&self, unwind: Option<BasicBlock>) -> Option<BasicBlock> {\n+        if self.in_cleanup_block {\n+            if unwind.is_some() {\n+                bug!(\"cleanup on cleanup block\");\n+            }\n+            return unwind;\n+        }\n+\n+        match unwind {\n+            Some(target) => Some(self.map_block(target)),\n+            // Add an unwind edge to the original call's cleanup block\n+            None => self.cleanup_block,\n+        }\n+    }\n }\n \n impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n@@ -1085,35 +1100,17 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             TerminatorKind::Drop { ref mut target, ref mut unwind, .. }\n             | TerminatorKind::DropAndReplace { ref mut target, ref mut unwind, .. } => {\n                 *target = self.map_block(*target);\n-                if let Some(tgt) = *unwind {\n-                    *unwind = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this drop is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *unwind = self.cleanup_block;\n-                }\n+                *unwind = self.map_unwind(*unwind);\n             }\n             TerminatorKind::Call { ref mut target, ref mut cleanup, .. } => {\n                 if let Some(ref mut tgt) = *target {\n                     *tgt = self.map_block(*tgt);\n                 }\n-                if let Some(tgt) = *cleanup {\n-                    *cleanup = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this call is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n-                }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n             TerminatorKind::Assert { ref mut target, ref mut cleanup, .. } => {\n                 *target = self.map_block(*target);\n-                if let Some(tgt) = *cleanup {\n-                    *cleanup = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this assert is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n-                }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n             TerminatorKind::Return => {\n                 terminator.kind = if let Some(tgt) = self.callsite.target {\n@@ -1141,11 +1138,8 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             TerminatorKind::InlineAsm { ref mut destination, ref mut cleanup, .. } => {\n                 if let Some(ref mut tgt) = *destination {\n                     *tgt = self.map_block(*tgt);\n-                } else if !self.in_cleanup_block {\n-                    // Unless this inline asm is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n                 }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n         }\n     }"}, {"sha": "c03feb433128cd25ed40d77dccd3a97aae258c77", "filename": "src/test/mir-opt/inline/asm-unwind.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f2664923be3cb47b88dfa69054f20b87c2eb1e1/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2664923be3cb47b88dfa69054f20b87c2eb1e1/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs?ref=2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "patch": "@@ -0,0 +1,22 @@\n+// Tests inlining of `may_unwind` inline assembly.\n+//\n+// ignore-wasm32-bare compiled with panic=abort by default\n+// needs-asm-support\n+#![feature(asm_unwind)]\n+\n+struct D;\n+\n+impl Drop for D {\n+    fn drop(&mut self) {}\n+}\n+\n+#[inline(always)]\n+fn foo() {\n+    let _d = D;\n+    unsafe { std::arch::asm!(\"\", options(may_unwind)) };\n+}\n+\n+// EMIT_MIR asm_unwind.main.Inline.diff\n+pub fn main() {\n+    foo();\n+}"}, {"sha": "57072fc0ad392366342ea2c9779d472e8c832024", "filename": "src/test/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2f2664923be3cb47b88dfa69054f20b87c2eb1e1/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2f2664923be3cb47b88dfa69054f20b87c2eb1e1/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/asm-unwind.rs:+0:15: +0:15\n+      let _1: ();                          // in scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n++     scope 1 (inlined foo) {              // at $DIR/asm-unwind.rs:21:5: 21:10\n++         let _2: D;                       // in scope 1 at $DIR/asm-unwind.rs:15:9: 15:11\n++         scope 2 {\n++             debug _d => _2;              // in scope 2 at $DIR/asm-unwind.rs:15:9: 15:11\n++             scope 3 {\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n+-         _1 = foo() -> bb1;               // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/asm-unwind.rs:21:5: 21:8\n+-                                          // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }\n++         StorageLive(_2);                 // scope 1 at $DIR/asm-unwind.rs:15:9: 15:11\n++         asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb3]; // scope 3 at $DIR/asm-unwind.rs:16:14: 16:54\n+      }\n+  \n+      bb1: {\n++         drop(_2) -> bb2;                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n++     }\n++ \n++     bb2: {\n++         StorageDead(_2);                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n+          StorageDead(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:10: +1:11\n+          _0 = const ();                   // scope 0 at $DIR/asm-unwind.rs:+0:15: +2:2\n+          return;                          // scope 0 at $DIR/asm-unwind.rs:+2:2: +2:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         drop(_2) -> bb4;                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n++     }\n++ \n++     bb4 (cleanup): {\n++         resume;                          // scope 1 at $DIR/asm-unwind.rs:14:1: 17:2\n+      }\n+  }\n+  "}]}