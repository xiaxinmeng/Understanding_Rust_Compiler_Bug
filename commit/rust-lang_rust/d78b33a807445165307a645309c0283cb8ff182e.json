{"sha": "d78b33a807445165307a645309c0283cb8ff182e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OGIzM2E4MDc0NDUxNjUzMDdhNjQ1MzA5YzAyODNjYjhmZjE4MmU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-03T06:23:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-04T04:23:45Z"}, "message": "Remove `LocalInternedString` uses from `librustc_codegen_llvm`.", "tree": {"sha": "e0b47712c67a5da2870f79a1fc8b9d341b9d2369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b47712c67a5da2870f79a1fc8b9d341b9d2369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d78b33a807445165307a645309c0283cb8ff182e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d78b33a807445165307a645309c0283cb8ff182e", "html_url": "https://github.com/rust-lang/rust/commit/d78b33a807445165307a645309c0283cb8ff182e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d78b33a807445165307a645309c0283cb8ff182e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b50db34e4dd1321b4f075eaa6bc88fc8f95e17fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b50db34e4dd1321b4f075eaa6bc88fc8f95e17fc", "html_url": "https://github.com/rust-lang/rust/commit/b50db34e4dd1321b4f075eaa6bc88fc8f95e17fc"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "fc23ef1d47e5b63436e56cf7edb8fe8f267a98ae", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=d78b33a807445165307a645309c0283cb8ff182e", "patch": "@@ -5,7 +5,6 @@ use crate::context::CodegenCx;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use syntax::symbol::LocalInternedString;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n@@ -24,6 +23,7 @@ use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n use std::iter::TrustedLen;\n+use syntax::symbol::Symbol;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -1082,8 +1082,8 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n \n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}, {"sha": "c337e35460e1829e0f0c9ebda938bf825ce2aab6", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=d78b33a807445165307a645309c0283cb8ff182e", "patch": "@@ -17,7 +17,7 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n \n use libc::{c_uint, c_char};\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::ast::Mutability;\n \n pub use crate::context::CodegenCx;\n@@ -122,17 +122,18 @@ impl CodegenCx<'ll, 'tcx> {\n \n     fn const_cstr(\n         &self,\n-        s: LocalInternedString,\n+        s: Symbol,\n         null_terminated: bool,\n     ) -> &'ll Value {\n         unsafe {\n             if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n                 return llval;\n             }\n \n+            let s_str = s.as_str();\n             let sc = llvm::LLVMConstStringInContext(self.llcx,\n-                                                    s.as_ptr() as *const c_char,\n-                                                    s.len() as c_uint,\n+                                                    s_str.as_ptr() as *const c_char,\n+                                                    s_str.len() as c_uint,\n                                                     !null_terminated as Bool);\n             let sym = self.generate_local_symbol_name(\"str\");\n             let g = self.define_global(&sym[..], self.val_ty(sc)).unwrap_or_else(||{\n@@ -147,8 +148,8 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn const_str_slice(&self, s: LocalInternedString) -> &'ll Value {\n-        let len = s.len();\n+    pub fn const_str_slice(&self, s: Symbol) -> &'ll Value {\n+        let len = s.as_str().len();\n         let cs = consts::ptrcast(self.const_cstr(s, false),\n             self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n         self.const_fat_ptr(cs, self.const_usize(len as u64))"}, {"sha": "58ce97039099e7bc7dc0477a84e483d82ac6d268", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=d78b33a807445165307a645309c0283cb8ff182e", "patch": "@@ -29,7 +29,7 @@ use std::cell::{Cell, RefCell};\n use std::iter;\n use std::str;\n use std::sync::Arc;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::source_map::{DUMMY_SP, Span};\n use crate::abi::Abi;\n \n@@ -52,7 +52,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'ll Value>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a Value holding a *T,"}, {"sha": "134c321456b6cc9ddda02d2bafde2d9ef9579e42", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=d78b33a807445165307a645309c0283cb8ff182e", "patch": "@@ -14,7 +14,7 @@ use crate::traits::*;\n \n use std::borrow::Cow;\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::Pos;\n \n use super::{FunctionCx, LocalRef};\n@@ -397,7 +397,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Get the location information.\n         let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+        let filename = Symbol::intern(&loc.file.name.to_string());\n         let line = bx.const_u32(loc.line as u32);\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n@@ -418,8 +418,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     vec![file_line_col, index, len])\n             }\n             _ => {\n-                let str = msg.description();\n-                let msg_str = LocalInternedString::intern(str);\n+                let msg_str = Symbol::intern(msg.description());\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,\n@@ -531,15 +530,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+                let filename = Symbol::intern(&loc.file.name.to_string());\n                 let line = bx.const_u32(loc.line as u32);\n                 let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n                 let str = format!(\n                     \"Attempted to instantiate uninhabited type {}\",\n                     ty\n                 );\n-                let msg_str = LocalInternedString::intern(&str);\n+                let msg_str = Symbol::intern(&str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,"}, {"sha": "73c4c053979173449661ba4e0714b330f2d2ed4f", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78b33a807445165307a645309c0283cb8ff182e/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=d78b33a807445165307a645309c0283cb8ff182e", "patch": "@@ -1,5 +1,5 @@\n use super::BackendTypes;\n-use syntax_pos::symbol::LocalInternedString;\n+use syntax_pos::symbol::Symbol;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -12,8 +12,8 @@ pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}]}