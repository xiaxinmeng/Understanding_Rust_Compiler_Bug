{"sha": "ffed132e52964f029a586a3efd4afc879ed39c59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZWQxMzJlNTI5NjRmMDI5YTU4NmEzZWZkNGFmYzg3OWVkMzljNTk=", "commit": {"author": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-19T08:24:02Z"}, "committer": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-19T08:24:02Z"}, "message": "Allow attributes on top level expression\nA top level expression is either\n- a expression statement or\n- the last expression in a block", "tree": {"sha": "d385c3239f92995bf56db209ab2464b50aa033d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d385c3239f92995bf56db209ab2464b50aa033d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffed132e52964f029a586a3efd4afc879ed39c59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffed132e52964f029a586a3efd4afc879ed39c59", "html_url": "https://github.com/rust-lang/rust/commit/ffed132e52964f029a586a3efd4afc879ed39c59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffed132e52964f029a586a3efd4afc879ed39c59/comments", "author": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "html_url": "https://github.com/rust-lang/rust/commit/1cd18f9237b6ac48ca8461307f2a4eaf273ee394"}], "stats": {"total": 266, "additions": 231, "deletions": 35}, "files": [{"sha": "c1773e8e0ebf5c52c4de6c15602bf22df96f2733", "filename": "crates/ra_parser/src/event.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fevent.rs?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -105,7 +105,9 @@ pub(super) fn process(sink: &mut dyn TreeSink, mut events: Vec<Event>) {\n                     // append `A`'s forward_parent `B`\n                     fp = match mem::replace(&mut events[idx], Event::tombstone()) {\n                         Event::Start { kind, forward_parent } => {\n-                            forward_parents.push(kind);\n+                            if kind != TOMBSTONE {\n+                                forward_parents.push(kind);\n+                            }\n                             forward_parent\n                         }\n                         _ => unreachable!(),"}, {"sha": "e35c46a5e0384c293bb657f4cad0bfaa62b05ddd", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 51, "deletions": 32, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -8,10 +8,10 @@ const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n pub(super) fn expr(p: &mut Parser) -> BlockLike {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: false };\n-    expr_bp(p, r, 1)\n+    expr_bp(p, r, 1).1\n }\n \n-pub(super) fn expr_stmt(p: &mut Parser) -> BlockLike {\n+pub(super) fn expr_stmt(p: &mut Parser) -> (Option<CompletedMarker>, BlockLike) {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: true };\n     expr_bp(p, r, 1)\n }\n@@ -55,7 +55,13 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n         // test block_items\n         // fn a() { fn b() {} }\n         let m = p.start();\n-        let has_attrs = p.at(POUND);\n+        // test attr_on_expr_stmt\n+        // fn foo() {\n+        //     #[A] foo();\n+        //     #[B] bar!{}\n+        //     #[C] #[D] {}\n+        //     #[D] return ();\n+        // }\n         attributes::outer_attributes(p);\n         if p.at(LET_KW) {\n             let_stmt(p, m);\n@@ -67,35 +73,48 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n             Err(m) => m,\n         };\n \n-        if has_attrs {\n-            m.abandon(p);\n-            p.error(\"expected a let statement or an item after attributes in block\");\n-        } else {\n-            let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n-            if p.at(R_CURLY) {\n-                m.abandon(p);\n-            } else {\n-                // test no_semi_after_block\n-                // fn foo() {\n-                //     if true {}\n-                //     loop {}\n-                //     match () {}\n-                //     while true {}\n-                //     for _ in () {}\n-                //     {}\n-                //     {}\n-                //     macro_rules! test {\n-                //          () => {}\n-                //     }\n-                //     test!{}\n-                // }\n-                if is_blocklike {\n-                    p.eat(SEMI);\n+        let (cm, blocklike) = expr_stmt(p);\n+        let cm = match cm {\n+            None => {\n+                if p.at(R_CURLY) {\n+                    m.abandon(p);\n                 } else {\n                     p.expect(SEMI);\n+                    m.complete(p, EXPR_STMT);\n                 }\n-                m.complete(p, EXPR_STMT);\n+                continue;\n+            }\n+            Some(cm) => cm,\n+        };\n+\n+        if p.at(R_CURLY) {\n+            // test attr_on_last_expr_in_block\n+            // fn foo() {\n+            //     { #[A] bar!()? }\n+            //     #[B] &()\n+            // }\n+            m.contract_child(p, cm);\n+        } else {\n+            // test no_semi_after_block\n+            // fn foo() {\n+            //     if true {}\n+            //     loop {}\n+            //     match () {}\n+            //     while true {}\n+            //     for _ in () {}\n+            //     {}\n+            //     {}\n+            //     macro_rules! test {\n+            //          () => {}\n+            //     }\n+            //     test!{}\n+            // }\n+            if blocklike.is_block() {\n+                p.eat(SEMI);\n+            } else {\n+                p.expect(SEMI);\n             }\n+            m.complete(p, EXPR_STMT);\n         }\n     }\n \n@@ -176,7 +195,7 @@ fn current_op(p: &Parser) -> (u8, Op) {\n }\n \n // Parses expression with binding power of at least bp.\n-fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n+fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> (Option<CompletedMarker>, BlockLike) {\n     let mut lhs = match lhs(p, r) {\n         Some((lhs, blocklike)) => {\n             // test stmt_bin_expr_ambiguity\n@@ -185,11 +204,11 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n             //     {1} &2;\n             // }\n             if r.prefer_stmt && blocklike.is_block() {\n-                return BlockLike::Block;\n+                return (Some(lhs), BlockLike::Block);\n             }\n             lhs\n         }\n-        None => return BlockLike::NotBlock,\n+        None => return (None, BlockLike::NotBlock),\n     };\n \n     loop {\n@@ -208,7 +227,7 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n         expr_bp(p, r, op_bp + 1);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n-    BlockLike::NotBlock\n+    (Some(lhs), BlockLike::NotBlock)\n }\n \n const LHS_FIRST: TokenSet ="}, {"sha": "a23977bfbe6943c23505aaa0fd313ebb907279c9", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -392,9 +392,9 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n         match_guard(p);\n     }\n     p.expect(FAT_ARROW);\n-    let ret = expr_stmt(p);\n+    let blocklike = expr_stmt(p).1;\n     m.complete(p, MATCH_ARM);\n-    ret\n+    blocklike\n }\n \n // test match_guard"}, {"sha": "702669eb961e517d2c3b066acc0ddb79e3733f0a", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -228,6 +228,29 @@ impl Marker {\n             }\n         }\n     }\n+\n+    /// Contract a node `cm` and complete as `cm`'s `kind`.\n+    /// `cm` must be a child of `m` to work correctly.\n+    /// ```\n+    /// m--A        m--A\n+    /// +--cm--B -> +--B\n+    /// +--C        C\n+    ///\n+    /// [m: TOMBSTONE, A, cm: Start(k), B, Finish, C]\n+    /// [m: Start(k), A, cm: TOMBSTONE, B, Finish, C]\n+    /// ```\n+    pub(crate) fn contract_child(mut self, p: &mut Parser, cm: CompletedMarker) -> CompletedMarker {\n+        self.bomb.defuse();\n+        match p.events[self.pos as usize] {\n+            Event::Start { kind: ref mut slot, .. } => *slot = cm.kind(),\n+            _ => unreachable!(),\n+        };\n+        match p.events[cm.0 as usize] {\n+            Event::Start { kind: ref mut slot, .. } => *slot = TOMBSTONE,\n+            _ => unreachable!(),\n+        };\n+        CompletedMarker::new(self.pos, cm.kind())\n+    }\n }\n \n pub(crate) struct CompletedMarker(u32, SyntaxKind);"}, {"sha": "b28c078f9359bb70f2323c17b03add626241d830", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0126_attr_on_expr_stmt.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rs?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    #[A] foo();\n+    #[B] bar!{}\n+    #[C] #[D] {}\n+    #[D] return ();\n+}"}, {"sha": "7cd525cc77ba85096d790eb0563df452052c2b81", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0126_attr_on_expr_stmt.txt", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.txt?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -0,0 +1,88 @@\n+SOURCE_FILE@[0; 82)\n+  FN_DEF@[0; 81)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 81)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      EXPR_STMT@[15; 26)\n+        ATTR@[15; 19)\n+          POUND@[15; 16)\n+          TOKEN_TREE@[16; 19)\n+            L_BRACK@[16; 17)\n+            IDENT@[17; 18) \"A\"\n+            R_BRACK@[18; 19)\n+        WHITESPACE@[19; 20)\n+        CALL_EXPR@[20; 25)\n+          PATH_EXPR@[20; 23)\n+            PATH@[20; 23)\n+              PATH_SEGMENT@[20; 23)\n+                NAME_REF@[20; 23)\n+                  IDENT@[20; 23) \"foo\"\n+          ARG_LIST@[23; 25)\n+            L_PAREN@[23; 24)\n+            R_PAREN@[24; 25)\n+        SEMI@[25; 26)\n+      WHITESPACE@[26; 31)\n+      EXPR_STMT@[31; 42)\n+        ATTR@[31; 35)\n+          POUND@[31; 32)\n+          TOKEN_TREE@[32; 35)\n+            L_BRACK@[32; 33)\n+            IDENT@[33; 34) \"B\"\n+            R_BRACK@[34; 35)\n+        WHITESPACE@[35; 36)\n+        MACRO_CALL@[36; 42)\n+          PATH@[36; 39)\n+            PATH_SEGMENT@[36; 39)\n+              NAME_REF@[36; 39)\n+                IDENT@[36; 39) \"bar\"\n+          EXCL@[39; 40)\n+          TOKEN_TREE@[40; 42)\n+            L_CURLY@[40; 41)\n+            R_CURLY@[41; 42)\n+      WHITESPACE@[42; 47)\n+      EXPR_STMT@[47; 59)\n+        ATTR@[47; 51)\n+          POUND@[47; 48)\n+          TOKEN_TREE@[48; 51)\n+            L_BRACK@[48; 49)\n+            IDENT@[49; 50) \"C\"\n+            R_BRACK@[50; 51)\n+        WHITESPACE@[51; 52)\n+        ATTR@[52; 56)\n+          POUND@[52; 53)\n+          TOKEN_TREE@[53; 56)\n+            L_BRACK@[53; 54)\n+            IDENT@[54; 55) \"D\"\n+            R_BRACK@[55; 56)\n+        WHITESPACE@[56; 57)\n+        BLOCK_EXPR@[57; 59)\n+          BLOCK@[57; 59)\n+            L_CURLY@[57; 58)\n+            R_CURLY@[58; 59)\n+      WHITESPACE@[59; 64)\n+      EXPR_STMT@[64; 79)\n+        ATTR@[64; 68)\n+          POUND@[64; 65)\n+          TOKEN_TREE@[65; 68)\n+            L_BRACK@[65; 66)\n+            IDENT@[66; 67) \"D\"\n+            R_BRACK@[67; 68)\n+        WHITESPACE@[68; 69)\n+        RETURN_EXPR@[69; 78)\n+          RETURN_KW@[69; 75)\n+          WHITESPACE@[75; 76)\n+          TUPLE_EXPR@[76; 78)\n+            L_PAREN@[76; 77)\n+            R_PAREN@[77; 78)\n+        SEMI@[78; 79)\n+      WHITESPACE@[79; 80)\n+      R_CURLY@[80; 81)\n+  WHITESPACE@[81; 82)"}, {"sha": "9c5c8eb3615db5d65bd3fa414ccbfdb071b5f430", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0127_attr_on_last_expr_in_block.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    { #[A] bar!()? }\n+    #[B] &()\n+}"}, {"sha": "4af64559c141a0c60ecc2437ee10d86b2bfd1822", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0127_attr_on_last_expr_in_block.txt", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ffed132e52964f029a586a3efd4afc879ed39c59/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.txt?ref=ffed132e52964f029a586a3efd4afc879ed39c59", "patch": "@@ -0,0 +1,54 @@\n+SOURCE_FILE@[0; 47)\n+  FN_DEF@[0; 46)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 46)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      EXPR_STMT@[15; 31)\n+        BLOCK_EXPR@[15; 31)\n+          BLOCK@[15; 31)\n+            L_CURLY@[15; 16)\n+            WHITESPACE@[16; 17)\n+            TRY_EXPR@[17; 29)\n+              ATTR@[17; 21)\n+                POUND@[17; 18)\n+                TOKEN_TREE@[18; 21)\n+                  L_BRACK@[18; 19)\n+                  IDENT@[19; 20) \"A\"\n+                  R_BRACK@[20; 21)\n+              WHITESPACE@[21; 22)\n+              MACRO_CALL@[22; 28)\n+                PATH@[22; 25)\n+                  PATH_SEGMENT@[22; 25)\n+                    NAME_REF@[22; 25)\n+                      IDENT@[22; 25) \"bar\"\n+                EXCL@[25; 26)\n+                TOKEN_TREE@[26; 28)\n+                  L_PAREN@[26; 27)\n+                  R_PAREN@[27; 28)\n+              QUESTION@[28; 29)\n+            WHITESPACE@[29; 30)\n+            R_CURLY@[30; 31)\n+      WHITESPACE@[31; 36)\n+      REF_EXPR@[36; 44)\n+        ATTR@[36; 40)\n+          POUND@[36; 37)\n+          TOKEN_TREE@[37; 40)\n+            L_BRACK@[37; 38)\n+            IDENT@[38; 39) \"B\"\n+            R_BRACK@[39; 40)\n+        WHITESPACE@[40; 41)\n+        AMP@[41; 42)\n+        TUPLE_EXPR@[42; 44)\n+          L_PAREN@[42; 43)\n+          R_PAREN@[43; 44)\n+      WHITESPACE@[44; 45)\n+      R_CURLY@[45; 46)\n+  WHITESPACE@[46; 47)"}]}