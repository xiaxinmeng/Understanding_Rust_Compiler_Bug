{"sha": "b737b894cb8974361881d98d7d0a6f75839ca345", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MzdiODk0Y2I4OTc0MzYxODgxZDk4ZDdkMGE2Zjc1ODM5Y2EzNDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T18:36:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T18:36:50Z"}, "message": "internal: switch some tests to minicore", "tree": {"sha": "6c66fcbf1b77f48208319efe83f0223b785f82bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c66fcbf1b77f48208319efe83f0223b785f82bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b737b894cb8974361881d98d7d0a6f75839ca345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b737b894cb8974361881d98d7d0a6f75839ca345", "html_url": "https://github.com/rust-lang/rust/commit/b737b894cb8974361881d98d7d0a6f75839ca345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b737b894cb8974361881d98d7d0a6f75839ca345/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "html_url": "https://github.com/rust-lang/rust/commit/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa"}], "stats": {"total": 213, "additions": 102, "deletions": 111}, "files": [{"sha": "d9b5ee9cf3ef06bf401458173b82796dac06b3ef", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b737b894cb8974361881d98d7d0a6f75839ca345/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b737b894cb8974361881d98d7d0a6f75839ca345/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=b737b894cb8974361881d98d7d0a6f75839ca345", "patch": "@@ -1222,11 +1222,7 @@ fn autoderef_visibility_method() {\n     cov_mark::check!(autoderef_candidate_not_visible);\n     check_infer(\n         r#\"\n-#[lang = \"deref\"]\n-pub trait Deref {\n-    type Target;\n-    fn deref(&self) -> &Self::Target;\n-}\n+//- minicore: deref\n mod a {\n     pub struct Foo(pub char);\n     impl Foo {\n@@ -1243,7 +1239,7 @@ mod a {\n             self.0\n         }\n     }\n-    impl super::Deref for Bar {\n+    impl core::ops::Deref for Bar {\n         type Target = Foo;\n         fn deref(&self) -> &Foo {\n             &Foo('z')\n@@ -1257,30 +1253,29 @@ mod b {\n }\n         \"#,\n         expect![[r#\"\n-            67..71 'self': &Self\n-            168..172 'self': &Foo\n-            182..212 '{     ...     }': char\n-            196..200 'self': &Foo\n-            196..202 'self.0': char\n-            288..319 '{     ...     }': Bar\n-            302..306 'Self': Bar(i32) -> Bar\n-            302..309 'Self(0)': Bar\n-            307..308 '0': i32\n-            338..342 'self': &Bar\n-            351..381 '{     ...     }': i32\n-            365..369 'self': &Bar\n-            365..371 'self.0': i32\n-            465..469 'self': &Bar\n-            479..512 '{     ...     }': &Foo\n-            493..502 '&Foo('z')': &Foo\n-            494..497 'Foo': Foo(char) -> Foo\n-            494..502 'Foo('z')': Foo\n-            498..501 ''z'': char\n-            542..595 '{     ...     }': ()\n-            556..557 'x': char\n-            560..578 'super:...r::new': fn new() -> Bar\n-            560..580 'super:...:new()': Bar\n-            560..588 'super:...ango()': char\n+            75..79 'self': &Foo\n+            89..119 '{     ...     }': char\n+            103..107 'self': &Foo\n+            103..109 'self.0': char\n+            195..226 '{     ...     }': Bar\n+            209..213 'Self': Bar(i32) -> Bar\n+            209..216 'Self(0)': Bar\n+            214..215 '0': i32\n+            245..249 'self': &Bar\n+            258..288 '{     ...     }': i32\n+            272..276 'self': &Bar\n+            272..278 'self.0': i32\n+            376..380 'self': &Bar\n+            390..423 '{     ...     }': &Foo\n+            404..413 '&Foo('z')': &Foo\n+            405..408 'Foo': Foo(char) -> Foo\n+            405..413 'Foo('z')': Foo\n+            409..412 ''z'': char\n+            453..506 '{     ...     }': ()\n+            467..468 'x': char\n+            471..489 'super:...r::new': fn new() -> Bar\n+            471..491 'super:...:new()': Bar\n+            471..499 'super:...ango()': char\n         \"#]],\n     )\n }"}, {"sha": "81d0215cf55aef47c1ae997ad7170c0c9f51ab48", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 77, "deletions": 81, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/b737b894cb8974361881d98d7d0a6f75839ca345/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b737b894cb8974361881d98d7d0a6f75839ca345/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=b737b894cb8974361881d98d7d0a6f75839ca345", "patch": "@@ -951,62 +951,57 @@ fn infer_argument_autoderef() {\n fn infer_method_argument_autoderef() {\n     check_infer(\n         r#\"\n-        #[lang = \"deref\"]\n-        pub trait Deref {\n-            type Target;\n-            fn deref(&self) -> &Self::Target;\n-        }\n+//- minicore: deref\n+use core::ops::Deref;\n+struct A<T>(*mut T);\n \n-        struct A<T>(*mut T);\n+impl<T> A<T> {\n+    fn foo(&self, x: &A<T>) -> &T {\n+        &*x.0\n+    }\n+}\n \n-        impl<T> A<T> {\n-            fn foo(&self, x: &A<T>) -> &T {\n-                &*x.0\n-            }\n-        }\n+struct B<T>(T);\n \n-        struct B<T>(T);\n-\n-        impl<T> Deref for B<T> {\n-            type Target = T;\n-            fn deref(&self) -> &Self::Target {\n-                &self.0\n-            }\n-        }\n+impl<T> Deref for B<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n \n-        fn test(a: A<i32>) {\n-            let t = A(0 as *mut _).foo(&&B(B(a)));\n-        }\n-        \"#,\n+fn test(a: A<i32>) {\n+    let t = A(0 as *mut _).foo(&&B(B(a)));\n+}\n+\"#,\n         expect![[r#\"\n-            67..71 'self': &Self\n-            143..147 'self': &A<T>\n-            149..150 'x': &A<T>\n-            165..186 '{     ...     }': &T\n-            175..180 '&*x.0': &T\n-            176..180 '*x.0': T\n-            177..178 'x': &A<T>\n-            177..180 'x.0': *mut T\n-            267..271 'self': &B<T>\n-            290..313 '{     ...     }': &T\n-            300..307 '&self.0': &T\n-            301..305 'self': &B<T>\n-            301..307 'self.0': T\n-            325..326 'a': A<i32>\n-            336..382 '{     ...))); }': ()\n-            346..347 't': &i32\n-            350..351 'A': A<i32>(*mut i32) -> A<i32>\n-            350..364 'A(0 as *mut _)': A<i32>\n-            350..379 'A(0 as...B(a)))': &i32\n-            352..353 '0': i32\n-            352..363 '0 as *mut _': *mut i32\n-            369..378 '&&B(B(a))': &&B<B<A<i32>>>\n-            370..378 '&B(B(a))': &B<B<A<i32>>>\n-            371..372 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n-            371..378 'B(B(a))': B<B<A<i32>>>\n-            373..374 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n-            373..377 'B(a)': B<A<i32>>\n-            375..376 'a': A<i32>\n+            71..75 'self': &A<T>\n+            77..78 'x': &A<T>\n+            93..114 '{     ...     }': &T\n+            103..108 '&*x.0': &T\n+            104..108 '*x.0': T\n+            105..106 'x': &A<T>\n+            105..108 'x.0': *mut T\n+            195..199 'self': &B<T>\n+            218..241 '{     ...     }': &T\n+            228..235 '&self.0': &T\n+            229..233 'self': &B<T>\n+            229..235 'self.0': T\n+            253..254 'a': A<i32>\n+            264..310 '{     ...))); }': ()\n+            274..275 't': &i32\n+            278..279 'A': A<i32>(*mut i32) -> A<i32>\n+            278..292 'A(0 as *mut _)': A<i32>\n+            278..307 'A(0 as...B(a)))': &i32\n+            280..281 '0': i32\n+            280..291 '0 as *mut _': *mut i32\n+            297..306 '&&B(B(a))': &&B<B<A<i32>>>\n+            298..306 '&B(B(a))': &B<B<A<i32>>>\n+            299..300 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n+            299..306 'B(B(a))': B<B<A<i32>>>\n+            301..302 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n+            301..305 'B(a)': B<A<i32>>\n+            303..304 'a': A<i32>\n         \"#]],\n     );\n }\n@@ -1015,15 +1010,15 @@ fn infer_method_argument_autoderef() {\n fn infer_in_elseif() {\n     check_infer(\n         r#\"\n-        struct Foo { field: i32 }\n-        fn main(foo: Foo) {\n-            if true {\n+struct Foo { field: i32 }\n+fn main(foo: Foo) {\n+    if true {\n \n-            } else if false {\n-                foo.field\n-            }\n-        }\n-        \"#,\n+    } else if false {\n+        foo.field\n+    }\n+}\n+\"#,\n         expect![[r#\"\n             34..37 'foo': Foo\n             44..108 '{     ...   } }': ()\n@@ -1043,28 +1038,29 @@ fn infer_in_elseif() {\n fn infer_if_match_with_return() {\n     check_infer(\n         r#\"\n-        fn foo() {\n-            let _x1 = if true {\n-                1\n-            } else {\n-                return;\n-            };\n-            let _x2 = if true {\n-                2\n-            } else {\n-                return\n-            };\n-            let _x3 = match true {\n-                true => 3,\n-                _ => {\n-                    return;\n-                }\n-            };\n-            let _x4 = match true {\n-                true => 4,\n-                _ => return\n-            };\n-        }\"#,\n+fn foo() {\n+    let _x1 = if true {\n+        1\n+    } else {\n+        return;\n+    };\n+    let _x2 = if true {\n+        2\n+    } else {\n+        return\n+    };\n+    let _x3 = match true {\n+        true => 3,\n+        _ => {\n+            return;\n+        }\n+    };\n+    let _x4 = match true {\n+        true => 4,\n+        _ => return\n+    };\n+}\n+\"#,\n         expect![[r#\"\n             9..322 '{     ...  }; }': ()\n             19..22 '_x1': i32"}]}