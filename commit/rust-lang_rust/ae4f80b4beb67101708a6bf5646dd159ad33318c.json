{"sha": "ae4f80b4beb67101708a6bf5646dd159ad33318c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNGY4MGI0YmViNjcxMDE3MDhhNmJmNTY0NmRkMTU5YWQzMzMxOGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-11-05T20:16:12Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-11-06T16:22:13Z"}, "message": "Revert \"Revert \"resolve: Avoid \"self-confirming\" import resolutions in one more case\"\"\n\nThis reverts commit b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2.\n\nIt retains the test added in that commit as a check-pass test, intended to\nprevent future (unintentional) regressions.", "tree": {"sha": "a210d9e1fe027b73bed002d3a7eec803bfee1906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a210d9e1fe027b73bed002d3a7eec803bfee1906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae4f80b4beb67101708a6bf5646dd159ad33318c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4f80b4beb67101708a6bf5646dd159ad33318c", "html_url": "https://github.com/rust-lang/rust/commit/ae4f80b4beb67101708a6bf5646dd159ad33318c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae4f80b4beb67101708a6bf5646dd159ad33318c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "html_url": "https://github.com/rust-lang/rust/commit/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "026cf8be73801043ba803177514dc0b978116106", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae4f80b4beb67101708a6bf5646dd159ad33318c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4f80b4beb67101708a6bf5646dd159ad33318c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=ae4f80b4beb67101708a6bf5646dd159ad33318c", "patch": "@@ -872,6 +872,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+        let orig_unusable_binding = match &import.kind {\n+            ImportKind::Single { target_bindings, .. } => {\n+                Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))\n+            }\n+            _ => None,\n+        };\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n         let path_res = self.r.resolve_path(\n             &import.module_path,\n@@ -882,6 +888,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             import.crate_lint(),\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n+        if let Some(orig_unusable_binding) = orig_unusable_binding {\n+            self.r.unusable_binding = orig_unusable_binding;\n+        }\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n             // Consider erroneous imports used to avoid duplicate diagnostics.\n@@ -892,8 +901,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 // Consistency checks, analogous to `finalize_macro_resolutions`.\n                 if let Some(initial_module) = import.imported_module.get() {\n                     if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {\n-                        let msg = \"inconsistent resolution for an import\";\n-                        self.r.session.span_err(import.span, msg);\n+                        span_bug!(import.span, \"inconsistent resolution for an import\");\n                     }\n                 } else if self.r.privacy_errors.is_empty() {\n                     let msg = \"cannot determine resolution for the import\";\n@@ -913,6 +921,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             }\n             PathResult::Failed { is_error_from_last_segment: true, span, label, suggestion } => {\n                 if no_ambiguity {\n+                    assert!(import.imported_module.get().is_none());\n                     let err = match self.make_path_suggestion(\n                         span,\n                         import.module_path.clone(),"}, {"sha": "01184eea9b495508689350b9ebb01055adee6969", "filename": "src/test/ui/imports/issue-62767.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae4f80b4beb67101708a6bf5646dd159ad33318c/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4f80b4beb67101708a6bf5646dd159ad33318c/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs?ref=ae4f80b4beb67101708a6bf5646dd159ad33318c", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n // Minimized case from #62767.\n mod m {\n     pub enum Same {\n@@ -9,7 +11,7 @@ use m::*;\n \n // The variant `Same` introduced by this import is also considered when resolving the prefix\n // `Same::` during import validation to avoid effects similar to time travel (#74556).\n-use Same::Same; //~ ERROR unresolved import `Same`\n+use Same::Same;\n \n // Case from #74556.\n mod foo {\n@@ -21,8 +23,8 @@ mod foo {\n }\n \n use foo::*;\n-use bar::bar; //~ ERROR unresolved import `bar::bar`\n-              //~| ERROR inconsistent resolution for an import\n+use bar::bar;\n+\n use bar::foobar;\n \n fn main() {}"}, {"sha": "a4334bda6dd870b8d1864fa13eba6de6c63c02d8", "filename": "src/test/ui/imports/issue-62767.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fimports%2Fissue-62767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044/src%2Ftest%2Fui%2Fimports%2Fissue-62767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-62767.stderr?ref=b1d9f31e043d0ba2782a4bb7416f18c4ba1c9044", "patch": "@@ -1,21 +0,0 @@\n-error: inconsistent resolution for an import\n-  --> $DIR/issue-62767.rs:24:5\n-   |\n-LL | use bar::bar;\n-   |     ^^^^^^^^\n-\n-error[E0432]: unresolved import `Same`\n-  --> $DIR/issue-62767.rs:12:5\n-   |\n-LL | use Same::Same;\n-   |     ^^^^ `Same` is a variant, not a module\n-\n-error[E0432]: unresolved import `bar::bar`\n-  --> $DIR/issue-62767.rs:24:5\n-   |\n-LL | use bar::bar;\n-   |     ^^^^^^^^ no `bar` in `foo::bar::bar`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0432`."}]}