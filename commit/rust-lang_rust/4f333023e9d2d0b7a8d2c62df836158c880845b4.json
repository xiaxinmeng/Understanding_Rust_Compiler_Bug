{"sha": "4f333023e9d2d0b7a8d2c62df836158c880845b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzMzMDIzZTlkMmQwYjdhOGQyYzYyZGY4MzYxNThjODgwODQ1YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-14T21:13:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-14T21:13:21Z"}, "message": "auto merge of #7790 : blake2-ppc/rust/dlist-ringbuf-small-changes, r=thestinger\n\nImplement size_hint for the ringbuf iterators.\r\n\r\nDo small cleanups in dlist, use Option's .map and .map_mut properly, and put inline on all the small methods.", "tree": {"sha": "19e4b2c32b7d33001b16e3694cabb003b5101f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e4b2c32b7d33001b16e3694cabb003b5101f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f333023e9d2d0b7a8d2c62df836158c880845b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f333023e9d2d0b7a8d2c62df836158c880845b4", "html_url": "https://github.com/rust-lang/rust/commit/4f333023e9d2d0b7a8d2c62df836158c880845b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f333023e9d2d0b7a8d2c62df836158c880845b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb1ac0f9f7bf98ea8ab5ccbd6ef319decc41a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb1ac0f9f7bf98ea8ab5ccbd6ef319decc41a72", "html_url": "https://github.com/rust-lang/rust/commit/0cb1ac0f9f7bf98ea8ab5ccbd6ef319decc41a72"}, {"sha": "961184f8523dde2f482d86c73d296d801bfa4c77", "url": "https://api.github.com/repos/rust-lang/rust/commits/961184f8523dde2f482d86c73d296d801bfa4c77", "html_url": "https://github.com/rust-lang/rust/commit/961184f8523dde2f482d86c73d296d801bfa4c77"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "9eacddd90028b8ccdcfe6d2f75407dbce9fcde74", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4f333023e9d2d0b7a8d2c62df836158c880845b4/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f333023e9d2d0b7a8d2c62df836158c880845b4/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=4f333023e9d2d0b7a8d2c62df836158c880845b4", "patch": "@@ -101,10 +101,12 @@ fn link_with_prev<T>(mut next: ~Node<T>, prev: Rawlink<Node<T>>) -> Link<T> {\n \n impl<T> Container for DList<T> {\n     /// O(1)\n+    #[inline]\n     fn is_empty(&self) -> bool {\n         self.list_head.is_none()\n     }\n     /// O(1)\n+    #[inline]\n     fn len(&self) -> uint {\n         self.length\n     }\n@@ -114,39 +116,35 @@ impl<T> Mutable for DList<T> {\n     /// Remove all elements from the DList\n     ///\n     /// O(N)\n+    #[inline]\n     fn clear(&mut self) {\n         *self = DList::new()\n     }\n }\n \n impl<T> Deque<T> for DList<T> {\n     /// Provide a reference to the front element, or None if the list is empty\n+    #[inline]\n     fn front<'a>(&'a self) -> Option<&'a T> {\n-        self.list_head.chain_ref(|x| Some(&x.value))\n+        self.list_head.map(|head| &head.value)\n     }\n \n     /// Provide a mutable reference to the front element, or None if the list is empty\n+    #[inline]\n     fn front_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n-        match self.list_head {\n-            None => None,\n-            Some(ref mut head) => Some(&mut head.value),\n-        }\n+        self.list_head.map_mut(|head| &mut head.value)\n     }\n \n     /// Provide a reference to the back element, or None if the list is empty\n+    #[inline]\n     fn back<'a>(&'a self) -> Option<&'a T> {\n-        match self.list_tail.resolve_immut() {\n-            None => None,\n-            Some(tail) => Some(&tail.value),\n-        }\n+        self.list_tail.resolve_immut().map(|tail| &tail.value)\n     }\n \n     /// Provide a mutable reference to the back element, or None if the list is empty\n+    #[inline]\n     fn back_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n-        match self.list_tail.resolve() {\n-            None => None,\n-            Some(tail) => Some(&mut tail.value),\n-        }\n+        self.list_tail.resolve().map_mut(|tail| &mut tail.value)\n     }\n \n     /// Add an element last in the list\n@@ -167,7 +165,6 @@ impl<T> Deque<T> for DList<T> {\n     /// Remove the last element and return it, or None if the list is empty\n     ///\n     /// O(1)\n-    #[inline]\n     fn pop_back(&mut self) -> Option<T> {\n         match self.list_tail.resolve() {\n             None => None,\n@@ -259,6 +256,7 @@ impl<T> DList<T> {\n     /// Add all elements from `other` to the beginning of the list\n     ///\n     /// O(1)\n+    #[inline]\n     pub fn prepend(&mut self, mut other: DList<T>) {\n         util::swap(self, &mut other);\n         self.append(other);\n@@ -268,7 +266,6 @@ impl<T> DList<T> {\n     /// or at the end.\n     ///\n     /// O(N)\n-    #[inline]\n     pub fn insert_when(&mut self, elt: T, f: &fn(&T, &T) -> bool) {\n         {\n             let mut it = self.mut_iter();\n@@ -309,16 +306,19 @@ impl<T> DList<T> {\n \n \n     /// Provide a forward iterator\n+    #[inline]\n     pub fn iter<'a>(&'a self) -> DListIterator<'a, T> {\n         DListIterator{nelem: self.len(), head: &self.list_head, tail: self.list_tail}\n     }\n \n     /// Provide a reverse iterator\n+    #[inline]\n     pub fn rev_iter<'a>(&'a self) -> InvertIterator<&'a T, DListIterator<'a, T>> {\n         self.iter().invert()\n     }\n \n     /// Provide a forward iterator with mutable references\n+    #[inline]\n     pub fn mut_iter<'a>(&'a mut self) -> MutDListIterator<'a, T> {\n         let head_raw = match self.list_head {\n             Some(ref mut h) => Rawlink::some(*h),\n@@ -332,18 +332,21 @@ impl<T> DList<T> {\n         }\n     }\n     /// Provide a reverse iterator with mutable references\n+    #[inline]\n     pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<&'a mut T,\n                                                 MutDListIterator<'a, T>> {\n         self.mut_iter().invert()\n     }\n \n \n     /// Consume the list into an iterator yielding elements by value\n+    #[inline]\n     pub fn consume_iter(self) -> ConsumeIterator<T> {\n         ConsumeIterator{list: self}\n     }\n \n     /// Consume the list into an iterator yielding elements by value, in reverse\n+    #[inline]\n     pub fn consume_rev_iter(self) -> InvertIterator<T, ConsumeIterator<T>> {\n         self.consume_iter().invert()\n     }\n@@ -353,6 +356,7 @@ impl<T: cmp::TotalOrd> DList<T> {\n     /// Insert `elt` sorted in ascending order\n     ///\n     /// O(N)\n+    #[inline]\n     pub fn insert_ordered(&mut self, elt: T) {\n         self.insert_when(elt, |a, b| a.cmp(b) != cmp::Less);\n     }\n@@ -374,12 +378,14 @@ impl<'self, A> Iterator<&'self A> for DListIterator<'self, A> {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         (self.nelem, Some(self.nelem))\n     }\n }\n \n impl<'self, A> DoubleEndedIterator<&'self A> for DListIterator<'self, A> {\n+    #[inline]\n     fn next_back(&mut self) -> Option<&'self A> {\n         if self.nelem == 0 {\n             return None;\n@@ -414,6 +420,7 @@ impl<'self, A> Iterator<&'self mut A> for MutDListIterator<'self, A> {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         (self.nelem, Some(self.nelem))\n     }\n@@ -466,6 +473,7 @@ impl<'self, A> ListInsertion<A> for MutDListIterator<'self, A> {\n         }\n     }\n \n+    #[inline]\n     fn peek_next<'a>(&'a mut self) -> Option<&'a mut A> {\n         match self.head.resolve() {\n             None => None,\n@@ -475,13 +483,17 @@ impl<'self, A> ListInsertion<A> for MutDListIterator<'self, A> {\n }\n \n impl<A> Iterator<A> for ConsumeIterator<A> {\n+    #[inline]\n     fn next(&mut self) -> Option<A> { self.list.pop_front() }\n+\n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         (self.list.length, Some(self.list.length))\n     }\n }\n \n impl<A> DoubleEndedIterator<A> for ConsumeIterator<A> {\n+    #[inline]\n     fn next_back(&mut self) -> Option<A> { self.list.pop_back() }\n }\n \n@@ -498,6 +510,8 @@ impl<A: Eq> Eq for DList<A> {\n         self.len() == other.len() &&\n             self.iter().zip(other.iter()).all(|(a, b)| a.eq(b))\n     }\n+\n+    #[inline]\n     fn ne(&self, other: &DList<A>) -> bool {\n         !self.eq(other)\n     }"}, {"sha": "5d9f77b9c2699d565947aaef45699d1837d4ac13", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f333023e9d2d0b7a8d2c62df836158c880845b4/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f333023e9d2d0b7a8d2c62df836158c880845b4/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=4f333023e9d2d0b7a8d2c62df836158c880845b4", "patch": "@@ -214,6 +214,11 @@ macro_rules! iterator {\n                 self.nelts -= 1;\n                 Some(self.elts[raw_index]. $getter ())\n             }\n+\n+            #[inline]\n+            fn size_hint(&self) -> (uint, Option<uint>) {\n+                (self.nelts, Some(self.nelts))\n+            }\n         }\n     }\n }\n@@ -578,6 +583,7 @@ mod tests {\n     fn test_iter() {\n         let mut d = RingBuf::new();\n         assert_eq!(d.iter().next(), None);\n+        assert_eq!(d.iter().size_hint(), (0, Some(0)));\n \n         for int::range(0,5) |i| {\n             d.push_back(i);\n@@ -588,6 +594,15 @@ mod tests {\n             d.push_front(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&8,&7,&6,&0,&1,&2,&3,&4]);\n+\n+        let mut it = d.iter();\n+        let mut len = d.len();\n+        loop {\n+            match it.next() {\n+                None => break,\n+                _ => { len -= 1; assert_eq!(it.size_hint(), (len, Some(len))) }\n+            }\n+        }\n     }\n \n     #[test]"}]}