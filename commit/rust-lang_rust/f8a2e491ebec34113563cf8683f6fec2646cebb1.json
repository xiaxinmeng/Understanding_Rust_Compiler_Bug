{"sha": "f8a2e491ebec34113563cf8683f6fec2646cebb1", "node_id": "C_kwDOAAsO6NoAKGY4YTJlNDkxZWJlYzM0MTEzNTYzY2Y4NjgzZjZmZWMyNjQ2Y2ViYjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-26T05:41:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-26T05:41:34Z"}, "message": "Auto merge of #104730 - petrochenkov:modchild5, r=cjgillot\n\nrustc_metadata: Switch module children decoding to an iterator\n\nPreviously https://github.com/rust-lang/rust/pull/103578, https://github.com/rust-lang/rust/pull/103524 and previous PRs simplified it as much as possible.\n\nA couple of cleanup commits is also added.\nr? `@cjgillot`", "tree": {"sha": "b8e5eeaab730055f5d2c1e93deb8552db626e7d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e5eeaab730055f5d2c1e93deb8552db626e7d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8a2e491ebec34113563cf8683f6fec2646cebb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a2e491ebec34113563cf8683f6fec2646cebb1", "html_url": "https://github.com/rust-lang/rust/commit/f8a2e491ebec34113563cf8683f6fec2646cebb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8a2e491ebec34113563cf8683f6fec2646cebb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa44b54641cac7dc47964870d08b4ec82fc8157", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa44b54641cac7dc47964870d08b4ec82fc8157", "html_url": "https://github.com/rust-lang/rust/commit/5fa44b54641cac7dc47964870d08b4ec82fc8157"}, {"sha": "24f2ee1efd6ed9bd0c94223c8f196fdc55202804", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f2ee1efd6ed9bd0c94223c8f196fdc55202804", "html_url": "https://github.com/rust-lang/rust/commit/24f2ee1efd6ed9bd0c94223c8f196fdc55202804"}], "stats": {"total": 136, "additions": 54, "deletions": 82}, "files": [{"sha": "08d377646d5433016595e9573f7300fa554c06c7", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 38, "deletions": 61, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f8a2e491ebec34113563cf8683f6fec2646cebb1", "patch": "@@ -29,17 +29,16 @@ use rustc_session::cstore::{\n     CrateSource, ExternCrate, ForeignModule, LinkagePreference, NativeLib,\n };\n use rustc_session::Session;\n-use rustc_span::hygiene::{ExpnIndex, MacroKind};\n+use rustc_span::hygiene::ExpnIndex;\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n \n use proc_macro::bridge::client::ProcMacro;\n-use std::io;\n use std::iter::TrustedLen;\n-use std::mem;\n use std::num::NonZeroUsize;\n use std::path::Path;\n+use std::{io, iter, mem};\n \n pub(super) use cstore_impl::provide;\n pub use cstore_impl::provide_extern;\n@@ -984,64 +983,52 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         DiagnosticItems { id_to_name, name_to_id }\n     }\n \n+    fn get_mod_child(self, id: DefIndex, sess: &Session) -> ModChild {\n+        let ident = self.item_ident(id, sess);\n+        let kind = self.def_kind(id);\n+        let def_id = self.local_def_id(id);\n+        let res = Res::Def(kind, def_id);\n+        let vis = self.get_visibility(id);\n+        let span = self.get_span(id, sess);\n+        let macro_rules = match kind {\n+            DefKind::Macro(..) => self.root.tables.macro_rules.get(self, id).is_some(),\n+            _ => false,\n+        };\n+\n+        ModChild { ident, res, vis, span, macro_rules }\n+    }\n+\n     /// Iterates over all named children of the given module,\n     /// including both proper items and reexports.\n     /// Module here is understood in name resolution sense - it can be a `mod` item,\n     /// or a crate root, or an enum, or a trait.\n-    fn for_each_module_child(\n+    fn get_module_children(\n         self,\n         id: DefIndex,\n-        mut callback: impl FnMut(ModChild),\n-        sess: &Session,\n-    ) {\n-        if let Some(data) = &self.root.proc_macro_data {\n-            // If we are loading as a proc macro, we want to return\n-            // the view of this crate as a proc macro crate.\n-            if id == CRATE_DEF_INDEX {\n-                for def_index in data.macros.decode(self) {\n-                    let raw_macro = self.raw_proc_macro(def_index);\n-                    let res = Res::Def(\n-                        DefKind::Macro(macro_kind(raw_macro)),\n-                        self.local_def_id(def_index),\n-                    );\n-                    let ident = self.item_ident(def_index, sess);\n-                    callback(ModChild {\n-                        ident,\n-                        res,\n-                        vis: ty::Visibility::Public,\n-                        span: ident.span,\n-                        macro_rules: false,\n-                    });\n+        sess: &'a Session,\n+    ) -> impl Iterator<Item = ModChild> + 'a {\n+        iter::from_generator(move || {\n+            if let Some(data) = &self.root.proc_macro_data {\n+                // If we are loading as a proc macro, we want to return\n+                // the view of this crate as a proc macro crate.\n+                if id == CRATE_DEF_INDEX {\n+                    for child_index in data.macros.decode(self) {\n+                        yield self.get_mod_child(child_index, sess);\n+                    }\n+                }\n+            } else {\n+                // Iterate over all children.\n+                for child_index in self.root.tables.children.get(self, id).unwrap().decode(self) {\n+                    yield self.get_mod_child(child_index, sess);\n                 }\n-            }\n-            return;\n-        }\n \n-        // Iterate over all children.\n-        if let Some(children) = self.root.tables.children.get(self, id) {\n-            for child_index in children.decode((self, sess)) {\n-                let ident = self.item_ident(child_index, sess);\n-                let kind = self.def_kind(child_index);\n-                let def_id = self.local_def_id(child_index);\n-                let res = Res::Def(kind, def_id);\n-                let vis = self.get_visibility(child_index);\n-                let span = self.get_span(child_index, sess);\n-                let macro_rules = match kind {\n-                    DefKind::Macro(..) => {\n-                        self.root.tables.macro_rules.get(self, child_index).is_some()\n+                if let Some(reexports) = self.root.tables.module_reexports.get(self, id) {\n+                    for reexport in reexports.decode((self, sess)) {\n+                        yield reexport;\n                     }\n-                    _ => false,\n-                };\n-\n-                callback(ModChild { ident, res, vis, span, macro_rules });\n-            }\n-        }\n-\n-        if let Some(exports) = self.root.tables.module_reexports.get(self, id) {\n-            for exp in exports.decode((self, sess)) {\n-                callback(exp);\n+                }\n             }\n-        }\n+        })\n     }\n \n     fn is_ctfe_mir_available(self, id: DefIndex) -> bool {\n@@ -1778,13 +1765,3 @@ impl CrateMetadata {\n         None\n     }\n }\n-\n-// Cannot be implemented on 'ProcMacro', as libproc_macro\n-// does not depend on librustc_ast\n-fn macro_kind(raw: &ProcMacro) -> MacroKind {\n-    match raw {\n-        ProcMacro::CustomDerive { .. } => MacroKind::Derive,\n-        ProcMacro::Attr { .. } => MacroKind::Attr,\n-        ProcMacro::Bang { .. } => MacroKind::Bang,\n-    }\n-}"}, {"sha": "33cce0a411e81babf281a72e64061927c0eb1968", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f8a2e491ebec34113563cf8683f6fec2646cebb1", "patch": "@@ -21,7 +21,6 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, Symbol};\n \n use rustc_data_structures::sync::Lrc;\n-use smallvec::SmallVec;\n use std::any::Any;\n \n use super::{Decodable, DecodeContext, DecodeIterator};\n@@ -298,9 +297,7 @@ provide! { tcx, def_id, other, cdata,\n         r\n     }\n     module_children => {\n-        let mut result = SmallVec::<[_; 8]>::new();\n-        cdata.for_each_module_child(def_id.index, |child| result.push(child), tcx.sess);\n-        tcx.arena.alloc_slice(&result)\n+        tcx.arena.alloc_from_iter(cdata.get_module_children(def_id.index, tcx.sess))\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n     stability_implications => {\n@@ -503,14 +500,12 @@ impl CStore {\n         self.get_crate_data(def.krate).get_visibility(def.index)\n     }\n \n-    pub fn module_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<ModChild> {\n-        let mut result = vec![];\n-        self.get_crate_data(def_id.krate).for_each_module_child(\n-            def_id.index,\n-            |child| result.push(child),\n-            sess,\n-        );\n-        result\n+    pub fn module_children_untracked<'a>(\n+        &'a self,\n+        def_id: DefId,\n+        sess: &'a Session,\n+    ) -> impl Iterator<Item = ModChild> + 'a {\n+        self.get_crate_data(def_id.krate).get_module_children(def_id.index, sess)\n     }\n \n     pub fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {"}, {"sha": "8b4c4bb2675cb62309fe840c2c5efc1303b1ca72", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f8a2e491ebec34113563cf8683f6fec2646cebb1", "patch": "@@ -1267,13 +1267,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         // the crate root for consistency with other crates (some of the resolver\n         // code uses it). However, we skip encoding anything relating to child\n         // items - we encode information about proc-macros later on.\n-        let reexports = if !self.is_proc_macro {\n-            tcx.module_reexports(local_def_id).unwrap_or(&[])\n-        } else {\n-            &[]\n-        };\n-\n-        record_array!(self.tables.module_reexports[def_id] <- reexports);\n         if self.is_proc_macro {\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n@@ -1305,6 +1298,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     }\n                 }\n             }));\n+\n+            if let Some(reexports) = tcx.module_reexports(local_def_id) {\n+                assert!(!reexports.is_empty());\n+                record_array!(self.tables.module_reexports[def_id] <- reexports);\n+            }\n         }\n     }\n "}, {"sha": "91ac442431dfe0335cc4e8c37673557ba2c6e371", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=f8a2e491ebec34113563cf8683f6fec2646cebb1", "patch": "@@ -204,7 +204,9 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub(crate) fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n-        for child in self.cstore().module_children_untracked(module.def_id(), self.session) {\n+        for child in\n+            Vec::from_iter(self.cstore().module_children_untracked(module.def_id(), self.session))\n+        {\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);"}, {"sha": "ad05d4f1446b42bc323d51f718d300d7dd1ad9c8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a2e491ebec34113563cf8683f6fec2646cebb1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f8a2e491ebec34113563cf8683f6fec2646cebb1", "patch": "@@ -1920,7 +1920,7 @@ impl<'a> Resolver<'a> {\n         if let Some(def_id) = def_id.as_local() {\n             self.reexport_map.get(&def_id).cloned().unwrap_or_default()\n         } else {\n-            self.cstore().module_children_untracked(def_id, self.session)\n+            self.cstore().module_children_untracked(def_id, self.session).collect()\n         }\n     }\n "}]}