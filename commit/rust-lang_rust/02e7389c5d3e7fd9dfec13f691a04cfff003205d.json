{"sha": "02e7389c5d3e7fd9dfec13f691a04cfff003205d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZTczODljNWQzZTdmZDlkZmVjMTNmNjkxYTA0Y2ZmZjAwMzIwNWQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T18:53:25Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcore: use unboxed closures in the `char` module", "tree": {"sha": "128bcf6c35ffe9df234be306072216a065bc116c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128bcf6c35ffe9df234be306072216a065bc116c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e7389c5d3e7fd9dfec13f691a04cfff003205d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e7389c5d3e7fd9dfec13f691a04cfff003205d", "html_url": "https://github.com/rust-lang/rust/commit/02e7389c5d3e7fd9dfec13f691a04cfff003205d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e7389c5d3e7fd9dfec13f691a04cfff003205d/comments", "author": null, "committer": null, "parents": [{"sha": "1a87fc7c9f6ce91293fd6553a49536f2ceccc165", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a87fc7c9f6ce91293fd6553a49536f2ceccc165", "html_url": "https://github.com/rust-lang/rust/commit/1a87fc7c9f6ce91293fd6553a49536f2ceccc165"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "75f7991df027b51fc8df78d4feea4433b107dd7a", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02e7389c5d3e7fd9dfec13f691a04cfff003205d/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e7389c5d3e7fd9dfec13f691a04cfff003205d/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=02e7389c5d3e7fd9dfec13f691a04cfff003205d", "patch": "@@ -16,6 +16,7 @@\n #![doc(primitive = \"char\")]\n \n use mem::transmute;\n+use ops::FnMut;\n use option::Option;\n use option::Option::{None, Some};\n use iter::{range_step, Iterator, RangeStep};\n@@ -165,7 +166,7 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n /// - chars above 0x10000 get 8-digit escapes: `\\\\u{{NNN}NNNNN}`\n ///\n #[deprecated = \"use the Char::escape_unicode method\"]\n-pub fn escape_unicode(c: char, f: |char|) {\n+pub fn escape_unicode<F>(c: char, mut f: F) where F: FnMut(char) {\n     for char in c.escape_unicode() {\n         f(char);\n     }\n@@ -184,7 +185,7 @@ pub fn escape_unicode(c: char, f: |char|) {\n /// - Any other chars are given hex Unicode escapes; see `escape_unicode`.\n ///\n #[deprecated = \"use the Char::escape_default method\"]\n-pub fn escape_default(c: char, f: |char|) {\n+pub fn escape_default<F>(c: char, mut f: F) where F: FnMut(char) {\n     for c in c.escape_default() {\n         f(c);\n     }"}]}