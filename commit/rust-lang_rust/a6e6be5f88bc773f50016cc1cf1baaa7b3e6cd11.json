{"sha": "a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZTZiZTVmODhiYzc3M2Y1MDAxNmNjMWNmMWJhYWE3YjNlNmNkMTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-17T13:54:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-30T11:55:29Z"}, "message": "port `return` expressions to use `CoerceMany`\n\nThis slightly affects the error messages in one particular compile-fail\ntest.", "tree": {"sha": "463c6a7caa10efb57481b2cba2ae7727f733e02d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/463c6a7caa10efb57481b2cba2ae7727f733e02d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "html_url": "https://github.com/rust-lang/rust/commit/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b725272b265268fbe4f3220111ae1a053b3a37a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b725272b265268fbe4f3220111ae1a053b3a37a7", "html_url": "https://github.com/rust-lang/rust/commit/b725272b265268fbe4f3220111ae1a053b3a37a7"}], "stats": {"total": 99, "additions": 66, "deletions": 33}, "files": [{"sha": "905d8688ea194a42e7d431bb417924950084b858", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "patch": "@@ -362,7 +362,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 &infcx.parameter_environment.caller_bounds);\n             infcx.resolve_regions_and_report_errors(&free_regions, impl_m_body_id);\n         } else {\n-            let fcx = FnCtxt::new(&inh, Some(tcx.types.err), impl_m_body_id);\n+            let fcx = FnCtxt::new(&inh, impl_m_body_id);\n             fcx.regionck_item(impl_m_body_id, impl_m_span, &[]);\n         }\n "}, {"sha": "619f4fb10c544a8b61d1f89718bad8ef93174145", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 62, "deletions": 23, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "patch": "@@ -448,7 +448,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // expects the types within the function to be consistent.\n     err_count_on_creation: usize,\n \n-    ret_ty: Option<Ty<'tcx>>,\n+    ret_coercion: Option<RefCell<CoerceMany<'gcx, 'tcx>>>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -679,7 +679,7 @@ fn typeck_tables<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             check_fn(&inh, fn_sig, decl, id, body)\n         } else {\n-            let fcx = FnCtxt::new(&inh, None, body.value.id);\n+            let fcx = FnCtxt::new(&inh, body.value.id);\n             let expected_type = tcx.item_type(def_id);\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, &expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n@@ -800,15 +800,16 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Create the function context.  This is either derived from scratch or,\n     // in the case of function expressions, based on the outer context.\n-    let mut fcx = FnCtxt::new(inherited, None, body.value.id);\n-    let ret_ty = fn_sig.output();\n+    let mut fcx = FnCtxt::new(inherited, body.value.id);\n     *fcx.ps.borrow_mut() = UnsafetyState::function(fn_sig.unsafety, fn_id);\n \n+    let ret_ty = fn_sig.output();\n     fcx.require_type_is_sized(ret_ty, decl.output.span(), traits::ReturnType);\n-    fcx.ret_ty = fcx.instantiate_anon_types(&Some(ret_ty));\n+    let ret_ty = fcx.instantiate_anon_types(&ret_ty);\n+    fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fn_sig = fcx.tcx.mk_fn_sig(\n         fn_sig.inputs().iter().cloned(),\n-        fcx.ret_ty.unwrap(),\n+        ret_ty,\n         fn_sig.variadic,\n         fn_sig.unsafety,\n         fn_sig.abi\n@@ -833,7 +834,38 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     inherited.tables.borrow_mut().liberated_fn_sigs.insert(fn_id, fn_sig);\n \n-    fcx.check_expr_coercable_to_type(&body.value, fcx.ret_ty.unwrap());\n+    fcx.check_return_expr(&body.value);\n+\n+    // Finalize the return check by taking the LUB of the return types\n+    // we saw and assigning it to the expected return type. This isn't\n+    // really expected to fail, since the coercions would have failed\n+    // earlier when trying to find a LUB.\n+    //\n+    // However, the behavior around `!` is sort of complex. In the\n+    // event that the `actual_return_ty` comes back as `!`, that\n+    // indicates that the fn either does not return or \"returns\" only\n+    // values of type `!`. In this case, if there is an expected\n+    // return type that is *not* `!`, that should be ok. But if the\n+    // return type is being inferred, we want to \"fallback\" to `!`:\n+    //\n+    //     let x = move || panic!();\n+    //\n+    // To allow for that, I am creating a type variable with diverging\n+    // fallback. This was deemed ever so slightly better than unifying\n+    // the return value with `!` because it allows for the caller to\n+    // make more assumptions about the return type (e.g., they could do\n+    //\n+    //     let y: Option<u32> = Some(x());\n+    //\n+    // which would then cause this return type to become `u32`, not\n+    // `!`).\n+    let coercion = fcx.ret_coercion.take().unwrap().into_inner();\n+    let mut actual_return_ty = coercion.complete(&fcx);\n+    if actual_return_ty.is_never() {\n+        actual_return_ty = fcx.next_diverging_ty_var(\n+            TypeVariableOrigin::DivergingFn(body.value.span));\n+    }\n+    fcx.demand_suptype(body.value.span, ret_ty, actual_return_ty);\n \n     fcx\n }\n@@ -1429,14 +1461,13 @@ enum TupleArgumentsFlag {\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn new(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n-               rty: Option<Ty<'tcx>>,\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n         FnCtxt {\n             ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n             body_id: body_id,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n-            ret_ty: rty,\n+            ret_coercion: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal,\n                                                      ast::CRATE_NODE_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n@@ -2738,6 +2769,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ret_ty\n     }\n \n+    fn check_return_expr(&self, return_expr: &'gcx hir::Expr) {\n+        let ret_coercion =\n+            self.ret_coercion\n+                .as_ref()\n+                .unwrap_or_else(|| span_bug!(return_expr.span,\n+                                             \"check_return_expr called outside fn body\"));\n+\n+        let ret_ty = ret_coercion.borrow().expected_ty();\n+        let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty);\n+        ret_coercion.borrow_mut()\n+                    .coerce(self,\n+                            &self.misc(return_expr.span),\n+                            return_expr,\n+                            return_expr_ty);\n+    }\n+\n+\n     // A generic function for checking the then and else in an if\n     // or if-else.\n     fn check_then_else(&self,\n@@ -3522,24 +3570,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprAgain(_) => { tcx.types.never }\n           hir::ExprRet(ref expr_opt) => {\n-            if self.ret_ty.is_none() {\n+            if self.ret_coercion.is_none() {\n                 struct_span_err!(self.tcx.sess, expr.span, E0572,\n                                  \"return statement outside of function body\").emit();\n             } else if let Some(ref e) = *expr_opt {\n-                self.check_expr_coercable_to_type(&e, self.ret_ty.unwrap());\n+                self.check_return_expr(e);\n             } else {\n-                match self.eq_types(false,\n-                                    &self.misc(expr.span),\n-                                    self.ret_ty.unwrap(),\n-                                    tcx.mk_nil()) {\n-                    Ok(ok) => self.register_infer_ok_obligations(ok),\n-                    Err(_) => {\n-                        struct_span_err!(tcx.sess, expr.span, E0069,\n-                                         \"`return;` in a function whose return type is not `()`\")\n-                            .span_label(expr.span, &format!(\"return type is not ()\"))\n-                            .emit();\n-                    }\n-                }\n+                let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n+                let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n+                coercion.coerce_forced_unit(self, &cause);\n             }\n             tcx.types.never\n           }"}, {"sha": "85c87adf9be68a01e2865d908a3f7347c6b9a287", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         let id = self.id;\n         let span = self.span;\n         self.inherited.enter(|inh| {\n-            let fcx = FnCtxt::new(&inh, None, id);\n+            let fcx = FnCtxt::new(&inh, id);\n             let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n                 tcx: fcx.tcx.global_tcx(),\n                 code: code"}, {"sha": "810a8671c536bf3408c6345ca9983b72c81afe37", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "patch": "@@ -16,17 +16,11 @@ struct an_enum<'a>(&'a isize);\n struct a_class<'a> { x:&'a isize }\n \n fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n-    return e; //~  ERROR mismatched types\n-              //~| expected type `an_enum<'b>`\n-              //~| found type `an_enum<'a>`\n-              //~| lifetime mismatch\n+    return e; //~^ ERROR mismatched types\n }\n \n fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n-    return e; //~  ERROR mismatched types\n-              //~| expected type `a_class<'b>`\n-              //~| found type `a_class<'a>`\n-              //~| lifetime mismatch\n+    return e; //~^ ERROR mismatched types\n }\n \n fn main() { }"}]}