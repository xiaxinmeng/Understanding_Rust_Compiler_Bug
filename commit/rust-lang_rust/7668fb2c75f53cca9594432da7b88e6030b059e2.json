{"sha": "7668fb2c75f53cca9594432da7b88e6030b059e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NjhmYjJjNzVmNTNjY2E5NTk0NDMyZGE3Yjg4ZTYwMzBiMDU5ZTI=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-07-08T22:52:51Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:07Z"}, "message": "make ifn macro non-capturing", "tree": {"sha": "2f8175af6146dbb7487763eab6ed7f545ea4c4ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f8175af6146dbb7487763eab6ed7f545ea4c4ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7668fb2c75f53cca9594432da7b88e6030b059e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7668fb2c75f53cca9594432da7b88e6030b059e2", "html_url": "https://github.com/rust-lang/rust/commit/7668fb2c75f53cca9594432da7b88e6030b059e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7668fb2c75f53cca9594432da7b88e6030b059e2/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ca2dbbc5072713b91a4f444bb1fdcd0d69e19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ca2dbbc5072713b91a4f444bb1fdcd0d69e19c", "html_url": "https://github.com/rust-lang/rust/commit/39ca2dbbc5072713b91a4f444bb1fdcd0d69e19c"}], "stats": {"total": 180, "additions": 90, "deletions": 90}, "files": [{"sha": "8d2b9d7a0ee5433b5144ac27cf546fb51b903507", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/7668fb2c75f53cca9594432da7b88e6030b059e2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7668fb2c75f53cca9594432da7b88e6030b059e2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7668fb2c75f53cca9594432da7b88e6030b059e2", "patch": "@@ -2648,146 +2648,146 @@ pub fn p2i(ccx: &CrateContext, v: ValueRef) -> ValueRef {\n }\n \n macro_rules! ifn (\n-    ($name:expr, $args:expr, $ret:expr) => ({\n+    ($intrinsics:ident, $name:expr, $args:expr, $ret:expr) => ({\n         let name = $name;\n         let f = decl_cdecl_fn(llmod, name, Type::func($args, &$ret));\n-        intrinsics.insert(name, f);\n+        $intrinsics.insert(name, f);\n     })\n )\n \n pub fn declare_intrinsics(llmod: ModuleRef) -> HashMap<&'static str, ValueRef> {\n     let i8p = Type::i8p();\n     let mut intrinsics = HashMap::new();\n \n-    ifn!(\"llvm.memcpy.p0i8.p0i8.i32\",\n+    ifn!(intrinsics, \"llvm.memcpy.p0i8.p0i8.i32\",\n          [i8p, i8p, Type::i32(), Type::i32(), Type::i1()], Type::void());\n-    ifn!(\"llvm.memcpy.p0i8.p0i8.i64\",\n+    ifn!(intrinsics, \"llvm.memcpy.p0i8.p0i8.i64\",\n          [i8p, i8p, Type::i64(), Type::i32(), Type::i1()], Type::void());\n-    ifn!(\"llvm.memmove.p0i8.p0i8.i32\",\n+    ifn!(intrinsics, \"llvm.memmove.p0i8.p0i8.i32\",\n          [i8p, i8p, Type::i32(), Type::i32(), Type::i1()], Type::void());\n-    ifn!(\"llvm.memmove.p0i8.p0i8.i64\",\n+    ifn!(intrinsics, \"llvm.memmove.p0i8.p0i8.i64\",\n          [i8p, i8p, Type::i64(), Type::i32(), Type::i1()], Type::void());\n-    ifn!(\"llvm.memset.p0i8.i32\",\n+    ifn!(intrinsics, \"llvm.memset.p0i8.i32\",\n          [i8p, Type::i8(), Type::i32(), Type::i32(), Type::i1()], Type::void());\n-    ifn!(\"llvm.memset.p0i8.i64\",\n+    ifn!(intrinsics, \"llvm.memset.p0i8.i64\",\n          [i8p, Type::i8(), Type::i64(), Type::i32(), Type::i1()], Type::void());\n \n-    ifn!(\"llvm.trap\", [], Type::void());\n-    ifn!(\"llvm.frameaddress\", [Type::i32()], i8p);\n-\n-    ifn!(\"llvm.powi.f32\", [Type::f32(), Type::i32()], Type::f32());\n-    ifn!(\"llvm.powi.f64\", [Type::f64(), Type::i32()], Type::f64());\n-    ifn!(\"llvm.pow.f32\",  [Type::f32(), Type::f32()], Type::f32());\n-    ifn!(\"llvm.pow.f64\",  [Type::f64(), Type::f64()], Type::f64());\n-\n-    ifn!(\"llvm.sqrt.f32\", [Type::f32()], Type::f32());\n-    ifn!(\"llvm.sqrt.f64\", [Type::f64()], Type::f64());\n-    ifn!(\"llvm.sin.f32\",  [Type::f32()], Type::f32());\n-    ifn!(\"llvm.sin.f64\",  [Type::f64()], Type::f64());\n-    ifn!(\"llvm.cos.f32\",  [Type::f32()], Type::f32());\n-    ifn!(\"llvm.cos.f64\",  [Type::f64()], Type::f64());\n-    ifn!(\"llvm.exp.f32\",  [Type::f32()], Type::f32());\n-    ifn!(\"llvm.exp.f64\",  [Type::f64()], Type::f64());\n-    ifn!(\"llvm.exp2.f32\", [Type::f32()], Type::f32());\n-    ifn!(\"llvm.exp2.f64\", [Type::f64()], Type::f64());\n-    ifn!(\"llvm.log.f32\",  [Type::f32()], Type::f32());\n-    ifn!(\"llvm.log.f64\",  [Type::f64()], Type::f64());\n-    ifn!(\"llvm.log10.f32\",[Type::f32()], Type::f32());\n-    ifn!(\"llvm.log10.f64\",[Type::f64()], Type::f64());\n-    ifn!(\"llvm.log2.f32\", [Type::f32()], Type::f32());\n-    ifn!(\"llvm.log2.f64\", [Type::f64()], Type::f64());\n-\n-    ifn!(\"llvm.fma.f32\",  [Type::f32(), Type::f32(), Type::f32()], Type::f32());\n-    ifn!(\"llvm.fma.f64\",  [Type::f64(), Type::f64(), Type::f64()], Type::f64());\n-\n-    ifn!(\"llvm.fabs.f32\", [Type::f32()], Type::f32());\n-    ifn!(\"llvm.fabs.f64\", [Type::f64()], Type::f64());\n-    ifn!(\"llvm.floor.f32\",[Type::f32()], Type::f32());\n-    ifn!(\"llvm.floor.f64\",[Type::f64()], Type::f64());\n-    ifn!(\"llvm.ceil.f32\", [Type::f32()], Type::f32());\n-    ifn!(\"llvm.ceil.f64\", [Type::f64()], Type::f64());\n-    ifn!(\"llvm.trunc.f32\",[Type::f32()], Type::f32());\n-    ifn!(\"llvm.trunc.f64\",[Type::f64()], Type::f64());\n-\n-    ifn!(\"llvm.ctpop.i8\", [Type::i8()], Type::i8());\n-    ifn!(\"llvm.ctpop.i16\",[Type::i16()], Type::i16());\n-    ifn!(\"llvm.ctpop.i32\",[Type::i32()], Type::i32());\n-    ifn!(\"llvm.ctpop.i64\",[Type::i64()], Type::i64());\n-\n-    ifn!(\"llvm.ctlz.i8\",  [Type::i8() , Type::i1()], Type::i8());\n-    ifn!(\"llvm.ctlz.i16\", [Type::i16(), Type::i1()], Type::i16());\n-    ifn!(\"llvm.ctlz.i32\", [Type::i32(), Type::i1()], Type::i32());\n-    ifn!(\"llvm.ctlz.i64\", [Type::i64(), Type::i1()], Type::i64());\n-\n-    ifn!(\"llvm.cttz.i8\",  [Type::i8() , Type::i1()], Type::i8());\n-    ifn!(\"llvm.cttz.i16\", [Type::i16(), Type::i1()], Type::i16());\n-    ifn!(\"llvm.cttz.i32\", [Type::i32(), Type::i1()], Type::i32());\n-    ifn!(\"llvm.cttz.i64\", [Type::i64(), Type::i1()], Type::i64());\n-\n-    ifn!(\"llvm.bswap.i16\",[Type::i16()], Type::i16());\n-    ifn!(\"llvm.bswap.i32\",[Type::i32()], Type::i32());\n-    ifn!(\"llvm.bswap.i64\",[Type::i64()], Type::i64());\n-\n-    ifn!(\"llvm.sadd.with.overflow.i8\",\n+    ifn!(intrinsics, \"llvm.trap\", [], Type::void());\n+    ifn!(intrinsics, \"llvm.frameaddress\", [Type::i32()], i8p);\n+\n+    ifn!(intrinsics, \"llvm.powi.f32\", [Type::f32(), Type::i32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.powi.f64\", [Type::f64(), Type::i32()], Type::f64());\n+    ifn!(intrinsics, \"llvm.pow.f32\",  [Type::f32(), Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.pow.f64\",  [Type::f64(), Type::f64()], Type::f64());\n+\n+    ifn!(intrinsics, \"llvm.sqrt.f32\", [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.sqrt.f64\", [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.sin.f32\",  [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.sin.f64\",  [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.cos.f32\",  [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.cos.f64\",  [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.exp.f32\",  [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.exp.f64\",  [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.exp2.f32\", [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.exp2.f64\", [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.log.f32\",  [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.log.f64\",  [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.log10.f32\",[Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.log10.f64\",[Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.log2.f32\", [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.log2.f64\", [Type::f64()], Type::f64());\n+\n+    ifn!(intrinsics, \"llvm.fma.f32\",  [Type::f32(), Type::f32(), Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.fma.f64\",  [Type::f64(), Type::f64(), Type::f64()], Type::f64());\n+\n+    ifn!(intrinsics, \"llvm.fabs.f32\", [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.fabs.f64\", [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.floor.f32\",[Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.floor.f64\",[Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.ceil.f32\", [Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.ceil.f64\", [Type::f64()], Type::f64());\n+    ifn!(intrinsics, \"llvm.trunc.f32\",[Type::f32()], Type::f32());\n+    ifn!(intrinsics, \"llvm.trunc.f64\",[Type::f64()], Type::f64());\n+\n+    ifn!(intrinsics, \"llvm.ctpop.i8\", [Type::i8()], Type::i8());\n+    ifn!(intrinsics, \"llvm.ctpop.i16\",[Type::i16()], Type::i16());\n+    ifn!(intrinsics, \"llvm.ctpop.i32\",[Type::i32()], Type::i32());\n+    ifn!(intrinsics, \"llvm.ctpop.i64\",[Type::i64()], Type::i64());\n+\n+    ifn!(intrinsics, \"llvm.ctlz.i8\",  [Type::i8() , Type::i1()], Type::i8());\n+    ifn!(intrinsics, \"llvm.ctlz.i16\", [Type::i16(), Type::i1()], Type::i16());\n+    ifn!(intrinsics, \"llvm.ctlz.i32\", [Type::i32(), Type::i1()], Type::i32());\n+    ifn!(intrinsics, \"llvm.ctlz.i64\", [Type::i64(), Type::i1()], Type::i64());\n+\n+    ifn!(intrinsics, \"llvm.cttz.i8\",  [Type::i8() , Type::i1()], Type::i8());\n+    ifn!(intrinsics, \"llvm.cttz.i16\", [Type::i16(), Type::i1()], Type::i16());\n+    ifn!(intrinsics, \"llvm.cttz.i32\", [Type::i32(), Type::i1()], Type::i32());\n+    ifn!(intrinsics, \"llvm.cttz.i64\", [Type::i64(), Type::i1()], Type::i64());\n+\n+    ifn!(intrinsics, \"llvm.bswap.i16\",[Type::i16()], Type::i16());\n+    ifn!(intrinsics, \"llvm.bswap.i32\",[Type::i32()], Type::i32());\n+    ifn!(intrinsics, \"llvm.bswap.i64\",[Type::i64()], Type::i64());\n+\n+    ifn!(intrinsics, \"llvm.sadd.with.overflow.i8\",\n         [Type::i8(), Type::i8()], Type::struct_([Type::i8(), Type::i1()], false));\n-    ifn!(\"llvm.sadd.with.overflow.i16\",\n+    ifn!(intrinsics, \"llvm.sadd.with.overflow.i16\",\n         [Type::i16(), Type::i16()], Type::struct_([Type::i16(), Type::i1()], false));\n-    ifn!(\"llvm.sadd.with.overflow.i32\",\n+    ifn!(intrinsics, \"llvm.sadd.with.overflow.i32\",\n         [Type::i32(), Type::i32()], Type::struct_([Type::i32(), Type::i1()], false));\n-    ifn!(\"llvm.sadd.with.overflow.i64\",\n+    ifn!(intrinsics, \"llvm.sadd.with.overflow.i64\",\n         [Type::i64(), Type::i64()], Type::struct_([Type::i64(), Type::i1()], false));\n \n-    ifn!(\"llvm.uadd.with.overflow.i8\",\n+    ifn!(intrinsics, \"llvm.uadd.with.overflow.i8\",\n         [Type::i8(), Type::i8()], Type::struct_([Type::i8(), Type::i1()], false));\n-    ifn!(\"llvm.uadd.with.overflow.i16\",\n+    ifn!(intrinsics, \"llvm.uadd.with.overflow.i16\",\n         [Type::i16(), Type::i16()], Type::struct_([Type::i16(), Type::i1()], false));\n-    ifn!(\"llvm.uadd.with.overflow.i32\",\n+    ifn!(intrinsics, \"llvm.uadd.with.overflow.i32\",\n         [Type::i32(), Type::i32()], Type::struct_([Type::i32(), Type::i1()], false));\n-    ifn!(\"llvm.uadd.with.overflow.i64\",\n+    ifn!(intrinsics, \"llvm.uadd.with.overflow.i64\",\n         [Type::i64(), Type::i64()], Type::struct_([Type::i64(), Type::i1()], false));\n \n-    ifn!(\"llvm.ssub.with.overflow.i8\",\n+    ifn!(intrinsics, \"llvm.ssub.with.overflow.i8\",\n         [Type::i8(), Type::i8()], Type::struct_([Type::i8(), Type::i1()], false));\n-    ifn!(\"llvm.ssub.with.overflow.i16\",\n+    ifn!(intrinsics, \"llvm.ssub.with.overflow.i16\",\n         [Type::i16(), Type::i16()], Type::struct_([Type::i16(), Type::i1()], false));\n-    ifn!(\"llvm.ssub.with.overflow.i32\",\n+    ifn!(intrinsics, \"llvm.ssub.with.overflow.i32\",\n         [Type::i32(), Type::i32()], Type::struct_([Type::i32(), Type::i1()], false));\n-    ifn!(\"llvm.ssub.with.overflow.i64\",\n+    ifn!(intrinsics, \"llvm.ssub.with.overflow.i64\",\n         [Type::i64(), Type::i64()], Type::struct_([Type::i64(), Type::i1()], false));\n \n-    ifn!(\"llvm.usub.with.overflow.i8\",\n+    ifn!(intrinsics, \"llvm.usub.with.overflow.i8\",\n         [Type::i8(), Type::i8()], Type::struct_([Type::i8(), Type::i1()], false));\n-    ifn!(\"llvm.usub.with.overflow.i16\",\n+    ifn!(intrinsics, \"llvm.usub.with.overflow.i16\",\n         [Type::i16(), Type::i16()], Type::struct_([Type::i16(), Type::i1()], false));\n-    ifn!(\"llvm.usub.with.overflow.i32\",\n+    ifn!(intrinsics, \"llvm.usub.with.overflow.i32\",\n         [Type::i32(), Type::i32()], Type::struct_([Type::i32(), Type::i1()], false));\n-    ifn!(\"llvm.usub.with.overflow.i64\",\n+    ifn!(intrinsics, \"llvm.usub.with.overflow.i64\",\n         [Type::i64(), Type::i64()], Type::struct_([Type::i64(), Type::i1()], false));\n \n-    ifn!(\"llvm.smul.with.overflow.i8\",\n+    ifn!(intrinsics, \"llvm.smul.with.overflow.i8\",\n         [Type::i8(), Type::i8()], Type::struct_([Type::i8(), Type::i1()], false));\n-    ifn!(\"llvm.smul.with.overflow.i16\",\n+    ifn!(intrinsics, \"llvm.smul.with.overflow.i16\",\n         [Type::i16(), Type::i16()], Type::struct_([Type::i16(), Type::i1()], false));\n-    ifn!(\"llvm.smul.with.overflow.i32\",\n+    ifn!(intrinsics, \"llvm.smul.with.overflow.i32\",\n         [Type::i32(), Type::i32()], Type::struct_([Type::i32(), Type::i1()], false));\n-    ifn!(\"llvm.smul.with.overflow.i64\",\n+    ifn!(intrinsics, \"llvm.smul.with.overflow.i64\",\n         [Type::i64(), Type::i64()], Type::struct_([Type::i64(), Type::i1()], false));\n \n-    ifn!(\"llvm.umul.with.overflow.i8\",\n+    ifn!(intrinsics, \"llvm.umul.with.overflow.i8\",\n         [Type::i8(), Type::i8()], Type::struct_([Type::i8(), Type::i1()], false));\n-    ifn!(\"llvm.umul.with.overflow.i16\",\n+    ifn!(intrinsics, \"llvm.umul.with.overflow.i16\",\n         [Type::i16(), Type::i16()], Type::struct_([Type::i16(), Type::i1()], false));\n-    ifn!(\"llvm.umul.with.overflow.i32\",\n+    ifn!(intrinsics, \"llvm.umul.with.overflow.i32\",\n         [Type::i32(), Type::i32()], Type::struct_([Type::i32(), Type::i1()], false));\n-    ifn!(\"llvm.umul.with.overflow.i64\",\n+    ifn!(intrinsics, \"llvm.umul.with.overflow.i64\",\n         [Type::i64(), Type::i64()], Type::struct_([Type::i64(), Type::i1()], false));\n \n     return intrinsics;\n }\n \n pub fn declare_dbg_intrinsics(llmod: ModuleRef, intrinsics: &mut HashMap<&'static str, ValueRef>) {\n-    ifn!(\"llvm.dbg.declare\", [Type::metadata(), Type::metadata()], Type::void());\n-    ifn!(\"llvm.dbg.value\",   [Type::metadata(), Type::i64(), Type::metadata()], Type::void());\n+    ifn!(intrinsics, \"llvm.dbg.declare\", [Type::metadata(), Type::metadata()], Type::void());\n+    ifn!(intrinsics, \"llvm.dbg.value\",   [Type::metadata(), Type::i64(), Type::metadata()], Type::void());\n }\n \n pub fn trap(bcx: @mut Block) {"}]}