{"sha": "5a881e920ec39c80310ff832867f2ef51168a1de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODgxZTkyMGVjMzljODAzMTBmZjgzMjg2N2YyZWY1MTE2OGExZGU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-12T22:09:49Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-13T19:22:51Z"}, "message": "Make sure that projection bounds in ty::TraitObject are sorted in a way that is stable across compilation sessions and crate boundaries.", "tree": {"sha": "85c382d05f4f8c697bfbdb6094934d1a0b7854a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c382d05f4f8c697bfbdb6094934d1a0b7854a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a881e920ec39c80310ff832867f2ef51168a1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a881e920ec39c80310ff832867f2ef51168a1de", "html_url": "https://github.com/rust-lang/rust/commit/5a881e920ec39c80310ff832867f2ef51168a1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a881e920ec39c80310ff832867f2ef51168a1de/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87ba3f1222ba20d491e8ed76a04977283280742", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87ba3f1222ba20d491e8ed76a04977283280742", "html_url": "https://github.com/rust-lang/rust/commit/c87ba3f1222ba20d491e8ed76a04977283280742"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "6d7a2d6cba1c761640e53bde00f84c17b0cec0ca", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5a881e920ec39c80310ff832867f2ef51168a1de", "patch": "@@ -1303,7 +1303,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_trait(self, mut obj: TraitObject<'tcx>) -> Ty<'tcx> {\n-        obj.projection_bounds.sort_by(|a, b| a.sort_key().cmp(&b.sort_key()));\n+        obj.projection_bounds.sort_by_key(|b| b.sort_key(self));\n         self.mk_ty(TyTrait(box obj))\n     }\n "}, {"sha": "14eb2fb7914c36f30dd03f60ac26415dce349f74", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5a881e920ec39c80310ff832867f2ef51168a1de", "patch": "@@ -1018,10 +1018,6 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     pub fn item_name(&self) -> Name {\n         self.0.projection_ty.item_name // safe to skip the binder to access a name\n     }\n-\n-    pub fn sort_key(&self) -> (DefId, Name) {\n-        self.0.projection_ty.sort_key()\n-    }\n }\n \n pub trait ToPolyTraitRef<'tcx> {"}, {"sha": "5fdc7abc0af5b0631f1b804bd6bfcfae28aaa586", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5a881e920ec39c80310ff832867f2ef51168a1de", "patch": "@@ -23,7 +23,7 @@ use std::mem;\n use std::ops;\n use syntax::abi;\n use syntax::ast::{self, Name};\n-use syntax::parse::token::keywords;\n+use syntax::parse::token::{keywords, InternedString};\n \n use serialize::{Decodable, Decoder, Encodable, Encoder};\n \n@@ -440,12 +440,6 @@ pub struct ProjectionTy<'tcx> {\n     pub item_name: Name,\n }\n \n-impl<'tcx> ProjectionTy<'tcx> {\n-    pub fn sort_key(&self) -> (DefId, Name) {\n-        (self.trait_ref.def_id, self.item_name)\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct BareFnTy<'tcx> {\n     pub unsafety: hir::Unsafety,\n@@ -738,8 +732,17 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n         self.0.item_name // safe to skip the binder to access a name\n     }\n \n-    pub fn sort_key(&self) -> (DefId, Name) {\n-        (self.0.trait_ref.def_id, self.0.item_name)\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+        // We want something here that is stable across crate boundaries.\n+        // The DefId isn't but the `deterministic_hash` of the corresponding\n+        // DefPath is.\n+        let trait_def = tcx.lookup_trait_def(self.0.trait_ref.def_id);\n+        let def_path_hash = trait_def.def_path_hash;\n+\n+        // An `ast::Name` is also not stable (it's just an index into an\n+        // interning table), so map to the corresponding `InternedString`.\n+        let item_name = self.0.item_name.as_str();\n+        (def_path_hash, item_name)\n     }\n \n     pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "268b2fcaa4adbb8687b833a9a06ee6f4cdddab90", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=5a881e920ec39c80310ff832867f2ef51168a1de", "patch": "@@ -70,15 +70,20 @@ pub struct TraitDef<'tcx> {\n     pub specialization_graph: RefCell<traits::specialization_graph::Graph>,\n \n     /// Various flags\n-    pub flags: Cell<TraitFlags>\n+    pub flags: Cell<TraitFlags>,\n+\n+    /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n+    /// recomputed all the time.\n+    pub def_path_hash: u64,\n }\n \n impl<'a, 'gcx, 'tcx> TraitDef<'tcx> {\n     pub fn new(unsafety: hir::Unsafety,\n                paren_sugar: bool,\n                generics: &'tcx ty::Generics<'tcx>,\n                trait_ref: ty::TraitRef<'tcx>,\n-               associated_type_names: Vec<Name>)\n+               associated_type_names: Vec<Name>,\n+               def_path_hash: u64)\n                -> TraitDef<'tcx> {\n         TraitDef {\n             paren_sugar: paren_sugar,\n@@ -90,6 +95,7 @@ impl<'a, 'gcx, 'tcx> TraitDef<'tcx> {\n             blanket_impls: RefCell::new(vec![]),\n             flags: Cell::new(ty::TraitFlags::NO_TRAIT_FLAGS),\n             specialization_graph: RefCell::new(traits::specialization_graph::Graph::new()),\n+            def_path_hash: def_path_hash,\n         }\n     }\n "}, {"sha": "824e892072f57a1995aff41bb538564e2c9f0b1a", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5a881e920ec39c80310ff832867f2ef51168a1de", "patch": "@@ -385,12 +385,14 @@ pub fn get_trait_def<'a, 'tcx>(cdata: Cmd,\n     let unsafety = parse_unsafety(item_doc);\n     let associated_type_names = parse_associated_type_names(item_doc);\n     let paren_sugar = parse_paren_sugar(item_doc);\n+    let def_path = def_path(cdata, item_id);\n \n     ty::TraitDef::new(unsafety,\n                       paren_sugar,\n                       generics,\n                       item_trait_ref(item_doc, tcx, cdata),\n-                      associated_type_names)\n+                      associated_type_names,\n+                      def_path.deterministic_hash(tcx))\n }\n \n pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,"}, {"sha": "04aca8c0947caa7e603a9bbfd8efe499c965d4df", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a881e920ec39c80310ff832867f2ef51168a1de/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5a881e920ec39c80310ff832867f2ef51168a1de", "patch": "@@ -1290,12 +1290,15 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         }\n     }).collect();\n \n+    let def_path_hash = tcx.def_path(def_id).deterministic_hash(tcx);\n+\n     let trait_ref = ty::TraitRef::new(def_id, substs);\n     let trait_def = ty::TraitDef::new(unsafety,\n                                       paren_sugar,\n                                       ty_generics,\n                                       trait_ref,\n-                                      associated_type_names);\n+                                      associated_type_names,\n+                                      def_path_hash);\n \n     tcx.intern_trait_def(trait_def)\n }"}]}