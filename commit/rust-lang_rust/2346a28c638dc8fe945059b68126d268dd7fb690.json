{"sha": "2346a28c638dc8fe945059b68126d268dd7fb690", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDZhMjhjNjM4ZGM4ZmU5NDUwNTliNjgxMjZkMjY4ZGQ3ZmI2OTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T20:05:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T20:05:10Z"}, "message": "Merge #5634\n\n5634: Finish rename r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4cfe573d8d6c49c3f92f4a56e5fae3af2b37c1a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cfe573d8d6c49c3f92f4a56e5fae3af2b37c1a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2346a28c638dc8fe945059b68126d268dd7fb690", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJHl2CRBK7hj4Ov3rIwAAdHIIAJDAoXEbriBTA96O59Cy7rlv\nLJD7RyNlZOZIr/h9R4Tn/CouoZBKsYYgvS+ec+R2ZECUh4JSKPrZK9xpj3m5RC2z\nwRa6hCZyrGHuO0OcUlZFeabE7ZcL3Aqb2MILMqKBrVFyzOYHJj547xQ4czUa6Y5o\n2oZgJBGA5my0ylh6D58sXqqlmgLgpurEAUT13xMt/Qb/Z4ERhkvHtX2hjWqi79Ph\nCY9d4WgPKq3PrYkVmSTdyo7vA+6fP6G8QhriInMbcz43XJg4xD5XbTDD0GD2O0Nj\npOB387IVFimNpq9IYI9EyS90E2a8Adn1t5A8UHGPv8NwLgm8rtSz+yuSHPwEJAE=\n=nOwT\n-----END PGP SIGNATURE-----\n", "payload": "tree 4cfe573d8d6c49c3f92f4a56e5fae3af2b37c1a0\nparent 1914d0aa7b5518c743e7403da6d7eea3fe28e955\nparent 8cf19847ddbcbbe1c1bb634dfc4a61ab75ec941d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596225910 +0000\ncommitter GitHub <noreply@github.com> 1596225910 +0000\n\nMerge #5634\n\n5634: Finish rename r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2346a28c638dc8fe945059b68126d268dd7fb690", "html_url": "https://github.com/rust-lang/rust/commit/2346a28c638dc8fe945059b68126d268dd7fb690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2346a28c638dc8fe945059b68126d268dd7fb690/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1914d0aa7b5518c743e7403da6d7eea3fe28e955", "url": "https://api.github.com/repos/rust-lang/rust/commits/1914d0aa7b5518c743e7403da6d7eea3fe28e955", "html_url": "https://github.com/rust-lang/rust/commit/1914d0aa7b5518c743e7403da6d7eea3fe28e955"}, {"sha": "8cf19847ddbcbbe1c1bb634dfc4a61ab75ec941d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf19847ddbcbbe1c1bb634dfc4a61ab75ec941d", "html_url": "https://github.com/rust-lang/rust/commit/8cf19847ddbcbbe1c1bb634dfc4a61ab75ec941d"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "69852b61161ff317f28756b9e6aec7227bd42b95", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=2346a28c638dc8fe945059b68126d268dd7fb690", "patch": "@@ -51,11 +51,11 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     // Check if there is an IfLet that we can handle.\n     let if_let_pat = match cond.pat() {\n         None => None, // No IfLet, supported.\n-        Some(ast::Pat::TupleStructPat(pat)) if pat.args().count() == 1 => {\n+        Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n             let path = pat.path()?;\n             match path.qualifier() {\n                 None => {\n-                    let bound_ident = pat.args().next().unwrap();\n+                    let bound_ident = pat.fields().next().unwrap();\n                     Some((path, bound_ident))\n                 }\n                 Some(_) => return None,"}, {"sha": "f5c37edb30a2b3486134a5929c5a0bc6c10c402b", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=2346a28c638dc8fe945059b68126d268dd7fb690", "patch": "@@ -496,7 +496,7 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n             ast::Expr::TupleExpr(e) => {\n-                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                let exprs = e.fields().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n             ast::Expr::BoxExpr(e) => {\n@@ -762,7 +762,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::TupleStructPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n-                let (args, ellipsis) = self.collect_tuple_pat(p.args());\n+                let (args, ellipsis) = self.collect_tuple_pat(p.fields());\n                 Pat::TupleStruct { path, args, ellipsis }\n             }\n             ast::Pat::RefPat(p) => {\n@@ -780,7 +780,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::ParenPat(p) => return self.collect_pat_opt(p.pat()),\n             ast::Pat::TuplePat(p) => {\n-                let (args, ellipsis) = self.collect_tuple_pat(p.args());\n+                let (args, ellipsis) = self.collect_tuple_pat(p.fields());\n                 Pat::Tuple { args, ellipsis }\n             }\n             ast::Pat::WildcardPat(_) => Pat::Wild,\n@@ -809,7 +809,7 @@ impl ExprCollector<'_> {\n             ast::Pat::SlicePat(p) => {\n                 let SlicePatComponents { prefix, slice, suffix } = p.components();\n \n-                // FIXME properly handle `DotDotPat`\n+                // FIXME properly handle `RestPat`\n                 Pat::Slice {\n                     prefix: prefix.into_iter().map(|p| self.collect_pat(p)).collect(),\n                     slice: slice.map(|p| self.collect_pat(p)),\n@@ -827,9 +827,9 @@ impl ExprCollector<'_> {\n                 }\n             }\n             ast::Pat::RestPat(_) => {\n-                // `DotDotPat` requires special handling and should not be mapped\n+                // `RestPat` requires special handling and should not be mapped\n                 // to a Pat. Here we are using `Pat::Missing` as a fallback for\n-                // when `DotDotPat` is mapped to `Pat`, which can easily happen\n+                // when `RestPat` is mapped to `Pat`, which can easily happen\n                 // when the source code being analyzed has a malformed pattern\n                 // which includes `..` in a place where it isn't valid.\n "}, {"sha": "5f51c7536a59241126aec24ca799ab908bab27ce", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=2346a28c638dc8fe945059b68126d268dd7fb690", "patch": "@@ -893,7 +893,7 @@ pub struct TupleExpr {\n impl ast::AttrsOwner for TupleExpr {}\n impl TupleExpr {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1210,7 +1210,7 @@ pub struct SlicePat {\n }\n impl SlicePat {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n-    pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n+    pub fn pats(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1219,7 +1219,7 @@ pub struct TuplePat {\n }\n impl TuplePat {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1229,7 +1229,7 @@ pub struct TupleStructPat {\n impl TupleStructPat {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "733e978772c3a08bc25372a81b8b4cbf40c4a640", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2346a28c638dc8fe945059b68126d268dd7fb690/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=2346a28c638dc8fe945059b68126d268dd7fb690", "patch": "@@ -290,7 +290,7 @@ pub struct SlicePatComponents {\n \n impl ast::SlicePat {\n     pub fn components(&self) -> SlicePatComponents {\n-        let mut args = self.args().peekable();\n+        let mut args = self.pats().peekable();\n         let prefix = args\n             .peeking_take_while(|p| match p {\n                 ast::Pat::RestPat(_) => false,"}, {"sha": "aca23890c6d617fc9d201edbf263bccad1792983", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2346a28c638dc8fe945059b68126d268dd7fb690/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/2346a28c638dc8fe945059b68126d268dd7fb690/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=2346a28c638dc8fe945059b68126d268dd7fb690", "patch": "@@ -1,3 +1,7 @@\n+//*************************//\n+// Names, Paths and Macros //\n+//*************************//\n+\n Name =\n   'ident'\n \n@@ -50,6 +54,10 @@ MacroStmts =\n   statements:Stmt*\n   Expr?\n \n+//*************************//\n+//          Items          //\n+//*************************//\n+\n SourceFile =\n   'shebang'?\n   Attr*\n@@ -245,6 +253,10 @@ Visibility =\n Attr =\n   '#' '!'? '[' Path ('=' Literal | TokenTree)? ']'\n \n+//****************************//\n+// Statements and Expressions //\n+//****************************//\n+\n Stmt =\n   ExprStmt\n | Item\n@@ -347,7 +359,7 @@ IndexExpr =\n   Attr* base:Expr '[' index:Expr ']'\n \n TupleExpr =\n-  Attr* '(' Attr* (Expr (',' Expr)* ','?)? ')'\n+  Attr* '(' Attr* fields:(Expr (',' Expr)* ','?)? ')'\n \n RecordExpr =\n   Path RecordExprFieldList\n@@ -434,6 +446,10 @@ AwaitExpr =\n BoxExpr =\n   Attr* 'box' Expr\n \n+//*************************//\n+//          Types          //\n+//*************************//\n+\n Type =\n   ArrayType\n | DynTraitType\n@@ -495,6 +511,10 @@ TypeBound =\n   'lifetime'\n | '?'? Type\n \n+//************************//\n+//        Patterns        //\n+//************************//\n+\n Pat =\n   IdentPat\n | BoxPat\n@@ -540,16 +560,16 @@ RecordPatField =\n   Attr* (NameRef ':')? Pat\n \n TupleStructPat =\n-   Path '(' args:(Pat (',' Pat)* ','?)? ')'\n+   Path '(' fields:(Pat (',' Pat)* ','?)? ')'\n \n TuplePat =\n-   '(' args:(Pat (',' Pat)* ','?)? ')'\n+   '(' fields:(Pat (',' Pat)* ','?)? ')'\n \n ParenPat =\n   '(' Pat ')'\n \n SlicePat =\n-  '[' args:(Pat (',' Pat)* ','?)? ']'\n+  '[' (Pat (',' Pat)* ','?)? ']'\n \n PathPat =\n   Path"}]}