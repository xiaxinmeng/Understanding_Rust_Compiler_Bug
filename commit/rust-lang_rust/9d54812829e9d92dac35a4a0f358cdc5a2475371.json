{"sha": "9d54812829e9d92dac35a4a0f358cdc5a2475371", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNTQ4MTI4MjllOWQ5MmRhYzM1YTRhMGYzNThjZGM1YTI0NzUzNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-08T02:00:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-08T02:00:12Z"}, "message": "Auto merge of #57095 - Zoxc:prof-fix, r=michaelwoerister\n\nFix and optimize query profiling\n\nr? @michaelwoerister\n\ncc @wesleywiser", "tree": {"sha": "74a87ac461bb4a88b3db92c3da13e59cb93fe405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a87ac461bb4a88b3db92c3da13e59cb93fe405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d54812829e9d92dac35a4a0f358cdc5a2475371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d54812829e9d92dac35a4a0f358cdc5a2475371", "html_url": "https://github.com/rust-lang/rust/commit/9d54812829e9d92dac35a4a0f358cdc5a2475371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d54812829e9d92dac35a4a0f358cdc5a2475371/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2063d02062ee9f088274690a97826333847e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2063d02062ee9f088274690a97826333847e17", "html_url": "https://github.com/rust-lang/rust/commit/8e2063d02062ee9f088274690a97826333847e17"}, {"sha": "23c742cce74b3e46e9b5b900d45e4c854ca17f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c742cce74b3e46e9b5b900d45e4c854ca17f47", "html_url": "https://github.com/rust-lang/rust/commit/23c742cce74b3e46e9b5b900d45e4c854ca17f47"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "d4da10bcbed620f881407927fc5c7a16094f1399", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9d54812829e9d92dac35a4a0f358cdc5a2475371", "patch": "@@ -1248,7 +1248,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         sync::assert_send_val(&gcx);\n \n-        tls::enter_global(gcx, f)\n+        let r = tls::enter_global(gcx, f);\n+\n+        gcx.queries.record_computed_queries(s);\n+\n+        r\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {"}, {"sha": "d9cabb395740e73ffd1ebf96c5eb0a8d1b922fa3", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=9d54812829e9d92dac35a4a0f358cdc5a2475371", "patch": "@@ -42,6 +42,7 @@ use ty::subst::Substs;\n use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n use util::common::{ErrorReported};\n use util::profiling::ProfileCategory::*;\n+use session::Session;\n \n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;"}, {"sha": "19198e90a8148b378ab06db4cfe0bfa6ecd0a753", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9d54812829e9d92dac35a4a0f358cdc5a2475371", "patch": "@@ -112,11 +112,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             let mut lock = cache.borrow_mut();\n             if let Some(value) = lock.results.get(key) {\n                 profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n-                tcx.sess.profiler(|p| {\n-                    p.record_query(Q::CATEGORY);\n-                    p.record_query_hit(Q::CATEGORY);\n-                });\n-\n+                tcx.sess.profiler(|p| p.record_query_hit(Q::CATEGORY));\n                 let result = Ok((value.value.clone(), value.index));\n                 #[cfg(debug_assertions)]\n                 {\n@@ -195,6 +191,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n     /// Executes a job by changing the ImplicitCtxt to point to the\n     /// new query job while it executes. It returns the diagnostics\n     /// captured during execution and the actual result.\n+    #[inline(always)]\n     pub(super) fn start<'lcx, F, R>(\n         &self,\n         tcx: TyCtxt<'_, 'tcx, 'lcx>,\n@@ -382,13 +379,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             )\n         );\n \n-        self.sess.profiler(|p| p.record_query(Q::CATEGORY));\n-\n         let job = match JobOwner::try_get(self, span, &key) {\n             TryGetJob::NotYetStarted(job) => job,\n             TryGetJob::JobCompleted(result) => {\n                 return result.map(|(v, index)| {\n-                    self.sess.profiler(|p| p.record_query_hit(Q::CATEGORY));\n                     self.dep_graph.read_index(index);\n                     v\n                 })\n@@ -430,9 +424,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         if !dep_node.kind.is_input() {\n             if let Some(dep_node_index) = self.try_mark_green_and_read(&dep_node) {\n-                profq_msg!(self, ProfileQueriesMsg::CacheHit);\n-                self.sess.profiler(|p| p.record_query_hit(Q::CATEGORY));\n-\n                 return self.load_from_disk_and_cache_in_memory::<Q>(key,\n                                                                     job,\n                                                                     dep_node_index,\n@@ -483,11 +474,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         let result = if let Some(result) = result {\n+            profq_msg!(self, ProfileQueriesMsg::CacheHit);\n+            self.sess.profiler(|p| p.record_query_hit(Q::CATEGORY));\n+\n             result\n         } else {\n             // We could not load a result from the on-disk cache, so\n             // recompute.\n \n+            self.sess.profiler(|p| p.start_activity(Q::CATEGORY));\n+\n             // The diagnostics for this query have already been\n             // promoted to the current session during\n             // try_mark_green(), so we can ignore them here.\n@@ -498,6 +494,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     Q::compute(tcx, key)\n                 })\n             });\n+\n+            self.sess.profiler(|p| p.end_activity(Q::CATEGORY));\n             result\n         };\n \n@@ -547,6 +545,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             for {:?}\", dep_node);\n     }\n \n+    #[inline(always)]\n     fn force_query_with_job<Q: QueryDescription<'gcx>>(\n         self,\n         key: Q::Key,\n@@ -565,10 +564,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 key, dep_node);\n \n         profq_msg!(self, ProfileQueriesMsg::ProviderBegin);\n-        self.sess.profiler(|p| {\n-            p.start_activity(Q::CATEGORY);\n-            p.record_query(Q::CATEGORY);\n-        });\n+        self.sess.profiler(|p| p.start_activity(Q::CATEGORY));\n \n         let res = job.start(self, |tcx| {\n             if dep_node.kind.is_eval_always() {\n@@ -624,14 +620,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // this introduces should be negligible as we'll immediately hit the\n             // in-memory cache, or another query down the line will.\n \n-            self.sess.profiler(|p| {\n-                p.start_activity(Q::CATEGORY);\n-                p.record_query(Q::CATEGORY);\n-            });\n-\n             let _ = self.get_query::<Q>(DUMMY_SP, key);\n-\n-            self.sess.profiler(|p| p.end_activity(Q::CATEGORY));\n+        } else {\n+            profq_msg!(self, ProfileQueriesMsg::CacheHit);\n+            self.sess.profiler(|p| p.record_query_hit(Q::CATEGORY));\n         }\n     }\n \n@@ -751,6 +743,17 @@ macro_rules! define_queries_inner {\n                 }\n             }\n \n+            pub fn record_computed_queries(&self, sess: &Session) {\n+                sess.profiler(|p| {\n+                    $(\n+                        p.record_computed_queries(\n+                            <queries::$name<'_> as QueryConfig<'_>>::CATEGORY,\n+                            self.$name.lock().results.len()\n+                        );\n+                    )*\n+                });\n+            }\n+\n             #[cfg(parallel_queries)]\n             pub fn collect_active_jobs(&self) -> Vec<Lrc<QueryJob<$tcx>>> {\n                 let mut jobs = Vec::new();"}, {"sha": "822f280f9bf54311a749621b9556b6c15564a1d6", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d54812829e9d92dac35a4a0f358cdc5a2475371/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=9d54812829e9d92dac35a4a0f358cdc5a2475371", "patch": "@@ -62,7 +62,8 @@ macro_rules! define_categories {\n                 let total_time = ($(self.times.$name + )* 0) as f32;\n \n                 $(\n-                    let (hits, total) = self.query_counts.$name;\n+                    let (hits, computed) = self.query_counts.$name;\n+                    let total = hits + computed;\n                     let (hits, total) = if total > 0 {\n                         (format!(\"{:.2}\",\n                         (((hits as f32) / (total as f32)) * 100.0)), total.to_string())\n@@ -86,7 +87,8 @@ macro_rules! define_categories {\n                 let mut json = String::from(\"[\");\n \n                 $(\n-                    let (hits, total) = self.query_counts.$name;\n+                    let (hits, computed) = self.query_counts.$name;\n+                    let total = hits + computed;\n \n                     //normalize hits to 0%\n                     let hit_percent =\n@@ -168,14 +170,14 @@ impl SelfProfiler {\n         self.timer_stack.push(category);\n     }\n \n-    pub fn record_query(&mut self, category: ProfileCategory) {\n-        let (hits, total) = *self.data.query_counts.get(category);\n-        self.data.query_counts.set(category, (hits, total + 1));\n+    pub fn record_computed_queries(&mut self, category: ProfileCategory, count: usize) {\n+        let (hits, computed) = *self.data.query_counts.get(category);\n+        self.data.query_counts.set(category, (hits, computed + count as u64));\n     }\n \n     pub fn record_query_hit(&mut self, category: ProfileCategory) {\n-        let (hits, total) = *self.data.query_counts.get(category);\n-        self.data.query_counts.set(category, (hits + 1, total));\n+        let (hits, computed) = *self.data.query_counts.get(category);\n+        self.data.query_counts.set(category, (hits + 1, computed));\n     }\n \n     pub fn end_activity(&mut self, category: ProfileCategory) {"}]}