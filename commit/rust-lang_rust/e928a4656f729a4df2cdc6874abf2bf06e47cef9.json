{"sha": "e928a4656f729a4df2cdc6874abf2bf06e47cef9", "node_id": "C_kwDOAAsO6NoAKGU5MjhhNDY1NmY3MjlhNGRmMmNkYzY4NzRhYmYyYmYwNmU0N2NlZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-16T04:54:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-16T04:54:29Z"}, "message": "Auto merge of #103105 - JohnTitor:rollup-x4ivrix, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101717 (Add documentation about the memory layout of `UnsafeCell<T>`)\n - #102023 (Add MaybeUninit array transpose From impls)\n - #103033 (Update pkg-config)\n - #103080 (pretty: fix to print some lifetimes on HIR pretty-print)\n - #103082 (Surround type with backticks)\n - #103088 (Fix settings page)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f3b444adbf09d3c4132d4011f26d9dc0a2859a69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b444adbf09d3c4132d4011f26d9dc0a2859a69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e928a4656f729a4df2cdc6874abf2bf06e47cef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e928a4656f729a4df2cdc6874abf2bf06e47cef9", "html_url": "https://github.com/rust-lang/rust/commit/e928a4656f729a4df2cdc6874abf2bf06e47cef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e928a4656f729a4df2cdc6874abf2bf06e47cef9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75dbd5b8c3e3e3e7673caa890422e654d39b815e", "url": "https://api.github.com/repos/rust-lang/rust/commits/75dbd5b8c3e3e3e7673caa890422e654d39b815e", "html_url": "https://github.com/rust-lang/rust/commit/75dbd5b8c3e3e3e7673caa890422e654d39b815e"}, {"sha": "66a2bba309409bd4c437428c2a4c5dc87f55f784", "url": "https://api.github.com/repos/rust-lang/rust/commits/66a2bba309409bd4c437428c2a4c5dc87f55f784", "html_url": "https://github.com/rust-lang/rust/commit/66a2bba309409bd4c437428c2a4c5dc87f55f784"}], "stats": {"total": 144, "additions": 137, "deletions": 7}, "files": [{"sha": "d5acab8139c982be60fa0ed507c3c56486ab0a0e", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -2652,9 +2652,9 @@ checksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n \n [[package]]\n name = \"pkg-config\"\n-version = \"0.3.18\"\n+version = \"0.3.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d36492546b6af1463394d46f0c834346f31548646f6ba10849802c9c9a27ac33\"\n+checksum = \"1df8c4ec4b0627e53bdf214615ad287367e482558cf84b109250b37464dc03ae\"\n \n [[package]]\n name = \"polonius-engine\""}, {"sha": "fbb129f97247e9b865794497135a80a1c05b997b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         this.fail(\n                         location,\n                         format!(\n-                            \"Field projection `{:?}.{:?}` specified type `{:?}`, but actual type is {:?}\",\n+                            \"Field projection `{:?}.{:?}` specified type `{:?}`, but actual type is `{:?}`\",\n                             parent, f, ty, f_ty\n                         )\n                     )"}, {"sha": "da27554a2292b331f59f39b4e01eb86baba9cbc1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -1687,7 +1687,11 @@ impl<'a> State<'a> {\n \n             let mut nonelided_generic_args: bool = false;\n             let elide_lifetimes = generic_args.args.iter().all(|arg| match arg {\n-                GenericArg::Lifetime(lt) => lt.is_elided(),\n+                GenericArg::Lifetime(lt) if lt.is_elided() => true,\n+                GenericArg::Lifetime(_) => {\n+                    nonelided_generic_args = true;\n+                    false\n+                }\n                 _ => {\n                     nonelided_generic_args = true;\n                     true"}, {"sha": "3451a25504e34c008d930819282942628bf73a0d", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -1816,6 +1816,50 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// [`.get_mut()`]: `UnsafeCell::get_mut`\n ///\n+/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T`. A consequence\n+/// of this guarantee is that it is possible to convert between `T` and `UnsafeCell<T>`.\n+/// Special care has to be taken when converting a nested `T` inside of an `Outer<T>` type\n+/// to an `Outer<UnsafeCell<T>>` type: this is not sound when the `Outer<T>` type enables [niche]\n+/// optimizations. For example, the type `Option<NonNull<u8>>` is typically 8 bytes large on\n+/// 64-bit platforms, but the type `Option<UnsafeCell<NonNull<u8>>>` takes up 16 bytes of space.\n+/// Therefore this is not a valid conversion, despite `NonNull<u8>` and `UnsafeCell<NonNull<u8>>>`\n+/// having the same memory layout. This is because `UnsafeCell` disables niche optimizations in\n+/// order to avoid its interior mutability property from spreading from `T` into the `Outer` type,\n+/// thus this can cause distortions in the type size in these cases. Furthermore, it is only valid\n+/// to obtain a `*mut T` pointer to the contents of a _shared_ `UnsafeCell<T>` through [`.get()`]\n+/// or [`.raw_get()`]. A `&mut T` reference can be obtained by either dereferencing this pointer or\n+/// by calling [`.get_mut()`] on an _exclusive_ `UnsafeCell<T>`, e.g.:\n+///\n+/// ```rust\n+/// use std::cell::UnsafeCell;\n+///\n+/// let mut x: UnsafeCell<u32> = UnsafeCell::new(5);\n+/// let shared: &UnsafeCell<u32> = &x;\n+/// // using `.get()` is okay:\n+/// unsafe {\n+///     // SAFETY: there exist no other references to the contents of `x`\n+///     let exclusive: &mut u32 = &mut *shared.get();\n+/// };\n+/// // using `.raw_get()` is also okay:\n+/// unsafe {\n+///     // SAFETY: there exist no other references to the contents of `x` in this scope\n+///     let exclusive: &mut u32 = &mut *UnsafeCell::raw_get(shared as *const _);\n+/// };\n+/// // using `.get_mut()` is always safe:\n+/// let exclusive: &mut u32 = x.get_mut();\n+///\n+/// // when we have exclusive access, we can convert it to a shared `&UnsafeCell`:\n+/// unsafe {\n+///     // SAFETY: `u32` has no niche, therefore it has the same layout as `UnsafeCell<u32>`\n+///     let shared: &UnsafeCell<u32> = &*(exclusive as *mut _ as *const UnsafeCell<u32>);\n+///     // SAFETY: there exist no other *active* references to the contents of `x` in this scope\n+///     let exclusive: &mut u32 = &mut *shared.get();\n+/// }\n+/// ```\n+///\n+/// [niche]: https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#niche\n+/// [`.raw_get()`]: `UnsafeCell::raw_get`\n+///\n /// # Examples\n ///\n /// Here is an example showcasing how to soundly mutate the contents of an `UnsafeCell<_>` despite"}, {"sha": "2ae9636762813f087706986c13dbc0dcfa80e3cf", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -1284,3 +1284,40 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n }\n+\n+impl<T, const N: usize> MaybeUninit<[T; N]> {\n+    /// Transposes a `MaybeUninit<[T; N]>` into a `[MaybeUninit<T>; N]`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_uninit_array_transpose)]\n+    /// # use std::mem::MaybeUninit;\n+    ///\n+    /// let data: [MaybeUninit<u8>; 1000] = MaybeUninit::uninit().transpose();\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_uninit_array_transpose\", issue = \"96097\")]\n+    pub fn transpose(self) -> [MaybeUninit<T>; N] {\n+        // SAFETY: T and MaybeUninit<T> have the same layout\n+        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+    }\n+}\n+\n+impl<T, const N: usize> [MaybeUninit<T>; N] {\n+    /// Transposes a `[MaybeUninit<T>; N]` into a `MaybeUninit<[T; N]>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_uninit_array_transpose)]\n+    /// # use std::mem::MaybeUninit;\n+    ///\n+    /// let data = [MaybeUninit::<u8>::uninit(); 1000];\n+    /// let data: MaybeUninit<[u8; 1000]> = data.transpose();\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_uninit_array_transpose\", issue = \"96097\")]\n+    pub fn transpose(self) -> MaybeUninit<[T; N]> {\n+        // SAFETY: T and MaybeUninit<T> have the same layout\n+        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+    }\n+}"}, {"sha": "5e1c7e6f03e75402b776f9fe29a0ca3c58057159", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -216,7 +216,9 @@\n         const innerHTML = `<div class=\"settings\">${buildSettingsPageSections(settings)}</div>`;\n         const el = document.createElement(elementKind);\n         el.id = \"settings\";\n-        el.className = \"popover\";\n+        if (!isSettingsPage) {\n+            el.className = \"popover\";\n+        }\n         el.innerHTML = innerHTML;\n \n         if (isSettingsPage) {"}, {"sha": "f84e9df04a2acc490adb77e4ff973df99983a6cd", "filename": "src/test/pretty/issue-85089.pp", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Ftest%2Fpretty%2Fissue-85089.pp", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Ftest%2Fpretty%2Fissue-85089.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-85089.pp?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -0,0 +1,20 @@\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// Test to print lifetimes on HIR pretty-printing.\n+\n+// pretty-compare-only\n+// pretty-mode:hir\n+// pp-exact:issue-85089.pp\n+\n+trait A<'x> { }\n+trait B<'x> { }\n+\n+struct Foo<'b> {\n+    bar: &'b dyn for<'a> A<'a>,\n+}\n+\n+impl <'a> B<'a> for dyn for<'b> A<'b> { }\n+\n+impl <'a> A<'a> for Foo<'a> { }"}, {"sha": "eb45d473119d488081d7d3da2f1b8f35687b083b", "filename": "src/test/pretty/issue-85089.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Ftest%2Fpretty%2Fissue-85089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Ftest%2Fpretty%2Fissue-85089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-85089.rs?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -0,0 +1,16 @@\n+// Test to print lifetimes on HIR pretty-printing.\n+\n+// pretty-compare-only\n+// pretty-mode:hir\n+// pp-exact:issue-85089.pp\n+\n+trait A<'x> {}\n+trait B<'x> {}\n+\n+struct Foo<'b> {\n+    pub bar: &'b dyn for<'a> A<'a>,\n+}\n+\n+impl<'a> B<'a> for dyn for<'b> A<'b> {}\n+\n+impl<'a> A<'a> for Foo<'a> {}"}, {"sha": "ed4e9c2516b0b3dcef7586c5dd6768f697e43e9a", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e928a4656f729a4df2cdc6874abf2bf06e47cef9/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=e928a4656f729a4df2cdc6874abf2bf06e47cef9", "patch": "@@ -1,4 +1,5 @@\n-// This test ensures that the settings menu display is working as expected.\n+// This test ensures that the settings menu display is working as expected and that\n+// the settings page is also rendered as expected.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n show-text: true // needed when we check for colors below.\n // First, we check that the settings page doesn't exist.\n@@ -140,7 +141,13 @@ assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n // Now we go to the settings page to check that the CSS is loaded as expected.\n goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n wait-for: \"#settings\"\n-assert-css: (\".setting-line .toggle .slider\", {\"width\": \"45px\", \"margin-right\": \"20px\"})\n+assert-css: (\n+    \".setting-line .toggle .slider\",\n+    {\"width\": \"45px\", \"margin-right\": \"20px\", \"border\": \"0px none rgb(0, 0, 0)\"},\n+)\n+\n+assert-attribute-false: (\"#settings\", {\"class\": \"popover\"}, CONTAINS)\n+compare-elements-position: (\".sub-container\", \"#settings\", (\"x\"))\n \n // We now check the display with JS disabled.\n assert-false: \"noscript section\""}]}