{"sha": "1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTE2MmNlNWI3MDFkYmNkYjViNWY2Y2M5OGNkMzVmZWViNmI5NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-08T15:18:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-08T15:18:46Z"}, "message": "Auto merge of #42996 - Boreeas:merge-e0609-e0612, r=GuillaumeGomez\n\nFold E0612, E0613 into E0609\n\nAs discussed in #42945, with PR 1506 tuple indices are no longer considered a separate case from normal field. This PR folds E06012 (\"tuple index out of bounds\") and E0613 (\"type is not a tuple\") into E0609 (\"type does not have field with that name\")\n\nResolves #42945", "tree": {"sha": "58017b97a04832b7084acb925d7878a694411643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58017b97a04832b7084acb925d7878a694411643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "html_url": "https://github.com/rust-lang/rust/commit/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac1b675c5820ff6f1a42c1fa6d592a7946337b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1b675c5820ff6f1a42c1fa6d592a7946337b2f", "html_url": "https://github.com/rust-lang/rust/commit/ac1b675c5820ff6f1a42c1fa6d592a7946337b2f"}, {"sha": "c215d08c4c85e5b887359e3d97f32888e80634aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c215d08c4c85e5b887359e3d97f32888e80634aa", "html_url": "https://github.com/rust-lang/rust/commit/c215d08c4c85e5b887359e3d97f32888e80634aa"}], "stats": {"total": 101, "additions": 20, "deletions": 81}, "files": [{"sha": "f8c7bfc27a225c43cb6397cfd79be900bfb02014", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "patch": "@@ -111,6 +111,7 @@ use util::nodemap::{DefIdMap, FxHashMap, NodeMap};\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::collections::hash_map::Entry;\n use std::cmp;\n+use std::fmt::Display;\n use std::mem::replace;\n use std::ops::{self, Deref};\n use syntax::abi::Abi;\n@@ -2945,9 +2946,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.tcx().types.err\n         } else {\n             if !expr_t.is_primitive_ty() {\n-                let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0609,\n-                                                 \"no field `{}` on type `{}`\",\n-                                                 field.node, expr_t);\n+                let mut err = self.no_such_field_err(field.span, &field.node, expr_t);\n+\n                 match expr_t.sty {\n                     ty::TyAdt(def, _) if !def.is_enum() => {\n                         if let Some(suggested_field_name) =\n@@ -3064,15 +3064,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                \"attempted out-of-bounds tuple index `{}` on type `{}`\",\n                                idx.node, expr_t).emit();\n         } else {\n-            type_error_struct!(self.tcx().sess, expr.span, expr_t, E0613,\n-                               \"attempted to access tuple index `{}` on type `{}`, but the type \\\n-                                was not a tuple or tuple struct\",\n-                               idx.node, expr_t).emit();\n+            self.no_such_field_err(expr.span, idx.node, expr_t).emit();\n         }\n \n         self.tcx().types.err\n     }\n \n+    fn no_such_field_err<T: Display>(&self, span: Span, field: T, expr_t: &ty::TyS)\n+        -> DiagnosticBuilder {\n+        type_error_struct!(self.tcx().sess, span, expr_t, E0609,\n+                           \"no field `{}` on type `{}`\",\n+                           field, expr_t)\n+    }\n+\n     fn report_unknown_field(&self,\n                             ty: Ty<'tcx>,\n                             variant: &'tcx ty::VariantDef,"}, {"sha": "21ca62ff72becd0400ac28083e88e04867f68151", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "patch": "@@ -4425,60 +4425,6 @@ println!(\"{}\", y.0); // ok!\n ```\n \"##,\n \n-E0613: r##\"\n-Attempted tuple index on a type which isn't a tuple nor a tuple-struct.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0613\n-struct Foo;\n-\n-let y = Foo;\n-println!(\"{}\", y.1); // error: attempted to access tuple index `1` on type\n-                     //        `Foo`, but the type was not a tuple or tuple\n-                     //        struct\n-```\n-\n-Only tuple and tuple-struct types can be indexed this way. Example:\n-\n-```\n-// Let's create a tuple first:\n-let x: (u32, u32, u32, u32) = (0, 1, 1, 2);\n-// You can index its fields this way:\n-println!(\"({}, {}, {}, {})\", x.0, x.1, x.2, x.3);\n-\n-// Now let's declare a tuple-struct:\n-struct TupleStruct(u32, u32, u32, u32);\n-// Let's instantiate it:\n-let x = TupleStruct(0, 1, 1, 2);\n-// And just like the tuple:\n-println!(\"({}, {}, {}, {})\", x.0, x.1, x.2, x.3);\n-```\n-\n-If you want to index into an array, use `[]` instead:\n-\n-```\n-let x = &[0, 1, 1, 2];\n-println!(\"[{}, {}, {}, {}]\", x[0], x[1], x[2], x[3]);\n-```\n-\n-If you want to access a field of a struct, check the field's name wasn't\n-misspelled:\n-\n-```\n-struct SomeStruct {\n-    x: u32,\n-    y: i32,\n-}\n-\n-let s = SomeStruct {\n-    x: 0,\n-    y: -1,\n-};\n-println!(\"x: {} y: {}\", s.x, s.y);\n-```\n-\"##,\n-\n E0614: r##\"\n Attempted to dereference a variable which cannot be dereferenced.\n \n@@ -4799,4 +4745,5 @@ register_diagnostics! {\n     E0568, // auto-traits can not have predicates,\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n+//  E0613, // Removed (merged with E0609)\n }"}, {"sha": "ddfd9d5f21ab257acd9f5f88c976441f8f46007e", "filename": "src/test/compile-fail/E0609.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Ftest%2Fcompile-fail%2FE0609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Ftest%2Fcompile-fail%2FE0609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0609.rs?ref=1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "patch": "@@ -11,8 +11,12 @@\n struct Foo {\n     x: u32,\n }\n+struct Bar;\n \n fn main() {\n     let x = Foo { x: 0 };\n     let _ = x.foo; //~ ERROR E0609\n+\n+    let y = Bar;\n+    y.1; //~ ERROR E0609\n }"}, {"sha": "189d1b1d3bad6108a3bead21591d573b93d03831", "filename": "src/test/compile-fail/E0613.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac1b675c5820ff6f1a42c1fa6d592a7946337b2f/src%2Ftest%2Fcompile-fail%2FE0613.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1b675c5820ff6f1a42c1fa6d592a7946337b2f/src%2Ftest%2Fcompile-fail%2FE0613.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0613.rs?ref=ac1b675c5820ff6f1a42c1fa6d592a7946337b2f", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Foo;\n-\n-fn main() {\n-   let y = Foo;\n-   y.1; //~ ERROR E0613\n-}"}, {"sha": "471104d687201e0e57d731c42157aff7714324e1", "filename": "src/test/compile-fail/tuple-index-not-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs?ref=1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "patch": "@@ -14,7 +14,7 @@ struct Empty;\n fn main() {\n     let origin = Point { x: 0, y: 0 };\n     origin.0;\n-    //~^ ERROR attempted to access tuple index `0` on type `Point`, but the type was not\n+    //~^ ERROR no field `0` on type `Point`\n     Empty.0;\n-    //~^ ERROR attempted to access tuple index `0` on type `Empty`, but the type was not\n+    //~^ ERROR no field `0` on type `Empty`\n }"}, {"sha": "c80c0fce35806c47c93709ea05fb1f836390213b", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=1e5162ce5b701dbcdb5b5f6cc98cd35feeb6b958", "patch": "@@ -16,7 +16,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 51 |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n \n-error[E0613]: attempted to access tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n+error[E0609]: no field `0` on type `{integer}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:27:11\n    |\n 27 |           (1).0\n@@ -43,7 +43,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 55 |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n \n-error[E0613]: attempted to access tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n+error[E0609]: no field `0` on type `{integer}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:45:11\n    |\n 45 |           (1).0"}]}