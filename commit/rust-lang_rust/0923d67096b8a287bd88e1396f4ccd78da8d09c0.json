{"sha": "0923d67096b8a287bd88e1396f4ccd78da8d09c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MjNkNjcwOTZiOGEyODdiZDg4ZTEzOTZmNGNjZDc4ZGE4ZDA5YzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-27T18:17:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-27T18:17:03Z"}, "message": "Fix comment placement in compiletest", "tree": {"sha": "d87a01f90d65033d9e2bc07f3a4039b7d3861dc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87a01f90d65033d9e2bc07f3a4039b7d3861dc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0923d67096b8a287bd88e1396f4ccd78da8d09c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0923d67096b8a287bd88e1396f4ccd78da8d09c0", "html_url": "https://github.com/rust-lang/rust/commit/0923d67096b8a287bd88e1396f4ccd78da8d09c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0923d67096b8a287bd88e1396f4ccd78da8d09c0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7647cf73d1cb495267e5d4151f0629b0374803f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7647cf73d1cb495267e5d4151f0629b0374803f9", "html_url": "https://github.com/rust-lang/rust/commit/7647cf73d1cb495267e5d4151f0629b0374803f9"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "82b9158c411dd6d84ac32793ac4d215f9c13e451", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0923d67096b8a287bd88e1396f4ccd78da8d09c0/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0923d67096b8a287bd88e1396f4ccd78da8d09c0/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=0923d67096b8a287bd88e1396f4ccd78da8d09c0", "patch": "@@ -14,31 +14,33 @@ import std::task;\n \n tag mode { mode_compile_fail; mode_run_fail; mode_run_pass; }\n \n-type config =  // The library paths required for running the compiler\n-    // The library paths required for running compiled programs\n-    // The rustc executable\n-    // The directory containing the tests to run\n-    // The directory where programs should be built\n-    // The name of the stage being built (stage1, etc)\n-    // The test mode, compile-fail, run-fail, run-pass\n-    // Run ignored tests\n-    // Only run tests that match this filter\n-    // A command line to prefix program execution with,\n-    // for running under valgrind\n-    // Flags to pass to the compiler\n-    // Explain what's going on\n-    {compile_lib_path: str,\n-     run_lib_path: str,\n-     rustc_path: str,\n-     src_base: str,\n-     build_base: str,\n-     stage_id: str,\n-     mode: mode,\n-     run_ignored: bool,\n-     filter: option::t[str],\n-     runtool: option::t[str],\n-     rustcflags: option::t[str],\n-     verbose: bool};\n+type config = {\n+ // The library paths required for running the compiler\n+ compile_lib_path: str,\n+ // The library paths required for running compiled programs\n+ run_lib_path: str,\n+ // The rustc executable\n+ rustc_path: str,\n+ // The directory containing the tests to run\n+ src_base: str,\n+ // The directory where programs should be built\n+ build_base: str,\n+ // The name of the stage being built (stage1, etc)\n+ stage_id: str,\n+ // The test mode, compile-fail, run-fail, run-pass\n+ mode: mode,\n+ // Run ignored tests\n+ run_ignored: bool,\n+ // Only run tests that match this filter\n+ filter: option::t[str],\n+ // A command line to prefix program execution with,\n+ // for running under valgrind\n+ runtool: option::t[str],\n+ // Flags to pass to the compiler\n+ rustcflags: option::t[str],\n+ // Explain what's going on\n+ verbose: bool\n+};\n \n fn main(args: vec[str]) {\n \n@@ -230,7 +232,8 @@ So actually shuttling structural data across tasks isn't possible at this\n time, but we can send strings! Sadly, I need the whole config record, in the\n test task so, instead of fixing the mechanism in the compiler I'm going to\n break up the config record and pass everything individually to the spawned\n-function.  */\n+function.\n+*/\n \n fn closure_to_task(cx: cx, configport: port[str], testfn: &fn() ) -> task {\n     testfn();"}]}