{"sha": "359615b852b503378cac85068b0c06c43d04cdfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OTYxNWI4NTJiNTAzMzc4Y2FjODUwNjhiMGMwNmM0M2QwNGNkZmI=", "commit": {"author": {"name": "ecstatic-morse", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T03:40:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-22T03:40:59Z"}, "message": "Rollup merge of #77022 - Juici:master, r=lcnr\n\nReduce boilerplate for BytePos and CharPos\n\nReduces boilerplate code for BytePos and CharPos by using a macro to implement shared traits.", "tree": {"sha": "e2ad499a81953e8e4c2ce0abb95ed4385aa8eaa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ad499a81953e8e4c2ce0abb95ed4385aa8eaa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359615b852b503378cac85068b0c06c43d04cdfb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaXJLCRBK7hj4Ov3rIwAAdHIIABRsGxboWNT5oMG3MmnNG0qC\n9OaSaFhMprUGkIbrLjX5ANnLNq+ZvTCkhIVoCO1SgT3yz5c6oR2b8BD6PQldoGVN\nNgGdFd48ryQbh6ED9gckexxZ4HMPp0PvvghwrRa72OwxKCwqXsYTQHayG7eOMX3t\nBzy0OqFrKgERW/n43AyPAWKXM+BMSIdargS5H2H22vm2YJOfAP7GX+YeqUsIkSzB\npWRSfdublJNFlTBurSbGJSEOMzD7EF9P34VWfdB71e+vg0GrqwR/XKcHo4kceTld\nzkQneEKKK++lVHvcBcGcsPNXlnjh+FabYm/MBxYFTypSV8KY/A7YkuzzPt3ZdVU=\n=Hv6e\n-----END PGP SIGNATURE-----\n", "payload": "tree e2ad499a81953e8e4c2ce0abb95ed4385aa8eaa1\nparent 50d4aebc7a85c3e0285bcdd622ccdbef33929638\nparent 9a1f1777d3602b267c78229e1d5de68fe7eab57a\nauthor ecstatic-morse <ecstaticmorse@gmail.com> 1600746059 -0700\ncommitter GitHub <noreply@github.com> 1600746059 -0700\n\nRollup merge of #77022 - Juici:master, r=lcnr\n\nReduce boilerplate for BytePos and CharPos\n\nReduces boilerplate code for BytePos and CharPos by using a macro to implement shared traits.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359615b852b503378cac85068b0c06c43d04cdfb", "html_url": "https://github.com/rust-lang/rust/commit/359615b852b503378cac85068b0c06c43d04cdfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359615b852b503378cac85068b0c06c43d04cdfb/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d4aebc7a85c3e0285bcdd622ccdbef33929638", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d4aebc7a85c3e0285bcdd622ccdbef33929638", "html_url": "https://github.com/rust-lang/rust/commit/50d4aebc7a85c3e0285bcdd622ccdbef33929638"}, {"sha": "9a1f1777d3602b267c78229e1d5de68fe7eab57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1f1777d3602b267c78229e1d5de68fe7eab57a", "html_url": "https://github.com/rust-lang/rust/commit/9a1f1777d3602b267c78229e1d5de68fe7eab57a"}], "stats": {"total": 137, "additions": 55, "deletions": 82}, "files": [{"sha": "4b02a2d4076d7749c0cb28a078bd0c129fb6ff71", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 55, "deletions": 82, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/359615b852b503378cac85068b0c06c43d04cdfb/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359615b852b503378cac85068b0c06c43d04cdfb/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=359615b852b503378cac85068b0c06c43d04cdfb", "patch": "@@ -1558,58 +1558,71 @@ pub trait Pos {\n     fn to_u32(&self) -> u32;\n }\n \n-/// A byte offset. Keep this small (currently 32-bits), as AST contains\n-/// a lot of them.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n-pub struct BytePos(pub u32);\n-\n-/// A character offset. Because of multibyte UTF-8 characters, a byte offset\n-/// is not equivalent to a character offset. The `SourceMap` will convert `BytePos`\n-/// values to `CharPos` values as necessary.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n-pub struct CharPos(pub usize);\n+macro_rules! impl_pos {\n+    (\n+        $(\n+            $(#[$attr:meta])*\n+            $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);\n+        )*\n+    ) => {\n+        $(\n+            $(#[$attr])*\n+            $vis struct $ident($inner_vis $inner_ty);\n+\n+            impl Pos for $ident {\n+                #[inline(always)]\n+                fn from_usize(n: usize) -> $ident {\n+                    $ident(n as $inner_ty)\n+                }\n \n-// FIXME: lots of boilerplate in these impls, but so far my attempts to fix\n-// have been unsuccessful.\n+                #[inline(always)]\n+                fn to_usize(&self) -> usize {\n+                    self.0 as usize\n+                }\n \n-impl Pos for BytePos {\n-    #[inline(always)]\n-    fn from_usize(n: usize) -> BytePos {\n-        BytePos(n as u32)\n-    }\n+                #[inline(always)]\n+                fn from_u32(n: u32) -> $ident {\n+                    $ident(n as $inner_ty)\n+                }\n \n-    #[inline(always)]\n-    fn to_usize(&self) -> usize {\n-        self.0 as usize\n-    }\n+                #[inline(always)]\n+                fn to_u32(&self) -> u32 {\n+                    self.0 as u32\n+                }\n+            }\n \n-    #[inline(always)]\n-    fn from_u32(n: u32) -> BytePos {\n-        BytePos(n)\n-    }\n+            impl Add for $ident {\n+                type Output = $ident;\n \n-    #[inline(always)]\n-    fn to_u32(&self) -> u32 {\n-        self.0\n-    }\n-}\n+                #[inline(always)]\n+                fn add(self, rhs: $ident) -> $ident {\n+                    $ident(self.0 + rhs.0)\n+                }\n+            }\n \n-impl Add for BytePos {\n-    type Output = BytePos;\n+            impl Sub for $ident {\n+                type Output = $ident;\n \n-    #[inline(always)]\n-    fn add(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_usize() + rhs.to_usize()) as u32)\n-    }\n+                #[inline(always)]\n+                fn sub(self, rhs: $ident) -> $ident {\n+                    $ident(self.0 - rhs.0)\n+                }\n+            }\n+        )*\n+    };\n }\n \n-impl Sub for BytePos {\n-    type Output = BytePos;\n+impl_pos! {\n+    /// A byte offset. Keep this small (currently 32-bits), as AST contains\n+    /// a lot of them.\n+    #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n+    pub struct BytePos(pub u32);\n \n-    #[inline(always)]\n-    fn sub(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_usize() - rhs.to_usize()) as u32)\n-    }\n+    /// A character offset. Because of multibyte UTF-8 characters, a byte offset\n+    /// is not equivalent to a character offset. The `SourceMap` will convert `BytePos`\n+    /// values to `CharPos` values as necessary.\n+    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]\n+    pub struct CharPos(pub usize);\n }\n \n impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {\n@@ -1624,46 +1637,6 @@ impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {\n     }\n }\n \n-impl Pos for CharPos {\n-    #[inline(always)]\n-    fn from_usize(n: usize) -> CharPos {\n-        CharPos(n)\n-    }\n-\n-    #[inline(always)]\n-    fn to_usize(&self) -> usize {\n-        self.0\n-    }\n-\n-    #[inline(always)]\n-    fn from_u32(n: u32) -> CharPos {\n-        CharPos(n as usize)\n-    }\n-\n-    #[inline(always)]\n-    fn to_u32(&self) -> u32 {\n-        self.0 as u32\n-    }\n-}\n-\n-impl Add for CharPos {\n-    type Output = CharPos;\n-\n-    #[inline(always)]\n-    fn add(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_usize() + rhs.to_usize())\n-    }\n-}\n-\n-impl Sub for CharPos {\n-    type Output = CharPos;\n-\n-    #[inline(always)]\n-    fn sub(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_usize() - rhs.to_usize())\n-    }\n-}\n-\n // _____________________________________________________________________________\n // Loc, SourceFileAndLine, SourceFileAndBytePos\n //"}]}