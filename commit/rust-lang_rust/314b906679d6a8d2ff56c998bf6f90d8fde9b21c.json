{"sha": "314b906679d6a8d2ff56c998bf6f90d8fde9b21c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNGI5MDY2NzlkNmE4ZDJmZjU2Yzk5OGJmNmY5MGQ4ZmRlOWIyMWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-12T20:11:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-12T20:26:28Z"}, "message": "Add more tracing code to trans for refcount events.", "tree": {"sha": "825a867dd7591032b835229e9370a88213fc82e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/825a867dd7591032b835229e9370a88213fc82e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314b906679d6a8d2ff56c998bf6f90d8fde9b21c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314b906679d6a8d2ff56c998bf6f90d8fde9b21c", "html_url": "https://github.com/rust-lang/rust/commit/314b906679d6a8d2ff56c998bf6f90d8fde9b21c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314b906679d6a8d2ff56c998bf6f90d8fde9b21c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b172862d21f16095a5cf11a8938f3cea24e9bf58", "url": "https://api.github.com/repos/rust-lang/rust/commits/b172862d21f16095a5cf11a8938f3cea24e9bf58", "html_url": "https://github.com/rust-lang/rust/commit/b172862d21f16095a5cf11a8938f3cea24e9bf58"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "85dd526542385b48ad9d2faeda33407f344cfe4e", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/314b906679d6a8d2ff56c998bf6f90d8fde9b21c/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/314b906679d6a8d2ff56c998bf6f90d8fde9b21c/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=314b906679d6a8d2ff56c998bf6f90d8fde9b21c", "patch": "@@ -2453,9 +2453,8 @@ let trans_visitor\n             note_drop_step ty \"drop_ty: obj path\";\n             let binding = get_element_ptr cell Abi.binding_field_binding in\n             let null_jmp = null_check binding in\n+            let rc_jmp = drop_refcount_and_cmp binding in\n             let obj = deref binding in\n-            let rc = get_element_ptr obj 0 in\n-            let rc_jmp = drop_refcount_and_cmp rc in\n             let tydesc = get_element_ptr obj 1 in\n             let body = get_element_ptr obj 2 in\n             let ty_params =\n@@ -2505,8 +2504,7 @@ let trans_visitor\n \n                 let _ = check_box_rty cell in\n                 let null_jmp = null_check cell in\n-                let rc = box_rc_cell cell in\n-                let j = drop_refcount_and_cmp rc in\n+                let j = drop_refcount_and_cmp cell in\n \n                   (* FIXME (issue #25): check to see that the box has\n                    * further box members; if it doesn't we can elide the\n@@ -2525,7 +2523,7 @@ let trans_visitor\n                   note_drop_step ty \"drop_ty: done box-drop path\";\n \n             | MEM_interior when type_is_structured ty ->\n-                note_drop_step ty \"drop:ty structured-interior path\";\n+                note_drop_step ty \"drop_ty structured-interior path\";\n                 iter_ty_parts ty_params cell ty\n                   (drop_ty ty_params) curr_iso;\n                 note_drop_step ty \"drop_ty: done structured-interior path\";\n@@ -2740,14 +2738,35 @@ let trans_visitor\n       emit (Il.jmp Il.JE Il.CodeNone);\n       j\n \n-  and drop_refcount_and_cmp (rc:Il.cell) : quad_idx =\n+  and drop_refcount_and_cmp (boxed:Il.cell) : quad_idx =\n     iflog (fun _ -> annotate \"drop refcount and maybe free\");\n+    let rc = box_rc_cell boxed in\n+    if cx.ctxt_sess.Session.sess_trace_gc ||\n+      cx.ctxt_sess.Session.sess_trace_drop\n+    then\n+      begin\n+        trace_str true \"refcount--\";\n+        trace_word true boxed;\n+        trace_word true rc\n+      end;\n     emit (Il.binary Il.SUB rc (Il.Cell rc) one);\n     emit (Il.cmp (Il.Cell rc) zero);\n     let j = mark () in\n       emit (Il.jmp Il.JNE Il.CodeNone);\n       j\n \n+  and incr_refcount (boxed:Il.cell) : unit =\n+    let rc = box_rc_cell boxed in\n+      if cx.ctxt_sess.Session.sess_trace_gc ||\n+        cx.ctxt_sess.Session.sess_trace_drop\n+      then\n+        begin\n+          trace_str true \"refcount++\";\n+          trace_word true boxed;\n+          trace_word true rc\n+        end;\n+      add_to rc one\n+\n   and drop_slot\n       (ty_params:Il.cell)\n       (cell:Il.cell)\n@@ -2917,7 +2936,7 @@ let trans_visitor\n         | (MEM_rc_struct, MEM_rc_struct) ->\n             (* Lightweight copy: twiddle refcounts, move pointer. *)\n             anno \"refcounted light\";\n-            add_to (box_rc_cell src) one;\n+            incr_refcount src;\n             if not initializing\n             then\n               drop_ty ty_params dst dst_ty None;"}]}