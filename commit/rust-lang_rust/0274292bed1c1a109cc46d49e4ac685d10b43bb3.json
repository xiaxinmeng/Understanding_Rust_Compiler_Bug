{"sha": "0274292bed1c1a109cc46d49e4ac685d10b43bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzQyOTJiZWQxYzFhMTA5Y2M0NmQ0OWU0YWM2ODVkMTBiNDNiYjM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-11T04:09:26Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-11T04:10:10Z"}, "message": "std: Address XXXes in flatpipes", "tree": {"sha": "b5955776099d609929dd23e5abb0d01229a2a803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5955776099d609929dd23e5abb0d01229a2a803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0274292bed1c1a109cc46d49e4ac685d10b43bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0274292bed1c1a109cc46d49e4ac685d10b43bb3", "html_url": "https://github.com/rust-lang/rust/commit/0274292bed1c1a109cc46d49e4ac685d10b43bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0274292bed1c1a109cc46d49e4ac685d10b43bb3/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7da96fd22faf8587c1717e03a988dce6893bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7da96fd22faf8587c1717e03a988dce6893bdb", "html_url": "https://github.com/rust-lang/rust/commit/3e7da96fd22faf8587c1717e03a988dce6893bdb"}], "stats": {"total": 137, "additions": 70, "deletions": 67}, "files": [{"sha": "0607055db5c03ce36e4c58f194e5c184f6decfbf", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 8, "deletions": 67, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0274292bed1c1a109cc46d49e4ac685d10b43bb3/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0274292bed1c1a109cc46d49e4ac685d10b43bb3/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=0274292bed1c1a109cc46d49e4ac685d10b43bb3", "patch": "@@ -329,7 +329,7 @@ pub impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C> {\n pub mod flatteners {\n     use ebml;\n     use flatpipes::{ByteChan, BytePort, Flattener, Unflattener};\n-    use flatpipes::util::BufReader;\n+    use io_util::BufReader;\n     use json;\n     use serialize::{Encoder, Decoder, Encodable, Decodable};\n \n@@ -340,7 +340,8 @@ pub mod flatteners {\n     use core::sys::size_of;\n     use core::vec;\n \n-    // XXX: Is copy/send equivalent to pod?\n+\n+    // FIXME #4074: Copy + Owned != POD\n     pub struct PodUnflattener<T: Copy Owned> {\n         bogus: ()\n     }\n@@ -625,78 +626,18 @@ pub mod bytepipes {\n \n }\n \n-// XXX: This belongs elsewhere\n-mod util {\n-    use core::io::{Reader, BytesReader};\n-    use core::io;\n-    use core::prelude::*;\n-\n-    pub struct BufReader {\n-        buf: ~[u8],\n-        mut pos: uint\n-    }\n-\n-    pub impl BufReader {\n-        static pub fn new(v: ~[u8]) -> BufReader {\n-            BufReader {\n-                buf: move v,\n-                pos: 0\n-            }\n-        }\n-\n-        priv fn as_bytes_reader<A>(f: &fn(&BytesReader) -> A) -> A {\n-            // Recreating the BytesReader state every call since\n-            // I can't get the borrowing to work correctly\n-            let bytes_reader = BytesReader {\n-                bytes: ::core::util::id::<&[u8]>(self.buf),\n-                pos: self.pos\n-            };\n-\n-            let res = f(&bytes_reader);\n-\n-            // XXX: This isn't correct if f fails\n-            self.pos = bytes_reader.pos;\n-\n-            return move res;\n-        }\n-    }\n-\n-    impl BufReader: Reader {\n-        fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n-            self.as_bytes_reader(|r| r.read(bytes, len) )\n-        }\n-        fn read_byte(&self) -> int {\n-            self.as_bytes_reader(|r| r.read_byte() )\n-        }\n-        fn eof(&self) -> bool {\n-            self.as_bytes_reader(|r| r.eof() )\n-        }\n-        fn seek(&self, offset: int, whence: io::SeekStyle) {\n-            self.as_bytes_reader(|r| r.seek(offset, whence) )\n-        }\n-        fn tell(&self) -> uint {\n-            self.as_bytes_reader(|r| r.tell() )\n-        }\n-    }\n-\n-}\n-\n #[cfg(test)]\n mod test {\n     use core::prelude::*;\n \n-    // XXX: json::Decoder doesn't work because of problems related to\n-    // its interior pointers\n-    //use DefaultEncoder = json::Encoder;\n-    //use DefaultDecoder = json::Decoder;\n-    use DefaultEncoder = ebml::writer::Encoder;\n-    use DefaultDecoder = ebml::reader::Decoder;\n+    use DefaultEncoder = json::Encoder;\n+    use DefaultDecoder = json::Decoder;\n \n     use flatpipes::flatteners::*;\n     use flatpipes::bytepipes::*;\n     use flatpipes::pod;\n     use flatpipes::serial;\n-    use flatpipes::util::BufReader;\n+    use io_util::BufReader;\n     use flatpipes::{BytePort, FlatChan, FlatPort};\n     use net::ip;\n     use net::tcp::TcpSocketBuf;\n@@ -787,7 +728,7 @@ mod test {\n         }\n     }\n \n-    // XXX: Networking doesn't work on x86\n+    // FIXME #2064: Networking doesn't work on x86\n     #[test]\n     #[cfg(target_arch = \"x86_64\")]\n     fn test_pod_tcp_stream() {\n@@ -934,7 +875,7 @@ mod test {\n         use flatpipes::{BytePort, FlatPort};\n         use flatpipes::flatteners::PodUnflattener;\n         use flatpipes::pod;\n-        use flatpipes::util::BufReader;\n+        use io_util::BufReader;\n \n         use core::io;\n         use core::pipes;"}, {"sha": "fb410c19a76247bc35b77b25ca39465e04babbc7", "filename": "src/libstd/io_util.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0274292bed1c1a109cc46d49e4ac685d10b43bb3/src%2Flibstd%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0274292bed1c1a109cc46d49e4ac685d10b43bb3/src%2Flibstd%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio_util.rs?ref=0274292bed1c1a109cc46d49e4ac685d10b43bb3", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::io::{Reader, BytesReader};\n+use core::io;\n+use core::prelude::*;\n+\n+pub struct BufReader {\n+    buf: ~[u8],\n+    mut pos: uint\n+}\n+\n+pub impl BufReader {\n+    static pub fn new(v: ~[u8]) -> BufReader {\n+        BufReader {\n+            buf: move v,\n+            pos: 0\n+        }\n+    }\n+\n+    priv fn as_bytes_reader<A>(f: &fn(&BytesReader) -> A) -> A {\n+        // Recreating the BytesReader state every call since\n+        // I can't get the borrowing to work correctly\n+        let bytes_reader = BytesReader {\n+            bytes: ::core::util::id::<&[u8]>(self.buf),\n+            pos: self.pos\n+        };\n+\n+        let res = f(&bytes_reader);\n+\n+        // FIXME #4429: This isn't correct if f fails\n+        self.pos = bytes_reader.pos;\n+\n+        return move res;\n+    }\n+}\n+\n+impl BufReader: Reader {\n+    fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n+        self.as_bytes_reader(|r| r.read(bytes, len) )\n+    }\n+    fn read_byte(&self) -> int {\n+        self.as_bytes_reader(|r| r.read_byte() )\n+    }\n+    fn eof(&self) -> bool {\n+        self.as_bytes_reader(|r| r.eof() )\n+    }\n+    fn seek(&self, offset: int, whence: io::SeekStyle) {\n+        self.as_bytes_reader(|r| r.seek(offset, whence) )\n+    }\n+    fn tell(&self) -> uint {\n+        self.as_bytes_reader(|r| r.tell() )\n+    }\n+}"}, {"sha": "eea9bd0a40f7a1e6815b223f9506a58a0c0fda15", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0274292bed1c1a109cc46d49e4ac685d10b43bb3/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0274292bed1c1a109cc46d49e4ac685d10b43bb3/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=0274292bed1c1a109cc46d49e4ac685d10b43bb3", "patch": "@@ -57,6 +57,7 @@ pub mod uv_global_loop;\n pub mod c_vec;\n pub mod timer;\n pub mod cell;\n+pub mod io_util;\n \n // Concurrency\n "}]}