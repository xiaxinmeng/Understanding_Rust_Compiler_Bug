{"sha": "72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWJjMDJmMTNlZWI3MzI4ZDE5OWQ3ZDVjY2FlZTRlNWZmMDNiM2U=", "commit": {"author": {"name": "karpinski", "email": "marcinpkarpinski@gmail.com", "date": "2016-12-30T12:21:21Z"}, "committer": {"name": "karpinski", "email": "marcinpkarpinski@gmail.com", "date": "2016-12-30T15:37:05Z"}, "message": "Switching from NULL to nullptr in src/rustllvm.", "tree": {"sha": "21add101437bccbb0591ed6e2382f11752a8d992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21add101437bccbb0591ed6e2382f11752a8d992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e", "html_url": "https://github.com/rust-lang/rust/commit/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e/comments", "author": {"login": "karpinski", "id": 10697044, "node_id": "MDQ6VXNlcjEwNjk3MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/10697044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karpinski", "html_url": "https://github.com/karpinski", "followers_url": "https://api.github.com/users/karpinski/followers", "following_url": "https://api.github.com/users/karpinski/following{/other_user}", "gists_url": "https://api.github.com/users/karpinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/karpinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karpinski/subscriptions", "organizations_url": "https://api.github.com/users/karpinski/orgs", "repos_url": "https://api.github.com/users/karpinski/repos", "events_url": "https://api.github.com/users/karpinski/events{/privacy}", "received_events_url": "https://api.github.com/users/karpinski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "karpinski", "id": 10697044, "node_id": "MDQ6VXNlcjEwNjk3MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/10697044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karpinski", "html_url": "https://github.com/karpinski", "followers_url": "https://api.github.com/users/karpinski/followers", "following_url": "https://api.github.com/users/karpinski/following{/other_user}", "gists_url": "https://api.github.com/users/karpinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/karpinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karpinski/subscriptions", "organizations_url": "https://api.github.com/users/karpinski/orgs", "repos_url": "https://api.github.com/users/karpinski/repos", "events_url": "https://api.github.com/users/karpinski/events{/privacy}", "received_events_url": "https://api.github.com/users/karpinski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c72d859e4f27c4b4c4be349091f5c71058ac1cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c72d859e4f27c4b4c4be349091f5c71058ac1cd4", "html_url": "https://github.com/rust-lang/rust/commit/c72d859e4f27c4b4c4be349091f5c71058ac1cd4"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "6ff06b56bc412e79c8769c20ea60b19ea815c655", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e", "patch": "@@ -22,11 +22,11 @@ struct RustArchiveMember {\n   Archive::Child child;\n \n   RustArchiveMember()\n-      : filename(NULL), name(NULL),\n+      : filename(nullptr), name(nullptr),\n #if LLVM_VERSION_GE(3, 8)\n-        child(NULL, NULL, NULL)\n+        child(nullptr, nullptr, nullptr)\n #else\n-        child(NULL, NULL)\n+        child(nullptr, nullptr)\n #endif\n   {\n   }\n@@ -118,7 +118,7 @@ LLVMRustArchiveIteratorNew(LLVMRustArchiveRef ra) {\n   if (rai->err) {\n     LLVMRustSetLastError(toString(std::move(rai->err)).c_str());\n     delete rai;\n-    return NULL;\n+    return nullptr;\n   }\n #endif\n   rai->end = ar->child_end();\n@@ -183,12 +183,12 @@ LLVMRustArchiveChildName(LLVMRustArchiveChildConstRef child, size_t *size) {\n     // in the future, and in the mean time this tells LLVM that the error was\n     // not ignored and that it shouldn't abort the process.\n     LLVMRustSetLastError(toString(name_or_err.takeError()).c_str());\n-    return NULL;\n+    return nullptr;\n   }\n #else\n   ErrorOr<StringRef> name_or_err = child->getName();\n   if (name_or_err.getError())\n-    return NULL;\n+    return nullptr;\n #endif\n   StringRef name = name_or_err.get();\n   *size = name.size();\n@@ -202,13 +202,13 @@ extern \"C\" const char *LLVMRustArchiveChildData(LLVMRustArchiveChildRef child,\n   Expected<StringRef> buf_or_err = child->getBuffer();\n   if (!buf_or_err) {\n     LLVMRustSetLastError(toString(buf_or_err.takeError()).c_str());\n-    return NULL;\n+    return nullptr;\n   }\n #else\n   ErrorOr<StringRef> buf_or_err = child->getBuffer();\n   if (buf_or_err.getError()) {\n     LLVMRustSetLastError(buf_or_err.getError().message().c_str());\n-    return NULL;\n+    return nullptr;\n   }\n #endif\n   buf = buf_or_err.get();"}, {"sha": "f71dac77caf092075c57d259e393a14c910a8e8c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e", "patch": "@@ -83,7 +83,7 @@ extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n   if (PI) {\n     return wrap(PI->createPass());\n   }\n-  return NULL;\n+  return nullptr;\n }\n \n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef rust_pass) {\n@@ -317,9 +317,9 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Triple Trip(Triple::normalize(triple));\n   const llvm::Target *TheTarget =\n       TargetRegistry::lookupTarget(Trip.getTriple(), Error);\n-  if (TheTarget == NULL) {\n+  if (TheTarget == nullptr) {\n     LLVMRustSetLastError(Error.c_str());\n-    return NULL;\n+    return nullptr;\n   }\n \n   StringRef real_cpu = cpu;\n@@ -549,7 +549,7 @@ extern \"C\" void LLVMRustMarkAllFunctionsNounwind(LLVMModuleRef M) {\n        ++GV) {\n     GV->setDoesNotThrow();\n     Function *F = dyn_cast<Function>(GV);\n-    if (F == NULL)\n+    if (F == nullptr)\n       continue;\n \n     for (Function::iterator B = F->begin(), BE = F->end(); B != BE; ++B) {"}, {"sha": "8f635441167ba015795acd88f9a6447ea8d5e240", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=72ebc02f13eeb7328d199d7d5ccaee4e5ff03b3e", "patch": "@@ -66,7 +66,7 @@ LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n \n extern \"C\" char *LLVMRustGetLastError(void) {\n   char *ret = LastError;\n-  LastError = NULL;\n+  LastError = nullptr;\n   return ret;\n }\n \n@@ -319,7 +319,7 @@ inline Metadata **unwrap(LLVMRustMetadataRef *Vals) {\n }\n \n template <typename DIT> DIT *unwrapDIptr(LLVMRustMetadataRef ref) {\n-  return (DIT *)(ref ? unwrap<MDNode>(ref) : NULL);\n+  return (DIT *)(ref ? unwrap<MDNode>(ref) : nullptr);\n }\n \n #define DIDescriptor DIScope\n@@ -574,7 +574,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Context, const char *Name,\n     const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n     LLVMRustMetadataRef Ty, bool isLocalToUnit, LLVMValueRef Val,\n-    LLVMRustMetadataRef Decl = NULL, uint64_t AlignInBits = 0) {\n+    LLVMRustMetadataRef Decl = nullptr, uint64_t AlignInBits = 0) {\n   Constant *InitVal = cast<Constant>(unwrap(Val));\n \n #if LLVM_VERSION_GE(4, 0)\n@@ -1012,14 +1012,14 @@ extern \"C\" LLVMValueRef LLVMRustBuildCleanupPad(LLVMBuilderRef Builder,\n                                                 const char *Name) {\n #if LLVM_VERSION_GE(3, 8)\n   Value **Args = unwrap(LLArgs);\n-  if (ParentPad == NULL) {\n+  if (ParentPad == nullptr) {\n     Type *Ty = Type::getTokenTy(unwrap(Builder)->getContext());\n     ParentPad = wrap(Constant::getNullValue(Ty));\n   }\n   return wrap(unwrap(Builder)->CreateCleanupPad(\n       unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCnt), Name));\n #else\n-  return NULL;\n+  return nullptr;\n #endif\n }\n \n@@ -1030,7 +1030,7 @@ extern \"C\" LLVMValueRef LLVMRustBuildCleanupRet(LLVMBuilderRef Builder,\n   CleanupPadInst *Inst = cast<CleanupPadInst>(unwrap(CleanupPad));\n   return wrap(unwrap(Builder)->CreateCleanupRet(Inst, unwrap(UnwindBB)));\n #else\n-  return NULL;\n+  return nullptr;\n #endif\n }\n \n@@ -1042,7 +1042,7 @@ LLVMRustBuildCatchPad(LLVMBuilderRef Builder, LLVMValueRef ParentPad,\n   return wrap(unwrap(Builder)->CreateCatchPad(\n       unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCnt), Name));\n #else\n-  return NULL;\n+  return nullptr;\n #endif\n }\n \n@@ -1053,7 +1053,7 @@ extern \"C\" LLVMValueRef LLVMRustBuildCatchRet(LLVMBuilderRef Builder,\n   return wrap(unwrap(Builder)->CreateCatchRet(cast<CatchPadInst>(unwrap(Pad)),\n                                               unwrap(BB)));\n #else\n-  return NULL;\n+  return nullptr;\n #endif\n }\n \n@@ -1063,14 +1063,14 @@ extern \"C\" LLVMValueRef LLVMRustBuildCatchSwitch(LLVMBuilderRef Builder,\n                                                  unsigned NumHandlers,\n                                                  const char *Name) {\n #if LLVM_VERSION_GE(3, 8)\n-  if (ParentPad == NULL) {\n+  if (ParentPad == nullptr) {\n     Type *Ty = Type::getTokenTy(unwrap(Builder)->getContext());\n     ParentPad = wrap(Constant::getNullValue(Ty));\n   }\n   return wrap(unwrap(Builder)->CreateCatchSwitch(unwrap(ParentPad), unwrap(BB),\n                                                  NumHandlers, Name));\n #else\n-  return NULL;\n+  return nullptr;\n #endif\n }\n \n@@ -1126,7 +1126,7 @@ LLVMRustBuildInvoke(LLVMBuilderRef B, LLVMValueRef Fn, LLVMValueRef *Args,\n extern \"C\" void *LLVMRustBuildOperandBundleDef(const char *Name,\n                                                LLVMValueRef *Inputs,\n                                                unsigned NumInputs) {\n-  return NULL;\n+  return nullptr;\n }\n \n extern \"C\" void LLVMRustFreeOperandBundleDef(void *Bundle) {}"}]}