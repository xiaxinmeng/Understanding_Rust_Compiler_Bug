{"sha": "b265dd4156578800fa1171e615638cd86f517042", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjVkZDQxNTY1Nzg4MDBmYTExNzFlNjE1NjM4Y2Q4NmY1MTcwNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-31T20:31:46Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "librustc: De-`@str` symbol hashing", "tree": {"sha": "825dc80341d51dc36f03a00eca7652e8f2c90f22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/825dc80341d51dc36f03a00eca7652e8f2c90f22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b265dd4156578800fa1171e615638cd86f517042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b265dd4156578800fa1171e615638cd86f517042", "html_url": "https://github.com/rust-lang/rust/commit/b265dd4156578800fa1171e615638cd86f517042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b265dd4156578800fa1171e615638cd86f517042/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0c07d011959df334d2903ff050c2bc31a3909e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0c07d011959df334d2903ff050c2bc31a3909e", "html_url": "https://github.com/rust-lang/rust/commit/1e0c07d011959df334d2903ff050c2bc31a3909e"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "fc38fa25a214655799f0ab2386def9bbd5a3babf", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b265dd4156578800fa1171e615638cd86f517042/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b265dd4156578800fa1171e615638cd86f517042/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=b265dd4156578800fa1171e615638cd86f517042", "patch": "@@ -510,7 +510,8 @@ fn truncated_hash_result(symbol_hasher: &mut Sha256) -> ~str {\n pub fn symbol_hash(tcx: ty::ctxt,\n                    symbol_hasher: &mut Sha256,\n                    t: ty::t,\n-                   link_meta: &LinkMeta) -> @str {\n+                   link_meta: &LinkMeta)\n+                   -> ~str {\n     // NB: do *not* use abbrevs here as we want the symbol names\n     // to be independent of one another in the crate.\n \n@@ -523,23 +524,22 @@ pub fn symbol_hash(tcx: ty::ctxt,\n     let mut hash = truncated_hash_result(symbol_hasher);\n     // Prefix with 'h' so that it never blends into adjacent digits\n     hash.unshift_char('h');\n-    // tjc: allocation is unfortunate; need to change std::hash\n-    hash.to_managed()\n+    hash\n }\n \n-pub fn get_symbol_hash(ccx: &CrateContext, t: ty::t) -> @str {\n+pub fn get_symbol_hash(ccx: &CrateContext, t: ty::t) -> ~str {\n     {\n         let type_hashcodes = ccx.type_hashcodes.borrow();\n         match type_hashcodes.get().find(&t) {\n-            Some(&h) => return h,\n+            Some(h) => return h.to_str(),\n             None => {}\n         }\n     }\n \n     let mut type_hashcodes = ccx.type_hashcodes.borrow_mut();\n     let mut symbol_hasher = ccx.symbol_hasher.borrow_mut();\n     let hash = symbol_hash(ccx.tcx, symbol_hasher.get(), t, &ccx.link_meta);\n-    type_hashcodes.get().insert(t, hash);\n+    type_hashcodes.get().insert(t, hash.clone());\n     hash\n }\n "}, {"sha": "53f7b36b693fe1b7079fc99e5a2e6d55c2fedca7", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b265dd4156578800fa1171e615638cd86f517042/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b265dd4156578800fa1171e615638cd86f517042/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=b265dd4156578800fa1171e615638cd86f517042", "patch": "@@ -96,7 +96,7 @@ pub struct CrateContext {\n      llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n      adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n      symbol_hasher: RefCell<Sha256>,\n-     type_hashcodes: RefCell<HashMap<ty::t, @str>>,\n+     type_hashcodes: RefCell<HashMap<ty::t, ~str>>,\n      all_llvm_symbols: RefCell<HashSet<@str>>,\n      tcx: ty::ctxt,\n      maps: astencode::Maps,"}]}