{"sha": "3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NTNjMGM5ZmNhMDcxOGY0YjkyNjlkZDQ1YjNmZGQyMmE2Y2M4MTk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-18T10:18:40Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-18T10:18:40Z"}, "message": "Revert \"Auto merge of #79132 - pietroalbini:beta-next, r=Mark-Simulacrum\"\n\nThis was landed on master instead of beta!", "tree": {"sha": "ece8318a8316c924b23b0e64494cea0fce8424ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece8318a8316c924b23b0e64494cea0fce8424ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+09TAACgkQPgar6Auq\n8ZyFDg/8CxVHOeKtAdz4nPE5bijvv66EVcka1mLa7FtPhgq7OvQ8Ea0Q+e332Xi8\ndOUeasswgJZEIx6xqRVXcsjOtN2sb1H1G3Xcqx6XfEVZXRrUSC2n1+DOIckcrMVa\nBJJqlFuPyuEqHdVFSGSKfMxXLBOlwLulZfewMZjpAnYA1YJ72k1w9bw3UTMQkt/h\n+2zKwhixMllHkkz8ddSJjL7LT8y4+etVVgjUt35Tl2H7LVw81pExiu9WS3qTh8Xh\nkCX3OQwcYTQxzKzVLC1E1XU+eVY01wO+XX2gokOCqPzgrSCepchVmNN8XdM+4FZQ\nUj+o1sqtL9GBdU/qExgj8IDXS8bl2pMZ9ZpR63raNLlVV0Wzxt6fbNh2OONshU9r\nowol2q5ryB0MR0bV8iU7HI6QbUw28j+rE19vPsUd70hBvhgednhaSPFNFbe8hQT0\non24QT7TVRICip1SVekuR8XMo9mSxFvhBHlMOpJJ7MIDRVmqoESKrPpzYXpSYfys\n0qrXuLwbHJ8r7OOeg9Kqq7HNITfrNBEGreVKzMZtFvF2hQNCF12K4Q+WsYOEdeDX\nxjTGnERJFR6AE51Vrt7uHYfoqKUHJQ5StkeX5/NP2fwFyuUu3Q1X1PUwBhKzRtW8\n8XEvj/Zeceh+02RC62+r68B/CJAwKLp7qN1DoGTB5egSb733AJA=\n=lMx8\n-----END PGP SIGNATURE-----", "payload": "tree ece8318a8316c924b23b0e64494cea0fce8424ac\nparent c4f836ad1aceb83507810d9499f56988fd24578d\nauthor Pietro Albini <pietro@pietroalbini.org> 1605694720 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1605694720 +0100\n\nRevert \"Auto merge of #79132 - pietroalbini:beta-next, r=Mark-Simulacrum\"\n\nThis was landed on master instead of beta!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "html_url": "https://github.com/rust-lang/rust/commit/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f836ad1aceb83507810d9499f56988fd24578d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f836ad1aceb83507810d9499f56988fd24578d", "html_url": "https://github.com/rust-lang/rust/commit/c4f836ad1aceb83507810d9499f56988fd24578d"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "9b77e38a8474fc0301d3a1e4d07e4606af0ac2d6", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "patch": "@@ -1336,13 +1336,7 @@ impl Step for Rls {\n         let rls = builder\n             .ensure(tool::Rls { compiler, target, extra_features: Vec::new() })\n             .or_else(|| {\n-                // We ignore failure on aarch64 Windows because RLS currently\n-                // fails to build, due to winapi 0.2 not supporting aarch64.\n-                missing_tool(\n-                    \"RLS\",\n-                    builder.build.config.missing_tools\n-                        || (target.triple.contains(\"aarch64\") && target.triple.contains(\"windows\")),\n-                );\n+                missing_tool(\"RLS\", builder.build.config.missing_tools);\n                 None\n             })?;\n "}, {"sha": "181a7fcb732661cffec9e8c9cf3233470ce922ac", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "patch": "@@ -63,7 +63,7 @@ fi\n #\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n-export RUST_RELEASE_CHANNEL=beta\n+export RUST_RELEASE_CHANNEL=nightly\n \n # Always set the release channel for bootstrap; this is normally not important (i.e., only dist\n # builds would seem to matter) but in practice bootstrap wants to know whether we're targeting"}, {"sha": "9eaa58dd438692e53eb23cfa8b5535008e1502c8", "filename": "src/stage0.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "patch": "@@ -12,15 +12,15 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.(x+1).0` for Cargo where they were released on `date`.\n \n-date: 2020-11-16\n-rustc: 1.48.0\n-cargo: 1.48.0\n+date: 2020-10-16\n+rustc: beta\n+cargo: beta\n \n # We use a nightly rustfmt to format the source because it solves some\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-#rustfmt: nightly-2020-10-12\n+rustfmt: nightly-2020-10-12\n \n # When making a stable release the process currently looks like:\n #\n@@ -40,4 +40,4 @@ cargo: 1.48.0\n # looking at a beta source tarball and it's uncommented we'll shortly comment it\n # out.\n \n-dev: 1\n+#dev: 1"}, {"sha": "c1be151f1c1ce5d28f2a41e10d6e00e5f34140f2", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3853c0c9fca0718f4b9269dd45b3fdd22a6cc819/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=3853c0c9fca0718f4b9269dd45b3fdd22a6cc819", "patch": "@@ -1,20 +1,25 @@\n error: `#[derive(SessionDiagnostic)]` can only be used on structs\n   --> $DIR/session-derive-errors.rs:28:1\n    |\n-LL | #[error = \"E0123\"]\n-   | ^\n+LL | / #[error = \"E0123\"]\n+LL | |\n+LL | | enum SessionDiagnosticOnEnum {\n+LL | |     Foo,\n+LL | |     Bar,\n+LL | | }\n+   | |_^\n \n error: `#[label = ...]` is not a valid SessionDiagnostic struct attribute\n   --> $DIR/session-derive-errors.rs:37:1\n    |\n LL | #[label = \"This is in the wrong place\"]\n-   | ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion = ...]` is not a valid SessionDiagnostic field attribute\n   --> $DIR/session-derive-errors.rs:44:5\n    |\n LL |     #[suggestion = \"this is the wrong kind of attribute\"]\n-   |     ^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `error` specified multiple times\n   --> $DIR/session-derive-errors.rs:52:11\n@@ -32,21 +37,21 @@ error: `code` not specified\n   --> $DIR/session-derive-errors.rs:67:1\n    |\n LL | struct ErrorCodeNotProvided {}\n-   | ^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the [code = \"...\"] attribute to set this diagnostic's error code \n \n error: the `#[message = \"...\"]` attribute can only be applied to fields of type Span\n   --> $DIR/session-derive-errors.rs:95:5\n    |\n LL |     #[message = \"this message is applied to a String field\"]\n-   |     ^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n   --> $DIR/session-derive-errors.rs:102:1\n    |\n LL | #[message = \"This error has a field, and references {name}\"]\n-   | ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/session-derive-errors.rs:110:1\n@@ -72,53 +77,59 @@ error: The `#[label = ...]` attribute can only be applied to fields of type Span\n   --> $DIR/session-derive-errors.rs:138:5\n    |\n LL |     #[label = \"See here\"]\n-   |     ^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: `nonsense` is not a valid key for `#[suggestion(...)]`\n   --> $DIR/session-derive-errors.rs:163:18\n    |\n LL |     #[suggestion(nonsense = \"This is nonsense\")]\n-   |                  ^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `msg` is not a valid key for `#[suggestion(...)]`\n   --> $DIR/session-derive-errors.rs:171:18\n    |\n LL |     #[suggestion(msg = \"This is a suggestion\")]\n-   |                  ^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing suggestion message\n   --> $DIR/session-derive-errors.rs:179:7\n    |\n LL |     #[suggestion(code = \"This is suggested code\")]\n-   |       ^^^^^^^^^^\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: provide a suggestion message using #[suggestion(message = \"...\")]\n \n error: wrong field type for suggestion\n   --> $DIR/session-derive-errors.rs:194:5\n    |\n-LL |     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n-   |     ^\n+LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+LL | |\n+LL | |     suggestion: Applicability,\n+   | |_____________________________^\n    |\n    = help: #[suggestion(...)] should be applied to fields of type Span or (Span, Applicability)\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Span\n   --> $DIR/session-derive-errors.rs:209:5\n    |\n-LL |     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n-   |     ^\n+LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+LL | |\n+LL | |     suggestion: (Span, Span, Applicability),\n+   | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n   --> $DIR/session-derive-errors.rs:217:5\n    |\n-LL |     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n-   |     ^\n+LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+LL | |\n+LL | |     suggestion: (Applicability, Applicability, Span),\n+   | |____________________________________________________^\n \n error: invalid annotation list `#[label(...)]`\n   --> $DIR/session-derive-errors.rs:225:7\n    |\n LL |     #[label(\"wrong kind of annotation for label\")]\n-   |       ^^^^^\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}]}