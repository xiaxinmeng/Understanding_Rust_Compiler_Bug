{"sha": "1a614f856885eecff09f509268efa1e6ee7a6128", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNjE0Zjg1Njg4NWVlY2ZmMDlmNTA5MjY4ZWZhMWU2ZWU3YTYxMjg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-05T16:03:30Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-08T21:38:38Z"}, "message": "wrap calls to `lvalue_ty`", "tree": {"sha": "6d102200694869eb5d12077819059281560966c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d102200694869eb5d12077819059281560966c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a614f856885eecff09f509268efa1e6ee7a6128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a614f856885eecff09f509268efa1e6ee7a6128", "html_url": "https://github.com/rust-lang/rust/commit/1a614f856885eecff09f509268efa1e6ee7a6128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a614f856885eecff09f509268efa1e6ee7a6128/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c717a6fc21594569d9e64968cdcf2e88e372a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c717a6fc21594569d9e64968cdcf2e88e372a07", "html_url": "https://github.com/rust-lang/rust/commit/5c717a6fc21594569d9e64968cdcf2e88e372a07"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "8a33bbbeae5c58d9cebaf2a7a961e6426c8fd93b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a614f856885eecff09f509268efa1e6ee7a6128/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a614f856885eecff09f509268efa1e6ee7a6128/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=1a614f856885eecff09f509268efa1e6ee7a6128", "patch": "@@ -777,9 +777,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         }\n         let dest = match *dest {\n             mir::Lvalue::Temp(idx) => {\n-                let lvalue_ty = self.mir.lvalue_ty(bcx.tcx(), dest);\n-                let lvalue_ty = bcx.monomorphize(&lvalue_ty);\n-                let ret_ty = lvalue_ty.to_ty(bcx.tcx());\n+                let ret_ty = self.lvalue_ty(dest);\n                 match self.temps[idx as usize] {\n                     TempRef::Lvalue(dest) => dest,\n                     TempRef::Operand(None) => {"}, {"sha": "0c7eeafe86ee01891ac96c284630ed0038769fb6", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a614f856885eecff09f509268efa1e6ee7a6128/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a614f856885eecff09f509268efa1e6ee7a6128/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=1a614f856885eecff09f509268efa1e6ee7a6128", "patch": "@@ -99,8 +99,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             },\n             mir::Lvalue::Arg(index) => self.args[index as usize],\n             mir::Lvalue::Static(def_id) => {\n-                let const_ty = self.mir.lvalue_ty(tcx, lvalue);\n-                LvalueRef::new_sized(consts::get_static(ccx, def_id).val, const_ty)\n+                let const_ty = self.lvalue_ty(lvalue);\n+                LvalueRef::new_sized(consts::get_static(ccx, def_id).val,\n+                                     LvalueTy::from_ty(const_ty))\n             },\n             mir::Lvalue::ReturnPointer => {\n                 let llval = if !fcx.fn_ty.ret.is_ignore() {\n@@ -195,7 +196,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             ty::TyArray(..) => {\n                                 // must cast the lvalue pointer type to the new\n                                 // array type (*[%_; new_len]).\n-                                let base_ty = self.mir.lvalue_ty(tcx, lvalue).to_ty(tcx);\n+                                let base_ty = self.lvalue_ty(lvalue);\n                                 let llbasety = type_of::type_of(bcx.ccx(), base_ty).ptr_to();\n                                 let llbase = bcx.pointercast(llbase, llbasety);\n                                 (bcx.pointercast(llbase, llbasety), ptr::null_mut())\n@@ -236,27 +237,23 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 match self.temps[idx as usize] {\n                     TempRef::Lvalue(lvalue) => f(self, lvalue),\n                     TempRef::Operand(None) => {\n-                        let lvalue_ty = self.mir.lvalue_ty(bcx.tcx(), lvalue);\n-                        let lvalue_ty = bcx.monomorphize(&lvalue_ty);\n+                        let lvalue_ty = self.lvalue_ty(lvalue);\n                         let lvalue = LvalueRef::alloca(bcx,\n-                                                       lvalue_ty.to_ty(bcx.tcx()),\n+                                                       lvalue_ty,\n                                                        \"lvalue_temp\");\n                         let ret = f(self, lvalue);\n-                        let op = self.trans_load(bcx, lvalue.llval, lvalue_ty.to_ty(bcx.tcx()));\n+                        let op = self.trans_load(bcx, lvalue.llval, lvalue_ty);\n                         self.temps[idx as usize] = TempRef::Operand(Some(op));\n                         ret\n                     }\n                     TempRef::Operand(Some(_)) => {\n-                        let lvalue_ty = self.mir.lvalue_ty(bcx.tcx(), lvalue);\n-                        let lvalue_ty = bcx.monomorphize(&lvalue_ty);\n-\n                         // See comments in TempRef::new_operand as to why\n                         // we always have Some in a ZST TempRef::Operand.\n-                        let ty = lvalue_ty.to_ty(bcx.tcx());\n+                        let ty = self.lvalue_ty(lvalue);\n                         if common::type_is_zero_size(bcx.ccx(), ty) {\n                             // Pass an undef pointer as no stores can actually occur.\n                             let llptr = C_undef(type_of(bcx.ccx(), ty).ptr_to());\n-                            f(self, LvalueRef::new_sized(llptr, lvalue_ty))\n+                            f(self, LvalueRef::new_sized(llptr, LvalueTy::from_ty(ty)))\n                         } else {\n                             bug!(\"Lvalue temp already set\");\n                         }\n@@ -290,4 +287,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             llindex\n         }\n     }\n+\n+    pub fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n+        let tcx = self.fcx.ccx.tcx();\n+        let lvalue_ty = self.mir.lvalue_ty(tcx, lvalue);\n+        self.fcx.monomorphize(&lvalue_ty.to_ty(tcx))\n+    }\n }"}, {"sha": "63472d582330fdec3371e986d3f69ba456b40e41", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a614f856885eecff09f509268efa1e6ee7a6128/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a614f856885eecff09f509268efa1e6ee7a6128/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=1a614f856885eecff09f509268efa1e6ee7a6128", "patch": "@@ -40,8 +40,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 bcx\n                             }\n                             TempRef::Operand(Some(_)) => {\n-                                let ty = self.mir.lvalue_ty(bcx.tcx(), lvalue);\n-                                let ty = bcx.monomorphize(&ty.to_ty(bcx.tcx()));\n+                                let ty = self.lvalue_ty(lvalue);\n \n                                 if !common::type_is_zero_size(bcx.ccx(), ty) {\n                                     span_bug!(statement.source_info.span,"}]}