{"sha": "62aff3bbc75468bedf751b01a746e52886be760c", "node_id": "C_kwDOAAsO6NoAKDYyYWZmM2JiYzc1NDY4YmVkZjc1MWIwMWE3NDZlNTI4ODZiZTc2MGM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-23T14:46:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-23T14:47:00Z"}, "message": "tweak wording", "tree": {"sha": "e7fce50872f29f4aae006b9e67b430e93db8426b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7fce50872f29f4aae006b9e67b430e93db8426b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62aff3bbc75468bedf751b01a746e52886be760c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62aff3bbc75468bedf751b01a746e52886be760c", "html_url": "https://github.com/rust-lang/rust/commit/62aff3bbc75468bedf751b01a746e52886be760c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62aff3bbc75468bedf751b01a746e52886be760c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df81147b51f95441c8db74eda92b5c5fadecb20e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df81147b51f95441c8db74eda92b5c5fadecb20e", "html_url": "https://github.com/rust-lang/rust/commit/df81147b51f95441c8db74eda92b5c5fadecb20e"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "3f185dfae0241a88535146273a986b124b350467", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62aff3bbc75468bedf751b01a746e52886be760c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62aff3bbc75468bedf751b01a746e52886be760c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=62aff3bbc75468bedf751b01a746e52886be760c", "patch": "@@ -735,7 +735,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .must_apply_modulo_regions()\n         {\n             err.multipart_suggestion(\n-                \"you can rely on the implicit conversion that `?` does to transform the error type\",\n+                \"use `?` to coerce and return an appropriate `Err`, and wrap the resulting value \\\n+                 in `Ok` so the expression remains of type `Result`\",\n                 vec![\n                     (expr.span.shrink_to_lo(), \"Ok(\".to_string()),\n                     (expr.span.shrink_to_hi(), \"?)\".to_string()),"}, {"sha": "5992162341e6e25198d6361572f47847a70f5a9c", "filename": "tests/ui/type/type-check/coerce-result-return-value-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62aff3bbc75468bedf751b01a746e52886be760c/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62aff3bbc75468bedf751b01a746e52886be760c/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr?ref=62aff3bbc75468bedf751b01a746e52886be760c", "patch": "@@ -9,7 +9,7 @@ LL |         true => x,\n    |\n    = note: expected enum `Result<_, B>`\n               found enum `Result<_, A>`\n-help: you can rely on the implicit conversion that `?` does to transform the error type\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n    |\n LL |         true => Ok(x?),\n    |                 +++ ++\n@@ -25,7 +25,7 @@ LL |         true => return x,\n    |\n    = note: expected enum `Result<_, B>`\n               found enum `Result<_, A>`\n-help: you can rely on the implicit conversion that `?` does to transform the error type\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n    |\n LL |         true => return Ok(x?),\n    |                        +++ ++"}, {"sha": "550153520782c683848d4bdd0d7b2ad13d9089ec", "filename": "tests/ui/type/type-check/coerce-result-return-value.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62aff3bbc75468bedf751b01a746e52886be760c/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62aff3bbc75468bedf751b01a746e52886be760c/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr?ref=62aff3bbc75468bedf751b01a746e52886be760c", "patch": "@@ -8,7 +8,7 @@ LL |     x\n    |\n    = note: expected enum `Result<_, B>`\n               found enum `Result<_, A>`\n-help: you can rely on the implicit conversion that `?` does to transform the error type\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n    |\n LL |     Ok(x?)\n    |     +++ ++\n@@ -23,7 +23,7 @@ LL |     return x;\n    |\n    = note: expected enum `Result<_, B>`\n               found enum `Result<_, A>`\n-help: you can rely on the implicit conversion that `?` does to transform the error type\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n    |\n LL |     return Ok(x?);\n    |            +++ ++\n@@ -39,7 +39,7 @@ LL |         x\n    |\n    = note: expected enum `Result<_, B>`\n               found enum `Result<_, A>`\n-help: you can rely on the implicit conversion that `?` does to transform the error type\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n    |\n LL |         Ok(x?)\n    |         +++ ++\n@@ -55,7 +55,7 @@ LL |         x\n    |\n    = note: expected enum `Result<_, B>`\n               found enum `Result<_, A>`\n-help: you can rely on the implicit conversion that `?` does to transform the error type\n+help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\n    |\n LL |         Ok(x?)\n    |         +++ ++"}]}