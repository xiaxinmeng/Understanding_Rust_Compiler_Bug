{"sha": "19714385e06f5c9281455c5ce69368f05885cdc8", "node_id": "C_kwDOAAsO6NoAKDE5NzE0Mzg1ZTA2ZjVjOTI4MTQ1NWM1Y2U2OTM2OGYwNTg4NWNkYzg", "commit": {"author": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2022-09-11T23:36:19Z"}, "committer": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2023-02-15T01:54:25Z"}, "message": "Add `kernel-address` sanitizer support for freestanding targets", "tree": {"sha": "2d60e76a592df13258a96f8ddbd3fa4d3f345f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d60e76a592df13258a96f8ddbd3fa4d3f345f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19714385e06f5c9281455c5ce69368f05885cdc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19714385e06f5c9281455c5ce69368f05885cdc8", "html_url": "https://github.com/rust-lang/rust/commit/19714385e06f5c9281455c5ce69368f05885cdc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19714385e06f5c9281455c5ce69368f05885cdc8/comments", "author": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0416b1a6f6d5c42696494e1a3a33580fd3f669d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0416b1a6f6d5c42696494e1a3a33580fd3f669d8", "html_url": "https://github.com/rust-lang/rust/commit/0416b1a6f6d5c42696494e1a3a33580fd3f669d8"}], "stats": {"total": 154, "additions": 142, "deletions": 12}, "files": [{"sha": "651d644ebb63d85364fcce023dac184e363e7bc4", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -62,7 +62,7 @@ pub fn sanitize_attrs<'ll>(\n ) -> SmallVec<[&'ll Attribute; 4]> {\n     let mut attrs = SmallVec::new();\n     let enabled = cx.tcx.sess.opts.unstable_opts.sanitizer - no_sanitize;\n-    if enabled.contains(SanitizerSet::ADDRESS) {\n+    if enabled.contains(SanitizerSet::ADDRESS) || enabled.contains(SanitizerSet::KERNELADDRESS) {\n         attrs.push(llvm::AttributeKind::SanitizeAddress.create_attr(cx.llcx));\n     }\n     if enabled.contains(SanitizerSet::MEMORY) {"}, {"sha": "a939a2941111bfd695d4d7f5f6b0975451d3fa0d", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -446,6 +446,10 @@ pub(crate) unsafe fn llvm_optimize(\n             sanitize_thread: config.sanitizer.contains(SanitizerSet::THREAD),\n             sanitize_hwaddress: config.sanitizer.contains(SanitizerSet::HWADDRESS),\n             sanitize_hwaddress_recover: config.sanitizer_recover.contains(SanitizerSet::HWADDRESS),\n+            sanitize_kernel_address: config.sanitizer.contains(SanitizerSet::KERNELADDRESS),\n+            sanitize_kernel_address_recover: config\n+                .sanitizer_recover\n+                .contains(SanitizerSet::KERNELADDRESS),\n         })\n     } else {\n         None"}, {"sha": "7aab666fc5e8c8ae09c6e5b19a9fb70eabb5bc96", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -482,6 +482,8 @@ pub struct SanitizerOptions {\n     pub sanitize_thread: bool,\n     pub sanitize_hwaddress: bool,\n     pub sanitize_hwaddress_recover: bool,\n+    pub sanitize_kernel_address: bool,\n+    pub sanitize_kernel_address_recover: bool,\n }\n \n /// LLVMRelocMode"}, {"sha": "7d5c0048626c9dadc7308059409382c2813d79a5", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -295,7 +295,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             if let Some(list) = attr.meta_item_list() {\n                 for item in list.iter() {\n                     if item.has_name(sym::address) {\n-                        codegen_fn_attrs.no_sanitize |= SanitizerSet::ADDRESS;\n+                        codegen_fn_attrs.no_sanitize |=\n+                            SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS;\n                     } else if item.has_name(sym::cfi) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n                     } else if item.has_name(sym::kcfi) {"}, {"sha": "0a42265a6baafdaeed02d8d9c3e71ceb138964c1", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -594,6 +594,8 @@ struct LLVMRustSanitizerOptions {\n   bool SanitizeThread;\n   bool SanitizeHWAddress;\n   bool SanitizeHWAddressRecover;\n+  bool SanitizeKernelAddress;\n+  bool SanitizeKernelAddressRecover;\n };\n \n extern \"C\" LLVMRustResult\n@@ -765,15 +767,17 @@ LLVMRustOptimize(\n       );\n     }\n \n-    if (SanitizerOptions->SanitizeAddress) {\n+    if (SanitizerOptions->SanitizeAddress || SanitizerOptions->SanitizeKernelAddress) {\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n+          auto CompileKernel = SanitizerOptions->SanitizeKernelAddress;\n #if LLVM_VERSION_LT(15, 0)\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n #endif\n           AddressSanitizerOptions opts = AddressSanitizerOptions{\n-            /*CompileKernel=*/false,\n-            SanitizerOptions->SanitizeAddressRecover,\n+            CompileKernel,\n+            SanitizerOptions->SanitizeAddressRecover\n+              || SanitizerOptions->SanitizeKernelAddressRecover,\n             /*UseAfterScope=*/true,\n             AsanDetectStackUseAfterReturnMode::Runtime,\n           };"}, {"sha": "c687248285eeb5d69b17809969fd6749f19f67f1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -1022,7 +1022,13 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let panic_strategy = sess.panic_strategy();\n     ret.insert((sym::panic, Some(panic_strategy.desc_symbol())));\n \n-    for s in sess.opts.unstable_opts.sanitizer {\n+    for mut s in sess.opts.unstable_opts.sanitizer {\n+        // KASAN should use the same attribute name as ASAN, as it's still ASAN\n+        // under the hood\n+        if s == SanitizerSet::KERNELADDRESS {\n+            s = SanitizerSet::ADDRESS;\n+        }\n+\n         let symbol = Symbol::intern(&s.to_string());\n         ret.insert((sym::sanitize, Some(symbol)));\n     }"}, {"sha": "dd61a30d67a605513e57030788fee84fb5070e6c", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -370,7 +370,7 @@ mod desc {\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_oom_strategy: &str = \"either `panic` or `abort`\";\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `kcfi`, `leak`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\";\n+    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `kcfi`, `kernel-address`, `leak`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -684,6 +684,7 @@ mod parse {\n                     \"address\" => SanitizerSet::ADDRESS,\n                     \"cfi\" => SanitizerSet::CFI,\n                     \"kcfi\" => SanitizerSet::KCFI,\n+                    \"kernel-address\" => SanitizerSet::KERNELADDRESS,\n                     \"leak\" => SanitizerSet::LEAK,\n                     \"memory\" => SanitizerSet::MEMORY,\n                     \"memtag\" => SanitizerSet::MEMTAG,"}, {"sha": "3dc09854b3cbca5e8b995d536cd6f218385c866f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -954,10 +954,10 @@ impl Session {\n     /// Checks if LLVM lifetime markers should be emitted.\n     pub fn emit_lifetime_markers(&self) -> bool {\n         self.opts.optimize != config::OptLevel::No\n-        // AddressSanitizer uses lifetimes to detect use after scope bugs.\n+        // AddressSanitizer and KernelAddressSanitizer uses lifetimes to detect use after scope bugs.\n         // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n         // HWAddressSanitizer will use lifetimes to detect use after scope bugs in the future.\n-        || self.opts.unstable_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::HWADDRESS)\n+        || self.opts.unstable_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS | SanitizerSet::MEMORY | SanitizerSet::HWADDRESS)\n     }\n \n     pub fn is_proc_macro_attr(&self, attr: &Attribute) -> bool {"}, {"sha": "be27302f7f52cc14e7f13ed82e92e33d58e83302", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> Target {\n         linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+v8a,+strict-align,+neon,+fp-armv8\".into(),\n-        supported_sanitizers: SanitizerSet::KCFI,\n+        supported_sanitizers: SanitizerSet::KCFI | SanitizerSet::KERNELADDRESS,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(128),"}, {"sha": "556f168a0b172c40c7f07637338c58852e540a41", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -812,6 +812,7 @@ bitflags::bitflags! {\n         const MEMTAG  = 1 << 6;\n         const SHADOWCALLSTACK = 1 << 7;\n         const KCFI    = 1 << 8;\n+        const KERNELADDRESS = 1 << 9;\n     }\n }\n \n@@ -824,6 +825,7 @@ impl SanitizerSet {\n             SanitizerSet::ADDRESS => \"address\",\n             SanitizerSet::CFI => \"cfi\",\n             SanitizerSet::KCFI => \"kcfi\",\n+            SanitizerSet::KERNELADDRESS => \"kernel-address\",\n             SanitizerSet::LEAK => \"leak\",\n             SanitizerSet::MEMORY => \"memory\",\n             SanitizerSet::MEMTAG => \"memtag\",\n@@ -866,6 +868,7 @@ impl IntoIterator for SanitizerSet {\n             SanitizerSet::SHADOWCALLSTACK,\n             SanitizerSet::THREAD,\n             SanitizerSet::HWADDRESS,\n+            SanitizerSet::KERNELADDRESS,\n         ]\n         .iter()\n         .copied()\n@@ -2339,6 +2342,7 @@ impl Target {\n                                 Some(\"address\") => SanitizerSet::ADDRESS,\n                                 Some(\"cfi\") => SanitizerSet::CFI,\n                                 Some(\"kcfi\") => SanitizerSet::KCFI,\n+                                Some(\"kernel-address\") => SanitizerSet::KERNELADDRESS,\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n                                 Some(\"memory\") => SanitizerSet::MEMORY,\n                                 Some(\"memtag\") => SanitizerSet::MEMTAG,"}, {"sha": "ab3c14e3fe73dbdee9d0616629bca38a7564dd7e", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -1,6 +1,8 @@\n use crate::spec::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n use crate::spec::{RelocModel, Target, TargetOptions};\n \n+use super::SanitizerSet;\n+\n pub fn target() -> Target {\n     Target {\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n@@ -20,6 +22,7 @@ pub fn target() -> Target {\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             eh_frame_header: false,\n+            supported_sanitizers: SanitizerSet::KERNELADDRESS,\n             ..Default::default()\n         },\n     }"}, {"sha": "0f1821c9985b0f32d1ce7496c7e5971f4ac87f99", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n-use crate::spec::{RelocModel, Target, TargetOptions};\n+use crate::spec::{RelocModel, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -19,6 +19,7 @@ pub fn target() -> Target {\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             eh_frame_header: false,\n+            supported_sanitizers: SanitizerSet::KERNELADDRESS,\n             ..Default::default()\n         },\n     }"}, {"sha": "43c5ce78ce34e0c1982a9f30655c0105726e5273", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n         features:\n             \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n                 .into(),\n-        supported_sanitizers: SanitizerSet::KCFI,\n+        supported_sanitizers: SanitizerSet::KCFI | SanitizerSet::KERNELADDRESS,\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         code_model: Some(CodeModel::Kernel),"}, {"sha": "262cef3454ad31fba475d5f55556d22caff7e01c", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -531,6 +531,24 @@ LLVM KCFI is supported on the following targets:\n See the [Clang KernelControlFlowIntegrity documentation][clang-kcfi] for more\n details.\n \n+# KernelAddressSanitizer\n+\n+KernelAddressSanitizer (KASAN) is a freestanding version of AddressSanitizer\n+which is suitable for detecting memory errors in programs which do not have a\n+runtime environment, such as operating system kernels. KernelAddressSanitizer\n+requires manual implementation of the underlying functions used for tracking\n+KernelAddressSanitizer state.\n+\n+KernelAddressSanitizer is supported on the following targets:\n+\n+* `aarch64-unknown-none`\n+* `riscv64gc-unknown-none-elf`\n+* `riscv64imac-unknown-none-elf`\n+* `x86_64-unknown-none`\n+\n+See the [Linux Kernel's KernelAddressSanitizer documentation][linux-kasan] for\n+more details.\n+\n # LeakSanitizer\n \n LeakSanitizer is run-time memory leak detector.\n@@ -714,6 +732,7 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n * [AddressSanitizer in Clang][clang-asan]\n * [ControlFlowIntegrity in Clang][clang-cfi]\n * [HWAddressSanitizer in Clang][clang-hwasan]\n+* [Linux Kernel's KernelAddressSanitizer documentation][linux-kasan]\n * [LeakSanitizer in Clang][clang-lsan]\n * [MemorySanitizer in Clang][clang-msan]\n * [MemTagSanitizer in LLVM][llvm-memtag]\n@@ -727,4 +746,5 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n [clang-scs]: https://clang.llvm.org/docs/ShadowCallStack.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html\n+[linux-kasan]: https://www.kernel.org/doc/html/latest/dev-tools/kasan.html\n [llvm-memtag]: https://llvm.org/docs/MemTagSanitizer.html"}, {"sha": "d9b39927ca4bc8fbfcb8efd3a61770d85cb65ccf", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -935,6 +935,7 @@ pub fn make_test_description<R: Read>(\n     let has_asan = util::ASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_cfi = util::CFI_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_kcfi = util::KCFI_SUPPORTED_TARGETS.contains(&&*config.target);\n+    let has_kasan = util::KASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n@@ -1010,6 +1011,7 @@ pub fn make_test_description<R: Read>(\n         reason!(!has_asan && config.parse_name_directive(ln, \"needs-sanitizer-address\"));\n         reason!(!has_cfi && config.parse_name_directive(ln, \"needs-sanitizer-cfi\"));\n         reason!(!has_kcfi && config.parse_name_directive(ln, \"needs-sanitizer-kcfi\"));\n+        reason!(!has_kasan && config.parse_name_directive(ln, \"needs-sanitizer-kasan\"));\n         reason!(!has_lsan && config.parse_name_directive(ln, \"needs-sanitizer-leak\"));\n         reason!(!has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\"));\n         reason!(!has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\"));"}, {"sha": "0ce9f2622e1131070af4a446756d3295fe798115", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -45,6 +45,13 @@ pub const CFI_SUPPORTED_TARGETS: &[&str] = &[\n \n pub const KCFI_SUPPORTED_TARGETS: &[&str] = &[\"aarch64-linux-none\", \"x86_64-linux-none\"];\n \n+pub const KASAN_SUPPORTED_TARGETS: &[&str] = &[\n+    \"aarch64-unknown-none\",\n+    \"riscv64gc-unknown-none-elf\",\n+    \"riscv64imac-unknown-none-elf\",\n+    \"x86_64-unknown-none\",\n+];\n+\n pub const LSAN_SUPPORTED_TARGETS: &[&str] = &[\n     // FIXME: currently broken, see #88132\n     // \"aarch64-apple-darwin\","}, {"sha": "d6e3f2719df7076989dda05b2b783c7d4f09cb1e", "filename": "tests/codegen/sanitizer-kasan-emits-instrumentation.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/tests%2Fcodegen%2Fsanitizer-kasan-emits-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/tests%2Fcodegen%2Fsanitizer-kasan-emits-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kasan-emits-instrumentation.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -0,0 +1,47 @@\n+// Verifies that `-Zsanitizer=kernel-address` emits sanitizer instrumentation.\n+\n+// compile-flags: -Zsanitizer=kernel-address\n+// revisions: aarch64 riscv64imac riscv64gc x86_64\n+//[aarch64] compile-flags: --target aarch64-unknown-none\n+//[aarch64] needs-llvm-components: aarch64\n+//[riscv64imac] compile-flags: --target riscv64imac-unknown-none-elf\n+//[riscv64imac] needs-llvm-components: riscv\n+//[riscv64imac] min-llvm-version: 16\n+//[riscv64gc] compile-flags: --target riscv64gc-unknown-none-elf\n+//[riscv64gc] needs-llvm-components: riscv\n+//[riscv64gc] min-llvm-version: 16\n+//[x86_64] compile-flags: --target x86_64-unknown-none\n+//[x86_64] needs-llvm-components: x86\n+\n+#![crate_type = \"rlib\"]\n+#![feature(no_core, no_sanitize, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+impl Copy for u8 {}\n+\n+// CHECK-LABEL: ; sanitizer_kasan_emits_instrumentation::unsanitized\n+// CHECK-NEXT:  ; Function Attrs:\n+// CHECK-NOT:   sanitize_address\n+// CHECK:       start:\n+// CHECK-NOT:   call void @__asan_report_load\n+// CHECK:       }\n+#[no_sanitize(address)]\n+pub fn unsanitized(b: &mut u8) -> u8 {\n+    *b\n+}\n+\n+// CHECK-LABEL: ; sanitizer_kasan_emits_instrumentation::sanitized\n+// CHECK-NEXT:  ; Function Attrs:\n+// CHECK:       sanitize_address\n+// CHECK:       start:\n+// CHECK:       call void @__asan_report_load\n+// CHECK:       }\n+pub fn sanitized(b: &mut u8) -> u8 {\n+    *b\n+}"}, {"sha": "d721011f3ee512bd9e836d831a20626dcce7e88f", "filename": "tests/ui/sanitize/cfg-kasan.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19714385e06f5c9281455c5ce69368f05885cdc8/tests%2Fui%2Fsanitize%2Fcfg-kasan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19714385e06f5c9281455c5ce69368f05885cdc8/tests%2Fui%2Fsanitize%2Fcfg-kasan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fcfg-kasan.rs?ref=19714385e06f5c9281455c5ce69368f05885cdc8", "patch": "@@ -0,0 +1,28 @@\n+// Verifies that when compiling with -Zsanitizer=kernel-address,\n+// the `#[cfg(sanitize = \"address\")]` attribute is configured.\n+\n+// check-pass\n+// compile-flags: -Zsanitizer=kernel-address --cfg kernel_address\n+// revisions: aarch64 riscv64imac riscv64gc x86_64\n+//[aarch64] compile-flags: --target aarch64-unknown-none\n+//[aarch64] needs-llvm-components: aarch64\n+//[riscv64imac] compile-flags: --target riscv64imac-unknown-none-elf\n+//[riscv64imac] needs-llvm-components: riscv\n+//[riscv64imac] min-llvm-version: 16\n+//[riscv64gc] compile-flags: --target riscv64gc-unknown-none-elf\n+//[riscv64gc] needs-llvm-components: riscv\n+//[riscv64gc] min-llvm-version: 16\n+//[x86_64] compile-flags: --target x86_64-unknown-none\n+//[x86_64] needs-llvm-components: x86\n+\n+#![crate_type = \"rlib\"]\n+#![feature(cfg_sanitize, no_core, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+const _: fn() -> () = main;\n+\n+#[cfg(all(sanitize = \"address\", kernel_address))]\n+fn main() {}"}]}