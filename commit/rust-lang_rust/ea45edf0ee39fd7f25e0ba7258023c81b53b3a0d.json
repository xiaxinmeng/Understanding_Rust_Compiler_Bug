{"sha": "ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDVlZGYwZWUzOWZkN2YyNWUwYmE3MjU4MDIzYzgxYjUzYjNhMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-08T17:40:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-08T17:40:31Z"}, "message": "Auto merge of #35745 - jroesch:soundness-fix-29859, r=nikomatsakis\n\nFix soundness bug described in #29859\n\nThis is an attempt at fixing the problems described in #29859 based on an IRC conversation between @nikomatsakis and I today. I'm waiting on a full build to come back, otherwise both tests trigger the correct error.", "tree": {"sha": "d1f78042f79cf9ec0b40a85e28555efa0518215c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f78042f79cf9ec0b40a85e28555efa0518215c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "html_url": "https://github.com/rust-lang/rust/commit/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c615b215331d2715cc2eed31b98f41393242f39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c615b215331d2715cc2eed31b98f41393242f39d", "html_url": "https://github.com/rust-lang/rust/commit/c615b215331d2715cc2eed31b98f41393242f39d"}, {"sha": "a25428269d8cac3ef00162a19dcbb5d5d5c47192", "url": "https://api.github.com/repos/rust-lang/rust/commits/a25428269d8cac3ef00162a19dcbb5d5d5c47192", "html_url": "https://github.com/rust-lang/rust/commit/a25428269d8cac3ef00162a19dcbb5d5d5c47192"}], "stats": {"total": 304, "additions": 151, "deletions": 153}, "files": [{"sha": "bc5cb68995b2f72cec66cffeba40dd97dcf8ff05", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -256,16 +256,84 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         });\n     }\n \n+    fn check_auto_trait(&mut self,\n+                        trait_def_id: DefId,\n+                        items: &[hir::TraitItem],\n+                        span: Span)\n+    {\n+        // We want to ensure:\n+        //\n+        // 1) that there are no items contained within\n+        // the trait defintion\n+        //\n+        // 2) that the definition doesn't violate the no-super trait rule\n+        // for auto traits.\n+        //\n+        // 3) that the trait definition does not have any type parameters\n+\n+        let predicates = self.tcx().lookup_predicates(trait_def_id);\n+\n+        // We must exclude the Self : Trait predicate contained by all\n+        // traits.\n+        let has_predicates =\n+            predicates.predicates.iter().any(|predicate| {\n+                match predicate {\n+                    &ty::Predicate::Trait(ref poly_trait_ref) => {\n+                        let self_ty = poly_trait_ref.0.self_ty();\n+                        !(self_ty.is_self() && poly_trait_ref.def_id() == trait_def_id)\n+                    },\n+                    _ => true,\n+                }\n+            });\n+\n+        let trait_def = self.tcx().lookup_trait_def(trait_def_id);\n+\n+        let has_ty_params =\n+            trait_def.generics\n+                      .types\n+                      .len() > 1;\n+\n+        // We use an if-else here, since the generics will also trigger\n+        // an extraneous error message when we find predicates like\n+        // `T : Sized` for a trait like: `trait Magic<T>`.\n+        //\n+        // We also put the check on the number of items here,\n+        // as it seems confusing to report an error about\n+        // extraneous predicates created by things like\n+        // an associated type inside the trait.\n+        let mut err = None;\n+        if !items.is_empty() {\n+            error_380(self.ccx, span);\n+        } else if has_ty_params {\n+            err = Some(struct_span_err!(self.tcx().sess, span, E0567,\n+                \"traits with auto impls (`e.g. impl \\\n+                    Trait for ..`) can not have type parameters\"));\n+        } else if has_predicates {\n+            err = Some(struct_span_err!(self.tcx().sess, span, E0568,\n+                \"traits with auto impls (`e.g. impl \\\n+                    Trait for ..`) cannot have predicates\"));\n+        }\n+\n+        // Finally if either of the above conditions apply we should add a note\n+        // indicating that this error is the result of a recent soundness fix.\n+        match err {\n+            None => {},\n+            Some(mut e) => {\n+                e.note(\"the new auto trait rules are the result of a \\\n+                          recent soundness fix; see #29859 for more details\");\n+                e.emit();\n+            }\n+        }\n+    }\n+\n     fn check_trait(&mut self,\n                    item: &hir::Item,\n                    items: &[hir::TraitItem])\n     {\n         let trait_def_id = self.tcx().map.local_def_id(item.id);\n \n         if self.tcx().trait_has_default_impl(trait_def_id) {\n-            if !items.is_empty() {\n-                error_380(self.ccx, item.span);\n-            }\n+            self.check_auto_trait(trait_def_id, items, item.span);\n         }\n \n         self.for_item(item).with_fcx(|fcx, this| {\n@@ -626,7 +694,7 @@ fn error_192(ccx: &CrateCtxt, span: Span) {\n \n fn error_380(ccx: &CrateCtxt, span: Span) {\n     span_err!(ccx.tcx.sess, span, E0380,\n-              \"traits with default impls (`e.g. unsafe impl \\\n+              \"traits with default impls (`e.g. impl \\\n                Trait for ..`) must have no methods or associated items\")\n }\n "}, {"sha": "e5c901f223ffb5a061cd21642bdb1d37d5277c59", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -4072,4 +4072,6 @@ register_diagnostics! {\n     E0563, // cannot determine a type for this `impl Trait`: {}\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n+    E0567, // auto traits can not have type parameters\n+    E0568, // auto-traits can not have predicates,\n }"}, {"sha": "9d20c17674bc374100192f24f3bc31b9750254c2", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -13,7 +13,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe trait Trait {\n-//~^ error: traits with default impls (`e.g. unsafe impl Trait for ..`) must have no methods or associated items\n+//~^ ERROR E0380\n     type Output;\n }\n "}, {"sha": "2e8cba87be5151cc251e32cdf07a2cd2d76aea57", "filename": "src/test/compile-fail/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -13,7 +13,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe trait Trait {\n-//~^ error: traits with default impls (`e.g. unsafe impl Trait for ..`) must have no methods or associated items\n+//~^ ERROR E0380\n     fn method(&self) {\n         println!(\"Hello\");\n     }"}, {"sha": "cdf4b405fd83e7bd398c6a55eb6082eed820f1e3", "filename": "src/test/compile-fail/traits-inductive-overflow-auto-normal-auto.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs?ref=c615b215331d2715cc2eed31b98f41393242f39d", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test for a potential corner case in current impl where you have an\n-// auto trait (Magic1) that depends on a normal trait (Magic2) which\n-// in turn depends on the auto trait (Magic1). This was incorrectly\n-// being considered coinductive, but because of the normal trait\n-// interfering, it should not be.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait Magic1: Magic2 { }\n-impl Magic1 for .. {}\n-\n-trait Magic2 { }\n-impl<T: Magic1> Magic2 for T { }\n-\n-fn is_magic1<T: Magic1>() { }\n-\n-#[derive(Debug)]\n-struct NoClone;\n-\n-fn main() {\n-    is_magic1::<NoClone>(); //~ ERROR E0275\n-}"}, {"sha": "fe0e583b20a3896684bd3010b89e545303d954ca", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -14,7 +14,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {}\n+trait Magic: Copy {} //~ ERROR E0568\n impl Magic for .. {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n@@ -23,6 +23,6 @@ fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n struct NoClone;\n \n fn main() {\n-    let (a, b) = copy(NoClone); //~ ERROR E0277\n+    let (a, b) = copy(NoClone);\n     println!(\"{:?} {:?}\", a, b);\n }"}, {"sha": "f6678ac7c2d8ced8825ee3ee74fb4673c667bc11", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits-2.rs", "status": "renamed", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,20 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n #![feature(optin_builtin_traits)]\n \n-trait MyTrait : 'static {}\n-\n-impl MyTrait for .. {}\n+trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n+impl Magic for .. {}\n+impl<T:Magic> Magic for T {}\n \n-fn foo<T:MyTrait>() { }\n+fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n \n-fn bar<'a>() {\n-    foo::<&'a ()>(); //~ ERROR does not fulfill the required lifetime\n-}\n+#[derive(Debug)]\n+struct NoClone;\n \n fn main() {\n+    let (a, b) = copy(NoClone);\n+    println!(\"{:?} {:?}\", a, b);\n }", "previous_filename": "src/test/compile-fail/typeck-default-trait-impl-superregion.rs"}, {"sha": "9497dfb39d7d0b9e792da770afed4de733ef4711", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test is for #29859, we need to ensure auto traits,\n+// (also known previously as default traits), do not have\n+// supertraits. Since the compiler synthesizes these\n+// instances on demand, we are essentially enabling\n+// users to write axioms if we view trait selection,\n+// as a proof system.\n+//\n+// For example the below test allows us to add the rule:\n+//  forall (T : Type), T : Copy\n+//\n+// Providing a copy instance for *any* type, which\n+// is most definitely unsound. Imagine copying a\n+// type that contains a mutable reference, enabling\n+// mutable aliasing.\n+//\n+// You can imagine an even more dangerous test,\n+// which currently compiles on nightly.\n+//\n+// fn main() {\n+//    let mut i = 10;\n+//    let (a, b) = copy(&mut i);\n+//    println!(\"{:?} {:?}\", a, b);\n+// }\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait Magic: Copy {} //~ ERROR E0568\n+impl Magic for .. {}\n+impl<T:Magic> Magic for T {}\n+\n+fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+\n+#[derive(Debug)]\n+struct NoClone;\n+\n+fn main() {\n+    let (a, b) = copy(NoClone);\n+    println!(\"{:?} {:?}\", a, b);\n+}"}, {"sha": "5a852c54869a56145ea3bd7d642674c7a0046289", "filename": "src/test/compile-fail/typeck-auto-trait-no-typeparams.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait Magic<T> {} //~ ERROR E0567\n+impl Magic<isize> for .. {}"}, {"sha": "0b071a9acd0921cedcbde0626bd524e65b6c435f", "filename": "src/test/compile-fail/typeck-default-trait-impl-supertrait.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs?ref=c615b215331d2715cc2eed31b98f41393242f39d", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait NotImplemented { }\n-\n-trait MyTrait : NotImplemented {}\n-\n-impl MyTrait for .. {}\n-\n-fn foo<T:MyTrait>() { bar::<T>() }\n-\n-fn bar<T:NotImplemented>() { }\n-\n-fn main() {\n-    foo::<i32>(); //~ ERROR `i32: NotImplemented` is not satisfied\n-    bar::<i64>(); //~ ERROR `i64: NotImplemented` is not satisfied\n-}"}, {"sha": "3085f45a83dd1f3d393376232ec540dbb445ea72", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause-2.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs?ref=c615b215331d2715cc2eed31b98f41393242f39d", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-\n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait NotImplemented { }\n-\n-trait MyTrait: Sized\n-    where Option<Self> : NotImplemented\n-{}\n-\n-impl NotImplemented for i32 {}\n-\n-impl MyTrait for .. {}\n-\n-fn bar<T:NotImplemented>() { }\n-\n-fn test() {\n-    bar::<Option<i32>>();\n-    //~^ ERROR `std::option::Option<i32>: NotImplemented` is not satisfied\n-}\n-\n-fn main() {\n-}"}, {"sha": "47e87c09d12b1c7e1f908ca155a5016c195da1f0", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615b215331d2715cc2eed31b98f41393242f39d/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=c615b215331d2715cc2eed31b98f41393242f39d", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-\n-// Test that when a `..` impl applies, we also check that any\n-// supertrait conditions are met.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait NotImplemented { }\n-\n-trait MyTrait: Sized\n-    where Option<Self> : NotImplemented\n-{}\n-\n-impl NotImplemented for i32 {}\n-\n-impl MyTrait for .. {}\n-\n-fn foo<T:MyTrait>() {\n-    //~^ ERROR `std::option::Option<T>: NotImplemented` is not satisfied\n-    // This should probably typecheck. This is #20671.\n-}\n-\n-fn bar<T:NotImplemented>() { }\n-\n-fn main() {\n-}"}, {"sha": "52bd386ba595bb9ae064a21e61805613e8675bf6", "filename": "src/test/rustdoc/auxiliary/rustdoc-default-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs?ref=ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "patch": "@@ -14,7 +14,7 @@\n pub mod bar {\n     use std::marker;\n \n-    pub trait Bar: 'static {}\n+    pub trait Bar {}\n \n     impl Bar for .. {}\n "}]}