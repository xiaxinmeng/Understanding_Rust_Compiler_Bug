{"sha": "919673ea03e2c376931161a9301a9d6f089f8984", "node_id": "C_kwDOAAsO6NoAKDkxOTY3M2VhMDNlMmMzNzY5MzExNjFhOTMwMWE5ZDZmMDg5Zjg5ODQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-25T10:45:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-25T11:42:29Z"}, "message": "rustc_middle: Rearrange resolver outputs structures slightly", "tree": {"sha": "74ccfc1ff88d9bf34af35dbb644bc7c4d9adf9cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74ccfc1ff88d9bf34af35dbb644bc7c4d9adf9cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/919673ea03e2c376931161a9301a9d6f089f8984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/919673ea03e2c376931161a9301a9d6f089f8984", "html_url": "https://github.com/rust-lang/rust/commit/919673ea03e2c376931161a9301a9d6f089f8984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/919673ea03e2c376931161a9301a9d6f089f8984/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31d754a1dfba4d091a05589459708f286d5a231e", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d754a1dfba4d091a05589459708f286d5a231e", "html_url": "https://github.com/rust-lang/rust/commit/31d754a1dfba4d091a05589459708f286d5a231e"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "9d2325e8265e7b2a71d01228f9f872e6892c58e5", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=919673ea03e2c376931161a9301a9d6f089f8984", "patch": "@@ -16,7 +16,6 @@ use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::StableCrateId;\n-use rustc_hir::definitions::Definitions;\n use rustc_lint::{BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n@@ -30,7 +29,7 @@ use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, MetadataLoaderDyn};\n+use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -135,10 +134,7 @@ mod boxed_resolver {\n             f((&mut *resolver).as_mut().unwrap())\n         }\n \n-        pub fn to_resolver_outputs(\n-            resolver: Rc<RefCell<BoxedResolver>>,\n-        ) -> (Definitions, Box<CrateStoreDyn>, ty::ResolverOutputs, ty::ResolverAstLowering)\n-        {\n+        pub fn to_resolver_outputs(resolver: Rc<RefCell<BoxedResolver>>) -> ty::ResolverOutputs {\n             match Rc::try_unwrap(resolver) {\n                 Ok(resolver) => {\n                     let mut resolver = resolver.into_inner();\n@@ -788,8 +784,7 @@ pub fn create_global_ctxt<'tcx>(\n     // incr. comp. yet.\n     dep_graph.assert_ignored();\n \n-    let (definitions, cstore, resolver_outputs, resolver_for_lowering) =\n-        BoxedResolver::to_resolver_outputs(resolver);\n+    let resolver_outputs = BoxedResolver::to_resolver_outputs(resolver);\n \n     let sess = &compiler.session();\n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n@@ -816,10 +811,7 @@ pub fn create_global_ctxt<'tcx>(\n                 lint_store,\n                 arena,\n                 hir_arena,\n-                definitions,\n-                cstore,\n                 resolver_outputs,\n-                resolver_for_lowering,\n                 krate,\n                 dep_graph,\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),"}, {"sha": "67c85ef0d3b503f1ecd0b2f21dfae40306868bd1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=919673ea03e2c376931161a9301a9d6f089f8984", "patch": "@@ -23,7 +23,7 @@ rustc_queries! {\n         desc { \"triggering a delay span bug\" }\n     }\n \n-    query resolutions(_: ()) -> &'tcx ty::ResolverOutputs {\n+    query resolutions(_: ()) -> &'tcx ty::ResolverGlobalCtxt {\n         eval_always\n         no_hash\n         desc { \"getting the resolver outputs\" }"}, {"sha": "94e3f3b63c813aba6dcea8525bc83dc9a9bfa64d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=919673ea03e2c376931161a9301a9d6f089f8984", "patch": "@@ -79,7 +79,7 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n-use super::{ImplPolarity, RvalueScopes};\n+use super::{ImplPolarity, ResolverOutputs, RvalueScopes};\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n@@ -1067,10 +1067,9 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     definitions: RwLock<Definitions>,\n-    cstore: Box<CrateStoreDyn>,\n \n     /// Output of the resolver.\n-    pub(crate) untracked_resolutions: ty::ResolverOutputs,\n+    pub(crate) untracked_resolutions: ty::ResolverGlobalCtxt,\n     untracked_resolver_for_lowering: Steal<ty::ResolverAstLowering>,\n     /// The entire crate as AST. This field serves as the input for the hir_crate query,\n     /// which lowers it from AST to HIR. It must not be read or used by anything else.\n@@ -1233,10 +1232,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n-        definitions: Definitions,\n-        cstore: Box<CrateStoreDyn>,\n-        untracked_resolutions: ty::ResolverOutputs,\n-        untracked_resolver_for_lowering: ty::ResolverAstLowering,\n+        resolver_outputs: ResolverOutputs,\n         krate: Lrc<ast::Crate>,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n@@ -1245,6 +1241,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         crate_name: &str,\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n+        let ResolverOutputs {\n+            definitions,\n+            global_ctxt: untracked_resolutions,\n+            ast_lowering: untracked_resolver_for_lowering,\n+        } = resolver_outputs;\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n             s.emit_fatal(err);\n         });\n@@ -1253,7 +1254,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             &interners,\n             s,\n             &definitions,\n-            &*cstore,\n+            &*untracked_resolutions.cstore,\n             // This is only used to create a stable hashing context.\n             &untracked_resolutions.source_span,\n         );\n@@ -1268,7 +1269,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             interners,\n             dep_graph,\n             definitions: RwLock::new(definitions),\n-            cstore,\n             prof: s.prof.clone(),\n             types: common_types,\n             lifetimes: common_lifetimes,\n@@ -1369,7 +1369,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_key(id)\n         } else {\n-            self.cstore.def_key(id)\n+            self.untracked_resolutions.cstore.def_key(id)\n         }\n     }\n \n@@ -1383,7 +1383,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_path(id)\n         } else {\n-            self.cstore.def_path(id)\n+            self.untracked_resolutions.cstore.def_path(id)\n         }\n     }\n \n@@ -1393,7 +1393,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(def_id) = def_id.as_local() {\n             self.definitions_untracked().def_path_hash(def_id)\n         } else {\n-            self.cstore.def_path_hash(def_id)\n+            self.untracked_resolutions.cstore.def_path_hash(def_id)\n         }\n     }\n \n@@ -1402,7 +1402,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if crate_num == LOCAL_CRATE {\n             self.sess.local_stable_crate_id()\n         } else {\n-            self.cstore.stable_crate_id(crate_num)\n+            self.untracked_resolutions.cstore.stable_crate_id(crate_num)\n         }\n     }\n \n@@ -1413,7 +1413,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if stable_crate_id == self.sess.local_stable_crate_id() {\n             LOCAL_CRATE\n         } else {\n-            self.cstore.stable_crate_id_to_crate_num(stable_crate_id)\n+            self.untracked_resolutions.cstore.stable_crate_id_to_crate_num(stable_crate_id)\n         }\n     }\n \n@@ -1432,8 +1432,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         } else {\n             // If this is a DefPathHash from an upstream crate, let the CrateStore map\n             // it to a DefId.\n-            let cnum = self.cstore.stable_crate_id_to_crate_num(stable_crate_id);\n-            self.cstore.def_path_hash_to_def_id(cnum, hash)\n+            let cstore = &*self.untracked_resolutions.cstore;\n+            let cnum = cstore.stable_crate_id_to_crate_num(stable_crate_id);\n+            cstore.def_path_hash_to_def_id(cnum, hash)\n         }\n     }\n \n@@ -1445,7 +1446,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let (crate_name, stable_crate_id) = if def_id.is_local() {\n             (self.crate_name, self.sess.local_stable_crate_id())\n         } else {\n-            let cstore = &self.cstore;\n+            let cstore = &*self.untracked_resolutions.cstore;\n             (cstore.crate_name(def_id.krate), cstore.stable_crate_id(def_id.krate))\n         };\n \n@@ -1520,7 +1521,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Note that this is *untracked* and should only be used within the query\n     /// system if the result is otherwise tracked through queries\n     pub fn cstore_untracked(self) -> &'tcx CrateStoreDyn {\n-        &*self.cstore\n+        &*self.untracked_resolutions.cstore\n     }\n \n     /// Note that this is *untracked* and should only be used within the query\n@@ -1546,7 +1547,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let hcx = StableHashingContext::new(\n             self.sess,\n             &*definitions,\n-            &*self.cstore,\n+            &*self.untracked_resolutions.cstore,\n             &self.untracked_resolutions.source_span,\n         );\n         f(hcx)\n@@ -2364,7 +2365,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             st,\n             self.sess,\n             &self.definitions.read(),\n-            &*self.cstore,\n+            &*self.untracked_resolutions.cstore,\n             // This is only used to create a stable hashing context.\n             &self.untracked_resolutions.source_span,\n         )"}, {"sha": "9671d3a32f9453d09f7fdd595f5c83801000a129", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=919673ea03e2c376931161a9301a9d6f089f8984", "patch": "@@ -38,11 +38,13 @@ use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, LifetimeRes, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap};\n+use rustc_hir::definitions::Definitions;\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{Decodable, Encodable};\n+use rustc_session::cstore::CrateStoreDyn;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, Span};\n@@ -142,8 +144,15 @@ mod sty;\n \n pub type RegisteredTools = FxHashSet<Ident>;\n \n-#[derive(Debug)]\n pub struct ResolverOutputs {\n+    pub definitions: Definitions,\n+    pub global_ctxt: ResolverGlobalCtxt,\n+    pub ast_lowering: ResolverAstLowering,\n+}\n+\n+#[derive(Debug)]\n+pub struct ResolverGlobalCtxt {\n+    pub cstore: Box<CrateStoreDyn>,\n     pub visibilities: FxHashMap<LocalDefId, Visibility>,\n     /// This field is used to decide whether we should make `PRIVATE_IN_PUBLIC` a hard error.\n     pub has_pub_restricted: bool,"}, {"sha": "c2213e8d1e2e3a16c0868873d2b02defe52175c6", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919673ea03e2c376931161a9301a9d6f089f8984/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=919673ea03e2c376931161a9301a9d6f089f8984", "patch": "@@ -42,9 +42,10 @@ use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::span_bug;\n-use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools, ResolverOutputs};\n+use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools};\n+use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::cstore::{CrateStore, CrateStoreDyn, MetadataLoaderDyn};\n+use rustc_session::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc_session::lint::LintBuffer;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n@@ -1376,9 +1377,7 @@ impl<'a> Resolver<'a> {\n         Default::default()\n     }\n \n-    pub fn into_outputs(\n-        self,\n-    ) -> (Definitions, Box<CrateStoreDyn>, ResolverOutputs, ty::ResolverAstLowering) {\n+    pub fn into_outputs(self) -> ResolverOutputs {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions;\n         let cstore = Box::new(self.crate_loader.into_cstore());\n@@ -1394,7 +1393,8 @@ impl<'a> Resolver<'a> {\n         let main_def = self.main_def;\n         let confused_type_with_std_module = self.confused_type_with_std_module;\n         let access_levels = self.access_levels;\n-        let resolutions = ResolverOutputs {\n+        let global_ctxt = ResolverGlobalCtxt {\n+            cstore,\n             source_span,\n             expn_that_defined,\n             visibilities,\n@@ -1416,7 +1416,7 @@ impl<'a> Resolver<'a> {\n             confused_type_with_std_module,\n             registered_tools: self.registered_tools,\n         };\n-        let resolutions_lowering = ty::ResolverAstLowering {\n+        let ast_lowering = ty::ResolverAstLowering {\n             legacy_const_generic_args: self.legacy_const_generic_args,\n             partial_res_map: self.partial_res_map,\n             import_res_map: self.import_res_map,\n@@ -1429,16 +1429,15 @@ impl<'a> Resolver<'a> {\n             trait_map: self.trait_map,\n             builtin_macro_kinds: self.builtin_macro_kinds,\n         };\n-        (definitions, cstore, resolutions, resolutions_lowering)\n+        ResolverOutputs { definitions, global_ctxt, ast_lowering }\n     }\n \n-    pub fn clone_outputs(\n-        &self,\n-    ) -> (Definitions, Box<CrateStoreDyn>, ResolverOutputs, ty::ResolverAstLowering) {\n+    pub fn clone_outputs(&self) -> ResolverOutputs {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions.clone();\n         let cstore = Box::new(self.cstore().clone());\n-        let resolutions = ResolverOutputs {\n+        let global_ctxt = ResolverGlobalCtxt {\n+            cstore,\n             source_span: self.source_span.clone(),\n             expn_that_defined: self.expn_that_defined.clone(),\n             visibilities: self.visibilities.clone(),\n@@ -1460,7 +1459,7 @@ impl<'a> Resolver<'a> {\n             registered_tools: self.registered_tools.clone(),\n             access_levels: self.access_levels.clone(),\n         };\n-        let resolutions_lowering = ty::ResolverAstLowering {\n+        let ast_lowering = ty::ResolverAstLowering {\n             legacy_const_generic_args: self.legacy_const_generic_args.clone(),\n             partial_res_map: self.partial_res_map.clone(),\n             import_res_map: self.import_res_map.clone(),\n@@ -1473,7 +1472,7 @@ impl<'a> Resolver<'a> {\n             trait_map: self.trait_map.clone(),\n             builtin_macro_kinds: self.builtin_macro_kinds.clone(),\n         };\n-        (definitions, cstore, resolutions, resolutions_lowering)\n+        ResolverOutputs { definitions, global_ctxt, ast_lowering }\n     }\n \n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {"}]}