{"sha": "2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOGRlNmYyMTI4NmQ2ZGJkN2RkNjkyYWY3ZGE3ZGM2OTM3ODYxZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T23:07:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T23:07:07Z"}, "message": "Auto merge of #87746 - JohnTitor:rollup-zaapqgl, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #81797 (Add `core::stream::from_iter`)\n - #87267 (Remove space after negative sign in Literal to_string)\n - #87663 (Rustdoc accessibility: use an icon for the [-]/[+] controls)\n - #87720 (don't use .into() to convert types to identical types (clippy::useless_conversion))\n - #87723 (Use .contains instead of manual reimplementation.)\n - #87729 (Remove the aarch64 `crypto` target_feature)\n - #87731 (Update cargo)\n - #87734 (Test dropping union fields more)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7d2884267ffc5c435502cd9290bae1c3e5b55b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d2884267ffc5c435502cd9290bae1c3e5b55b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "html_url": "https://github.com/rust-lang/rust/commit/2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6ece56152d8eb11e049e9fcce147b2859e12c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ece56152d8eb11e049e9fcce147b2859e12c92", "html_url": "https://github.com/rust-lang/rust/commit/a6ece56152d8eb11e049e9fcce147b2859e12c92"}, {"sha": "7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "html_url": "https://github.com/rust-lang/rust/commit/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b"}], "stats": {"total": 442, "additions": 375, "deletions": 67}, "files": [{"sha": "39688b7b7ea7fd6f7ae70be5af55e820091456e3", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -255,7 +255,7 @@ checksum = \"81a18687293a1546b67c246452202bbbf143d239cb43494cc163da14979082da\"\n \n [[package]]\n name = \"cargo\"\n-version = \"0.56.0\"\n+version = \"0.57.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\",\n@@ -388,7 +388,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo-util\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n dependencies = [\n  \"anyhow\",\n  \"core-foundation\","}, {"sha": "8d7e9612f4749d63c0fbb9e6388520627ac85374", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -47,8 +47,6 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"sve\", Some(sym::aarch64_target_feature)),\n     // FEAT_CRC\n     (\"crc\", Some(sym::aarch64_target_feature)),\n-    // Cryptographic extension\n-    (\"crypto\", Some(sym::aarch64_target_feature)),\n     // FEAT_RAS\n     (\"ras\", Some(sym::aarch64_target_feature)),\n     // FEAT_LSE"}, {"sha": "42ae8e972c274ee8c61a703842d53fae2731a7b3", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -582,6 +582,9 @@ impl server::Literal for Rustc<'_> {\n \n         Ok(Literal { lit, span: self.call_site })\n     }\n+    fn to_string(&mut self, literal: &Self::Literal) -> String {\n+        literal.lit.to_string()\n+    }\n     fn debug_kind(&mut self, literal: &Self::Literal) -> String {\n         format!(\"{:?}\", literal.lit.kind)\n     }"}, {"sha": "baef2a5a52c78fe73d8f3340d66edad6aafbacca", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -599,7 +599,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let ptr = self.global_base_pointer(Pointer::new(id, offset))?;\n                 Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))\n             }\n-            ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x.into())?.into()),\n+            ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),\n             ConstValue::Slice { data, start, end } => {\n                 // We rely on mutability being set correctly in `data` to prevent writes\n                 // where none should happen."}, {"sha": "35ae07e25cadac47363dfd739297f217b689b79f", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -73,7 +73,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ty::FnPtr(sig) => {\n                         let caller_abi = sig.abi();\n                         let fn_ptr = self.read_pointer(&func)?;\n-                        let fn_val = self.memory.get_fn(fn_ptr.into())?;\n+                        let fn_val = self.memory.get_fn(fn_ptr)?;\n                         (\n                             fn_val,\n                             caller_abi,"}, {"sha": "948fcd9f4550f4e6ec0a7cbdbb606240978b494b", "filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -211,7 +211,7 @@ fn find_branch_value_info<'tcx>(\n                 return None;\n             };\n             let branch_value_scalar = branch_value.literal.try_to_scalar()?;\n-            Some((branch_value_scalar.into(), branch_value_ty, *to_switch_on))\n+            Some((branch_value_scalar, branch_value_ty, *to_switch_on))\n         }\n         _ => None,\n     }"}, {"sha": "9788404dd05bf58f6c18ba5ac18e8d2735595595", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -847,7 +847,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n     use self::ParseIntError as PIE;\n \n     assert!(\n-        radix >= 2 && radix <= 36,\n+        (2..=36).contains(&radix),\n         \"from_str_radix_int: must lie in the range `[2, 36]` - found {}\",\n         radix\n     );"}, {"sha": "eb9a0fd284257d7abd02c481c7d7a28b5155ee4b", "filename": "library/core/src/stream/from_iter.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fcore%2Fsrc%2Fstream%2Ffrom_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fcore%2Fsrc%2Fstream%2Ffrom_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Ffrom_iter.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -0,0 +1,38 @@\n+use crate::pin::Pin;\n+\n+use crate::stream::Stream;\n+use crate::task::{Context, Poll};\n+\n+/// A stream that was created from iterator.\n+///\n+/// This stream is created by the [`from_iter`] function.\n+/// See it documentation for more.\n+///\n+/// [`from_iter`]: fn.from_iter.html\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+#[derive(Clone, Debug)]\n+pub struct FromIter<I> {\n+    iter: I,\n+}\n+\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+impl<I> Unpin for FromIter<I> {}\n+\n+/// Converts an iterator into a stream.\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+pub fn from_iter<I: IntoIterator>(iter: I) -> FromIter<I::IntoIter> {\n+    FromIter { iter: iter.into_iter() }\n+}\n+\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+impl<I: Iterator> Stream for FromIter<I> {\n+    type Item = I::Item;\n+\n+    fn poll_next(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n+        Poll::Ready(self.iter.next())\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}"}, {"sha": "58dc8e1e5e6067b701ed1d0147adda3456f90f03", "filename": "library/core/src/stream/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -122,6 +122,8 @@\n //! warning: unused result that must be used: streams do nothing unless polled\n //! ```\n \n+mod from_iter;\n mod stream;\n \n+pub use from_iter::{from_iter, FromIter};\n pub use stream::Stream;"}, {"sha": "7001e827ad8456778b1225f190a2fcdf596551d2", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -109,6 +109,7 @@ macro_rules! with_api {\n                 fn drop($self: $S::Literal);\n                 fn clone($self: &$S::Literal) -> $S::Literal;\n                 fn from_str(s: &str) -> Result<$S::Literal, ()>;\n+                fn to_string($self: &$S::Literal) -> String;\n                 fn debug_kind($self: &$S::Literal) -> String;\n                 fn symbol($self: &$S::Literal) -> String;\n                 fn suffix($self: &$S::Literal) -> Option<String>;"}, {"sha": "46f564199d0c291504c9267165190b02e86f7715", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -1195,7 +1195,7 @@ impl FromStr for Literal {\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl ToString for Literal {\n     fn to_string(&self) -> String {\n-        TokenStream::from(TokenTree::from(self.clone())).to_string()\n+        self.0.to_string()\n     }\n }\n "}, {"sha": "079f00a5753f1d7617b8d55407631b5390594d32", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -16,22 +16,56 @@\n fn arm_linux() {\n     println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n     println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n+    println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n+    println!(\"crc: {}\", is_arm_feature_detected!(\"crc\"));\n+    println!(\"aes: {}\", is_arm_feature_detected!(\"aes\"));\n+    println!(\"sha2: {}\", is_arm_feature_detected!(\"sha2\"));\n }\n \n #[test]\n #[cfg(all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")))]\n fn aarch64_linux() {\n-    println!(\"fp: {}\", is_aarch64_feature_detected!(\"fp\"));\n-    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n+    println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n+    println!(\"fp: {}\", is_aarch64_feature_detected!(\"fp\"));\n+    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n     println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));\n     println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n+    println!(\"lse2: {}\", is_aarch64_feature_detected!(\"lse2\"));\n     println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n     println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n+    println!(\"rcpc2: {}\", is_aarch64_feature_detected!(\"rcpc2\"));\n     println!(\"dotprod: {}\", is_aarch64_feature_detected!(\"dotprod\"));\n     println!(\"tme: {}\", is_aarch64_feature_detected!(\"tme\"));\n+    println!(\"fhm: {}\", is_aarch64_feature_detected!(\"fhm\"));\n+    println!(\"dit: {}\", is_aarch64_feature_detected!(\"dit\"));\n+    println!(\"flagm: {}\", is_aarch64_feature_detected!(\"flagm\"));\n+    println!(\"ssbs: {}\", is_aarch64_feature_detected!(\"ssbs\"));\n+    println!(\"sb: {}\", is_aarch64_feature_detected!(\"sb\"));\n+    println!(\"pauth: {}\", is_aarch64_feature_detected!(\"pauth\"));\n+    println!(\"dpb: {}\", is_aarch64_feature_detected!(\"dpb\"));\n+    println!(\"dpb2: {}\", is_aarch64_feature_detected!(\"dpb2\"));\n+    println!(\"sve2: {}\", is_aarch64_feature_detected!(\"sve2\"));\n+    println!(\"sve2-aes: {}\", is_aarch64_feature_detected!(\"sve2-aes\"));\n+    println!(\"sve2-sm4: {}\", is_aarch64_feature_detected!(\"sve2-sm4\"));\n+    println!(\"sve2-sha3: {}\", is_aarch64_feature_detected!(\"sve2-sha3\"));\n+    println!(\"sve2-bitperm: {}\", is_aarch64_feature_detected!(\"sve2-bitperm\"));\n+    println!(\"frintts: {}\", is_aarch64_feature_detected!(\"frintts\"));\n+    println!(\"i8mm: {}\", is_aarch64_feature_detected!(\"i8mm\"));\n+    println!(\"f32mm: {}\", is_aarch64_feature_detected!(\"f32mm\"));\n+    println!(\"f64mm: {}\", is_aarch64_feature_detected!(\"f64mm\"));\n+    println!(\"bf16: {}\", is_aarch64_feature_detected!(\"bf16\"));\n+    println!(\"rand: {}\", is_aarch64_feature_detected!(\"rand\"));\n+    println!(\"bti: {}\", is_aarch64_feature_detected!(\"bti\"));\n+    println!(\"mte: {}\", is_aarch64_feature_detected!(\"mte\"));\n+    println!(\"jsconv: {}\", is_aarch64_feature_detected!(\"jsconv\"));\n+    println!(\"fcma: {}\", is_aarch64_feature_detected!(\"fcma\"));\n+    println!(\"aes: {}\", is_aarch64_feature_detected!(\"aes\"));\n+    println!(\"sha2: {}\", is_aarch64_feature_detected!(\"sha2\"));\n+    println!(\"sha3: {}\", is_aarch64_feature_detected!(\"sha3\"));\n+    println!(\"sm4: {}\", is_aarch64_feature_detected!(\"sm4\"));\n }\n \n #[test]"}, {"sha": "c158cfd38e20d855f5d6ca8a5a101eefb82604a8", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -1 +1 @@\n-Subproject commit 3001c75a1d2a81d2a76bef139c69387cb2ebb820\n+Subproject commit c158cfd38e20d855f5d6ca8a5a101eefb82604a8"}, {"sha": "b3fc1e73f78856602d86829de383c568dfdf4b08", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -675,11 +675,10 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                         if let Some(((_, trait_did, name), rhs)) =\n                             proj.as_ref().and_then(|(lhs, rhs)| Some((lhs.projection()?, rhs)))\n                         {\n-                            impl_trait_proj.entry(param_idx).or_default().push((\n-                                trait_did.into(),\n-                                name,\n-                                rhs,\n-                            ));\n+                            impl_trait_proj\n+                                .entry(param_idx)\n+                                .or_default()\n+                                .push((trait_did, name, rhs));\n                         }\n \n                         return None;"}, {"sha": "5c73d3de5b93fb4aed6a763c774013de821edd82", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -1614,7 +1614,7 @@ impl Type {\n impl Type {\n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n-            ResolvedPath { did, .. } => return Some(did.into()),\n+            ResolvedPath { did, .. } => return Some(did),\n             DynTrait(ref bounds, _) => return bounds[0].trait_.inner_def_id(cache),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,"}, {"sha": "3d267ca50334dc9136ee115d0523759ec1f48f7e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 if i.blanket_impl.is_none() {\n                     self.cache\n                         .implementors\n-                        .entry(did.into())\n+                        .entry(did)\n                         .or_default()\n                         .push(Impl { impl_item: item.clone() });\n                 }"}, {"sha": "8ab6aa775d2e4fb09eda2bb004828903d6ba13e4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -688,7 +688,7 @@ crate fn anchor<'a, 'cx: 'a>(\n     text: &'a str,\n     cx: &'cx Context<'_>,\n ) -> impl fmt::Display + 'a {\n-    let parts = href(did.into(), cx);\n+    let parts = href(did, cx);\n     display_fn(move |f| {\n         if let Ok((url, short_ty, fqp)) = parts {\n             write!(\n@@ -921,7 +921,7 @@ fn fmt_type<'cx>(\n                 //        everything comes in as a fully resolved QPath (hard to\n                 //        look at).\n                 box clean::ResolvedPath { did, .. } => {\n-                    match href(did.into(), cx) {\n+                    match href(did, cx) {\n                         Ok((ref url, _, ref path)) if !f.alternate() => {\n                             write!(\n                                 f,"}, {"sha": "1c083522beaa901f3409a9de0bb084911100de2c", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -42,7 +42,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 name: item.name.unwrap().to_string(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n                 desc,\n-                parent: Some(did.into()),\n+                parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item, tcx),\n                 aliases: item.attrs.get_doc_aliases(),"}, {"sha": "4411b7771eda7771414d04927e25e9fd0ea3dfe2", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -175,9 +175,45 @@ pub(super) fn write_shared(\n         cx.write_shared(SharedResource::InvocationSpecific { basename: p }, content, &options.emit)\n     };\n \n+    fn add_background_image_to_css(\n+        cx: &Context<'_>,\n+        css: &mut String,\n+        rule: &str,\n+        file: &'static str,\n+    ) {\n+        css.push_str(&format!(\n+            \"{} {{ background-image: url({}); }}\",\n+            rule,\n+            SharedResource::ToolchainSpecific { basename: file }\n+                .path(cx)\n+                .file_name()\n+                .unwrap()\n+                .to_str()\n+                .unwrap()\n+        ))\n+    }\n+\n+    // Add all the static files. These may already exist, but we just\n+    // overwrite them anyway to make sure that they're fresh and up-to-date.\n+    let mut rustdoc_css = static_files::RUSTDOC_CSS.to_owned();\n+    add_background_image_to_css(\n+        cx,\n+        &mut rustdoc_css,\n+        \"details.undocumented[open] > summary::before, \\\n+         details.rustdoc-toggle[open] > summary::before, \\\n+         details.rustdoc-toggle[open] > summary.hideme::before\",\n+        \"toggle-minus.svg\",\n+    );\n+    add_background_image_to_css(\n+        cx,\n+        &mut rustdoc_css,\n+        \"details.undocumented > summary::before, details.rustdoc-toggle > summary::before\",\n+        \"toggle-plus.svg\",\n+    );\n+    write_minify(\"rustdoc.css\", &rustdoc_css)?;\n+\n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n-    write_minify(\"rustdoc.css\", static_files::RUSTDOC_CSS)?;\n     write_minify(\"settings.css\", static_files::SETTINGS_CSS)?;\n     write_minify(\"noscript.css\", static_files::NOSCRIPT_CSS)?;\n \n@@ -217,6 +253,8 @@ pub(super) fn write_shared(\n     write_toolchain(\"wheel.svg\", static_files::WHEEL_SVG)?;\n     write_toolchain(\"clipboard.svg\", static_files::CLIPBOARD_SVG)?;\n     write_toolchain(\"down-arrow.svg\", static_files::DOWN_ARROW_SVG)?;\n+    write_toolchain(\"toggle-minus.svg\", static_files::TOGGLE_MINUS_PNG)?;\n+    write_toolchain(\"toggle-plus.svg\", static_files::TOGGLE_PLUS_PNG)?;\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n     themes.sort();"}, {"sha": "4e33eab5650065a01e34b63fadab824c0f3c654e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -1508,11 +1508,35 @@ details.rustdoc-toggle > summary.hideme > span {\n }\n \n details.rustdoc-toggle > summary::before {\n-\tcontent: \"[+]\";\n-\tfont-weight: 300;\n-\tfont-size: 0.8em;\n-\tletter-spacing: 1px;\n+\tcontent: \"\";\n \tcursor: pointer;\n+\twidth: 17px;\n+\theight: max(17px, 1.1em);\n+\tbackground-repeat: no-repeat;\n+\tbackground-position: top left;\n+\tdisplay: inline-block;\n+\tvertical-align: middle;\n+\topacity: .5;\n+}\n+\n+/* Screen readers see the text version at the end the line.\n+\tVisual readers see the icon at the start of the line, but small and transparent. */\n+details.rustdoc-toggle > summary::after {\n+\tcontent: \"Expand\";\n+\toverflow: hidden;\n+\twidth: 0;\n+\theight: 0;\n+\tposition: absolute;\n+}\n+\n+details.rustdoc-toggle > summary.hideme::after {\n+\t/* \"hideme\" toggles already have a description when they're contracted */\n+\tcontent: \"\";\n+}\n+\n+details.rustdoc-toggle > summary:focus::before,\n+details.rustdoc-toggle > summary:hover::before {\n+\topacity: 1;\n }\n \n details.rustdoc-toggle.top-doc > summary,\n@@ -1560,20 +1584,44 @@ details.rustdoc-toggle[open] > summary.hideme > span {\n \tdisplay: none;\n }\n \n-details.rustdoc-toggle[open] > summary::before {\n-\tcontent: \"[\u2212]\";\n-\tdisplay: inline;\n+details.rustdoc-toggle[open] > summary::before,\n+details.rustdoc-toggle[open] > summary.hideme::before {\n+\twidth: 17px;\n+\theight: max(17px, 1.1em);\n+\tbackground-repeat: no-repeat;\n+\tbackground-position: top left;\n+\tdisplay: inline-block;\n+\tcontent: \"\";\n+}\n+\n+details.rustdoc-toggle[open] > summary::after,\n+details.rustdoc-toggle[open] > summary.hideme::after {\n+\tcontent: \"Collapse\";\n }\n \n details.undocumented > summary::before {\n-\tcontent: \"[+] Show hidden undocumented items\";\n+\tpadding-left: 17px;\n+\theight: max(17px, 1.1em);\n+\tbackground-repeat: no-repeat;\n+\tbackground-position: top left;\n+\tcontent: \"Show hidden undocumented items\";\n \tcursor: pointer;\n \tfont-size: 16px;\n \tfont-weight: 300;\n+\topacity: .5;\n+}\n+\n+details.undocumented > summary:focus::before,\n+details.undocumented > summary:hover::before {\n+\topacity: 1;\n }\n \n details.undocumented[open] > summary::before {\n-\tcontent: \"[\u2212] Hide undocumented items\";\n+\tpadding-left: 17px;\n+\theight: max(17px, 1.1em);\n+\tbackground-repeat: no-repeat\n+\tbackground-position: top left;\n+\tcontent: \"Hide undocumented items\";\n }\n \n /* Media Queries */"}, {"sha": "849924ea5501e1d92f85bbc8be650907a4e11fbb", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -229,6 +229,11 @@ details.undocumented > summary::before {\n \tcolor: #999;\n }\n \n+details.rustdoc-toggle > summary::before,\n+details.undocumented > summary::before {\n+\tfilter: invert(100%);\n+}\n+\n #crate-search {\n \tcolor: #c5c5c5;\n \tbackground-color: #141920;"}, {"sha": "c26122e4bffb5844ad3617806026713877a65597", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -194,6 +194,11 @@ details.undocumented > summary::before {\n \tcolor: #999;\n }\n \n+details.rustdoc-toggle > summary::before,\n+details.undocumented > summary::before {\n+\tfilter: invert(100%);\n+}\n+\n #crate-search {\n \tcolor: #111;\n \tbackground-color: #f0f0f0;"}, {"sha": "73154788a0e8ed4563843abf5da671263aa9571a", "filename": "src/librustdoc/html/static/images/toggle-minus.svg", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-minus.svg", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-minus.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-minus.svg?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -0,0 +1 @@\n+<svg width=\"17\" height=\"17\" shape-rendering=\"crispEdges\" stroke=\"#000\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5 2.5H2.5v12H5m7-12h2.5v12H12M5 8.5h7\"/></svg>\n\\ No newline at end of file"}, {"sha": "08b17033e164b15fb31decfbb5befc16209d697e", "filename": "src/librustdoc/html/static/images/toggle-plus.svg", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-plus.svg", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-plus.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Ftoggle-plus.svg?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -0,0 +1 @@\n+<svg width=\"17\" height=\"17\" shape-rendering=\"crispEdges\" stroke=\"#000\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5 2.5H2.5v12H5m7-12h2.5v12H12M5 8.5h7M8.5 12V8.625v0V5\"/></svg>\n\\ No newline at end of file"}, {"sha": "6f3d08ea655691350729431fad47730689b2edf2", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -47,6 +47,12 @@ crate static CLIPBOARD_SVG: &[u8] = include_bytes!(\"static/images/clipboard.svg\"\n /// The file contents of `down-arrow.svg`, the icon used for the crate choice combobox.\n crate static DOWN_ARROW_SVG: &[u8] = include_bytes!(\"static/images/down-arrow.svg\");\n \n+/// The file contents of `toggle-minus.svg`, the icon used for opened toggles.\n+crate static TOGGLE_MINUS_PNG: &[u8] = include_bytes!(\"static/images/toggle-minus.svg\");\n+\n+/// The file contents of `toggle-plus.svg`, the icon used for closed toggles.\n+crate static TOGGLE_PLUS_PNG: &[u8] = include_bytes!(\"static/images/toggle-plus.svg\");\n+\n /// The contents of `COPYRIGHT.txt`, the license listing for files distributed with documentation\n /// output.\n crate static COPYRIGHT: &[u8] = include_bytes!(\"static/COPYRIGHT.txt\");"}, {"sha": "b36be9541d2b3980b32c04b9997abc63d6ebaf04", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -293,7 +293,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     ) -> Result<(Res, Option<String>), ErrorKind<'path>> {\n         let tcx = self.cx.tcx;\n         let no_res = || ResolutionFailure::NotResolved {\n-            module_id: module_id.into(),\n+            module_id: module_id,\n             partial_res: None,\n             unresolved: path_str.into(),\n         };\n@@ -521,7 +521,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     // but the disambiguator logic expects the associated item.\n                     // Store the kind in a side channel so that only the disambiguator logic looks at it.\n                     if let Some((kind, id)) = side_channel {\n-                        self.kind_side_channel.set(Some((kind, id.into())));\n+                        self.kind_side_channel.set(Some((kind, id)));\n                     }\n                     Ok((res, Some(fragment)))\n                 };\n@@ -1268,7 +1268,7 @@ impl LinkCollector<'_, '_> {\n                     // doesn't allow statements like `use str::trim;`, making this a (hopefully)\n                     // valid omission. See https://github.com/rust-lang/rust/pull/80660#discussion_r551585677\n                     // for discussion on the matter.\n-                    verify(kind, id.into())?;\n+                    verify(kind, id)?;\n \n                     // FIXME: it would be nice to check that the feature gate was enabled in the original crate, not just ignore it altogether.\n                     // However I'm not sure how to check that across crates.\n@@ -1306,9 +1306,9 @@ impl LinkCollector<'_, '_> {\n                 Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n             }\n             Res::Def(kind, id) => {\n-                verify(kind, id.into())?;\n+                verify(kind, id)?;\n                 let id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n-                Some(ItemLink { link: ori_link.link, link_text, did: Some(id.into()), fragment })\n+                Some(ItemLink { link: ori_link.link, link_text, did: Some(id), fragment })\n             }\n         }\n     }\n@@ -1886,7 +1886,7 @@ fn resolution_failure(\n                         name = start;\n                         for ns in [TypeNS, ValueNS, MacroNS] {\n                             if let Some(res) =\n-                                collector.check_full_res(ns, &start, module_id.into(), &None)\n+                                collector.check_full_res(ns, &start, module_id, &None)\n                             {\n                                 debug!(\"found partial_res={:?}\", res);\n                                 *partial_res = Some(res);"}, {"sha": "eefe50caa345e85548377051cc9e7d10bb0c1a08", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -45,7 +45,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n                 // FIXME(eddyb) is this `doc(hidden)` check needed?\n                 if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n-                    let impls = get_auto_trait_and_blanket_impls(cx, def_id.into());\n+                    let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n                     new_items.extend(impls.filter(|i| cx.inlined.insert(i.def_id)));\n                 }\n             });"}, {"sha": "e28910355357b29b50eb9c69fcbab79ee60b743c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         // All items need to be handled here in case someone wishes to link\n                         // to them with intra-doc links\n-                        self.cx.cache.access_levels.map.insert(did.into(), AccessLevel::Public);\n+                        self.cx.cache.access_levels.map.insert(did, AccessLevel::Public);\n                     }\n                 }\n             }\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             None => return false,\n         };\n \n-        let is_private = !self.cx.cache.access_levels.is_public(res_did.into());\n+        let is_private = !self.cx.cache.access_levels.is_public(res_did);\n         let is_hidden = inherits_doc_hidden(self.cx.tcx, res_hir_id);\n \n         // Only inline if requested or if the item would otherwise be stripped."}, {"sha": "93551ebaf82d598416d68dcc58bfea5953f904d2", "filename": "src/test/ui/proc-macro/auxiliary/api/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -6,8 +6,8 @@ pub fn test() {\n }\n \n fn test_display_literal() {\n-    assert_eq!(Literal::isize_unsuffixed(-10).to_string(), \"- 10\");\n-    assert_eq!(Literal::isize_suffixed(-10).to_string(), \"- 10isize\");\n+    assert_eq!(Literal::isize_unsuffixed(-10).to_string(), \"-10\");\n+    assert_eq!(Literal::isize_suffixed(-10).to_string(), \"-10isize\");\n }\n \n fn test_parse_literal() {\n@@ -18,7 +18,7 @@ fn test_parse_literal() {\n     assert_eq!(\"b\\\"\\\"\".parse::<Literal>().unwrap().to_string(), \"b\\\"\\\"\");\n     assert_eq!(\"r##\\\"\\\"##\".parse::<Literal>().unwrap().to_string(), \"r##\\\"\\\"##\");\n     assert_eq!(\"10ulong\".parse::<Literal>().unwrap().to_string(), \"10ulong\");\n-    assert_eq!(\"-10ulong\".parse::<Literal>().unwrap().to_string(), \"- 10ulong\");\n+    assert_eq!(\"-10ulong\".parse::<Literal>().unwrap().to_string(), \"-10ulong\");\n \n     assert!(\"true\".parse::<Literal>().is_err());\n     assert!(\".8\".parse::<Literal>().is_err());"}, {"sha": "c3d7d41ca35fbb8b9942bb906dbdcf8026598117", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "9766ae4e435f2fb8822905e00900c92b5c9a7d4a", "filename": "src/test/ui/union/union-drop.thirunsafeck.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6ece56152d8eb11e049e9fcce147b2859e12c92/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6ece56152d8eb11e049e9fcce147b2859e12c92/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr?ref=a6ece56152d8eb11e049e9fcce147b2859e12c92", "patch": "@@ -1,22 +0,0 @@\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:27:9\n-   |\n-LL |         unsafe { CHECK += 1; }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: `#[warn(unused_unsafe)]` on by default\n-\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:33:9\n-   |\n-LL |         unsafe { CHECK += 1; }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:40:5\n-   |\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n-\n-warning: 3 warnings emitted\n-"}, {"sha": "cd338ac9e3a270dbb352a5644ef6aaf0cc6c9683", "filename": "src/test/ui/unsafe/union-assignop.mirunsafeck.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -0,0 +1,59 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:20:5\n+   |\n+LL |     foo.a += 5;\n+   |     ^^^^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:5\n+   |\n+LL |     foo.b += Dropping;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:22:5\n+   |\n+LL |     foo.b = Dropping;\n+   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:23:5\n+   |\n+LL |     foo.a;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:25:5\n+   |\n+LL |     foo.b;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:13\n+   |\n+LL |     foo.b = foo.b;\n+   |             ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:5\n+   |\n+LL |     foo.b = foo.b;\n+   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "c4be20aa567b748f54736e2723db61abd660eee7", "filename": "src/test/ui/unsafe/union-assignop.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -0,0 +1,30 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![feature(untagged_unions)]\n+\n+use std::ops::AddAssign;\n+\n+struct Dropping;\n+impl AddAssign for Dropping {\n+    fn add_assign(&mut self, _: Self) {}\n+}\n+\n+union Foo {\n+    a: u8, // non-dropping\n+    b: Dropping, // treated as dropping\n+}\n+\n+fn main() {\n+    let mut foo = Foo { a: 42 };\n+    foo.a += 5; //~ ERROR access to union field is unsafe\n+    foo.b += Dropping; //~ ERROR access to union field is unsafe\n+    foo.b = Dropping; //~ ERROR assignment to union field that might need dropping is unsafe\n+    foo.a; //~ ERROR access to union field is unsafe\n+    let foo = Foo { a: 42 };\n+    foo.b; //~ ERROR access to union field is unsafe\n+    let mut foo = Foo { a: 42 };\n+    foo.b = foo.b;\n+    //~^ ERROR access to union field is unsafe\n+    //~| ERROR assignment to union field that might need dropping\n+}"}, {"sha": "71de421a2553e7dd7e64723e3866c8bc2d4f8329", "filename": "src/test/ui/unsafe/union-assignop.thirunsafeck.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8de6f21286d6dbd7dd692af7da7dc6937861d3/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -0,0 +1,59 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:20:5\n+   |\n+LL |     foo.a += 5;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:5\n+   |\n+LL |     foo.b += Dropping;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:22:5\n+   |\n+LL |     foo.b = Dropping;\n+   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:23:5\n+   |\n+LL |     foo.a;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:25:5\n+   |\n+LL |     foo.b;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:5\n+   |\n+LL |     foo.b = foo.b;\n+   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:13\n+   |\n+LL |     foo.b = foo.b;\n+   |             ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "cc17afbb0067b1f57d8882640f63b2168d5b7624", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=2b8de6f21286d6dbd7dd692af7da7dc6937861d3", "patch": "@@ -1 +1 @@\n-Subproject commit d21c22870e58499d6c31f1bef3bf1255eb021666\n+Subproject commit cc17afbb0067b1f57d8882640f63b2168d5b7624"}]}