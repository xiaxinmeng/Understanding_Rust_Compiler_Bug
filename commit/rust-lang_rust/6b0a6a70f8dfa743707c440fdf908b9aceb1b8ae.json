{"sha": "6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMGE2YTcwZjhkZmE3NDM3MDdjNDQwZmRmOTA4YjlhY2ViMWI4YWU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-07-23T17:39:35Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-10T21:49:06Z"}, "message": "default-trait-access: make lint adhere to lint message convention", "tree": {"sha": "2738a9ec5c612658de3ae0120343315a15e8eadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2738a9ec5c612658de3ae0120343315a15e8eadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae", "html_url": "https://github.com/rust-lang/rust/commit/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d592b515492c8d054583078163c1986c44e222a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d592b515492c8d054583078163c1986c44e222a", "html_url": "https://github.com/rust-lang/rust/commit/3d592b515492c8d054583078163c1986c44e222a"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "874e19d9e9fb356d96db39f9079a6e5ecec157c7", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for DefaultTraitAccess {\n                                 cx,\n                                 DEFAULT_TRAIT_ACCESS,\n                                 expr.span,\n-                                &format!(\"Calling `{}` is more clear than this expression\", replacement),\n+                                &format!(\"calling `{}` is more clear than this expression\", replacement),\n                                 \"try\",\n                                 replacement,\n                                 Applicability::Unspecified, // First resolve the TODO above"}, {"sha": "26b2057548bd9e46b3dc94c7a6ff6366a30b33ce", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=6b0a6a70f8dfa743707c440fdf908b9aceb1b8ae", "patch": "@@ -1,48 +1,48 @@\n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:8:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n    = note: `-D clippy::default-trait-access` implied by `-D warnings`\n \n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:12:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:14:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling `std::string::String::default()` is more clear than this expression\n+error: calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:18:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n+error: calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:28:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n    |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n \n-error: Calling `TupleDerivedDefault::default()` is more clear than this expression\n+error: calling `TupleDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:34:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n-error: Calling `ArrayDerivedDefault::default()` is more clear than this expression\n+error: calling `ArrayDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:36:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n-error: Calling `TupleStructDerivedDefault::default()` is more clear than this expression\n+error: calling `TupleStructDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:40:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();"}]}