{"sha": "3b7720f992a5bc03027e64450ba51a58a5a971ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzcyMGY5OTJhNWJjMDMwMjdlNjQ0NTBiYTUxYTU4YTVhOTcxYWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-29T08:45:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-29T11:34:48Z"}, "message": "lint ! and != in if expressions with else branches", "tree": {"sha": "a71163a27c037d10557328fd58b91798b311c167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71163a27c037d10557328fd58b91798b311c167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7720f992a5bc03027e64450ba51a58a5a971ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7720f992a5bc03027e64450ba51a58a5a971ae", "html_url": "https://github.com/rust-lang/rust/commit/3b7720f992a5bc03027e64450ba51a58a5a971ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7720f992a5bc03027e64450ba51a58a5a971ae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e00e20c9d44bebfa66e2e044638a857ed65a8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e00e20c9d44bebfa66e2e044638a857ed65a8e", "html_url": "https://github.com/rust-lang/rust/commit/35e00e20c9d44bebfa66e2e044638a857ed65a8e"}], "stats": {"total": 129, "additions": 100, "deletions": 29}, "files": [{"sha": "3a957a7e4c9646b06549dde8a6d6a13306cd8625", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 128 lints included in this crate:\n+There are 129 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -52,6 +52,7 @@ name\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                         | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                         | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                           | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[if_not_else](https://github.com/Manishearth/rust-clippy/wiki#if_not_else)                                           | warn    | finds if branches that could be swapped so no negation operation is necessary on the condition\n [if_same_then_else](https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else)                               | warn    | if with the same *then* and *else* blocks\n [ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                       | warn    | consecutive `ifs` with the same condition\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                         | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`"}, {"sha": "7004910dfc775ebe170a31b5b8f6341e716f80f2", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -45,9 +45,7 @@ impl<'v> Visitor<'v> for ExVisitor<'v> {\n     fn visit_expr(&mut self, expr: &'v Expr) {\n         if let ExprClosure(_, _, ref block) = expr.node {\n             let complex = {\n-                if !block.stmts.is_empty() {\n-                    true\n-                } else {\n+                if block.stmts.is_empty() {\n                     if let Some(ref ex) = block.expr {\n                         match ex.node {\n                             ExprBlock(_) => true,\n@@ -56,6 +54,8 @@ impl<'v> Visitor<'v> for ExVisitor<'v> {\n                     } else {\n                         false\n                     }\n+                } else {\n+                    true\n                 }\n             };\n             if complex {"}, {"sha": "6dd5651e7efb92f923679fbec4469167756b974a", "filename": "src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -159,10 +159,10 @@ impl PartialOrd for Constant {\n     fn partial_cmp(&self, other: &Constant) -> Option<Ordering> {\n         match (self, other) {\n             (&Constant::Str(ref ls, ref lsty), &Constant::Str(ref rs, ref rsty)) => {\n-                if lsty != rsty {\n-                    None\n-                } else {\n+                if lsty == rsty {\n                     Some(ls.cmp(rs))\n+                } else {\n+                    None\n                 }\n             }\n             (&Constant::Byte(ref l), &Constant::Byte(ref r)) => Some(l.cmp(r)),"}, {"sha": "179ce24cfa71ac544a9f7dc766885985a6c6c8e5", "filename": "src/enum_variants.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_variants.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -89,12 +89,10 @@ impl EarlyLintPass for EnumVariantNames {\n                 let post_camel = camel_case_from(&post);\n                 post = &post[post_camel..];\n             }\n-            let (what, value) = if !pre.is_empty() {\n-                (\"pre\", pre)\n-            } else if !post.is_empty() {\n-                (\"post\", post)\n-            } else {\n-                return;\n+            let (what, value) = match (pre.is_empty(), post.is_empty()) {\n+                (true, true) => return,\n+                (false, _) => (\"pre\", pre),\n+                (true, false) => (\"post\", post),\n             };\n             span_help_and_lint(cx,\n                                ENUM_VARIANT_NAMES,"}, {"sha": "1a074a723a9cb03578ffa8b596d6c8b43417e110", "filename": "src/if_not_else.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fif_not_else.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -0,0 +1,53 @@\n+//! lint on if branches that could be swapped so no `!` operation is necessary on the condition\n+\n+use rustc::lint::*;\n+use syntax::attr::*;\n+use syntax::ast::*;\n+\n+use utils::span_help_and_lint;\n+\n+/// **What it does:** Warns on the use of `!` or `!=` in an if condition with an else branch\n+///\n+/// **Why is this bad?** Negations reduce the readability of statements\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** if !v.is_empty() { a() } else { b() }\n+declare_lint! {\n+    pub IF_NOT_ELSE, Warn,\n+    \"finds if branches that could be swapped so no negation operation is necessary on the condition\"\n+}\n+\n+pub struct IfNotElse;\n+\n+impl LintPass for IfNotElse {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IF_NOT_ELSE)\n+    }\n+}\n+\n+impl EarlyLintPass for IfNotElse {\n+    fn check_expr(&mut self, cx: &EarlyContext, item: &Expr) {\n+        if let ExprKind::If(ref cond, _, Some(ref els)) = item.node {\n+            if let ExprKind::Block(..) = els.node {\n+                match cond.node {\n+                    ExprKind::Unary(UnOp::Not, _) => {\n+                        span_help_and_lint(cx,\n+                                           IF_NOT_ELSE,\n+                                           item.span,\n+                                           \"Unnecessary boolean `not` operation\",\n+                                           \"remove the `!` and swap the blocks of the if/else\");\n+                    },\n+                    ExprKind::Binary(ref kind, _, _) if kind.node == BinOpKind::Ne => {\n+                        span_help_and_lint(cx,\n+                                           IF_NOT_ELSE,\n+                                           item.span,\n+                                           \"Unnecessary `!=` operation\",\n+                                           \"change to `==` and swap the blocks of the if/else\");\n+                    },\n+                    _ => {},\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "7436dada020d93b147b0bded7e538af6e4ecefeb", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -60,6 +60,7 @@ pub mod eta_reduction;\n pub mod format;\n pub mod formatting;\n pub mod identity_op;\n+pub mod if_not_else;\n pub mod items_after_statements;\n pub mod len_zero;\n pub mod lifetimes;\n@@ -171,6 +172,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box format::FormatMacLint);\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n+    reg.register_early_lint_pass(box if_not_else::IfNotElse);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -222,6 +224,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n         identity_op::IDENTITY_OP,\n+        if_not_else::IF_NOT_ELSE,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,"}, {"sha": "5e862382742d3e23de73fc585de4d195433cc530", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -357,10 +357,10 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n                 };\n \n                 let take: Cow<_> = if let Some(ref r) = *r {\n-                    if !is_len_call(&r, &indexed) {\n-                        format!(\".take({})\", snippet(cx, r.span, \"..\")).into()\n-                    } else {\n+                    if is_len_call(&r, &indexed) {\n                         \"\".into()\n+                    } else {\n+                        format!(\".take({})\", snippet(cx, r.span, \"..\")).into()\n                     }\n                 } else {\n                     \"\".into()"}, {"sha": "d832888606aeb3ce53d1110758f969024db829c2", "filename": "src/matches.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -249,23 +249,21 @@ fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n             };\n \n             if let Some((ref true_expr, ref false_expr)) = exprs {\n-                if !is_unit_expr(true_expr) {\n-                    if !is_unit_expr(false_expr) {\n+                match (is_unit_expr(true_expr), is_unit_expr(false_expr)) {\n+                    (false, false) =>\n                         Some(format!(\"if {} {} else {}\",\n                                      snippet(cx, ex.span, \"b\"),\n                                      expr_block(cx, true_expr, None, \"..\"),\n-                                     expr_block(cx, false_expr, None, \"..\")))\n-                    } else {\n+                                     expr_block(cx, false_expr, None, \"..\"))),\n+                    (false, true) =>\n                         Some(format!(\"if {} {}\",\n                                      snippet(cx, ex.span, \"b\"),\n-                                     expr_block(cx, true_expr, None, \"..\")))\n-                    }\n-                } else if !is_unit_expr(false_expr) {\n-                    Some(format!(\"try\\nif !{} {}\",\n-                                 snippet(cx, ex.span, \"b\"),\n-                                 expr_block(cx, false_expr, None, \"..\")))\n-                } else {\n-                    None\n+                                     expr_block(cx, true_expr, None, \"..\"))),\n+                    (true, false) =>\n+                        Some(format!(\"try\\nif !{} {}\",\n+                                     snippet(cx, ex.span, \"b\"),\n+                                     expr_block(cx, false_expr, None, \"..\"))),\n+                    (true, true) => None,\n                 }\n             } else {\n                 None"}, {"sha": "e65ef503ba52f04f7ffa249d7be874bdc770df14", "filename": "tests/compile-fail/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/tests%2Fcompile-fail%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/tests%2Fcompile-fail%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fentry.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unused)]\n+#![allow(unused, if_not_else)]\n \n #![deny(map_entry)]\n "}, {"sha": "eb716e4599ab2a1e759e0ad7a9a7e40392ecdd30", "filename": "tests/compile-fail/if_not_else.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720f992a5bc03027e64450ba51a58a5a971ae/tests%2Fcompile-fail%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720f992a5bc03027e64450ba51a58a5a971ae/tests%2Fcompile-fail%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fif_not_else.rs?ref=3b7720f992a5bc03027e64450ba51a58a5a971ae", "patch": "@@ -0,0 +1,18 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+fn bla() -> bool { unimplemented!() }\n+\n+fn main() {\n+    if !bla() { //~ ERROR: Unnecessary boolean `not` operation\n+        println!(\"Bugs\");\n+    } else {\n+        println!(\"Bunny\");\n+    }\n+    if 4 != 5 { //~ ERROR: Unnecessary `!=` operation\n+        println!(\"Bugs\");\n+    } else {\n+        println!(\"Bunny\");\n+    }\n+}"}]}