{"sha": "26e0aafb889fab89c1dee5d74131455826cfa6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTBhYWZiODg5ZmFiODljMWRlZTVkNzQxMzE0NTU4MjZjZmE2ZWQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-15T03:40:32Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-15T03:40:32Z"}, "message": "Added NumStrConv trait and impls for the string conversion functions", "tree": {"sha": "0b11d921558cd43a655bda09ae0e0474e5d5d1fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b11d921558cd43a655bda09ae0e0474e5d5d1fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e0aafb889fab89c1dee5d74131455826cfa6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e0aafb889fab89c1dee5d74131455826cfa6ed", "html_url": "https://github.com/rust-lang/rust/commit/26e0aafb889fab89c1dee5d74131455826cfa6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e0aafb889fab89c1dee5d74131455826cfa6ed/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adac6cb5c61dfae79901264af4c235b66fb6267a", "url": "https://api.github.com/repos/rust-lang/rust/commits/adac6cb5c61dfae79901264af4c235b66fb6267a", "html_url": "https://github.com/rust-lang/rust/commit/adac6cb5c61dfae79901264af4c235b66fb6267a"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "d5a76ef89d56e9efac44c71fa89d082b2ada1745", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/26e0aafb889fab89c1dee5d74131455826cfa6ed/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e0aafb889fab89c1dee5d74131455826cfa6ed/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=26e0aafb889fab89c1dee5d74131455826cfa6ed", "patch": "@@ -15,7 +15,13 @@ use char;\n use str;\n use kinds::Copy;\n use vec;\n-use num::*;\n+use num::{NumCast, Zero, One, cast, pow_with_uint};\n+use num::{Round, RoundToZero,\n+          is_NaN, is_infinity, is_neg_infinity, is_neg_zero,\n+          infinity, neg_infinity, NaN};\n+use float;\n+use f32;\n+use f64;\n \n pub enum ExponentFormat {\n     ExpNone,\n@@ -35,6 +41,107 @@ pub enum SignFormat {\n     SignAll\n }\n \n+pub trait NumStrConv {\n+    static fn has_NaN()      -> bool;\n+    static fn has_inf()      -> bool;\n+    static fn has_neg_inf()  -> bool;\n+    static fn has_neg_zero() -> bool;\n+\n+    static fn NaN()      -> Option<Self>;\n+    static fn inf()      -> Option<Self>;\n+    static fn neg_inf()  -> Option<Self>;\n+    static fn neg_zero() -> Option<Self>;\n+\n+    fn is_NaN(&self)      -> bool;\n+    fn is_inf(&self)      -> bool;\n+    fn is_neg_inf(&self)  -> bool;\n+    fn is_neg_zero(&self) -> bool;\n+\n+    fn round_to_zero(&self) -> Self;\n+    fn split_at_dot(&self) -> (Self, Self);\n+\n+}\n+\n+macro_rules! impl_NumStrConv_Floating (\n+    ($t:ty) => (\n+        impl NumStrConv for $t {\n+            static fn has_NaN()      -> bool { true }\n+            static fn has_inf()      -> bool { true }\n+            static fn has_neg_inf()  -> bool { true }\n+            static fn has_neg_zero() -> bool { true }\n+\n+            static fn NaN()      -> Option<$t> { Some( 0.0 / 0.0) }\n+            static fn inf()      -> Option<$t> { Some( 1.0 / 0.0) }\n+            static fn neg_inf()  -> Option<$t> { Some(-1.0 / 0.0) }\n+            static fn neg_zero() -> Option<$t> { Some(-0.0      ) }\n+\n+            fn is_NaN(&self)      -> bool { *self != *self }\n+            fn is_inf(&self)      -> bool {\n+                *self == NumStrConv::inf().unwrap()\n+            }\n+            fn is_neg_inf(&self)  -> bool {\n+                *self == NumStrConv::neg_inf().unwrap()\n+            }\n+            fn is_neg_zero(&self) -> bool {\n+                *self == 0.0 && (1.0 / *self).is_neg_inf()\n+            }\n+\n+            fn round_to_zero(&self) -> $t {\n+                ( if *self < 0.0 { f64::ceil(*self as f64)  }\n+                  else           { f64::floor(*self as f64) }\n+                ) as $t\n+            }\n+\n+            fn split_at_dot(&self) -> ($t, $t) {\n+                let r = self.round_to_zero();\n+                (r, *self - r)\n+            }\n+        }\n+    )\n+)\n+\n+macro_rules! impl_NumStrConv_Integer (\n+    ($t:ty) => (\n+        impl NumStrConv for $t {\n+            static fn has_NaN()      -> bool { false }\n+            static fn has_inf()      -> bool { false }\n+            static fn has_neg_inf()  -> bool { false }\n+            static fn has_neg_zero() -> bool { false }\n+\n+            static fn NaN()      -> Option<$t> { None }\n+            static fn inf()      -> Option<$t> { None }\n+            static fn neg_inf()  -> Option<$t> { None }\n+            static fn neg_zero() -> Option<$t> { None }\n+\n+            fn is_NaN(&self)      -> bool { false }\n+            fn is_inf(&self)      -> bool { false }\n+            fn is_neg_inf(&self)  -> bool { false }\n+            fn is_neg_zero(&self) -> bool { false }\n+\n+            fn round_to_zero(&self) -> $t { *self }\n+\n+            fn split_at_dot(&self) -> ($t, $t) { (*self, 0) }\n+        }\n+    )\n+)\n+\n+// XXX: Replace by two generic impls for traits 'Integral' and 'Floating'\n+impl_NumStrConv_Floating!(float)\n+impl_NumStrConv_Floating!(f32)\n+impl_NumStrConv_Floating!(f64)\n+\n+impl_NumStrConv_Integer!(int)\n+impl_NumStrConv_Integer!(i8)\n+impl_NumStrConv_Integer!(i16)\n+impl_NumStrConv_Integer!(i32)\n+impl_NumStrConv_Integer!(i64)\n+\n+impl_NumStrConv_Integer!(uint)\n+impl_NumStrConv_Integer!(u8)\n+impl_NumStrConv_Integer!(u16)\n+impl_NumStrConv_Integer!(u32)\n+impl_NumStrConv_Integer!(u64)\n+\n /**\n  * Converts a number to its string representation as a byte vector.\n  * This is meant to be a common base implementation for all numeric string"}]}