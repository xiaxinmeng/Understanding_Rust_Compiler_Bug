{"sha": "72241ad348442b44e115bbb8657b5514ff61c39b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMjQxYWQzNDg0NDJiNDRlMTE1YmJiODY1N2I1NTE0ZmY2MWMzOWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-25T14:26:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T18:01:42Z"}, "message": "move `HirId` to librustc_hir::hir_id", "tree": {"sha": "020a45eac1dfdf9d123585f25a5237b8a44156be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/020a45eac1dfdf9d123585f25a5237b8a44156be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72241ad348442b44e115bbb8657b5514ff61c39b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72241ad348442b44e115bbb8657b5514ff61c39b", "html_url": "https://github.com/rust-lang/rust/commit/72241ad348442b44e115bbb8657b5514ff61c39b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72241ad348442b44e115bbb8657b5514ff61c39b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a1407387567beb0f300ddc3ae98e274259e2b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1407387567beb0f300ddc3ae98e274259e2b78", "html_url": "https://github.com/rust-lang/rust/commit/7a1407387567beb0f300ddc3ae98e274259e2b78"}], "stats": {"total": 168, "additions": 83, "deletions": 85}, "files": [{"sha": "f6085c5f87301e6de24e90dd552500ad94ece79b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 85, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/72241ad348442b44e115bbb8657b5514ff61c39b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72241ad348442b44e115bbb8657b5514ff61c39b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=72241ad348442b44e115bbb8657b5514ff61c39b", "patch": "@@ -9,14 +9,13 @@ pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n \n use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use crate::hir::def_id::{DefId, DefIndex};\n use crate::ty::query::Providers;\n \n use errors::FatalError;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable;\n-use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -35,96 +34,14 @@ use syntax::util::parser::ExprPrecedence;\n pub mod check_attr;\n pub mod def;\n pub use rustc_hir::def_id;\n+pub use rustc_hir::hir_id::*;\n pub mod intravisit;\n pub mod itemlikevisit;\n pub mod map;\n pub mod pat_util;\n pub mod print;\n pub mod upvars;\n \n-/// Uniquely identifies a node in the HIR of the current crate. It is\n-/// composed of the `owner`, which is the `DefIndex` of the directly enclosing\n-/// `hir::Item`, `hir::TraitItem`, or `hir::ImplItem` (i.e., the closest \"item-like\"),\n-/// and the `local_id` which is unique within the given owner.\n-///\n-/// This two-level structure makes for more stable values: One can move an item\n-/// around within the source code, or add or remove stuff before it, without\n-/// the `local_id` part of the `HirId` changing, which is a very useful property in\n-/// incremental compilation where we have to persist things through changes to\n-/// the code base.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n-pub struct HirId {\n-    pub owner: DefIndex,\n-    pub local_id: ItemLocalId,\n-}\n-\n-impl HirId {\n-    pub fn owner_def_id(self) -> DefId {\n-        DefId::local(self.owner)\n-    }\n-\n-    pub fn owner_local_def_id(self) -> LocalDefId {\n-        LocalDefId::from_def_id(DefId::local(self.owner))\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedEncodable for HirId {\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        let HirId { owner, local_id } = *self;\n-\n-        owner.encode(s)?;\n-        local_id.encode(s)?;\n-        Ok(())\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedDecodable for HirId {\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<HirId, D::Error> {\n-        let owner = DefIndex::decode(d)?;\n-        let local_id = ItemLocalId::decode(d)?;\n-\n-        Ok(HirId { owner, local_id })\n-    }\n-}\n-\n-impl fmt::Display for HirId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}\", self)\n-    }\n-}\n-\n-rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n-rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n-\n-// Hack to ensure that we don't try to access the private parts of `ItemLocalId` in this module.\n-mod item_local_id_inner {\n-    use rustc_index::vec::Idx;\n-    use rustc_macros::HashStable;\n-    rustc_index::newtype_index! {\n-        /// An `ItemLocalId` uniquely identifies something within a given \"item-like\";\n-        /// that is, within a `hir::Item`, `hir::TraitItem`, or `hir::ImplItem`. There is no\n-        /// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n-        /// the node's position within the owning item in any way, but there is a\n-        /// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n-        /// integers starting at zero, so a mapping that maps all or most nodes within\n-        /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n-        /// tree or hash map.\n-        pub struct ItemLocalId {\n-            derive [HashStable]\n-        }\n-    }\n-}\n-\n-pub use self::item_local_id_inner::ItemLocalId;\n-\n-/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n-pub const CRATE_HIR_ID: HirId =\n-    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32_const(0) };\n-\n-pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n-\n-pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;\n-\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Lifetime {\n     pub hir_id: HirId,"}, {"sha": "462946411718bc667c1db34297673e17b22aaa4c", "filename": "src/librustc_hir/hir_id.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/72241ad348442b44e115bbb8657b5514ff61c39b/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72241ad348442b44e115bbb8657b5514ff61c39b/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=72241ad348442b44e115bbb8657b5514ff61c39b", "patch": "@@ -0,0 +1,79 @@\n+use crate::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n+use std::fmt;\n+\n+/// Uniquely identifies a node in the HIR of the current crate. It is\n+/// composed of the `owner`, which is the `DefIndex` of the directly enclosing\n+/// `hir::Item`, `hir::TraitItem`, or `hir::ImplItem` (i.e., the closest \"item-like\"),\n+/// and the `local_id` which is unique within the given owner.\n+///\n+/// This two-level structure makes for more stable values: One can move an item\n+/// around within the source code, or add or remove stuff before it, without\n+/// the `local_id` part of the `HirId` changing, which is a very useful property in\n+/// incremental compilation where we have to persist things through changes to\n+/// the code base.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n+pub struct HirId {\n+    pub owner: DefIndex,\n+    pub local_id: ItemLocalId,\n+}\n+\n+impl HirId {\n+    pub fn owner_def_id(self) -> DefId {\n+        DefId::local(self.owner)\n+    }\n+\n+    pub fn owner_local_def_id(self) -> LocalDefId {\n+        LocalDefId::from_def_id(DefId::local(self.owner))\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedEncodable for HirId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        let HirId { owner, local_id } = *self;\n+\n+        owner.encode(s)?;\n+        local_id.encode(s)?;\n+        Ok(())\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedDecodable for HirId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<HirId, D::Error> {\n+        let owner = DefIndex::decode(d)?;\n+        let local_id = ItemLocalId::decode(d)?;\n+\n+        Ok(HirId { owner, local_id })\n+    }\n+}\n+\n+impl fmt::Display for HirId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self)\n+    }\n+}\n+\n+rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n+rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n+\n+use rustc_index::vec::Idx;\n+rustc_index::newtype_index! {\n+    /// An `ItemLocalId` uniquely identifies something within a given \"item-like\";\n+    /// that is, within a `hir::Item`, `hir::TraitItem`, or `hir::ImplItem`. There is no\n+    /// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n+    /// the node's position within the owning item in any way, but there is a\n+    /// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n+    /// integers starting at zero, so a mapping that maps all or most nodes within\n+    /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n+    /// tree or hash map.\n+    pub struct ItemLocalId { .. }\n+}\n+rustc_data_structures::impl_stable_hash_via_hash!(ItemLocalId);\n+\n+/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n+pub const CRATE_HIR_ID: HirId =\n+    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32_const(0) };\n+\n+pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n+\n+pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "7e778736634d3d76c26c707b8fd04f3d067574fa", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72241ad348442b44e115bbb8657b5514ff61c39b/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72241ad348442b44e115bbb8657b5514ff61c39b/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=72241ad348442b44e115bbb8657b5514ff61c39b", "patch": "@@ -1,3 +1,5 @@\n #![feature(specialization)]\n \n pub mod def_id;\n+pub mod hir_id;\n+pub use hir_id::*;"}]}