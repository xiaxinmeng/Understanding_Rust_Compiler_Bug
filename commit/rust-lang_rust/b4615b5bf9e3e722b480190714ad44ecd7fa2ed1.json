{"sha": "b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "node_id": "C_kwDOAAsO6NoAKGI0NjE1YjViZjllM2U3MjJiNDgwMTkwNzE0YWQ0NGVjZDdmYTJlZDE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-06T19:33:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T19:33:17Z"}, "message": "Rollup merge of #89324 - yoshuawuyts:hardware-parallelism, r=m-ou-se\n\nRename `std::thread::available_conccurrency` to `std::thread::available_parallelism`\n\n_Tracking issue: https://github.com/rust-lang/rust/issues/74479_\n\nThis PR renames  `std::thread::available_conccurrency` to `std::thread::available_parallelism`.\n\n## Rationale\n\nThe API was initially named `std::thread::hardware_concurrency`, mirroring the [C++ API of the same name](https://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency). We eventually decided to omit any reference to the word \"hardware\" after [this comment](https://github.com/rust-lang/rust/pull/74480#issuecomment-662045841). And so we ended up with `available_concurrency` instead.\n\n---\n\nFor a talk I was preparing this week I was reading through [\"Understanding and expressing scalable concurrency\" (A. Turon, 2013)](http://aturon.github.io/academic/turon-thesis.pdf), and the following passage stood out to me (emphasis mine):\n\n> __Concurrency is a system-structuring mechanism.__ An interactive system that deals with disparate asynchronous events is naturally structured by division into concurrent threads with disparate responsibilities. Doing so creates a better fit between problem and solution, and can also decrease the average latency of the system by preventing long-running computations from obstructing quicker ones.\n\n> __Parallelism is a resource.__ A given machine provides a certain capacity for parallelism, i.e., a bound on the number of computations it can perform simultaneously. The goal is to maximize throughput by intelligently using this resource. For interactive systems, parallelism can decrease latency as well.\n\n_Chapter 2.1: Concurrency is not Parallelism. Page 30._\n\n---\n\n_\"Concurrency is a system-structuring mechanism. Parallelism is a resource.\"_ \u2014 It feels like this accurately captures the way we should be thinking about these APIs. What this API returns is not \"the amount of concurrency available to the program\" which is a property of the program, and thus even with just a single thread is effectively unbounded. But instead it returns \"the amount of _parallelism_ available to the program\", which is a resource hard-constrained by the machine's capacity (and can be further restricted by e.g. operating systems).\n\nThat's why I'd like to propose we rename this API from `available_concurrency` to `available_parallelism`. This still meets the criteria we previously established of not attempting to define what exactly we mean by \"hardware\", \"threads\", and other such words. Instead we only talk about \"concurrency\" as an abstract resource available to our program.\n\nr? `@joshtriplett`", "tree": {"sha": "0def5076a01f2efeac8425bee03e7f6cd7ae22b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0def5076a01f2efeac8425bee03e7f6cd7ae22b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXfn9CRBK7hj4Ov3rIwAANVoIAKgvuSmAC5jXtIbHx+A6DdXe\nffp0ZO6NgTzB7xGVpWRXjjFDivWKEIWX9755CxwmIDGfgyfdYbDHZvW1s5IuB+fs\nmNbpeYcvtvrqAvZ+P+4Qx6ludfYQwTcdDzScZi+CUp/t1jXHDjMuVzWKPgZxGTZm\nnjRd6buTOoabKbOq5RaK3fir/NjD9Pa4KSh0MvnYnZ+9DI48pE+PgUR4hA8H2Kl/\nu7/Qg/WePmZHXlE2d5yTPH08hA3ZeJHPmrk6024Akbzea52D+hAAIdrjir6+QH7K\n/AgUNrSKU2V/hgxgeYEc2LElFDPUDSK3gIumuayC+3xohWHu6l7GPOtt36xzygo=\n=zVif\n-----END PGP SIGNATURE-----\n", "payload": "tree 0def5076a01f2efeac8425bee03e7f6cd7ae22b4\nparent 14da7fc9aecd3db114441ba2f0320c75cd066d77\nparent 03fbc160cd79556f9b99c37c2580e3da9826c432\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633548797 -0700\ncommitter GitHub <noreply@github.com> 1633548797 -0700\n\nRollup merge of #89324 - yoshuawuyts:hardware-parallelism, r=m-ou-se\n\nRename `std::thread::available_conccurrency` to `std::thread::available_parallelism`\n\n_Tracking issue: https://github.com/rust-lang/rust/issues/74479_\n\nThis PR renames  `std::thread::available_conccurrency` to `std::thread::available_parallelism`.\n\n## Rationale\n\nThe API was initially named `std::thread::hardware_concurrency`, mirroring the [C++ API of the same name](https://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency). We eventually decided to omit any reference to the word \"hardware\" after [this comment](https://github.com/rust-lang/rust/pull/74480#issuecomment-662045841). And so we ended up with `available_concurrency` instead.\n\n---\n\nFor a talk I was preparing this week I was reading through [\"Understanding and expressing scalable concurrency\" (A. Turon, 2013)](http://aturon.github.io/academic/turon-thesis.pdf), and the following passage stood out to me (emphasis mine):\n\n> __Concurrency is a system-structuring mechanism.__ An interactive system that deals with disparate asynchronous events is naturally structured by division into concurrent threads with disparate responsibilities. Doing so creates a better fit between problem and solution, and can also decrease the average latency of the system by preventing long-running computations from obstructing quicker ones.\n\n> __Parallelism is a resource.__ A given machine provides a certain capacity for parallelism, i.e., a bound on the number of computations it can perform simultaneously. The goal is to maximize throughput by intelligently using this resource. For interactive systems, parallelism can decrease latency as well.\n\n_Chapter 2.1: Concurrency is not Parallelism. Page 30._\n\n---\n\n_\"Concurrency is a system-structuring mechanism. Parallelism is a resource.\"_ \u2014 It feels like this accurately captures the way we should be thinking about these APIs. What this API returns is not \"the amount of concurrency available to the program\" which is a property of the program, and thus even with just a single thread is effectively unbounded. But instead it returns \"the amount of _parallelism_ available to the program\", which is a resource hard-constrained by the machine's capacity (and can be further restricted by e.g. operating systems).\n\nThat's why I'd like to propose we rename this API from `available_concurrency` to `available_parallelism`. This still meets the criteria we previously established of not attempting to define what exactly we mean by \"hardware\", \"threads\", and other such words. Instead we only talk about \"concurrency\" as an abstract resource available to our program.\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "html_url": "https://github.com/rust-lang/rust/commit/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14da7fc9aecd3db114441ba2f0320c75cd066d77", "url": "https://api.github.com/repos/rust-lang/rust/commits/14da7fc9aecd3db114441ba2f0320c75cd066d77", "html_url": "https://github.com/rust-lang/rust/commit/14da7fc9aecd3db114441ba2f0320c75cd066d77"}, {"sha": "03fbc160cd79556f9b99c37c2580e3da9826c432", "url": "https://api.github.com/repos/rust-lang/rust/commits/03fbc160cd79556f9b99c37c2580e3da9826c432", "html_url": "https://github.com/rust-lang/rust/commit/03fbc160cd79556f9b99c37c2580e3da9826c432"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "81b21fbbb1656c8758ffd982f153a85e7de04486", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -97,7 +97,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "d745a619614041dc7e9eb9335f4f3bb48ee97d50", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -137,7 +137,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "891f3413e9138fd4f93ae6a38bf8e392380e8625", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -263,7 +263,7 @@ impl Drop for Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     cfg_if::cfg_if! {\n         if #[cfg(any(\n             target_os = \"android\","}, {"sha": "a8db251de201768e75c6383decf0a8bb97d5dd99", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -31,7 +31,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "2e4e474c4492c55a5b4c4e1c1373cd2ed898bdac", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -64,7 +64,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "16418a06226e4884a89e022feb6152f255ecae7d", "filename": "library/std/src/sys/wasm/atomics/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -40,7 +40,7 @@ impl Thread {\n     pub fn join(self) {}\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     unsupported()\n }\n "}, {"sha": "75f70c2076ee13efc9578ad91804aa82adc8d756", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -100,7 +100,7 @@ impl Thread {\n     }\n }\n \n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     let res = unsafe {\n         let mut sysinfo: c::SYSTEM_INFO = crate::mem::zeroed();\n         c::GetSystemInfo(&mut sysinfo);"}, {"sha": "707a55b625814f4f25ae63ced2abcfd01727becb", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -1453,12 +1453,14 @@ fn _assert_sync_and_send() {\n ///\n /// ```\n /// # #![allow(dead_code)]\n-/// #![feature(available_concurrency)]\n+/// #![feature(available_parallelism)]\n /// use std::thread;\n ///\n-/// let count = thread::available_concurrency().map(|n| n.get()).unwrap_or(1);\n+/// let count = thread::available_parallelism().map(|n| n.get()).unwrap_or(1);\n /// ```\n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n-    imp::available_concurrency()\n+#[doc(alias = \"hardware_concurrency\")] // Alias for C++ `std::thread::hardware_concurrency`.\n+#[doc(alias = \"available_concurrency\")] // Alias for a name we gave this API on unstable.\n+#[unstable(feature = \"available_parallelism\", issue = \"74479\")]\n+pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n+    imp::available_parallelism()\n }"}, {"sha": "e25f524ec05667f52fa58a7c06d0c5ff99b11cdc", "filename": "library/test/src/helpers/concurrency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -9,6 +9,6 @@ pub fn get_concurrency() -> usize {\n             _ => panic!(\"RUST_TEST_THREADS is `{}`, should be a positive integer.\", value),\n         }\n     } else {\n-        thread::available_concurrency().map(|n| n.get()).unwrap_or(1)\n+        thread::available_parallelism().map(|n| n.get()).unwrap_or(1)\n     }\n }"}, {"sha": "6732c6c61c204f59ee52cee2e9883d6f7a78e9b4", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -23,7 +23,7 @@\n #![feature(libc)]\n #![feature(rustc_private)]\n #![feature(nll)]\n-#![feature(available_concurrency)]\n+#![feature(available_parallelism)]\n #![feature(bench_black_box)]\n #![feature(internal_output_capture)]\n #![feature(panic_unwind)]"}, {"sha": "04e20fdd41c0f89f6b906b53175d438ec74a08e9", "filename": "src/doc/rustc/src/tests/index.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/b4615b5bf9e3e722b480190714ad44ecd7fa2ed1/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md?ref=b4615b5bf9e3e722b480190714ad44ecd7fa2ed1", "patch": "@@ -161,7 +161,7 @@ The following options affect how tests are executed.\n \n Sets the number of threads to use for running tests in parallel. By default,\n uses the amount of concurrency available on the hardware as indicated by\n-[`available_concurrency`].\n+[`available_parallelism`].\n \n This can also be specified with the `RUST_TEST_THREADS` environment variable.\n \n@@ -265,7 +265,7 @@ Experimental support for using custom test harnesses is available on the\n \n [`--test` option]: ../command-line-arguments.md#option-test\n [`-Z panic-abort-tests`]: https://github.com/rust-lang/rust/issues/67650\n-[`available_concurrency`]: ../../std/thread/fn.available_concurrency.html\n+[`available_parallelism`]: ../../std/thread/fn.available_parallelism.html\n [`cargo test`]: ../../cargo/commands/cargo-test.html\n [`libtest`]: ../../test/index.html\n [`main` function]: ../../reference/crates-and-source-files.html#main-functions"}]}