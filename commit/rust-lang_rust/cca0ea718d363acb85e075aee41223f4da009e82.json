{"sha": "cca0ea718d363acb85e075aee41223f4da009e82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYTBlYTcxOGQzNjNhY2I4NWUwNzVhZWU0MTIyM2Y0ZGEwMDllODI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-27T00:49:38Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-28T22:59:31Z"}, "message": "Replace illegal with invalid in most diagnostics", "tree": {"sha": "7c5686962bd85a27ff754f57a107b60086aac3b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c5686962bd85a27ff754f57a107b60086aac3b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca0ea718d363acb85e075aee41223f4da009e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca0ea718d363acb85e075aee41223f4da009e82", "html_url": "https://github.com/rust-lang/rust/commit/cca0ea718d363acb85e075aee41223f4da009e82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca0ea718d363acb85e075aee41223f4da009e82/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffcdf0881b37340c9c90bdfd8b96149090a62378", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcdf0881b37340c9c90bdfd8b96149090a62378", "html_url": "https://github.com/rust-lang/rust/commit/ffcdf0881b37340c9c90bdfd8b96149090a62378"}], "stats": {"total": 123, "additions": 61, "deletions": 62}, "files": [{"sha": "95b8161ac342979d4e84aa3aaf02563d79585d71", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -674,8 +674,7 @@ impl<'a> LifetimeContext<'a> {\n             for lifetime in lifetimes {\n                 if special_idents.iter().any(|&i| i.name == lifetime.lifetime.name) {\n                     span_err!(self.sess, lifetime.lifetime.span, E0262,\n-                        \"illegal lifetime parameter name: `{}`\",\n-                                lifetime.lifetime.name);\n+                        \"invalid lifetime parameter name: `{}`\", lifetime.lifetime.name);\n                 }\n             }\n "}, {"sha": "2dae1aca8351daf56fab345303fa42273e875074", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -2325,7 +2325,7 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,\n-                &format!(\"deref invoked on expr of illegal type {:?}\",\n+                &format!(\"deref invoked on expr of invalid type {:?}\",\n                         datum.ty));\n         }\n     };"}, {"sha": "819f44372979613323413ddc33d46ae50ad67b3c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -3468,7 +3468,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         let tcx = fcx.tcx();\n         if !tcx.expr_is_lval(&**lhs) {\n             span_err!(tcx.sess, expr.span, E0070,\n-                \"illegal left-hand side expression\");\n+                \"invalid left-hand side expression\");\n         }\n \n         let lhs_ty = fcx.expr_ty(&**lhs);"}, {"sha": "c6d13d3b0a5ca6326e4860b5c45257fcf945c53c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -57,7 +57,7 @@ pub fn check_binop_assign<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n \n     let tcx = fcx.tcx();\n     if !tcx.expr_is_lval(lhs_expr) {\n-        span_err!(tcx.sess, lhs_expr.span, E0067, \"illegal left-hand side expression\");\n+        span_err!(tcx.sess, lhs_expr.span, E0067, \"invalid left-hand side expression\");\n     }\n \n     fcx.require_expr_have_sized_type(lhs_expr, traits::AssignmentLhsSized);"}, {"sha": "019a8404dfb0df00c1624837b18172e6f83d24f2", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -694,7 +694,7 @@ impl<'a> StringReader<'a> {\n             accum_int *= 16;\n             accum_int += c.to_digit(16).unwrap_or_else(|| {\n                 self.err_span_char(self.last_pos, self.pos,\n-                              \"illegal character in numeric character escape\", c);\n+                              \"invalid character in numeric character escape\", c);\n \n                 valid = false;\n                 0\n@@ -714,7 +714,7 @@ impl<'a> StringReader<'a> {\n             Some(_) => valid,\n             None => {\n                 let last_bpos = self.last_pos;\n-                self.err_span_(start_bpos, last_bpos, \"illegal numeric character escape\");\n+                self.err_span_(start_bpos, last_bpos, \"invalid numeric character escape\");\n                 false\n             }\n         }\n@@ -846,7 +846,7 @@ impl<'a> StringReader<'a> {\n                                      \"unterminated unicode escape (needed a `}`)\");\n                 } else {\n                     self.err_span_char(self.last_pos, self.pos,\n-                                   \"illegal character in unicode escape\", c);\n+                                   \"invalid character in unicode escape\", c);\n                 }\n                 valid = false;\n                 0\n@@ -862,7 +862,7 @@ impl<'a> StringReader<'a> {\n         }\n \n         if valid && (char::from_u32(accum_int).is_none() || count == 0) {\n-            self.err_span_(start_bpos, self.last_pos, \"illegal unicode character escape\");\n+            self.err_span_(start_bpos, self.last_pos, \"invalid unicode character escape\");\n             valid = false;\n         }\n \n@@ -1138,8 +1138,8 @@ impl<'a> StringReader<'a> {\n                 let last_bpos = self.last_pos;\n                 let curr_char = self.curr.unwrap();\n                 self.fatal_span_char(start_bpos, last_bpos,\n-                                \"only `#` is allowed in raw string delimitation; \\\n-                                 found illegal character\",\n+                                \"found invalid character; \\\n+                                 only `#` is allowed in raw string delimitation\",\n                                 curr_char);\n             }\n             self.bump();\n@@ -1323,8 +1323,8 @@ impl<'a> StringReader<'a> {\n             let last_pos = self.last_pos;\n             let ch = self.curr.unwrap();\n             self.fatal_span_char(start_bpos, last_pos,\n-                            \"only `#` is allowed in raw string delimitation; \\\n-                             found illegal character\",\n+                            \"found invalid character; \\\n+                             only `#` is allowed in raw string delimitation\",\n                             ch);\n         }\n         self.bump();"}, {"sha": "c5a73601d895c93dd495755f765e56020dff8c43", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -446,11 +446,11 @@ fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,\n         Some(suf) => {\n             if suf.len() >= 2 && looks_like_width_suffix(&['f'], suf) {\n                 // if it looks like a width, lets try to be helpful.\n-                sd.span_err(sp, &*format!(\"illegal width `{}` for float literal, \\\n-                                          valid widths are 32 and 64\", &suf[1..]));\n+                sd.span_err(sp, &*format!(\"invalid width `{}` for float literal\", &suf[1..]));\n+                sd.fileline_help(sp, \"valid widths are 32 and 64\");\n             } else {\n-                sd.span_err(sp, &*format!(\"illegal suffix `{}` for float literal, \\\n-                                          valid suffixes are `f32` and `f64`\", suf));\n+                sd.span_err(sp, &*format!(\"invalid suffix `{}` for float literal\", suf));\n+                sd.fileline_help(sp, \"valid suffixes are `f32` and `f64`\");\n             }\n \n             ast::LitFloatUnsuffixed(data)\n@@ -619,11 +619,11 @@ pub fn integer_lit(s: &str,\n                 // i<digits> and u<digits> look like widths, so lets\n                 // give an error message along those lines\n                 if looks_like_width_suffix(&['i', 'u'], suf) {\n-                    sd.span_err(sp, &*format!(\"illegal width `{}` for integer literal; \\\n-                                              valid widths are 8, 16, 32 and 64\",\n+                    sd.span_err(sp, &*format!(\"invalid width `{}` for integer literal\",\n                                               &suf[1..]));\n+                    sd.fileline_help(sp, \"valid widths are 8, 16, 32 and 64\");\n                 } else {\n-                    sd.span_err(sp, &*format!(\"illegal suffix `{}` for numeric literal\", suf));\n+                    sd.span_err(sp, &*format!(\"invalid suffix `{}` for numeric literal\", suf));\n                     sd.fileline_help(sp, \"the suffix must be one of the integral types \\\n                                       (`u32`, `isize`, etc)\");\n                 }"}, {"sha": "11611c9adb0bc57996f33213f51d919ac09873e4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -681,7 +681,7 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                self.span_err(sp, &*format!(\"{} with a suffix is illegal\", kind));\n+                self.span_err(sp, &*format!(\"{} with a suffix is invalid\", kind));\n             }\n         }\n     }\n@@ -5286,7 +5286,7 @@ impl<'a> Parser<'a> {\n                         let last_span = self.last_span;\n                         self.span_err(\n                             last_span,\n-                            &format!(\"illegal ABI: expected one of [{}], \\\n+                            &format!(\"invalid ABI: expected one of [{}], \\\n                                      found `{}`\",\n                                     abi::all_names().join(\", \"),\n                                     s));"}, {"sha": "c7d2f2c472f49e15bc94f39232a4145be2ada6ab", "filename": "src/test/compile-fail/bad-expr-lhs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn main() {\n-    1 = 2; //~ ERROR illegal left-hand side expression\n-    1 += 2; //~ ERROR illegal left-hand side expression\n-    (1, 2) = (3, 4); //~ ERROR illegal left-hand side expression\n+    1 = 2; //~ ERROR invalid left-hand side expression\n+    1 += 2; //~ ERROR invalid left-hand side expression\n+    (1, 2) = (3, 4); //~ ERROR invalid left-hand side expression\n \n     let (a, b) = (1, 2);\n-    (a, b) = (3, 4); //~ ERROR illegal left-hand side expression\n+    (a, b) = (3, 4); //~ ERROR invalid left-hand side expression\n \n-    None = Some(3); //~ ERROR illegal left-hand side expression\n+    None = Some(3); //~ ERROR invalid left-hand side expression\n }"}, {"sha": "311280bd497605f429b179754bc9b60586e7338d", "filename": "src/test/compile-fail/issue-13407.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -14,6 +14,6 @@ mod A {\n \n fn main() {\n     A::C = 1;\n-    //~^ ERROR: illegal left-hand side expression\n+    //~^ ERROR: invalid left-hand side expression\n     //~| ERROR: mismatched types\n }"}, {"sha": "9a71dc980149c18e9458229affda4fcd44e8b687", "filename": "src/test/compile-fail/old-suffixes-are-really-forbidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let a = 1_is; //~ ERROR illegal suffix\n-    let b = 2_us; //~ ERROR illegal suffix\n+    let a = 1_is; //~ ERROR invalid suffix\n+    let b = 2_us; //~ ERROR invalid suffix\n }"}, {"sha": "69d63f3820c6c257a38da6a19e72fb4566e32e00", "filename": "src/test/compile-fail/regions-name-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<'static> { //~ ERROR illegal lifetime parameter name: `'static`\n+struct Foo<'static> { //~ ERROR invalid lifetime parameter name: `'static`\n     x: &'static isize\n }\n "}, {"sha": "a2ee2f6e88ca646f54f024f07bf6c24a8b6179b1", "filename": "src/test/parse-fail/bad-lit-suffixes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -12,28 +12,28 @@\n \n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is illegal\n+    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n     fn foo() {}\n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is illegal\n+    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n {}\n \n fn main() {\n-    \"\"suffix; //~ ERROR str literal with a suffix is illegal\n-    b\"\"suffix; //~ ERROR binary str literal with a suffix is illegal\n-    r#\"\"#suffix; //~ ERROR str literal with a suffix is illegal\n-    br#\"\"#suffix; //~ ERROR binary str literal with a suffix is illegal\n-    'a'suffix; //~ ERROR char literal with a suffix is illegal\n-    b'a'suffix; //~ ERROR byte literal with a suffix is illegal\n+    \"\"suffix; //~ ERROR str literal with a suffix is invalid\n+    b\"\"suffix; //~ ERROR binary str literal with a suffix is invalid\n+    r#\"\"#suffix; //~ ERROR str literal with a suffix is invalid\n+    br#\"\"#suffix; //~ ERROR binary str literal with a suffix is invalid\n+    'a'suffix; //~ ERROR char literal with a suffix is invalid\n+    b'a'suffix; //~ ERROR byte literal with a suffix is invalid\n \n-    1234u1024; //~ ERROR illegal width `1024` for integer literal\n-    1234i1024; //~ ERROR illegal width `1024` for integer literal\n-    1234f1024; //~ ERROR illegal width `1024` for float literal\n-    1234.5f1024; //~ ERROR illegal width `1024` for float literal\n+    1234u1024; //~ ERROR invalid width `1024` for integer literal\n+    1234i1024; //~ ERROR invalid width `1024` for integer literal\n+    1234f1024; //~ ERROR invalid width `1024` for float literal\n+    1234.5f1024; //~ ERROR invalid width `1024` for float literal\n \n-    1234suffix; //~ ERROR illegal suffix `suffix` for numeric literal\n-    0b101suffix; //~ ERROR illegal suffix `suffix` for numeric literal\n-    1.0suffix; //~ ERROR illegal suffix `suffix` for float literal\n-    1.0e10suffix; //~ ERROR illegal suffix `suffix` for float literal\n+    1234suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n+    0b101suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n+    1.0suffix; //~ ERROR invalid suffix `suffix` for float literal\n+    1.0e10suffix; //~ ERROR invalid suffix `suffix` for float literal\n }"}, {"sha": "3321f2450c1885b6016eb7be3b1f479ef7c93f3e", "filename": "src/test/parse-fail/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -17,7 +17,7 @@ static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b'\\f';  //~ ERROR unknown byte escape\n-    b'\\x0Z';  //~ ERROR illegal character in numeric character escape: Z\n+    b'\\x0Z';  //~ ERROR invalid character in numeric character escape: Z\n     b'\t';  //~ ERROR byte constant must be escaped\n     b''';  //~ ERROR byte constant must be escaped\n     b'\u00e9';  //~ ERROR byte constant must be ASCII"}, {"sha": "22f123416f26e75d168e2de52b3fa0b3ff626dee", "filename": "src/test/parse-fail/byte-string-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -17,7 +17,7 @@ static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b\"\\f\";  //~ ERROR unknown byte escape\n-    b\"\\x0Z\";  //~ ERROR illegal character in numeric character escape: Z\n+    b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: Z\n     b\"\u00e9\";  //~ ERROR byte constant must be ASCII\n     b\"a  //~ ERROR unterminated double quote byte string\n }"}, {"sha": "d2f78ef897b353da482e94178131040c5b77aaca", "filename": "src/test/parse-fail/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -23,25 +23,25 @@ fn main() {\n     //~^ ERROR numeric character escape is too short\n \n     let _ = b'\\xxy';\n-    //~^ ERROR illegal character in numeric character escape: x\n-    //~^^ ERROR illegal character in numeric character escape: y\n+    //~^ ERROR invalid character in numeric character escape: x\n+    //~^^ ERROR invalid character in numeric character escape: y\n \n     let _ = '\\x5';\n     //~^ ERROR numeric character escape is too short\n \n     let _ = '\\xxy';\n-    //~^ ERROR illegal character in numeric character escape: x\n-    //~^^ ERROR illegal character in numeric character escape: y\n+    //~^ ERROR invalid character in numeric character escape: x\n+    //~^^ ERROR invalid character in numeric character escape: y\n \n     let _ = b\"\\u{a4a4} \\xf \\u\";\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n-    //~^^ ERROR illegal character in numeric character escape:\n+    //~^^ ERROR invalid character in numeric character escape:\n     //~^^^ ERROR incorrect unicode escape sequence\n     //~^^^^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n \n     let _ = \"\\u{ffffff} \\xf \\u\";\n-    //~^ ERROR illegal unicode character escape\n-    //~^^ ERROR illegal character in numeric character escape:\n+    //~^ ERROR invalid unicode character escape\n+    //~^^ ERROR invalid character in numeric character escape:\n     //~^^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n     //~^^^^ ERROR incorrect unicode escape sequence\n }"}, {"sha": "e152a369290b71f6861f993f9f7ca07596c16c77", "filename": "src/test/parse-fail/issue-8537.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fissue-8537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fissue-8537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-8537.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -Z parse-only\n \n pub extern\n-  \"invalid-ab_isize\" //~ ERROR illegal ABI\n+  \"invalid-ab_isize\" //~ ERROR invalid ABI\n fn foo() {}\n \n fn main() {}"}, {"sha": "d12bb63111b9efb287db4d87c045e830303d802b", "filename": "src/test/parse-fail/new-unicode-escapes-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n pub fn main() {\n-    let s = \"\\u{d805}\"; //~ ERROR illegal unicode character escape\n+    let s = \"\\u{d805}\"; //~ ERROR invalid unicode character escape\n }"}, {"sha": "fe125da1755bd6c52c4f0bd4ddf7a8977568671f", "filename": "src/test/parse-fail/new-unicode-escapes-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     let s = \"\\u{lol}\";\n-     //~^ ERROR illegal character in unicode escape: l\n-     //~^^ ERROR illegal character in unicode escape: o\n-     //~^^^ ERROR illegal character in unicode escape: l\n+     //~^ ERROR invalid character in unicode escape: l\n+     //~^^ ERROR invalid character in unicode escape: o\n+     //~^^^ ERROR invalid character in unicode escape: l\n }"}, {"sha": "3fc5f8aae1876a80394db694213dbaea0e52c4f9", "filename": "src/test/parse-fail/raw-str-delim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca0ea718d363acb85e075aee41223f4da009e82/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs?ref=cca0ea718d363acb85e075aee41223f4da009e82", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n static s: &'static str =\n-    r#x\"#\"x# //~ ERROR only `#` is allowed in raw string delimitation; found illegal character\n+    r#x\"#\"x# //~ ERROR found invalid character; only `#` is allowed in raw string delimitation\n ;"}]}