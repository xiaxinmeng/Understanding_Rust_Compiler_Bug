{"sha": "d51c1f62178c383363a2d95e865131d9a7b969d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MWMxZjYyMTc4YzM4MzM2M2EyZDk1ZTg2NTEzMWQ5YTdiOTY5ZDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-15T14:29:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-15T14:29:01Z"}, "message": "Merge #4448\n\n4448: Generate configuration for launch.json r=vsrs a=vsrs\n\nThis PR adds two new commands: `\"rust-analyzer.debug\"` and `\"rust-analyzer.newDebugConfig\"`. The former is a supplement to the existing `\"rust-analyzer.run\"` command and works the same way: asks for a runnable and starts new debug session. The latter allows adding a new configuration to **launch.json** (or to update an existing one).\r\n\r\nIf the new option `\"rust-analyzer.debug.useLaunchJson\"` is set to true then `\"rust-analyzer.debug\"` and Debug Lens will first look for existing debug configuration in **launch.json**. That is, it has become possible to specify startup arguments, env variables, etc.\r\n\r\n`\"rust-analyzer.debug.useLaunchJson\"` is false by default, but it might be worth making true the default value. Personally I prefer true, but I'm not sure if it is good for all value.\r\n\r\n----\r\nI think that this PR also solves https://github.com/rust-analyzer/rust-analyzer/issues/3441.\r\nBoth methods to update launch.json mentioned in the issue do not work:\r\n1. Menu. It is only possible to add a launch.json configuration template via a debug adapter. And anyway it's only a template and it is impossible to specify arguments from an extension.\r\n\r\n2. DebugConfigurationProvider. The exact opposite situation: it is possible to specify all debug session settings, but it is impossible to export these settings to launch.json.\r\n\r\nSeparate `\"rust-analyzer.newDebugConfig\"` command looks better for me.\r\n\r\n----\r\nFixes #4450\r\nFixes #3441\n\nCo-authored-by: vsrs <vit@conrlab.com>\nCo-authored-by: vsrs <62505555+vsrs@users.noreply.github.com>", "tree": {"sha": "5235615134ab3798f21a167c71ce175795fc6798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5235615134ab3798f21a167c71ce175795fc6798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d51c1f62178c383363a2d95e865131d9a7b969d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevqctCRBK7hj4Ov3rIwAAdHIIAI+yBgxStb5G0T5Aa9bGE31a\njT0UO91uy0Xf7/Wh8d6/WIz/5MqxipJ49wdJEokjEzZ6xXeGHxM9gMIzamlxa0KL\nsZs+oQZTlwMStHCGECTwFthqzI/LsGtRo9aX2dl0qMJ5EFEZ7ad0k/kPRJjkqaaU\nvdIzV/Pu+haLqcLKNwE70gRfNZSOvFNSkRBVuE7PJ6ebI2iyJW+U5Z+pzgHbI/lh\nMNZO7GrES2lsUKhNV8ADKcOB4r6cpKqbxtlRCOgUg60DMRGgQJJKeLo4uxLuq4ZY\nyPBU1HGN2klpqqXvUoG3GFZ8tfq2rBJexvOKNns0o9vEEa6cP83AryEphhIp/tY=\n=cCBx\n-----END PGP SIGNATURE-----\n", "payload": "tree 5235615134ab3798f21a167c71ce175795fc6798\nparent 982b92f966518a0e24632fafdc18d7b5ab6928b4\nparent a4ecaa70969067c1149711dbf1f40a8a95cb5b72\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589552941 +0000\ncommitter GitHub <noreply@github.com> 1589552941 +0000\n\nMerge #4448\n\n4448: Generate configuration for launch.json r=vsrs a=vsrs\n\nThis PR adds two new commands: `\"rust-analyzer.debug\"` and `\"rust-analyzer.newDebugConfig\"`. The former is a supplement to the existing `\"rust-analyzer.run\"` command and works the same way: asks for a runnable and starts new debug session. The latter allows adding a new configuration to **launch.json** (or to update an existing one).\r\n\r\nIf the new option `\"rust-analyzer.debug.useLaunchJson\"` is set to true then `\"rust-analyzer.debug\"` and Debug Lens will first look for existing debug configuration in **launch.json**. That is, it has become possible to specify startup arguments, env variables, etc.\r\n\r\n`\"rust-analyzer.debug.useLaunchJson\"` is false by default, but it might be worth making true the default value. Personally I prefer true, but I'm not sure if it is good for all value.\r\n\r\n----\r\nI think that this PR also solves https://github.com/rust-analyzer/rust-analyzer/issues/3441.\r\nBoth methods to update launch.json mentioned in the issue do not work:\r\n1. Menu. It is only possible to add a launch.json configuration template via a debug adapter. And anyway it's only a template and it is impossible to specify arguments from an extension.\r\n\r\n2. DebugConfigurationProvider. The exact opposite situation: it is possible to specify all debug session settings, but it is impossible to export these settings to launch.json.\r\n\r\nSeparate `\"rust-analyzer.newDebugConfig\"` command looks better for me.\r\n\r\n----\r\nFixes #4450\r\nFixes #3441\n\nCo-authored-by: vsrs <vit@conrlab.com>\nCo-authored-by: vsrs <62505555+vsrs@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d51c1f62178c383363a2d95e865131d9a7b969d0", "html_url": "https://github.com/rust-lang/rust/commit/d51c1f62178c383363a2d95e865131d9a7b969d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d51c1f62178c383363a2d95e865131d9a7b969d0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982b92f966518a0e24632fafdc18d7b5ab6928b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/982b92f966518a0e24632fafdc18d7b5ab6928b4", "html_url": "https://github.com/rust-lang/rust/commit/982b92f966518a0e24632fafdc18d7b5ab6928b4"}, {"sha": "a4ecaa70969067c1149711dbf1f40a8a95cb5b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ecaa70969067c1149711dbf1f40a8a95cb5b72", "html_url": "https://github.com/rust-lang/rust/commit/a4ecaa70969067c1149711dbf1f40a8a95cb5b72"}], "stats": {"total": 359, "additions": 258, "deletions": 101}, "files": [{"sha": "6b14830b6dfa713eee8ca25cdda656d355a008b1", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d51c1f62178c383363a2d95e865131d9a7b969d0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51c1f62178c383363a2d95e865131d9a7b969d0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d51c1f62178c383363a2d95e865131d9a7b969d0", "patch": "@@ -1011,14 +1011,17 @@ fn to_lsp_runnable(\n     runnable: Runnable,\n ) -> Result<lsp_ext::Runnable> {\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n+    let target = spec.as_ref().map(|s| s.target.clone());\n     let (args, extra_args) = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n         RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n         RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n         RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n-        RunnableKind::Bin => \"run binary\".to_string(),\n+        RunnableKind::Bin => {\n+            target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n+        }\n     };\n     Ok(lsp_ext::Runnable {\n         range: to_proto::range(&line_index, runnable.range),"}, {"sha": "4e7e3faf700fb43ad18e47eb0b7a301faeb131ff", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d51c1f62178c383363a2d95e865131d9a7b969d0", "patch": "@@ -120,6 +120,16 @@\n                 \"title\": \"Run\",\n                 \"category\": \"Rust Analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.debug\",\n+                \"title\": \"Debug\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.newDebugConfig\",\n+                \"title\": \"Generate launch configuration\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.analyzerStatus\",\n                 \"title\": \"Status\","}, {"sha": "28c7de992b4dd4cf335e7daa4690f5b26fc67f40", "filename": "editors/code/src/cargo.ts", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=d51c1f62178c383363a2d95e865131d9a7b969d0", "patch": "@@ -49,7 +49,20 @@ export class Cargo {\n     async executableFromArgs(args: readonly string[]): Promise<string> {\n         const cargoArgs = [...args, \"--message-format=json\"];\n \n-        const artifacts = await this.artifactsFromArgs(cargoArgs);\n+        // arguments for a runnable from the quick pick should be updated.\n+        // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_code_lens\n+        if (cargoArgs[0] === \"run\") {\n+            cargoArgs[0] = \"build\";\n+        } else if (cargoArgs.indexOf(\"--no-run\") === -1) {\n+            cargoArgs.push(\"--no-run\");\n+        }\n+\n+        let artifacts = await this.artifactsFromArgs(cargoArgs);\n+        if (cargoArgs[0] === \"test\") {\n+            // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n+            // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n+            artifacts = artifacts.filter(a => a.isTest);\n+        }\n \n         if (artifacts.length === 0) {\n             throw new Error('No compilation artifacts');"}, {"sha": "b1d93fc34ebdfb750934ba764a9be2b8b1e1e4cd", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 103, "deletions": 98, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=d51c1f62178c383363a2d95e865131d9a7b969d0", "patch": "@@ -1,43 +1,82 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import * as ra from '../rust-analyzer-api';\n-import * as os from \"os\";\n \n import { Ctx, Cmd } from '../ctx';\n-import { Cargo } from '../cargo';\n+import { startDebugSession, getDebugConfiguration } from '../debug';\n \n-export function run(ctx: Ctx): Cmd {\n-    let prevRunnable: RunnableQuickPick | undefined;\n+const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n-    return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n+async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n+    const editor = ctx.activeRustEditor;\n+    const client = ctx.client;\n+    if (!editor || !client) return;\n \n-        const textDocument: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString(),\n-        };\n+    const textDocument: lc.TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n \n-        const runnables = await client.sendRequest(ra.runnables, {\n-            textDocument,\n-            position: client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n-            ),\n-        });\n-        const items: RunnableQuickPick[] = [];\n-        if (prevRunnable) {\n-            items.push(prevRunnable);\n+    const runnables = await client.sendRequest(ra.runnables, {\n+        textDocument,\n+        position: client.code2ProtocolConverter.asPosition(\n+            editor.selection.active,\n+        ),\n+    });\n+    const items: RunnableQuickPick[] = [];\n+    if (prevRunnable) {\n+        items.push(prevRunnable);\n+    }\n+    for (const r of runnables) {\n+        if (\n+            prevRunnable &&\n+            JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n+        ) {\n+            continue;\n         }\n-        for (const r of runnables) {\n-            if (\n-                prevRunnable &&\n-                JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n-            ) {\n-                continue;\n-            }\n-            items.push(new RunnableQuickPick(r));\n+        items.push(new RunnableQuickPick(r));\n+    }\n+\n+    return await new Promise((resolve) => {\n+        const disposables: vscode.Disposable[] = [];\n+        const close = (result?: RunnableQuickPick) => {\n+            resolve(result);\n+            disposables.forEach(d => d.dispose());\n+        };\n+\n+        const quickPick = vscode.window.createQuickPick<RunnableQuickPick>();\n+        quickPick.items = items;\n+        quickPick.title = \"Select Runnable\";\n+        if (showButtons) {\n+            quickPick.buttons = quickPickButtons;\n         }\n-        const item = await vscode.window.showQuickPick(items);\n+        disposables.push(\n+            quickPick.onDidHide(() => close()),\n+            quickPick.onDidAccept(() => close(quickPick.selectedItems[0])),\n+            quickPick.onDidTriggerButton((_button) => {\n+                (async () => await makeDebugConfig(ctx, quickPick.activeItems[0]))();\n+                close();\n+            }),\n+            quickPick.onDidChangeActive((active) => {\n+                if (showButtons && active.length > 0) {\n+                    if (active[0].label.startsWith('cargo')) {\n+                        // save button makes no sense for `cargo test` or `cargo check`\n+                        quickPick.buttons = [];\n+                    } else if (quickPick.buttons.length === 0) {\n+                        quickPick.buttons = quickPickButtons;\n+                    }\n+                }\n+            }),\n+            quickPick\n+        );\n+        quickPick.show();\n+    });\n+}\n+\n+export function run(ctx: Ctx): Cmd {\n+    let prevRunnable: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const item = await selectRunnable(ctx, prevRunnable);\n         if (!item) return;\n \n         item.detail = 'rerun';\n@@ -64,88 +103,54 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n-function getLldbDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n-    return {\n-        type: \"lldb\",\n-        request: \"launch\",\n-        name: config.label,\n-        program: executable,\n-        args: config.extraArgs,\n-        cwd: config.cwd,\n-        sourceMap: sourceFileMap,\n-        sourceLanguages: [\"rust\"]\n+export function debug(ctx: Ctx): Cmd {\n+    let prevDebuggee: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const item = await selectRunnable(ctx, prevDebuggee);\n+        if (!item) return;\n+\n+        item.detail = 'restart';\n+        prevDebuggee = item;\n+        return await startDebugSession(ctx, item.runnable);\n     };\n }\n \n-function getCppvsDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n-    return {\n-        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : 'cppdbg',\n-        request: \"launch\",\n-        name: config.label,\n-        program: executable,\n-        args: config.extraArgs,\n-        cwd: config.cwd,\n-        sourceFileMap: sourceFileMap,\n+export function debugSingle(ctx: Ctx): Cmd {\n+    return async (config: ra.Runnable) => {\n+        await startDebugSession(ctx, config);\n     };\n }\n \n-const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n-\n-async function getDebugExecutable(config: ra.Runnable): Promise<string> {\n-    const cargo = new Cargo(config.cwd || '.', debugOutput);\n-    const executable = await cargo.executableFromArgs(config.args);\n-\n-    // if we are here, there were no compilation errors.\n-    return executable;\n-}\n+async function makeDebugConfig(ctx: Ctx, item: RunnableQuickPick): Promise<void> {\n+    const scope = ctx.activeRustEditor?.document.uri;\n+    if (!scope) return;\n \n-type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+    const debugConfig = await getDebugConfiguration(ctx, item.runnable);\n+    if (!debugConfig) return;\n \n-export function debugSingle(ctx: Ctx): Cmd {\n-    return async (config: ra.Runnable) => {\n-        const editor = ctx.activeRustEditor;\n-        if (!editor) return;\n+    const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\", scope);\n+    const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n \n-        const knownEngines: Record<string, DebugConfigProvider> = {\n-            \"vadimcn.vscode-lldb\": getLldbDebugConfig,\n-            \"ms-vscode.cpptools\": getCppvsDebugConfig\n-        };\n-        const debugOptions = ctx.config.debug;\n-\n-        let debugEngine = null;\n-        if (debugOptions.engine === \"auto\") {\n-            for (var engineId in knownEngines) {\n-                debugEngine = vscode.extensions.getExtension(engineId);\n-                if (debugEngine) break;\n-            }\n-        }\n-        else {\n-            debugEngine = vscode.extensions.getExtension(debugOptions.engine);\n-        }\n+    const index = configurations.findIndex(c => c.name === debugConfig.name);\n+    if (index !== -1) {\n+        const answer = await vscode.window.showErrorMessage(`Launch configuration '${debugConfig.name}' already exists!`, 'Cancel', 'Update');\n+        if (answer === \"Cancel\") return;\n \n-        if (!debugEngine) {\n-            vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n-                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n-            return;\n-        }\n+        configurations[index] = debugConfig;\n+    } else {\n+        configurations.push(debugConfig);\n+    }\n \n-        debugOutput.clear();\n-        if (ctx.config.debug.openUpDebugPane) {\n-            debugOutput.show(true);\n-        }\n+    await wsLaunchSection.update(\"configurations\", configurations);\n+}\n \n-        const executable = await getDebugExecutable(config);\n-        const debugConfig = knownEngines[debugEngine.id](config, executable, debugOptions.sourceFileMap);\n-        if (debugConfig.type in debugOptions.engineSettings) {\n-            const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n-            for (var key in settingsMap) {\n-                debugConfig[key] = settingsMap[key];\n-            }\n-        }\n+export function newDebugConfig(ctx: Ctx): Cmd {\n+    return async () => {\n+        const item = await selectRunnable(ctx, undefined, false);\n+        if (!item) return;\n \n-        debugOutput.appendLine(\"Launching debug configuration:\");\n-        debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n-        return vscode.debug.startDebugging(undefined, debugConfig);\n+        await makeDebugConfig(ctx, item);\n     };\n }\n "}, {"sha": "1652827c32a50cbd989b098065392bacd9497d03", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=d51c1f62178c383363a2d95e865131d9a7b969d0", "patch": "@@ -116,7 +116,7 @@ export class Config {\n             engine: this.get<string>(\"debug.engine\"),\n             engineSettings: this.get<object>(\"debug.engineSettings\"),\n             openUpDebugPane: this.get<boolean>(\"debug.openUpDebugPane\"),\n-            sourceFileMap: sourceFileMap,\n+            sourceFileMap: sourceFileMap\n         };\n     }\n }"}, {"sha": "d3fe588e83191026a3895c05a090f508eff11ee8", "filename": "editors/code/src/debug.ts", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=d51c1f62178c383363a2d95e865131d9a7b969d0", "patch": "@@ -0,0 +1,124 @@\n+import * as os from \"os\";\n+import * as vscode from 'vscode';\n+import * as path from 'path';\n+import * as ra from './rust-analyzer-api';\n+\n+import { Cargo } from './cargo';\n+import { Ctx } from \"./ctx\";\n+\n+const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n+type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+\n+function getLldbDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+    return {\n+        type: \"lldb\",\n+        request: \"launch\",\n+        name: config.label,\n+        program: executable,\n+        args: config.extraArgs,\n+        cwd: config.cwd,\n+        sourceMap: sourceFileMap,\n+        sourceLanguages: [\"rust\"]\n+    };\n+}\n+\n+function getCppvsDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+    return {\n+        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : \"cppdbg\",\n+        request: \"launch\",\n+        name: config.label,\n+        program: executable,\n+        args: config.extraArgs,\n+        cwd: config.cwd,\n+        sourceFileMap: sourceFileMap,\n+    };\n+}\n+\n+async function getDebugExecutable(config: ra.Runnable): Promise<string> {\n+    const cargo = new Cargo(config.cwd || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(config.args);\n+\n+    // if we are here, there were no compilation errors.\n+    return executable;\n+}\n+\n+export async function getDebugConfiguration(ctx: Ctx, config: ra.Runnable): Promise<vscode.DebugConfiguration | undefined> {\n+    const editor = ctx.activeRustEditor;\n+    if (!editor) return;\n+\n+    const knownEngines: Record<string, DebugConfigProvider> = {\n+        \"vadimcn.vscode-lldb\": getLldbDebugConfig,\n+        \"ms-vscode.cpptools\": getCppvsDebugConfig\n+    };\n+    const debugOptions = ctx.config.debug;\n+\n+    let debugEngine = null;\n+    if (debugOptions.engine === \"auto\") {\n+        for (var engineId in knownEngines) {\n+            debugEngine = vscode.extensions.getExtension(engineId);\n+            if (debugEngine) break;\n+        }\n+    } else {\n+        debugEngine = vscode.extensions.getExtension(debugOptions.engine);\n+    }\n+\n+    if (!debugEngine) {\n+        vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n+            + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n+        return;\n+    }\n+\n+    debugOutput.clear();\n+    if (ctx.config.debug.openUpDebugPane) {\n+        debugOutput.show(true);\n+    }\n+\n+    const wsFolder = path.normalize(vscode.workspace.workspaceFolders![0].uri.fsPath); // folder exists or RA is not active.\n+    function simplifyPath(p: string): string {\n+        return path.normalize(p).replace(wsFolder, '${workspaceRoot}');\n+    }\n+\n+    const executable = await getDebugExecutable(config);\n+    const debugConfig = knownEngines[debugEngine.id](config, simplifyPath(executable), debugOptions.sourceFileMap);\n+    if (debugConfig.type in debugOptions.engineSettings) {\n+        const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n+        for (var key in settingsMap) {\n+            debugConfig[key] = settingsMap[key];\n+        }\n+    }\n+\n+    if (debugConfig.name === \"run binary\") {\n+        // The LSP side: crates\\rust-analyzer\\src\\main_loop\\handlers.rs,\n+        // fn to_lsp_runnable(...) with RunnableKind::Bin\n+        debugConfig.name = `run ${path.basename(executable)}`;\n+    }\n+\n+    if (debugConfig.cwd) {\n+        debugConfig.cwd = simplifyPath(debugConfig.cwd);\n+    }\n+\n+    return debugConfig;\n+}\n+\n+export async function startDebugSession(ctx: Ctx, config: ra.Runnable): Promise<boolean> {\n+    let debugConfig: vscode.DebugConfiguration | undefined = undefined;\n+    let message = \"\";\n+\n+    const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\");\n+    const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n+\n+    const index = configurations.findIndex(c => c.name === config.label);\n+    if (-1 !== index) {\n+        debugConfig = configurations[index];\n+        message = \" (from launch.json)\";\n+        debugOutput.clear();\n+    } else {\n+        debugConfig = await getDebugConfiguration(ctx, config);\n+    }\n+\n+    if (!debugConfig) return false;\n+\n+    debugOutput.appendLine(`Launching debug configuration${message}:`);\n+    debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n+    return vscode.debug.startDebugging(undefined, debugConfig);\n+}"}, {"sha": "c015460b88390226a063a85b41731a5e5115a952", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d51c1f62178c383363a2d95e865131d9a7b969d0/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d51c1f62178c383363a2d95e865131d9a7b969d0", "patch": "@@ -77,6 +77,8 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n+    ctx.registerCommand('debug', commands.debug);\n+    ctx.registerCommand('newDebugConfig', commands.newDebugConfig);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}