{"sha": "1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNWZiM2UwNTY0MjhjM2ViMTMwZWJiNmZjOTVjN2UxYjdhMmQyMGU=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-10-28T13:12:49Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T21:40:38Z"}, "message": "Differentiate between the availability of ctfe MIR and runtime MIR", "tree": {"sha": "46a84ec0d9d662a585f4464c3c896390061ddff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a84ec0d9d662a585f4464c3c896390061ddff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "html_url": "https://github.com/rust-lang/rust/commit/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "html_url": "https://github.com/rust-lang/rust/commit/cccd40f9b552367a8d1bb958b421a2e5e65c28ab"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "a4cf4f096e0e4678c99722602f01f2ebc2b310d8", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -1160,9 +1160,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n+    fn is_ctfe_mir_available(&self, id: DefIndex) -> bool {\n+        self.root.tables.mir_for_ctfe.get(self, id).is_some()\n+    }\n+\n     fn is_item_mir_available(&self, id: DefIndex) -> bool {\n         self.root.tables.mir.get(self, id).is_some()\n-            || self.root.tables.mir_for_ctfe.get(self, id).is_some()\n     }\n \n     fn module_expansion(&self, id: DefIndex, sess: &Session) -> ExpnId {"}, {"sha": "96db0157422a7e58c1d01d8804977f515a46bd46", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -146,6 +146,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n+    is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { cdata.get_dylib_dependency_formats(tcx) }\n     is_panic_runtime => { cdata.root.panic_runtime }"}, {"sha": "3e4490e4915f14662c130e5bf1bacdab006831c6", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -444,7 +444,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx Body<'tcx> {\n         if let Some((did, param_did)) = def.as_const_arg() {\n-            self.optimized_mir_of_const_arg((did, param_did))\n+            self.mir_for_ctfe_of_const_arg((did, param_did))\n         } else {\n             self.optimized_mir(def.did)\n         }"}, {"sha": "6da61486a55ca3f54e623347526c8eb720371020", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -346,15 +346,6 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n \n-        // FIXME: now that we have `mir_for_ctfe_of_const_arg` can we get\n-        // rid of this query?\n-        query optimized_mir_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n-            desc {\n-                |tcx| \"optimizing MIR for the const argument `{}`\",\n-                tcx.def_path_str(key.0.to_def_id())\n-            }\n-        }\n-\n         /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n         /// MIR pass (assuming the -Zinstrument-coverage option is enabled).\n         query coverageinfo(key: DefId) -> mir::CoverageInfo {\n@@ -944,6 +935,10 @@ rustc_queries! {\n     }\n \n     Codegen {\n+        // FIXME: remove after figuring out how to make miri able to detect non-Rust function calls\n+        query is_ctfe_mir_available(key: DefId) -> bool {\n+            desc { |tcx| \"checking if item has ctfe mir available: `{}`\", tcx.def_path_str(key) }\n+        }\n         query is_mir_available(key: DefId) -> bool {\n             desc { |tcx| \"checking if item has mir available: `{}`\", tcx.def_path_str(key) }\n         }"}, {"sha": "ca4db8abc0ca416475641ea57485e5e8ba681de5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -3010,7 +3010,16 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(def) => self.optimized_mir_opt_const_arg(def),\n+            ty::InstanceDef::Item(def) => match self.def_kind(def.did) {\n+                DefKind::Const\n+                | DefKind::Static\n+                | DefKind::AssocConst\n+                | DefKind::Ctor(..)\n+                | DefKind::AnonConst => self.mir_for_ctfe_opt_const_arg(def),\n+                // If the caller wants `mir_for_ctfe` they should not be using `instance_mir`, so\n+                // we'll assume const fn also wants the optimized version.\n+                _ => self.optimized_mir_opt_const_arg(def),\n+            },\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "b3b7c55db6276da622f7ad87da8cb767f317dab8", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -479,7 +479,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         match instance {\n             ty::InstanceDef::Item(def) => {\n-                if self.tcx.is_mir_available(def.did) {\n+                if self.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(self.tcx.mir_for_ctfe_opt_const_arg(def))\n                 } else {\n                     throw_unsup!(NoMirFor(def.did))"}, {"sha": "d4185c063ef4bd437d62aa035aea03cebd3b1704", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -54,9 +54,17 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     }\n \n     // Exit early when there is no MIR available.\n-    if !tcx.is_mir_available(def_id) {\n-        debug!(\"unused_generic_params: (no mir available) def_id={:?}\", def_id);\n-        return FiniteBitSet::new_empty();\n+    let context = tcx.hir().body_const_context(def_id.expect_local());\n+    match context {\n+        None if !tcx.is_mir_available(def_id) => {\n+            debug!(\"unused_generic_params: (no mir available) def_id={:?}\", def_id);\n+            return FiniteBitSet::new_empty();\n+        }\n+        Some(_) if !tcx.is_ctfe_mir_available(def_id) => {\n+            debug!(\"unused_generic_params: (no ctfe mir available) def_id={:?}\", def_id);\n+            return FiniteBitSet::new_empty();\n+        }\n+        _ => {}\n     }\n \n     // Create a bitset with N rightmost ones for each parameter.\n@@ -69,8 +77,11 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     debug!(\"unused_generic_params: (after default) unused_parameters={:?}\", unused_parameters);\n \n     // Visit MIR and accumululate used generic parameters.\n-    let body = match tcx.hir().body_const_context(def_id.expect_local()) {\n+    let body = match context {\n         None => tcx.optimized_mir(def_id),\n+        // FIXME(oli-obk): since this is solely used for codegen (I think?), should we keep using\n+        // the optimized MIR for `const fn`? Need to adjust the above `is_mir_available` check\n+        // in that case.\n         Some(_) => tcx.mir_for_ctfe(def_id),\n     };\n     let mut vis = MarkUsedGenericParams { tcx, def_id, unused_parameters: &mut unused_parameters };"}, {"sha": "8a4c5c1ef69f045adce7729b1115155736dd1b73", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=1f5fb3e056428c3eb130ebb6fc95c7e1b7a2d20e", "patch": "@@ -74,8 +74,8 @@ pub(crate) fn provide(providers: &mut Providers) {\n         mir_for_ctfe,\n         mir_for_ctfe_of_const_arg,\n         optimized_mir,\n-        optimized_mir_of_const_arg,\n         is_mir_available,\n+        is_ctfe_mir_available: |tcx, did| is_mir_available(tcx, did),\n         promoted_mir: |tcx, def_id| {\n             let def_id = def_id.expect_local();\n             if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n@@ -518,22 +518,12 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     let did = did.expect_local();\n     if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n-        tcx.optimized_mir_of_const_arg(def)\n+        tcx.mir_for_ctfe_of_const_arg(def)\n     } else {\n         tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::unknown(did)))\n     }\n }\n \n-fn optimized_mir_of_const_arg<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    (did, param_did): (LocalDefId, DefId),\n-) -> &'tcx Body<'tcx> {\n-    tcx.arena.alloc(inner_optimized_mir(\n-        tcx,\n-        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n-    ))\n-}\n-\n fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n     if tcx.is_constructor(def.did.to_def_id()) {\n         // There's no reason to run all of the MIR passes on constructors when"}]}