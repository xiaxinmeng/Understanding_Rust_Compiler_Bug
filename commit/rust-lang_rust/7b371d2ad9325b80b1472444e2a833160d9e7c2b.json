{"sha": "7b371d2ad9325b80b1472444e2a833160d9e7c2b", "node_id": "C_kwDOAAsO6NoAKDdiMzcxZDJhZDkzMjViODBiMTQ3MjQ0NGUyYTgzMzE2MGQ5ZTdjMmI", "commit": {"author": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-12-24T23:43:50Z"}, "committer": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-12-24T23:43:50Z"}, "message": "fix some typos", "tree": {"sha": "2aedf68aba775931e1aff74317ec7ec7f8f8f4c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aedf68aba775931e1aff74317ec7ec7f8f8f4c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b371d2ad9325b80b1472444e2a833160d9e7c2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcFQWTVq3UZxSk8EiC1KuORxnTOUFAmOnjrYACgkQC1KuORxn\nTOUxMQ/+KX8eQGlhR5TzIv2BHVWcHCwrUJfQkVsHveydsMM0bGbyfIjVf9NCqWR5\n0vrjiX2F4oHG7dQedz/YA0OaP0osFWxYveFfd79eEkRAN7M+S7sbRdcdh6kdSGum\nSzimM+6J9AL5Nbe/DKhM8i394OVygSsrgOZGxCzn8mZY2SwhoTI0J2OO1NGGSolB\nIAaxaLSE+Codw8r2duG3lJeUdRBm2VJatJB0P5v9GsK9zRe+9KiUOdcDTr6rTMQ6\ndFUQ1SU/YUTxpv59CgusyDyRysCMzYT8K3DWpPau3Xw/2aAsDkurNL5fjVa3InxM\n5u/xFtspzjnE5SR+lz8Z/2qqcvIdObfIlScEzC3s/mWeWxkoGB4iU/LJqAlUZTjQ\nnPE3mvSa+0DGPxEaHJEuIOc4rys9eJ0pQ418PAKi+nkSoqN5d2wzloa27BIDvLty\nlaEeWWGG3CjGthNwLld2tPvpw4/m6i1SnpR7H+spIOA9f1PWWAjxFKGqflrV72Fi\nTWWeW70WnYTzh4qvVxBucHT24wxeKaoiIykXfVOtfkXtAvYAwI2r7yJS48x/FHXK\nfz73ugXe60wlL8awdz5KUWbGfmTRJ5DDSPCag850+tRHrjupuiqQPe+hFRqMn++j\n03zllrWiZp5/w15mLCuUGI6MCfBEFPY6LMZSCUnUy6THrDDXxb0=\n=9Owt\n-----END PGP SIGNATURE-----", "payload": "tree 2aedf68aba775931e1aff74317ec7ec7f8f8f4c3\nparent 7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e\nauthor KaDiWa <kalle.wachsmuth@gmail.com> 1671925430 +0100\ncommitter KaDiWa <kalle.wachsmuth@gmail.com> 1671925430 +0100\n\nfix some typos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b371d2ad9325b80b1472444e2a833160d9e7c2b", "html_url": "https://github.com/rust-lang/rust/commit/7b371d2ad9325b80b1472444e2a833160d9e7c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b371d2ad9325b80b1472444e2a833160d9e7c2b/comments", "author": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e", "html_url": "https://github.com/rust-lang/rust/commit/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "ae4836645fa41311215aaa39166c4c439766709e", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "patch": "@@ -223,7 +223,7 @@ pub trait ToStableHashKey<HCX> {\n /// stable across compilation session boundaries. More formally:\n ///\n /// ```txt\n-/// Ord::cmp(a1, b1) == Ord:cmp(a2, b2)\n+/// Ord::cmp(a1, b1) == Ord::cmp(a2, b2)\n ///    where a2 = decode(encode(a1, context1), context2)\n ///          b2 = decode(encode(b1, context1), context2)\n /// ```"}, {"sha": "6f0c5d36a5f539c63e6365e493d51c846c5171c2", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "patch": "@@ -2626,7 +2626,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let e = self\n                     .tcx()\n                     .sess\n-                    .delay_span_bug(path.span, \"path with `Res:Err` but no error emitted\");\n+                    .delay_span_bug(path.span, \"path with `Res::Err` but no error emitted\");\n                 self.set_tainted_by_errors(e);\n                 self.tcx().ty_error_with_guaranteed(e)\n             }"}, {"sha": "0021fdd7f61a9f9200aa7e8cb29a536b97a16f2e", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "patch": "@@ -1013,7 +1013,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (res, opt_ty, segments) =\n             self.resolve_ty_and_res_fully_qualified_call(qpath, pat.hir_id, pat.span);\n         if res == Res::Err {\n-            let e = tcx.sess.delay_span_bug(pat.span, \"`Res:Err` but no error emitted\");\n+            let e = tcx.sess.delay_span_bug(pat.span, \"`Res::Err` but no error emitted\");\n             self.set_tainted_by_errors(e);\n             on_error(e);\n             return tcx.ty_error_with_guaranteed(e);"}, {"sha": "28317d6cea02a599a0a0cddf1a164911eba33332", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "patch": "@@ -3581,7 +3581,7 @@ declare_lint! {\n     /// fn main() {\n     ///     let x: String = \"3\".try_into().unwrap();\n     ///     //                  ^^^^^^^^\n-    ///     // This call to try_into matches both Foo:try_into and TryInto::try_into as\n+    ///     // This call to try_into matches both Foo::try_into and TryInto::try_into as\n     ///     // `TryInto` has been added to the Rust prelude in 2021 edition.\n     ///     println!(\"{x}\");\n     /// }"}, {"sha": "be4a0c9bb34d2a22b5c92247574c1908845bb012", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "patch": "@@ -76,7 +76,7 @@ pub(super) struct EncodeContext<'a, 'tcx> {\n     symbol_table: FxHashMap<Symbol, usize>,\n }\n \n-/// If the current crate is a proc-macro, returns early with `Lazy:empty()`.\n+/// If the current crate is a proc-macro, returns early with `LazyArray::empty()`.\n /// This is useful for skipping the encoding of things that aren't needed\n /// for proc-macro crates.\n macro_rules! empty_proc_macro {"}, {"sha": "4512db49403d73602628c40dd6469c99cc58ae25", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "patch": "@@ -2291,7 +2291,7 @@ impl Target {\n                     } else {\n                         return Some(Err(format!(\n                             \"'{}' is not a valid value for lld-flavor. \\\n-                             Use 'darwin', 'gnu', 'link' or 'wasm.\",\n+                             Use 'darwin', 'gnu', 'link' or 'wasm'.\",\n                             s)))\n                     }\n                     Some(Ok(()))"}, {"sha": "63b65ab20fea8a961f920959e81f8597c5d6ab60", "filename": "src/test/ui/mismatched_types/suggest-removing-tuple-struct-field.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.fixed?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "previous_filename": "src/test/ui/mismatched_types/suggest-removing-tulpe-struct-field.fixed"}, {"sha": "2ab4e3955f336aad0a1a0363066066cafba0bcfa", "filename": "src/test/ui/mismatched_types/suggest-removing-tuple-struct-field.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.rs?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "previous_filename": "src/test/ui/mismatched_types/suggest-removing-tulpe-struct-field.rs"}, {"sha": "35871afb58b9adf60b60b44228bd010f0e1f3af8", "filename": "src/test/ui/mismatched_types/suggest-removing-tuple-struct-field.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b371d2ad9325b80b1472444e2a833160d9e7c2b/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b371d2ad9325b80b1472444e2a833160d9e7c2b/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr?ref=7b371d2ad9325b80b1472444e2a833160d9e7c2b", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/suggest-removing-tulpe-struct-field.rs:11:13\n+  --> $DIR/suggest-removing-tuple-struct-field.rs:11:13\n    |\n LL |     some_fn(value.0);\n    |     ------- ^^^^^^^ expected struct `MyWrapper`, found `u32`\n    |     |\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n-  --> $DIR/suggest-removing-tulpe-struct-field.rs:15:4\n+  --> $DIR/suggest-removing-tuple-struct-field.rs:15:4\n    |\n LL | fn some_fn(wrapped: MyWrapper) {\n    |    ^^^^^^^ ------------------\n@@ -18,15 +18,15 @@ LL +     some_fn(value);\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/suggest-removing-tulpe-struct-field.rs:12:13\n+  --> $DIR/suggest-removing-tuple-struct-field.rs:12:13\n    |\n LL |     some_fn(my_wrapper!(123).0);\n    |     ------- ^^^^^^^^^^^^^^^^^^ expected struct `MyWrapper`, found `u32`\n    |     |\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n-  --> $DIR/suggest-removing-tulpe-struct-field.rs:15:4\n+  --> $DIR/suggest-removing-tuple-struct-field.rs:15:4\n    |\n LL | fn some_fn(wrapped: MyWrapper) {\n    |    ^^^^^^^ ------------------", "previous_filename": "src/test/ui/mismatched_types/suggest-removing-tulpe-struct-field.stderr"}]}