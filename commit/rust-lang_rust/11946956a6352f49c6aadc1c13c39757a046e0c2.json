{"sha": "11946956a6352f49c6aadc1c13c39757a046e0c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOTQ2OTU2YTYzNTJmNDljNmFhZGMxYzEzYzM5NzU3YTA0NmUwYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-27T14:52:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-27T14:52:20Z"}, "message": "Auto merge of #35969 - bluss:memrchr-alignment, r=nagisa\n\nmemrchr: Correct aligned offset computation\n\nThe memrchr fallback did not compute the offset correctly. It was\nintentioned to land on usize-aligned addresses but did not.\nThis was suspected to have resulted in a crash on ARMv7!\n\nThis bug affected non-linux platforms.\n\nI think like this, if we have a slice with pointer `ptr` and length\n`len`, we want to find the last usize-aligned offset in the slice.\nThe correct computation should be:\n\nFor example if ptr = 1 and len = 6, and `size_of::<usize>()` is 4:\n\n```\n[ x x x x x x ]\n  1 2 3 4 5 6\n        ^-- last aligned address at offset 3 from the start.\n```\n\nThe last aligned address is ptr + len - (ptr + len) % usize_size.\n\nCompute offset from the start as:\n\noffset = len - (ptr + len) % usize_size = 6 - (1 + 6) % 4 = 6 - 3 = 3.\n\nI believe the function's return value was always correct previously, if\nthe platform supported unaligned addresses.\n\nFixes #35967", "tree": {"sha": "d7ba57b9dc0cffaab49aaa505c028d1ef1a5553f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ba57b9dc0cffaab49aaa505c028d1ef1a5553f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11946956a6352f49c6aadc1c13c39757a046e0c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11946956a6352f49c6aadc1c13c39757a046e0c2", "html_url": "https://github.com/rust-lang/rust/commit/11946956a6352f49c6aadc1c13c39757a046e0c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11946956a6352f49c6aadc1c13c39757a046e0c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099b9fdb1a170b57ffd7174b3c3042cc86b7fe91", "url": "https://api.github.com/repos/rust-lang/rust/commits/099b9fdb1a170b57ffd7174b3c3042cc86b7fe91", "html_url": "https://github.com/rust-lang/rust/commit/099b9fdb1a170b57ffd7174b3c3042cc86b7fe91"}, {"sha": "8295c5056da0be355c86b29d1d4eed469920e73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8295c5056da0be355c86b29d1d4eed469920e73c", "html_url": "https://github.com/rust-lang/rust/commit/8295c5056da0be355c86b29d1d4eed469920e73c"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "03f55f7ad61864cf3ed90ed794b36e41728873c0", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11946956a6352f49c6aadc1c13c39757a046e0c2/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11946956a6352f49c6aadc1c13c39757a046e0c2/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=11946956a6352f49c6aadc1c13c39757a046e0c2", "patch": "@@ -209,7 +209,7 @@ mod fallback {\n         let end_align = (ptr as usize + len) & (usize_bytes - 1);\n         let mut offset;\n         if end_align > 0 {\n-            offset = len - cmp::min(usize_bytes - end_align, len);\n+            offset = if end_align >= len { 0 } else { len - end_align };\n             if let Some(index) = text[offset..].iter().rposition(|elt| *elt == x) {\n                 return Some(offset + index);\n             }\n@@ -309,6 +309,17 @@ mod fallback {\n     fn no_match_reversed() {\n         assert_eq!(None, memrchr(b'a', b\"xyz\"));\n     }\n+\n+    #[test]\n+    fn each_alignment_reversed() {\n+        let mut data = [1u8; 64];\n+        let needle = 2;\n+        let pos = 40;\n+        data[pos] = needle;\n+        for start in 0..16 {\n+            assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n+        }\n+    }\n }\n \n #[cfg(test)]\n@@ -385,4 +396,15 @@ mod tests {\n     fn no_match_reversed() {\n         assert_eq!(None, memrchr(b'a', b\"xyz\"));\n     }\n+\n+    #[test]\n+    fn each_alignment() {\n+        let mut data = [1u8; 64];\n+        let needle = 2;\n+        let pos = 40;\n+        data[pos] = needle;\n+        for start in 0..16 {\n+            assert_eq!(Some(pos - start), memchr(needle, &data[start..]));\n+        }\n+    }\n }"}]}