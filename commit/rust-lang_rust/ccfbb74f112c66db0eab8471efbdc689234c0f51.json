{"sha": "ccfbb74f112c66db0eab8471efbdc689234c0f51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZmJiNzRmMTEyYzY2ZGIwZWFiODQ3MWVmYmRjNjg5MjM0YzBmNTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-08T23:36:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-08T23:37:43Z"}, "message": "rustc: Move maps over to interior vectors", "tree": {"sha": "8d5dd2cfa30d8d153a49ea3e9c5d52f02806800b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d5dd2cfa30d8d153a49ea3e9c5d52f02806800b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccfbb74f112c66db0eab8471efbdc689234c0f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfbb74f112c66db0eab8471efbdc689234c0f51", "html_url": "https://github.com/rust-lang/rust/commit/ccfbb74f112c66db0eab8471efbdc689234c0f51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccfbb74f112c66db0eab8471efbdc689234c0f51/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8450ab9a2b2cafa9ef4fa624b1843b46a7b41a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/8450ab9a2b2cafa9ef4fa624b1843b46a7b41a26", "html_url": "https://github.com/rust-lang/rust/commit/8450ab9a2b2cafa9ef4fa624b1843b46a7b41a26"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "75b4899b3e10d4d6fa8e0d1c7c8400ae041861bd", "filename": "src/lib/map.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbb74f112c66db0eab8471efbdc689234c0f51/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbb74f112c66db0eab8471efbdc689234c0f51/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=ccfbb74f112c66db0eab8471efbdc689234c0f51", "patch": "@@ -23,8 +23,8 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n \n     let util::rational load_factor = rec(num=3, den=4);\n     tag bucket[K, V] { nil; deleted; some(K, V); }\n-    fn make_buckets[K, V](uint nbkts) -> vec[mutable bucket[K, V]] {\n-        ret vec::init_elt_mut[bucket[K, V]](nil[K, V], nbkts);\n+    fn make_buckets[K, V](uint nbkts) -> (bucket[K, V])[mutable] {\n+        ret ivec::init_elt_mut[bucket[K, V]](nil[K, V], nbkts);\n     }\n     // Derive two hash functions from the one given by taking the upper\n     // half and lower half of the uint bits.  Our bucket probing\n@@ -52,7 +52,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n \n     fn insert_common[K,\n                      V](&hashfn[K] hasher, &eqfn[K] eqer,\n-                        vec[mutable bucket[K, V]] bkts, uint nbkts, &K key,\n+                        &(bucket[K, V])[mutable] bkts, uint nbkts, &K key,\n                         &V val) -> bool {\n         let uint i = 0u;\n         let uint h = hasher(key);\n@@ -77,7 +77,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     }\n     fn find_common[K,\n                    V](&hashfn[K] hasher, &eqfn[K] eqer,\n-                      vec[mutable bucket[K, V]] bkts, uint nbkts, &K key) ->\n+                      &(bucket[K, V])[mutable] bkts, uint nbkts, &K key) ->\n        option::t[V] {\n         let uint i = 0u;\n         let uint h = hasher(key);\n@@ -100,8 +100,8 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     }\n     fn rehash[K,\n               V](&hashfn[K] hasher, &eqfn[K] eqer,\n-                 vec[mutable bucket[K, V]] oldbkts, uint noldbkts,\n-                 vec[mutable bucket[K, V]] newbkts, uint nnewbkts) {\n+                 &(bucket[K, V])[mutable] oldbkts, uint noldbkts,\n+                 &(bucket[K, V])[mutable] newbkts, uint nnewbkts) {\n         for (bucket[K, V] b in oldbkts) {\n             alt (b) {\n                 case (some(?k_, ?v_)) {\n@@ -117,7 +117,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     obj hashmap[K,\n                 V](hashfn[K] hasher,\n                    eqfn[K] eqer,\n-                   mutable vec[mutable bucket[K, V]] bkts,\n+                   mutable (bucket[K, V])[mutable] bkts,\n                    mutable uint nbkts,\n                    mutable uint nelts,\n                    util::rational lf) {\n@@ -127,8 +127,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n                 rec(num=nelts + 1u as int, den=nbkts as int);\n             if (!util::rational_leq(load, lf)) {\n                 let uint nnewbkts = uint::next_power_of_two(nbkts + 1u);\n-                let vec[mutable bucket[K, V]] newbkts =\n-                    make_buckets[K, V](nnewbkts);\n+                auto newbkts = make_buckets[K, V](nnewbkts);\n                 rehash[K, V](hasher, eqer, bkts, nbkts, newbkts, nnewbkts);\n                 bkts = newbkts;\n                 nbkts = nnewbkts;\n@@ -177,7 +176,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n             ret option::none[V];\n         }\n         fn rehash() {\n-            let vec[mutable bucket[K, V]] newbkts = make_buckets[K, V](nbkts);\n+            auto newbkts = make_buckets[K, V](nbkts);\n             rehash[K, V](hasher, eqer, bkts, nbkts, newbkts, nbkts);\n             bkts = newbkts;\n         }\n@@ -190,7 +189,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n             }\n         }\n     }\n-    let vec[mutable bucket[K, V]] bkts = make_buckets[K, V](initial_capacity);\n+    auto bkts = make_buckets[K, V](initial_capacity);\n     ret hashmap[K, V](hasher, eqer, bkts, initial_capacity, 0u, load_factor);\n }\n "}]}