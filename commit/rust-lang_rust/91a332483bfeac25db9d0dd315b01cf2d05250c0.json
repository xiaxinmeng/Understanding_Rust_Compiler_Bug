{"sha": "91a332483bfeac25db9d0dd315b01cf2d05250c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYTMzMjQ4M2JmZWFjMjVkYjlkMGRkMzE1YjAxY2YyZDA1MjUwYzA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-01-04T04:49:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-04T04:49:47Z"}, "message": "Merge pull request #2316 from topecongiro/issue-2315\n\nRemove trailing comma from extern items snippet before comparing", "tree": {"sha": "c2266fa694356f3b19c8f44a2c572a7e85a96deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2266fa694356f3b19c8f44a2c572a7e85a96deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91a332483bfeac25db9d0dd315b01cf2d05250c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaTbJrCRBK7hj4Ov3rIwAAdHIIABLCgHH22ITUsxe6LTJcruJC\nzUFJXJlQkZleK1udd9yhnNwiUDFSVi5+yyRt390tytHL+Jlaf3b+2264qPsxzt45\nhZgQ0iMgW9YXi2lNfNodn7ctmcbdGbIXmfNLCK/YELpeujuJhTh/k4HjuAWJ1ZIp\n2J5cIxWKPiC0HA2O1d5N+4LMFsQjbHDeLuf/nOlhAWXH//grVTuwQ97X4O05VyGt\nYyPZi1/OMw6Kk9iqDJH0li9irLKpGcvTqzXsMZij2U+PMbOZJhdmFgvcp7dtjqdj\nTv9CJOnovV2slHjzX9qTdZglifvrfM2KrMbil+BbUahqIunrYSKNdTdzz3xxVNQ=\n=PT0O\n-----END PGP SIGNATURE-----\n", "payload": "tree c2266fa694356f3b19c8f44a2c572a7e85a96deb\nparent fad9076ec703c67197249ac9dbb454e867baf2d2\nparent 405360a3fd6ef6b4bebbd60637acee2d66a46978\nauthor Nick Cameron <nrc@ncameron.org> 1515041387 +1300\ncommitter GitHub <noreply@github.com> 1515041387 +1300\n\nMerge pull request #2316 from topecongiro/issue-2315\n\nRemove trailing comma from extern items snippet before comparing"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91a332483bfeac25db9d0dd315b01cf2d05250c0", "html_url": "https://github.com/rust-lang/rust/commit/91a332483bfeac25db9d0dd315b01cf2d05250c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91a332483bfeac25db9d0dd315b01cf2d05250c0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fad9076ec703c67197249ac9dbb454e867baf2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fad9076ec703c67197249ac9dbb454e867baf2d2", "html_url": "https://github.com/rust-lang/rust/commit/fad9076ec703c67197249ac9dbb454e867baf2d2"}, {"sha": "405360a3fd6ef6b4bebbd60637acee2d66a46978", "url": "https://api.github.com/repos/rust-lang/rust/commits/405360a3fd6ef6b4bebbd60637acee2d66a46978", "html_url": "https://github.com/rust-lang/rust/commit/405360a3fd6ef6b4bebbd60637acee2d66a46978"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "b940dcc9de74222356549339045e573b4373de01", "filename": "src/imports.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91a332483bfeac25db9d0dd315b01cf2d05250c0/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a332483bfeac25db9d0dd315b01cf2d05250c0/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=91a332483bfeac25db9d0dd315b01cf2d05250c0", "patch": "@@ -105,13 +105,32 @@ fn compare_use_trees(a: &ast::UseTree, b: &ast::UseTree, nested: bool) -> Orderi\n     }\n }\n \n-fn compare_use_items(context: &RewriteContext, a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n+fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n     match (&a.node, &b.node) {\n         (&ast::ItemKind::Use(ref a_tree), &ast::ItemKind::Use(ref b_tree)) => {\n             Some(compare_use_trees(a_tree, b_tree, false))\n         }\n-        (&ast::ItemKind::ExternCrate(..), &ast::ItemKind::ExternCrate(..)) => {\n-            Some(context.snippet(a.span).cmp(context.snippet(b.span)))\n+        (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n+            // `extern crate foo as bar;`\n+            //               ^^^ Comparing this.\n+            let a_orig_name =\n+                a_name.map_or_else(|| a.ident.name.as_str(), |symbol| symbol.as_str());\n+            let b_orig_name =\n+                b_name.map_or_else(|| b.ident.name.as_str(), |symbol| symbol.as_str());\n+            let result = a_orig_name.cmp(&b_orig_name);\n+            if result != Ordering::Equal {\n+                return Some(result);\n+            }\n+\n+            // `extern crate foo as bar;`\n+            //                      ^^^ Comparing this.\n+            let result = match (a_name, b_name) {\n+                (Some(..), None) => Ordering::Greater,\n+                (None, Some(..)) => Ordering::Less,\n+                (None, None) => Ordering::Equal,\n+                (Some(..), Some(..)) => a.ident.name.cmp(&b.ident.name),\n+            };\n+            Some(result)\n         }\n         _ => None,\n     }\n@@ -257,7 +276,7 @@ fn rewrite_imports(\n         false,\n     );\n     let mut item_pair_vec: Vec<_> = items.zip(use_items.iter()).collect();\n-    item_pair_vec.sort_by(|a, b| compare_use_items(context, a.1, b.1).unwrap());\n+    item_pair_vec.sort_by(|a, b| compare_use_items(a.1, b.1).unwrap());\n     let item_vec: Vec<_> = item_pair_vec.into_iter().map(|pair| pair.0).collect();\n \n     let fmt = ListFormatting {"}, {"sha": "f9c9626a1f58c0267473b0bdfedd66baf0e78d12", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a332483bfeac25db9d0dd315b01cf2d05250c0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a332483bfeac25db9d0dd315b01cf2d05250c0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=91a332483bfeac25db9d0dd315b01cf2d05250c0", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(match_default_bindings)]\n #![feature(rustc_private)]\n #![feature(type_ascription)]\n "}, {"sha": "d544eb9b2df24140ecef8d929f3ab562f70d162f", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/91a332483bfeac25db9d0dd315b01cf2d05250c0/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a332483bfeac25db9d0dd315b01cf2d05250c0/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=91a332483bfeac25db9d0dd315b01cf2d05250c0", "patch": "@@ -1056,27 +1056,16 @@ fn format_derive(context: &RewriteContext, derive_args: &[&str], shape: Shape) -\n }\n \n fn is_derive(attr: &ast::Attribute) -> bool {\n-    match attr.meta() {\n-        Some(meta_item) => match meta_item.node {\n-            ast::MetaItemKind::List(..) => meta_item.name.as_str() == \"derive\",\n-            _ => false,\n-        },\n-        _ => false,\n-    }\n+    attr.check_name(\"derive\")\n }\n \n /// Returns the arguments of `#[derive(...)]`.\n fn get_derive_args<'a>(context: &'a RewriteContext, attr: &ast::Attribute) -> Option<Vec<&'a str>> {\n-    attr.meta().and_then(|meta_item| match meta_item.node {\n-        ast::MetaItemKind::List(ref args) if meta_item.name.as_str() == \"derive\" => {\n-            // Every argument of `derive` should be `NestedMetaItemKind::Literal`.\n-            Some(\n-                args.iter()\n-                    .map(|a| context.snippet(a.span))\n-                    .collect::<Vec<_>>(),\n-            )\n-        }\n-        _ => None,\n+    attr.meta_item_list().map(|meta_item_list| {\n+        meta_item_list\n+            .iter()\n+            .map(|nested_meta_item| context.snippet(nested_meta_item.span))\n+            .collect()\n     })\n }\n "}, {"sha": "187e698607ac0a19e304b3eed8a198e2574f0fb0", "filename": "tests/source/extern.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91a332483bfeac25db9d0dd315b01cf2d05250c0/tests%2Fsource%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a332483bfeac25db9d0dd315b01cf2d05250c0/tests%2Fsource%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fextern.rs?ref=91a332483bfeac25db9d0dd315b01cf2d05250c0", "patch": "@@ -10,6 +10,10 @@ extern crate chrono;\n extern crate foo;\n extern crate bar;\n \n+// #2315\n+extern crate proc_macro2;\n+extern crate proc_macro;\n+\n  extern  \"C\" {\n   fn c_func(x: *mut *mut libc::c_void);\n "}, {"sha": "b0aa51127d54ef737d93a60ef8a397653dfd604b", "filename": "tests/target/extern.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91a332483bfeac25db9d0dd315b01cf2d05250c0/tests%2Ftarget%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a332483bfeac25db9d0dd315b01cf2d05250c0/tests%2Ftarget%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern.rs?ref=91a332483bfeac25db9d0dd315b01cf2d05250c0", "patch": "@@ -1,7 +1,7 @@\n // rustfmt-normalize_comments: true\n \n-extern crate foo as bar;\n extern crate foo;\n+extern crate foo as bar;\n \n extern crate chrono;\n extern crate dotenv;\n@@ -10,6 +10,10 @@ extern crate futures;\n extern crate bar;\n extern crate foo;\n \n+// #2315\n+extern crate proc_macro;\n+extern crate proc_macro2;\n+\n extern \"C\" {\n     fn c_func(x: *mut *mut libc::c_void);\n "}]}