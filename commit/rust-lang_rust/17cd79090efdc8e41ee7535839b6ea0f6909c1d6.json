{"sha": "17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Y2Q3OTA5MGVmZGM4ZTQxZWU3NTM1ODM5YjZlYTBmNjkwOWMxZDY=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-10T13:53:38Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-10T13:53:44Z"}, "message": "support `as _` and add tests", "tree": {"sha": "1188e3e5645a13662f0b91f9e082d5095eaef15a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1188e3e5645a13662f0b91f9e082d5095eaef15a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "html_url": "https://github.com/rust-lang/rust/commit/17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c318364d485a5673015678b3ad0037eff71d6a8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c318364d485a5673015678b3ad0037eff71d6a8e", "html_url": "https://github.com/rust-lang/rust/commit/c318364d485a5673015678b3ad0037eff71d6a8e"}], "stats": {"total": 223, "additions": 220, "deletions": 3}, "files": [{"sha": "b1a938836b70ee1fff62cf28941327e124a5080e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "patch": "@@ -431,7 +431,9 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 }\n             }\n             // These are not actually relevant for us here, so we can ignore them.\n-            StatementKind::StorageLive(_) | StatementKind::StorageDead(_) => Ok(()),\n+            StatementKind::AscribeUserType(..)\n+            | StatementKind::StorageLive(_)\n+            | StatementKind::StorageDead(_) => Ok(()),\n             _ => self.error(Some(stmt.source_info.span), \"unsupported statement\")?,\n         }\n     }"}, {"sha": "744a1c4de48c0c75bf31f3a4450cb63e0a389a98", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-1.rs?ref=17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "patch": "@@ -6,13 +6,13 @@ struct Foo<const N: u8>([u8; N as usize])\n where\n     [(); N as usize]:;\n \n+struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 2) as usize]:;\n \n // unifying with subtrees\n struct Evaluatable<const N: u16>;\n fn foo<const N: u8>() where Evaluatable<{N as usize as u16 }>: {\n     let _ = Foo::<N>([1; N as usize]);\n }\n \n-struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 2) as usize]:;\n \n fn main() {}", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast.rs"}, {"sha": "543774649ed51c4868dedb064a752b40056219e1", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs?ref=17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "patch": "@@ -14,7 +14,7 @@ struct Foo2<const N: u8>(Evaluatable::<{N as u128}>) where Evaluatable<{N as usi\n //~| help: try adding a `where` bound using this expression: `where [(); {N as u128}]:`\n \n struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 1) as usize]:;\n-//~^ unconstrained generic constant\n+//~^ Error: unconstrained generic constant\n //~| help: try adding a `where` bound using this expression: `where [(); (N + 2) as usize]:`\n \n fn main() {}"}, {"sha": "2ca06bd1cb713ed9bf7a34973fd4af07baf0b86f", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-3.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.rs?ref=17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "patch": "@@ -0,0 +1,47 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {}\n+pub struct EvaluatableU128<const N: u128>;\n+\n+struct HasCastInTraitImpl<const N: usize, const M: u128>;\n+impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+\n+pub fn use_trait_impl<const N: usize>()\n+where\n+    [(); { N + 1}]:,\n+    EvaluatableU128<{N as u128}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    // errors are bad but seems to be pre-existing issue #86198\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+    //~^ Error: mismatched types\n+    assert_impl::<HasCastInTraitImpl<14, 13>>();\n+    //~^ Error: mismatched types\n+}\n+pub fn use_trait_impl_2<const N: usize>()\n+where\n+    [(); { N + 1}]:,\n+    EvaluatableU128<{N as _}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    // errors are bad but seems to be pre-existing issue #86198\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+    //~^ Error: mismatched types\n+    assert_impl::<HasCastInTraitImpl<14, 13>>();\n+    //~^ Error: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "c5237fc6f2b31b796bf89b44cfe764b18f43f97e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-3.stderr", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr?ref=17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "patch": "@@ -0,0 +1,139 @@\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:17:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:17:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as u128 }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as u128 }`\n+              found type `{ O as u128 }`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:20:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:20:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as _ }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as _ }`\n+              found type `{ O as u128 }`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:23:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12_u128`, found `13_u128`\n+   |\n+   = note: expected type `12_u128`\n+              found type `13_u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:25:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13_u128`, found `14_u128`\n+   |\n+   = note: expected type `13_u128`\n+              found type `14_u128`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:35:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl_2::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:35:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as u128 }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as u128 }`\n+              found type `{ O as u128 }`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:38:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl_2::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:38:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as _ }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as _ }`\n+              found type `{ O as u128 }`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:41:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12_u128`, found `13_u128`\n+   |\n+   = note: expected type `12_u128`\n+              found type `13_u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:43:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13_u128`, found `14_u128`\n+   |\n+   = note: expected type `13_u128`\n+              found type `14_u128`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0bb4fcff4d0b57a1d751935cff9b1337882f6a81", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-4.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cd79090efdc8e41ee7535839b6ea0f6909c1d6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-4.rs?ref=17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {}\n+pub struct EvaluatableU128<const N: u128>;\n+\n+struct HasCastInTraitImpl<const N: usize, const M: u128>;\n+impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+\n+pub fn use_trait_impl<const N: usize>() where EvaluatableU128<{N as u128}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<N, { N as _ }>>();\n+    assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<13, 13>>();\n+}\n+pub fn use_trait_impl_2<const N: usize>() where EvaluatableU128<{N as _}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<N, { N as _ }>>();\n+    assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<13, 13>>();\n+}\n+\n+\n+fn main() {}"}]}