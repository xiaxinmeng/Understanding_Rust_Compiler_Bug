{"sha": "1e1ff638a3c920654c5f05c83b05e1e3b76e9782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWZmNjM4YTNjOTIwNjU0YzVmMDVjODNiMDVlMWUzYjc2ZTk3ODI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-03-21T23:21:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-22T01:10:34Z"}, "message": "Make floating-point operations work (neg, add, sub, mul, div, rem,\nand comparison ops.)", "tree": {"sha": "f547938782ca67845b45cb4ea318c95a25b69854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f547938782ca67845b45cb4ea318c95a25b69854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1ff638a3c920654c5f05c83b05e1e3b76e9782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1ff638a3c920654c5f05c83b05e1e3b76e9782", "html_url": "https://github.com/rust-lang/rust/commit/1e1ff638a3c920654c5f05c83b05e1e3b76e9782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1ff638a3c920654c5f05c83b05e1e3b76e9782/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa22c93415bb106bced82bbabc3d9ffbef7e69c", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa22c93415bb106bced82bbabc3d9ffbef7e69c", "html_url": "https://github.com/rust-lang/rust/commit/caa22c93415bb106bced82bbabc3d9ffbef7e69c"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "d4cd3992289517bea46211bb04c2bacf5008b533", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ff638a3c920654c5f05c83b05e1e3b76e9782/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ff638a3c920654c5f05c83b05e1e3b76e9782/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1e1ff638a3c920654c5f05c83b05e1e3b76e9782", "patch": "@@ -2367,6 +2367,7 @@ fn trans_unary(@block_ctxt cx, ast.unop op,\n                @ast.expr e, &ast.ann a) -> result {\n \n     auto sub = trans_expr(cx, e);\n+    auto e_ty = ty.expr_ty(e);\n \n     alt (op) {\n         case (ast.bitnot) {\n@@ -2379,7 +2380,12 @@ fn trans_unary(@block_ctxt cx, ast.unop op,\n         }\n         case (ast.neg) {\n             sub = autoderef(sub.bcx, sub.val, ty.expr_ty(e));\n-            ret res(sub.bcx, sub.bcx.build.Neg(sub.val));\n+            if(e_ty.struct == ty.ty_float) {\n+                ret res(sub.bcx, sub.bcx.build.FNeg(sub.val));\n+            }\n+            else {\n+                ret res(sub.bcx, sub.bcx.build.Neg(sub.val));\n+            }\n         }\n         case (ast.box) {\n             auto e_ty = ty.expr_ty(e);\n@@ -2674,24 +2680,60 @@ fn trans_vec_add(@block_ctxt cx, @ty.t t,\n fn trans_eager_binop(@block_ctxt cx, ast.binop op, @ty.t intype,\n                      ValueRef lhs, ValueRef rhs) -> result {\n \n+    auto is_float = false;\n+    alt(intype.struct) {\n+        case (ty.ty_float) {\n+            is_float = true;\n+        }\n+        case (_) {\n+            is_float = false;\n+        }\n+    }\n+     \n     alt (op) {\n         case (ast.add) {\n             if (ty.type_is_sequence(intype)) {\n                 ret trans_vec_add(cx, intype, lhs, rhs);\n             }\n-            ret res(cx, cx.build.Add(lhs, rhs));\n+            if (is_float) {\n+                ret res(cx, cx.build.FAdd(lhs, rhs));\n+            }\n+            else {\n+                ret res(cx, cx.build.Add(lhs, rhs));\n+            }\n+        }\n+        case (ast.sub) {\n+            if (is_float) {\n+                ret res(cx, cx.build.FSub(lhs, rhs));\n+            }\n+            else {\n+                ret res(cx, cx.build.Sub(lhs, rhs));\n+            }\n+        }\n+\n+        case (ast.mul) { \n+            if (is_float) {\n+                ret res(cx, cx.build.FMul(lhs, rhs));\n+            }\n+            else {\n+                ret res(cx, cx.build.Mul(lhs, rhs));\n+            }\n         }\n-        case (ast.sub) { ret res(cx, cx.build.Sub(lhs, rhs)); }\n \n-        case (ast.mul) { ret res(cx, cx.build.Mul(lhs, rhs)); }\n         case (ast.div) {\n+            if (is_float) {\n+                ret res(cx, cx.build.FDiv(lhs, rhs));\n+            }\n             if (ty.type_is_signed(intype)) {\n                 ret res(cx, cx.build.SDiv(lhs, rhs));\n             } else {\n                 ret res(cx, cx.build.UDiv(lhs, rhs));\n             }\n         }\n         case (ast.rem) {\n+            if (is_float) {\n+                ret res(cx, cx.build.FRem(lhs, rhs));\n+            }\n             if (ty.type_is_signed(intype)) {\n                 ret res(cx, cx.build.SRem(lhs, rhs));\n             } else {"}, {"sha": "6eb3d8b53c12567b9fcc86e334ba20ed59904336", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ff638a3c920654c5f05c83b05e1e3b76e9782/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ff638a3c920654c5f05c83b05e1e3b76e9782/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1e1ff638a3c920654c5f05c83b05e1e3b76e9782", "patch": "@@ -245,6 +245,7 @@ fn fold_ty(ty_fold fld, @t ty) -> @t {\n         case (ty_bool)          { ret fld.fold_simple_ty(ty); }\n         case (ty_int)           { ret fld.fold_simple_ty(ty); }\n         case (ty_uint)          { ret fld.fold_simple_ty(ty); }\n+        case (ty_float)         { ret fld.fold_simple_ty(ty); }\n         case (ty_machine(_))    { ret fld.fold_simple_ty(ty); }\n         case (ty_char)          { ret fld.fold_simple_ty(ty); }\n         case (ty_str)           { ret fld.fold_simple_ty(ty); }\n@@ -503,6 +504,9 @@ fn type_is_fp(@t ty) -> bool {\n                 case (_) { ret false; }\n             }\n         }\n+        case (ty_float) {\n+            ret true;\n+        }\n         case (_) { ret false; }\n     }\n     fail;\n@@ -1126,6 +1130,7 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n             case (ty.ty_int)        { ret struct_cmp(expected, actual); }\n             case (ty.ty_uint)       { ret struct_cmp(expected, actual); }\n             case (ty.ty_machine(_)) { ret struct_cmp(expected, actual); }\n+            case (ty.ty_float)      { ret struct_cmp(expected, actual); }\n             case (ty.ty_char)       { ret struct_cmp(expected, actual); }\n             case (ty.ty_str)        { ret struct_cmp(expected, actual); }\n             case (ty.ty_type)       { ret struct_cmp(expected, actual); }"}]}