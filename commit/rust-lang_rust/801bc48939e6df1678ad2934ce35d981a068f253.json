{"sha": "801bc48939e6df1678ad2934ce35d981a068f253", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMWJjNDg5MzllNmRmMTY3OGFkMjkzNGNlMzVkOTgxYTA2OGYyNTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T15:33:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T15:25:12Z"}, "message": "Rewrite `Unique<T>` so that it is covariant in T, implies `NonZero` and ownership,\nand also follows the API of `NonZero` a bit more closely. More to do\nhere I think (including perhaps a new name).", "tree": {"sha": "00b84d20e0d80944c2c77bc0d8ba201f857a3143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b84d20e0d80944c2c77bc0d8ba201f857a3143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801bc48939e6df1678ad2934ce35d981a068f253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801bc48939e6df1678ad2934ce35d981a068f253", "html_url": "https://github.com/rust-lang/rust/commit/801bc48939e6df1678ad2934ce35d981a068f253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801bc48939e6df1678ad2934ce35d981a068f253/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c841f2a310ccad73059ed9f74232f14e8f680bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c841f2a310ccad73059ed9f74232f14e8f680bb", "html_url": "https://github.com/rust-lang/rust/commit/8c841f2a310ccad73059ed9f74232f14e8f680bb"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "230587b726fd1e022748df5e76ab48899237be7f", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/801bc48939e6df1678ad2934ce35d981a068f253/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801bc48939e6df1678ad2934ce35d981a068f253/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=801bc48939e6df1678ad2934ce35d981a068f253", "patch": "@@ -10,15 +10,14 @@\n \n //! Exposes the NonZero lang item which provides optimization hints.\n \n+use marker::{Sized, MarkerTrait};\n use ops::Deref;\n-use ptr::Unique;\n \n /// Unsafe trait to indicate what types are usable with the NonZero struct\n-pub unsafe trait Zeroable {}\n+pub unsafe trait Zeroable : MarkerTrait {}\n \n-unsafe impl<T> Zeroable for *const T {}\n-unsafe impl<T> Zeroable for *mut T {}\n-unsafe impl<T> Zeroable for Unique<T> { }\n+unsafe impl<T:?Sized> Zeroable for *const T {}\n+unsafe impl<T:?Sized> Zeroable for *mut T {}\n unsafe impl Zeroable for isize {}\n unsafe impl Zeroable for usize {}\n unsafe impl Zeroable for i8 {}"}, {"sha": "8fb8d30a3b8d47e08ae1d75d4441d4a2ff567d4d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/801bc48939e6df1678ad2934ce35d981a068f253/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801bc48939e6df1678ad2934ce35d981a068f253/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=801bc48939e6df1678ad2934ce35d981a068f253", "patch": "@@ -91,8 +91,10 @@\n use mem;\n use clone::Clone;\n use intrinsics;\n+use ops::Deref;\n use option::Option::{self, Some, None};\n-use marker::{self, Send, Sized, Sync};\n+use marker::{PhantomData, Send, Sized, Sync};\n+use nonzero::NonZero;\n \n use cmp::{PartialEq, Eq, Ord, PartialOrd};\n use cmp::Ordering::{self, Less, Equal, Greater};\n@@ -517,15 +519,16 @@ impl<T> PartialOrd for *mut T {\n \n /// A wrapper around a raw `*mut T` that indicates that the possessor\n /// of this wrapper owns the referent. This in turn implies that the\n-/// `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a\n-/// raw `*mut T` (which conveys no particular ownership semantics).\n-/// Useful for building abstractions like `Vec<T>` or `Box<T>`, which\n+/// `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n+/// `*mut T` (which conveys no particular ownership semantics).  It\n+/// also implies that the referent of the pointer should not be\n+/// modified without a unique path to the `Unique` reference. Useful\n+/// for building abstractions like `Vec<T>` or `Box<T>`, which\n /// internally use raw pointers to manage the memory that they own.\n #[unstable(feature = \"core\", reason = \"recently added to this module\")]\n-pub struct Unique<T: ?Sized> {\n-    /// The wrapped `*mut T`.\n-    pub ptr: *mut T,\n-    _own: marker::PhantomData<T>,\n+pub struct Unique<T:?Sized> {\n+    pointer: NonZero<*const T>,\n+    _marker: PhantomData<T>,\n }\n \n /// `Unique` pointers are `Send` if `T` is `Send` because the data they\n@@ -542,25 +545,34 @@ unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n #[unstable(feature = \"core\", reason = \"recently added to this module\")]\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n-impl<T> Unique<T> {\n-    /// Returns a null Unique.\n+impl<T:?Sized> Unique<T> {\n+    /// Create a new `Unique`.\n     #[unstable(feature = \"core\",\n                reason = \"recently added to this module\")]\n-    pub fn null() -> Unique<T> {\n-        Unique(null_mut())\n+    pub unsafe fn new(ptr: *mut T) -> Unique<T> {\n+        Unique { pointer: NonZero::new(ptr as *const T), _marker: PhantomData }\n     }\n \n-    /// Return an (unsafe) pointer into the memory owned by `self`.\n+    /// Dereference the content.\n     #[unstable(feature = \"core\",\n                reason = \"recently added to this module\")]\n-    pub unsafe fn offset(self, offset: isize) -> *mut T {\n-        self.ptr.offset(offset)\n+    pub unsafe fn get(&self) -> &T {\n+        &**self.pointer\n+    }\n+\n+    /// Mutably dereference the content.\n+    #[unstable(feature = \"core\",\n+               reason = \"recently added to this module\")]\n+    pub unsafe fn get_mut(&mut self) -> &mut T {\n+        &mut ***self\n     }\n }\n \n-/// Creates a `Unique` wrapped around `ptr`, taking ownership of the\n-/// data referenced by `ptr`.\n-#[allow(non_snake_case)]\n-pub fn Unique<T: ?Sized>(ptr: *mut T) -> Unique<T> {\n-    Unique { ptr: ptr, _own: marker::PhantomData }\n+impl<T:?Sized> Deref for Unique<T> {\n+    type Target = *mut T;\n+\n+    #[inline]\n+    fn deref<'a>(&'a self) -> &'a *mut T {\n+        unsafe { mem::transmute(&*self.pointer) }\n+    }\n }"}, {"sha": "57456bfb1a79ba04ce4b68c77999d37c2b507a90", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/801bc48939e6df1678ad2934ce35d981a068f253/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801bc48939e6df1678ad2934ce35d981a068f253/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=801bc48939e6df1678ad2934ce35d981a068f253", "patch": "@@ -171,8 +171,8 @@ fn test_set_memory() {\n #[test]\n fn test_unsized_unique() {\n     let xs: &mut [_] = &mut [1, 2, 3];\n-    let ptr = Unique(xs as *mut [_]);\n-    let ys = unsafe { &mut *ptr.ptr };\n+    let ptr = unsafe { Unique::new(xs as *mut [_]) };\n+    let ys = unsafe { &mut **ptr };\n     let zs: &mut [_] = &mut [1, 2, 3];\n     assert!(ys == zs);\n }"}]}