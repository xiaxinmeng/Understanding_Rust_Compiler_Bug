{"sha": "8d5702e437e051333dcf1005fcce140c5c96f759", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTcwMmU0MzdlMDUxMzMzZGNmMTAwNWZjY2UxNDBjNWM5NmY3NTk=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-13T07:14:47Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-15T23:22:56Z"}, "message": "Fix performance issues", "tree": {"sha": "91a86c2c81e8c419a825146b5d28e5d2eac7e412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a86c2c81e8c419a825146b5d28e5d2eac7e412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5702e437e051333dcf1005fcce140c5c96f759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5702e437e051333dcf1005fcce140c5c96f759", "html_url": "https://github.com/rust-lang/rust/commit/8d5702e437e051333dcf1005fcce140c5c96f759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5702e437e051333dcf1005fcce140c5c96f759/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b18904d0399d8dcfee5dfc94e38d78a8fbba66", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b18904d0399d8dcfee5dfc94e38d78a8fbba66", "html_url": "https://github.com/rust-lang/rust/commit/38b18904d0399d8dcfee5dfc94e38d78a8fbba66"}], "stats": {"total": 176, "additions": 90, "deletions": 86}, "files": [{"sha": "03d132ae0468853d19320a7421c589f8572f6741", "filename": "crates/core_simd/tests/float.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8d5702e437e051333dcf1005fcce140c5c96f759/crates%2Fcore_simd%2Ftests%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5702e437e051333dcf1005fcce140c5c96f759/crates%2Fcore_simd%2Ftests%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ffloat.rs?ref=8d5702e437e051333dcf1005fcce140c5c96f759", "patch": "@@ -6,9 +6,9 @@ macro_rules! impl_op_test {\n         test_helpers::test_lanes! {\n             fn $fn<const LANES: usize>() {\n                 test_helpers::test_unary_elementwise(\n-                    <$vector as core::ops::$trait>::$fn,\n-                    <$scalar as core::ops::$trait>::$fn,\n-                    |_| true,\n+                    &<$vector as core::ops::$trait>::$fn,\n+                    &<$scalar as core::ops::$trait>::$fn,\n+                    &|_| true,\n                 );\n             }\n         }\n@@ -20,41 +20,41 @@ macro_rules! impl_op_test {\n             test_helpers::test_lanes! {\n                 fn normal<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        <$vector as core::ops::$trait>::$fn,\n-                        <$scalar as core::ops::$trait>::$fn,\n-                        |_, _| true,\n+                        &<$vector as core::ops::$trait>::$fn,\n+                        &<$scalar as core::ops::$trait>::$fn,\n+                        &|_, _| true,\n                     );\n                 }\n \n                 fn scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        <$vector as core::ops::$trait<$scalar>>::$fn,\n-                        <$scalar as core::ops::$trait>::$fn,\n-                        |_, _| true,\n+                        &<$vector as core::ops::$trait<$scalar>>::$fn,\n+                        &<$scalar as core::ops::$trait>::$fn,\n+                        &|_, _| true,\n                     );\n                 }\n \n                 fn scalar_lhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_lhs_elementwise(\n-                        <$scalar as core::ops::$trait<$vector>>::$fn,\n-                        <$scalar as core::ops::$trait>::$fn,\n-                        |_, _| true,\n+                        &<$scalar as core::ops::$trait<$vector>>::$fn,\n+                        &<$scalar as core::ops::$trait>::$fn,\n+                        &|_, _| true,\n                     );\n                 }\n \n                 fn assign<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        |mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        |mut a, b| { <$scalar as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        |_, _| true,\n+                        &|mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n+                        &|mut a, b| { <$scalar as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n+                        &|_, _| true,\n                     )\n                 }\n \n                 fn assign_scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        |mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n-                        |mut a, b| { <$scalar as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        |_, _| true,\n+                        &|mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n+                        &|mut a, b| { <$scalar as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n+                        &|_, _| true,\n                     )\n                 }\n             }\n@@ -79,33 +79,33 @@ macro_rules! impl_tests {\n             test_helpers::test_lanes! {\n                 fn abs<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n-                        Vector::<LANES>::abs,\n-                        Scalar::abs,\n-                        |_| true,\n+                        &Vector::<LANES>::abs,\n+                        &Scalar::abs,\n+                        &|_| true,\n                     )\n                 }\n \n                 fn ceil<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n-                        Vector::<LANES>::ceil,\n-                        Scalar::ceil,\n-                        |_| true,\n+                        &Vector::<LANES>::ceil,\n+                        &Scalar::ceil,\n+                        &|_| true,\n                     )\n                 }\n \n                 fn floor<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n-                        Vector::<LANES>::floor,\n-                        Scalar::floor,\n-                        |_| true,\n+                        &Vector::<LANES>::floor,\n+                        &Scalar::floor,\n+                        &|_| true,\n                     )\n                 }\n \n                 fn round_from_int<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n-                        Vector::<LANES>::round_from_int,\n-                        |x| x as Scalar,\n-                        |_| true,\n+                        &Vector::<LANES>::round_from_int,\n+                        &|x| x as Scalar,\n+                        &|_| true,\n                     )\n                 }\n "}, {"sha": "878b3f0329a4ab1cf269eda10cfde7a8cdd1a02e", "filename": "crates/core_simd/tests/integer.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8d5702e437e051333dcf1005fcce140c5c96f759/crates%2Fcore_simd%2Ftests%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5702e437e051333dcf1005fcce140c5c96f759/crates%2Fcore_simd%2Ftests%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Finteger.rs?ref=8d5702e437e051333dcf1005fcce140c5c96f759", "patch": "@@ -6,9 +6,9 @@ macro_rules! impl_unary_op_test {\n         test_helpers::test_lanes! {\n             fn $fn<const LANES: usize>() {\n                 test_helpers::test_unary_elementwise(\n-                    <$vector as core::ops::$trait>::$fn,\n-                    $scalar_fn,\n-                    |_| true,\n+                    &<$vector as core::ops::$trait>::$fn,\n+                    &$scalar_fn,\n+                    &|_| true,\n                 );\n             }\n         }\n@@ -26,42 +26,42 @@ macro_rules! impl_binary_op_test {\n             test_helpers::test_lanes! {\n                 fn normal<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        <$vector as core::ops::$trait>::$fn,\n-                        $scalar_fn,\n-                        |_, _| true,\n+                        &<$vector as core::ops::$trait>::$fn,\n+                        &$scalar_fn,\n+                        &|_, _| true,\n                     );\n                 }\n \n                 fn scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        <$vector as core::ops::$trait<$scalar>>::$fn,\n-                        $scalar_fn,\n-                        |_, _| true,\n+                        &<$vector as core::ops::$trait<$scalar>>::$fn,\n+                        &$scalar_fn,\n+                        &|_, _| true,\n                     );\n                 }\n \n                 fn scalar_lhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_lhs_elementwise(\n-                        <$scalar as core::ops::$trait<$vector>>::$fn,\n-                        $scalar_fn,\n-                        |_, _| true,\n+                        &<$scalar as core::ops::$trait<$vector>>::$fn,\n+                        &$scalar_fn,\n+                        &|_, _| true,\n                     );\n                 }\n \n                 fn assign<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        |mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        $scalar_fn,\n-                        |_, _| true,\n-                    )\n+                        &|mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n+                        &$scalar_fn,\n+                        &|_, _| true,\n+                    );\n                 }\n \n                 fn assign_scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        |mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n-                        $scalar_fn,\n-                        |_, _| true,\n-                    )\n+                        &|mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n+                        &$scalar_fn,\n+                        &|_, _| true,\n+                    );\n                 }\n             }\n         }\n@@ -79,41 +79,41 @@ macro_rules! impl_binary_checked_op_test {\n             test_helpers::test_lanes! {\n                 fn normal<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        <$vector as core::ops::$trait>::$fn,\n-                        $scalar_fn,\n-                        |x, y| x.iter().zip(y.iter()).all(|(x, y)| $check_fn(*x, *y)),\n+                        &<$vector as core::ops::$trait>::$fn,\n+                        &$scalar_fn,\n+                        &|x, y| x.iter().zip(y.iter()).all(|(x, y)| $check_fn(*x, *y)),\n                     );\n                 }\n \n                 fn scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        <$vector as core::ops::$trait<$scalar>>::$fn,\n-                        $scalar_fn,\n-                        |x, y| x.iter().all(|x| $check_fn(*x, y)),\n+                        &<$vector as core::ops::$trait<$scalar>>::$fn,\n+                        &$scalar_fn,\n+                        &|x, y| x.iter().all(|x| $check_fn(*x, y)),\n                     );\n                 }\n \n                 fn scalar_lhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_lhs_elementwise(\n-                        <$scalar as core::ops::$trait<$vector>>::$fn,\n-                        $scalar_fn,\n-                        |x, y| y.iter().all(|y| $check_fn(x, *y)),\n+                        &<$scalar as core::ops::$trait<$vector>>::$fn,\n+                        &$scalar_fn,\n+                        &|x, y| y.iter().all(|y| $check_fn(x, *y)),\n                     );\n                 }\n \n                 fn assign<const LANES: usize>() {\n                     test_helpers::test_binary_elementwise(\n-                        |mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        $scalar_fn,\n-                        |x, y| x.iter().zip(y.iter()).all(|(x, y)| $check_fn(*x, *y)),\n+                        &|mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n+                        &$scalar_fn,\n+                        &|x, y| x.iter().zip(y.iter()).all(|(x, y)| $check_fn(*x, *y)),\n                     )\n                 }\n \n                 fn assign_scalar_rhs<const LANES: usize>() {\n                     test_helpers::test_binary_scalar_rhs_elementwise(\n-                        |mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n-                        $scalar_fn,\n-                        |x, y| x.iter().all(|x| $check_fn(*x, y)),\n+                        &|mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n+                        &$scalar_fn,\n+                        &|x, y| x.iter().all(|x| $check_fn(*x, y)),\n                     )\n                 }\n             }\n@@ -133,9 +133,9 @@ macro_rules! impl_signed_tests {\n             test_helpers::test_lanes! {\n                 fn neg<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n-                        <Vector<LANES> as core::ops::Neg>::neg,\n-                        <Scalar as core::ops::Neg>::neg,\n-                        |x| !x.contains(&Scalar::MIN),\n+                        &<Vector<LANES> as core::ops::Neg>::neg,\n+                        &<Scalar as core::ops::Neg>::neg,\n+                        &|x| !x.contains(&Scalar::MIN),\n                     );\n                 }\n             }"}, {"sha": "134b4073a4e269c0e74dd5fba63da7b2e84dea40", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8d5702e437e051333dcf1005fcce140c5c96f759/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5702e437e051333dcf1005fcce140c5c96f759/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=8d5702e437e051333dcf1005fcce140c5c96f759", "patch": "@@ -42,14 +42,14 @@ impl<T: core::fmt::Debug + DefaultStrategy, const LANES: usize> DefaultStrategy\n }\n \n pub fn test_1<A: core::fmt::Debug + DefaultStrategy>(\n-    f: impl Fn(A) -> proptest::test_runner::TestCaseResult,\n+    f: &dyn Fn(A) -> proptest::test_runner::TestCaseResult,\n ) {\n     let mut runner = proptest::test_runner::TestRunner::default();\n     runner.run(&A::default_strategy(), f).unwrap();\n }\n \n pub fn test_2<A: core::fmt::Debug + DefaultStrategy, B: core::fmt::Debug + DefaultStrategy>(\n-    f: impl Fn(A, B) -> proptest::test_runner::TestCaseResult,\n+    f: &dyn Fn(A, B) -> proptest::test_runner::TestCaseResult,\n ) {\n     let mut runner = proptest::test_runner::TestRunner::default();\n     runner\n@@ -59,17 +59,18 @@ pub fn test_2<A: core::fmt::Debug + DefaultStrategy, B: core::fmt::Debug + Defau\n         .unwrap();\n }\n \n+#[inline(never)]\n pub fn test_unary_elementwise<Scalar, ScalarResult, Vector, VectorResult, const LANES: usize>(\n-    fv: impl Fn(Vector) -> VectorResult,\n-    fs: impl Fn(Scalar) -> ScalarResult,\n-    check: impl Fn([Scalar; LANES]) -> bool,\n+    fv: &dyn Fn(Vector) -> VectorResult,\n+    fs: &dyn Fn(Scalar) -> ScalarResult,\n+    check: &dyn Fn([Scalar; LANES]) -> bool,\n ) where\n     Scalar: Copy + Default + core::fmt::Debug + DefaultStrategy,\n     ScalarResult: Copy + Default + biteq::BitEq + core::fmt::Debug + DefaultStrategy,\n     Vector: Into<[Scalar; LANES]> + From<[Scalar; LANES]> + Copy,\n     VectorResult: Into<[ScalarResult; LANES]> + From<[ScalarResult; LANES]> + Copy,\n {\n-    test_1(|x: [Scalar; LANES]| {\n+    test_1(&|x: [Scalar; LANES]| {\n         proptest::prop_assume!(check(x));\n         let result_1: [ScalarResult; LANES] = fv(x.into()).into();\n         let result_2: [ScalarResult; LANES] = {\n@@ -84,6 +85,7 @@ pub fn test_unary_elementwise<Scalar, ScalarResult, Vector, VectorResult, const\n     });\n }\n \n+#[inline(never)]\n pub fn test_binary_elementwise<\n     Scalar1,\n     Scalar2,\n@@ -93,9 +95,9 @@ pub fn test_binary_elementwise<\n     VectorResult,\n     const LANES: usize,\n >(\n-    fv: impl Fn(Vector1, Vector2) -> VectorResult,\n-    fs: impl Fn(Scalar1, Scalar2) -> ScalarResult,\n-    check: impl Fn([Scalar1; LANES], [Scalar2; LANES]) -> bool,\n+    fv: &dyn Fn(Vector1, Vector2) -> VectorResult,\n+    fs: &dyn Fn(Scalar1, Scalar2) -> ScalarResult,\n+    check: &dyn Fn([Scalar1; LANES], [Scalar2; LANES]) -> bool,\n ) where\n     Scalar1: Copy + Default + core::fmt::Debug + DefaultStrategy,\n     Scalar2: Copy + Default + core::fmt::Debug + DefaultStrategy,\n@@ -104,7 +106,7 @@ pub fn test_binary_elementwise<\n     Vector2: Into<[Scalar2; LANES]> + From<[Scalar2; LANES]> + Copy,\n     VectorResult: Into<[ScalarResult; LANES]> + From<[ScalarResult; LANES]> + Copy,\n {\n-    test_2(|x: [Scalar1; LANES], y: [Scalar2; LANES]| {\n+    test_2(&|x: [Scalar1; LANES], y: [Scalar2; LANES]| {\n         proptest::prop_assume!(check(x, y));\n         let result_1: [ScalarResult; LANES] = fv(x.into(), y.into()).into();\n         let result_2: [ScalarResult; LANES] = {\n@@ -119,6 +121,7 @@ pub fn test_binary_elementwise<\n     });\n }\n \n+#[inline(never)]\n pub fn test_binary_scalar_rhs_elementwise<\n     Scalar1,\n     Scalar2,\n@@ -127,17 +130,17 @@ pub fn test_binary_scalar_rhs_elementwise<\n     VectorResult,\n     const LANES: usize,\n >(\n-    fv: impl Fn(Vector, Scalar2) -> VectorResult,\n-    fs: impl Fn(Scalar1, Scalar2) -> ScalarResult,\n-    check: impl Fn([Scalar1; LANES], Scalar2) -> bool,\n+    fv: &dyn Fn(Vector, Scalar2) -> VectorResult,\n+    fs: &dyn Fn(Scalar1, Scalar2) -> ScalarResult,\n+    check: &dyn Fn([Scalar1; LANES], Scalar2) -> bool,\n ) where\n     Scalar1: Copy + Default + core::fmt::Debug + DefaultStrategy,\n     Scalar2: Copy + Default + core::fmt::Debug + DefaultStrategy,\n     ScalarResult: Copy + Default + biteq::BitEq + core::fmt::Debug + DefaultStrategy,\n     Vector: Into<[Scalar1; LANES]> + From<[Scalar1; LANES]> + Copy,\n     VectorResult: Into<[ScalarResult; LANES]> + From<[ScalarResult; LANES]> + Copy,\n {\n-    test_2(|x: [Scalar1; LANES], y: Scalar2| {\n+    test_2(&|x: [Scalar1; LANES], y: Scalar2| {\n         proptest::prop_assume!(check(x, y));\n         let result_1: [ScalarResult; LANES] = fv(x.into(), y).into();\n         let result_2: [ScalarResult; LANES] = {\n@@ -152,6 +155,7 @@ pub fn test_binary_scalar_rhs_elementwise<\n     });\n }\n \n+#[inline(never)]\n pub fn test_binary_scalar_lhs_elementwise<\n     Scalar1,\n     Scalar2,\n@@ -160,17 +164,17 @@ pub fn test_binary_scalar_lhs_elementwise<\n     VectorResult,\n     const LANES: usize,\n >(\n-    fv: impl Fn(Scalar1, Vector) -> VectorResult,\n-    fs: impl Fn(Scalar1, Scalar2) -> ScalarResult,\n-    check: impl Fn(Scalar1, [Scalar2; LANES]) -> bool,\n+    fv: &dyn Fn(Scalar1, Vector) -> VectorResult,\n+    fs: &dyn Fn(Scalar1, Scalar2) -> ScalarResult,\n+    check: &dyn Fn(Scalar1, [Scalar2; LANES]) -> bool,\n ) where\n     Scalar1: Copy + Default + core::fmt::Debug + DefaultStrategy,\n     Scalar2: Copy + Default + core::fmt::Debug + DefaultStrategy,\n     ScalarResult: Copy + Default + biteq::BitEq + core::fmt::Debug + DefaultStrategy,\n     Vector: Into<[Scalar2; LANES]> + From<[Scalar2; LANES]> + Copy,\n     VectorResult: Into<[ScalarResult; LANES]> + From<[ScalarResult; LANES]> + Copy,\n {\n-    test_2(|x: Scalar1, y: [Scalar2; LANES]| {\n+    test_2(&|x: Scalar1, y: [Scalar2; LANES]| {\n         proptest::prop_assume!(check(x, y));\n         let result_1: [ScalarResult; LANES] = fv(x, y.into()).into();\n         let result_2: [ScalarResult; LANES] = {"}]}