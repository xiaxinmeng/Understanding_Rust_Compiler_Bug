{"sha": "f5da4881dc19e99443da83f7c3210bfbd2591722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZGE0ODgxZGMxOWU5OTQ0M2RhODNmN2MzMjEwYmZiZDI1OTE3MjI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-16T04:04:17Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-16T06:12:06Z"}, "message": "Comments only: issue numbers for FIXMEs", "tree": {"sha": "cd179d68f69afef4592b1b52e8c236e92dc9755e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd179d68f69afef4592b1b52e8c236e92dc9755e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5da4881dc19e99443da83f7c3210bfbd2591722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5da4881dc19e99443da83f7c3210bfbd2591722", "html_url": "https://github.com/rust-lang/rust/commit/f5da4881dc19e99443da83f7c3210bfbd2591722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5da4881dc19e99443da83f7c3210bfbd2591722/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1c84e92dd307266020e9da14774fc14f8cf409d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c84e92dd307266020e9da14774fc14f8cf409d", "html_url": "https://github.com/rust-lang/rust/commit/c1c84e92dd307266020e9da14774fc14f8cf409d"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "f5fd997c55ef0b1f90e788746993925bde351430", "filename": "src/libcore/io.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5da4881dc19e99443da83f7c3210bfbd2591722/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5da4881dc19e99443da83f7c3210bfbd2591722/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=f5da4881dc19e99443da83f7c3210bfbd2591722", "patch": "@@ -20,12 +20,13 @@ native mod rustrt {\n // Reading\n \n // FIXME This is all buffered. We might need an unbuffered variant as well\n+// #2004\n enum seek_style { seek_set, seek_end, seek_cur, }\n \n \n // The raw underlying reader iface. All readers must implement this.\n iface reader {\n-    // FIXME: Seekable really should be orthogonal.\n+    // FIXME: Seekable really should be orthogonal. // #2004\n     fn read_bytes(uint) -> [u8];\n     fn read_byte() -> int;\n     fn unread_byte(int);\n@@ -79,7 +80,7 @@ impl reader_util for reader {\n             let data = self.read_bytes(nbread);\n             if vec::len(data) == 0u {\n                 // eof - FIXME should we do something if\n-                // we're split in a unicode char?\n+                // we're split in a unicode char? // #2004\n                 break;\n             }\n             buf += data;\n@@ -99,7 +100,7 @@ impl reader_util for reader {\n     fn read_char() -> char {\n         let c = self.read_chars(1u);\n         if vec::len(c) == 0u {\n-            ret -1 as char; // FIXME will this stay valid?\n+            ret -1 as char; // FIXME will this stay valid? // #2004\n         }\n         assert(vec::len(c) == 1u);\n         ret c[0];\n@@ -124,7 +125,7 @@ impl reader_util for reader {\n         str::from_bytes(buf)\n     }\n \n-    // FIXME deal with eof?\n+    // FIXME deal with eof? // #2004\n     fn read_le_uint(size: uint) -> uint {\n         let mut val = 0u, pos = 0u, i = size;\n         while i > 0u {\n@@ -192,7 +193,7 @@ impl of reader for *libc::FILE {\n \n // A forwarding impl of reader that also holds on to a resource for the\n // duration of its lifetime.\n-// FIXME there really should be a better way to do this\n+// FIXME there really should be a better way to do this // #2004\n impl <T: reader, C> of reader for {base: T, cleanup: C} {\n     fn read_bytes(len: uint) -> [u8] { self.base.read_bytes(len) }\n     fn read_byte() -> int { self.base.read_byte() }\n@@ -214,7 +215,7 @@ fn FILE_reader(f: *libc::FILE, cleanup: bool) -> reader {\n \n // FIXME: this should either be an iface-less impl, a set of top-level\n // functions that take a reader, or a set of default methods on reader\n-// (which can then be called reader)\n+// (which can then be called reader) // #2004\n \n fn stdin() -> reader { rustrt::rust_get_stdin() as reader }\n \n@@ -292,6 +293,7 @@ enum fileflag { append, create, truncate, no_flag, }\n \n // FIXME: Seekable really should be orthogonal.\n // FIXME: eventually u64\n+// #2004\n iface writer {\n     fn write([const u8]);\n     fn seek(int, seek_style);\n@@ -490,7 +492,7 @@ fn file_writer(path: str, flags: [fileflag]) -> result<writer, str> {\n }\n \n \n-// FIXME: fileflags\n+// FIXME: fileflags // #2004\n fn buffered_file_writer(path: str) -> result<writer, str> {\n     let f = os::as_c_charp(path) {|pathbuf|\n         os::as_c_charp(\"w\") {|modebuf|\n@@ -503,6 +505,7 @@ fn buffered_file_writer(path: str) -> result<writer, str> {\n \n // FIXME it would be great if this could be a const\n // FIXME why are these different from the way stdin() is implemented?\n+// #2004\n fn stdout() -> writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n fn stderr() -> writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n \n@@ -520,7 +523,7 @@ impl of writer for mem_buffer {\n             self.pos += vec::len(v);\n             ret;\n         }\n-        // FIXME: Optimize: These should be unique pointers.\n+        // FIXME: Optimize: These should be unique pointers. // #2004\n         let vlen = vec::len(v);\n         let mut vpos = 0u;\n         while vpos < vlen {\n@@ -586,7 +589,7 @@ fn read_whole_file_str(file: str) -> result<str, str> {\n }\n \n // FIXME implement this in a low-level way. Going through the abstractions is\n-// pointless.\n+// pointless. // #2004\n fn read_whole_file(file: str) -> result<[u8], str> {\n     result::chain(file_reader(file), { |rdr|\n         result::ok(rdr.read_whole_stream())\n@@ -630,6 +633,7 @@ mod fsync {\n \n     // fsync file after executing blk\n     // FIXME find better way to create resources within lifetime of outer res\n+    // #2004\n     fn FILE_res_sync(&&file: FILE_res, opt_level: option<level>,\n                   blk: fn(&&res<*libc::FILE>)) {\n         blk(res({"}]}