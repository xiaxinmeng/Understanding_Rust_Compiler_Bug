{"sha": "6641233b34fd910864131febb22f71777a7add6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NDEyMzNiMzRmZDkxMDg2NDEzMWZlYmIyMmY3MTc3N2E3YWRkNmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-19T08:09:00Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-30T09:45:11Z"}, "message": "Reduce repetition around `lower_method_sig`", "tree": {"sha": "82961eaa88c62e04e5dbc7cbf429e051e821e74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82961eaa88c62e04e5dbc7cbf429e051e821e74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6641233b34fd910864131febb22f71777a7add6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6641233b34fd910864131febb22f71777a7add6a", "html_url": "https://github.com/rust-lang/rust/commit/6641233b34fd910864131febb22f71777a7add6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6641233b34fd910864131febb22f71777a7add6a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82091d421a06db8e37a20bbbfbc017416fea2a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/82091d421a06db8e37a20bbbfbc017416fea2a0c", "html_url": "https://github.com/rust-lang/rust/commit/82091d421a06db8e37a20bbbfbc017416fea2a0c"}], "stats": {"total": 67, "additions": 29, "deletions": 38}, "files": [{"sha": "30537f41178e74c9780ebed204179349343f49ed", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6641233b34fd910864131febb22f71777a7add6a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6641233b34fd910864131febb22f71777a7add6a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6641233b34fd910864131febb22f71777a7add6a", "patch": "@@ -2905,35 +2905,30 @@ impl<'a> LoweringContext<'a> {\n             ),\n             TraitItemKind::Method(ref sig, None) => {\n                 let names = self.lower_fn_args_to_names(&sig.decl);\n-                self.add_in_band_defs(\n+                let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n+                    sig,\n                     trait_item_def_id,\n-                    AnonymousLifetimeMode::PassThrough,\n-                    |this| {\n-                        hir::TraitItemKind::Method(\n-                            this.lower_method_sig(sig, trait_item_def_id, false, None),\n-                            hir::TraitMethod::Required(names),\n-                        )\n-                    },\n-                )\n+                    false,\n+                    None,\n+                );\n+                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n             TraitItemKind::Method(ref sig, Some(ref body)) => {\n                 let body_id = self.lower_body(Some(&sig.decl), |this| {\n                     let body = this.lower_block(body, false);\n                     this.expr_block(body, ThinVec::new())\n                 });\n \n-                self.add_in_band_defs(\n+                let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n+                    sig,\n                     trait_item_def_id,\n-                    AnonymousLifetimeMode::PassThrough,\n-                    |this| {\n-                        hir::TraitItemKind::Method(\n-                            this.lower_method_sig(sig, trait_item_def_id, false, None),\n-                            hir::TraitMethod::Provided(body_id),\n-                        )\n-                    },\n-                )\n+                    false,\n+                    None,\n+                );\n+\n+                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             TraitItemKind::Type(ref bounds, ref default) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n@@ -3001,23 +2996,14 @@ impl<'a> LoweringContext<'a> {\n             ImplItemKind::Method(ref sig, ref body) => {\n                 let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness, body);\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n-\n-                self.add_in_band_defs(\n+                let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n+                    sig,\n                     impl_item_def_id,\n-                    AnonymousLifetimeMode::PassThrough,\n-                    |this| {\n-                        hir::ImplItemKind::Method(\n-                            this.lower_method_sig(\n-                                sig,\n-                                impl_item_def_id,\n-                                impl_trait_return_allow,\n-                                sig.header.asyncness.opt_return_id(),\n-                            ),\n-                            body_id,\n-                        )\n-                    },\n-                )\n+                    impl_trait_return_allow,\n+                    sig.header.asyncness.opt_return_id(),\n+                );\n+                (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n             ImplItemKind::Type(ref ty) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n@@ -3231,15 +3217,20 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_method_sig(\n         &mut self,\n+        generics: &Generics,\n         sig: &MethodSig,\n         fn_def_id: DefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n-    ) -> hir::MethodSig {\n-        hir::MethodSig {\n-            header: self.lower_fn_header(sig.header),\n-            decl: self.lower_fn_decl(&sig.decl, Some(fn_def_id), impl_trait_return_allow, is_async),\n-        }\n+    ) -> (hir::Generics, hir::MethodSig) {\n+        let header = self.lower_fn_header(sig.header);\n+        let (generics, decl) = self.add_in_band_defs(\n+            generics,\n+            fn_def_id,\n+            AnonymousLifetimeMode::PassThrough,\n+            |cx| cx.lower_fn_decl(&sig.decl, Some(fn_def_id), impl_trait_return_allow, is_async),\n+        );\n+        (generics, hir::MethodSig { header, decl })\n     }\n \n     fn lower_is_auto(&mut self, a: IsAuto) -> hir::IsAuto {"}]}