{"sha": "c80483d582b995e7890a581e7de03c70c51df137", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MDQ4M2Q1ODJiOTk1ZTc4OTBhNTgxZTdkZTAzYzcwYzUxZGYxMzc=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-07-20T00:33:50Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-07-20T00:33:50Z"}, "message": "Fixed circular buffer resizing bug.", "tree": {"sha": "ef174a98cf18cfee3ec63b07a8b3a28554f2de51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef174a98cf18cfee3ec63b07a8b3a28554f2de51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80483d582b995e7890a581e7de03c70c51df137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80483d582b995e7890a581e7de03c70c51df137", "html_url": "https://github.com/rust-lang/rust/commit/c80483d582b995e7890a581e7de03c70c51df137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80483d582b995e7890a581e7de03c70c51df137/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00d1465d13980fc3acf650f182ee0723fbda0e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d1465d13980fc3acf650f182ee0723fbda0e06", "html_url": "https://github.com/rust-lang/rust/commit/00d1465d13980fc3acf650f182ee0723fbda0e06"}], "stats": {"total": 99, "additions": 79, "deletions": 20}, "files": [{"sha": "f0e9b929229d8ecd863cc93e0f7f369f7dcaa243", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80483d582b995e7890a581e7de03c70c51df137/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c80483d582b995e7890a581e7de03c70c51df137/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=c80483d582b995e7890a581e7de03c70c51df137", "patch": "@@ -374,7 +374,6 @@ TEST_XFAILS_X86 :=  $(MUT_BOX_XFAILS) \\\n                     test/run-pass/vec-alloc-append.rs \\\n                     test/run-pass/vec-slice.rs \\\n \t\t\t\t\ttest/run-pass/task-comm-3.rs \\\n-\t\t\t\t\ttest/run-pass/task-comm-4.rs \\\n                     test/compile-fail/bad-recv.rs \\\n                     test/compile-fail/bad-send.rs \\\n                     test/compile-fail/infinite-tag-type-recursion.rs \\"}, {"sha": "415a966b8fd1eaa1ddf74b5f80206fef8de5d413", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c80483d582b995e7890a581e7de03c70c51df137/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c80483d582b995e7890a581e7de03c70c51df137/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=c80483d582b995e7890a581e7de03c70c51df137", "patch": "@@ -7,7 +7,7 @@\n circular_buffer::circular_buffer(rust_dom *dom, size_t unit_sz) :\n     dom(dom),\n     _buffer_sz(INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS * unit_sz),\n-    unit_sz(unit_sz),\n+    _unit_sz(unit_sz),\n     _next(0),\n     _unread(0),\n     _buffer((uint8_t *)dom->calloc(_buffer_sz)) {\n@@ -27,7 +27,7 @@ circular_buffer::~circular_buffer() {\n              \"~circular_buffer 0x%\" PRIxPTR,\n              this);\n     I(dom, _buffer);\n-    // I(dom, unread == 0);\n+    // I(dom, _unread == 0);\n     dom->free(_buffer);\n }\n \n@@ -38,8 +38,8 @@ void\n circular_buffer::transfer(void *dst) {\n     I(dom, dst);\n     uint8_t *ptr = (uint8_t *) dst;\n-    for (size_t i = 0; i < _unread; i += unit_sz) {\n-        memcpy(&ptr[i], &_buffer[_next + i % _buffer_sz], unit_sz);\n+    for (size_t i = 0; i < _unread; i += _unit_sz) {\n+        memcpy(&ptr[i], &_buffer[(_next + i) % _buffer_sz], _unit_sz);\n     }\n }\n \n@@ -65,15 +65,15 @@ circular_buffer::enqueue(void *src) {\n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"circular_buffer enqueue \"\n              \"unread: %d, buffer_sz: %d, unit_sz: %d\",\n-             _unread, _buffer_sz, unit_sz);\n+             _unread, _buffer_sz, _unit_sz);\n \n     I(dom, _unread < _buffer_sz);\n-    I(dom, _unread + unit_sz <= _buffer_sz);\n+    I(dom, _unread + _unit_sz <= _buffer_sz);\n \n     // Copy data\n     size_t i = (_next + _unread) % _buffer_sz;\n-    memcpy(&_buffer[i], src, unit_sz);\n-    _unread += unit_sz;\n+    memcpy(&_buffer[i], src, _unit_sz);\n+    _unread += _unit_sz;\n \n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"circular_buffer pushed data at index: %d\", i);\n@@ -86,30 +86,34 @@ circular_buffer::enqueue(void *src) {\n void\n circular_buffer::dequeue(void *dst) {\n     I(dom, dst);\n-    I(dom, unit_sz > 0);\n-    I(dom, _unread >= unit_sz);\n+    I(dom, _unit_sz > 0);\n+    I(dom, _unread >= _unit_sz);\n     I(dom, _unread <= _buffer_sz);\n     I(dom, _buffer);\n-    size_t i = _next;\n-    memcpy(dst, &_buffer[i], unit_sz);\n+\n+    memcpy(dst, &_buffer[_next], _unit_sz);\n     dom->log(rust_log::MEM | rust_log::COMM,\n-             \"shifted data from index %d\", i);\n-    _unread -= unit_sz;\n-    _next += unit_sz;\n+             \"shifted data from index %d\", _next);\n+    _unread -= _unit_sz;\n+    _next += _unit_sz;\n     I(dom, _next <= _buffer_sz);\n     if (_next == _buffer_sz) {\n         _next = 0;\n     }\n \n     // Shrink if possible.\n-    if (_buffer_sz >= INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS * unit_sz &&\n+    if (_buffer_sz >= INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS * _unit_sz &&\n         _unread <= _buffer_sz / 4) {\n+        dom->log(rust_log::MEM | rust_log::COMM,\n+                 \"circular_buffer is shrinking to %d bytes\", _buffer_sz / 2);\n         void *tmp = dom->malloc(_buffer_sz / 2);\n         transfer(tmp);\n         _buffer_sz >>= 1;\n         dom->free(_buffer);\n         _buffer = (uint8_t *)tmp;\n+        _next = 0;\n     }\n+\n }\n \n bool"}, {"sha": "2ebf23b0a061b78543e3b424f8b265a4a14a030c", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c80483d582b995e7890a581e7de03c70c51df137/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/c80483d582b995e7890a581e7de03c70c51df137/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=c80483d582b995e7890a581e7de03c70c51df137", "patch": "@@ -20,10 +20,19 @@ circular_buffer : public dom_owned<circular_buffer> {\n     bool is_empty();\n \n private:\n+    // Size of the buffer in bytes.\n     size_t _buffer_sz;\n-    size_t unit_sz;\n+\n+    // Size of the data unit in bytes.\n+    size_t _unit_sz;\n+\n+    // Byte offset within the buffer where to read the next unit of data.\n     size_t _next;\n+\n+    // Number of bytes that have not been read from the buffer.\n     size_t _unread;\n+\n+    // The buffer itself.\n     uint8_t *_buffer;\n };\n "}, {"sha": "b185d425013ccc6183d3c025400fcef52b016dca", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c80483d582b995e7890a581e7de03c70c51df137/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80483d582b995e7890a581e7de03c70c51df137/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=c80483d582b995e7890a581e7de03c70c51df137", "patch": "@@ -3,8 +3,30 @@ io fn main() -> () {\n }\n \n io fn test00() {\n+    let int r = 0;    \n+    let int sum = 0;\n     let port[int] p = port();\n     let chan[int] c = chan(p);\n-    c <| 42;\n-    let int r <- p;\n+\n+    c <| 1;\n+    c <| 2;\n+    c <| 3;\n+    c <| 4;\n+\n+    r <- p; sum += r; log (r);\n+    r <- p; sum += r; log (r);\n+    r <- p; sum += r; log (r);\n+    r <- p; sum += r; log (r);\n+    \n+    c <| 5;\n+    c <| 6;\n+    c <| 7;\n+    c <| 8;\n+\n+    r <- p; sum += r; log (r);\n+    r <- p; sum += r; log (r);\n+    r <- p; sum += r; log (r);\n+    r <- p; sum += r; log (r);\n+    \n+    check (sum == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);\n }\n\\ No newline at end of file"}, {"sha": "950f41496b65184efe5e249ee9fbf2406f73c4a1", "filename": "src/test/run-pass/task-comm-5.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c80483d582b995e7890a581e7de03c70c51df137/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80483d582b995e7890a581e7de03c70c51df137/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=c80483d582b995e7890a581e7de03c70c51df137", "patch": "@@ -0,0 +1,25 @@\n+io fn main() -> () {\n+   test00();\n+}\n+\n+io fn test00() {\n+    let int r = 0;    \n+    let int sum = 0;\n+    let port[int] p = port();\n+    let chan[int] c = chan(p);\n+    let int number_of_messages = 1000;\n+\n+    let int i = 0;\n+    while (i < number_of_messages) {\n+        c <| i;\n+        i += 1;\n+    }\n+\n+    i = 0;\n+    while (i < number_of_messages) {\n+        r <- p; sum += r;\n+        i += 1;\n+    }\n+    \n+    check (sum == ((number_of_messages * (number_of_messages - 1)) / 2));\n+}\n\\ No newline at end of file"}]}