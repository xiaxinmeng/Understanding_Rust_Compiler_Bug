{"sha": "fd59d44f5880fea109fe68e31fab2486cd686fc6", "node_id": "C_kwDOAAsO6NoAKGZkNTlkNDRmNTg4MGZlYTEwOWZlNjhlMzFmYWIyNDg2Y2Q2ODZmYzY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-21T11:05:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-07T16:08:49Z"}, "message": "make const_err a hard error", "tree": {"sha": "3eef90caf77fefc09fc993e511f9a9b8f5470cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eef90caf77fefc09fc993e511f9a9b8f5470cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd59d44f5880fea109fe68e31fab2486cd686fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd59d44f5880fea109fe68e31fab2486cd686fc6", "html_url": "https://github.com/rust-lang/rust/commit/fd59d44f5880fea109fe68e31fab2486cd686fc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd59d44f5880fea109fe68e31fab2486cd686fc6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58546803885164d488185fb9cb9fb04fcbe64e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/58546803885164d488185fb9cb9fb04fcbe64e30", "html_url": "https://github.com/rust-lang/rust/commit/58546803885164d488185fb9cb9fb04fcbe64e30"}], "stats": {"total": 6700, "additions": 1379, "deletions": 5321}, "files": [{"sha": "136bfbeaad2f04373cf9ea625fee5d2f99879fa9", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 7, "deletions": 69, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -2,7 +2,6 @@ use std::error::Error;\n use std::fmt;\n \n use rustc_errors::Diagnostic;\n-use rustc_hir as hir;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::ty::{layout::LayoutError, query::TyCtxtAt, ConstInt};\n use rustc_span::{Span, Symbol};\n@@ -23,11 +22,7 @@ pub enum ConstEvalErrKind {\n     Abort(String),\n }\n \n-impl MachineStopType for ConstEvalErrKind {\n-    fn is_hard_err(&self) -> bool {\n-        matches!(self, Self::Panic { .. })\n-    }\n-}\n+impl MachineStopType for ConstEvalErrKind {}\n \n // The errors become `MachineStop` with plain strings when being raised.\n // `ConstEvalErr` (in `librustc_middle/mir/interpret/error.rs`) knows to\n@@ -87,48 +82,10 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         ConstEvalErr { error: error.into_kind(), stacktrace, span }\n     }\n \n-    pub fn struct_error(\n-        &self,\n-        tcx: TyCtxtAt<'tcx>,\n-        message: &str,\n-        decorate: impl FnOnce(&mut Diagnostic),\n-    ) -> ErrorHandled {\n-        self.struct_generic(tcx, message, decorate, None)\n-    }\n-\n     pub fn report_as_error(&self, tcx: TyCtxtAt<'tcx>, message: &str) -> ErrorHandled {\n         self.struct_error(tcx, message, |_| {})\n     }\n \n-    pub fn report_as_lint(\n-        &self,\n-        tcx: TyCtxtAt<'tcx>,\n-        message: &str,\n-        lint_root: hir::HirId,\n-        span: Option<Span>,\n-    ) -> ErrorHandled {\n-        self.struct_generic(\n-            tcx,\n-            message,\n-            |lint: &mut Diagnostic| {\n-                // Apply the span.\n-                if let Some(span) = span {\n-                    let primary_spans = lint.span.primary_spans().to_vec();\n-                    // point at the actual error as the primary span\n-                    lint.replace_span_with(span);\n-                    // point to the `const` statement as a secondary span\n-                    // they don't have any label\n-                    for sp in primary_spans {\n-                        if sp != span {\n-                            lint.span_label(sp, \"\");\n-                        }\n-                    }\n-                }\n-            },\n-            Some(lint_root),\n-        )\n-    }\n-\n     /// Create a diagnostic for this const eval error.\n     ///\n     /// Sets the message passed in via `message` and adds span labels with detailed error\n@@ -137,13 +94,12 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     ///\n     /// If `lint_root.is_some()` report it as a lint, else report it as a hard error.\n     /// (Except that for some errors, we ignore all that -- see `must_error` below.)\n-    #[instrument(skip(self, tcx, decorate, lint_root), level = \"debug\")]\n-    fn struct_generic(\n+    #[instrument(skip(self, tcx, decorate), level = \"debug\")]\n+    pub fn struct_error(\n         &self,\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n         decorate: impl FnOnce(&mut Diagnostic),\n-        lint_root: Option<hir::HirId>,\n     ) -> ErrorHandled {\n         let finish = |err: &mut Diagnostic, span_msg: Option<String>| {\n             trace!(\"reporting const eval failure at {:?}\", self.span);\n@@ -224,27 +180,9 @@ impl<'tcx> ConstEvalErr<'tcx> {\n \n         let err_msg = self.error.to_string();\n \n-        // Regular case - emit a lint.\n-        if let Some(lint_root) = lint_root {\n-            // Report as lint.\n-            let hir_id =\n-                self.stacktrace.iter().rev().find_map(|frame| frame.lint_root).unwrap_or(lint_root);\n-            tcx.struct_span_lint_hir(\n-                rustc_session::lint::builtin::CONST_ERR,\n-                hir_id,\n-                tcx.span,\n-                message,\n-                |lint| {\n-                    finish(lint, Some(err_msg));\n-                    lint\n-                },\n-            );\n-            ErrorHandled::Linted\n-        } else {\n-            // Report as hard error.\n-            let mut err = struct_error(tcx, message);\n-            finish(&mut err, Some(err_msg));\n-            ErrorHandled::Reported(err.emit())\n-        }\n+        // Report as hard error.\n+        let mut err = struct_error(tcx, message);\n+        finish(&mut err, Some(err_msg));\n+        ErrorHandled::Reported(err.emit())\n     }\n }"}, {"sha": "1b1052fdf47a751692f1001624d191dc30c815d0", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -317,45 +317,23 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n     match res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body)) {\n         Err(error) => {\n             let err = ConstEvalErr::new(&ecx, error, None);\n-            // Some CTFE errors raise just a lint, not a hard error; see\n-            // <https://github.com/rust-lang/rust/issues/71800>.\n-            let is_hard_err = if let Some(def) = def.as_local() {\n-                // (Associated) consts only emit a lint, since they might be unused.\n-                !matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n-                    // check if the inner InterpError is hard\n-                    || err.error.is_hard_err()\n+            let msg = if is_static {\n+                Cow::from(\"could not evaluate static initializer\")\n             } else {\n-                // use of broken constant from other crate: always an error\n-                true\n-            };\n-\n-            if is_hard_err {\n-                let msg = if is_static {\n-                    Cow::from(\"could not evaluate static initializer\")\n+                // If the current item has generics, we'd like to enrich the message with the\n+                // instance and its substs: to show the actual compile-time values, in addition to\n+                // the expression, leading to the const eval error.\n+                let instance = &key.value.instance;\n+                if !instance.substs.is_empty() {\n+                    let instance = with_no_trimmed_paths!(instance.to_string());\n+                    let msg = format!(\"evaluation of `{}` failed\", instance);\n+                    Cow::from(msg)\n                 } else {\n-                    // If the current item has generics, we'd like to enrich the message with the\n-                    // instance and its substs: to show the actual compile-time values, in addition to\n-                    // the expression, leading to the const eval error.\n-                    let instance = &key.value.instance;\n-                    if !instance.substs.is_empty() {\n-                        let instance = with_no_trimmed_paths!(instance.to_string());\n-                        let msg = format!(\"evaluation of `{}` failed\", instance);\n-                        Cow::from(msg)\n-                    } else {\n-                        Cow::from(\"evaluation of constant value failed\")\n-                    }\n-                };\n+                    Cow::from(\"evaluation of constant value failed\")\n+                }\n+            };\n \n-                Err(err.report_as_error(ecx.tcx.at(err.span), &msg))\n-            } else {\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n-                Err(err.report_as_lint(\n-                    tcx.at(tcx.def_span(def.did)),\n-                    \"any use of this value will cause an error\",\n-                    hir_id,\n-                    Some(err.span),\n-                ))\n-            }\n+            Err(err.report_as_error(ecx.tcx.at(err.span), &msg))\n         }\n         Ok(mplace) => {\n             // Since evaluation had no errors, validate the resulting constant."}, {"sha": "d2e0a0dd240e8e20a2683dbf21514a5bcd6e2649", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -258,6 +258,9 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n             {\n                 write!(f, \"inside closure\")?;\n             } else {\n+                // Note: this triggers a `good_path_bug` state, which means that if we ever get here\n+                // we must emit a diagnostic. We should never display a `FrameInfo` unless we\n+                // actually want to emit a warning or error to the user.\n                 write!(f, \"inside `{}`\", self.instance)?;\n             }\n             if !self.span.is_dummy() {"}, {"sha": "f72ae7413e3012912b32a3c4d6e2022d6241696d", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -332,8 +332,6 @@ pub enum InternKind {\n ///\n /// This *cannot raise an interpreter error*.  Doing so is left to validation, which\n /// tracks where in the value we are and thus can show much better error messages.\n-/// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n-/// are hard errors.\n #[instrument(level = \"debug\", skip(ecx))]\n pub fn intern_const_alloc_recursive<\n     'mir,"}, {"sha": "070cccd141b5665d3885119abe772b3fef6ed9e2", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -522,6 +522,11 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         \"now allowed, see issue #59159 \\\n          <https://github.com/rust-lang/rust/issues/59159> for more information\",\n     );\n+    store.register_removed(\n+        \"const_err\",\n+        \"converted into hard error, see issue #71800 \\\n+         <https://github.com/rust-lang/rust/issues/71800> for more information\",\n+    );\n }\n \n fn register_internals(store: &mut LintStore) {"}, {"sha": "4e30aa5eaba8ac895419a0740e330ca085d38e1e", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -263,37 +263,6 @@ declare_lint! {\n     \"operation will cause a panic at runtime\"\n }\n \n-declare_lint! {\n-    /// The `const_err` lint detects an erroneous expression while doing\n-    /// constant evaluation.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #![allow(unconditional_panic)]\n-    /// const C: i32 = 1/0;\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// This lint detects constants that fail to evaluate. Allowing the lint will accept the\n-    /// constant declaration, but any use of this constant will still lead to a hard error. This is\n-    /// a future incompatibility lint; the plan is to eventually entirely forbid even declaring\n-    /// constants that cannot be evaluated.  See [issue #71800] for more details.\n-    ///\n-    /// [issue #71800]: https://github.com/rust-lang/rust/issues/71800\n-    pub CONST_ERR,\n-    Deny,\n-    \"constant evaluation encountered erroneous expression\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n-        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n-    };\n-    report_in_external_macro\n-}\n-\n declare_lint! {\n     /// The `unused_imports` lint detects imports that are never used.\n     ///\n@@ -3295,7 +3264,6 @@ declare_lint_pass! {\n         EXPORTED_PRIVATE_DEPENDENCIES,\n         PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n         INVALID_TYPE_PARAM_DEFAULT,\n-        CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n         UNALIGNED_REFERENCES,\n         CONST_ITEM_MUTATION,"}, {"sha": "b5a50cc1527a79ec951455086bbdf7b2a14d3b6a", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -479,12 +479,7 @@ impl<T: Any> AsAny for T {\n }\n \n /// A trait for machine-specific errors (or other \"machine stop\" conditions).\n-pub trait MachineStopType: AsAny + fmt::Display + Send {\n-    /// If `true`, emit a hard error instead of going through the `CONST_ERR` lint\n-    fn is_hard_err(&self) -> bool {\n-        false\n-    }\n-}\n+pub trait MachineStopType: AsAny + fmt::Display + Send {}\n \n impl dyn MachineStopType {\n     #[inline(always)]\n@@ -543,16 +538,4 @@ impl InterpError<'_> {\n                 | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n         )\n     }\n-\n-    /// Should this error be reported as a hard error, preventing compilation, or a soft error,\n-    /// causing a deny-by-default lint?\n-    pub fn is_hard_err(&self) -> bool {\n-        use InterpError::*;\n-        match *self {\n-            MachineStop(ref err) => err.is_hard_err(),\n-            UndefinedBehavior(_) => true,\n-            ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted) => true,\n-            _ => false,\n-        }\n-    }\n }"}, {"sha": "6bddbdb8e6aa58c623bfd8738f5a93b13de96004", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -16,9 +16,9 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{\n-    self, AssertKind, BinOp, Body, Constant, ConstantKind, Local, LocalDecl, Location, Operand,\n-    Place, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator,\n-    TerminatorKind, UnOp, RETURN_PLACE,\n+    AssertKind, BinOp, Body, Constant, Local, LocalDecl, Location, Operand, Place, Rvalue,\n+    SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n+    UnOp, RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::InternalSubsts;\n@@ -286,7 +286,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     /// Returns the value, if any, of evaluating `c`.\n-    fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n+    fn eval_constant(\n+        &mut self,\n+        c: &Constant<'tcx>,\n+        _source_info: SourceInfo,\n+    ) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n         if c.needs_subst() {\n             return None;\n@@ -297,28 +301,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n-                if let Some(lint_root) = self.lint_root(source_info) {\n-                    let lint_only = match c.literal {\n-                        ConstantKind::Ty(ct) => ct.needs_subst(),\n-                        ConstantKind::Unevaluated(\n-                            mir::UnevaluatedConst { def: _, substs: _, promoted: Some(_) },\n-                            _,\n-                        ) => {\n-                            // Promoteds must lint and not error as the user didn't ask for them\n-                            true\n-                        }\n-                        ConstantKind::Unevaluated(..) | ConstantKind::Val(..) => c.needs_subst(),\n-                    };\n-                    if lint_only {\n-                        // Out of backwards compatibility we cannot report hard errors in unused\n-                        // generic functions using associated constants of the generic parameters.\n-                        err.report_as_lint(tcx, \"erroneous constant used\", lint_root, Some(c.span));\n-                    } else {\n-                        err.report_as_error(tcx, \"erroneous constant used\");\n-                    }\n-                } else {\n-                    err.report_as_error(tcx, \"erroneous constant used\");\n-                }\n+                err.report_as_error(tcx, \"erroneous constant used\");\n                 None\n             }\n         }"}, {"sha": "c5a7198839517e21717ea399fdb12358dc364901", "filename": "library/core/tests/num/wrapping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -75,8 +75,6 @@ wrapping_test!(test_wrapping_u64, u64, u64::MIN, u64::MAX);\n wrapping_test!(test_wrapping_u128, u128, u128::MIN, u128::MAX);\n wrapping_test!(test_wrapping_usize, usize, usize::MIN, usize::MAX);\n \n-// Don't warn about overflowing ops on 32-bit platforms\n-#[cfg_attr(target_pointer_width = \"32\", allow(const_err))]\n #[test]\n fn wrapping_int_api() {\n     assert_eq!(i8::MAX.wrapping_add(1), i8::MIN);"}, {"sha": "9e1fbea79148c562d2a51748c95bf45fefa41137", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1284,7 +1284,6 @@ fn test_windows_zip() {\n }\n \n #[test]\n-#[allow(const_err)]\n fn test_iter_ref_consistency() {\n     use std::fmt::Debug;\n "}, {"sha": "16095cfdd7dc015764d60cb20624e58fced1597e", "filename": "src/test/mir-opt/remove-never-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -6,7 +6,6 @@\n // compile-flags: --emit mir,link\n \n #![feature(never_type)]\n-#![warn(const_err)]\n \n struct PrintName<T>(T);\n "}, {"sha": "96755802ec7f1bf7a70740568759ef8ed92e66c9", "filename": "src/test/ui/array-slice-vec/array_const_index-0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,7 @@\n const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n //~^ index out of bounds: the length is 0 but the index is 1\n-//~| ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = B;"}, {"sha": "3b92cc76687b472ebbebf07770f4432c44d70f1e", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,9 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/array_const_index-0.rs:2:16\n    |\n LL | const B: i32 = (&A)[1];\n-   | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/array_const_index-0.rs:2:16\n-   |\n-LL | const B: i32 = (&A)[1];\n-   | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "625bf06a745e9e87e12a9de6ac80450646600785", "filename": "src/test/ui/array-slice-vec/array_const_index-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,7 @@\n const A: [i32; 0] = [];\n const B: i32 = A[1];\n //~^ index out of bounds: the length is 0 but the index is 1\n-//~| ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = B;"}, {"sha": "591db268a9943aad1cafeb3fa4fa9edd81434435", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,9 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/array_const_index-1.rs:2:16\n    |\n LL | const B: i32 = A[1];\n-   | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                ^^^^ index out of bounds: the length is 0 but the index is 1\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/array_const_index-1.rs:2:16\n-   |\n-LL | const B: i32 = A[1];\n-   | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "6762d7583fb2d87b2c4aa78fc9d753a429dcf5c8", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -6,8 +6,7 @@ trait Tr {\n     // This should not be a constant evaluation error (overflow). The value of\n     // `Self::A` must not be assumed to hold inside the trait.\n     const B: u8 = Self::A + 1;\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of `<() as Tr>::B` failed\n }\n \n // An impl that doesn't override any constant will NOT cause a const eval error\n@@ -34,7 +33,6 @@ fn main() {\n     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n     //~^ ERROR evaluation of constant value failed\n     //~| ERROR erroneous constant used\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     assert_eq!(<u8 as Tr>::A, 254);\n     assert_eq!(<u8 as Tr>::B, 255);"}, {"sha": "aa130f438a877791468758c63a15667a1e0afdf1", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,52 +1,23 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of `<() as Tr>::B` failed\n   --> $DIR/defaults-not-assumed-fail.rs:8:19\n    |\n LL |     const B: u8 = Self::A + 1;\n-   |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/defaults-not-assumed-fail.rs:34:16\n+  --> $DIR/defaults-not-assumed-fail.rs:33:16\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |                ^^^^^^^^^^^^^ referenced constant has errors\n \n-error: erroneous constant used\n-  --> $DIR/defaults-not-assumed-fail.rs:34:5\n+error[E0080]: erroneous constant used\n+  --> $DIR/defaults-not-assumed-fail.rs:33:5\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/defaults-not-assumed-fail.rs:8:19\n-   |\n-LL |     const B: u8 = Self::A + 1;\n-   |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/defaults-not-assumed-fail.rs:34:5\n-   |\n-LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n-"}, {"sha": "24b20b6507b1186486ce4847c40d5d645e84680e", "filename": "src/test/ui/borrowck/issue-81899.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -2,8 +2,7 @@\n // The `panic!()` below is important to trigger the fixed ICE.\n \n const _CONST: &[u8] = &f(&[], |_| {});\n-//~^ ERROR any use of this value\n-//~| WARNING this was previously\n+//~^ ERROR constant\n \n const fn f<F>(_: &[u8], _: F) -> &[u8]\n where"}, {"sha": "12e80b9df82891d8a83aecc064218fe1f2e5fdbe", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,38 +1,23 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-81899.rs:12:5\n+  --> $DIR/issue-81899.rs:11:5\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    |                        -------------- inside `_CONST` at $DIR/issue-81899.rs:4:24\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:12:5\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:11:5\n    |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-81899.rs:4:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                       ^^^^^^^^^^^^^^^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/issue-81899.rs:4:23\n-   |\n-LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "983a023105229646b02dbc44057858594a081df0", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,7 @@\n // Regression test related to issue 88434\n \n const _CONST: &() = &f(&|_| {});\n-//~^ ERROR any use of this value\n-//~| WARNING this was previously\n+//~^ ERROR constant\n \n const fn f<F>(_: &F)\n where"}, {"sha": "dc87c4c2b077bd10a5d48138d57f712825a9a09a", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,38 +1,23 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-88434-minimal-example.rs:11:5\n+  --> $DIR/issue-88434-minimal-example.rs:10:5\n    |\n LL | const _CONST: &() = &f(&|_| {});\n    |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:3:22\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:11:5\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n    |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-minimal-example.rs:3:21\n    |\n LL | const _CONST: &() = &f(&|_| {});\n-   | -----------------   ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                     ^^^^^^^^^^^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/issue-88434-minimal-example.rs:3:21\n-   |\n-LL | const _CONST: &() = &f(&|_| {});\n-   | -----------------   ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "a99c5b76a4e47722c0223dfc65530e5acef4c191", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,7 @@\n // Regression test for issue 88434\n \n const _CONST: &[u8] = &f(&[], |_| {});\n-//~^ ERROR any use of this value will cause an error\n-//~| WARNING this was previously\n+//~^ ERROR constant\n \n const fn f<F>(_: &[u8], _: F) -> &[u8]\n where"}, {"sha": "4b4a25d7be1217cd4a59ef6bbb4f67b1a3979632", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,38 +1,23 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-88434-removal-index-should-be-less.rs:11:5\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:11:5\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n    |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                       ^^^^^^^^^^^^^^^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23\n-   |\n-LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "9a98754161544020a1fd2e2d47c747a0b2ef7cc1", "filename": "src/test/ui/cast/cast-rfc0401.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -159,11 +159,7 @@ fn main()\n     assert!(foo as usize != bar as usize);\n \n     // Taking a few bits of a function's address is totally pointless and we detect that\n-    // Disabling the lint to ensure that the assertion can still be run\n-    #[allow(const_err)]\n-    {\n-        assert_eq!(foo as i16, foo as usize as i16);\n-    }\n+    assert_eq!(foo as i16, foo as usize as i16);\n \n     // fptr-ptr-cast\n "}, {"sha": "47a8fc0902d3e161264204fd96ec571d31e0903f", "filename": "src/test/ui/closures/closure_promotion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fclosures%2Fclosure_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fclosures%2Fclosure_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_promotion.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![allow(const_err)]\n-\n fn main() {\n     let x: &'static _ = &|| { let z = 3; z };\n }"}, {"sha": "67b49b1ba2be23c9e50ff753219f2e4f75a6f229", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n // ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n \n-#![warn(const_err, unconditional_panic)]\n+#![warn(unconditional_panic)]\n \n fn main() {\n     &{ [1, 2, 3][4] };"}, {"sha": "54bf3af81e8ff5d285a66df0f3c7155905458af3", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,10 +5,10 @@ LL |     &{ [1, 2, 3][4] };\n    |        ^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 4\n    |\n note: the lint level is defined here\n-  --> $DIR/array-literal-index-oob.rs:4:20\n+  --> $DIR/array-literal-index-oob.rs:4:9\n    |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(unconditional_panic)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "263d1ae6a3ec7047aaa37f6dfdeb3af27d46154d", "filename": "src/test/ui/consts/assert-type-intrinsics.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,3 @@\n-// error-pattern: any use of this value will cause an error\n-\n #![feature(never_type)]\n #![feature(const_assert_type2)]\n #![feature(core_intrinsics)]\n@@ -11,15 +9,15 @@ fn main() {\n     use std::mem::MaybeUninit;\n \n     const _BAD1: () = unsafe {\n-        intrinsics::assert_inhabited::<!>(); //~ERROR: any use of this value will cause an error\n-        //~^WARN: previously accepted\n+        MaybeUninit::<!>::uninit().assume_init();\n+        //~^ERROR: evaluation of constant value failed\n     };\n     const _BAD2: () = {\n-        intrinsics::assert_uninit_valid::<!>(); //~ERROR: any use of this value will cause an error\n-        //~^WARN: previously accepted\n+        intrinsics::assert_uninit_valid::<&'static i32>();\n+        //~^ERROR: evaluation of constant value failed\n     };\n     const _BAD3: () = {\n-        intrinsics::assert_zero_valid::<&'static i32>(); //~ERROR: any use of this value will cause an error\n-        //~^WARN: previously accepted\n+        intrinsics::assert_zero_valid::<&'static i32>();\n+        //~^ERROR: evaluation of constant value failed\n     };\n }"}, {"sha": "f92f9fda069adb9897b19da3901d6edddf4d9071", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "modified", "additions": 11, "deletions": 65, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,75 +1,21 @@\n-error: any use of this value will cause an error\n-  --> $DIR/assert-type-intrinsics.rs:14:9\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/assert-type-intrinsics.rs:12:9\n    |\n-LL |     const _BAD1: () = unsafe {\n-   |     ---------------\n-LL |         intrinsics::assert_inhabited::<!>();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+LL |         MaybeUninit::<!>::uninit().assume_init();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n \n-error: any use of this value will cause an error\n-  --> $DIR/assert-type-intrinsics.rs:18:9\n-   |\n-LL |     const _BAD2: () = {\n-   |     ---------------\n-LL |         intrinsics::assert_uninit_valid::<!>();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/assert-type-intrinsics.rs:16:9\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |         intrinsics::assert_uninit_valid::<&'static i32>();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `&i32` uninitialized, which is invalid\n \n-error: any use of this value will cause an error\n-  --> $DIR/assert-type-intrinsics.rs:22:9\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/assert-type-intrinsics.rs:20:9\n    |\n-LL |     const _BAD3: () = {\n-   |     ---------------\n LL |         intrinsics::assert_zero_valid::<&'static i32>();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 3 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/assert-type-intrinsics.rs:14:9\n-   |\n-LL |     const _BAD1: () = unsafe {\n-   |     ---------------\n-LL |         intrinsics::assert_inhabited::<!>();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/assert-type-intrinsics.rs:18:9\n-   |\n-LL |     const _BAD2: () = {\n-   |     ---------------\n-LL |         intrinsics::assert_uninit_valid::<!>();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/assert-type-intrinsics.rs:22:9\n-   |\n-LL |     const _BAD3: () = {\n-   |     ---------------\n-LL |         intrinsics::assert_zero_valid::<&'static i32>();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "3475c862bfc2d40004879b51098091a57e6e0ee6", "filename": "src/test/ui/consts/assoc_const_generic_impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,17 +1,14 @@\n // build-fail\n \n-#![warn(const_err)]\n-\n trait ZeroSized: Sized {\n     const I_AM_ZERO_SIZED: ();\n     fn requires_zero_size(self);\n }\n \n impl<T: Sized> ZeroSized for T {\n-    const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()]; //~ WARN any use of this value\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()]; //~ ERROR evaluation of `<u32 as ZeroSized>::I_AM_ZERO_SIZED` failed\n     fn requires_zero_size(self) {\n-        let () = Self::I_AM_ZERO_SIZED; //~ ERROR erroneous constant encountered\n+        let () = Self::I_AM_ZERO_SIZED;\n         println!(\"requires_zero_size called\");\n     }\n }"}, {"sha": "854b9ce5b223be65b416b5767c0691116176c0ea", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,37 +1,15 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/assoc_const_generic_impl.rs:11:34\n+error[E0080]: evaluation of `<u32 as ZeroSized>::I_AM_ZERO_SIZED` failed\n+  --> $DIR/assoc_const_generic_impl.rs:9:34\n    |\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n-   |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/assoc_const_generic_impl.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n \n-error: erroneous constant encountered\n-  --> $DIR/assoc_const_generic_impl.rs:14:18\n+note: the above error was encountered while instantiating `fn <u32 as ZeroSized>::requires_zero_size`\n+  --> $DIR/assoc_const_generic_impl.rs:18:5\n    |\n-LL |         let () = Self::I_AM_ZERO_SIZED;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^\n+LL |     42_u32.requires_zero_size();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/assoc_const_generic_impl.rs:11:34\n-   |\n-LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n-   |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/assoc_const_generic_impl.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "a3105b4fc4a37f5af1d910534883d729af88142c", "filename": "src/test/ui/consts/const-err-early.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,15 +1,8 @@\n-#![deny(const_err)]\n-\n-pub const A: i8 = -i8::MIN; //~ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-pub const E: u8 = [5u8][1]; //~ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+pub const A: i8 = -i8::MIN; //~ ERROR constant\n+pub const B: u8 = 200u8 + 200u8; //~ ERROR constant\n+pub const C: u8 = 200u8 * 4; //~ ERROR constant\n+pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR constant\n+pub const E: u8 = [5u8][1]; //~ ERROR constant\n \n fn main() {\n     let _a = A;"}, {"sha": "59bf637b7adbdab1aa8888b42c817a587b8228c1", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 16, "deletions": 110, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,127 +1,33 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:3:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-early.rs:1:19\n    |\n LL | pub const A: i8 = -i8::MIN;\n-   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-early.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n+   |                   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:5:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-early.rs:2:19\n    |\n LL | pub const B: u8 = 200u8 + 200u8;\n-   | ---------------   ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                   ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:7:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-early.rs:3:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n-   | ---------------   ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                   ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:9:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-early.rs:4:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n-   | ---------------   ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                   ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:11:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const E: u8 = [5u8][1];\n-   | ---------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 5 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:3:19\n-   |\n-LL | pub const A: i8 = -i8::MIN;\n-   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-early.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:5:19\n-   |\n-LL | pub const B: u8 = 200u8 + 200u8;\n-   | ---------------   ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-early.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:7:19\n-   |\n-LL | pub const C: u8 = 200u8 * 4;\n-   | ---------------   ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-early.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:9:19\n-   |\n-LL | pub const D: u8 = 42u8 - (42u8 + 1);\n-   | ---------------   ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-early.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:11:19\n-   |\n-LL | pub const E: u8 = [5u8][1];\n-   | ---------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-early.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "a20ae702586c4cd007a920fac098f3a8da7f6b17", "filename": "src/test/ui/consts/const-err-late.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -0,0 +1,22 @@\n+// build-fail\n+// compile-flags: -C overflow-checks=on\n+\n+#![allow(arithmetic_overflow, unconditional_panic)]\n+\n+fn black_box<T>(_: T) {\n+    unimplemented!()\n+}\n+\n+struct S<T>(T);\n+\n+impl<T> S<T> {\n+    const FOO: u8 = [5u8][1];\n+    //~^ ERROR evaluation of `S::<i32>::FOO` failed\n+    //~| ERROR evaluation of `S::<u32>::FOO` failed\n+}\n+\n+fn main() {\n+    black_box((S::<i32>::FOO, S::<u32>::FOO));\n+    //~^ ERROR erroneous constant\n+    //~| ERROR erroneous constant\n+}"}, {"sha": "3a8b103175b6b4c063092bc3b218f36584a2415c", "filename": "src/test/ui/consts/const-err-late.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -0,0 +1,27 @@\n+error[E0080]: evaluation of `S::<i32>::FOO` failed\n+  --> $DIR/const-err-late.rs:13:21\n+   |\n+LL |     const FOO: u8 = [5u8][1];\n+   |                     ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-late.rs:19:16\n+   |\n+LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n+   |                ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: evaluation of `S::<u32>::FOO` failed\n+  --> $DIR/const-err-late.rs:13:21\n+   |\n+LL |     const FOO: u8 = [5u8][1];\n+   |                     ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-late.rs:19:31\n+   |\n+LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n+   |                               ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "fb26e8aac10ff16d14dea7ed3d04204e98aba3cd", "filename": "src/test/ui/consts/const-err-multi.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,17 +1,11 @@\n-#![deny(const_err)]\n-\n pub const A: i8 = -i8::MIN;\n-//~^ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR constant\n pub const B: i8 = A;\n-//~^ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR constant\n pub const C: u8 = A as u8;\n-//~^ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR constant\n pub const D: i8 = 50 - A;\n-//~^ ERROR const_err\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR constant\n \n fn main() {\n     let _ = (A, B, C, D);"}, {"sha": "fca9e227068ff7f7b3ee6e05542bc45b7c2a7de6", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 13, "deletions": 89, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,103 +1,27 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:3:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-multi.rs:1:19\n    |\n LL | pub const A: i8 = -i8::MIN;\n-   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-multi.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n+   |                   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:6:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-multi.rs:3:19\n    |\n LL | pub const B: i8 = A;\n-   | ---------------   ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                   ^ referenced constant has errors\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:9:19\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-multi.rs:5:19\n    |\n LL | pub const C: u8 = A as u8;\n-   | ---------------   ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                   ^ referenced constant has errors\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:12:24\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-err-multi.rs:7:24\n    |\n LL | pub const D: i8 = 50 - A;\n-   | ---------------        ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                        ^ referenced constant has errors\n \n error: aborting due to 4 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:3:19\n-   |\n-LL | pub const A: i8 = -i8::MIN;\n-   | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-multi.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:6:19\n-   |\n-LL | pub const B: i8 = A;\n-   | ---------------   ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-multi.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:9:19\n-   |\n-LL | pub const C: u8 = A as u8;\n-   | ---------------   ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-multi.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:12:24\n-   |\n-LL | pub const D: i8 = 50 - A;\n-   | ---------------        ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err-multi.rs:1:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "e7fa10a2a11a3e54f3ce64b3edce30684f515090", "filename": "src/test/ui/consts/const-err-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-rpass.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -2,8 +2,6 @@\n #![allow(dead_code)]\n // check for const_err regressions\n \n-#![deny(const_err)]\n-\n const X: *const u8 = b\"\" as _;\n const Y: bool = 'A' == 'B';\n const Z: char = 'A';"}, {"sha": "a8633fd87b5e2750ae6261c27cb105e0a71b2a1c", "filename": "src/test/ui/consts/const-err.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,19 +0,0 @@\n-// build-fail\n-// compile-flags: -C overflow-checks=on\n-\n-#![allow(arithmetic_overflow)]\n-#![warn(const_err)]\n-\n-fn black_box<T>(_: T) {\n-    unimplemented!()\n-}\n-\n-const FOO: u8 = [5u8][1];\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-\n-fn main() {\n-    black_box((FOO, FOO));\n-    //~^ ERROR erroneous constant used\n-    //~| ERROR erroneous constant\n-}"}, {"sha": "f83a2cbb1908ad682fefb4749d5b3c7c2cfc61b0", "filename": "src/test/ui/consts/const-err.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,44 +0,0 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/const-err.rs:11:17\n-   |\n-LL | const FOO: u8 = [5u8][1];\n-   | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:16:16\n-   |\n-LL |     black_box((FOO, FOO));\n-   |                ^^^ referenced constant has errors\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:16:21\n-   |\n-LL |     black_box((FOO, FOO));\n-   |                     ^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const-err.rs:11:17\n-   |\n-LL | const FOO: u8 = [5u8][1];\n-   | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-err.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-"}, {"sha": "27d5383d6d47f342560d4c5d4857916a8fdadd2b", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,16 +1,8 @@\n-// build-fail\n-\n-#![warn(const_err)]\n-\n const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR constant\n \n fn main() {\n     println!(\"{}\", FOO);\n-    //~^ ERROR evaluation of constant value failed\n-    //~| WARN erroneous constant used [const_err]\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "c3401fbaefeee9e81c73da930d7642af616c49b1", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 4, "deletions": 59, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,64 +1,9 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/conditional_array_execution.rs:7:19\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/conditional_array_execution.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/conditional_array_execution.rs:12:20\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-\n-warning: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:12:20\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error; 2 warnings emitted\n-\n-For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/conditional_array_execution.rs:7:19\n+  --> $DIR/conditional_array_execution.rs:3:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/conditional_array_execution.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+   |                   ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n \n-Future breakage diagnostic:\n-warning: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:12:20\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/conditional_array_execution.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "535d91359163fd35c5f1d35c5c3bfc2e1388cffb", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,14 +1,14 @@\n // Evaluation of constants in refutable patterns goes through\n // different compiler control-flow paths.\n \n-#![allow(unused_imports, warnings, const_err)]\n+#![allow(unused_imports, warnings)]\n \n use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const NEG_128: i8 = -128;\n-const NEG_NEG_128: i8 = -NEG_128;\n+const NEG_NEG_128: i8 = -NEG_128; //~ ERROR constant\n \n fn main() {\n     match -128i8 {"}, {"sha": "7b1fe49d4346ec4e2f22b4c6a4d8b194a92a2025", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,3 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow-2.rs:11:25\n+   |\n+LL | const NEG_NEG_128: i8 = -NEG_128;\n+   |                         ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n+\n error: could not evaluate constant pattern\n   --> $DIR/const-eval-overflow-2.rs:15:9\n    |\n@@ -10,20 +16,6 @@ error: could not evaluate constant pattern\n LL |         NEG_NEG_128 => println!(\"A\"),\n    |         ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow-2.rs:11:25\n-   |\n-LL | const NEG_NEG_128: i8 = -NEG_128;\n-   | ---------------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow-2.rs:4:36\n-   |\n-LL | #![allow(unused_imports, warnings, const_err)]\n-   |                                    ^^^^^^^^^\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "1676f7c2af65a1f729d3b934168f05a49ad198f0", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,63 +5,53 @@\n // change this warn to a deny, then the compiler will exit before\n // those errors are detected.\n \n-#![deny(const_err)]\n-\n use std::fmt;\n \n const VALS_I8: (i8,) =\n     (\n      i8::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U8: (u8,) =\n     (\n      u8::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U16: (u16,) = (\n      u16::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U32: (u32,) = (\n      u32::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U64: (u64,) =\n     (\n      u64::MIN - 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "341c15daf65b5809addb67306aa3fb446ca3ef9d", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 17, "deletions": 209, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,243 +1,51 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:14:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:12:6\n    |\n-LL | const VALS_I8: (i8,) =\n-   | --------------------\n-LL |     (\n LL |      i8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:21:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:18:6\n    |\n-LL | const VALS_I16: (i16,) =\n-   | ----------------------\n-LL |     (\n LL |      i16::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:28:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:24:6\n    |\n-LL | const VALS_I32: (i32,) =\n-   | ----------------------\n-LL |     (\n LL |      i32::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:35:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:30:6\n    |\n-LL | const VALS_I64: (i64,) =\n-   | ----------------------\n-LL |     (\n LL |      i64::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:42:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:36:6\n    |\n-LL | const VALS_U8: (u8,) =\n-   | --------------------\n-LL |     (\n LL |      u8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:48:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:41:6\n    |\n-LL | const VALS_U16: (u16,) = (\n-   | ----------------------\n LL |      u16::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:54:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:46:6\n    |\n-LL | const VALS_U32: (u32,) = (\n-   | ----------------------\n LL |      u32::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:61:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2.rs:52:6\n    |\n-LL | const VALS_U64: (u64,) =\n-   | ----------------------\n-LL |     (\n LL |      u64::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:14:6\n-   |\n-LL | const VALS_I8: (i8,) =\n-   | --------------------\n-LL |     (\n-LL |      i8::MIN - 1,\n-   |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:21:6\n-   |\n-LL | const VALS_I16: (i16,) =\n-   | ----------------------\n-LL |     (\n-LL |      i16::MIN - 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:28:6\n-   |\n-LL | const VALS_I32: (i32,) =\n-   | ----------------------\n-LL |     (\n-LL |      i32::MIN - 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:35:6\n-   |\n-LL | const VALS_I64: (i64,) =\n-   | ----------------------\n-LL |     (\n-LL |      i64::MIN - 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:42:6\n-   |\n-LL | const VALS_U8: (u8,) =\n-   | --------------------\n-LL |     (\n-LL |      u8::MIN - 1,\n-   |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:48:6\n-   |\n-LL | const VALS_U16: (u16,) = (\n-   | ----------------------\n-LL |      u16::MIN - 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:54:6\n-   |\n-LL | const VALS_U32: (u32,) = (\n-   | ----------------------\n-LL |      u32::MIN - 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:61:6\n-   |\n-LL | const VALS_U64: (u64,) =\n-   | ----------------------\n-LL |     (\n-LL |      u64::MIN - 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "59d1df5680debbc4fbf8c5abfe58704e0809761e", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,63 +5,53 @@\n // change this warn to a deny, then the compiler will exit before\n // those errors are detected.\n \n-#![deny(const_err)]\n-\n use std::fmt;\n \n const VALS_I8: (i8,) =\n     (\n      i8::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I16: (i16,) =\n     (\n      i16::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I32: (i32,) =\n     (\n      i32::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I64: (i64,) =\n     (\n      i64::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U16: (u16,) = (\n      u16::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U32: (u32,) = (\n      u32::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX + 1,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "e661836b4b9516c26e3a9b7cb8cc85213afe4348", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 17, "deletions": 209, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,243 +1,51 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:14:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:12:6\n    |\n-LL | const VALS_I8: (i8,) =\n-   | --------------------\n-LL |     (\n LL |      i8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:21:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:18:6\n    |\n-LL | const VALS_I16: (i16,) =\n-   | ----------------------\n-LL |     (\n LL |      i16::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:28:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:24:6\n    |\n-LL | const VALS_I32: (i32,) =\n-   | ----------------------\n-LL |     (\n LL |      i32::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:35:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:30:6\n    |\n-LL | const VALS_I64: (i64,) =\n-   | ----------------------\n-LL |     (\n LL |      i64::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:42:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:36:6\n    |\n-LL | const VALS_U8: (u8,) =\n-   | --------------------\n-LL |     (\n LL |      u8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:48:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:41:6\n    |\n-LL | const VALS_U16: (u16,) = (\n-   | ----------------------\n LL |      u16::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:54:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:46:6\n    |\n-LL | const VALS_U32: (u32,) = (\n-   | ----------------------\n LL |      u32::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:61:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2b.rs:52:6\n    |\n-LL | const VALS_U64: (u64,) =\n-   | ----------------------\n-LL |     (\n LL |      u64::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:14:6\n-   |\n-LL | const VALS_I8: (i8,) =\n-   | --------------------\n-LL |     (\n-LL |      i8::MAX + 1,\n-   |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:21:6\n-   |\n-LL | const VALS_I16: (i16,) =\n-   | ----------------------\n-LL |     (\n-LL |      i16::MAX + 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:28:6\n-   |\n-LL | const VALS_I32: (i32,) =\n-   | ----------------------\n-LL |     (\n-LL |      i32::MAX + 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:35:6\n-   |\n-LL | const VALS_I64: (i64,) =\n-   | ----------------------\n-LL |     (\n-LL |      i64::MAX + 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:42:6\n-   |\n-LL | const VALS_U8: (u8,) =\n-   | --------------------\n-LL |     (\n-LL |      u8::MAX + 1,\n-   |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:48:6\n-   |\n-LL | const VALS_U16: (u16,) = (\n-   | ----------------------\n-LL |      u16::MAX + 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:54:6\n-   |\n-LL | const VALS_U32: (u32,) = (\n-   | ----------------------\n-LL |      u32::MAX + 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:61:6\n-   |\n-LL | const VALS_U64: (u64,) =\n-   | ----------------------\n-LL |     (\n-LL |      u64::MAX + 1,\n-   |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2b.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "33b892601153a3c2e8f9620abdb19c9e5f2cce9c", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,63 +5,53 @@\n // change this warn to a deny, then the compiler will exit before\n // those errors are detected.\n \n-#![deny(const_err)]\n-\n use std::fmt;\n \n const VALS_I8: (i8,) =\n     (\n      i8::MIN * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U16: (u16,) = (\n      u16::MAX * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U32: (u32,) = (\n      u32::MAX * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX * 2,\n      );\n- //~^^ ERROR any use of this value will cause an error\n- //~| WARN this was previously accepted by the compiler but is being phased out\n+ //~^^ ERROR evaluation of constant value failed\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "1fad15492fb8242149b7908329f5bbed5e126354", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 17, "deletions": 209, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,243 +1,51 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:14:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:12:6\n    |\n-LL | const VALS_I8: (i8,) =\n-   | --------------------\n-LL |     (\n LL |      i8::MIN * 2,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:21:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:18:6\n    |\n-LL | const VALS_I16: (i16,) =\n-   | ----------------------\n-LL |     (\n LL |      i16::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:28:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:24:6\n    |\n-LL | const VALS_I32: (i32,) =\n-   | ----------------------\n-LL |     (\n LL |      i32::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:35:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:30:6\n    |\n-LL | const VALS_I64: (i64,) =\n-   | ----------------------\n-LL |     (\n LL |      i64::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:42:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:36:6\n    |\n-LL | const VALS_U8: (u8,) =\n-   | --------------------\n-LL |     (\n LL |      u8::MAX * 2,\n    |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:48:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:41:6\n    |\n-LL | const VALS_U16: (u16,) = (\n-   | ----------------------\n LL |      u16::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:54:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:46:6\n    |\n-LL | const VALS_U32: (u32,) = (\n-   | ----------------------\n LL |      u32::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:61:6\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-eval-overflow2c.rs:52:6\n    |\n-LL | const VALS_U64: (u64,) =\n-   | ----------------------\n-LL |     (\n LL |      u64::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:14:6\n-   |\n-LL | const VALS_I8: (i8,) =\n-   | --------------------\n-LL |     (\n-LL |      i8::MIN * 2,\n-   |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:21:6\n-   |\n-LL | const VALS_I16: (i16,) =\n-   | ----------------------\n-LL |     (\n-LL |      i16::MIN * 2,\n-   |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:28:6\n-   |\n-LL | const VALS_I32: (i32,) =\n-   | ----------------------\n-LL |     (\n-LL |      i32::MIN * 2,\n-   |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:35:6\n-   |\n-LL | const VALS_I64: (i64,) =\n-   | ----------------------\n-LL |     (\n-LL |      i64::MIN * 2,\n-   |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:42:6\n-   |\n-LL | const VALS_U8: (u8,) =\n-   | --------------------\n-LL |     (\n-LL |      u8::MAX * 2,\n-   |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:48:6\n-   |\n-LL | const VALS_U16: (u16,) = (\n-   | ----------------------\n-LL |      u16::MAX * 2,\n-   |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:54:6\n-   |\n-LL | const VALS_U32: (u32,) = (\n-   | ----------------------\n-LL |      u32::MAX * 2,\n-   |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:61:6\n-   |\n-LL | const VALS_U64: (u64,) =\n-   | ----------------------\n-LL |     (\n-LL |      u64::MAX * 2,\n-   |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-overflow2c.rs:8:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8f8a8cee3a0ccfbed0c1d5b6e54ee94f29f0df00", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n-// compile-flags: -Ztreat-err-as-bug=2\n-// build-fail\n+// compile-flags: -Ztreat-err-as-bug=1\n // failure-status: 101\n // rustc-env:RUST_BACKTRACE=1\n // normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n@@ -15,14 +14,9 @@\n \n #![allow(unconditional_panic)]\n \n-#[warn(const_err)]\n-const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+const X: i32 = 1 / 0; //~ERROR constant\n \n fn main() {\n     let x: &'static i32 = &X;\n-    //~^ ERROR evaluation of constant value failed\n-    //~| ERROR erroneous constant used\n-    //~| WARNING this was previously accepted by the compiler\n     println!(\"x={}\", x);\n }"}, {"sha": "b97975c4cd9e54b119b7165d38df8697949f9972", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 8, "deletions": 56, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,61 +1,13 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/const-eval-query-stack.rs:19:16\n-   |\n-LL | const X: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-query-stack.rs:18:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-query-stack.rs:23:28\n+  --> $DIR/const-eval-query-stack.rs:17:16\n    |\n-LL |     let x: &'static i32 = &X;\n-   |                            ^ referenced constant has errors\n-\n-error: erroneous constant used\n-  --> $DIR/const-eval-query-stack.rs:23:27\n-   |\n-LL |     let x: &'static i32 = &X;\n-   |                           ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+LL | const X: i32 = 1 / 0;\n+   |                ^^^^^ attempt to divide `1_i32` by zero\n \n query stack during panic:\n-#0 [mir_drops_elaborated_and_const_checked] elaborating drops for `main`\n-#1 [optimized_mir] optimizing MIR for `main`\n-#2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n+#0 [eval_to_allocation_raw] const-evaluating + checking `X`\n+#1 [eval_to_const_value_raw] simplifying constant for the type system `X`\n+#2 [eval_to_const_value_raw] simplifying constant for the type system `X`\n+#3 [lint_mod] linting top-level module\n+#4 [analysis] running analysis passes on this crate\n end of query stack\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const-eval-query-stack.rs:19:16\n-   |\n-LL | const X: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const-eval-query-stack.rs:18:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/const-eval-query-stack.rs:23:27\n-   |\n-LL |     let x: &'static i32 = &X;\n-   |                           ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "bf98d03946d81cb2edf72275390b5125075b376d", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "modified", "additions": 82, "deletions": 488, "changes": 570, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,664 +1,258 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-pointer-values-in-various-types.rs:26:49\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-   |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:30:43\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:29:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:32:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:38:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:35:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:42:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:38:45\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-pointer-values-in-various-types.rs:46:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:41:47\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:50:43\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:45:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:54:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:48:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:58:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:51:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:62:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:54:45\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-pointer-values-in-various-types.rs:66:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:57:47\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:70:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:61:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:74:45\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:64:45\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:78:47\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:67:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:82:47\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:70:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:86:39\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:73:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:90:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:76:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:94:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:79:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:98:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:82:41\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:102:43\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:85:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:106:39\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:88:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:110:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:91:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:114:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:94:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:118:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:97:41\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:122:43\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:100:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:126:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:103:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:130:41\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:106:41\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:134:43\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:109:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:138:43\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-pointer-values-in-various-types.rs:112:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error: aborting due to 29 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:26:49\n-   |\n-LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-   |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:30:43\n-   |\n-LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n-   |\n-LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:38:45\n-   |\n-LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:42:45\n-   |\n-LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:50:43\n-   |\n-LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:54:45\n-   |\n-LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:58:45\n-   |\n-LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:62:45\n-   |\n-LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:70:45\n-   |\n-LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:74:45\n-   |\n-LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:78:47\n-   |\n-LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:82:47\n-   |\n-LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-   |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:86:39\n-   |\n-LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:90:41\n-   |\n-LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:94:41\n-   |\n-LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:98:41\n-   |\n-LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:102:43\n-   |\n-LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:106:39\n-   |\n-LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-   |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:110:41\n-   |\n-LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:114:41\n-   |\n-LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:118:41\n-   |\n-LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:122:43\n-   |\n-LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:126:41\n-   |\n-LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:130:41\n-   |\n-LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:134:43\n-   |\n-LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:138:43\n-   |\n-LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-   |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "45eed9d842a9b2ff31b61c3fac747d3886ca806e", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 27, "deletions": 54, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -24,118 +24,91 @@ union Nonsense {\n \n fn main() {\n     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n     //~^ ERROR evaluation of constant value failed\n     //~| uninitialized\n \n     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n     //~^ ERROR evaluation of constant value failed\n     //~| uninitialized\n \n     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n \n     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "b873940c4b3b4fcfb43d910ff6d2e298f5abd24f", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,20 @@\n-// build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n-#![allow(const_err)]\n-\n fn double(x: usize) -> usize {\n     x * 2\n }\n const X: fn(usize) -> usize = double;\n \n const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n     x(y)\n+    //~^ ERROR evaluation of constant value failed\n+    //~| ERROR evaluation of constant value failed\n }\n \n const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n \n fn main() {\n     assert_eq!(Y, 4);\n-    //~^ ERROR evaluation of constant value failed\n     assert_eq!(Z, 4);\n-    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "3784a3861c3deedc67a0c2346e1d5699d076e4ca", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 14, "deletions": 78, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,99 +1,35 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_fn_ptr_fail2.rs:19:16\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |                ^ referenced constant has errors\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_fn_ptr_fail2.rs:21:16\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |                ^ referenced constant has errors\n-\n-warning: skipping const checks\n-   |\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_fn_ptr_fail2.rs:12:5\n-   |\n-LL |     x(y)\n-   |     ^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_fn_ptr_fail2.rs:12:5\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n LL |     x(y)\n    |     ^^^^\n    |     |\n    |     calling non-const function `double`\n-   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:12:5\n-   |     inside `Y` at $DIR/const_fn_ptr_fail2.rs:15:18\n+   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:9:5\n ...\n LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n-   | --------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_fn_ptr_fail2.rs:4:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n+   |                  --------- inside `Y` at $DIR/const_fn_ptr_fail2.rs:14:18\n \n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_fn_ptr_fail2.rs:12:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n LL |     x(y)\n    |     ^^^^\n    |     |\n    |     calling non-const function `double`\n-   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:12:5\n-   |     inside `Z` at $DIR/const_fn_ptr_fail2.rs:16:18\n+   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:9:5\n ...\n LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n-   | --------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_fn_ptr_fail2.rs:4:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n+   |                  -------------- inside `Z` at $DIR/const_fn_ptr_fail2.rs:15:18\n \n-Future breakage diagnostic:\n-warning: erroneous constant used\n-  --> $DIR/const_fn_ptr_fail2.rs:19:5\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n+warning: skipping const checks\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_fn_ptr_fail2.rs:4:10\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-   = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL |     x(y)\n+   |     ^^^^\n \n-Future breakage diagnostic:\n-warning: erroneous constant used\n-  --> $DIR/const_fn_ptr_fail2.rs:21:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_fn_ptr_fail2.rs:4:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-   = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "cf11531ba62ae2fd671b8a9793c301703e6bba2a", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,11 +1,9 @@\n //! Make sure we error on erroneous consts even if they are unused.\n-#![warn(const_err, unconditional_panic)]\n+#![allow(unconditional_panic)]\n \n struct PrintName<T>(T);\n impl<T> PrintName<T> {\n-    const VOID: () = [()][2]; //~WARN any use of this value will cause an error\n-    //~^ WARN this operation will panic at runtime\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    const VOID: () = [()][2]; //~ERROR evaluation of `PrintName::<i32>::VOID` failed\n }\n \n const fn no_codegen<T>() {"}, {"sha": "33579135d7c4e133492e79031f788b650418b1cb", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,56 +1,21 @@\n-warning: this operation will panic at runtime\n+error[E0080]: evaluation of `PrintName::<i32>::VOID` failed\n   --> $DIR/erroneous-const.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n    |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n-   |\n-note: the lint level is defined here\n-  --> $DIR/erroneous-const.rs:2:20\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/erroneous-const.rs:6:22\n-   |\n-LL |     const VOID: () = [()][2];\n-   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/erroneous-const.rs:2:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/erroneous-const.rs:15:17\n+  --> $DIR/erroneous-const.rs:13:17\n    |\n LL |         let _ = PrintName::<T>::VOID;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 referenced constant has errors\n-   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:15:17\n+   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:13:17\n ...\n LL | pub static FOO: () = no_codegen::<i32>();\n-   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:19:22\n+   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:17:22\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/erroneous-const.rs:6:22\n-   |\n-LL |     const VOID: () = [()][2];\n-   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/erroneous-const.rs:2:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n-"}, {"sha": "2fbf7be8835350a9fcaf960ebfab1350b3fedd32", "filename": "src/test/ui/consts/const-eval/erroneous-const2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,11 +1,9 @@\n //! Make sure we error on erroneous consts even if they are unused.\n-#![warn(const_err, unconditional_panic)]\n+#![allow(unconditional_panic)]\n \n struct PrintName<T>(T);\n impl<T> PrintName<T> {\n-    const VOID: () = [()][2]; //~WARN any use of this value will cause an error\n-    //~^ WARN this operation will panic at runtime\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    const VOID: () = [()][2]; //~ERROR evaluation of `PrintName::<i32>::VOID` failed\n }\n \n pub static FOO: () = {"}, {"sha": "630b1cf16aec9c48ff736d1355ca0f094b39d731", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,50 +1,15 @@\n-warning: this operation will panic at runtime\n+error[E0080]: evaluation of `PrintName::<i32>::VOID` failed\n   --> $DIR/erroneous-const2.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n    |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n-   |\n-note: the lint level is defined here\n-  --> $DIR/erroneous-const2.rs:2:20\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/erroneous-const2.rs:6:22\n-   |\n-LL |     const VOID: () = [()][2];\n-   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/erroneous-const2.rs:2:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/erroneous-const2.rs:15:17\n+  --> $DIR/erroneous-const2.rs:13:17\n    |\n LL |         let _ = PrintName::<i32>::VOID;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/erroneous-const2.rs:6:22\n-   |\n-LL |     const VOID: () = [()][2];\n-   |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/erroneous-const2.rs:2:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n-"}, {"sha": "3eef0d6c3d4d0ffa5dd6337395ffab4df501183d", "filename": "src/test/ui/consts/const-eval/format.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -3,8 +3,6 @@ const fn failure() {\n     //~^ ERROR cannot call non-const formatting macro in constant functions\n     //~| ERROR erroneous constant used\n     //~| ERROR erroneous constant used\n-    //~| WARN this was previously accepted by the compiler\n-    //~| WARN this was previously accepted by the compiler\n }\n \n const fn print() {\n@@ -14,8 +12,6 @@ const fn print() {\n     //~| ERROR cannot call non-const fn `_print` in constant functions\n     //~| ERROR erroneous constant used\n     //~| ERROR erroneous constant used\n-    //~| WARN this was previously accepted by the compiler\n-    //~| WARN this was previously accepted by the compiler\n }\n \n fn main() {}"}, {"sha": "64c7696486f78c268dd0683586e1219551b13f58", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 11, "deletions": 67, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -8,7 +8,7 @@ LL |     panic!(\"{:?}\", 0);\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const formatting macro in constant functions\n-  --> $DIR/format.rs:11:22\n+  --> $DIR/format.rs:9:22\n    |\n LL |     println!(\"{:?}\", 0);\n    |                      ^\n@@ -17,7 +17,7 @@ LL |     println!(\"{:?}\", 0);\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n-  --> $DIR/format.rs:11:5\n+  --> $DIR/format.rs:9:5\n    |\n LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -26,99 +26,43 @@ LL |     println!(\"{:?}\", 0);\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `_print` in constant functions\n-  --> $DIR/format.rs:11:5\n+  --> $DIR/format.rs:9:5\n    |\n LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: erroneous constant used\n+error[E0080]: erroneous constant used\n   --> $DIR/format.rs:2:12\n    |\n LL |     panic!(\"{:?}\", 0);\n    |            ^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n \n-error: erroneous constant used\n+error[E0080]: erroneous constant used\n   --> $DIR/format.rs:2:20\n    |\n LL |     panic!(\"{:?}\", 0);\n    |                    ^ referenced constant has errors\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: erroneous constant used\n-  --> $DIR/format.rs:11:14\n+error[E0080]: erroneous constant used\n+  --> $DIR/format.rs:9:14\n    |\n LL |     println!(\"{:?}\", 0);\n    |              ^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: erroneous constant used\n-  --> $DIR/format.rs:11:22\n+error[E0080]: erroneous constant used\n+  --> $DIR/format.rs:9:22\n    |\n LL |     println!(\"{:?}\", 0);\n    |                      ^ referenced constant has errors\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/format.rs:2:12\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/format.rs:2:20\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |                    ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/format.rs:11:14\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/format.rs:11:22\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |                      ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n+Some errors have detailed explanations: E0015, E0080.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "bc2ea3f18faf225e158b52bf218a596b77b3bc0b", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,21 +1,19 @@\n // build-fail\n \n // Regression test for #66975\n-#![warn(const_err, unconditional_panic)]\n+#![warn(unconditional_panic)]\n #![feature(never_type)]\n \n struct PrintName<T>(T);\n \n impl<T> PrintName<T> {\n     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n-    //~^ WARN any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of `PrintName::<()>::VOID` failed\n \n }\n \n fn f<T>() {\n     let _ = PrintName::<T>::VOID;\n-    //~^ ERROR erroneous constant encountered\n }\n \n pub fn main() {"}, {"sha": "8bcd0300598196ca38c524c23d21cca6af853daf", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,37 +1,15 @@\n-warning: any use of this value will cause an error\n+error[E0080]: evaluation of `PrintName::<()>::VOID` failed\n   --> $DIR/index-out-of-bounds-never-type.rs:10:61\n    |\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n-   |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/index-out-of-bounds-never-type.rs:4:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n+   |                                                             ^^^^^ index out of bounds: the length is 0 but the index is 0\n \n-error: erroneous constant encountered\n-  --> $DIR/index-out-of-bounds-never-type.rs:17:13\n+note: the above error was encountered while instantiating `fn f::<()>`\n+  --> $DIR/index-out-of-bounds-never-type.rs:20:5\n    |\n-LL |     let _ = PrintName::<T>::VOID;\n-   |             ^^^^^^^^^^^^^^^^^^^^\n+LL |     f::<()>();\n+   |     ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/index-out-of-bounds-never-type.rs:10:61\n-   |\n-LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n-   |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/index-out-of-bounds-never-type.rs:4:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "145463f0ae29816fbfa93d422293a6674450ad9d", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,11 @@\n-// build-fail\n-\n-#![warn(const_err)]\n-\n const fn foo(x: u32) -> u32 {\n     x\n }\n \n fn main() {\n     const X: u32 = 0 - 1;\n-    //~^ WARN any use of this value will cause\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR constant\n     const Y: u32 = foo(0 - 1);\n-    //~^ WARN any use of this value will cause\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR constant\n     println!(\"{} {}\", X, Y);\n-    //~^ ERROR evaluation of constant value failed\n-    //~| ERROR evaluation of constant value failed\n-    //~| WARN erroneous constant used [const_err]\n-    //~| WARN erroneous constant used [const_err]\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "c59f13e488828808b3bdbfb2b5f1d469d6355a92", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 7, "deletions": 112, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,120 +1,15 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:10:20\n-   |\n-LL |     const X: u32 = 0 - 1;\n-   |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/issue-43197.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:13:24\n-   |\n-LL |     const Y: u32 = foo(0 - 1);\n-   |     ------------       ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-43197.rs:16:23\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                       ^ referenced constant has errors\n-\n-warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:16:23\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                       ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-43197.rs:16:26\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                          ^ referenced constant has errors\n-\n-warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:16:26\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                          ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors; 4 warnings emitted\n-\n-For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:10:20\n+  --> $DIR/issue-43197.rs:6:20\n    |\n LL |     const X: u32 = 0 - 1;\n-   |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/issue-43197.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+   |                    ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n \n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:13:24\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-43197.rs:8:24\n    |\n LL |     const Y: u32 = foo(0 - 1);\n-   |     ------------       ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/issue-43197.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+   |                        ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n \n-Future breakage diagnostic:\n-warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:16:23\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                       ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/issue-43197.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-Future breakage diagnostic:\n-warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:16:26\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                          ^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/issue-43197.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "2dbe1c2bd161b61716516005a3b1073a30f612ba", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,5 @@\n // build-fail\n \n-#![allow(const_err)]\n-\n trait Foo {\n     const AMT: usize;\n }\n@@ -12,7 +10,7 @@ enum Bar<A, B> {\n }\n \n impl<A: Foo, B: Foo> Foo for Bar<A, B> {\n-    const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+    const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize]; //~ERROR evaluation of `<Bar<u16, u8> as Foo>::AMT` failed\n }\n \n impl Foo for u8 {\n@@ -26,4 +24,5 @@ impl Foo for u16 {\n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n     //~^ ERROR evaluation of constant value failed\n+    //~| ERROR erroneous constant used\n }"}, {"sha": "963381b587093b1d4b69a8eb806d70ddbe639a5e", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,40 +1,23 @@\n+error[E0080]: evaluation of `<Bar<u16, u8> as Foo>::AMT` failed\n+  --> $DIR/issue-44578.rs:13:24\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n+\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-44578.rs:27:20\n+  --> $DIR/issue-44578.rs:25:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/issue-44578.rs:15:24\n-   |\n-LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n-   |     ----------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/issue-44578.rs:3:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: erroneous constant used\n-  --> $DIR/issue-44578.rs:27:20\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-44578.rs:25:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/issue-44578.rs:3:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "49d1d8ff0805eb46bc176961d6004fa587e6cbbe", "filename": "src/test/ui/consts/const-eval/issue-50814-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -11,8 +11,7 @@ trait Foo<T> {\n struct A<T>(T);\n \n impl<T: C> Foo<T> for A<T> {\n-    const BAR: usize = [5, 6, 7][T::BOO]; //~ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    const BAR: usize = [5, 6, 7][T::BOO]; //~ ERROR evaluation of `<A<()> as Foo<()>>::BAR` failed\n }\n \n fn foo<T: C>() -> &'static usize {"}, {"sha": "6604f2b9f8b5e20ee107b02dbafa7746a626ef2f", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,36 +1,21 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of `<A<()> as Foo<()>>::BAR` failed\n   --> $DIR/issue-50814-2.rs:14:24\n    |\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n-   |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                        ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n \n error[E0080]: evaluation of `foo::<()>` failed\n-  --> $DIR/issue-50814-2.rs:19:6\n+  --> $DIR/issue-50814-2.rs:18:6\n    |\n LL |     &<A<T> as Foo<T>>::BAR\n    |      ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n note: the above error was encountered while instantiating `fn foo::<()>`\n-  --> $DIR/issue-50814-2.rs:31:22\n+  --> $DIR/issue-50814-2.rs:30:22\n    |\n LL |     println!(\"{:x}\", foo::<()>() as *const usize as usize);\n    |                      ^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/issue-50814-2.rs:14:24\n-   |\n-LL |     const BAR: usize = [5, 6, 7][T::BOO];\n-   |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "5a587701f787a441583ccd1d3e2faff341f1c39e", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -13,8 +13,7 @@ struct Sum<A,B>(A,B);\n \n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n     const MAX: u8 = A::MAX + B::MAX;\n-    //~^ ERROR any use of this value will cause an error [const_err]\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR evaluation of `<Sum<U8, U8> as Unsigned>::MAX` failed\n }\n \n fn foo<T>(_: T) -> &'static u8 {"}, {"sha": "46dd2b89fa2aca1bf23059889bd595960709517a", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,36 +1,21 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of `<Sum<U8, U8> as Unsigned>::MAX` failed\n   --> $DIR/issue-50814.rs:15:21\n    |\n LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                     ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n \n error[E0080]: evaluation of `foo::<i32>` failed\n-  --> $DIR/issue-50814.rs:21:6\n+  --> $DIR/issue-50814.rs:20:6\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |      ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n note: the above error was encountered while instantiating `fn foo::<i32>`\n-  --> $DIR/issue-50814.rs:26:5\n+  --> $DIR/issue-50814.rs:25:5\n    |\n LL |     foo(0);\n    |     ^^^^^^\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/issue-50814.rs:15:21\n-   |\n-LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "d2a840932a5d1270a1cdebc498ab8b737e5235d6", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,6 @@\n // build-fail\n \n // Regression test for #66975\n-#![warn(const_err)]\n #![feature(never_type)]\n \n struct PrintName;"}, {"sha": "4204d302bf83ccaea7183dcd980c29b68379f0a9", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/panic-assoc-never-type.rs:10:21\n+  --> $DIR/panic-assoc-never-type.rs:9:21\n    |\n LL |     const VOID: ! = panic!();\n-   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:10:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:9:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-assoc-never-type.rs:15:13\n+  --> $DIR/panic-assoc-never-type.rs:14:13\n    |\n LL |     let _ = PrintName::VOID;\n    |             ^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "a9e9026d9bc07becace0ababa1f9df7f7c472622", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // Regression test for #66975\n-#![warn(const_err)]\n #![feature(never_type)]\n \n const VOID: ! = panic!();"}, {"sha": "6bff14a45b1c5484c815aaf13bc747b3a53a668f", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/panic-never-type.rs:5:17\n+  --> $DIR/panic-never-type.rs:4:17\n    |\n LL | const VOID: ! = panic!();\n-   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:5:17\n+   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:4:17\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d6c76886853f4a13a2033ebd5c1e31b67d88a575", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,9 +5,8 @@ const PARTIAL_OVERWRITE: () = {\n     let mut p = &42;\n     unsafe {\n         let ptr: *mut _ = &mut p;\n-        *(ptr as *mut u8) = 123; //~ ERROR any use of this value\n+        *(ptr as *mut u8) = 123; //~ ERROR constant\n         //~| unable to overwrite parts of a pointer\n-        //~| WARN previously accepted\n     }\n     let x = *p;\n };"}, {"sha": "13ca4379b7bd8f9dd8634023d10ea0cc78a07ed0", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.stderr", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,33 +1,12 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/partial_ptr_overwrite.rs:8:9\n    |\n-LL | const PARTIAL_OVERWRITE: () = {\n-   | ---------------------------\n-...\n LL |         *(ptr as *mut u8) = 123;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/partial_ptr_overwrite.rs:8:9\n-   |\n-LL | const PARTIAL_OVERWRITE: () = {\n-   | ---------------------------\n-...\n-LL |         *(ptr as *mut u8) = 123;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "656dd33e1d0845b47cb5d457d4f3fbc7024c90a8", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,3 @@\n-#![allow(const_err)]\n-\n #[repr(C)]\n union Bar {\n     a: &'static u8,"}, {"sha": "596fa090d976fe7adf83ca1949f4564f88a632c5", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail.rs:19:27\n+  --> $DIR/promoted_const_fn_fail.rs:17:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "5009dbcb9bd9cddc1b0982216d37f45dcd94aa62", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,3 @@\n-#![deny(const_err)]\n-\n #[repr(C)]\n union Bar {\n     a: &'static u8,"}, {"sha": "63dc43a41a8fc096c94c605ad5694bf6e475a4c9", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:20:27\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:18:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "2a254bfde8204a3c0067476e10905e58ece64561", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 11, "deletions": 82, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,111 +5,40 @@ LL |     0 - 1\n    |     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:20\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:21:5\n+  --> $DIR/promoted_errors.rs:19:5\n    |\n LL |     1 / 0\n    |     ^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:41\n+  --> $DIR/promoted_errors.rs:11:30\n    |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(arithmetic_overflow, unconditional_panic)]\n+   |                              ^^^^^^^^^^^^^^^^^^^\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:27:5\n+  --> $DIR/promoted_errors.rs:23:5\n    |\n LL |     1 / (1 - 1)\n    |     ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:31:5\n+  --> $DIR/promoted_errors.rs:27:5\n    |\n LL |     1 / (false as i32)\n    |     ^^^^^^^^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:35:5\n+  --> $DIR/promoted_errors.rs:31:5\n    |\n LL |     [1, 2, 3][4]\n    |     ^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 4\n \n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:15:5\n-   |\n-LL |     0 - 1\n-   |     ^^^^^\n-   |     |\n-   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |     inside `X` at $DIR/promoted_errors.rs:43:29\n-...\n-LL | const X: () = {\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:43:28\n-   |\n-LL | const X: () = {\n-   | -----------\n-LL |     let _x: &'static u32 = &overflow();\n-   |                            ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-warning: 7 warnings emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:15:5\n-   |\n-LL |     0 - 1\n-   |     ^^^^^\n-   |     |\n-   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |     inside `X` at $DIR/promoted_errors.rs:43:29\n-...\n-LL | const X: () = {\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:43:28\n-   |\n-LL | const X: () = {\n-   | -----------\n-LL |     let _x: &'static u32 = &overflow();\n-   |                            ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n+warning: 5 warnings emitted\n "}, {"sha": "2a254bfde8204a3c0067476e10905e58ece64561", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 11, "deletions": 84, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,113 +5,40 @@ LL |     0 - 1\n    |     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:20\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:21:5\n+  --> $DIR/promoted_errors.rs:19:5\n    |\n LL |     1 / 0\n    |     ^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:41\n+  --> $DIR/promoted_errors.rs:11:30\n    |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(arithmetic_overflow, unconditional_panic)]\n+   |                              ^^^^^^^^^^^^^^^^^^^\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:27:5\n+  --> $DIR/promoted_errors.rs:23:5\n    |\n LL |     1 / (1 - 1)\n    |     ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:31:5\n+  --> $DIR/promoted_errors.rs:27:5\n    |\n LL |     1 / (false as i32)\n    |     ^^^^^^^^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:35:5\n+  --> $DIR/promoted_errors.rs:31:5\n    |\n LL |     [1, 2, 3][4]\n    |     ^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 4\n \n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:21:5\n-   |\n-LL |     1 / 0\n-   |     ^^^^^\n-   |     |\n-   |     attempt to divide `1_i32` by zero\n-   |     inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n-   |     inside `X` at $DIR/promoted_errors.rs:46:29\n-...\n-LL | const X: () = {\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:46:28\n-   |\n-LL | const X: () = {\n-   | -----------\n-...\n-LL |     let _x: &'static i32 = &div_by_zero1();\n-   |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-warning: 7 warnings emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:21:5\n-   |\n-LL |     1 / 0\n-   |     ^^^^^\n-   |     |\n-   |     attempt to divide `1_i32` by zero\n-   |     inside `div_by_zero1` at $DIR/promoted_errors.rs:21:5\n-   |     inside `X` at $DIR/promoted_errors.rs:46:29\n-...\n-LL | const X: () = {\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:46:28\n-   |\n-LL | const X: () = {\n-   | -----------\n-...\n-LL |     let _x: &'static i32 = &div_by_zero1();\n-   |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n+warning: 5 warnings emitted\n "}, {"sha": "2a254bfde8204a3c0067476e10905e58ece64561", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 11, "deletions": 82, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,111 +5,40 @@ LL |     0 - 1\n    |     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:20\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:21:5\n+  --> $DIR/promoted_errors.rs:19:5\n    |\n LL |     1 / 0\n    |     ^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:41\n+  --> $DIR/promoted_errors.rs:11:30\n    |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(arithmetic_overflow, unconditional_panic)]\n+   |                              ^^^^^^^^^^^^^^^^^^^\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:27:5\n+  --> $DIR/promoted_errors.rs:23:5\n    |\n LL |     1 / (1 - 1)\n    |     ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:31:5\n+  --> $DIR/promoted_errors.rs:27:5\n    |\n LL |     1 / (false as i32)\n    |     ^^^^^^^^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:35:5\n+  --> $DIR/promoted_errors.rs:31:5\n    |\n LL |     [1, 2, 3][4]\n    |     ^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 4\n \n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:15:5\n-   |\n-LL |     0 - 1\n-   |     ^^^^^\n-   |     |\n-   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |     inside `X` at $DIR/promoted_errors.rs:43:29\n-...\n-LL | const X: () = {\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:43:28\n-   |\n-LL | const X: () = {\n-   | -----------\n-LL |     let _x: &'static u32 = &overflow();\n-   |                            ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-warning: 7 warnings emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:15:5\n-   |\n-LL |     0 - 1\n-   |     ^^^^^\n-   |     |\n-   |     attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |     inside `overflow` at $DIR/promoted_errors.rs:15:5\n-   |     inside `X` at $DIR/promoted_errors.rs:43:29\n-...\n-LL | const X: () = {\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:43:28\n-   |\n-LL | const X: () = {\n-   | -----------\n-LL |     let _x: &'static u32 = &overflow();\n-   |                            ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:11:9\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |         ^^^^^^^^^\n+warning: 5 warnings emitted\n "}, {"sha": "2c42d035629a031977956268d2b7bcf4d491d36b", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -8,20 +8,16 @@\n \n //! This test ensures that when we promote code that fails to evaluate, the build still succeeds.\n \n-#![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+#![warn(arithmetic_overflow, unconditional_panic)]\n \n // The only way to have promoteds that fail is in `const fn` called from `const`/`static`.\n const fn overflow() -> u32 {\n     0 - 1\n-    //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n-    //[opt_with_overflow_checks,noopt]~| WARN this was previously accepted by the compiler\n-    //~^^^ WARN this arithmetic operation will overflow\n+    //~^ WARN this arithmetic operation will overflow\n }\n const fn div_by_zero1() -> i32 {\n     1 / 0\n-    //[opt]~^ WARN any use of this value will cause an error\n-    //[opt]~| WARN this was previously accepted by the compiler but is being phased out\n-    //~^^^ WARN this operation will panic at runtime\n+    //~^ WARN this operation will panic at runtime\n }\n const fn div_by_zero2() -> i32 {\n     1 / (1 - 1)\n@@ -36,21 +32,6 @@ const fn oob() -> i32 {\n     //~^ WARN this operation will panic at runtime\n }\n \n-// An unused constant containing failing promoteds.\n-// This should work as long as `const_err` can be turned into just a warning;\n-// once it turns into a hard error, just remove `X`.\n-const X: () = {\n-    let _x: &'static u32 = &overflow();\n-    //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n-    //[opt_with_overflow_checks,noopt]~| WARN this was previously accepted by the compiler\n-    let _x: &'static i32 = &div_by_zero1();\n-    //[opt]~^ WARN any use of this value will cause an error\n-    //[opt]~| WARN this was previously accepted by the compiler but is being phased out\n-    let _x: &'static i32 = &div_by_zero2();\n-    let _x: &'static i32 = &div_by_zero3();\n-    let _x: &'static i32 = &oob();\n-};\n-\n const fn mk_false() -> bool { false }\n \n // An actually used constant referencing failing promoteds in dead code."}, {"sha": "5faacd556d47957e632d0266f1c3228391b142db", "filename": "src/test/ui/consts/const-eval/pub_const_err.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,10 +0,0 @@\n-// check-pass\n-#![warn(const_err)]\n-\n-#![crate_type = \"lib\"]\n-\n-pub const Z: u32 = 0 - 1;\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-\n-pub type Foo = [i32; 0 - 1];"}, {"sha": "d1081f9c2caa31b6f0e7be7c9a34f9285100ec0d", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,31 +0,0 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err.rs:6:20\n-   |\n-LL | pub const Z: u32 = 0 - 1;\n-   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/pub_const_err.rs:2:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: 1 warning emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err.rs:6:20\n-   |\n-LL | pub const Z: u32 = 0 - 1;\n-   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/pub_const_err.rs:2:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-"}, {"sha": "82eae25121e418a0e9d0aa2d17b4957e283782ff", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,10 +0,0 @@\n-// check-pass\n-#![warn(const_err)]\n-\n-pub const Z: u32 = 0 - 1;\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-\n-pub type Foo = [i32; 0 - 1];\n-\n-fn main() {}"}, {"sha": "93362a9375cc9c7872caaf32a4701ca1c4dfbe47", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,31 +0,0 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err_bin.rs:4:20\n-   |\n-LL | pub const Z: u32 = 0 - 1;\n-   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/pub_const_err_bin.rs:2:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: 1 warning emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err_bin.rs:4:20\n-   |\n-LL | pub const Z: u32 = 0 - 1;\n-   | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/pub_const_err_bin.rs:2:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-"}, {"sha": "032ceb2467c24f57f4fcd431c510bbfb2382a149", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.32bit.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,14 +1,11 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ref_to_int_match.rs:25:27\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                           ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n error: could not evaluate constant pattern\n   --> $DIR/ref_to_int_match.rs:7:14\n@@ -24,16 +21,4 @@ LL |         10..=BAR => {},\n \n error: aborting due to 3 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ref_to_int_match.rs:25:27\n-   |\n-LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "032ceb2467c24f57f4fcd431c510bbfb2382a149", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,14 +1,11 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ref_to_int_match.rs:25:27\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                           ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n error: could not evaluate constant pattern\n   --> $DIR/ref_to_int_match.rs:7:14\n@@ -24,16 +21,4 @@ LL |         10..=BAR => {},\n \n error: aborting due to 3 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ref_to_int_match.rs:25:27\n-   |\n-LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "70c6e7d94ae0129dbca6944218f7ad9663845cbb", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -23,5 +23,4 @@ type Int = u64;\n type Int = u32;\n \n const BAR: Int = unsafe { Foo { r: &42 }.f };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR constant"}, {"sha": "93bc96e67674915f6b4a5c8d1807f1dfda88ceb0", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 16, "deletions": 92, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,31 +9,26 @@ LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n                01 00 00 00                                     \u2502 ....\n            }\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-enum.rs:27:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:31:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:44:1\n+  --> $DIR/ub-enum.rs:42:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x00000000, but expected a valid enum tag\n@@ -43,47 +38,41 @@ LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n                00 00 00 00                                     \u2502 ....\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:46:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:44:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:50:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:47:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-enum.rs:60:42\n+  --> $DIR/ub-enum.rs:56:42\n    |\n LL | const BAD_ENUM2_UNDEF : Enum2 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:65:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:61:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:83:1\n+  --> $DIR/ub-enum.rs:78:1\n    |\n LL | const BAD_UNINHABITED_VARIANT1: UninhDiscriminant = unsafe { mem::transmute(1u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(B)>.0: encountered a value of the never type `!`\n@@ -94,7 +83,7 @@ LL | const BAD_UNINHABITED_VARIANT1: UninhDiscriminant = unsafe { mem::transmute\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:85:1\n+  --> $DIR/ub-enum.rs:80:1\n    |\n LL | const BAD_UNINHABITED_VARIANT2: UninhDiscriminant = unsafe { mem::transmute(3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(D)>.0: encountered a value of uninhabited type Never\n@@ -105,7 +94,7 @@ LL | const BAD_UNINHABITED_VARIANT2: UninhDiscriminant = unsafe { mem::transmute\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:93:1\n+  --> $DIR/ub-enum.rs:88:1\n    |\n LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::transmute(!0u32) }));\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Some)>.0.1: encountered 0xffffffff, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n@@ -116,82 +105,17 @@ LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::tran\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-enum.rs:98:77\n+  --> $DIR/ub-enum.rs:93:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n    |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-enum.rs:100:77\n+  --> $DIR/ub-enum.rs:95:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n    |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:27:1\n-   |\n-LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:31:1\n-   |\n-LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:46:1\n-   |\n-LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:50:1\n-   |\n-LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:65:1\n-   |\n-LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "280ba25a83ca8fe25e98130e3e34e37b108ffdf8", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 16, "deletions": 92, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,31 +9,26 @@ LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n                01 00 00 00 00 00 00 00                         \u2502 ........\n            }\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-enum.rs:27:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:31:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:44:1\n+  --> $DIR/ub-enum.rs:42:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-tag>: encountered 0x0000000000000000, but expected a valid enum tag\n@@ -43,47 +38,41 @@ LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n                00 00 00 00 00 00 00 00                         \u2502 ........\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:46:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:44:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:50:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:47:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-enum.rs:60:42\n+  --> $DIR/ub-enum.rs:56:42\n    |\n LL | const BAD_ENUM2_UNDEF : Enum2 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:65:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:61:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:83:1\n+  --> $DIR/ub-enum.rs:78:1\n    |\n LL | const BAD_UNINHABITED_VARIANT1: UninhDiscriminant = unsafe { mem::transmute(1u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(B)>.0: encountered a value of the never type `!`\n@@ -94,7 +83,7 @@ LL | const BAD_UNINHABITED_VARIANT1: UninhDiscriminant = unsafe { mem::transmute\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:85:1\n+  --> $DIR/ub-enum.rs:80:1\n    |\n LL | const BAD_UNINHABITED_VARIANT2: UninhDiscriminant = unsafe { mem::transmute(3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(D)>.0: encountered a value of uninhabited type Never\n@@ -105,7 +94,7 @@ LL | const BAD_UNINHABITED_VARIANT2: UninhDiscriminant = unsafe { mem::transmute\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:93:1\n+  --> $DIR/ub-enum.rs:88:1\n    |\n LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::transmute(!0u32) }));\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Some)>.0.1: encountered 0xffffffff, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n@@ -116,82 +105,17 @@ LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::tran\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-enum.rs:98:77\n+  --> $DIR/ub-enum.rs:93:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n    |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-enum.rs:100:77\n+  --> $DIR/ub-enum.rs:95:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n    |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:27:1\n-   |\n-LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:31:1\n-   |\n-LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:46:1\n-   |\n-LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:50:1\n-   |\n-LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-enum.rs:65:1\n-   |\n-LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "6935be2f92fe68a246e3f29e325ed77656938dd7", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -25,12 +25,10 @@ const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n //~^ ERROR is undefined behavior\n \n const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // # simple enum with discriminant 2\n \n@@ -44,12 +42,10 @@ enum Enum2 {\n const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n //~^ ERROR is undefined behavior\n const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n // something wrapping the enum so that we test layout first, not enum\n const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // Undef enum discriminant.\n #[repr(C)]\n@@ -63,8 +59,7 @@ const BAD_ENUM2_UNDEF : Enum2 = unsafe { MaybeUninit { uninit: () }.init };\n \n // Pointer value in an enum with a niche that is not just 0.\n const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // # valid discriminant for uninhabited variant\n "}, {"sha": "edcde13b0e037c49b2c41598747be138aff2bc36", "filename": "src/test/ui/consts/const-eval/ub-int-array.32bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,17 +1,17 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-int-array.rs:16:9\n+  --> $DIR/ub-int-array.rs:15:9\n    |\n LL |         MaybeUninit { uninit: () }.init,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-int-array.rs:31:13\n+  --> $DIR/ub-int-array.rs:30:13\n    |\n LL |             MaybeUninit { uninit: () }.init,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-int-array.rs:57:13\n+  --> $DIR/ub-int-array.rs:56:13\n    |\n LL |             MaybeUninit { uninit: () }.init,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory"}, {"sha": "edcde13b0e037c49b2c41598747be138aff2bc36", "filename": "src/test/ui/consts/const-eval/ub-int-array.64bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,17 +1,17 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-int-array.rs:16:9\n+  --> $DIR/ub-int-array.rs:15:9\n    |\n LL |         MaybeUninit { uninit: () }.init,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-int-array.rs:31:13\n+  --> $DIR/ub-int-array.rs:30:13\n    |\n LL |             MaybeUninit { uninit: () }.init,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-int-array.rs:57:13\n+  --> $DIR/ub-int-array.rs:56:13\n    |\n LL |             MaybeUninit { uninit: () }.init,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory"}, {"sha": "a68d3fb17bcfcd6afbeb214a08c85743d2b96237", "filename": "src/test/ui/consts/const-eval/ub-int-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,4 +1,3 @@\n-#![allow(const_err)] // make sure we cannot allow away the errors tested here\n // stderr-per-bitwidth\n //! Test the \"array of int\" fast path in validity checking, and in particular whether it\n //! points at the right array element."}, {"sha": "dbd05b8f4249a83ec1cd45ce3fb0f945ed0933ec", "filename": "src/test/ui/consts/const-eval/ub-nonnull.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -10,13 +10,13 @@ LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-nonnull.rs:19:30\n+  --> $DIR/ub-nonnull.rs:18:30\n    |\n LL |     let out_of_bounds_ptr = &ptr[255];\n    |                              ^^^^^^^^ dereferencing pointer failed: alloc11 has size 1, so pointer to 256 bytes starting at offset 0 is out-of-bounds\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:23:1\n+  --> $DIR/ub-nonnull.rs:22:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n@@ -27,7 +27,7 @@ LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:25:1\n+  --> $DIR/ub-nonnull.rs:24:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n@@ -38,13 +38,13 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-nonnull.rs:33:36\n+  --> $DIR/ub-nonnull.rs:32:36\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:42:1\n+  --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 42, but expected something in the range 10..=30\n@@ -55,7 +55,7 @@ LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:48:1\n+  --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "5a1ac09bd35acb0b072a974f4e483f683f07639c", "filename": "src/test/ui/consts/const-eval/ub-nonnull.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -10,13 +10,13 @@ LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-nonnull.rs:19:30\n+  --> $DIR/ub-nonnull.rs:18:30\n    |\n LL |     let out_of_bounds_ptr = &ptr[255];\n    |                              ^^^^^^^^ dereferencing pointer failed: alloc11 has size 1, so pointer to 256 bytes starting at offset 0 is out-of-bounds\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:23:1\n+  --> $DIR/ub-nonnull.rs:22:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n@@ -27,7 +27,7 @@ LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:25:1\n+  --> $DIR/ub-nonnull.rs:24:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n@@ -38,13 +38,13 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-nonnull.rs:33:36\n+  --> $DIR/ub-nonnull.rs:32:36\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:42:1\n+  --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 42, but expected something in the range 10..=30\n@@ -55,7 +55,7 @@ LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:48:1\n+  --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "d22a99cd01e684a16b8e9871ae737010aecfd106", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,6 @@\n // stderr-per-bitwidth\n #![feature(rustc_attrs)]\n-#![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n+#![allow(invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n use std::ptr::NonNull;\n@@ -12,7 +12,6 @@ const NON_NULL_PTR: NonNull<u8> = unsafe { mem::transmute(&1) };\n const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n-#[deny(const_err)] // this triggers a `const_err` so validation does not even happen\n const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n     // Use address-of-element for pointer arithmetic. This could wrap around to null!"}, {"sha": "6f5c028cbcab6487bbb291d2ff1b9d6aa35d1cea", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 20, "deletions": 94, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -42,60 +42,47 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n                00 00 00 00                                     \u2502 ....\n            }\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:39\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:34:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:38\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:34:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:86\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:38:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                                                                      ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:85\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:38:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                                                                     ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:47:1\n+  --> $DIR/ub-ref-ptr.rs:42:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n@@ -106,7 +93,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:50:1\n+  --> $DIR/ub-ref-ptr.rs:45:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n@@ -117,13 +104,13 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:53:41\n+  --> $DIR/ub-ref-ptr.rs:48:41\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:57:1\n+  --> $DIR/ub-ref-ptr.rs:52:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a function pointer\n@@ -134,13 +121,13 @@ LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:59:38\n+  --> $DIR/ub-ref-ptr.rs:54:38\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:62:1\n+  --> $DIR/ub-ref-ptr.rs:57:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0xd[noalloc], but expected a function pointer\n@@ -151,7 +138,7 @@ LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:64:1\n+  --> $DIR/ub-ref-ptr.rs:59:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered alloc41, but expected a function pointer\n@@ -164,64 +151,3 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:31:1\n-   |\n-LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:39\n-   |\n-LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:38\n-   |\n-LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:86\n-   |\n-LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:85\n-   |\n-LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "5ffb710d45683cd87d934aff47b4e99a4132ced2", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 20, "deletions": 94, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -42,60 +42,47 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n                00 00 00 00 00 00 00 00                         \u2502 ........\n            }\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:39\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:34:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:38\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:34:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:86\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:38:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                                                                                      ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:85\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-ref-ptr.rs:38:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                                                                     ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:47:1\n+  --> $DIR/ub-ref-ptr.rs:42:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n@@ -106,7 +93,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:50:1\n+  --> $DIR/ub-ref-ptr.rs:45:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n@@ -117,13 +104,13 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:53:41\n+  --> $DIR/ub-ref-ptr.rs:48:41\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:57:1\n+  --> $DIR/ub-ref-ptr.rs:52:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a function pointer\n@@ -134,13 +121,13 @@ LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:59:38\n+  --> $DIR/ub-ref-ptr.rs:54:38\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:62:1\n+  --> $DIR/ub-ref-ptr.rs:57:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0xd[noalloc], but expected a function pointer\n@@ -151,7 +138,7 @@ LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:64:1\n+  --> $DIR/ub-ref-ptr.rs:59:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered alloc41, but expected a function pointer\n@@ -164,64 +151,3 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:31:1\n-   |\n-LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:39\n-   |\n-LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:35:38\n-   |\n-LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:86\n-   |\n-LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-ref-ptr.rs:41:85\n-   |\n-LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "92049d4c1792f988911290455e2acabb89513ec7", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -29,20 +29,15 @@ const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n // but that would fail to compile; so we ended up breaking user code that would\n // have worked fine had we not promoted.\n const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-//~| ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n+//~| ERROR evaluation of constant value failed\n \n const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-//~| ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n+//~| ERROR evaluation of constant value failed\n \n const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n //~^ ERROR it is undefined behavior to use this value"}, {"sha": "7d32322574162363c40abf83fc48afd6ebbf7ca0", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.32bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:15:1\n+  --> $DIR/ub-uninhabit.rs:14:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n@@ -8,7 +8,7 @@ LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:18:1\n+  --> $DIR/ub-uninhabit.rs:17:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type Bar\n@@ -19,7 +19,7 @@ LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:21:1\n+  --> $DIR/ub-uninhabit.rs:20:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar"}, {"sha": "2b7659f5d107e8ab9471aa0c48dca935591fc2ce", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.64bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:15:1\n+  --> $DIR/ub-uninhabit.rs:14:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n@@ -8,7 +8,7 @@ LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:18:1\n+  --> $DIR/ub-uninhabit.rs:17:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to uninhabited type Bar\n@@ -19,7 +19,7 @@ LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:21:1\n+  --> $DIR/ub-uninhabit.rs:20:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar"}, {"sha": "213f15b79174e95cafb8b799591d713cd792bed9", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // stderr-per-bitwidth\n-#![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n "}, {"sha": "ceac5987031a4fee96510a4d7eb5ac03cba10e9c", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n // stderr-per-bitwidth\n-#![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n+#![allow(invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n "}, {"sha": "c8b46608d6bac7b17f088012a0a1be0a2f6d6b5c", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 42, "deletions": 145, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:37:1\n+  --> $DIR/ub-wide-ptr.rs:36:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n@@ -10,7 +10,7 @@ LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:39:1\n+  --> $DIR/ub-wide-ptr.rs:38:1\n    |\n LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::MAX)) },);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid reference metadata: slice is bigger than largest supported object\n@@ -20,31 +20,26 @@ LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, us\n                \u257e\u2500allocN\u2500\u257c ff ff ff ff                         \u2502 \u257e\u2500\u2500\u257c....\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:42:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:41:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:46:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:44:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:49:1\n+  --> $DIR/ub-wide-ptr.rs:46:1\n    |\n LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n@@ -55,7 +50,7 @@ LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize:\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:53:1\n+  --> $DIR/ub-wide-ptr.rs:50:1\n    |\n LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized data in `str`\n@@ -66,7 +61,7 @@ LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit:\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:56:1\n+  --> $DIR/ub-wide-ptr.rs:53:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered uninitialized data in `str`\n@@ -77,13 +72,13 @@ LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUni\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:63:1\n+  --> $DIR/ub-wide-ptr.rs:60:1\n    |\n LL | const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:70:1\n+  --> $DIR/ub-wide-ptr.rs:67:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n@@ -94,7 +89,7 @@ LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:73:1\n+  --> $DIR/ub-wide-ptr.rs:70:1\n    |\n LL | const SLICE_TOO_LONG_OVERFLOW: &[u32] = unsafe { mem::transmute((&42u32, isize::MAX)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n@@ -104,19 +99,17 @@ LL | const SLICE_TOO_LONG_OVERFLOW: &[u32] = unsafe { mem::transmute((&42u32, is\n                \u257e\u2500allocN\u2500\u257c ff ff ff 7f                         \u2502 \u257e\u2500\u2500\u257c....\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:76:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:73:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:80:1\n+  --> $DIR/ub-wide-ptr.rs:76:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (going beyond the bounds of its allocation)\n@@ -126,19 +119,17 @@ LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999us\n                \u257e\u2500allocN\u2500\u257c e7 03 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:83:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:79:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:88:1\n+  --> $DIR/ub-wide-ptr.rs:83:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x03, but expected a boolean\n@@ -148,17 +139,14 @@ LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n                \u257e\u2500allocN\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:88:40\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:83:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:96:1\n+  --> $DIR/ub-wide-ptr.rs:90:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered 0x03, but expected a boolean\n@@ -168,17 +156,14 @@ LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3\n                \u257eallocN\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:96:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:90:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:101:1\n+  --> $DIR/ub-wide-ptr.rs:94:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.1[0]: encountered 0x03, but expected a boolean\n@@ -188,23 +173,20 @@ LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::tran\n                \u257eallocN\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:101:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:94:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:110:1\n+  --> $DIR/ub-wide-ptr.rs:102:1\n    |\n LL | const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:119:1\n+  --> $DIR/ub-wide-ptr.rs:111:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u8))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered allocN, but expected a vtable pointer\n@@ -215,7 +197,7 @@ LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:123:1\n+  --> $DIR/ub-wide-ptr.rs:115:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u64))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered allocN, but expected a vtable pointer\n@@ -226,7 +208,7 @@ LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:127:1\n+  --> $DIR/ub-wide-ptr.rs:119:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, 4usize))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered 0x4[noalloc], but expected a vtable pointer\n@@ -237,25 +219,25 @@ LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:130:57\n+  --> $DIR/ub-wide-ptr.rs:122:57\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:133:57\n+  --> $DIR/ub-wide-ptr.rs:125:57\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:136:56\n+  --> $DIR/ub-wide-ptr.rs:128:56\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:139:1\n+  --> $DIR/ub-wide-ptr.rs:131:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &[&42u8; 8]))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered allocN, but expected a vtable pointer\n@@ -266,7 +248,7 @@ LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::trans\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:144:1\n+  --> $DIR/ub-wide-ptr.rs:136:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>: encountered 0x03, but expected a boolean\n@@ -277,7 +259,7 @@ LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_,\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:149:1\n+  --> $DIR/ub-wide-ptr.rs:141:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a vtable pointer\n@@ -288,7 +270,7 @@ LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:151:1\n+  --> $DIR/ub-wide-ptr.rs:143:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered allocN, but expected a vtable pointer\n@@ -299,102 +281,17 @@ LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transm\n            }\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:157:5\n+  --> $DIR/ub-wide-ptr.rs:149:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:161:5\n+  --> $DIR/ub-wide-ptr.rs:153:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:42:1\n-   |\n-LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:46:1\n-   |\n-LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:76:1\n-   |\n-LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:83:1\n-   |\n-LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:88:40\n-   |\n-LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:96:42\n-   |\n-LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:101:42\n-   |\n-LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "70574d2dc3b5fa1d7d54dfc93d7f830e856d875e", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 42, "deletions": 145, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:37:1\n+  --> $DIR/ub-wide-ptr.rs:36:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n@@ -10,7 +10,7 @@ LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:39:1\n+  --> $DIR/ub-wide-ptr.rs:38:1\n    |\n LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::MAX)) },);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered invalid reference metadata: slice is bigger than largest supported object\n@@ -20,31 +20,26 @@ LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, us\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c ff ff ff ff ff ff ff ff \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:42:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:41:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:46:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:44:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:49:1\n+  --> $DIR/ub-wide-ptr.rs:46:1\n    |\n LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n@@ -55,7 +50,7 @@ LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize:\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:53:1\n+  --> $DIR/ub-wide-ptr.rs:50:1\n    |\n LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered uninitialized data in `str`\n@@ -66,7 +61,7 @@ LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit:\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:56:1\n+  --> $DIR/ub-wide-ptr.rs:53:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered uninitialized data in `str`\n@@ -77,13 +72,13 @@ LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUni\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:63:1\n+  --> $DIR/ub-wide-ptr.rs:60:1\n    |\n LL | const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:70:1\n+  --> $DIR/ub-wide-ptr.rs:67:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (going beyond the bounds of its allocation)\n@@ -94,7 +89,7 @@ LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:73:1\n+  --> $DIR/ub-wide-ptr.rs:70:1\n    |\n LL | const SLICE_TOO_LONG_OVERFLOW: &[u32] = unsafe { mem::transmute((&42u32, isize::MAX)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered invalid reference metadata: slice is bigger than largest supported object\n@@ -104,19 +99,17 @@ LL | const SLICE_TOO_LONG_OVERFLOW: &[u32] = unsafe { mem::transmute((&42u32, is\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c ff ff ff ff ff ff ff 7f \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:76:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:73:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:80:1\n+  --> $DIR/ub-wide-ptr.rs:76:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (going beyond the bounds of its allocation)\n@@ -126,19 +119,17 @@ LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999us\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c e7 03 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:83:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:79:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:88:1\n+  --> $DIR/ub-wide-ptr.rs:83:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x03, but expected a boolean\n@@ -148,17 +139,14 @@ LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:88:40\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:83:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:96:1\n+  --> $DIR/ub-wide-ptr.rs:90:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.0: encountered 0x03, but expected a boolean\n@@ -168,17 +156,14 @@ LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:96:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:90:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:101:1\n+  --> $DIR/ub-wide-ptr.rs:94:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.1[0]: encountered 0x03, but expected a boolean\n@@ -188,23 +173,20 @@ LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::tran\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:101:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-wide-ptr.rs:94:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:110:1\n+  --> $DIR/ub-wide-ptr.rs:102:1\n    |\n LL | const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:119:1\n+  --> $DIR/ub-wide-ptr.rs:111:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u8))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered allocN, but expected a vtable pointer\n@@ -215,7 +197,7 @@ LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:123:1\n+  --> $DIR/ub-wide-ptr.rs:115:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u64))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered allocN, but expected a vtable pointer\n@@ -226,7 +208,7 @@ LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:127:1\n+  --> $DIR/ub-wide-ptr.rs:119:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, 4usize))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered 0x4[noalloc], but expected a vtable pointer\n@@ -237,25 +219,25 @@ LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:130:57\n+  --> $DIR/ub-wide-ptr.rs:122:57\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:133:57\n+  --> $DIR/ub-wide-ptr.rs:125:57\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:136:56\n+  --> $DIR/ub-wide-ptr.rs:128:56\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:139:1\n+  --> $DIR/ub-wide-ptr.rs:131:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &[&42u8; 8]))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered allocN, but expected a vtable pointer\n@@ -266,7 +248,7 @@ LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::trans\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:144:1\n+  --> $DIR/ub-wide-ptr.rs:136:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>: encountered 0x03, but expected a boolean\n@@ -277,7 +259,7 @@ LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_,\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:149:1\n+  --> $DIR/ub-wide-ptr.rs:141:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a vtable pointer\n@@ -288,7 +270,7 @@ LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:151:1\n+  --> $DIR/ub-wide-ptr.rs:143:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered allocN, but expected a vtable pointer\n@@ -299,102 +281,17 @@ LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transm\n            }\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:157:5\n+  --> $DIR/ub-wide-ptr.rs:149:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:161:5\n+  --> $DIR/ub-wide-ptr.rs:153:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:42:1\n-   |\n-LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:46:1\n-   |\n-LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:76:1\n-   |\n-LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:83:1\n-   |\n-LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:88:40\n-   |\n-LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:96:42\n-   |\n-LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ub-wide-ptr.rs:101:42\n-   |\n-LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "65f6f023528d036712906b98b98406f350a590aa", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,8 +9,7 @@ use std::mem;\n // normalize-stderr-test \"size \\d+\" -> \"size N\"\n \n /// A newtype wrapper to prevent MIR generation from inserting reborrows that would affect the error\n-/// message. Use this whenever the message is \"any use of this value will cause an error\" instead of\n-/// \"it is undefined behavior to use this value\".\n+/// message.\n #[repr(transparent)]\n struct W<T>(T);\n \n@@ -40,12 +39,10 @@ const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::\n //~^ ERROR it is undefined behavior to use this value\n // bad str\n const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n // bad str in user-defined unsized type\n const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n //~^ ERROR it is undefined behavior to use this value\n \n@@ -74,34 +71,29 @@ const SLICE_TOO_LONG_OVERFLOW: &[u32] = unsafe { mem::transmute((&42u32, isize::\n //~^ ERROR it is undefined behavior to use this value\n // bad slice: length not an int\n const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n // bad slice box: length too big\n const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n //~^ ERROR it is undefined behavior to use this value\n // bad slice box: length not an int\n const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // bad data *inside* the slice\n const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n //~^ ERROR it is undefined behavior to use this value\n-//~| ERROR any use of this value will cause an error\n-//~| WARNING this was previously accepted\n+//~| ERROR evaluation of constant value failed\n \n // good MySliceBool\n const MYSLICE_GOOD: &MySliceBool = &MySlice(true, [false]);\n // bad: sized field is not okay\n const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n //~^ ERROR it is undefined behavior to use this value\n-//~| ERROR any use of this value will cause an error\n-//~| WARNING this was previously accepted\n+//~| ERROR evaluation of constant value failed\n // bad: unsized part is not okay\n const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n //~^ ERROR it is undefined behavior to use this value\n-//~| ERROR any use of this value will cause an error\n-//~| WARNING this was previously accepted\n+//~| ERROR evaluation of constant value failed\n \n // # raw slice\n const RAW_SLICE_VALID: *const [u8] = unsafe { mem::transmute((&42u8, 1usize)) }; // ok"}, {"sha": "e5c8f88be98a796432dd177089232f05ec80c9a6", "filename": "src/test/ui/consts/const-eval/union-ub.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:33:1\n+  --> $DIR/union-ub.rs:32:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x2a, but expected a boolean\n@@ -10,7 +10,7 @@ LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/union-ub.rs:35:36\n+  --> $DIR/union-ub.rs:34:36\n    |\n LL | const UNINIT_BOOL: bool = unsafe { DummyUnion { unit: () }.bool};\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory"}, {"sha": "e5c8f88be98a796432dd177089232f05ec80c9a6", "filename": "src/test/ui/consts/const-eval/union-ub.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:33:1\n+  --> $DIR/union-ub.rs:32:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0x2a, but expected a boolean\n@@ -10,7 +10,7 @@ LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/union-ub.rs:35:36\n+  --> $DIR/union-ub.rs:34:36\n    |\n LL | const UNINIT_BOOL: bool = unsafe { DummyUnion { unit: () }.bool};\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory"}, {"sha": "043870c9c25dcd54be93e9e26a93d16b8347a6ab", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // stderr-per-bitwidth\n-#![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n #[repr(C)]\n union DummyUnion {"}, {"sha": "18894c45fd822cdd6f39891d183cba329c8ed095", "filename": "src/test/ui/consts/const-eval/union_promotion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,3 @@\n-#![allow(const_err)]\n-\n #[repr(C)]\n union Foo {\n     a: &'static u32,"}, {"sha": "70808c520d3f9748ed7e4683eedd308816ebc41c", "filename": "src/test/ui/consts/const-eval/union_promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/union_promotion.rs:10:29\n+  --> $DIR/union_promotion.rs:8:29\n    |\n LL |       let x: &'static bool = &unsafe {\n    |  ____________-------------____^"}, {"sha": "0d2776bc2e3a6428bb9e41a566384427379e5996", "filename": "src/test/ui/consts/const-eval/unused-broken-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -3,7 +3,6 @@\n // compile-flags: --emit=dep-info,metadata\n \n const FOO: i32 = [][0];\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "fbb10feb76b161195940a7a724a356971136a97d", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,9 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/unused-broken-const.rs:5:18\n    |\n LL | const FOO: i32 = [][0];\n-   | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                  ^^^^^ index out of bounds: the length is 0 but the index is 0\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/unused-broken-const.rs:5:18\n-   |\n-LL | const FOO: i32 = [][0];\n-   | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "5f47d1c4f5c3174746d9c736af8939d4ddc4a803", "filename": "src/test/ui/consts/const-eval/valid-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n // Some constants that *are* valid\n-#![deny(const_err)]\n \n use std::mem;\n use std::ptr::NonNull;"}, {"sha": "63639729a2a910b3e32cd51272c73cd89eaeb440", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -20,10 +20,10 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n-   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:20:33\n+   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:19:33\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:23:1\n+  --> $DIR/validate_uninhabited_zsts.rs:21:1\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n@@ -32,7 +32,7 @@ LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `empty::Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:23:42\n+  --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "63639729a2a910b3e32cd51272c73cd89eaeb440", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -20,10 +20,10 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n-   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:20:33\n+   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:19:33\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:23:1\n+  --> $DIR/validate_uninhabited_zsts.rs:21:1\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n@@ -32,7 +32,7 @@ LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `empty::Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:23:42\n+  --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c0b32621505756b0693d6780ce8e47233d563e7b", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -16,10 +16,8 @@ pub mod empty {\n     pub struct Empty(Void);\n }\n \n-#[warn(const_err)]\n const FOO: [empty::Empty; 3] = [foo(); 3];\n \n-#[warn(const_err)]\n const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n //~^ ERROR it is undefined behavior to use this value\n //~| WARN the type `empty::Empty` does not permit zero-initialization"}, {"sha": "5bd84330bb79f64328f83492779d8984be354005", "filename": "src/test/ui/consts/const-external-macro-const-err.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,6 +9,5 @@ extern crate external_macro;\n use external_macro::static_assert;\n \n fn main() {\n-    static_assert!(2 + 2 == 5); //~ ERROR\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    static_assert!(2 + 2 == 5); //~ ERROR constant\n }"}, {"sha": "81f6c09ffb86af13b40509cd3fb67ee209cbb86d", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,25 +1,11 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-external-macro-const-err.rs:12:5\n    |\n LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-external-macro-const-err.rs:12:5\n-   |\n-LL |     static_assert!(2 + 2 == 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "5bf54fdbb3fd69f2c6cbbb766c94916703c51797", "filename": "src/test/ui/consts/const-float-bits-reject-conv.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -28,22 +28,18 @@ fn f32() {\n     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n \n     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARNING this was previously accepted\n+    //~^ ERROR evaluation of constant value failed\n     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARNING this was previously accepted\n+    //~^ ERROR evaluation of constant value failed\n \n     // LLVM does not guarantee that loads and stores of NaNs preserve their exact bit pattern.\n     // In practice, this seems to only cause a problem on x86, since the most widely used calling\n     // convention mandates that floating point values are returned on the x87 FPU stack. See #73328.\n     if !cfg!(target_arch = \"x86\") {\n         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-        //~^ ERROR any use of this value will cause an error\n-        //~| WARNING this was previously accepted\n+        //~^ ERROR evaluation of constant value failed\n         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-        //~^ ERROR any use of this value will cause an error\n-        //~| WARNING this was previously accepted\n+        //~^ ERROR evaluation of constant value failed\n     }\n }\n \n@@ -55,20 +51,16 @@ fn f64() {\n     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n \n     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARNING this was previously accepted\n+    //~^ ERROR evaluation of constant value failed\n     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARNING this was previously accepted\n+    //~^ ERROR evaluation of constant value failed\n \n     // See comment above.\n     if !cfg!(target_arch = \"x86\") {\n         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-        //~^ ERROR any use of this value will cause an error\n-        //~| WARNING this was previously accepted\n+        //~^ ERROR evaluation of constant value failed\n         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-        //~^ ERROR any use of this value will cause an error\n-        //~| WARNING this was previously accepted\n+        //~^ ERROR evaluation of constant value failed\n     }\n }\n "}, {"sha": "b3575f64153ae43965256d3f66502ab5a0c582aa", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 19, "deletions": 180, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -36,54 +36,29 @@ LL |     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-float-bits-reject-conv.rs:30:34\n    |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:33:34\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-float-bits-reject-conv.rs:32:34\n    |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:41:38\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-float-bits-reject-conv.rs:39:38\n    |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:44:38\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-float-bits-reject-conv.rs:41:38\n    |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n@@ -97,10 +72,10 @@ LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n    |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits` at $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:54:30\n+  ::: $DIR/const-float-bits-reject-conv.rs:50:30\n    |\n LL |     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n-   |                              ------------------ inside `f64::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:54:30\n+   |                              ------------------ inside `f64::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:50:30\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -116,173 +91,37 @@ LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n    |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits` at $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:55:30\n+  ::: $DIR/const-float-bits-reject-conv.rs:51:30\n    |\n LL |     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n-   |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:55:30\n+   |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:51:30\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:57:34\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-float-bits-reject-conv.rs:53:34\n    |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:60:34\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-float-bits-reject-conv.rs:55:34\n    |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:66:38\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-float-bits-reject-conv.rs:60:38\n    |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:69:38\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-float-bits-reject-conv.rs:62:38\n    |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:30:34\n-   |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n-LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:33:34\n-   |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n-LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:41:38\n-   |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n-LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:44:38\n-   |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n-LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:57:34\n-   |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n-LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:60:34\n-   |\n-LL |             const _: () = assert!($a);\n-   |             -----------\n-...\n-LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:66:38\n-   |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n-LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-float-bits-reject-conv.rs:69:38\n-   |\n-LL |             const _: () = assert!($a == $b);\n-   |             -----------\n-...\n-LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "6446e94513cd7f8a1c269bf82bc98ffe17135d5e", "filename": "src/test/ui/consts/const-int-arithmetic-overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -O\n-#![allow(const_err)]\n \n // Make sure arithmetic unary/binary ops actually return the right result, even when overflowing.\n // We have to put them in `const fn` and turn on optimizations to avoid overflow checks."}, {"sha": "478761aef2faa79c92ae2b8a5b8537f58ac6488d", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,8 +5,7 @@\n const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR constant\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();"}, {"sha": "1416e695e4c6ee5efba35147fc54162802693aa7", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,30 +1,15 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-separate-spans.rs:7:20\n    |\n LL | const LEN: usize = ONE - TWO;\n-   | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                    ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-len-underflow-separate-spans.rs:12:17\n+  --> $DIR/const-len-underflow-separate-spans.rs:11:17\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n    |                 ^^^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-len-underflow-separate-spans.rs:7:20\n-   |\n-LL | const LEN: usize = ONE - TWO;\n-   | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "18bcdfb0130a9b3f88a807e44ed6deadae0ae406", "filename": "src/test/ui/consts/const-negation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-negation.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(overflowing_literals)]\n \n-#[deny(const_err)]\n-\n fn main() {\n     #[cfg(target_pointer_width = \"32\")]\n     const I: isize = -2147483648isize;"}, {"sha": "21426205955be0320855c54db072ddb1d7c881ad", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -2,8 +2,7 @@\n \n #![allow(dead_code)]\n \n-const TEST: u8 = MY_STATIC; //~ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+const TEST: u8 = MY_STATIC; //~ ERROR constant\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "793da628587708c289a85c9cc1669a0320f16fdd", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,12 +1,8 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-prop-read-static-in-const.rs:5:18\n    |\n LL | const TEST: u8 = MY_STATIC;\n-   | --------------   ^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                  ^^^^^^^^^ constant accesses static\n \n warning: skipping const checks\n    |\n@@ -18,14 +14,4 @@ LL | const TEST: u8 = MY_STATIC;\n \n error: aborting due to previous error; 1 warning emitted\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-prop-read-static-in-const.rs:5:18\n-   |\n-LL | const TEST: u8 = MY_STATIC;\n-   | --------------   ^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4df3a793b4c3814de5b8b60413f9642d937606a2", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -8,9 +8,7 @@ extern \"C\" {\n     type Opaque;\n }\n \n-const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR constant\n+const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR constant\n \n fn main() {}"}, {"sha": "ad2de0f4d312935b6309f8d685a1ed9a3033b354", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,43 +1,15 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n    |\n LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n-   | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:12:32\n    |\n LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n-   | -------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n \n error: aborting due to 2 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n-   |\n-LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n-   | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n-   |\n-LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n-   | -------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "429b9782132144fe4b0ec9886eb965874a3842ac", "filename": "src/test/ui/consts/const-slice-oob.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,10 +1,7 @@\n-#[deny(const_err)]\n-\n const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n //~^ index out of bounds: the length is 3 but the index is 5\n-//~| ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = BAR;"}, {"sha": "746883a79a65b5d43ecbdf45f4dba05a084afb98", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,9 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const-slice-oob.rs:4:18\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-slice-oob.rs:2:18\n    |\n LL | const BAR: u32 = FOO[5];\n-   | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                  ^^^^^^ index out of bounds: the length is 3 but the index is 5\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-slice-oob.rs:4:18\n-   |\n-LL | const BAR: u32 = FOO[5];\n-   | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "3ce038c1d3f772e86da1665b571c702d8ac5c890", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -4,8 +4,7 @@\n const X: usize = {\n     let mut x = 0;\n     while x != 1000 {\n-        //~^ ERROR any use of this value will cause an error\n-        //~| WARN this was previously accepted by the compiler but is being phased out\n+        //~^ ERROR evaluation of constant value failed\n         x += 1;\n     }\n "}, {"sha": "850aebdfb2a6df7051bd24946f4e1492f0c4a54d", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,29 +1,9 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_eval_limit_reached.rs:6:11\n    |\n-LL | const X: usize = {\n-   | --------------\n-LL |     let mut x = 0;\n LL |     while x != 1000 {\n    |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const_eval_limit_reached.rs:6:11\n-   |\n-LL | const X: usize = {\n-   | --------------\n-LL |     let mut x = 0;\n-LL |     while x != 1000 {\n-   |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "d591bfc731ce43bd39fe144da7f005b4df476fcd", "filename": "src/test/ui/consts/dangling-alloc-id-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // https://github.com/rust-lang/rust/issues/55223\n-#![allow(const_err)]\n \n union Foo<'a> {\n     y: &'a (),"}, {"sha": "0a1cca4ca4d472396e8df788148deaedd6b51f31", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error: encountered dangling pointer in final constant\n-  --> $DIR/dangling-alloc-id-ice.rs:9:1\n+  --> $DIR/dangling-alloc-id-ice.rs:8:1\n    |\n LL | const FOO: &() = {\n    | ^^^^^^^^^^^^^^"}, {"sha": "159cdf257b19c8d91b6646ff4839d6d1ba722f01", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -13,15 +13,13 @@ const INVALID_BOOL: () = unsafe {\n \n const INVALID_PTR_IN_INT: () = unsafe {\n     let _x: usize = transmute(&3u8);\n-    //[with_flag]~^ ERROR: any use of this value will cause an error\n-    //[with_flag]~| previously accepted\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n };\n \n const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = unsafe {\n     let x: &[u8] = &[0; 32];\n     let _x: (usize, usize) = transmute(x);\n-    //[with_flag]~^ ERROR: any use of this value will cause an error\n-    //[with_flag]~| previously accepted\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n };\n \n const UNALIGNED_PTR: () = unsafe {\n@@ -31,8 +29,7 @@ const UNALIGNED_PTR: () = unsafe {\n };\n \n const UNALIGNED_READ: () = {\n-    INNER; //[with_flag]~ERROR any use of this value will cause an error\n-    //[with_flag]~| previously accepted\n+    INNER; //[with_flag]~ERROR evaluation of constant value failed\n     // There is an error here but its span is in the standard library so we cannot match it...\n     // so we have this in a *nested* const, such that the *outer* const fails to use it.\n     const INNER: () = unsafe {"}, {"sha": "3e119582291d35d572a8695fe9fc82874e0e1116", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 8, "deletions": 67, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -4,36 +4,26 @@ error[E0080]: evaluation of constant value failed\n LL |     let _x: bool = transmute(3u8);\n    |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/detect-extra-ub.rs:15:21\n    |\n-LL | const INVALID_PTR_IN_INT: () = unsafe {\n-   | ----------------------------\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/detect-extra-ub.rs:22:30\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:21:30\n    |\n-LL | const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = unsafe {\n-   | ------------------------------------------\n-LL |     let x: &[u8] = &[0; 32];\n LL |     let _x: (usize, usize) = transmute(x);\n    |                              ^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:28:20\n+  --> $DIR/detect-extra-ub.rs:26:20\n    |\n LL |     let _x: &u32 = transmute(&[0u8; 4]);\n    |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)\n@@ -52,66 +42,17 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/detect-extra-ub.rs:41:9\n+  ::: $DIR/detect-extra-ub.rs:38:9\n    |\n LL |         ptr.read();\n-   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:41:9\n+   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:38:9\n \n-error: any use of this value will cause an error\n-  --> $DIR/detect-extra-ub.rs:34:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:32:5\n    |\n-LL | const UNALIGNED_READ: () = {\n-   | ------------------------\n LL |     INNER;\n    |     ^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/detect-extra-ub.rs:15:21\n-   |\n-LL | const INVALID_PTR_IN_INT: () = unsafe {\n-   | ----------------------------\n-LL |     let _x: usize = transmute(&3u8);\n-   |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/detect-extra-ub.rs:22:30\n-   |\n-LL | const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = unsafe {\n-   | ------------------------------------------\n-LL |     let x: &[u8] = &[0; 32];\n-LL |     let _x: (usize, usize) = transmute(x);\n-   |                              ^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/detect-extra-ub.rs:34:5\n-   |\n-LL | const UNALIGNED_READ: () = {\n-   | ------------------------\n-LL |     INNER;\n-   |     ^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "bad07989e40350e3736e97c55dec6983d9375188", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,27 +9,12 @@ LL | fn main() {\n                \u257e\u2500alloc7\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error: erroneous constant used\n+error[E0080]: erroneous constant used\n   --> $DIR/invalid-union.rs:42:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n-   |\n-LL |     let _: &'static _ = &C;\n-   |                         ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "a209f0038ccaff34cc2f6b72ad1823a4a243b0ad", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,27 +9,12 @@ LL | fn main() {\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error: erroneous constant used\n+error[E0080]: erroneous constant used\n   --> $DIR/invalid-union.rs:42:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n-   |\n-LL |     let _: &'static _ = &C;\n-   |                         ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "435d26d6e995e24f95cd82847f75e486e4592548", "filename": "src/test/ui/consts/invalid-union.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -40,5 +40,4 @@ const C: S = {\n \n fn main() { //~ ERROR it is undefined behavior to use this value\n     let _: &'static _ = &C; //~ ERROR erroneous constant used\n-    //~^ WARN this was previously accepted\n }"}, {"sha": "abeaf10f2b524088912b98bda8b1168167f0b39f", "filename": "src/test/ui/consts/issue-46553.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-46553.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-46553.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-46553.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![deny(const_err)]\n \n pub struct Data<T> {\n     function: fn() -> T,"}, {"sha": "df3e3bf902809c40875e6f274f5fcd15bf0ef4d8", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,6 @@\n const fn foo() { (||{})() }\n //~^ ERROR cannot call non-const closure\n-//~| ERROR erroneous constant\n-//~| WARN this was previously accepted\n+//~| ERROR erroneous constant used\n \n const fn bad(input: fn()) {\n     input()"}, {"sha": "c5b2c57fbee3d58008d8141bf092750b889e5ed7", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -8,32 +8,18 @@ LL | const fn foo() { (||{})() }\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error: function pointer calls are not allowed in constant functions\n-  --> $DIR/issue-56164.rs:7:5\n+  --> $DIR/issue-56164.rs:6:5\n    |\n LL |     input()\n    |     ^^^^^^^\n \n-error: erroneous constant used\n+error[E0080]: erroneous constant used\n   --> $DIR/issue-56164.rs:1:18\n    |\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+Some errors have detailed explanations: E0015, E0080.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "1ff250be1b02ea35cb52ba80d5be2465ec63a0c4", "filename": "src/test/ui/consts/issue-66693.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -10,8 +10,7 @@ static _FOO: () = panic!(true);\n const fn _foo() {\n     panic!(&1);\n     //~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n-    //~| ERROR: erroneous constant used [const_err]\n-    //~| WARNING: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| ERROR: erroneous constant used\n }\n \n // ensure that conforming panics don't cause an error"}, {"sha": "911374f507ec8e7e820f20c4f45d1d951e8c9849", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -22,26 +22,12 @@ LL |     panic!(&1);\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: erroneous constant used\n+error[E0080]: erroneous constant used\n   --> $DIR/issue-66693.rs:11:12\n    |\n LL |     panic!(&1);\n    |            ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 4 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/issue-66693.rs:11:12\n-   |\n-LL |     panic!(&1);\n-   |            ^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "3872e3d4f0decb2cdd1d4ca13e09d390a90ff7ab", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,47 +1,25 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         unable to copy parts of a pointer from memory at ALLOC\n    |         inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `C` at $DIR/issue-miri-1910.rs:8:5\n    |\n-  ::: $DIR/issue-miri-1910.rs:5:1\n+  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL | const C: () = unsafe {\n-   | -----------\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: aborting due to previous error\n-\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+  ::: $DIR/issue-miri-1910.rs:8:5\n    |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         unable to copy parts of a pointer from memory at ALLOC\n-   |         inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `C` at $DIR/issue-miri-1910.rs:8:5\n-   |\n-  ::: $DIR/issue-miri-1910.rs:5:1\n+LL |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n+   |     ------------------------------------------------------------------- inside `C` at $DIR/issue-miri-1910.rs:8:5\n    |\n-LL | const C: () = unsafe {\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "205f7183b75e9a7c727b2040f0aeb5fd17748ef5", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -2,7 +2,6 @@\n // compile-flags: -Z unleash-the-miri-inside-of-you\n \n #![feature(const_extern_fn)]\n-#![allow(const_err)]\n \n const extern \"C\" fn c_fn() {}\n "}, {"sha": "840d698ebbfaf7b044ee486e2332a324010daede", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,19 +1,19 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/abi-mismatch.rs:10:5\n+  --> $DIR/abi-mismatch.rs:9:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n    |     calling a function with calling convention C using calling convention Rust\n-   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:10:5\n+   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:9:5\n ...\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:16:18\n+   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:15:18\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/abi-mismatch.rs:10:5\n+  --> $DIR/abi-mismatch.rs:9:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^"}, {"sha": "76ed667a514ff968082e49c14e9d53d7698a61c5", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,6 @@\n // build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n-#![allow(const_err)]\n-\n // a test demonstrating why we do need to run static const qualification on associated constants\n // instead of just checking the final constant\n "}, {"sha": "519bd0748e2b7df78b5e24e22f5996715d7a4a1a", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,22 +1,4 @@\n-error[E0080]: erroneous constant used\n-  --> $DIR/assoc_const.rs:31:13\n-   |\n-LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: skipping const checks\n-   |\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/assoc_const.rs:14:20\n-   |\n-LL |     const F: u32 = (U::X, 42).1;\n-   |                    ^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n+error[E0080]: evaluation of `<std::string::String as Bar<std::vec::Vec<u32>, std::string::String>>::F` failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n@@ -25,18 +7,26 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | calling non-const function `<Vec<u32> as Drop>::drop`\n    | inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    | inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   | inside `<String as Bar<Vec<u32>, String>>::F` at $DIR/assoc_const.rs:14:31\n    |\n-  ::: $DIR/assoc_const.rs:14:5\n+  ::: $DIR/assoc_const.rs:12:31\n    |\n LL |     const F: u32 = (U::X, 42).1;\n-   |     ------------\n+   |                               - inside `<String as Bar<Vec<u32>, String>>::F` at $DIR/assoc_const.rs:12:31\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/assoc_const.rs:29:13\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/assoc_const.rs:4:10\n+LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: skipping const checks\n    |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/assoc_const.rs:12:20\n+   |\n+LL |     const F: u32 = (U::X, 42).1;\n+   |                    ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8377141ea5e12e809155d7542a445165d7b7a769", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,15 +1,13 @@\n // build-fail\n \n-#![allow(const_err)]\n-\n // a test demonstrating that const qualification cannot prevent monomorphization time errors\n \n trait Foo {\n     const X: u32;\n }\n \n trait Bar<U: Foo> {\n-    const F: u32 = 100 / U::X;\n+    const F: u32 = 100 / U::X; //~ ERROR evaluation of `<std::string::String as Bar<std::string::String>>::F` failed\n }\n \n impl Foo for () {"}, {"sha": "2bf753c2ba3df46c8f19db44cf18c81fe1c322fd", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,24 +1,15 @@\n+error[E0080]: evaluation of `<std::string::String as Bar<std::string::String>>::F` failed\n+  --> $DIR/assoc_const_2.rs:10:20\n+   |\n+LL |     const F: u32 = 100 / U::X;\n+   |                    ^^^^^^^^^^ attempt to divide `100_u32` by zero\n+\n error[E0080]: erroneous constant used\n-  --> $DIR/assoc_const_2.rs:29:13\n+  --> $DIR/assoc_const_2.rs:27:13\n    |\n LL |     let y = <String as Bar<String>>::F;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/assoc_const_2.rs:12:20\n-   |\n-LL |     const F: u32 = 100 / U::X;\n-   |     ------------   ^^^^^^^^^^ attempt to divide `100_u32` by zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/assoc_const_2.rs:3:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-"}, {"sha": "c2a260aa13c298900c3b6e367dc897313a93f6f1", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(box_syntax)]\n-#![allow(const_err)]\n \n use std::mem::ManuallyDrop;\n "}, {"sha": "bc5d4a2576eb8fee68976c3e8cab5e784e53a011", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,28 +1,28 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/box.rs:10:11\n+  --> $DIR/box.rs:9:11\n    |\n LL |     &mut *(box 0)\n    |           ^^^^^^^ calling non-const function `alloc::alloc::exchange_malloc`\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/box.rs:10:11\n+  --> $DIR/box.rs:9:11\n    |\n LL |     &mut *(box 0)\n    |           ^^^^^^^\n help: skipping check for `const_mut_refs` feature\n-  --> $DIR/box.rs:10:16\n+  --> $DIR/box.rs:9:16\n    |\n LL |     &mut *(box 0)\n    |                ^\n help: skipping check for `const_mut_refs` feature\n-  --> $DIR/box.rs:10:5\n+  --> $DIR/box.rs:9:5\n    |\n LL |     &mut *(box 0)\n    |     ^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/box.rs:10:5\n+  --> $DIR/box.rs:9:5\n    |\n LL |     &mut *(box 0)\n    |     ^^^^^^^^^^^^^"}, {"sha": "a6f467b9ef4893c68f3c6e7ca2b8df2e670ca392", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.32bit.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -0,0 +1,81 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static.rs:9:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static.rs:14:14\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static.rs:18:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^ constant accesses static\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:20:1\n+   |\n+LL | const REF_INTERIOR_MUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               \u257e\u2500alloc4\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:27:1\n+   |\n+LL | const READ_IMMUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               \u257e\u2500alloc5\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+           }\n+\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:9:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:9:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:14:17\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |                 ^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:18:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:18:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:23:18\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |                  ^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:30:6\n+   |\n+LL |     &FOO\n+   |      ^^^\n+\n+error: aborting due to 5 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "cfaf31a6e0c43a8c3bd3f65b53322c0f13f62a74", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.64bit.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -0,0 +1,81 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static.rs:9:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static.rs:14:14\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static.rs:18:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^ constant accesses static\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:20:1\n+   |\n+LL | const REF_INTERIOR_MUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:27:1\n+   |\n+LL | const READ_IMMUT: &usize = {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:9:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:9:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:14:17\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |                 ^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:18:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:18:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:23:18\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |                  ^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:30:6\n+   |\n+LL |     &FOO\n+   |      ^^^\n+\n+error: aborting due to 5 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "7ed5a48d996c684b4f6e1d615d21e80bd844ba5a", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,31 +1,33 @@\n-// build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![allow(const_err)]\n+// stderr-per-bitwidth\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n \n-// These fail during CTFE (as they read a static), so they only cause an error\n-// when *using* the const.\n-\n const MUTATE_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n-    FOO.fetch_add(1, Ordering::Relaxed)\n+    FOO.fetch_add(1, Ordering::Relaxed) //~ERROR evaluation of constant value failed\n };\n \n const READ_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n-    unsafe { *(&FOO as *const _ as *const usize) }\n+    unsafe { *(&FOO as *const _ as *const usize) } //~ERROR evaluation of constant value failed\n };\n \n static mut MUTABLE: u32 = 0;\n-const READ_MUT: u32 = unsafe { MUTABLE };\n+const READ_MUT: u32 = unsafe { MUTABLE }; //~ERROR evaluation of constant value failed\n+\n+const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n+//~| encountered a reference pointing to a static variable\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    unsafe { &*(&FOO as *const _ as *const usize) }\n+};\n+\n+// ok some day perhaps\n+const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n+//~| encountered a reference pointing to a static variable\n+    static FOO: usize = 0;\n+    &FOO\n+};\n \n-fn main() {\n-    MUTATE_INTERIOR_MUT;\n-    //~^ ERROR: erroneous constant used\n-    READ_INTERIOR_MUT;\n-    //~^ ERROR: erroneous constant used\n-    READ_MUT;\n-    //~^ ERROR: erroneous constant used\n-}\n+fn main() {}"}, {"sha": "03359e62264e59be69cfd0878f46e4c9716a282e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,100 +0,0 @@\n-error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:25:5\n-   |\n-LL |     MUTATE_INTERIOR_MUT;\n-   |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:27:5\n-   |\n-LL |     READ_INTERIOR_MUT;\n-   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:29:5\n-   |\n-LL |     READ_MUT;\n-   |     ^^^^^^^^ referenced constant has errors\n-\n-warning: skipping const checks\n-   |\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static.rs:13:5\n-   |\n-LL |     FOO.fetch_add(1, Ordering::Relaxed)\n-   |     ^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static.rs:13:5\n-   |\n-LL |     FOO.fetch_add(1, Ordering::Relaxed)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static.rs:18:17\n-   |\n-LL |     unsafe { *(&FOO as *const _ as *const usize) }\n-   |                 ^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static.rs:22:32\n-   |\n-LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   |                                ^^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static.rs:22:32\n-   |\n-LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   |                                ^^^^^^^\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static.rs:13:5\n-   |\n-LL | const MUTATE_INTERIOR_MUT: usize = {\n-   | --------------------------------\n-LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL |     FOO.fetch_add(1, Ordering::Relaxed)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static.rs:3:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static.rs:18:14\n-   |\n-LL | const READ_INTERIOR_MUT: usize = {\n-   | ------------------------------\n-LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL |     unsafe { *(&FOO as *const _ as *const usize) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static.rs:3:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static.rs:22:32\n-   |\n-LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   | -------------------            ^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static.rs:3:10\n-   |\n-LL | #![allow(const_err)]\n-   |          ^^^^^^^^^\n-"}, {"sha": "14173ac9f69b4aff5e376db4e1a4f6892c71baf2", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.32bit.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,38 +0,0 @@\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:11:1\n-   |\n-LL | const REF_INTERIOR_MUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 4, align: 4) {\n-               \u257e\u2500alloc1\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n-           }\n-\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:18:1\n-   |\n-LL | const READ_IMMUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 4, align: 4) {\n-               \u257e\u2500alloc2\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n-           }\n-\n-warning: skipping const checks\n-   |\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:14:18\n-   |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |                  ^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:21:6\n-   |\n-LL |     &FOO\n-   |      ^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "e7e51a41856e2bbd3c7acf45bf76fe601081747e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.64bit.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,38 +0,0 @@\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:11:1\n-   |\n-LL | const REF_INTERIOR_MUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 8, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-           }\n-\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:18:1\n-   |\n-LL | const READ_IMMUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 8, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-           }\n-\n-warning: skipping const checks\n-   |\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:14:18\n-   |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |                  ^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:21:6\n-   |\n-LL |     &FOO\n-   |      ^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "8b8e262fb9dcaeb047941cae9a66f7aeabd7ce17", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,24 +0,0 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you\n-// stderr-per-bitwidth\n-#![allow(const_err)]\n-\n-use std::sync::atomic::AtomicUsize;\n-use std::sync::atomic::Ordering;\n-\n-// These only fail during validation (they do not use but just create a reference to a static),\n-// so they cause an immediate error when *defining* the const.\n-\n-const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n-//~| encountered a reference pointing to a static variable\n-    static FOO: AtomicUsize = AtomicUsize::new(0);\n-    unsafe { &*(&FOO as *const _ as *const usize) }\n-};\n-\n-// ok some day perhaps\n-const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n-//~| encountered a reference pointing to a static variable\n-    static FOO: usize = 0;\n-    &FOO\n-};\n-\n-fn main() {}"}, {"sha": "6df2fe3d03b9d01c2fc2b3ee0bb4860112baf273", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 25, "deletions": 79, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:10:1\n    |\n LL | const SLICE_MUT: &[u8; 1] = {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n@@ -10,13 +10,13 @@ LL | const SLICE_MUT: &[u8; 1] = {\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:15:1\n    |\n LL | const U8_MUT: &u8 = {\n    | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n@@ -27,166 +27,112 @@ LL | const U8_MUT: &u8 = {\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static_cross_crate.rs:22:15\n    |\n-LL | const U8_MUT2: &u8 = {\n-   | ------------------\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:54:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n-LL | const U8_MUT3: &u8 = {\n-   | ------------------\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:62:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:54:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:62:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:12:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:12:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:25:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:22:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors; 3 warnings emitted\n+error: aborting due to 12 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n-   |\n-LL | const U8_MUT2: &u8 = {\n-   | ------------------\n-LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n-   |\n-LL | const U8_MUT3: &u8 = {\n-   | ------------------\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-"}, {"sha": "8802f3adacae293d62607ca8931590efd62ad61e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 25, "deletions": 79, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:10:1\n    |\n LL | const SLICE_MUT: &[u8; 1] = {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n@@ -10,13 +10,13 @@ LL | const SLICE_MUT: &[u8; 1] = {\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:15:1\n    |\n LL | const U8_MUT: &u8 = {\n    | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n@@ -27,166 +27,112 @@ LL | const U8_MUT: &u8 = {\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static_cross_crate.rs:22:15\n    |\n-LL | const U8_MUT2: &u8 = {\n-   | ------------------\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:54:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n-LL | const U8_MUT3: &u8 = {\n-   | ------------------\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:62:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:54:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:62:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:12:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:12:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:25:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:22:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors; 3 warnings emitted\n+error: aborting due to 12 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n-   |\n-LL | const U8_MUT2: &u8 = {\n-   | ------------------\n-LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n-   |\n-LL | const U8_MUT3: &u8 = {\n-   | ------------------\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-"}, {"sha": "64b13ebb7601346bbaffdc22a0dfca6e161d2dc6", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // aux-build:static_cross_crate.rs\n // stderr-per-bitwidth\n-#![allow(const_err)]\n-\n #![feature(exclusive_range_pattern, half_open_range_patterns)]\n \n extern crate static_cross_crate;\n@@ -19,20 +17,16 @@ const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n     unsafe { &static_cross_crate::ZERO[0] }\n };\n \n-// Also test indirection that reads from other static. This causes a const_err.\n-#[warn(const_err)]\n+// Also test indirection that reads from other static.\n const U8_MUT2: &u8 = {\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-    //~^ WARN [const_err]\n+    //~^ ERROR evaluation of constant value failed\n     //~| constant accesses static\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n };\n-#[warn(const_err)]\n const U8_MUT3: &u8 = {\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-    //~^ WARN [const_err]\n+    //~^ ERROR evaluation of constant value failed\n     //~| constant accesses static\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n };\n \n pub fn test(x: &[u8; 1]) -> bool {"}, {"sha": "3942e7ef73433d12c4f682bf1347140d9331f642", "filename": "src/test/ui/consts/miri_unleashed/drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // error-pattern: calling non-const function `<Vec<i32> as Drop>::drop`\n-#![allow(const_err)]\n \n use std::mem::ManuallyDrop;\n "}, {"sha": "a3a502723d223d1399ad88dbe4f089eda6c4b99d", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,15 +7,15 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | calling non-const function `<Vec<i32> as Drop>::drop`\n    | inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/drop.rs:18:1\n+  ::: $DIR/drop.rs:17:1\n    |\n LL | };\n-   | - inside `TEST_BAD` at $DIR/drop.rs:18:1\n+   | - inside `TEST_BAD` at $DIR/drop.rs:17:1\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/drop.rs:17:9\n+  --> $DIR/drop.rs:16:9\n    |\n LL |     let _v: Vec<i32> = Vec::new();\n    |         ^^"}, {"sha": "c24d3338e6ab9d0fb8b671bb2696d045d429c7c6", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,3 @@\n-#![allow(const_err)]\n-\n // a test demonstrating why we do need to run static const qualification on associated constants\n // instead of just checking the final constant\n "}, {"sha": "45ed88b1bb078da7ecae8646ebca0f753c2069ff", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0493]: destructor of `(T, u32)` cannot be evaluated at compile-time\n-  --> $DIR/feature-gate-unleash_the_miri_inside_of_you.rs:11:20\n+  --> $DIR/feature-gate-unleash_the_miri_inside_of_you.rs:9:20\n    |\n LL |     const F: u32 = (U::X, 42).1;\n    |                    ^^^^^^^^^^ - value is dropped here"}, {"sha": "6fd52ceb24ca6a4283e975f38a6dcb2570c71c7c", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // only-x86_64\n-#![allow(const_err)]\n \n use std::arch::asm;\n "}, {"sha": "6317cd882678a6044deaef3e97a37d82830f192e", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/inline_asm.rs:11:14\n+  --> $DIR/inline_asm.rs:10:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^ inline assembly is not supported\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/inline_asm.rs:11:14\n+  --> $DIR/inline_asm.rs:10:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^"}, {"sha": "4e996464705f86d71f455c1fa0ae3a89b9312577", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![allow(const_err)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "3ed96701ab0ad7a1563f4ed17b5216c334390869", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,33 +1,33 @@\n error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n-  --> $DIR/mutable_references.rs:36:5\n+  --> $DIR/mutable_references.rs:35:5\n    |\n LL |     *OH_YES = 99;\n    |     ^^^^^^^^^^^^ cannot assign\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references.rs:9:26\n+  --> $DIR/mutable_references.rs:8:26\n    |\n LL | static FOO: &&mut u32 = &&mut 42;\n    |                          ^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references.rs:13:23\n+  --> $DIR/mutable_references.rs:12:23\n    |\n LL | static BAR: &mut () = &mut ();\n    |                       ^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references.rs:18:28\n+  --> $DIR/mutable_references.rs:17:28\n    |\n LL | static BOO: &mut Foo<()> = &mut Foo(());\n    |                            ^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references.rs:26:8\n+  --> $DIR/mutable_references.rs:25:8\n    |\n LL |     x: &UnsafeCell::new(42),\n    |        ^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references.rs:30:27\n+  --> $DIR/mutable_references.rs:29:27\n    |\n LL | static OH_YES: &mut i32 = &mut 42;\n    |                           ^^^^^^^"}, {"sha": "0ea1792409b8b4978bd770dab7f1bd0914ae3481", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.32bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:17:1\n+  --> $DIR/mutable_references_err.rs:15:1\n    |\n LL | const MUH: Meh = Meh {\n    | ^^^^^^^^^^^^^^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | const MUH: Meh = Meh {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:27:1\n+  --> $DIR/mutable_references_err.rs:25:1\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.x: encountered `UnsafeCell` in a `const`\n@@ -21,7 +21,7 @@ LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:31:1\n+  --> $DIR/mutable_references_err.rs:29:1\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference in a `const`\n@@ -34,17 +34,17 @@ LL | const BLUNT: &mut i32 = &mut 42;\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:18:8\n+  --> $DIR/mutable_references_err.rs:16:8\n    |\n LL |     x: &UnsafeCell::new(42),\n    |        ^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:27:27\n+  --> $DIR/mutable_references_err.rs:25:27\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:31:25\n+  --> $DIR/mutable_references_err.rs:29:25\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n    |                         ^^^^^^^"}, {"sha": "67959d25634a32b7acbb2a41bf059c9cf9cbe665", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:17:1\n+  --> $DIR/mutable_references_err.rs:15:1\n    |\n LL | const MUH: Meh = Meh {\n    | ^^^^^^^^^^^^^^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | const MUH: Meh = Meh {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:27:1\n+  --> $DIR/mutable_references_err.rs:25:1\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.x: encountered `UnsafeCell` in a `const`\n@@ -21,7 +21,7 @@ LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:31:1\n+  --> $DIR/mutable_references_err.rs:29:1\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference in a `const`\n@@ -34,17 +34,17 @@ LL | const BLUNT: &mut i32 = &mut 42;\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:18:8\n+  --> $DIR/mutable_references_err.rs:16:8\n    |\n LL |     x: &UnsafeCell::new(42),\n    |        ^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:27:27\n+  --> $DIR/mutable_references_err.rs:25:27\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:31:25\n+  --> $DIR/mutable_references_err.rs:29:25\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n    |                         ^^^^^^^"}, {"sha": "6399b122bb1fb5a788732fb8d45456ca9963c81d", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,6 @@\n // stderr-per-bitwidth\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n-#![allow(const_err)]\n-\n use std::cell::UnsafeCell;\n \n // this test ensures that our mutability story is sound"}, {"sha": "231f4af0a20459c35131c5b0f2ae6d5f45ddd7d6", "filename": "src/test/ui/consts/miri_unleashed/mutating_global.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![allow(const_err)]\n \n // Make sure we cannot mutate globals.\n "}, {"sha": "c8770c8d76ad02c471e38472a16ef8a27a4026c0", "filename": "src/test/ui/consts/miri_unleashed/mutating_global.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/mutating_global.rs:10:9\n+  --> $DIR/mutating_global.rs:9:9\n    |\n LL |         GLOBAL = 99\n    |         ^^^^^^^^^^^ modifying a static's initial value from another static's initializer"}, {"sha": "44ab60dcabca6cec6521d834ceedbf87835e884a", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n-#![allow(const_err)]\n-\n // A test demonstrating that we prevent calling non-const fn during CTFE.\n \n fn foo() {}"}, {"sha": "57836f7966df2031f74946aa36da57417ed65286", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/non_const_fn.rs:9:16\n+  --> $DIR/non_const_fn.rs:7:16\n    |\n LL | static C: () = foo();\n    |                ^^^^^ calling non-const function `foo`\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/non_const_fn.rs:9:16\n+  --> $DIR/non_const_fn.rs:7:16\n    |\n LL | static C: () = foo();\n    |                ^^^^^"}, {"sha": "4d12960b86ba321151a75077658991b625e2ab40", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(core_intrinsics)]\n-#![allow(const_err)]\n \n // During CTFE, we prevent pointer-to-int casts.\n // Pointer comparisons are prevented in the trait system."}, {"sha": "30fd3a55e85be2716fcd8f34166e112f107fdf16", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:9:13\n+  --> $DIR/ptr_arith.rs:8:13\n    |\n LL |     let x = &0 as *const _ as usize;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ exposing pointers is not possible at compile-time\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:17:14\n+  --> $DIR/ptr_arith.rs:16:14\n    |\n LL |     let _v = x + 0;\n    |              ^ unable to turn pointer into raw bytes\n@@ -16,7 +16,7 @@ LL |     let _v = x + 0;\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:9:13\n+  --> $DIR/ptr_arith.rs:8:13\n    |\n LL |     let x = &0 as *const _ as usize;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5f8ec4e6e294ded12106882edc1c186ca2261adf", "filename": "src/test/ui/consts/miri_unleashed/raw_mutable_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n-#![allow(const_err)]\n-\n use std::cell::UnsafeCell;\n \n const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;"}, {"sha": "f8dc11d695f117f7b9262c4f974c4ff4651e9d6d", "filename": "src/test/ui/consts/miri_unleashed/raw_mutable_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fraw_mutable_const.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,13 +1,13 @@\n error: untyped pointers are not allowed in constant\n-  --> $DIR/raw_mutable_const.rs:7:1\n+  --> $DIR/raw_mutable_const.rs:5:1\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/raw_mutable_const.rs:7:38\n+  --> $DIR/raw_mutable_const.rs:5:38\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    |                                      ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d06d7cf19f7ee43b3ca00ba9152ba410904eef9f", "filename": "src/test/ui/consts/miri_unleashed/tls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(thread_local)]\n-#![allow(const_err)]\n \n use std::thread;\n "}, {"sha": "436c5112360e738dd5f80449d7a3a8afcf9ecc3c", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,24 +1,24 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/tls.rs:12:25\n+  --> $DIR/tls.rs:11:25\n    |\n LL |     unsafe { let _val = A; }\n    |                         ^ cannot access thread local static (DefId(0:6 ~ tls[78b0]::A))\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/tls.rs:19:26\n+  --> $DIR/tls.rs:18:26\n    |\n LL |     unsafe { let _val = &A; }\n    |                          ^ cannot access thread local static (DefId(0:6 ~ tls[78b0]::A))\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/tls.rs:12:25\n+  --> $DIR/tls.rs:11:25\n    |\n LL |     unsafe { let _val = A; }\n    |                         ^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/tls.rs:19:26\n+  --> $DIR/tls.rs:18:26\n    |\n LL |     unsafe { let _val = &A; }\n    |                          ^"}, {"sha": "907617052f11940597877a6718cf291b5bce5228", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-linelength\n // Test various things that we do not want to promote.\n-#![allow(unconditional_panic, const_err)]\n+#![allow(unconditional_panic)]\n \n use std::cell::Cell;\n "}, {"sha": "f442e61383973af0033a49da016b7bfc69d536f2", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -55,11 +55,9 @@ const _: *const u8 =\n //~| out-of-bounds\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n //~| unable to turn pointer into raw bytes\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n //~| unable to turn pointer into raw bytes\n-//~| WARN this was previously accepted by the compiler but is being phased out"}, {"sha": "b71964b92c77315ac67ff3b4c1dd41ff2e28c283", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -18,55 +18,24 @@ error[E0080]: evaluation of constant value failed\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: alloc3 has size $WORD, so pointer to 1000 bytes starting at offset 0 is out-of-bounds\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ptr_comparisons.rs:57:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n-   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:62:27\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ptr_comparisons.rs:61:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n-   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:57:27\n-   |\n-LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n-   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-\n-Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:62:27\n-   |\n-LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n-   | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "b9c542d03d5a96a82a1e2389c407d1fa76b6d643", "filename": "src/test/ui/consts/raw-ptr-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,3 @@\n-#![allow(const_err)] // make sure we hit the `delay_span_bug`\n-\n // This is a regression test for a `delay_span_bug` during interning when a constant\n // evaluates to a (non-dangling) raw pointer.  For now this errors; potentially it\n // could also be allowed."}, {"sha": "f7b53433b6994258f669cfb8cfd9deecae294797", "filename": "src/test/ui/consts/raw-ptr-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fraw-ptr-const.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error: untyped pointers are not allowed in constant\n-  --> $DIR/raw-ptr-const.rs:7:1\n+  --> $DIR/raw-ptr-const.rs:5:1\n    |\n LL | const CONST_RAW: *const Vec<i32> = &Vec::new() as *const _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5d736e31bcb46cece80bba4a648ab40f97b44bc0", "filename": "src/test/ui/consts/recursive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -2,8 +2,7 @@\n \n const fn f<T>(x: T) { //~ WARN function cannot return without recursing\n     f(x);\n-    //~^ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler\n+    //~^ ERROR evaluation of constant value failed\n }\n \n const X: () = f(1);"}, {"sha": "14fa3da7ab0f2e3099ad58fa394936434c57732b", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,7 +9,7 @@ LL |     f(x);\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/recursive.rs:4:5\n    |\n LL |     f(x);\n@@ -18,33 +18,10 @@ LL |     f(x);\n    |     reached the configured maximum number of stack frames\n    |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n    |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n-   |     inside `X` at $DIR/recursive.rs:9:15\n ...\n LL | const X: () = f(1);\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |               ---- inside `X` at $DIR/recursive.rs:8:15\n \n error: aborting due to previous error; 1 warning emitted\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/recursive.rs:4:5\n-   |\n-LL |     f(x);\n-   |     ^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n-   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n-   |     inside `X` at $DIR/recursive.rs:9:15\n-...\n-LL | const X: () = f(1);\n-   | -----------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "a07c39882774e0f19744c212e549b8ea13fddfb5", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,8 +1,7 @@\n // build-fail\n \n pub const unsafe fn fake_type<T>() -> T {\n-    hint_unreachable() //~ ERROR any use of this value will cause an error [const_err]\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    hint_unreachable() //~ ERROR evaluation of `<i32 as Const>::CONSTANT` failed\n }\n \n pub const unsafe fn hint_unreachable() -> ! {"}, {"sha": "9c7cc88613ebe982c5f3751e154b933f259033ec", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 70, "deletions": 215, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,296 +1,151 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of `<i32 as Const>::CONSTANT` failed\n   --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n LL |     hint_unreachable()\n    |     ^^^^^^^^^^^^^^^^^^\n    |     |\n    |     reached the configured maximum number of stack frames\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n+...\n+LL |     fake_type()\n+   |     -----------\n+   |     |\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n ...\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |     -------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n+   |                                    ----------- inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:12:36\n \n error[E0080]: erroneous constant used\n-  --> $DIR/uninhabited-const-issue-61744.rs:19:10\n+  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n    |\n LL |     dbg!(i32::CONSTANT);\n    |          ^^^^^^^^^^^^^ referenced constant has errors\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |\n-LL |     hint_unreachable()\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n-   |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n-...\n-LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |     -------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-"}, {"sha": "39b830ae4e91564853d3b9e5fae02da04cef52e8", "filename": "src/test/ui/consts/write_to_static_via_mut_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_static_via_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_static_via_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_static_via_mut_ref.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_mut_refs)]\n-#![allow(const_err)]\n \n static OH_NO: &mut i32 = &mut 42; //~ ERROR mutable references are not allowed\n fn main() {"}, {"sha": "f64f0db6b25a16ecc8a297c57648b751cf1853b6", "filename": "src/test/ui/consts/write_to_static_via_mut_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_static_via_mut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_static_via_mut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_static_via_mut_ref.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,11 +1,11 @@\n error[E0764]: mutable references are not allowed in the final value of statics\n-  --> $DIR/write_to_static_via_mut_ref.rs:4:26\n+  --> $DIR/write_to_static_via_mut_ref.rs:3:26\n    |\n LL | static OH_NO: &mut i32 = &mut 42;\n    |                          ^^^^^^^\n \n error[E0594]: cannot assign to `*OH_NO`, as `OH_NO` is an immutable static item\n-  --> $DIR/write_to_static_via_mut_ref.rs:7:5\n+  --> $DIR/write_to_static_via_mut_ref.rs:6:5\n    |\n LL |     *OH_NO = 43;\n    |     ^^^^^^^^^^^ cannot assign"}, {"sha": "a93d777d286567dde47b21f064550271ca241296", "filename": "src/test/ui/intrinsics/intrinsic-raw_eq-const-padding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,6 +1,5 @@\n #![feature(core_intrinsics)]\n #![feature(const_intrinsic_raw_eq)]\n-#![deny(const_err)]\n \n const BAD_RAW_EQ_CALL: bool = unsafe {\n     std::intrinsics::raw_eq(&(1_u8, 2_u16), &(1_u8, 2_u16))"}, {"sha": "56d5a48573e26b621ca65db242f60aef12288f44", "filename": "src/test/ui/intrinsics/intrinsic-raw_eq-const-padding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/intrinsic-raw_eq-const-padding.rs:6:5\n+  --> $DIR/intrinsic-raw_eq-const-padding.rs:5:5\n    |\n LL |     std::intrinsics::raw_eq(&(1_u8, 2_u16), &(1_u8, 2_u16))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reading memory at alloc3[0x0..0x4], but memory is uninitialized at [0x1..0x2], and this operation requires initialized memory"}, {"sha": "32841f5318f8cd7729cb1516615bb8191a801374", "filename": "src/test/ui/intrinsics/intrinsic-raw_eq-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(core_intrinsics)]\n #![feature(const_intrinsic_raw_eq)]\n-#![deny(const_err)]\n \n pub fn main() {\n     use std::intrinsics::raw_eq;"}, {"sha": "ee6aab748e4453ae1e5ae9b9968e4346239b62a8", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -9,29 +9,14 @@ LL |     intrinsics::size_of::<T>()\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |                          ---------------------------------------------- inside `main` at $DIR/issue-55878.rs:7:26\n \n-error: erroneous constant used\n+error[E0080]: erroneous constant used\n   --> $DIR/issue-55878.rs:7:26\n    |\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/issue-55878.rs:7:26\n-   |\n-LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-"}, {"sha": "257df13efe097a80ba100c8fc2c81f03a8dcf9bf", "filename": "src/test/ui/lint/force-warn/allowed-cli-deny-by-default-lint.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,10 +1,10 @@\n // --force-warn $LINT causes $LINT (which is deny-by-default) to warn\n // despite $LINT being allowed on command line\n-// compile-flags: -A const_err --force-warn const_err\n+// compile-flags: -A mutable_transmutes --force-warn mutable_transmutes\n // check-pass\n \n-const C: i32 = 1 / 0;\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler\n-\n-fn main() {}\n+fn main() {\n+    unsafe {\n+        let y = std::mem::transmute::<&i32, &mut i32>(&5); //~WARN: undefined behavior\n+    }\n+}"}, {"sha": "6a1fc76e18a18a9c1a5cc311a079ec840b1a0afa", "filename": "src/test/ui/lint/force-warn/allowed-cli-deny-by-default-lint.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,10 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/allowed-cli-deny-by-default-lint.rs:6:16\n+warning: transmuting &T to &mut T is undefined behavior, even if the reference is unused, consider instead using an UnsafeCell\n+  --> $DIR/allowed-cli-deny-by-default-lint.rs:8:17\n    |\n-LL | const C: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n+LL |         let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: requested on the command line with `--force-warn const-err`\n+   = note: requested on the command line with `--force-warn mutable-transmutes`\n \n warning: 1 warning emitted\n \n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/allowed-cli-deny-by-default-lint.rs:6:16\n-   |\n-LL | const C: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: requested on the command line with `--force-warn const-err`\n-"}, {"sha": "0d4b468c2b337eeceb2a43fee65074b7a5809d93", "filename": "src/test/ui/lint/force-warn/allowed-deny-by-default-lint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,11 +1,11 @@\n // --force-warn $LINT causes $LINT (which is deny-by-default) to warn\n // despite $LINT being allowed in module\n-// compile-flags: --force-warn const_err\n+// compile-flags: --force-warn mutable_transmutes\n // check-pass\n \n-#![allow(const_err)]\n-const C: i32 = 1 / 0;\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler\n-\n-fn main() {}\n+#![allow(mutable_transmutes)]\n+fn main() {\n+    unsafe {\n+        let y = std::mem::transmute::<&i32, &mut i32>(&5); //~WARN: undefined behavior\n+    }\n+}"}, {"sha": "9ef53d47eb931eabfd9df7abe9b1cbbe93e8fb6c", "filename": "src/test/ui/lint/force-warn/allowed-deny-by-default-lint.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,10 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/allowed-deny-by-default-lint.rs:7:16\n+warning: transmuting &T to &mut T is undefined behavior, even if the reference is unused, consider instead using an UnsafeCell\n+  --> $DIR/allowed-deny-by-default-lint.rs:9:17\n    |\n-LL | const C: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n+LL |         let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: requested on the command line with `--force-warn const-err`\n+   = note: requested on the command line with `--force-warn mutable-transmutes`\n \n warning: 1 warning emitted\n \n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/allowed-deny-by-default-lint.rs:7:16\n-   |\n-LL | const C: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: requested on the command line with `--force-warn const-err`\n-"}, {"sha": "c2e9377e90854d9af8c0081762497476c1ea8dcf", "filename": "src/test/ui/lint/force-warn/deny-by-default-lint.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,9 +1,9 @@\n // --force-warn $LINT causes $LINT (which is deny-by-default) to warn\n-// compile-flags: --force-warn const_err\n+// compile-flags: --force-warn mutable_transmutes\n // check-pass\n \n-const C: i32 = 1 / 0;\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler\n-\n-fn main() {}\n+fn main() {\n+    unsafe {\n+        let y = std::mem::transmute::<&i32, &mut i32>(&5); //~WARN: undefined behavior\n+    }\n+}"}, {"sha": "c644d0fe741ad1cd6507f064d4b4463473c47221", "filename": "src/test/ui/lint/force-warn/deny-by-default-lint.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,23 +1,10 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/deny-by-default-lint.rs:5:16\n+warning: transmuting &T to &mut T is undefined behavior, even if the reference is unused, consider instead using an UnsafeCell\n+  --> $DIR/deny-by-default-lint.rs:7:17\n    |\n-LL | const C: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n+LL |         let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: requested on the command line with `--force-warn const-err`\n+   = note: requested on the command line with `--force-warn mutable-transmutes`\n \n warning: 1 warning emitted\n \n-Future incompatibility report: Future breakage diagnostic:\n-warning: any use of this value will cause an error\n-  --> $DIR/deny-by-default-lint.rs:5:16\n-   |\n-LL | const C: i32 = 1 / 0;\n-   | ------------   ^^^^^ attempt to divide `1_i32` by zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: requested on the command line with `--force-warn const-err`\n-"}, {"sha": "3a84c6c1fb1f9e11b395e57f022462c5e878d07d", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     const N: i32 = T::N << 42;\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n    |\n-LL | #![warn(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this arithmetic operation will overflow"}, {"sha": "3a84c6c1fb1f9e11b395e57f022462c5e878d07d", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     const N: i32 = T::N << 42;\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n    |\n-LL | #![warn(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this arithmetic operation will overflow"}, {"sha": "3a84c6c1fb1f9e11b395e57f022462c5e878d07d", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     const N: i32 = T::N << 42;\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n    |\n-LL | #![warn(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n warning: this arithmetic operation will overflow"}, {"sha": "048c1aff8a9bea880012cc385afebe2a26865ba1", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@\n // normalize-stderr-test \"shift left by `(64|32)_usize`, which\" -> \"shift left by `%BITS%`, which\"\n \n #![crate_type=\"lib\"]\n-#![warn(arithmetic_overflow, const_err)]\n+#![warn(arithmetic_overflow)]\n \n \n pub trait Foo {"}, {"sha": "9b1eb510bbd8339302073702d805823bd8459294", "filename": "src/test/ui/lint/lint-type-overflow2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -O\n \n #![deny(overflowing_literals)]\n-#![deny(const_err)]\n \n fn main() {\n     let x2: i8 = --128; //~ ERROR literal out of range for `i8`"}, {"sha": "eb593d062f21851fda849c873f4cb9a31fd30ebd", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n error: literal out of range for `i8`\n-  --> $DIR/lint-type-overflow2.rs:7:20\n+  --> $DIR/lint-type-overflow2.rs:6:20\n    |\n LL |     let x2: i8 = --128;\n    |                    ^^^\n@@ -13,31 +13,31 @@ LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: literal out of range for `f32`\n-  --> $DIR/lint-type-overflow2.rs:9:14\n+  --> $DIR/lint-type-overflow2.rs:8:14\n    |\n LL |     let x = -3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `3.40282357e+38_f32` does not fit into the type `f32` and will be converted to `f32::INFINITY`\n \n error: literal out of range for `f32`\n-  --> $DIR/lint-type-overflow2.rs:10:14\n+  --> $DIR/lint-type-overflow2.rs:9:14\n    |\n LL |     let x =  3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `3.40282357e+38_f32` does not fit into the type `f32` and will be converted to `f32::INFINITY`\n \n error: literal out of range for `f64`\n-  --> $DIR/lint-type-overflow2.rs:11:14\n+  --> $DIR/lint-type-overflow2.rs:10:14\n    |\n LL |     let x = -1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `1.7976931348623159e+308_f64` does not fit into the type `f64` and will be converted to `f64::INFINITY`\n \n error: literal out of range for `f64`\n-  --> $DIR/lint-type-overflow2.rs:12:14\n+  --> $DIR/lint-type-overflow2.rs:11:14\n    |\n LL |     let x =  1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "260281d75a4435a8314dff050831ec0a8e8dee27", "filename": "src/test/ui/numbers-arithmetic/float-int-invalid-const-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![deny(const_err)]\n-\n // Forces evaluation of constants, triggering hard error\n fn force<T>(_: T) {}\n "}, {"sha": "c4abcb784119eae25b6c199fb0577ffa70f7dbcc", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.noopt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.noopt.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,145 +1,145 @@\n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:11:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:15:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:17:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:21:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:23:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:27:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:29:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:33:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:35:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:39:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:41:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:45:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:47:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:53:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:53:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:57:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:59:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero"}, {"sha": "c4abcb784119eae25b6c199fb0577ffa70f7dbcc", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.opt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,145 +1,145 @@\n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:11:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:15:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:17:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:21:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:23:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:27:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:29:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:33:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:35:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:39:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:41:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:45:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:47:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:53:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:53:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:57:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:59:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero"}, {"sha": "c4abcb784119eae25b6c199fb0577ffa70f7dbcc", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,145 +1,145 @@\n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:11:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:15:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:17:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:21:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:23:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:27:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:29:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:33:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:35:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:39:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:41:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:45:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:47:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:53:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:53:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:57:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:59:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero"}, {"sha": "02e7567dafabb17dd0eece01f556ead52b2999fb", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -5,8 +5,6 @@\n \n // build-fail\n \n-#![deny(const_err)]\n-\n use std::thread;\n \n fn main() {"}, {"sha": "7f8b0c877600fb7674590a4dfa39659532aec80c", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _x = 1_i32 << 32;"}, {"sha": "434c9d5b43dafc22ec3c4e03f591453520c260c0", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = 1_i32 << 32;\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-1.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "76718ecd1fa7a21b9ffd92f428412067c1a6ca85", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _x = 1 << -1;"}, {"sha": "c3b44e5a0437504a97ce6445db643edec65a2b80", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = 1 << -1;\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-2.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "b2bdd09bffb91c050f0fac4a936210482618021c", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _x = 1_u64 << 64;"}, {"sha": "9d6479bd7c7c62bef58351dd7cc315ad817f1210", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = 1_u64 << 64;\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-3.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "1042bfcb34d3de5eda506224cef7fb0436ff4112", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -4,7 +4,7 @@\n // This function is checking that our automatic truncation does not\n // sidestep the overflow checking.\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     // this signals overflow when checking is on"}, {"sha": "2bb5b6a6d6e09096f2a34a6c76b7b8ac8c13397b", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let x = 1_i8 << 17;\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-4.rs:7:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "80593c8656f5180e0c1a284af2d28cec5c14a1bd", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _x = -1_i32 >> 32;"}, {"sha": "b2b3114d1b4cf0d41ad5dc0620233d6bacf956db", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = -1_i32 >> 32;\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-1.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "917352bfce417d66004a8625f42d4dfeee1c801e", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _x = -1_i32 >> -1;"}, {"sha": "ad18c3bb7f4599db7b551bc2f0c295fd24002a46", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = -1_i32 >> -1;\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-2.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "1e052990a7630a0749447067dd9c1194d2703ad3", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _x = -1_i64 >> 64;"}, {"sha": "37d02e09dec343e7b06b66d1f444d97b2ff4f25b", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = -1_i64 >> 64;\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-3.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "be918becd3a3a02e4d7d0688a855428f6627e211", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -4,7 +4,7 @@\n // This function is checking that our (type-based) automatic\n // truncation does not sidestep the overflow checking.\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     // this signals overflow when checking is on"}, {"sha": "692602c07198b78f25e08c01846bfbaaa6fa1e90", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let x = 2_i8 >> 17;\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-4.rs:7:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "f75e779ed158c68dcafc1032199a8f6b90c55e66", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _n = 1i64 >> [64][0];"}, {"sha": "e3b5859df90fa587f1f78165ef1df6ad8b34890a", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _n = 1i64 >> [64][0];\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-5.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "f75e779ed158c68dcafc1032199a8f6b90c55e66", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -C debug-assertions\n \n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n \n fn main() {\n     let _n = 1i64 >> [64][0];"}, {"sha": "a3475c04c28cd5fed96091d90d4e932a75541dd3", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _n = 1i64 >> [64][0];\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-6.rs:4:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "76279e91308e874e63414564a4301868e42883b7", "filename": "src/test/ui/numbers-arithmetic/promoted_overflow_opt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fpromoted_overflow_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fpromoted_overflow_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fpromoted_overflow_opt.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![allow(const_err)]\n \n // compile-flags: -O\n "}, {"sha": "af40a5a8187ee5dfa4adae5bbc9d7d28d981eb1d", "filename": "src/tools/clippy/clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -19,7 +19,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,no_run\n-    /// # #![allow(const_err)]\n     /// let x = [1, 2, 3, 4];\n     ///\n     /// x[9];"}, {"sha": "9564e77c24b1cf64ad83b21c5a66165c6bd26097", "filename": "src/tools/clippy/tests/ui/crashes/ice-9463.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,4 +1,4 @@\n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n fn main() {\n     let _x = -1_i32 >> -1;\n     let _y = 1u32 >> 10000000000000u32;"}, {"sha": "2b425e85a27b5df0a087ea4b4a011fda909c3a18", "filename": "src/tools/clippy/tests/ui/crashes/ice-9463.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = -1_i32 >> -1;\n note: the lint level is defined here\n   --> $DIR/ice-9463.rs:1:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: this arithmetic operation will overflow"}, {"sha": "4476e0eb9220a636eb6c813ec414e661584c8c79", "filename": "src/tools/clippy/tests/ui/indexing_slicing_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -3,7 +3,7 @@\n // We also check the out_of_bounds_indexing lint here, because it lints similar things and\n // we want to avoid false positives.\n #![warn(clippy::out_of_bounds_indexing)]\n-#![allow(const_err, unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n \n const ARR: [i32; 2] = [1, 2];\n const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr."}, {"sha": "da5bc38b3b66c1514cd2d1e3eb1744ac78de7dee", "filename": "src/tools/clippy/tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -59,6 +59,12 @@ LL |     v[M];\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 8 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/indexing_slicing_index.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "edd2123d48a557fbdf4339e120acdb89b051e6ee", "filename": "src/tools/clippy/tests/ui/out_of_bounds_indexing/issue-3102.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::out_of_bounds_indexing)]\n-#![allow(clippy::no_effect, const_err)]\n+#![allow(clippy::no_effect)]\n \n fn main() {\n     let x = [1, 2, 3, 4];"}, {"sha": "4c541c23f5f472608eba394c39f180ee3ea7892f", "filename": "src/tools/clippy/tests/ui/out_of_bounds_indexing/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::out_of_bounds_indexing)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation, const_err)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n fn main() {\n     let x = [1, 2, 3, 4];"}, {"sha": "d14998ccba269f46850ba3d5742ef9264c285ec8", "filename": "src/tools/miri/tests/fail/erroneous_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -3,7 +3,6 @@\n // Inlining changes the error location\n //@compile-flags: -Zmir-opt-level=0\n #![feature(never_type)]\n-#![warn(warnings, const_err)]\n \n struct PrintName<T>(T);\n impl<T> PrintName<T> {"}, {"sha": "9a1a970778fb4555442a2a3966ddc5d7ac0b6a6a", "filename": "src/tools/miri/tests/fail/erroneous_const2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.rs?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,13 +1,9 @@\n const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-//~^ERROR: any use of this value\n-//~|WARN: previously accepted\n+//~^ERROR: evaluation of constant value failed\n \n #[rustfmt::skip] // rustfmt bug: https://github.com/rust-lang/rustfmt/issues/5391\n fn main() {\n-    println!(\"{}\", FOO); //~ERROR: post-monomorphization error\n-    //~|ERROR: evaluation of constant value failed\n-    //~|ERROR: erroneous constant used\n-    //~|WARN: previously accepted\n+    println!(\"{}\", FOO);\n }"}, {"sha": "d41fcfd2302e57c87f00992720147757c0b236c5", "filename": "src/tools/miri/tests/fail/erroneous_const2.stderr", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd59d44f5880fea109fe68e31fab2486cd686fc6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr?ref=fd59d44f5880fea109fe68e31fab2486cd686fc6", "patch": "@@ -1,39 +1,9 @@\n-error: any use of this value will cause an error\n-  --> $DIR/erroneous_const2.rs:LL:CC\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: `#[deny(const_err)]` on by default\n-\n error[E0080]: evaluation of constant value failed\n   --> $DIR/erroneous_const2.rs:LL:CC\n    |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-\n-error: erroneous constant used\n-  --> $DIR/erroneous_const2.rs:LL:CC\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: post-monomorphization error: referenced constant has errors\n-  --> $DIR/erroneous_const2.rs:LL:CC\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-   |\n-   = note: inside `main` at $DIR/erroneous_const2.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}]}