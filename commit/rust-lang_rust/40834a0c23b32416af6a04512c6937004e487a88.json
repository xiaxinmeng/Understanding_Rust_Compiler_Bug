{"sha": "40834a0c23b32416af6a04512c6937004e487a88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwODM0YTBjMjNiMzI0MTZhZjZhMDQ1MTJjNjkzNzAwNGU0ODdhODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-23T03:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-23T03:20:52Z"}, "message": "auto merge of #9413 : bytbox/rust/master, r=alexcrichton", "tree": {"sha": "a94bdc972520c8ac740e732ff54bd62b756f10e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a94bdc972520c8ac740e732ff54bd62b756f10e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40834a0c23b32416af6a04512c6937004e487a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40834a0c23b32416af6a04512c6937004e487a88", "html_url": "https://github.com/rust-lang/rust/commit/40834a0c23b32416af6a04512c6937004e487a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40834a0c23b32416af6a04512c6937004e487a88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c45423a8a2d5edad60583525b02fe2f2911122b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c45423a8a2d5edad60583525b02fe2f2911122b", "html_url": "https://github.com/rust-lang/rust/commit/8c45423a8a2d5edad60583525b02fe2f2911122b"}, {"sha": "a5cf9fdb61432ea0182dc250305332f3a2d6f214", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cf9fdb61432ea0182dc250305332f3a2d6f214", "html_url": "https://github.com/rust-lang/rust/commit/a5cf9fdb61432ea0182dc250305332f3a2d6f214"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "1644efb80704683819bf818fb5e1c71a4a259899", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/40834a0c23b32416af6a04512c6937004e487a88/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40834a0c23b32416af6a04512c6937004e487a88/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=40834a0c23b32416af6a04512c6937004e487a88", "patch": "@@ -8,10 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Semver parsing and logic\n-\n-#[allow(missing_doc)];\n-\n+//! Semantic version parsing and comparison.\n+//!\n+//! Semantic versioning (see http://semver.org/) is a set of rules for\n+//! assigning version numbers intended to convey meaning about what has\n+//! changed, and how much. A version number has five parts:\n+//!\n+//!  * Major number, updated for incompatible API changes\n+//!  * Minor number, updated for backwards-compatible API additions\n+//!  * Patch number, updated for backwards-compatible bugfixes\n+//!  * Pre-release information (optional), preceded by a hyphen (`-`)\n+//!  * Build metadata (optional), preceded by a plus sign (`+`)\n+//!\n+//! The three mandatory components are required to be decimal numbers. The\n+//! pre-release information and build metadata are required to be a\n+//! period-separated list of identifiers containing only alphanumeric\n+//! characters and hyphens.\n+//!\n+//! An example version number with all five components is\n+//! `0.8.1-rc.3.0+20130922.linux`.\n \n use std::char;\n use std::cmp;\n@@ -20,6 +35,8 @@ use std::io;\n use std::option::{Option, Some, None};\n use std::to_str::ToStr;\n \n+/// An identifier in the pre-release or build metadata. If the identifier can\n+/// be parsed as a decimal value, it will be represented with `Numeric`.\n #[deriving(Clone, Eq)]\n pub enum Identifier {\n     Numeric(uint),\n@@ -49,12 +66,20 @@ impl ToStr for Identifier {\n }\n \n \n+/// Represents a version number conforming to the semantic versioning scheme.\n #[deriving(Clone, Eq)]\n pub struct Version {\n+    /// The major version, to be incremented on incompatible changes.\n     major: uint,\n+    /// The minor version, to be incremented when functionality is added in a\n+    /// backwards-compatible manner.\n     minor: uint,\n+    /// The patch version, to be incremented when backwards-compatible bug\n+    /// fixes are made.\n     patch: uint,\n+    /// The pre-release version identifier, if one exists.\n     pre: ~[Identifier],\n+    /// The build metadata, ignored when determining version precedence.\n     build: ~[Identifier],\n }\n \n@@ -202,6 +227,7 @@ fn parse_reader(rdr: @io::Reader) -> Version {\n }\n \n \n+/// Parse a string into a semver object.\n pub fn parse(s: &str) -> Option<Version> {\n     if !s.is_ascii() {\n         return None;"}]}