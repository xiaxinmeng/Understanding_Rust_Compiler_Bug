{"sha": "6d3513eaee512e0143cd75927b8ff56a5bf98152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMzUxM2VhZWU1MTJlMDE0M2NkNzU5MjdiOGZmNTZhNWJmOTgxNTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T00:00:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T00:00:28Z"}, "message": "Make #fmt work from inside std. Issue #175\n\nAt long last, this patch makes #fmt usable from inside the standard library.\nThe way it does it us very hackish, but at least it works now.", "tree": {"sha": "d886a3039905edc8e6d8a71f90da8454260b9136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d886a3039905edc8e6d8a71f90da8454260b9136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3513eaee512e0143cd75927b8ff56a5bf98152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3513eaee512e0143cd75927b8ff56a5bf98152", "html_url": "https://github.com/rust-lang/rust/commit/6d3513eaee512e0143cd75927b8ff56a5bf98152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3513eaee512e0143cd75927b8ff56a5bf98152/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "html_url": "https://github.com/rust-lang/rust/commit/e494e73cdd30fda0a10d6b3c067ca3a2809527eb"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "0990b3bdacbb50a0aad52ed344608865a7ae5b17", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d3513eaee512e0143cd75927b8ff56a5bf98152/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3513eaee512e0143cd75927b8ff56a5bf98152/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=6d3513eaee512e0143cd75927b8ff56a5bf98152", "patch": "@@ -36,7 +36,8 @@ type next_id_fn = fn() -> ast::node_id ;\n // Provides a limited set of services necessary for syntax extensions\n // to do their thing\n type ext_ctxt =\n-    rec(span_msg_fn span_fatal,\n+    rec(str crate_file_name_hack,\n+        span_msg_fn span_fatal,\n         span_msg_fn span_unimpl,\n         next_id_fn next_id);\n \n@@ -50,9 +51,19 @@ fn mk_ctxt(&parse_sess sess) -> ext_ctxt {\n         codemap::emit_error(option::some(sp), \"unimplemented \" + msg, cm);\n         fail;\n     }\n+\n+    // FIXME: Some extensions work by building ASTs with paths to functions\n+    // they need to call at runtime. As those functions live in the std crate,\n+    // the paths are prefixed with \"std::\". Unfortunately, these paths can't\n+    // work for code called from inside the stdard library, so here we pass\n+    // the extensions the file name of the crate being compiled so they can\n+    // use it to guess whether paths should be prepended with \"std::\". This is\n+    // super-ugly and needs a better solution.\n+    auto crate_file_name_hack = sess.cm.files.(0).name;\n     auto ext_span_unimpl = bind ext_span_unimpl_(sess.cm, _, _);\n     auto ext_next_id = bind parse::parser::next_node_id(sess);\n-    ret rec(span_fatal=ext_span_fatal,\n+    ret rec(crate_file_name_hack=crate_file_name_hack,\n+            span_fatal=ext_span_fatal,\n             span_unimpl=ext_span_unimpl,\n             next_id=ext_next_id);\n }"}, {"sha": "ffae97b1b0ceb6435b8f40c811e820c572aba445", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d3513eaee512e0143cd75927b8ff56a5bf98152/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3513eaee512e0143cd75927b8ff56a5bf98152/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=6d3513eaee512e0143cd75927b8ff56a5bf98152", "patch": "@@ -92,15 +92,19 @@ fn pieces_to_expr(&ext_ctxt cx, span sp, vec[piece] pieces,\n         auto recexpr = ast::expr_rec(astfields, option::none[@ast::expr]);\n         ret @rec(id=cx.next_id(), node=recexpr, span=sp);\n     }\n-    fn make_path_vec(str ident) -> str[] {\n-        // FIXME: #fmt can't currently be used from within std\n-        // because we're explicitly referencing the 'std' crate here\n-\n-        ret ~[\"std\", \"extfmt\", \"rt\", ident];\n+    fn make_path_vec(&ext_ctxt cx, str ident) -> str[] {\n+        fn compiling_std(&ext_ctxt cx) -> bool {\n+            ret str::find(cx.crate_file_name_hack, \"std.rc\") >= 0;\n+        }\n+        if (compiling_std(cx)) {\n+            ret ~[\"extfmt\", \"rt\", ident];\n+        } else {\n+            ret ~[\"std\", \"extfmt\", \"rt\", ident];\n+        }\n     }\n     fn make_rt_path_expr(&ext_ctxt cx, span sp, str ident) ->\n        @ast::expr {\n-        auto path = make_path_vec(ident);\n+        auto path = make_path_vec(cx, ident);\n         ret make_path_expr(cx, sp, path);\n     }\n     // Produces an AST expression that represents a RT::conv record,\n@@ -141,7 +145,7 @@ fn pieces_to_expr(&ext_ctxt cx, span sp, vec[piece] pieces,\n                 }\n                 case (count_is(?c)) {\n                     auto count_lit = make_new_int(cx, sp, c);\n-                    auto count_is_path = make_path_vec(\"count_is\");\n+                    auto count_is_path = make_path_vec(cx, \"count_is\");\n                     auto count_is_args = ~[count_lit];\n                     ret make_call(cx, sp, count_is_path, count_is_args);\n                 }\n@@ -184,7 +188,7 @@ fn pieces_to_expr(&ext_ctxt cx, span sp, vec[piece] pieces,\n     fn make_conv_call(&ext_ctxt cx, span sp, str conv_type, &conv cnv,\n                       @ast::expr arg) -> @ast::expr {\n         auto fname = \"conv_\" + conv_type;\n-        auto path = make_path_vec(fname);\n+        auto path = make_path_vec(cx, fname);\n         auto cnv_expr = make_rt_conv_expr(cx, sp, cnv);\n         auto args = ~[cnv_expr, arg];\n         ret make_call(cx, arg.span, path, args);"}]}