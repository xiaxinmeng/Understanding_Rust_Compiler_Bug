{"sha": "49eb443b3b88a766b6a7f0997bd6b509e985b64d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZWI0NDNiM2I4OGE3NjZiNmE3ZjA5OTdiZDZiNTA5ZTk4NWI2NGQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-25T12:31:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-25T12:31:04Z"}, "message": "Rollup merge of #55200 - octronics:gh51430, r=kennytm\n\nDocuments `From` implementations for `Stdio`\n\nThis PR solves part of #51430 by adding a basic summary and an example to each `impl From` inside `process` module (`ChildStdin`, `ChildStdout`, `ChildStderr`, `File`).\n\nIt does not document if the conversions allocate memory and how expensive they are.", "tree": {"sha": "1e8d4c699fbde44b7789d90a17aab9c0fe8491b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8d4c699fbde44b7789d90a17aab9c0fe8491b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49eb443b3b88a766b6a7f0997bd6b509e985b64d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0beICRBK7hj4Ov3rIwAAdHIIAD65A3pMy+Qu7ziIuflD9siq\nYBcSYCOr1EGlAD5d1qReDoZr3f91cwaFbO/acaoZGH5xP/N/VT8NbjRhw4A2hMl7\nwJ+Hu/nP80LD4LD4E/P8LsUCQhIIJDzZsp1Wunccn0pc7uyaMs6mF5/K+maelASN\nGOFEi9i/qAjgaDEwIoQdy3vWjd4CtlUdv4MfQkZgeiSgHNgY+UlHkN9nYUl8A6q3\nyF7kBByxYDKIbK1LRxNS/V/N/oDf2ZgzDg1wyN1gS0nJSUA1lg/wnzA60DnMSSFs\nhpdF2LH2DIdeDPv00rJii6nQRXuZa2KPbuRJtKyNgYTytHyFADVDx6OrfAUOFbo=\n=kxlP\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e8d4c699fbde44b7789d90a17aab9c0fe8491b7\nparent f50e285e304f1f8c58ea0b1432d1fabda72ad0c8\nparent 0b82e03a88af4fccfd64a62288a9066cadc2e603\nauthor Pietro Albini <pietro@pietroalbini.org> 1540470664 +0200\ncommitter GitHub <noreply@github.com> 1540470664 +0200\n\nRollup merge of #55200 - octronics:gh51430, r=kennytm\n\nDocuments `From` implementations for `Stdio`\n\nThis PR solves part of #51430 by adding a basic summary and an example to each `impl From` inside `process` module (`ChildStdin`, `ChildStdout`, `ChildStderr`, `File`).\n\nIt does not document if the conversions allocate memory and how expensive they are.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49eb443b3b88a766b6a7f0997bd6b509e985b64d", "html_url": "https://github.com/rust-lang/rust/commit/49eb443b3b88a766b6a7f0997bd6b509e985b64d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49eb443b3b88a766b6a7f0997bd6b509e985b64d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "html_url": "https://github.com/rust-lang/rust/commit/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8"}, {"sha": "0b82e03a88af4fccfd64a62288a9066cadc2e603", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b82e03a88af4fccfd64a62288a9066cadc2e603", "html_url": "https://github.com/rust-lang/rust/commit/0b82e03a88af4fccfd64a62288a9066cadc2e603"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "a9219f75362db4dddb74cb879b98b305d05d5731", "filename": "src/libstd/process.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/49eb443b3b88a766b6a7f0997bd6b509e985b64d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49eb443b3b88a766b6a7f0997bd6b509e985b64d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=49eb443b3b88a766b6a7f0997bd6b509e985b64d", "patch": "@@ -1016,27 +1016,115 @@ impl fmt::Debug for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdin> for Stdio {\n+    /// Converts a `ChildStdin` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// `ChildStdin` will be converted to `Stdio` using `Stdio::from` under the hood.\n+    ///\n+    /// ```rust\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .stdin(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// let _echo = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(reverse.stdin.unwrap()) // Converted into a Stdio here\n+    ///     .output()\n+    ///     .expect(\"failed echo command\");\n+    ///\n+    /// // \"!dlrow ,olleH\" echoed to console\n+    /// ```\n     fn from(child: ChildStdin) -> Stdio {\n         Stdio::from_inner(child.into_inner().into())\n     }\n }\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdout> for Stdio {\n+    /// Converts a `ChildStdout` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// `ChildStdout` will be converted to `Stdio` using `Stdio::from` under the hood.\n+    ///\n+    /// ```rust\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let hello = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"failed echo command\");\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .stdin(hello.stdout.unwrap())  // Converted into a Stdio here\n+    ///     .output()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\\n\");\n+    /// ```\n     fn from(child: ChildStdout) -> Stdio {\n         Stdio::from_inner(child.into_inner().into())\n     }\n }\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStderr> for Stdio {\n+    /// Converts a `ChildStderr` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust,no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .arg(\"non_existing_file.txt\")\n+    ///     .stderr(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// let cat = Command::new(\"cat\")\n+    ///     .arg(\"-\")\n+    ///     .stdin(reverse.stderr.unwrap()) // Converted into a Stdio here\n+    ///     .output()\n+    ///     .expect(\"failed echo command\");\n+    ///\n+    /// assert_eq!(\n+    ///     String::from_utf8_lossy(&cat.stdout),\n+    ///     \"rev: cannot open non_existing_file.txt: No such file or directory\\n\"\n+    /// );\n+    /// ```\n     fn from(child: ChildStderr) -> Stdio {\n         Stdio::from_inner(child.into_inner().into())\n     }\n }\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<fs::File> for Stdio {\n+    /// Converts a `File` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// `File` will be converted to `Stdio` using `Stdio::from` under the hood.\n+    ///\n+    /// ```rust,no_run\n+    /// use std::fs::File;\n+    /// use std::process::Command;\n+    ///\n+    /// // With the `foo.txt` file containing `Hello, world!\"\n+    /// let file = File::open(\"foo.txt\").unwrap();\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .stdin(file)  // Implicit File convertion into a Stdio\n+    ///     .output()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\");\n+    /// ```\n     fn from(file: fs::File) -> Stdio {\n         Stdio::from_inner(file.into_inner().into())\n     }"}]}