{"sha": "018d128325da01a236f94afac0e1b40ce1865e84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOGQxMjgzMjVkYTAxYTIzNmY5NGFmYWMwZTFiNDBjZTE4NjVlODQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-20T08:17:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-20T08:36:25Z"}, "message": "rename evaluator -> interpreter to make eddyb happy", "tree": {"sha": "bb852d91ba054a9d6dd36518a965a00bb3cafe64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb852d91ba054a9d6dd36518a965a00bb3cafe64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/018d128325da01a236f94afac0e1b40ce1865e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/018d128325da01a236f94afac0e1b40ce1865e84", "html_url": "https://github.com/rust-lang/rust/commit/018d128325da01a236f94afac0e1b40ce1865e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/018d128325da01a236f94afac0e1b40ce1865e84/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "169f7911e9852dcd047d0f0c144ce3b18d77f946", "url": "https://api.github.com/repos/rust-lang/rust/commits/169f7911e9852dcd047d0f0c144ce3b18d77f946", "html_url": "https://github.com/rust-lang/rust/commit/169f7911e9852dcd047d0f0c144ce3b18d77f946"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "ce18f31da6907f440a25a5772bf0fcdf8e000b50", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -10,7 +10,7 @@\n \n use llvm;\n use rustc::mir::interpret::{ConstEvalErr, read_target_uint};\n-use rustc_mir::interpret::{const_field};\n+use rustc_mir::const_eval::const_field;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "e9a81ee4651683d9f4549de769f03e096f35b84b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -1612,7 +1612,7 @@ fn validate_const<'a, 'tcx>(\n     gid: ::rustc::mir::interpret::GlobalId<'tcx>,\n     what: &str,\n ) {\n-    let ecx = ::rustc_mir::interpret::mk_eval_cx(tcx, gid.instance, param_env).unwrap();\n+    let ecx = ::rustc_mir::const_eval::mk_eval_cx(tcx, gid.instance, param_env).unwrap();\n     let result = (|| {\n         let op = ecx.const_to_op(constant)?;\n         let mut todo = vec![(op, Vec::new())];"}, {"sha": "0015f62a8f02afba223624608ef76455928018f7", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -42,7 +42,7 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n     debug!(\"mk_borrowck_eval_cx: {:?}\", instance);\n     let param_env = tcx.param_env(instance.def_id());\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeEvaluator::new(), ());\n+    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), ());\n     // insert a stack frame so any queries have the correct substs\n     ecx.stack.push(interpret::Frame {\n         block: mir::START_BLOCK,\n@@ -64,7 +64,7 @@ pub fn mk_eval_cx<'a, 'tcx>(\n ) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'tcx, 'tcx>> {\n     debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n     let span = tcx.def_span(instance.def_id());\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeEvaluator::new(), ());\n+    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), ());\n     let mir = ecx.load_mir(instance.def)?;\n     // insert a stack frame so any queries have the correct substs\n     ecx.push_stack_frame(\n@@ -133,7 +133,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n     // and try improving it down the road when more information is available\n     let span = tcx.def_span(cid.instance.def_id());\n     let span = mir.map(|mir| mir.span).unwrap_or(span);\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeEvaluator::new(), ());\n+    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), ());\n     let r = eval_body_using_ecx(&mut ecx, cid, mir, param_env);\n     (r, ecx)\n }\n@@ -230,7 +230,7 @@ impl Error for ConstEvalError {\n }\n \n // Extra machine state for CTFE, and the Machine instance\n-pub struct CompileTimeEvaluator<'a, 'mir, 'tcx: 'a+'mir> {\n+pub struct CompileTimeInterpreter<'a, 'mir, 'tcx: 'a+'mir> {\n     /// When this value is negative, it indicates the number of interpreter\n     /// steps *until* the loop detector is enabled. When it is positive, it is\n     /// the number of steps after the detector has been enabled modulo the loop\n@@ -241,20 +241,20 @@ pub struct CompileTimeEvaluator<'a, 'mir, 'tcx: 'a+'mir> {\n     pub(super) loop_detector: snapshot::InfiniteLoopDetector<'a, 'mir, 'tcx>,\n }\n \n-impl<'a, 'mir, 'tcx> CompileTimeEvaluator<'a, 'mir, 'tcx> {\n+impl<'a, 'mir, 'tcx> CompileTimeInterpreter<'a, 'mir, 'tcx> {\n     fn new() -> Self {\n-        CompileTimeEvaluator {\n+        CompileTimeInterpreter {\n             loop_detector: Default::default(),\n             steps_since_detector_enabled: -snapshot::STEPS_UNTIL_DETECTOR_ENABLED,\n         }\n     }\n }\n \n type CompileTimeEvalContext<'a, 'mir, 'tcx> =\n-    EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator<'a, 'mir, 'tcx>>;\n+    EvalContext<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>;\n \n impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n-    for CompileTimeEvaluator<'a, 'mir, 'tcx>\n+    for CompileTimeInterpreter<'a, 'mir, 'tcx>\n {\n     type MemoryData = ();\n     type MemoryKinds = !;"}, {"sha": "c72f87836855036ed8f0fbbca97a6fd39c0c8e21", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -16,7 +16,7 @@ mod check_match;\n pub use self::check_match::check_crate;\n pub(crate) use self::check_match::check_match;\n \n-use interpret::{const_field, const_variant_index};\n+use const_eval::{const_field, const_variant_index};\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};"}, {"sha": "6f07c2996b9cb72f0fddd273c009fd530845a7b7", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -35,16 +35,3 @@ pub use self::memory::{Memory, MemoryKind};\n pub use self::machine::Machine;\n \n pub use self::operand::{Value, ValTy, Operand, OpTy};\n-\n-// reexports for compatibility\n-pub use const_eval::{\n-    eval_promoted,\n-    mk_borrowck_eval_cx,\n-    mk_eval_cx,\n-    CompileTimeEvaluator,\n-    const_to_allocation_provider,\n-    const_eval_provider,\n-    const_field,\n-    const_variant_index,\n-    op_to_const,\n-};"}, {"sha": "388e0fd859d65a91f465e442aa0ea4cb1739ca72", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -26,7 +26,7 @@ use syntax::source_map::Span;\n \n use super::eval_context::{LocalValue, StackPopCleanup};\n use super::{Frame, Memory, Operand, MemPlace, Place, Value};\n-use const_eval::CompileTimeEvaluator;\n+use const_eval::CompileTimeInterpreter;\n \n /// Number of steps until the detector even starts doing anything.\n /// Also, a warning is shown to the user when this number is reached.\n@@ -61,7 +61,7 @@ impl<'a, 'mir, 'tcx> InfiniteLoopDetector<'a, 'mir, 'tcx>\n     pub fn observe_and_analyze<'b>(\n         &mut self,\n         tcx: &TyCtxt<'b, 'tcx, 'tcx>,\n-        memory: &Memory<'a, 'mir, 'tcx, CompileTimeEvaluator<'a, 'mir, 'tcx>>,\n+        memory: &Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n         stack: &[Frame<'mir, 'tcx>],\n     ) -> EvalResult<'tcx, ()> {\n \n@@ -391,25 +391,25 @@ impl<'a, 'mir, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a Frame<'mir, 'tcx>\n }\n \n impl<'a, 'b, 'mir, 'tcx: 'a+'mir> SnapshotContext<'b>\n-    for Memory<'a, 'mir, 'tcx, CompileTimeEvaluator<'a, 'mir, 'tcx>>\n+    for Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>\n {\n     fn resolve(&'b self, id: &AllocId) -> Option<&'b Allocation> {\n         self.get(*id).ok()\n     }\n }\n \n /// The virtual machine state during const-evaluation at a given point in time.\n-/// We assume the `CompileTimeEvaluator` has no interesting extra state that\n+/// We assume the `CompileTimeInterpreter` has no interesting extra state that\n /// is worth considering here.\n struct EvalSnapshot<'a, 'mir, 'tcx: 'a + 'mir> {\n-    memory: Memory<'a, 'mir, 'tcx, CompileTimeEvaluator<'a, 'mir, 'tcx>>,\n+    memory: Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n     stack: Vec<Frame<'mir, 'tcx>>,\n }\n \n impl<'a, 'mir, 'tcx: 'a + 'mir> EvalSnapshot<'a, 'mir, 'tcx>\n {\n     fn new(\n-        memory: &Memory<'a, 'mir, 'tcx, CompileTimeEvaluator<'a, 'mir, 'tcx>>,\n+        memory: &Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n         stack: &[Frame<'mir, 'tcx>]\n     ) -> Self {\n         EvalSnapshot {"}, {"sha": "4546e0bf253c37c133eeed9d2fd7eb1aac80e320", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -95,7 +95,7 @@ pub fn provide(providers: &mut Providers) {\n     borrow_check::provide(providers);\n     shim::provide(providers);\n     transform::provide(providers);\n-    providers.const_eval = interpret::const_eval_provider;\n+    providers.const_eval = const_eval::const_eval_provider;\n     providers.check_match = hair::pattern::check_match;\n }\n "}, {"sha": "7cfa7de8138a9dc1f871e73f6361c21e84d7b040", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018d128325da01a236f94afac0e1b40ce1865e84/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=018d128325da01a236f94afac0e1b40ce1865e84", "patch": "@@ -21,8 +21,8 @@ use rustc::mir::interpret::{\n     ConstEvalErr, EvalErrorKind, ScalarMaybeUndef, Scalar, GlobalId, EvalResult\n };\n use rustc::ty::{TyCtxt, self, Instance};\n-use interpret::{EvalContext, CompileTimeEvaluator, eval_promoted, mk_borrowck_eval_cx};\n-use interpret::{self, Value, OpTy, MemoryKind};\n+use interpret::{self, EvalContext, Value, OpTy, MemoryKind};\n+use const_eval::{CompileTimeInterpreter, eval_promoted, mk_borrowck_eval_cx};\n use transform::{MirPass, MirSource};\n use syntax::source_map::{Span, DUMMY_SP};\n use rustc::ty::subst::Substs;\n@@ -69,7 +69,7 @@ type Const<'tcx> = (OpTy<'tcx>, Span);\n \n /// Finds optimization opportunities on the MIR.\n struct ConstPropagator<'b, 'a, 'tcx:'a+'b> {\n-    ecx: EvalContext<'a, 'b, 'tcx, CompileTimeEvaluator<'a, 'b, 'tcx>>,\n+    ecx: EvalContext<'a, 'b, 'tcx, CompileTimeInterpreter<'a, 'b, 'tcx>>,\n     mir: &'b Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     source: MirSource,"}]}