{"sha": "6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkY2MwZTU2MzExOGVmMmQ2ZDA3YjVkOWQ2ZDBmMTA0MmI0OTdkYjA=", "commit": {"author": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2015-03-02T04:14:45Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-08T12:38:10Z"}, "message": "Adds an example for PhantomData<T>.", "tree": {"sha": "27318529a65c948d0dd2d5d6dbbe436796be425b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27318529a65c948d0dd2d5d6dbbe436796be425b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0", "html_url": "https://github.com/rust-lang/rust/commit/6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0/comments", "author": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f09c1165db805ed00707257dd94bb309faf0fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f09c1165db805ed00707257dd94bb309faf0fe", "html_url": "https://github.com/rust-lang/rust/commit/b2f09c1165db805ed00707257dd94bb309faf0fe"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "a05bc04a530f7a1c6e19f12c76ec817a2f51f59e", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6dcc0e563118ef2d6d07b5d9d6d0f1042b497db0", "patch": "@@ -351,7 +351,45 @@ pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n /// instance, it will behave *as if* an instance of the type `T` were\n /// present for the purpose of various automatic analyses.\n ///\n-/// For example, embedding a `PhantomData<T>` will inform the compiler\n+/// # Examples\n+///\n+/// When handling external resources over a foreign function interface, `PhantomData<T>` can\n+/// prevent mismatches by enforcing types in the method implementations, although the struct\n+/// doesn't actually contain values of the resource type.\n+///\n+/// ```\n+/// # trait ResType { fn foo(&self); };\n+/// # struct ParamType;\n+/// # mod foreign_lib {\n+/// # pub fn new(_: usize) -> *mut () { 42 as *mut () }\n+/// # pub fn do_stuff(_: *mut (), _: usize) {}\n+/// # }\n+/// # fn convert_params(_: ParamType) -> usize { 42 }\n+/// use std::marker::PhantomData;\n+/// use std::mem;\n+///\n+/// struct ExternalResource<R> {\n+///    resource_handle: *mut (),\n+///    resource_type: PhantomData<R>,\n+/// }\n+///\n+/// impl<R: ResType> ExternalResource<R> {\n+///     fn new() -> ExternalResource<R> {\n+///         let size_of_res = mem::size_of::<R>();\n+///         ExternalResource {\n+///             resource_handle: foreign_lib::new(size_of_res),\n+///             resource_type: PhantomData,\n+///         }\n+///     }\n+///\n+///     fn do_stuff(&self, param: ParamType) {\n+///         let foreign_params = convert_params(param);\n+///         foreign_lib::do_stuff(self.resource_handle, foreign_params);\n+///     }\n+/// }\n+/// ```\n+///\n+/// Another example: embedding a `PhantomData<T>` will inform the compiler\n /// that one or more instances of the type `T` could be dropped when\n /// instances of the type itself is dropped, though that may not be\n /// apparent from the other structure of the type itself. This is"}]}