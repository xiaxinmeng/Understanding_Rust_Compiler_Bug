{"sha": "961f9d68a9f2098bb27b06a5f8286dab4faa7505", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MWY5ZDY4YTlmMjA5OGJiMjdiMDZhNWY4Mjg2ZGFiNGZhYTc1MDU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-24T14:21:17Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-24T14:21:17Z"}, "message": "Merge pull request #226 from birkenfeld/fixes\n\nTwo small fixes/refactorings", "tree": {"sha": "b53fec938a67e62676466dbad1905417187fcf49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b53fec938a67e62676466dbad1905417187fcf49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961f9d68a9f2098bb27b06a5f8286dab4faa7505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961f9d68a9f2098bb27b06a5f8286dab4faa7505", "html_url": "https://github.com/rust-lang/rust/commit/961f9d68a9f2098bb27b06a5f8286dab4faa7505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961f9d68a9f2098bb27b06a5f8286dab4faa7505/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45533bb03e39e1a7b1d4356d65d0e97d34577407", "url": "https://api.github.com/repos/rust-lang/rust/commits/45533bb03e39e1a7b1d4356d65d0e97d34577407", "html_url": "https://github.com/rust-lang/rust/commit/45533bb03e39e1a7b1d4356d65d0e97d34577407"}, {"sha": "cc8f33d9152c38ca59cb79ccb89aca70fb3a7420", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8f33d9152c38ca59cb79ccb89aca70fb3a7420", "html_url": "https://github.com/rust-lang/rust/commit/cc8f33d9152c38ca59cb79ccb89aca70fb3a7420"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "5f18439eafe4efbb15e5f4b96f38af8c91bdc350", "filename": "src/loops.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/961f9d68a9f2098bb27b06a5f8286dab4faa7505/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961f9d68a9f2098bb27b06a5f8286dab4faa7505/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=961f9d68a9f2098bb27b06a5f8286dab4faa7505", "patch": "@@ -1,10 +1,9 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::visit::{Visitor, walk_expr};\n-use rustc::middle::ty;\n use std::collections::HashSet;\n \n-use utils::{snippet, span_lint, get_parent_expr, match_def_path};\n+use utils::{snippet, span_lint, get_parent_expr, match_trait_method};\n \n declare_lint!{ pub NEEDLESS_RANGE_LOOP, Warn,\n                \"for-looping over a range of indices where an iterator over items would do\" }\n@@ -68,16 +67,10 @@ impl LintPass for LoopsPass {\n                             object, object));\n                     // check for looping over Iterator::next() which is not what you want\n                     } else if method_name == \"next\" {\n-                        let method_call = ty::MethodCall::expr(arg.id);\n-                        let trt_id = cx.tcx.tables\n-                                           .borrow().method_map.get(&method_call)\n-                                           .and_then(|callee| cx.tcx.trait_of_item(callee.def_id));\n-                        if let Some(trt_id) = trt_id {\n-                            if match_def_path(cx, trt_id, &[\"core\", \"iter\", \"Iterator\"]) {\n-                                span_lint(cx, ITER_NEXT_LOOP, expr.span,\n-                                          \"you are iterating over `Iterator::next()` which is an Option; \\\n-                                           this will compile but is probably not what you want\");\n-                            }\n+                        if match_trait_method(cx, arg, &[\"core\", \"iter\", \"Iterator\"]) {\n+                            span_lint(cx, ITER_NEXT_LOOP, expr.span,\n+                                      \"you are iterating over `Iterator::next()` which is an Option; \\\n+                                       this will compile but is probably not what you want\");\n                         }\n                     }\n                 }"}, {"sha": "914b4daa6bea66e3f97bcd11abb355a0daad8bf5", "filename": "src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/961f9d68a9f2098bb27b06a5f8286dab4faa7505/src%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961f9d68a9f2098bb27b06a5f8286dab4faa7505/src%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Franges.rs?ref=961f9d68a9f2098bb27b06a5f8286dab4faa7505", "patch": "@@ -20,7 +20,7 @@ impl LintPass for StepByZero {\n         if let ExprMethodCall(Spanned { node: ref ident, .. }, _,\n                               ref args) = expr.node {\n             // Only warn on literal ranges.\n-            if ident.name.as_str() == \"step_by\" && args.len() == 2 &&\n+            if ident.name == \"step_by\" && args.len() == 2 &&\n                 is_range(cx, &args[0]) && is_lit_zero(&args[1]) {\n                 cx.span_lint(RANGE_STEP_BY_ZERO, expr.span,\n                              \"Range::step_by(0) produces an infinite iterator. \\"}, {"sha": "5e7c63e85d9b820d73c927b48f0b07c42eae1adf", "filename": "src/utils.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/961f9d68a9f2098bb27b06a5f8286dab4faa7505/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961f9d68a9f2098bb27b06a5f8286dab4faa7505/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=961f9d68a9f2098bb27b06a5f8286dab4faa7505", "patch": "@@ -56,6 +56,19 @@ pub fn match_type(cx: &Context, ty: ty::Ty, path: &[&str]) -> bool {\n     }\n }\n \n+/// check if method call given in \"expr\" belongs to given trait\n+pub fn match_trait_method(cx: &Context, expr: &Expr, path: &[&str]) -> bool {\n+    let method_call = ty::MethodCall::expr(expr.id);\n+    let trt_id = cx.tcx.tables\n+                       .borrow().method_map.get(&method_call)\n+                       .and_then(|callee| cx.tcx.trait_of_item(callee.def_id));\n+    if let Some(trt_id) = trt_id {\n+        match_def_path(cx, trt_id, path)\n+    } else {\n+        false\n+    }\n+}\n+\n /// match a Path against a slice of segment string literals, e.g.\n /// `match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])`\n pub fn match_path(path: &Path, segments: &[&str]) -> bool {"}]}