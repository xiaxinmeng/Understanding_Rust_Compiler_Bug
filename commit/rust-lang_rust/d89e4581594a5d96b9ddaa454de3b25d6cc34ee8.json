{"sha": "d89e4581594a5d96b9ddaa454de3b25d6cc34ee8", "node_id": "C_kwDOAAsO6NoAKGQ4OWU0NTgxNTk0YTVkOTZiOWRkYWE0NTRkZTNiMjVkNmNjMzRlZTg", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-01-01T04:22:54Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-06-12T11:03:29Z"}, "message": "optimize slice::Iter::fold", "tree": {"sha": "a17d9024d422e1e21b73fd481e53c07ec2258a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a17d9024d422e1e21b73fd481e53c07ec2258a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d89e4581594a5d96b9ddaa454de3b25d6cc34ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d89e4581594a5d96b9ddaa454de3b25d6cc34ee8", "html_url": "https://github.com/rust-lang/rust/commit/d89e4581594a5d96b9ddaa454de3b25d6cc34ee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d89e4581594a5d96b9ddaa454de3b25d6cc34ee8/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb0f11a9f506292cd213872f759078d9302e0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb0f11a9f506292cd213872f759078d9302e0cc", "html_url": "https://github.com/rust-lang/rust/commit/cfb0f11a9f506292cd213872f759078d9302e0cc"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "dd809ca459d204d35f7c3f7daa1715bdc635aa9d", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d89e4581594a5d96b9ddaa454de3b25d6cc34ee8/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89e4581594a5d96b9ddaa454de3b25d6cc34ee8/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=d89e4581594a5d96b9ddaa454de3b25d6cc34ee8", "patch": "@@ -191,6 +191,29 @@ macro_rules! iterator {\n                 self.next_back()\n             }\n \n+            #[inline]\n+            fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+                where\n+                    F: FnMut(B, Self::Item) -> B,\n+            {\n+                // Handling the 0-len case explicitly and then using a do-while style loop\n+                // helps the optimizer. See issue #106288\n+                if is_empty!(self) {\n+                    return init;\n+                }\n+                let mut acc = init;\n+                // SAFETY: The 0-len case was handled above so one loop iteration is guaranteed.\n+                unsafe {\n+                    loop {\n+                        acc = f(acc, next_unchecked!(self));\n+                        if is_empty!(self) {\n+                            break;\n+                        }\n+                    }\n+                }\n+                acc\n+            }\n+\n             // We override the default implementation, which uses `try_fold`,\n             // because this simple implementation generates less LLVM IR and is\n             // faster to compile."}]}