{"sha": "1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYzNhMDBjOTBlN2Q0YmE1M2E4ZmI3NDY0YTdmOGNiZmE4NDcwYTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-09-15T13:45:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-15T13:45:33Z"}, "message": "Merge pull request #341 from solson/babysteps\n\nUse rustc's APFloat impl instead of interpreter host floats", "tree": {"sha": "6acbe4418ca96f0f3a837d4255fa6e95553c813e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6acbe4418ca96f0f3a837d4255fa6e95553c813e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2", "html_url": "https://github.com/rust-lang/rust/commit/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13455af2b2afb6caf4599a2dc6c67dd864c974c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13455af2b2afb6caf4599a2dc6c67dd864c974c", "html_url": "https://github.com/rust-lang/rust/commit/f13455af2b2afb6caf4599a2dc6c67dd864c974c"}, {"sha": "ec5820c2730419f8cf1c8756eabe3ab8a9fa5689", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5820c2730419f8cf1c8756eabe3ab8a9fa5689", "html_url": "https://github.com/rust-lang/rust/commit/ec5820c2730419f8cf1c8756eabe3ab8a9fa5689"}], "stats": {"total": 77, "additions": 31, "deletions": 46}, "files": [{"sha": "7fe4691ffff0cabc4faa30b1087c836ae43b41d2", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 31, "deletions": 46, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=1fc3a00c90e7d4ba53a8fb7464a7f8cbfa8470a2", "patch": "@@ -1,5 +1,8 @@\n use rustc::mir;\n use rustc::ty::Ty;\n+use rustc_const_math::ConstFloat;\n+use syntax::ast::FloatTy;\n+use std::cmp::Ordering;\n \n use super::{EvalResult, EvalContext, Lvalue, Machine, ValTy};\n \n@@ -103,27 +106,6 @@ macro_rules! int_shift {\n     })\n }\n \n-macro_rules! float_arithmetic {\n-    ($from_bytes:ident, $to_bytes:ident, $float_op:tt, $l:expr, $r:expr) => ({\n-        let l = $from_bytes($l);\n-        let r = $from_bytes($r);\n-        let bytes = $to_bytes(l $float_op r);\n-        PrimVal::Bytes(bytes)\n-    })\n-}\n-\n-macro_rules! f32_arithmetic {\n-    ($float_op:tt, $l:expr, $r:expr) => (\n-        float_arithmetic!(bytes_to_f32, f32_to_bytes, $float_op, $l, $r)\n-    )\n-}\n-\n-macro_rules! f64_arithmetic {\n-    ($float_op:tt, $l:expr, $r:expr) => (\n-        float_arithmetic!(bytes_to_f64, f64_to_bytes, $float_op, $l, $r)\n-    )\n-}\n-\n impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     /// Returns the result of the specified operation and whether it overflowed.\n     pub fn binary_op(\n@@ -173,32 +155,35 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             return err!(Unimplemented(msg));\n         }\n \n+        let float_op = |op, l, r, ty| {\n+            let l = ConstFloat {\n+                bits: l,\n+                ty,\n+            };\n+            let r = ConstFloat {\n+                bits: r,\n+                ty,\n+            };\n+            match op {\n+                Eq => PrimVal::from_bool(l.try_cmp(r).unwrap() == Ordering::Equal),\n+                Ne => PrimVal::from_bool(l.try_cmp(r).unwrap() != Ordering::Equal),\n+                Lt => PrimVal::from_bool(l.try_cmp(r).unwrap() == Ordering::Less),\n+                Le => PrimVal::from_bool(l.try_cmp(r).unwrap() != Ordering::Greater),\n+                Gt => PrimVal::from_bool(l.try_cmp(r).unwrap() == Ordering::Greater),\n+                Ge => PrimVal::from_bool(l.try_cmp(r).unwrap() != Ordering::Less),\n+                Add => PrimVal::Bytes((l + r).unwrap().bits),\n+                Sub => PrimVal::Bytes((l - r).unwrap().bits),\n+                Mul => PrimVal::Bytes((l * r).unwrap().bits),\n+                Div => PrimVal::Bytes((l / r).unwrap().bits),\n+                Rem => PrimVal::Bytes((l % r).unwrap().bits),\n+                _ => bug!(\"invalid float op: `{:?}`\", op),\n+            }\n+        };\n+\n         let val = match (bin_op, left_kind) {\n-            (Eq, F32) => PrimVal::from_bool(bytes_to_f32(l) == bytes_to_f32(r)),\n-            (Ne, F32) => PrimVal::from_bool(bytes_to_f32(l) != bytes_to_f32(r)),\n-            (Lt, F32) => PrimVal::from_bool(bytes_to_f32(l) < bytes_to_f32(r)),\n-            (Le, F32) => PrimVal::from_bool(bytes_to_f32(l) <= bytes_to_f32(r)),\n-            (Gt, F32) => PrimVal::from_bool(bytes_to_f32(l) > bytes_to_f32(r)),\n-            (Ge, F32) => PrimVal::from_bool(bytes_to_f32(l) >= bytes_to_f32(r)),\n-\n-            (Eq, F64) => PrimVal::from_bool(bytes_to_f64(l) == bytes_to_f64(r)),\n-            (Ne, F64) => PrimVal::from_bool(bytes_to_f64(l) != bytes_to_f64(r)),\n-            (Lt, F64) => PrimVal::from_bool(bytes_to_f64(l) < bytes_to_f64(r)),\n-            (Le, F64) => PrimVal::from_bool(bytes_to_f64(l) <= bytes_to_f64(r)),\n-            (Gt, F64) => PrimVal::from_bool(bytes_to_f64(l) > bytes_to_f64(r)),\n-            (Ge, F64) => PrimVal::from_bool(bytes_to_f64(l) >= bytes_to_f64(r)),\n-\n-            (Add, F32) => f32_arithmetic!(+, l, r),\n-            (Sub, F32) => f32_arithmetic!(-, l, r),\n-            (Mul, F32) => f32_arithmetic!(*, l, r),\n-            (Div, F32) => f32_arithmetic!(/, l, r),\n-            (Rem, F32) => f32_arithmetic!(%, l, r),\n-\n-            (Add, F64) => f64_arithmetic!(+, l, r),\n-            (Sub, F64) => f64_arithmetic!(-, l, r),\n-            (Mul, F64) => f64_arithmetic!(*, l, r),\n-            (Div, F64) => f64_arithmetic!(/, l, r),\n-            (Rem, F64) => f64_arithmetic!(%, l, r),\n+            (_, F32) => float_op(bin_op, l, r, FloatTy::F32),\n+            (_, F64) => float_op(bin_op, l, r, FloatTy::F64),\n+\n \n             (Eq, _) => PrimVal::from_bool(l == r),\n             (Ne, _) => PrimVal::from_bool(l != r),"}]}