{"sha": "fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOWUzZThkOWFhMTMyOTZlOGJjMDUyNmUzMjA4NWRkYzdjYTNjNjY=", "commit": {"author": {"name": "Elly Jones", "email": "elly@leptoquark.net", "date": "2011-11-30T23:57:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-01T18:58:08Z"}, "message": "cargo: add start of rust rewrite", "tree": {"sha": "9266d402415adf71fb97f1be2f944321440ccd32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9266d402415adf71fb97f1be2f944321440ccd32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66", "html_url": "https://github.com/rust-lang/rust/commit/fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7476a39e47d4c5d8e1a349adf590ee329501a0a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7476a39e47d4c5d8e1a349adf590ee329501a0a8", "html_url": "https://github.com/rust-lang/rust/commit/7476a39e47d4c5d8e1a349adf590ee329501a0a8"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "248e35fa3da082137a648a2f5ef13274a40df79c", "filename": "src/cargo.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66/src%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66/src%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo.rs?ref=fa9e3e8d9aa13296e8bc0526e32085ddc7ca3c66", "patch": "@@ -0,0 +1,135 @@\n+// cargo.rs - Rust package manager\n+\n+use rustc;\n+use std;\n+\n+import rustc::syntax::{ast, codemap, visit};\n+import rustc::syntax::parse::parser;\n+\n+import std::io;\n+import std::option;\n+import std::option::{none, some};\n+import std::run;\n+import std::str;\n+import std::tempfile;\n+import std::vec;\n+\n+type pkg = {\n+    name: str,\n+    vers: str,\n+    uuid: str,\n+    desc: option::t<str>,\n+    sigs: option::t<str>\n+};\n+\n+fn load_link(mis: [@ast::meta_item]) -> (option::t<str>,\n+                                         option::t<str>,\n+                                         option::t<str>) {\n+    let name = none;\n+    let vers = none;\n+    let uuid = none;\n+    for a: @ast::meta_item in mis {\n+        alt a.node {\n+            ast::meta_name_value(v, {node: ast::lit_str(s), span: _}) {\n+                alt v {\n+                    \"name\" { name = some(s); }\n+                    \"vers\" { vers = some(s); }\n+                    \"uuid\" { uuid = some(s); }\n+                    _ { }\n+                }\n+            }\n+        }\n+    }\n+    (name, vers, uuid)\n+}\n+\n+fn load_pkg(filename: str) -> option::t<pkg> {\n+    let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n+    let c = parser::parse_crate_from_crate_file(filename, [], sess);\n+\n+    let name = none;\n+    let vers = none;\n+    let uuid = none;\n+    let desc = none;\n+    let sigs = none;\n+\n+    for a in c.node.attrs {\n+        alt a.node.value.node {\n+            ast::meta_name_value(v, {node: ast::lit_str(s), span: _}) {\n+                alt v {\n+                    \"desc\" { desc = some(v); }\n+                    \"sigs\" { sigs = some(v); }\n+                    _ { }\n+                }\n+            }\n+            ast::meta_list(v, mis) {\n+                if v == \"link\" {\n+                    let (n, v, u) = load_link(mis);\n+                    name = n;\n+                    vers = v;\n+                    uuid = u;\n+                }\n+            }\n+        }\n+    }\n+\n+    alt (name, vers, uuid) {\n+        (some(name0), some(vers0), some(uuid0)) {\n+            some({\n+                name: name0,\n+                vers: vers0,\n+                uuid: uuid0,\n+                desc: desc,\n+                sigs: sigs})\n+        }\n+        _ { ret none; }\n+    }\n+}\n+\n+fn print(s: str) {\n+    io::stdout().write_line(s);\n+}\n+\n+fn rest(s: str, start: uint) -> str {\n+    if (start >= str::char_len(s)) {\n+        \"\"\n+    } else {\n+        str::char_slice(s, start, str::char_len(s))\n+    }\n+}\n+\n+fn install_file(path: str) -> option::t<str> {\n+    let wd = tempfile::mkdtemp(\"/tmp/cargo-work-\", \"\");\n+    ret wd;\n+}\n+\n+fn cmd_install(argv: [str]) {\n+    // cargo install <pkg>\n+    if vec::len(argv) < 3u {\n+        cmd_usage();\n+        ret;\n+    }\n+\n+    let wd = if str::starts_with(argv[2], \"file:\") {\n+        let path = rest(argv[2], 5u);\n+        install_file(path)\n+    } else {\n+        none\n+    };\n+}\n+\n+fn cmd_usage() {\n+    print(\"Usage: cargo <verb> [args...]\");\n+}\n+\n+fn main(argv: [str]) {\n+    if vec::len(argv) < 2u {\n+        cmd_usage();\n+        ret;\n+    }\n+    alt argv[1] {\n+        \"usage\" { cmd_usage(); }\n+        _ { cmd_usage(); }\n+    }\n+}\n+"}]}