{"sha": "76c1454d27440dd6783bcc81b8558510a18130bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YzE0NTRkMjc0NDBkZDY3ODNiY2M4MWI4NTU4NTEwYTE4MTMwYmY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-03T08:56:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-03T08:56:21Z"}, "message": "Rollup merge of #67595 - ohadravid:impl-trait-does-not-live-long-enough, r=estebank\n\nSuggest adding a lifetime constraint for opaque type\n\nFixes #67577, where code like this:\n\n```\nstruct List {\n  data: Vec<String>,\n}\nimpl List {\n  fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n    self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n  }\n}\n```\n\nwill show this error:\n```\n   Compiling playground v0.0.1 (/playground)\nerror[E0597]: `prefix` does not live long enough\n --> src/lib.rs:6:47\n  |\n5 |   fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n  |                   -- lifetime `'a` defined here     --------------------------- opaque type requires that `prefix` is borrowed for `'a`\n...\n```\n\nbut without suggesting the lovely `help: you can add a constraint..`.\n\nr? @estebank", "tree": {"sha": "7c7d8a2b52fed8b45e1d42200629a2f96ff141a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7d8a2b52fed8b45e1d42200629a2f96ff141a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76c1454d27440dd6783bcc81b8558510a18130bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeDwG1CRBK7hj4Ov3rIwAAdHIIADnpbp1MzfSMfW88Hrqfdz0v\nwcQvIyz5m4DCBN4DiLIcW1ddBnoSnTjL/e9sCmULMjW2CbgWYPOfWDwhZM48riUa\n9CpHppWqO3VuU8oNqKHX4yvqNzJBHnnUtowQuyj09UJFcotsiGBTLZ9VxZzGk8DF\nuSANXMCRrArmZ054+93OjqjhVniRlOuYsoT7x7kts8fBnoI7JZ2OXgnROBlcnxYZ\noMietkM16nmQX0d20eqj1x6mSoa1QdwCMuW3Im889DG39c4vhzTgihxzvspzsFl2\nksULKh+Bd3TBIQUrUH6AerScvcVooxmbh4zNL00m/0lBczipj203/IGT/JX/40g=\n=bhvY\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c7d8a2b52fed8b45e1d42200629a2f96ff141a9\nparent 7c404ce2332e72bc8e2bed8f14ab0e0e6002d2af\nparent 1a4f6b85a745e9855bbad4c5fdf0806200133f1d\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578041781 +0900\ncommitter GitHub <noreply@github.com> 1578041781 +0900\n\nRollup merge of #67595 - ohadravid:impl-trait-does-not-live-long-enough, r=estebank\n\nSuggest adding a lifetime constraint for opaque type\n\nFixes #67577, where code like this:\n\n```\nstruct List {\n  data: Vec<String>,\n}\nimpl List {\n  fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n    self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n  }\n}\n```\n\nwill show this error:\n```\n   Compiling playground v0.0.1 (/playground)\nerror[E0597]: `prefix` does not live long enough\n --> src/lib.rs:6:47\n  |\n5 |   fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n  |                   -- lifetime `'a` defined here     --------------------------- opaque type requires that `prefix` is borrowed for `'a`\n...\n```\n\nbut without suggesting the lovely `help: you can add a constraint..`.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76c1454d27440dd6783bcc81b8558510a18130bf", "html_url": "https://github.com/rust-lang/rust/commit/76c1454d27440dd6783bcc81b8558510a18130bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76c1454d27440dd6783bcc81b8558510a18130bf/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c404ce2332e72bc8e2bed8f14ab0e0e6002d2af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c404ce2332e72bc8e2bed8f14ab0e0e6002d2af", "html_url": "https://github.com/rust-lang/rust/commit/7c404ce2332e72bc8e2bed8f14ab0e0e6002d2af"}, {"sha": "1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "html_url": "https://github.com/rust-lang/rust/commit/1a4f6b85a745e9855bbad4c5fdf0806200133f1d"}], "stats": {"total": 105, "additions": 89, "deletions": 16}, "files": [{"sha": "69ebbe1fd367977b5ce6c05bda047c0109ea3b95", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             err.span_suggestion(\n                                 fn_return_span,\n                                 &format!(\n-                                    \"you can add a constraint to the return type to make it last \\\n+                                    \"you can add a bound to the return type to make it last \\\n                                  less than `'static` and match {}\",\n                                     lifetime,\n                                 ),"}, {"sha": "9a0c99b07e6f1806fb5eb824e04b0548a99f83ec", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -9,7 +9,7 @@ use rustc::mir::{\n use rustc::ty::adjustment::PointerCast;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -206,6 +206,47 @@ impl BorrowExplanation {\n                         ),\n                     );\n                 };\n+\n+                self.add_lifetime_bound_suggestion_to_diagnostic(\n+                    tcx,\n+                    err,\n+                    &category,\n+                    span,\n+                    region_name,\n+                );\n+            }\n+            _ => {}\n+        }\n+    }\n+    pub(in crate::borrow_check) fn add_lifetime_bound_suggestion_to_diagnostic<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+        category: &ConstraintCategory,\n+        span: Span,\n+        region_name: &RegionName,\n+    ) {\n+        match category {\n+            ConstraintCategory::OpaqueType => {\n+                if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n+                    let suggestable_name = if region_name.was_named() {\n+                        region_name.to_string()\n+                    } else {\n+                        \"'_\".to_string()\n+                    };\n+\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"you can add a bound to the {}to make it last less than \\\n+                             `'static` and match `{}`\",\n+                            category.description(),\n+                            region_name,\n+                        ),\n+                        format!(\"{} + {}\", snippet, suggestable_name),\n+                        Applicability::Unspecified,\n+                    );\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "09b487ba1da3f873e0ebe31aa3b901952d093d6e", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -815,7 +815,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                             span,\n                             &format!(\n                                 \"to allow this `impl Trait` to capture borrowed data with lifetime \\\n-                                 `{}`, add `{}` as a constraint\",\n+                                 `{}`, add `{}` as a bound\",\n                                 fr_name, suggestable_fr_name,\n                             ),\n                             format!(\"{} + {}\", snippet, suggestable_fr_name),"}, {"sha": "6179132b3f6080e0decb74aebfe80b4a49eb702e", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -0,0 +1,11 @@\n+struct List {\n+    data: Vec<String>,\n+}\n+impl List {\n+    fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+        self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n+        //~^ ERROR does not live long enough\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "83d0f87015bf9478756573f4f34ba33a5b1870dd", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -0,0 +1,21 @@\n+error[E0597]: `prefix` does not live long enough\n+  --> $DIR/does-not-live-long-enough.rs:6:51\n+   |\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+   |                     -- lifetime `'a` defined here     --------------------------- opaque type requires that `prefix` is borrowed for `'a`\n+LL |         self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n+   |                                 ---               ^^^^^^ borrowed value does not live long enough\n+   |                                 |\n+   |                                 value captured here\n+LL |\n+LL |     }\n+   |     - `prefix` dropped here while still borrowed\n+   |\n+help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n+   |\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> + 'a {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "4c38f0a8a914d507a2496f91b7d422f3fa103e43", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | type E<'a, 'b> = impl Sized; + 'a\n    |"}, {"sha": "1806d2607a3ac8c288ffd7874318b91e57897c55", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             lifetime `'a` defined here\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^"}, {"sha": "7f92e709af5563931ff5e32afa48b381e1aaa178", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -11,7 +11,7 @@ note: ...can't outlive the anonymous lifetime #1 defined on the function body at\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ note: ...can't outlive the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n@@ -47,7 +47,7 @@ note: ...can't outlive the lifetime `'a` as defined on the function body at 12:1\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "123ea6af6b019f6e5f171cf54fe57f575a805bac", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -6,7 +6,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         |\n    |                         let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    lifetime `'a` defined here\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e550be19174741f2d918b1e27d05ae712afef225", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -15,7 +15,7 @@ LL | /     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n LL | |         self.x.iter().map(|a| a.0)\n LL | |     }\n    | |_____^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ note: ...can't outlive the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f2e556c63cbf3774bcfed5881f6b4114a0e844dd", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -6,7 +6,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          |\n    |                          let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "b76966e8693f2097fd7757a6ee2f76267e9cbc91", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -6,7 +6,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    |\n    |                    let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "9f5414995151b703556727d9ba78df7c05fae8f6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c1454d27440dd6783bcc81b8558510a18130bf/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=76c1454d27440dd6783bcc81b8558510a18130bf", "patch": "@@ -11,7 +11,7 @@ note: ...can't outlive the anonymous lifetime #1 defined on the method body at 8\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}]}