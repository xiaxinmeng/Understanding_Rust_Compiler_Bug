{"sha": "e0d8fd26a2a6a31ba621c8735493b189810daf11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZDhmZDI2YTJhNmEzMWJhNjIxYzg3MzU0OTNiMTg5ODEwZGFmMTE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-24T02:00:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-24T02:00:39Z"}, "message": "Merge pull request #140 from oli-obk/master\n\ndeduplicate field access logic", "tree": {"sha": "557fc25aecf03671e4eac5189495e983dc1455a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/557fc25aecf03671e4eac5189495e983dc1455a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0d8fd26a2a6a31ba621c8735493b189810daf11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d8fd26a2a6a31ba621c8735493b189810daf11", "html_url": "https://github.com/rust-lang/rust/commit/e0d8fd26a2a6a31ba621c8735493b189810daf11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0d8fd26a2a6a31ba621c8735493b189810daf11/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeae478e7428f40959d048adce14605c47a6d378", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeae478e7428f40959d048adce14605c47a6d378", "html_url": "https://github.com/rust-lang/rust/commit/eeae478e7428f40959d048adce14605c47a6d378"}, {"sha": "d4da7c46dd1d8f22804a2c4767bc98ce6fe03a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4da7c46dd1d8f22804a2c4767bc98ce6fe03a83", "html_url": "https://github.com/rust-lang/rust/commit/d4da7c46dd1d8f22804a2c4767bc98ce6fe03a83"}], "stats": {"total": 111, "additions": 64, "deletions": 47}, "files": [{"sha": "13fad7b4644afd8b2e713148cf5cf25524c6bd2a", "filename": "src/eval_context.rs", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e0d8fd26a2a6a31ba621c8735493b189810daf11/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d8fd26a2a6a31ba621c8735493b189810daf11/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=e0d8fd26a2a6a31ba621c8735493b189810daf11", "patch": "@@ -11,7 +11,6 @@ use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::fx::FxHashSet;\n use syntax::codemap::{self, DUMMY_SP};\n \n use error::{EvalError, EvalResult};\n@@ -358,45 +357,45 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub fn assign_discr_and_fields<\n-        I: IntoIterator<Item = u64>,\n         V: IntoValTyPair<'tcx>,\n         J: IntoIterator<Item = V>,\n     >(\n         &mut self,\n         dest: Lvalue<'tcx>,\n-        offsets: I,\n+        dest_ty: Ty<'tcx>,\n+        discr_offset: u64,\n         operands: J,\n         discr_val: u128,\n+        variant_idx: usize,\n         discr_size: u64,\n     ) -> EvalResult<'tcx> {\n         // FIXME(solson)\n         let dest_ptr = self.force_allocation(dest)?.to_ptr();\n \n-        let mut offsets = offsets.into_iter();\n-        let discr_offset = offsets.next().unwrap();\n         let discr_dest = dest_ptr.offset(discr_offset);\n         self.memory.write_uint(discr_dest, discr_val, discr_size)?;\n \n-        self.assign_fields(dest, offsets, operands)\n+        let dest = Lvalue::Ptr {\n+            ptr: dest_ptr,\n+            extra: LvalueExtra::DowncastVariant(variant_idx),\n+        };\n+\n+        self.assign_fields(dest, dest_ty, operands)\n     }\n \n     pub fn assign_fields<\n-        I: IntoIterator<Item = u64>,\n         V: IntoValTyPair<'tcx>,\n         J: IntoIterator<Item = V>,\n     >(\n         &mut self,\n         dest: Lvalue<'tcx>,\n-        offsets: I,\n+        dest_ty: Ty<'tcx>,\n         operands: J,\n     ) -> EvalResult<'tcx> {\n-        // FIXME(solson)\n-        let dest = self.force_allocation(dest)?.to_ptr();\n-\n-        for (offset, operand) in offsets.into_iter().zip(operands) {\n+        for (field_index, operand) in operands.into_iter().enumerate() {\n             let (value, value_ty) = operand.into_val_ty_pair(self)?;\n-            let field_dest = dest.offset(offset);\n-            self.write_value_to_ptr(value, field_dest, value_ty)?;\n+            let field_dest = self.lvalue_field(dest, field_index, dest_ty, value_ty)?;\n+            self.write_value(value, field_dest, value_ty)?;\n         }\n         Ok(())\n     }\n@@ -436,27 +435,23 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, operator::unary_op(un_op, val, kind)?, dest_ty)?;\n             }\n \n+            // Skip everything for zsts\n+            Aggregate(..) if self.type_size(dest_ty)? == Some(0) => {}\n+\n             Aggregate(ref kind, ref operands) => {\n                 self.inc_step_counter_and_check_limit(operands.len() as u64)?;\n                 use rustc::ty::layout::Layout::*;\n                 match *dest_layout {\n                     Univariant { ref variant, .. } => {\n-                        let offsets = variant.offsets.iter().map(|s| s.bytes());\n                         if variant.packed {\n                             let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n                             self.memory.mark_packed(ptr, variant.stride().bytes());\n                         }\n-                        self.assign_fields(dest, offsets, operands)?;\n+                        self.assign_fields(dest, dest_ty, operands)?;\n                     }\n \n                     Array { .. } => {\n-                        let elem_size = match dest_ty.sty {\n-                            ty::TyArray(elem_ty, _) => self.type_size(elem_ty)?\n-                                .expect(\"array elements are sized\") as u64,\n-                            _ => bug!(\"tried to assign {:?} to non-array type {:?}\", kind, dest_ty),\n-                        };\n-                        let offsets = (0..).map(|i| i * elem_size);\n-                        self.assign_fields(dest, offsets, operands)?;\n+                        self.assign_fields(dest, dest_ty, operands)?;\n                     }\n \n                     General { discr, ref variants, .. } => {\n@@ -470,9 +465,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                             self.assign_discr_and_fields(\n                                 dest,\n-                                variants[variant].offsets.iter().cloned().map(Size::bytes),\n+                                dest_ty,\n+                                variants[variant].offsets[0].bytes(),\n                                 operands,\n                                 discr_val,\n+                                variant,\n                                 discr_size,\n                             )?;\n                         } else {\n@@ -508,8 +505,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 self.memory.mark_packed(ptr, nonnull.stride().bytes());\n                             }\n                             if nndiscr == variant as u64 {\n-                                let offsets = nonnull.offsets.iter().map(|s| s.bytes());\n-                                self.assign_fields(dest, offsets, operands)?;\n+                                self.assign_fields(dest, dest_ty, operands)?;\n                             } else {\n                                 for operand in operands {\n                                     let operand_ty = self.operand_ty(operand);\n@@ -540,11 +536,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         }\n                     }\n \n-                    Vector { element, count } => {\n-                        let elem_size = element.size(&self.tcx.data_layout).bytes();\n+                    Vector { count, .. } => {\n                         debug_assert_eq!(count, operands.len() as u64);\n-                        let offsets = (0..).map(|i| i * elem_size);\n-                        self.assign_fields(dest, offsets, operands)?;\n+                        self.assign_fields(dest, dest_ty, operands)?;\n                     }\n \n                     UntaggedUnion { .. } => {\n@@ -1593,7 +1587,7 @@ pub fn monomorphize_field_ty<'a, 'tcx:'a >(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &ty::\n }\n \n pub fn is_inhabited<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.uninhabited_from(&mut FxHashSet::default(), tcx).is_empty()\n+    ty.uninhabited_from(&mut HashMap::default(), tcx).is_empty()\n }\n \n pub trait IntoValTyPair<'tcx> {"}, {"sha": "d4d292cd4e53e9209377ccfb535b37248982b6e0", "filename": "src/lvalue.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e0d8fd26a2a6a31ba621c8735493b189810daf11/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d8fd26a2a6a31ba621c8735493b189810daf11/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=e0d8fd26a2a6a31ba621c8735493b189810daf11", "patch": "@@ -195,6 +195,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 (Size::from_bytes(field * elem_size), false)\n             }\n \n+            // We treat arrays + fixed sized indexing like field accesses\n+            Array { .. } => {\n+                let field = field_index as u64;\n+                let elem_size = match base_ty.sty {\n+                    ty::TyArray(elem_ty, n) => {\n+                        assert!(field < n as u64);\n+                        self.type_size(elem_ty)?.expect(\"array elements are sized\") as u64\n+                    },\n+                    _ => bug!(\"lvalue_field: got Array layout but non-array type {:?}\", base_ty),\n+                };\n+                (Size::from_bytes(field * elem_size), false)\n+            }\n+\n             _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n         };\n \n@@ -205,6 +218,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     assert!(field.is_none(), \"local can't be ByRef and have a field offset\");\n                     (ptr, LvalueExtra::None)\n                 },\n+                Value::ByVal(PrimVal::Undef) => {\n+                    // FIXME: add some logic for when to not allocate\n+                    (self.force_allocation(base)?.to_ptr(), LvalueExtra::None)\n+                },\n                 Value::ByVal(_) => {\n                     assert_eq!(offset.bytes(), 0, \"ByVal can only have 1 non zst field with offset 0\");\n                     return Ok(base);"}, {"sha": "4fb3968161343736011686f36f9015bc0c0a1a68", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e0d8fd26a2a6a31ba621c8735493b189810daf11/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d8fd26a2a6a31ba621c8735493b189810daf11/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=e0d8fd26a2a6a31ba621c8735493b189810daf11", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::ty::layout::{Layout, Size};\n+use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, BareFnTy};\n use syntax::codemap::Span;\n@@ -215,29 +215,28 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let dest_layout = self.type_layout(dest_ty)?;\n                         trace!(\"layout({:?}) = {:#?}\", dest_ty, dest_layout);\n                         match *dest_layout {\n-                            Layout::Univariant { ref variant, .. } => {\n+                            Layout::Univariant { .. } => {\n                                 let disr_val = v.disr_val.to_u128_unchecked();\n                                 assert_eq!(disr_val, 0);\n-                                let offsets = variant.offsets.iter().map(|s| s.bytes());\n-\n-                                self.assign_fields(lvalue, offsets, args)?;\n+                                self.assign_fields(lvalue, dest_ty, args)?;\n                             },\n                             Layout::General { discr, ref variants, .. } => {\n                                 let disr_val = v.disr_val.to_u128_unchecked();\n                                 let discr_size = discr.size().bytes();\n                                 self.assign_discr_and_fields(\n                                     lvalue,\n-                                    variants[disr_val as usize].offsets.iter().cloned().map(Size::bytes),\n+                                    dest_ty,\n+                                    variants[disr_val as usize].offsets[0].bytes(),\n                                     args,\n                                     disr_val,\n+                                    disr_val as usize,\n                                     discr_size,\n                                 )?;\n                             },\n-                            Layout::StructWrappedNullablePointer { nndiscr, ref nonnull, ref discrfield, .. } => {\n+                            Layout::StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n                                 let disr_val = v.disr_val.to_u128_unchecked();\n                                 if nndiscr as u128 == disr_val {\n-                                    let offsets = nonnull.offsets.iter().map(|s| s.bytes());\n-                                    self.assign_fields(lvalue, offsets, args)?;\n+                                    self.assign_fields(lvalue, dest_ty, args)?;\n                                 } else {\n                                     for (_, ty) in args {\n                                         assert_eq!(self.type_size(ty)?, Some(0));\n@@ -501,13 +500,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 (&ty::TyTuple(fields, _),\n                  &Layout::Univariant { ref variant, .. }) => {\n                     let offsets = variant.offsets.iter().map(|s| s.bytes());\n-                    let last_ptr = match last {\n-                        Value::ByRef(ptr) => ptr,\n-                        _ => bug!(\"rust-call ABI tuple argument wasn't Value::ByRef\"),\n-                    };\n-                    for (offset, ty) in offsets.zip(fields) {\n-                        let arg = Value::ByRef(last_ptr.offset(offset));\n-                        args.push((arg, ty));\n+                    match last {\n+                        Value::ByRef(last_ptr) => {\n+                            for (offset, ty) in offsets.zip(fields) {\n+                                let arg = Value::ByRef(last_ptr.offset(offset));\n+                                args.push((arg, ty));\n+                            }\n+                        },\n+                        // propagate undefs\n+                        undef @ Value::ByVal(PrimVal::Undef) => {\n+                            for field_ty in fields {\n+                                args.push((undef, field_ty));\n+                            }\n+                        },\n+                        _ => bug!(\"rust-call ABI tuple argument was {:?}\", last),\n                     }\n                 }\n                 ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),"}]}