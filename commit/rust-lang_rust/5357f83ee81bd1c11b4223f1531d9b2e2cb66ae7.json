{"sha": "5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNTdmODNlZTgxYmQxYzExYjQyMjNmMTUzMWQ5YjJlMmNiNjZhZTc=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-02-17T01:32:25Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-10T22:18:04Z"}, "message": "[Miri] Use a session variable instead of checking for an env var always\n\nIn CTFE heavy code, checking the env var everytime is inefficient. We\ncan do a lot better by using a `Session` variable instead.", "tree": {"sha": "4fde6e92e2f5558bddb5559aa287eab0b951181b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fde6e92e2f5558bddb5559aa287eab0b951181b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "html_url": "https://github.com/rust-lang/rust/commit/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd155df0a69338757ca39a2a606a6accb7b8d342", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd155df0a69338757ca39a2a606a6accb7b8d342", "html_url": "https://github.com/rust-lang/rust/commit/dd155df0a69338757ca39a2a606a6accb7b8d342"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "0b33408edf02d0cb31c06a436773dc68325b71f0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "patch": "@@ -5,15 +5,18 @@ use crate::mir;\n use crate::mir::interpret::ConstValue;\n use crate::ty::layout::{Align, LayoutError, Size};\n use crate::ty::query::TyCtxtAt;\n+use crate::ty::tls;\n use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n+use rustc_data_structures::sync::Lock;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_macros::HashStable;\n+use rustc_session::CtfeBacktrace;\n use rustc_span::{Pos, Span};\n use rustc_target::spec::abi::Abi;\n-use std::{any::Any, env, fmt};\n+use std::{any::Any, fmt};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n@@ -257,21 +260,25 @@ impl From<ErrorHandled> for InterpErrorInfo<'_> {\n \n impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n     fn from(kind: InterpError<'tcx>) -> Self {\n-        let backtrace = match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n-            // Matching `RUST_BACKTRACE` -- we treat \"0\" the same as \"not present\".\n-            Ok(ref val) if val != \"0\" => {\n-                let mut backtrace = Backtrace::new_unresolved();\n+        let capture_backtrace = tls::with_context_opt(|ctxt| {\n+            if let Some(ctxt) = ctxt {\n+                *Lock::borrow(&ctxt.tcx.sess.ctfe_backtrace)\n+            } else {\n+                CtfeBacktrace::Disabled\n+            }\n+        });\n \n-                if val == \"immediate\" {\n-                    // Print it now.\n-                    print_backtrace(&mut backtrace);\n-                    None\n-                } else {\n-                    Some(Box::new(backtrace))\n-                }\n+        let backtrace = match capture_backtrace {\n+            CtfeBacktrace::Disabled => None,\n+            CtfeBacktrace::Capture => Some(Box::new(Backtrace::new_unresolved())),\n+            CtfeBacktrace::Immediate => {\n+                // Print it now.\n+                let mut backtrace = Backtrace::new_unresolved();\n+                print_backtrace(&mut backtrace);\n+                None\n             }\n-            _ => None,\n         };\n+\n         InterpErrorInfo { kind, backtrace }\n     }\n }"}, {"sha": "8cda95783a8a9544f5d152b5fb23dd58936ce5c6", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "patch": "@@ -49,6 +49,18 @@ pub struct OptimizationFuel {\n     out_of_fuel: bool,\n }\n \n+/// The behavior of the CTFE engine when an error occurs with regards to backtraces.\n+#[derive(Clone, Copy)]\n+pub enum CtfeBacktrace {\n+    /// Do nothing special, return the error as usual without a backtrace.\n+    Disabled,\n+    /// Capture a backtrace at the point the error is created and return it in the error\n+    /// (to be printed later if/when the error ever actually gets shown to the user).\n+    Capture,\n+    /// Capture a backtrace at the point the error is created and immediately print it out.\n+    Immediate,\n+}\n+\n /// Represents the data associated with a compilation\n /// session for a single crate.\n pub struct Session {\n@@ -139,6 +151,11 @@ pub struct Session {\n     /// Path for libraries that will take preference over libraries shipped by Rust.\n     /// Used by windows-gnu targets to priortize system mingw-w64 libraries.\n     pub system_library_path: OneThread<RefCell<Option<Option<PathBuf>>>>,\n+\n+    /// Tracks the current behavior of the CTFE engine when an error occurs.\n+    /// Options range from returning the error without a backtrace to returning an error\n+    /// and immediately printing the backtrace to stderr.\n+    pub ctfe_backtrace: Lock<CtfeBacktrace>,\n }\n \n pub struct PerfStats {\n@@ -1040,6 +1057,12 @@ fn build_session_(\n         sopts.debugging_opts.time_passes,\n     );\n \n+    let ctfe_backtrace = Lock::new(match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n+        Ok(ref val) if val == \"immediate\" => CtfeBacktrace::Immediate,\n+        Ok(ref val) if val != \"0\" => CtfeBacktrace::Capture,\n+        _ => CtfeBacktrace::Disabled,\n+    });\n+\n     let sess = Session {\n         target: target_cfg,\n         host,\n@@ -1078,6 +1101,7 @@ fn build_session_(\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),\n         system_library_path: OneThread::new(RefCell::new(Default::default())),\n+        ctfe_backtrace,\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}]}