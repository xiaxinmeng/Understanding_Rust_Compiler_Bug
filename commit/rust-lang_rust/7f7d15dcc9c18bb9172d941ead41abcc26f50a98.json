{"sha": "7f7d15dcc9c18bb9172d941ead41abcc26f50a98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmN2QxNWRjYzljMThiYjkxNzJkOTQxZWFkNDFhYmNjMjZmNTBhOTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-22T19:56:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-23T10:42:15Z"}, "message": "Check for other unused tidy check directives", "tree": {"sha": "063248df42964ee475c276bfb13fc1a975e5f78e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/063248df42964ee475c276bfb13fc1a975e5f78e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7d15dcc9c18bb9172d941ead41abcc26f50a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7d15dcc9c18bb9172d941ead41abcc26f50a98", "html_url": "https://github.com/rust-lang/rust/commit/7f7d15dcc9c18bb9172d941ead41abcc26f50a98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7d15dcc9c18bb9172d941ead41abcc26f50a98/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "html_url": "https://github.com/rust-lang/rust/commit/497dcfa221b8bccf712b6f20a0ef038afbca3e4c"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "9ab88d6e9aeac8049dc68c1c39a7b4325319cf25", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 70, "deletions": 28, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7f7d15dcc9c18bb9172d941ead41abcc26f50a98/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7d15dcc9c18bb9172d941ead41abcc26f50a98/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=7f7d15dcc9c18bb9172d941ead41abcc26f50a98", "patch": "@@ -9,8 +9,8 @@\n //! * No `TODO` or `XXX` directives.\n //! * No unexplained ` ```ignore ` or ` ```rust,ignore ` doc tests.\n //!\n-//! A number of these checks can be opted-out of with various directives like\n-//! `// ignore-tidy-copyright`.\n+//! A number of these checks can be opted-out of with various directives of the form:\n+//! `// ignore-tidy-CHECK-NAME`.\n \n use std::fs::File;\n use std::io::prelude::*;\n@@ -90,9 +90,34 @@ fn long_line_is_ok(line: &str) -> bool {\n     false\n }\n \n-fn contains_ignore_directive(contents: &String, check: &str) -> bool {\n-    contents.contains(&format!(\"// ignore-tidy-{}\", check)) ||\n-        contents.contains(&format!(\"# ignore-tidy-{}\", check))\n+enum Directive {\n+    /// By default, tidy always warns against style issues.\n+    Deny,\n+\n+    /// `Ignore(false)` means that an `ignore-tidy-*` directive\n+    /// has been provided, but is unnecessary. `Ignore(true)`\n+    /// means that it is necessary (i.e. a warning would be\n+    /// produced if `ignore-tidy-*` was not present).\n+    Ignore(bool),\n+}\n+\n+fn contains_ignore_directive(contents: &String, check: &str) -> Directive {\n+    if contents.contains(&format!(\"// ignore-tidy-{}\", check)) ||\n+        contents.contains(&format!(\"# ignore-tidy-{}\", check)) {\n+        Directive::Ignore(false)\n+    } else {\n+        Directive::Deny\n+    }\n+}\n+\n+macro_rules! suppressible_tidy_err {\n+    ($err:ident, $skip:ident, $msg:expr) => {\n+        if let Directive::Deny = $skip {\n+            $err($msg);\n+        } else {\n+            $skip = Directive::Ignore(true);\n+        }\n+    };\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n@@ -112,32 +137,32 @@ pub fn check(path: &Path, bad: &mut bool) {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }\n \n-        let skip_cr = contains_ignore_directive(&contents, \"cr\");\n-        let skip_tab = contains_ignore_directive(&contents, \"tab\");\n-        let skip_length = contains_ignore_directive(&contents, \"linelength\");\n-        let skip_end_whitespace = contains_ignore_directive(&contents, \"end-whitespace\");\n-        let skip_copyright = contains_ignore_directive(&contents, \"copyright\");\n+        let mut skip_cr = contains_ignore_directive(&contents, \"cr\");\n+        let mut skip_tab = contains_ignore_directive(&contents, \"tab\");\n+        let mut skip_length = contains_ignore_directive(&contents, \"linelength\");\n+        let mut skip_end_whitespace = contains_ignore_directive(&contents, \"end-whitespace\");\n+        let mut skip_copyright = contains_ignore_directive(&contents, \"copyright\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n-        let mut contained_long_line = false;\n         for (i, line) in contents.split('\\n').enumerate() {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n             if line.chars().count() > COLS && !long_line_is_ok(line) {\n-                contained_long_line = true;\n-                if !skip_length {\n-                    err(&format!(\"line longer than {} chars\", COLS));\n-                }\n+                suppressible_tidy_err!(\n+                    err,\n+                    skip_length,\n+                    &format!(\"line longer than {} chars\", COLS)\n+                );\n             }\n-            if !skip_tab && line.contains('\\t') {\n-                err(\"tab character\");\n+            if line.contains('\\t') {\n+                suppressible_tidy_err!(err, skip_tab, \"tab character\");\n             }\n-            if !skip_end_whitespace && (line.ends_with(' ') || line.ends_with('\\t')) {\n-                err(\"trailing whitespace\");\n+            if line.ends_with(' ') || line.ends_with('\\t') {\n+                suppressible_tidy_err!(err, skip_end_whitespace, \"trailing whitespace\");\n             }\n-            if !skip_cr && line.contains('\\r') {\n-                err(\"CR character\");\n+            if line.contains('\\r') {\n+                suppressible_tidy_err!(err, skip_cr, \"CR character\");\n             }\n             if filename != \"style.rs\" {\n                 if line.contains(\"TODO\") {\n@@ -147,12 +172,16 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     err(\"XXX is deprecated; use FIXME\")\n                 }\n             }\n-            if !skip_copyright && (line.starts_with(\"// Copyright\") ||\n-                                   line.starts_with(\"# Copyright\") ||\n-                                   line.starts_with(\"Copyright\"))\n-                               && (line.contains(\"Rust Developers\") ||\n-                                   line.contains(\"Rust Project Developers\")) {\n-                err(\"copyright notices attributed to the Rust Project Developers are deprecated\");\n+            if (line.starts_with(\"// Copyright\") ||\n+                line.starts_with(\"# Copyright\") ||\n+                line.starts_with(\"Copyright\"))\n+                && (line.contains(\"Rust Developers\") ||\n+                    line.contains(\"Rust Project Developers\")) {\n+                suppressible_tidy_err!(\n+                    err,\n+                    skip_copyright,\n+                    \"copyright notices attributed to the Rust Project Developers are deprecated\"\n+                );\n             }\n             if line.ends_with(\"```ignore\") || line.ends_with(\"```rust,ignore\") {\n                 err(UNEXPLAINED_IGNORE_DOCTEST_INFO);\n@@ -177,8 +206,21 @@ pub fn check(path: &Path, bad: &mut bool) {\n             1 => {}\n             n => tidy_error!(bad, \"{}: too many trailing newlines ({})\", file.display(), n),\n         };\n-        if !contained_long_line && skip_length {\n+\n+        if let Directive::Ignore(false) = skip_cr {\n+            tidy_error!(bad, \"{}: ignoring CR characters unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_tab {\n+            tidy_error!(bad, \"{}: ignoring tab characters unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_length {\n             tidy_error!(bad, \"{}: ignoring line length unnecessarily\", file.display());\n         }\n+        if let Directive::Ignore(false) = skip_end_whitespace {\n+            tidy_error!(bad, \"{}: ignoring trailing whitespace unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_copyright {\n+            tidy_error!(bad, \"{}: ignoring copyright unnecessarily\", file.display());\n+        }\n     })\n }"}]}