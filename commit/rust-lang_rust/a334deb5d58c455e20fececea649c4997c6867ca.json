{"sha": "a334deb5d58c455e20fececea649c4997c6867ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMzRkZWI1ZDU4YzQ1NWUyMGZlY2VjZWE2NDljNDk5N2M2ODY3Y2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-01T04:08:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-01T05:00:19Z"}, "message": "change how we print and explain region types", "tree": {"sha": "7b176ebcfd37e07d86e91d576293be2ccb62a716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b176ebcfd37e07d86e91d576293be2ccb62a716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a334deb5d58c455e20fececea649c4997c6867ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a334deb5d58c455e20fececea649c4997c6867ca", "html_url": "https://github.com/rust-lang/rust/commit/a334deb5d58c455e20fececea649c4997c6867ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a334deb5d58c455e20fececea649c4997c6867ca/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5437c0bbf65204390762acfc544fb29b3150619", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5437c0bbf65204390762acfc544fb29b3150619", "html_url": "https://github.com/rust-lang/rust/commit/c5437c0bbf65204390762acfc544fb29b3150619"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "aba8d250b2089b168dc5687cc90e1d26035720a3", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a334deb5d58c455e20fececea649c4997c6867ca/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a334deb5d58c455e20fececea649c4997c6867ca/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a334deb5d58c455e20fececea649c4997c6867ca", "patch": "@@ -9,8 +9,7 @@ import syntax::ast_util::{is_local, local_def, split_class_items,\n                           new_def_hash};\n import syntax::codemap::span;\n import metadata::csearch;\n-import util::ppaux::region_to_str;\n-import util::ppaux::vstore_to_str;\n+import util::ppaux::{region_to_str, explain_region, vstore_to_str};\n import middle::lint;\n import middle::lint::{get_lint_level, allow};\n import syntax::ast::*;\n@@ -2590,10 +2589,9 @@ fn type_err_to_str(cx: ctxt, err: type_err) -> ~str {\n             ~\" but found \" + mode_to_str(a_mode);\n       }\n       terr_regions_differ(subregion, superregion) {\n-        ret fmt!{\"references with lifetime %s do not necessarily \\\n-                  outlive references with lifetime %s\",\n-                 region_to_str(cx, subregion),\n-                 region_to_str(cx, superregion)};\n+        ret fmt!{\"%s does not necessarily outlive %s\",\n+                 explain_region(cx, subregion),\n+                 explain_region(cx, superregion)};\n       }\n       terr_vstores_differ(k, e_vs, a_vs) {\n         ret fmt!{\"%s storage differs: expected %s but found %s\","}, {"sha": "f6f0cf8b363a94badd118d9bbb56c570e99039b7", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a334deb5d58c455e20fececea649c4997c6867ca/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a334deb5d58c455e20fececea649c4997c6867ca/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=a334deb5d58c455e20fececea649c4997c6867ca", "patch": "@@ -3,7 +3,8 @@ import middle::ty;\n import middle::ty::{arg, canon_mode};\n import middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid};\n import middle::ty::{ck_block, ck_box, ck_uniq, ctxt, field, method};\n-import middle::ty::{mt, re_bound, re_free, re_scope, re_var, region, t};\n+import middle::ty::{mt, t};\n+import middle::ty::{re_bound, re_free, re_scope, re_var, re_static, region};\n import middle::ty::{ty_bool, ty_bot, ty_box, ty_class, ty_enum};\n import middle::ty::{ty_estr, ty_evec, ty_float, ty_fn, ty_trait, ty_int};\n import middle::ty::{ty_nil, ty_opaque_box, ty_opaque_closure_ptr, ty_param};\n@@ -12,13 +13,68 @@ import middle::ty::{ty_type, ty_uniq, ty_uint, ty_var, ty_var_integral};\n import middle::ty::{ty_unboxed_vec, vid};\n import metadata::encoder;\n import syntax::codemap;\n+import syntax::codemap::span;\n import syntax::print::pprust;\n import syntax::print::pprust::{path_to_str, proto_to_str,\n                                mode_to_str, purity_to_str};\n import syntax::{ast, ast_util};\n import syntax::ast_map;\n import driver::session::session;\n \n+/// Returns a string like \"reference valid for the block at 27:31 in foo.rs\"\n+/// that attempts to explain a lifetime in a way it might plausibly be\n+/// understood.\n+fn explain_region(cx: ctxt, region: ty::region) -> ~str {\n+    ret alt region {\n+      re_scope(node_id) => {\n+        let scope_str = alt cx.items.find(node_id) {\n+          some(ast_map::node_block(blk)) => {\n+            explain_span(cx, ~\"block\", blk.span)\n+          }\n+          some(ast_map::node_expr(expr)) => {\n+            alt expr.node {\n+              ast::expr_call(*) => { explain_span(cx, ~\"call\", expr.span) }\n+              ast::expr_alt(*) => { explain_span(cx, ~\"alt\", expr.span) }\n+              _ => { explain_span(cx, ~\"expression\", expr.span) }\n+            }\n+          }\n+          some(_) | none => {\n+            // this really should not happen\n+            fmt!{\"unknown scope: %d.  Please report a bug.\", node_id}\n+          }\n+        };\n+        fmt!{\"reference valid for the %s\", scope_str}\n+      }\n+\n+      re_free(id, br) => {\n+        alt cx.items.find(id) {\n+          some(ast_map::node_block(blk)) => {\n+            fmt!{\"reference with lifetime %s as defined on %s\",\n+                 bound_region_to_str(cx, br),\n+                 explain_span(cx, ~\"the block\", blk.span)}\n+          }\n+          some(_) | none => {\n+            // this really should not happen\n+            fmt!{\"reference with lifetime %s as defined on node %d\",\n+                 bound_region_to_str(cx, br), id}\n+          }\n+        }\n+      }\n+\n+      re_static => { ~\"reference to static data\" }\n+\n+      // I believe these cases should not occur.\n+      re_var(_) | re_bound(_) => {\n+        fmt!{\"reference with lifetime %?\", region}\n+      }\n+    };\n+\n+    fn explain_span(cx: ctxt, heading: ~str, span: span) -> ~str {\n+        let lo = codemap::lookup_char_pos_adj(cx.sess.codemap, span.lo);\n+        fmt!{\"%s at %u:%u\", heading, lo.line, lo.col}\n+    }\n+}\n+\n fn bound_region_to_str(cx: ctxt, br: bound_region) -> ~str {\n     alt br {\n       br_anon                        => { ~\"&\" }\n@@ -79,8 +135,16 @@ fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> ~str {\n \n fn region_to_str(cx: ctxt, region: region) -> ~str {\n     alt region {\n-      re_scope(node_id) { fmt!{\"&%s\", re_scope_id_to_str(cx, node_id)} }\n-      re_bound(br) { bound_region_to_str(cx, br) }\n+      re_scope(node_id) {\n+        if cx.sess.ppregions() {\n+            fmt!{\"&%s\", re_scope_id_to_str(cx, node_id)}\n+        } else {\n+            ~\"&\"\n+        }\n+      }\n+      re_bound(br) {\n+          bound_region_to_str(cx, br)\n+      }\n       re_free(id, br) {\n         if cx.sess.ppregions() {\n             // For debugging, this version is sometimes helpful:"}, {"sha": "bd6e3644556d925564df36e4d0dc06795ff51294", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a334deb5d58c455e20fececea649c4997c6867ca/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a334deb5d58c455e20fececea649c4997c6867ca/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=a334deb5d58c455e20fececea649c4997c6867ca", "patch": "@@ -7,12 +7,12 @@ fn nested(x: &x/int) {\n     ignore(fn&(z: &z/int) {\n         ay = x;\n         ay = &y;\n-        ay = z; //~ ERROR references with lifetime\n+        ay = z; //~ ERROR mismatched types\n     });\n \n     ignore(fn&(z: &z/int) -> &z/int {\n-        if false { ret x; }  //~ ERROR references with lifetime\n-        if false { ret ay; } //~ ERROR references with lifetime\n+        if false { ret x; }  //~ ERROR mismatched types\n+        if false { ret ay; } //~ ERROR mismatched types\n         ret z;\n     });\n }"}, {"sha": "c17319ca7bbda085fa1a85102a999adb6c5db8d5", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a334deb5d58c455e20fececea649c4997c6867ca/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a334deb5d58c455e20fececea649c4997c6867ca/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=a334deb5d58c455e20fececea649c4997c6867ca", "patch": "@@ -41,7 +41,7 @@ fn nested(x: &x/int) {  // (1)\n         // let f: &x/int = foo(&z, &z, |_x, _y, z| z ); // ERROR mismatched types: expected `&x/int` but found\n \n         foo(x, &z, |x, _y, _z| x ); //~ ERROR mismatched types: expected `&z/int` but found `&x/int`\n-        foo(x, &z, |_x, y, _z| y ); //~ ERROR mismatched types: expected `&z/int` but found `&<expression at\n+        foo(x, &z, |_x, y, _z| y ); //~ ERROR mismatched types: expected `&z/int` but found `&\n     }\n }\n "}]}