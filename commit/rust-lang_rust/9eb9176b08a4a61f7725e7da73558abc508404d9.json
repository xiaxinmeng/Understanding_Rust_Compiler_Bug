{"sha": "9eb9176b08a4a61f7725e7da73558abc508404d9", "node_id": "C_kwDOAAsO6NoAKDllYjkxNzZiMDhhNGE2MWY3NzI1ZTdkYTczNTU4YWJjNTA4NDA0ZDk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-15T09:43:04Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-06T18:59:45Z"}, "message": "Simplify span fallback", "tree": {"sha": "83daa40dc279589ffccd625d27d9cfc5687dd459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83daa40dc279589ffccd625d27d9cfc5687dd459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb9176b08a4a61f7725e7da73558abc508404d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb9176b08a4a61f7725e7da73558abc508404d9", "html_url": "https://github.com/rust-lang/rust/commit/9eb9176b08a4a61f7725e7da73558abc508404d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb9176b08a4a61f7725e7da73558abc508404d9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9bf119c4f98f40eb84b385a6d3239c358b054cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bf119c4f98f40eb84b385a6d3239c358b054cb", "html_url": "https://github.com/rust-lang/rust/commit/b9bf119c4f98f40eb84b385a6d3239c358b054cb"}], "stats": {"total": 70, "additions": 23, "deletions": 47}, "files": [{"sha": "cb5aadce8e3d7cf0f51f513fc4378964ae1d46a8", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 23, "deletions": 47, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9eb9176b08a4a61f7725e7da73558abc508404d9/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb9176b08a4a61f7725e7da73558abc508404d9/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=9eb9176b08a4a61f7725e7da73558abc508404d9", "patch": "@@ -24,7 +24,7 @@ use rustc_lint_defs::pluralize;\n \n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::sync::Lrc;\n-use rustc_error_messages::FluentArgs;\n+use rustc_error_messages::{FluentArgs, SpanLabel};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n@@ -2202,46 +2202,28 @@ impl FileWithAnnotatedLines {\n         let mut multiline_annotations = vec![];\n \n         if let Some(ref sm) = emitter.source_map() {\n-            for span_label in msp.span_labels() {\n-                let fixup_lo_hi = |span: Span| {\n-                    let lo = sm.lookup_char_pos(span.lo());\n-                    let mut hi = sm.lookup_char_pos(span.hi());\n-\n-                    // Watch out for \"empty spans\". If we get a span like 6..6, we\n-                    // want to just display a `^` at 6, so convert that to\n-                    // 6..7. This is degenerate input, but it's best to degrade\n-                    // gracefully -- and the parser likes to supply a span like\n-                    // that for EOF, in particular.\n-\n-                    if lo.col_display == hi.col_display && lo.line == hi.line {\n-                        hi.col_display += 1;\n-                    }\n-                    (lo, hi)\n+            for SpanLabel { span, is_primary, label } in msp.span_labels() {\n+                // If we don't have a useful span, pick the primary span if that exists.\n+                // Worst case we'll just print an error at the top of the main file.\n+                let span = match (span.is_dummy(), msp.primary_span()) {\n+                    (_, None) | (false, _) => span,\n+                    (true, Some(span)) => span,\n                 };\n \n-                if span_label.span.is_dummy() {\n-                    if let Some(span) = msp.primary_span() {\n-                        // if we don't know where to render the annotation, emit it as a note\n-                        // on the primary span.\n-\n-                        let (lo, hi) = fixup_lo_hi(span);\n-\n-                        let ann = Annotation {\n-                            start_col: lo.col_display,\n-                            end_col: hi.col_display,\n-                            is_primary: span_label.is_primary,\n-                            label: span_label\n-                                .label\n-                                .as_ref()\n-                                .map(|m| emitter.translate_message(m, args).to_string()),\n-                            annotation_type: AnnotationType::Singleline,\n-                        };\n-                        add_annotation_to_file(&mut output, lo.file, lo.line, ann);\n-                    }\n-                    continue;\n+                let lo = sm.lookup_char_pos(span.lo());\n+                let mut hi = sm.lookup_char_pos(span.hi());\n+\n+                // Watch out for \"empty spans\". If we get a span like 6..6, we\n+                // want to just display a `^` at 6, so convert that to\n+                // 6..7. This is degenerate input, but it's best to degrade\n+                // gracefully -- and the parser likes to supply a span like\n+                // that for EOF, in particular.\n+\n+                if lo.col_display == hi.col_display && lo.line == hi.line {\n+                    hi.col_display += 1;\n                 }\n \n-                let (lo, hi) = fixup_lo_hi(span_label.span);\n+                let label = label.as_ref().map(|m| emitter.translate_message(m, args).to_string());\n \n                 if lo.line != hi.line {\n                     let ml = MultilineAnnotation {\n@@ -2250,23 +2232,17 @@ impl FileWithAnnotatedLines {\n                         line_end: hi.line,\n                         start_col: lo.col_display,\n                         end_col: hi.col_display,\n-                        is_primary: span_label.is_primary,\n-                        label: span_label\n-                            .label\n-                            .as_ref()\n-                            .map(|m| emitter.translate_message(m, args).to_string()),\n+                        is_primary,\n+                        label,\n                         overlaps_exactly: false,\n                     };\n                     multiline_annotations.push((lo.file, ml));\n                 } else {\n                     let ann = Annotation {\n                         start_col: lo.col_display,\n                         end_col: hi.col_display,\n-                        is_primary: span_label.is_primary,\n-                        label: span_label\n-                            .label\n-                            .as_ref()\n-                            .map(|m| emitter.translate_message(m, args).to_string()),\n+                        is_primary,\n+                        label,\n                         annotation_type: AnnotationType::Singleline,\n                     };\n                     add_annotation_to_file(&mut output, lo.file, lo.line, ann);"}]}