{"sha": "eb46afb21683bc54f86c556bacff7c9bd82f9933", "node_id": "C_kwDOAAsO6NoAKGViNDZhZmIyMTY4M2JjNTRmODZjNTU2YmFjZmY3YzliZDgyZjk5MzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T00:22:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T00:22:03Z"}, "message": "Rollup merge of #108629 - notriddle:notriddle/item-type-advanced, r=GuillaumeGomez\n\nrustdoc: add support for type filters in arguments and generics\n\nThis makes sense, since the search index has the information in it, and it's more useful for function signature searches since a function signature search's item type is, by definition, some type of function (there's more than one, but not very many).", "tree": {"sha": "00fad42a4e13076775241171fe17d4b8ede31f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00fad42a4e13076775241171fe17d4b8ede31f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb46afb21683bc54f86c556bacff7c9bd82f9933", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHO0rCRBK7hj4Ov3rIwAAQ40IAEZ2ONGkcFxFNF1IrW6RA5a3\ngAmyPx0gg6tWOJVlO7qvYFD9WrISWV4Q/V22HQf98ey7fxnzHBAnr3eKUdOHEjGk\n2d66atVwQR9k0EC5N1RkVioXRMRfiyci9vr8dBdVwYN3/iGs+7DQymZdcb2ysH36\nvkT930Yagq/Ryo2CJUDS2mEmCPrFGzCHsQnFtbAXRnN4UD3o6bIP9Tjpf4/OMlYn\n3T0Wo100KRaYGB2i82j8AqlNt1UNwLd+NcggkDq0/LI2xsKcQqo+eoCNpzW+umGN\nBvYQM/CSQ18wrNaBbIXEshmOFAZWLS8jGnPjgp41zbNLYEn1a8lMnFl8MYNjCZE=\n=pE5t\n-----END PGP SIGNATURE-----\n", "payload": "tree 00fad42a4e13076775241171fe17d4b8ede31f01\nparent 1459b3128e288a85fcc4dd1fee7ada2cdcf28794\nparent cae43859d3149234fc65d5dac5df11e336b850ad\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679617323 +0100\ncommitter GitHub <noreply@github.com> 1679617323 +0100\n\nRollup merge of #108629 - notriddle:notriddle/item-type-advanced, r=GuillaumeGomez\n\nrustdoc: add support for type filters in arguments and generics\n\nThis makes sense, since the search index has the information in it, and it's more useful for function signature searches since a function signature search's item type is, by definition, some type of function (there's more than one, but not very many).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb46afb21683bc54f86c556bacff7c9bd82f9933", "html_url": "https://github.com/rust-lang/rust/commit/eb46afb21683bc54f86c556bacff7c9bd82f9933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb46afb21683bc54f86c556bacff7c9bd82f9933/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "url": "https://api.github.com/repos/rust-lang/rust/commits/1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "html_url": "https://github.com/rust-lang/rust/commit/1459b3128e288a85fcc4dd1fee7ada2cdcf28794"}, {"sha": "cae43859d3149234fc65d5dac5df11e336b850ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae43859d3149234fc65d5dac5df11e336b850ad", "html_url": "https://github.com/rust-lang/rust/commit/cae43859d3149234fc65d5dac5df11e336b850ad"}], "stats": {"total": 468, "additions": 313, "deletions": 155}, "files": [{"sha": "2957916d56ccb1c5cd00d5e5ad86fb103807f48d", "filename": "src/doc/rustdoc/src/how-to-read-rustdoc.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -80,13 +80,20 @@ functions, and \"In Return Types\" shows matches in the return types of functions.\n Both are very useful when looking for a function whose name you can't quite\n bring to mind when you know the type you have or want.\n \n-When typing in the search bar, you can prefix your search term with a type\n-followed by a colon (such as `mod:`) to restrict the results to just that\n-kind of item. (The available items are listed in the help popup.)\n-\n-Searching for `println!` will search for a macro named `println`, just like\n+Names in the search interface can be prefixed with an item type followed by a\n+colon (such as `mod:`) to restrict the results to just that kind of item. Also,\n+searching for `println!` will search for a macro named `println`, just like\n searching for `macro:println` does.\n \n+Function signature searches can query generics, wrapped in angle brackets, and\n+traits are normalized like types in the search engine. For example, a function\n+with the signature `fn my_function<I: Iterator<Item=u32>>(input: I) -> usize`\n+can be matched with the following queries:\n+\n+* `Iterator<u32> -> usize`\n+* `trait:Iterator<primitive:u32> -> primitive:usize`\n+* `Iterator -> usize`\n+\n ### Changing displayed theme\n \n You can change the displayed theme by opening the settings menu (the gear"}, {"sha": "840ed8e1080b7a37ba0522ad9f33a85436008d17", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 111, "deletions": 53, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -354,12 +354,15 @@ function initSearch(rawSearchIndex) {\n         if (isInGenerics) {\n             parserState.genericsElems += 1;\n         }\n+        const typeFilter = parserState.typeFilter;\n+        parserState.typeFilter = null;\n         return {\n             name: name,\n             fullPath: pathSegments,\n             pathWithoutLast: pathSegments.slice(0, pathSegments.length - 1),\n             pathLast: pathSegments[pathSegments.length - 1],\n             generics: generics,\n+            typeFilter,\n         };\n     }\n \n@@ -495,6 +498,11 @@ function initSearch(rawSearchIndex) {\n      */\n     function getItemsBefore(query, parserState, elems, endChar) {\n         let foundStopChar = true;\n+        let start = parserState.pos;\n+\n+        // If this is a generic, keep the outer item's type filter around.\n+        const oldTypeFilter = parserState.typeFilter;\n+        parserState.typeFilter = null;\n \n         while (parserState.pos < parserState.length) {\n             const c = parserState.userQuery[parserState.pos];\n@@ -506,7 +514,25 @@ function initSearch(rawSearchIndex) {\n                 continue;\n             } else if (c === \":\" && isPathStart(parserState)) {\n                 throw [\"Unexpected \", \"::\", \": paths cannot start with \", \"::\"];\n-            } else if (c === \":\" || isEndCharacter(c)) {\n+            }  else if (c === \":\") {\n+                if (parserState.typeFilter !== null) {\n+                    throw [\"Unexpected \", \":\"];\n+                }\n+                if (elems.length === 0) {\n+                    throw [\"Expected type filter before \", \":\"];\n+                } else if (query.literalSearch) {\n+                    throw [\"You cannot use quotes on type filter\"];\n+                }\n+                // The type filter doesn't count as an element since it's a modifier.\n+                const typeFilterElem = elems.pop();\n+                checkExtraTypeFilterCharacters(start, parserState);\n+                parserState.typeFilter = typeFilterElem.name;\n+                parserState.pos += 1;\n+                parserState.totalElems -= 1;\n+                query.literalSearch = false;\n+                foundStopChar = true;\n+                continue;\n+            } else if (isEndCharacter(c)) {\n                 let extra = \"\";\n                 if (endChar === \">\") {\n                     extra = \"<\";\n@@ -540,15 +566,10 @@ function initSearch(rawSearchIndex) {\n                 ];\n             }\n             const posBefore = parserState.pos;\n+            start = parserState.pos;\n             getNextElem(query, parserState, elems, endChar === \">\");\n-            if (endChar !== \"\") {\n-                if (parserState.pos >= parserState.length) {\n-                    throw [\"Unclosed \", \"<\"];\n-                }\n-                const c2 = parserState.userQuery[parserState.pos];\n-                if (!isSeparatorCharacter(c2) && c2 !== endChar) {\n-                    throw [\"Expected \", endChar, \", found \", c2];\n-                }\n+            if (endChar !== \"\" && parserState.pos >= parserState.length) {\n+                throw [\"Unclosed \", \"<\"];\n             }\n             // This case can be encountered if `getNextElem` encountered a \"stop character\" right\n             // from the start. For example if you have `,,` or `<>`. In this case, we simply move up\n@@ -564,6 +585,8 @@ function initSearch(rawSearchIndex) {\n         // We are either at the end of the string or on the `endChar` character, let's move forward\n         // in any case.\n         parserState.pos += 1;\n+\n+        parserState.typeFilter = oldTypeFilter;\n     }\n \n     /**\n@@ -572,10 +595,10 @@ function initSearch(rawSearchIndex) {\n      *\n      * @param {ParserState} parserState\n      */\n-    function checkExtraTypeFilterCharacters(parserState) {\n+    function checkExtraTypeFilterCharacters(start, parserState) {\n         const query = parserState.userQuery;\n \n-        for (let pos = 0; pos < parserState.pos; ++pos) {\n+        for (let pos = start; pos < parserState.pos; ++pos) {\n             if (!isIdentCharacter(query[pos]) && !isWhitespaceCharacter(query[pos])) {\n                 throw [\"Unexpected \", query[pos], \" in type filter\"];\n             }\n@@ -591,6 +614,7 @@ function initSearch(rawSearchIndex) {\n      */\n     function parseInput(query, parserState) {\n         let foundStopChar = true;\n+        let start = parserState.pos;\n \n         while (parserState.pos < parserState.length) {\n             const c = parserState.userQuery[parserState.pos];\n@@ -612,16 +636,15 @@ function initSearch(rawSearchIndex) {\n                 }\n                 if (query.elems.length === 0) {\n                     throw [\"Expected type filter before \", \":\"];\n-                } else if (query.elems.length !== 1 || parserState.totalElems !== 1) {\n-                    throw [\"Unexpected \", \":\"];\n                 } else if (query.literalSearch) {\n                     throw [\"You cannot use quotes on type filter\"];\n                 }\n-                checkExtraTypeFilterCharacters(parserState);\n                 // The type filter doesn't count as an element since it's a modifier.\n-                parserState.typeFilter = query.elems.pop().name;\n+                const typeFilterElem = query.elems.pop();\n+                checkExtraTypeFilterCharacters(start, parserState);\n+                parserState.typeFilter = typeFilterElem.name;\n                 parserState.pos += 1;\n-                parserState.totalElems = 0;\n+                parserState.totalElems -= 1;\n                 query.literalSearch = false;\n                 foundStopChar = true;\n                 continue;\n@@ -653,13 +676,17 @@ function initSearch(rawSearchIndex) {\n                 ];\n             }\n             const before = query.elems.length;\n+            start = parserState.pos;\n             getNextElem(query, parserState, query.elems, false);\n             if (query.elems.length === before) {\n                 // Nothing was added, weird... Let's increase the position to not remain stuck.\n                 parserState.pos += 1;\n             }\n             foundStopChar = false;\n         }\n+        if (parserState.typeFilter !== null) {\n+            throw [\"Unexpected \", \":\", \" (expected path after type filter)\"];\n+        }\n         while (parserState.pos < parserState.length) {\n             if (isReturnArrow(parserState)) {\n                 parserState.pos += 2;\n@@ -687,7 +714,6 @@ function initSearch(rawSearchIndex) {\n         return {\n             original: userQuery,\n             userQuery: userQuery.toLowerCase(),\n-            typeFilter: NO_TYPE_FILTER,\n             elems: [],\n             returned: [],\n             // Total number of \"top\" elements (does not include generics).\n@@ -738,8 +764,8 @@ function initSearch(rawSearchIndex) {\n      *\n      * ident = *(ALPHA / DIGIT / \"_\")\n      * path = ident *(DOUBLE-COLON ident) [!]\n-     * arg = path [generics]\n-     * arg-without-generic = path\n+     * arg = [type-filter *WS COLON *WS] path [generics]\n+     * arg-without-generic = [type-filter *WS COLON *WS] path\n      * type-sep = COMMA/WS *(COMMA/WS)\n      * nonempty-arg-list = *(type-sep) arg *(type-sep arg) *(type-sep)\n      * nonempty-arg-list-without-generics = *(type-sep) arg-without-generic\n@@ -749,7 +775,7 @@ function initSearch(rawSearchIndex) {\n      * return-args = RETURN-ARROW *(type-sep) nonempty-arg-list\n      *\n      * exact-search = [type-filter *WS COLON] [ RETURN-ARROW ] *WS QUOTE ident QUOTE [ generics ]\n-     * type-search = [type-filter *WS COLON] [ nonempty-arg-list ] [ return-args ]\n+     * type-search = [ nonempty-arg-list ] [ return-args ]\n      *\n      * query = *WS (exact-search / type-search) *WS\n      *\n@@ -798,6 +824,20 @@ function initSearch(rawSearchIndex) {\n      * @return {ParsedQuery}    - The parsed query\n      */\n     function parseQuery(userQuery) {\n+        function convertTypeFilterOnElem(elem) {\n+            if (elem.typeFilter !== null) {\n+                let typeFilter = elem.typeFilter;\n+                if (typeFilter === \"const\") {\n+                    typeFilter = \"constant\";\n+                }\n+                elem.typeFilter = itemTypeFromName(typeFilter);\n+            } else {\n+                elem.typeFilter = NO_TYPE_FILTER;\n+            }\n+            for (const elem2 of elem.generics) {\n+                convertTypeFilterOnElem(elem2);\n+            }\n+        }\n         userQuery = userQuery.trim();\n         const parserState = {\n             length: userQuery.length,\n@@ -812,17 +852,15 @@ function initSearch(rawSearchIndex) {\n \n         try {\n             parseInput(query, parserState);\n-            if (parserState.typeFilter !== null) {\n-                let typeFilter = parserState.typeFilter;\n-                if (typeFilter === \"const\") {\n-                    typeFilter = \"constant\";\n-                }\n-                query.typeFilter = itemTypeFromName(typeFilter);\n+            for (const elem of query.elems) {\n+                convertTypeFilterOnElem(elem);\n+            }\n+            for (const elem of query.returned) {\n+                convertTypeFilterOnElem(elem);\n             }\n         } catch (err) {\n             query = newParsedQuery(userQuery);\n             query.error = err;\n-            query.typeFilter = -1;\n             return query;\n         }\n \n@@ -1057,32 +1095,30 @@ function initSearch(rawSearchIndex) {\n             }\n             // The names match, but we need to be sure that all generics kinda\n             // match as well.\n-            let elem_name;\n             if (elem.generics.length > 0 && row.generics.length >= elem.generics.length) {\n                 const elems = Object.create(null);\n                 for (const entry of row.generics) {\n-                    elem_name = entry.name;\n-                    if (elem_name === \"\") {\n+                    if (entry.name === \"\") {\n                         // Pure generic, needs to check into it.\n                         if (checkGenerics(entry, elem, maxEditDistance + 1, maxEditDistance)\n                             !== 0) {\n                             return maxEditDistance + 1;\n                         }\n                         continue;\n                     }\n-                    if (elems[elem_name] === undefined) {\n-                        elems[elem_name] = 0;\n+                    if (elems[entry.name] === undefined) {\n+                        elems[entry.name] = [];\n                     }\n-                    elems[elem_name] += 1;\n+                    elems[entry.name].push(entry.ty);\n                 }\n                 // We need to find the type that matches the most to remove it in order\n                 // to move forward.\n-                for (const generic of elem.generics) {\n+                const handleGeneric = generic => {\n                     let match = null;\n                     if (elems[generic.name]) {\n                         match = generic.name;\n                     } else {\n-                        for (elem_name in elems) {\n+                        for (const elem_name in elems) {\n                             if (!hasOwnPropertyRustdoc(elems, elem_name)) {\n                                 continue;\n                             }\n@@ -1093,12 +1129,32 @@ function initSearch(rawSearchIndex) {\n                         }\n                     }\n                     if (match === null) {\n-                        return maxEditDistance + 1;\n+                        return false;\n                     }\n-                    elems[match] -= 1;\n-                    if (elems[match] === 0) {\n+                    const matchIdx = elems[match].findIndex(tmp_elem =>\n+                        typePassesFilter(generic.typeFilter, tmp_elem));\n+                    if (matchIdx === -1) {\n+                        return false;\n+                    }\n+                    elems[match].splice(matchIdx, 1);\n+                    if (elems[match].length === 0) {\n                         delete elems[match];\n                     }\n+                    return true;\n+                };\n+                // To do the right thing with type filters, we first process generics\n+                // that have them, removing matching ones from the \"bag,\" then do the\n+                // ones with no type filter, which can match any entry regardless of its\n+                // own type.\n+                for (const generic of elem.generics) {\n+                    if (generic.typeFilter !== -1 && !handleGeneric(generic)) {\n+                        return maxEditDistance + 1;\n+                    }\n+                }\n+                for (const generic of elem.generics) {\n+                    if (generic.typeFilter === -1 && !handleGeneric(generic)) {\n+                        return maxEditDistance + 1;\n+                    }\n                 }\n                 return 0;\n             }\n@@ -1145,14 +1201,20 @@ function initSearch(rawSearchIndex) {\n                 return maxEditDistance + 1;\n             }\n \n-            let dist = editDistance(row.name, elem.name, maxEditDistance);\n+            let dist;\n+            if (typePassesFilter(elem.typeFilter, row.ty)) {\n+                dist = editDistance(row.name, elem.name, maxEditDistance);\n+            } else {\n+                dist = maxEditDistance + 1;\n+            }\n             if (literalSearch) {\n                 if (dist !== 0) {\n                     // The name didn't match, let's try to check if the generics do.\n                     if (elem.generics.length === 0) {\n                         const checkGeneric = row.generics.length > 0;\n                         if (checkGeneric && row.generics\n-                            .findIndex(tmp_elem => tmp_elem.name === elem.name) !== -1) {\n+                            .findIndex(tmp_elem => tmp_elem.name === elem.name &&\n+                                typePassesFilter(elem.typeFilter, tmp_elem.ty)) !== -1) {\n                             return 0;\n                         }\n                     }\n@@ -1201,22 +1263,21 @@ function initSearch(rawSearchIndex) {\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem    - The element from the parsed query.\n-         * @param {integer} typeFilter\n+         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n          * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n          *                                              If there is no match, returns\n          *                                              `maxEditDistance + 1` and position: -1.\n          */\n-        function findArg(row, elem, typeFilter, maxEditDistance, skipPositions) {\n+        function findArg(row, elem, maxEditDistance, skipPositions) {\n             let dist = maxEditDistance + 1;\n             let position = -1;\n \n             if (row && row.type && row.type.inputs && row.type.inputs.length > 0) {\n                 let i = 0;\n                 for (const input of row.type.inputs) {\n-                    if (!typePassesFilter(typeFilter, input.ty) ||\n-                        skipPositions.indexOf(i) !== -1) {\n+                    if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n@@ -1245,23 +1306,22 @@ function initSearch(rawSearchIndex) {\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem   - The element from the parsed query.\n-         * @param {integer} typeFilter\n+         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n          * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n          *                                              If there is no match, returns\n          *                                              `maxEditDistance + 1` and position: -1.\n          */\n-        function checkReturned(row, elem, typeFilter, maxEditDistance, skipPositions) {\n+        function checkReturned(row, elem, maxEditDistance, skipPositions) {\n             let dist = maxEditDistance + 1;\n             let position = -1;\n \n             if (row && row.type && row.type.output.length > 0) {\n                 const ret = row.type.output;\n                 let i = 0;\n                 for (const ret_ty of ret) {\n-                    if (!typePassesFilter(typeFilter, ret_ty.ty) ||\n-                        skipPositions.indexOf(i) !== -1) {\n+                    if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n@@ -1483,15 +1543,15 @@ function initSearch(rawSearchIndex) {\n             const fullId = row.id;\n             const searchWord = searchWords[pos];\n \n-            const in_args = findArg(row, elem, parsedQuery.typeFilter, maxEditDistance, []);\n-            const returned = checkReturned(row, elem, parsedQuery.typeFilter, maxEditDistance, []);\n+            const in_args = findArg(row, elem, maxEditDistance, []);\n+            const returned = checkReturned(row, elem, maxEditDistance, []);\n \n             // path_dist is 0 because no parent path information is currently stored\n             // in the search index\n             addIntoResults(results_in_args, fullId, pos, -1, in_args.dist, 0, maxEditDistance);\n             addIntoResults(results_returned, fullId, pos, -1, returned.dist, 0, maxEditDistance);\n \n-            if (!typePassesFilter(parsedQuery.typeFilter, row.ty)) {\n+            if (!typePassesFilter(elem.typeFilter, row.ty)) {\n                 return;\n             }\n \n@@ -1568,7 +1628,6 @@ function initSearch(rawSearchIndex) {\n                     const { dist, position } = callback(\n                         row,\n                         elem,\n-                        NO_TYPE_FILTER,\n                         maxEditDistance,\n                         skipPositions\n                     );\n@@ -1632,7 +1691,6 @@ function initSearch(rawSearchIndex) {\n                         in_returned = checkReturned(\n                             row,\n                             elem,\n-                            parsedQuery.typeFilter,\n                             maxEditDistance,\n                             []\n                         );"}, {"sha": "6b9a9b66a7d9e759fb7d5e131fd44357cc4e7ed8", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -79,11 +79,18 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n             \"foundElems\",\n             \"original\",\n             \"returned\",\n-            \"typeFilter\",\n             \"userQuery\",\n             \"error\",\n         ];\n-    } else if (fullPath.endsWith(\"elems\") || fullPath.endsWith(\"generics\")) {\n+    } else if (fullPath.endsWith(\"elems\") || fullPath.endsWith(\"returned\")) {\n+        fieldsToCheck = [\n+            \"name\",\n+            \"fullPath\",\n+            \"pathWithoutLast\",\n+            \"pathLast\",\n+            \"generics\",\n+        ];\n+    } else if (fullPath.endsWith(\"generics\")) {\n         fieldsToCheck = [\n             \"name\",\n             \"fullPath\","}, {"sha": "d1aa840ab08a27e98d0d582506f44b9f1637df65", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 13, "deletions": 45, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -17,6 +17,7 @@ const QUERY = [\n     \"a b:\",\n     \"a (b:\",\n     \"_:\",\n+    \"_:a\",\n     \"a-bb\",\n     \"a>bb\",\n     \"ab'\",\n@@ -48,7 +49,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"<P>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"<p>\",\n         error: \"Found generics without a path\",\n     },\n@@ -57,7 +57,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"-> <P>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"-> <p>\",\n         error: \"Found generics without a path\",\n     },\n@@ -66,7 +65,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<\\\"P\\\">\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<\\\"p\\\">\",\n         error: \"Unexpected `\\\"` in generics\",\n     },\n@@ -75,7 +73,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"\\\"P\\\" \\\"P\\\"\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"\\\"p\\\" \\\"p\\\"\",\n         error: \"Cannot have more than one literal search element\",\n     },\n@@ -84,7 +81,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"P \\\"P\\\"\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"p \\\"p\\\"\",\n         error: \"Cannot use literal search when there is more than one element\",\n     },\n@@ -93,7 +89,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"\\\"p\\\" p\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"\\\"p\\\" p\",\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n@@ -102,7 +97,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"\\\"const\\\": p\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"\\\"const\\\": p\",\n         error: \"You cannot use quotes on type filter\",\n     },\n@@ -111,16 +105,14 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<:a>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<:a>\",\n-        error: \"Unexpected `:` after `<`\",\n+        error: \"Expected type filter before `:`\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a<::a>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<::a>\",\n         error: \"Unexpected `::`: paths cannot start with `::`\",\n     },\n@@ -129,7 +121,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"((a))\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"((a))\",\n         error: \"Unexpected `(`\",\n     },\n@@ -138,7 +129,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"(p -> p\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"(p -> p\",\n         error: \"Unexpected `(`\",\n     },\n@@ -147,7 +137,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"::a::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"::a::b\",\n         error: \"Paths cannot start with `::`\",\n     },\n@@ -156,7 +145,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a::::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a::::b\",\n         error: \"Unexpected `::::`\",\n     },\n@@ -165,7 +153,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a::b::\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a::b::\",\n         error: \"Paths cannot end with `::`\",\n     },\n@@ -174,7 +161,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \":a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \":a\",\n         error: \"Expected type filter before `:`\",\n     },\n@@ -183,16 +169,14 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a b:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a b:\",\n-        error: \"Unexpected `:`\",\n+        error: \"Unexpected `:` (expected path after type filter)\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a (b:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a (b:\",\n         error: \"Unexpected `(`\",\n     },\n@@ -201,16 +185,22 @@ const PARSED = [\n         foundElems: 0,\n         original: \"_:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"_:\",\n+        error: \"Unexpected `:` (expected path after type filter)\",\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"_:a\",\n+        returned: [],\n+        userQuery: \"_:a\",\n         error: \"Unknown type filter `_`\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a-bb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a-bb\",\n         error: \"Unexpected `-` (did you mean `->`?)\",\n     },\n@@ -219,7 +209,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a>bb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a>bb\",\n         error: \"Unexpected `>` (did you mean `->`?)\",\n     },\n@@ -228,7 +217,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"ab'\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"ab'\",\n         error: \"Unexpected `'`\",\n     },\n@@ -237,7 +225,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a->\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a->\",\n         error: \"Expected at least one item after `->`\",\n     },\n@@ -246,7 +233,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"p\" <a>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\" <a>',\n         error: \"Found generics without a path\",\n     },\n@@ -255,7 +241,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"p\" a<a>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\" a<a>',\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n@@ -264,7 +249,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a,<',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a,<',\n         error: 'Found generics without a path',\n     },\n@@ -273,7 +257,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'aaaaa<>b',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'aaaaa<>b',\n         error: 'Expected `,`, ` `, `:` or `->`, found `b`',\n     },\n@@ -282,16 +265,14 @@ const PARSED = [\n         foundElems: 0,\n         original: 'fn:aaaaa<>b',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'fn:aaaaa<>b',\n-        error: 'Expected `,`, ` ` or `->`, found `b`',\n+        error: 'Expected `,`, ` `, `:` or `->`, found `b`',\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: '->a<>b',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '->a<>b',\n         error: 'Expected `,` or ` `, found `b`',\n     },\n@@ -300,7 +281,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a<->',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a<->',\n         error: 'Unexpected `-` after `<`',\n     },\n@@ -309,7 +289,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a:: a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a:: a',\n         error: 'Paths cannot end with `::`',\n     },\n@@ -318,7 +297,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'a ::a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a ::a',\n         error: 'Paths cannot start with `::`',\n     },\n@@ -327,16 +305,14 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<a>:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<a>:\",\n-        error: 'Unexpected `:`',\n+        error: 'Unexpected `<` in type filter',\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: \"a<>:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<>:\",\n         error: 'Unexpected `<` in type filter',\n     },\n@@ -345,7 +321,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a,:\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a,:\",\n         error: 'Unexpected `,` in type filter',\n     },\n@@ -354,7 +329,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<>  :\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<>  :\",\n         error: 'Unexpected `<` in type filter',\n     },\n@@ -363,7 +337,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"mod : :\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"mod : :\",\n         error: 'Unexpected `:`',\n     },\n@@ -372,7 +345,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!a\",\n         error: 'Unexpected `!`: it can only be at the end of an ident',\n     },\n@@ -381,7 +353,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!!\",\n         error: 'Cannot have more than one `!` in an ident',\n     },\n@@ -390,7 +361,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"mod:a!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"mod:a!\",\n         error: 'Invalid search type: macro `!` and `mod` both specified',\n     },\n@@ -399,7 +369,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!::a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!::a\",\n         error: 'Cannot have associated items in macros',\n     },\n@@ -408,7 +377,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a<\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<\",\n         error: \"Unclosed `<`\",\n     },"}, {"sha": "e23447ab75dc4006c1cfd4b6197036d905e793ce", "filename": "tests/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 88, "deletions": 8, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-filter.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -1,4 +1,14 @@\n-const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo', 'macro!', 'macro:mac!', 'a::mac!'];\n+const QUERY = [\n+    'fn:foo',\n+    'enum : foo',\n+    'macro<f>:foo',\n+    'macro!',\n+    'macro:mac!',\n+    'a::mac!',\n+    '-> fn:foo',\n+    '-> fn:foo<fn:bar>',\n+    '-> fn:foo<fn:bar, enum : baz::fuzz>',\n+];\n \n const PARSED = [\n     {\n@@ -8,11 +18,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"foo\",\n             generics: [],\n+            typeFilter: 5,\n         }],\n         foundElems: 1,\n         original: \"fn:foo\",\n         returned: [],\n-        typeFilter: 5,\n         userQuery: \"fn:foo\",\n         error: null,\n     },\n@@ -23,11 +33,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"foo\",\n             generics: [],\n+            typeFilter: 4,\n         }],\n         foundElems: 1,\n         original: \"enum : foo\",\n         returned: [],\n-        typeFilter: 4,\n         userQuery: \"enum : foo\",\n         error: null,\n     },\n@@ -36,9 +46,8 @@ const PARSED = [\n         foundElems: 0,\n         original: \"macro<f>:foo\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"macro<f>:foo\",\n-        error: \"Unexpected `:`\",\n+        error: \"Unexpected `<` in type filter\",\n     },\n     {\n         elems: [{\n@@ -47,11 +56,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"macro\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"macro!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"macro!\",\n         error: null,\n     },\n@@ -62,11 +71,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"mac\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"macro:mac!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"macro:mac!\",\n         error: null,\n     },\n@@ -77,12 +86,83 @@ const PARSED = [\n             pathWithoutLast: [\"a\"],\n             pathLast: \"mac\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"a::mac!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"a::mac!\",\n         error: null,\n     },\n+    {\n+        elems: [],\n+        foundElems: 1,\n+        original: \"-> fn:foo\",\n+        returned: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [],\n+            typeFilter: 5,\n+        }],\n+        userQuery: \"-> fn:foo\",\n+        error: null,\n+    },\n+    {\n+        elems: [],\n+        foundElems: 1,\n+        original: \"-> fn:foo<fn:bar>\",\n+        returned: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [\n+                {\n+                    name: \"bar\",\n+                    fullPath: [\"bar\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"bar\",\n+                    generics: [],\n+                    typeFilter: 5,\n+                }\n+            ],\n+            typeFilter: 5,\n+        }],\n+        userQuery: \"-> fn:foo<fn:bar>\",\n+        error: null,\n+    },\n+    {\n+        elems: [],\n+        foundElems: 1,\n+        original: \"-> fn:foo<fn:bar, enum : baz::fuzz>\",\n+        returned: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [\n+                {\n+                    name: \"bar\",\n+                    fullPath: [\"bar\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"bar\",\n+                    generics: [],\n+                    typeFilter: 5,\n+                },\n+                {\n+                    name: \"baz::fuzz\",\n+                    fullPath: [\"baz\", \"fuzz\"],\n+                    pathWithoutLast: [\"baz\"],\n+                    pathLast: \"fuzz\",\n+                    generics: [],\n+                    typeFilter: 4,\n+                },\n+            ],\n+            typeFilter: 5,\n+        }],\n+        userQuery: \"-> fn:foo<fn:bar, enum : baz::fuzz>\",\n+        error: null,\n+    },\n ];"}, {"sha": "c448d845acbdc1b9329bb05f70c9d375e18c7343", "filename": "tests/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-generics.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -6,7 +6,6 @@ const PARSED = [\n         foundElems: 0,\n         original: 'A<B<C<D>,  E>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a<b<c<d>,  e>',\n         error: 'Unexpected `<` after `<`',\n     },\n@@ -18,19 +17,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"p\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"u8\",\n                 fullPath: [\"u8\"],\n                 pathWithoutLast: [],\n                 pathLast: \"u8\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"p<> u8\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"p<> u8\",\n         error: null,\n     },\n@@ -50,12 +50,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: '\"p\"<a>',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\"<a>',\n         error: null,\n     },"}, {"sha": "be42b7aa4630714fc82344fd244cc7e13d73795f", "filename": "tests/rustdoc-js-std/parser-ident.js", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-ident.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-ident.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-ident.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -23,11 +23,11 @@ const PARSED = [\n                     generics: [],\n                 },\n             ],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"R<!>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"r<!>\",\n         error: null,\n     },\n@@ -38,11 +38,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"!\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"!\",\n         error: null,\n     },\n@@ -53,11 +53,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: 14,\n         }],\n         foundElems: 1,\n         original: \"a!\",\n         returned: [],\n-        typeFilter: 14,\n         userQuery: \"a!\",\n         error: null,\n     },\n@@ -66,7 +66,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!::b\",\n         error: \"Cannot have associated items in macros\",\n     },\n@@ -77,11 +76,11 @@ const PARSED = [\n             pathWithoutLast: [\"!\"],\n             pathLast: \"b\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"!::b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"!::b\",\n         error: null,\n     },\n@@ -90,7 +89,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a!::b!\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a!::b!\",\n         error: \"Cannot have associated items in macros\",\n     },"}, {"sha": "3a31d1bddfff5e3cc8ca2d056408b91ba93a6735", "filename": "tests/rustdoc-js-std/parser-literal.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-literal.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-literal.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-literal.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -16,11 +16,11 @@ const PARSED = [\n                     generics: [],\n                 },\n             ],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"R<P>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"r<p>\",\n         error: null,\n     }"}, {"sha": "f3e421f5ffa50a3d6601814561d1106a34ca97cd", "filename": "tests/rustdoc-js-std/parser-paths.js", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-paths.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-paths.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-paths.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -8,11 +8,11 @@ const PARSED = [\n             pathWithoutLast: [\"a\"],\n             pathLast: \"b\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"A::B\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a::b\",\n         error: null,\n     },\n@@ -24,19 +24,20 @@ const PARSED = [\n                 pathWithoutLast: [\"a\"],\n                 pathLast: \"b\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"c\",\n                 fullPath: [\"c\"],\n                 pathWithoutLast: [],\n                 pathLast: \"c\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: 'A::B,C',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a::b,c',\n         error: null,\n     },\n@@ -56,19 +57,20 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"c\",\n                 fullPath: [\"c\"],\n                 pathWithoutLast: [],\n                 pathLast: \"c\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: 'A::B<f>,C',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: 'a::b<f>,c',\n         error: null,\n     },\n@@ -79,11 +81,11 @@ const PARSED = [\n             pathWithoutLast: [\"mod\"],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: \"mod::a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"mod::a\",\n         error: null,\n     },"}, {"sha": "d5d67cac892f595fcd8a66c3cacfdcc7d09c514b", "filename": "tests/rustdoc-js-std/parser-quote.js", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-quote.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-quote.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-quote.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -19,8 +19,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"p\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: '-> \"p\"',\n         error: null,\n     },\n@@ -31,11 +31,11 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"p\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 1,\n         original: '\"p\",',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\",',\n         error: null,\n     },\n@@ -44,7 +44,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"p\" -> a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"p\" -> a',\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n@@ -53,7 +52,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"a\" -> \"p\"',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"a\" -> \"p\"',\n         error: \"Cannot have more than one literal search element\",\n     },\n@@ -62,7 +60,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '->\"-\"',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '->\"-\"',\n         error: 'Unexpected `-` in a string element',\n     },\n@@ -71,7 +68,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"a',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"a',\n         error: 'Unclosed `\"`',\n     },\n@@ -80,7 +76,6 @@ const PARSED = [\n         foundElems: 0,\n         original: '\"\"',\n         returned: [],\n-        typeFilter: -1,\n         userQuery: '\"\"',\n         error: 'Cannot have empty string element',\n     },"}, {"sha": "c2981319055db02a8c10f2017ab1a38a8cefa4e1", "filename": "tests/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-returned.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -25,8 +25,8 @@ const PARSED = [\n                     generics: [],\n                 },\n             ],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"-> f<p>\",\n         error: null,\n     },\n@@ -40,8 +40,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"p\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"-> p\",\n         error: null,\n     },\n@@ -55,8 +55,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"->,a\",\n         error: null,\n     },\n@@ -67,6 +67,7 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"aaaaa\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n         foundElems: 2,\n         original: \"aaaaa->a\",\n@@ -76,8 +77,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"a\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"aaaaa->a\",\n         error: null,\n     },\n@@ -91,8 +92,8 @@ const PARSED = [\n             pathWithoutLast: [],\n             pathLast: \"!\",\n             generics: [],\n+            typeFilter: -1,\n         }],\n-        typeFilter: -1,\n         userQuery: \"-> !\",\n         error: null,\n     },"}, {"sha": "fc8c5114c4e963ab3657d007065a5608cf75377d", "filename": "tests/rustdoc-js-std/parser-separators.js", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-separators.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-separators.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-separators.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -19,19 +19,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'aaaaaa',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"aaaaaa\tb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"aaaaaa\tb\",\n         error: null,\n     },\n@@ -43,19 +44,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'a',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a b\",\n         error: null,\n     },\n@@ -67,19 +69,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'a',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a,b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a,b\",\n         error: null,\n     },\n@@ -91,19 +94,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: 'a',\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: 'b',\n                 fullPath: ['b'],\n                 pathWithoutLast: [],\n                 pathLast: 'b',\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a\\tb\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a\\tb\",\n         error: null,\n     },\n@@ -130,12 +134,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: \"a<b c>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<b c>\",\n         error: null,\n     },\n@@ -162,12 +166,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: \"a<b,c>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<b,c>\",\n         error: null,\n     },\n@@ -194,12 +198,12 @@ const PARSED = [\n                         generics: [],\n                     },\n                 ],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 1,\n         original: \"a<b\\tc>\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a<b\\tc>\",\n         error: null,\n     },"}, {"sha": "dc1049a70bc3882b20a89356f75d0489cc3bc98b", "filename": "tests/rustdoc-js-std/parser-weird-queries.js", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-weird-queries.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js-std%2Fparser-weird-queries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-weird-queries.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -20,19 +20,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"a\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"b\",\n                 fullPath: [\"b\"],\n                 pathWithoutLast: [],\n                 pathLast: \"b\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a b\",\n         error: null,\n     },\n@@ -44,19 +45,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"a\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"b\",\n                 fullPath: [\"b\"],\n                 pathWithoutLast: [],\n                 pathLast: \"b\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"a   b\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a   b\",\n         error: null,\n     },\n@@ -65,7 +67,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \"a,b(c)\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"a,b(c)\",\n         error: \"Unexpected `(`\",\n     },\n@@ -77,19 +78,20 @@ const PARSED = [\n                 pathWithoutLast: [],\n                 pathLast: \"aaa\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n             {\n                 name: \"a\",\n                 fullPath: [\"a\"],\n                 pathWithoutLast: [],\n                 pathLast: \"a\",\n                 generics: [],\n+                typeFilter: -1,\n             },\n         ],\n         foundElems: 2,\n         original: \"aaa,a\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \"aaa,a\",\n         error: null,\n     },\n@@ -98,7 +100,6 @@ const PARSED = [\n         foundElems: 0,\n         original: \",,,,\",\n         returned: [],\n-        typeFilter: -1,\n         userQuery: \",,,,\",\n         error: null,\n     },\n@@ -107,17 +108,15 @@ const PARSED = [\n         foundElems: 0,\n         original: 'mod    :',\n         returned: [],\n-        typeFilter: 0,\n         userQuery: 'mod    :',\n-        error: null,\n+        error: \"Unexpected `:` (expected path after type filter)\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n         original: 'mod\\t:',\n         returned: [],\n-        typeFilter: 0,\n         userQuery: 'mod\\t:',\n-        error: null,\n+        error: \"Unexpected `:` (expected path after type filter)\",\n     },\n ];"}, {"sha": "5051743bda2d1bada1ad1c593487ffa247ae7667", "filename": "tests/rustdoc-js/generics-impl.js", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js%2Fgenerics-impl.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js%2Fgenerics-impl.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-impl.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -5,6 +5,8 @@ const QUERY = [\n     'Aaaaaaa -> bool',\n     'Aaaaaaa -> usize',\n     'Read -> u64',\n+    'trait:Read -> u64',\n+    'struct:Read -> u64',\n     'bool -> u64',\n     'Ddddddd -> u64',\n     '-> Ddddddd'\n@@ -36,6 +38,17 @@ const EXPECTED = [\n             { 'path': 'generics_impl::Ddddddd', 'name': 'ggggggg' },\n         ],\n     },\n+    {\n+        // trait:Read -> u64\n+        'others': [\n+            { 'path': 'generics_impl::Ddddddd', 'name': 'eeeeeee' },\n+            { 'path': 'generics_impl::Ddddddd', 'name': 'ggggggg' },\n+        ],\n+    },\n+    {\n+        // struct:Read -> u64\n+        'others': [],\n+    },\n     {\n         // bool -> u64\n         'others': ["}, {"sha": "f79c709ad6cf0abb1b811afcdf311424743569f1", "filename": "tests/rustdoc-js/generics.js", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js%2Fgenerics.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js%2Fgenerics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -2,6 +2,8 @@\n \n const QUERY = [\n     'R<P>',\n+    'R<struct:P>',\n+    'R<enum:P>',\n     '\"P\"',\n     'P',\n     'ExtraCreditStructMulti<ExtraCreditInnerMulti, ExtraCreditInnerMulti>',\n@@ -20,6 +22,20 @@ const EXPECTED = [\n             { 'path': 'generics', 'name': 'alpha' },\n         ],\n     },\n+    {\n+        // R<struct:P>\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        // R<enum:P>\n+        'returned': [],\n+        'in_args': [],\n+    },\n     {\n         // \"P\"\n         'others': ["}, {"sha": "4aec98c34037962586af3848bbaa3ab583629d59", "filename": "tests/rustdoc-js/primitive.js", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js%2Fprimitive.js", "raw_url": "https://github.com/rust-lang/rust/raw/eb46afb21683bc54f86c556bacff7c9bd82f9933/tests%2Frustdoc-js%2Fprimitive.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fprimitive.js?ref=eb46afb21683bc54f86c556bacff7c9bd82f9933", "patch": "@@ -3,6 +3,8 @@\n const QUERY = [\n     \"i32\",\n     \"str\",\n+    \"primitive:str\",\n+    \"struct:str\",\n     \"TotoIsSomewhere\",\n ];\n \n@@ -17,6 +19,14 @@ const EXPECTED = [\n             { 'path': 'primitive', 'name': 'foo' },\n         ],\n     },\n+    {\n+        'returned': [\n+            { 'path': 'primitive', 'name': 'foo' },\n+        ],\n+    },\n+    {\n+        'returned': [],\n+    },\n     {\n         'others': [],\n         'in_args': [],"}]}