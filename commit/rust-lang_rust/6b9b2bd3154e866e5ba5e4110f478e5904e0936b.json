{"sha": "6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "node_id": "C_kwDOAAsO6NoAKDZiOWIyYmQzMTU0ZTg2NmU1YmE1ZTQxMTBmNDc4ZTU5MDRlMDkzNmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T05:10:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T05:10:49Z"}, "message": "Auto merge of #94921 - aDotInTheVoid:rustdoc-json-format-cleanup, r=CraftSpider\n\nrustdoc-json: Clean Up json format\n\nNo semantic changes, but better names\n\nCloses https://github.com/rust-lang/rust/issues/94198\n\nCloses https://github.com/rust-lang/rust/issues/94889\n\nr? `@CraftSpider`\n\n`@rustbot` modify labels: +A-rustdoc-json +T-rustdoc +C-cleanup", "tree": {"sha": "d553614c454a3b3c897e6704d8cb0542f6e791d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d553614c454a3b3c897e6704d8cb0542f6e791d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "html_url": "https://github.com/rust-lang/rust/commit/6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f58828fdc3d1eb114c47bf1331a9bb638eab246", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f58828fdc3d1eb114c47bf1331a9bb638eab246", "html_url": "https://github.com/rust-lang/rust/commit/3f58828fdc3d1eb114c47bf1331a9bb638eab246"}, {"sha": "a5c0b1470cc48e665eabf29881dd87438973ab97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c0b1470cc48e665eabf29881dd87438973ab97", "html_url": "https://github.com/rust-lang/rust/commit/a5c0b1470cc48e665eabf29881dd87438973ab97"}], "stats": {"total": 65, "additions": 49, "deletions": 16}, "files": [{"sha": "89696f392621b60d8601403499b53b7bf5a09f16", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "patch": "@@ -31,7 +31,7 @@ def check_generics(generics):\n     for where_predicate in generics[\"where_predicates\"]:\n         if \"bound_predicate\" in where_predicate:\n             pred = where_predicate[\"bound_predicate\"]\n-            check_type(pred[\"ty\"])\n+            check_type(pred[\"type\"])\n             for bound in pred[\"bounds\"]:\n                 check_generic_bound(bound)\n         elif \"region_predicate\" in where_predicate:\n@@ -171,7 +171,7 @@ def check_type(ty):\n         for bound in item[\"inner\"][\"bounds\"]:\n             check_generic_bound(bound)\n         work_list |= (\n-            set(item[\"inner\"][\"items\"]) | set(item[\"inner\"][\"implementors\"])\n+            set(item[\"inner\"][\"items\"]) | set(item[\"inner\"][\"implementations\"])\n         ) - visited\n     elif item[\"kind\"] == \"impl\":\n         check_generics(item[\"inner\"][\"generics\"])"}, {"sha": "7cf5d02f9f89126b10fb1ca672245a9505a4f4f1", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "patch": "@@ -345,9 +345,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n                 synthetic,\n             },\n-            Const { did: _, ty, default } => {\n-                GenericParamDefKind::Const { ty: (*ty).into_tcx(tcx), default: default.map(|x| *x) }\n-            }\n+            Const { did: _, ty, default } => GenericParamDefKind::Const {\n+                type_: (*ty).into_tcx(tcx),\n+                default: default.map(|x| *x),\n+            },\n         }\n     }\n }\n@@ -357,7 +358,7 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n         use clean::WherePredicate::*;\n         match predicate {\n             BoundPredicate { ty, bounds, .. } => WherePredicate::BoundPredicate {\n-                ty: ty.into_tcx(tcx),\n+                type_: ty.into_tcx(tcx),\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 // FIXME: add `bound_params` to rustdoc-json-params?\n             },\n@@ -516,7 +517,7 @@ impl FromWithTcx<clean::Trait> for Trait {\n             items: ids(items),\n             generics: generics.into_tcx(tcx),\n             bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            implementors: Vec::new(), // Added in JsonRenderer::item\n+            implementations: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n }"}, {"sha": "126c5d89ca97c03896c61f9d512fc76488cc763e", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "patch": "@@ -179,7 +179,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         let id = item.def_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n             if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n-                t.implementors = self.get_trait_implementors(id.expect_def_id())\n+                t.implementations = self.get_trait_implementors(id.expect_def_id())\n             } else if let types::ItemEnum::Struct(ref mut s) = new_item.inner {\n                 s.impls = self.get_impls(id.expect_def_id())\n             } else if let types::ItemEnum::Enum(ref mut e) = new_item.inner {"}, {"sha": "17b3859a77b645a0053f77263f12484df818418f", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 13;\n+pub const FORMAT_VERSION: u32 = 14;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -378,17 +378,28 @@ pub enum GenericParamDefKind {\n         synthetic: bool,\n     },\n     Const {\n-        ty: Type,\n+        #[serde(rename = \"type\")]\n+        type_: Type,\n         default: Option<String>,\n     },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n #[serde(rename_all = \"snake_case\")]\n pub enum WherePredicate {\n-    BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n-    RegionPredicate { lifetime: String, bounds: Vec<GenericBound> },\n-    EqPredicate { lhs: Type, rhs: Term },\n+    BoundPredicate {\n+        #[serde(rename = \"type\")]\n+        type_: Type,\n+        bounds: Vec<GenericBound>,\n+    },\n+    RegionPredicate {\n+        lifetime: String,\n+        bounds: Vec<GenericBound>,\n+    },\n+    EqPredicate {\n+        lhs: Type,\n+        rhs: Term,\n+    },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n@@ -494,7 +505,7 @@ pub struct Trait {\n     pub items: Vec<Id>,\n     pub generics: Generics,\n     pub bounds: Vec<GenericBound>,\n-    pub implementors: Vec<Id>,\n+    pub implementations: Vec<Id>,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "368ff8d8da08adbe9e14853a42f855df29340612", "filename": "src/test/rustdoc-json/generic-associated-types/gats.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs?ref=6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "patch": "@@ -13,10 +13,12 @@ pub trait LendingIterator {\n     // @count - \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*]\" 1\n     // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*].name\" \\\"\\'a\\\"\n     // @count - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*]\" 1\n-    // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.ty.inner\" \\\"Self\\\"\n+    // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.type.inner\" \\\"Self\\\"\n     // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.bounds[*].outlives\" \\\"\\'a\\\"\n     // @count - \"$.index[*][?(@.name=='LendingItem')].inner.bounds[*]\" 1\n-    type LendingItem<'a>: Display where Self: 'a;\n+    type LendingItem<'a>: Display\n+    where\n+        Self: 'a;\n \n     // @is - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n     // @count - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 1"}, {"sha": "f7f03d987207e34ea2ad28c56dedb4c63d3b9f5a", "filename": "src/test/rustdoc-json/traits/implementors.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Ftest%2Frustdoc-json%2Ftraits%2Fimplementors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/src%2Ftest%2Frustdoc-json%2Ftraits%2Fimplementors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fimplementors.rs?ref=6b9b2bd3154e866e5ba5e4110f478e5904e0936b", "patch": "@@ -0,0 +1,19 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @set wham = implementors.json \"$.index[*][?(@.name=='Wham')].id\"\n+// @count - \"$.index[*][?(@.name=='Wham')].inner.implementations[*]\" 1\n+// @set gmWham = - \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\"\n+pub trait Wham {}\n+\n+// @count - \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[*]\" 1\n+// @is - \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[0]\" $gmWham\n+// @set gm = - \"$.index[*][?(@.name=='Wham')].id\"\n+\n+// jsonpath_lib isnt expressive enough (for now) to get the \"impl\" item, so we\n+// just check it isn't pointing to the type, but when you port to jsondocck-ng\n+// check what the impl item is\n+// @!is - \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\" $gm\n+pub struct GeorgeMichael {}\n+\n+impl Wham for GeorgeMichael {}"}]}