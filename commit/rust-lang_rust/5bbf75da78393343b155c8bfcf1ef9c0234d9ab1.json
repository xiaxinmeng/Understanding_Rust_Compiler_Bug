{"sha": "5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYmY3NWRhNzgzOTMzNDNiMTU1YzhiZmNmMWVmOWMwMjM0ZDlhYjE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-16T16:26:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-16T16:26:17Z"}, "message": "Rollup merge of #77691 - exrook:rename-layouterr, r=KodrAus\n\nRename/Deprecate LayoutErr in favor of LayoutError\n\nImplements rust-lang/wg-allocators#73.\n\nThis patch renames LayoutErr to LayoutError, and uses a type alias to support users using the old name.\n\nThe new name will be instantly stable in release 1.49 (current nightly), the type alias will become deprecated in release 1.51 (so that when the current nightly is 1.51, 1.49 will be stable).\n\nThis is the only error type in `std` that ends in `Err` rather than `Error`, if this PR lands all stdlib error types will end in `Error` :smiling_face_with_three_hearts:", "tree": {"sha": "4f16806e19dac4408029ca35ed628ef5a98a98f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f16806e19dac4408029ca35ed628ef5a98a98f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsqgrCRBK7hj4Ov3rIwAAdHIIAHBPcUvQWDtJnPL4VGc8Qq3I\nlTXJwAwaBqh7SRjOb7EoAd+oiN102Srg1sFid95zGqPw6ln4WrxuPtnKRRg0V+u9\ni+gJDKorMuYUDftoAl6SRlsxyh0SJsR/DqWteCzKMfDaoo4+RAF8Jnkw+d4kRISd\nJZAUQiZer2QyussFFScDiwrngtNjDrUPU6YNy4X6hdW+kvz78dlKTPGVFgP7QnVi\n+hiV+P63YmWIkqeWxYaxvARDUWG28UE1N340saZcUApJVtR/RTht/rc3ePD2rOkN\ntFi3g4lfGKTpHXwEloFnmkLHCSH70Qck/L9/623CldyK6uor2VtPRhS08CpM0ec=\n=KGZD\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f16806e19dac4408029ca35ed628ef5a98a98f1\nparent de0aa6169f0c7abbc8aa4d7e735f5da57a1e65ab\nparent 8ff0c14dc50483d0b231f9bad3d1eec8556c3750\nauthor Mara Bos <m-ou.se@m-ou.se> 1605543977 +0100\ncommitter GitHub <noreply@github.com> 1605543977 +0100\n\nRollup merge of #77691 - exrook:rename-layouterr, r=KodrAus\n\nRename/Deprecate LayoutErr in favor of LayoutError\n\nImplements rust-lang/wg-allocators#73.\n\nThis patch renames LayoutErr to LayoutError, and uses a type alias to support users using the old name.\n\nThe new name will be instantly stable in release 1.49 (current nightly), the type alias will become deprecated in release 1.51 (so that when the current nightly is 1.51, 1.49 will be stable).\n\nThis is the only error type in `std` that ends in `Err` rather than `Error`, if this PR lands all stdlib error types will end in `Error` :smiling_face_with_three_hearts:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "html_url": "https://github.com/rust-lang/rust/commit/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0aa6169f0c7abbc8aa4d7e735f5da57a1e65ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0aa6169f0c7abbc8aa4d7e735f5da57a1e65ab", "html_url": "https://github.com/rust-lang/rust/commit/de0aa6169f0c7abbc8aa4d7e735f5da57a1e65ab"}, {"sha": "8ff0c14dc50483d0b231f9bad3d1eec8556c3750", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff0c14dc50483d0b231f9bad3d1eec8556c3750", "html_url": "https://github.com/rust-lang/rust/commit/8ff0c14dc50483d0b231f9bad3d1eec8556c3750"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "8213e904fba2f4428a015cc7ba04efba1ec8fc32", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "patch": "@@ -41,7 +41,7 @@ pub use linked_list::LinkedList;\n #[doc(no_inline)]\n pub use vec_deque::VecDeque;\n \n-use crate::alloc::{Layout, LayoutErr};\n+use crate::alloc::{Layout, LayoutError};\n use core::fmt::Display;\n \n /// The error type for `try_reserve` methods.\n@@ -71,9 +71,9 @@ pub enum TryReserveError {\n }\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n-impl From<LayoutErr> for TryReserveError {\n+impl From<LayoutError> for TryReserveError {\n     #[inline]\n-    fn from(_: LayoutErr) -> Self {\n+    fn from(_: LayoutError) -> Self {\n         TryReserveError::CapacityOverflow\n     }\n }"}, {"sha": "522c5bcf5af109004ccc61acf4ab4398915529ac", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "patch": "@@ -1,7 +1,7 @@\n #![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"none\")]\n #![doc(hidden)]\n \n-use core::alloc::LayoutErr;\n+use core::alloc::LayoutError;\n use core::cmp;\n use core::intrinsics;\n use core::mem::{self, ManuallyDrop, MaybeUninit};\n@@ -472,7 +472,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n // significant, because the number of different `A` types seen in practice is\n // much smaller than the number of `T` types.)\n fn finish_grow<A>(\n-    new_layout: Result<Layout, LayoutErr>,\n+    new_layout: Result<Layout, LayoutError>,\n     current_memory: Option<(NonNull<u8>, Layout)>,\n     alloc: &mut A,\n ) -> Result<NonNull<[u8]>, TryReserveError>"}, {"sha": "2258d9614d53b767bef6d17652481e59d87bb360", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "patch": "@@ -39,7 +39,7 @@ pub struct Layout {\n \n impl Layout {\n     /// Constructs a `Layout` from a given `size` and `align`,\n-    /// or returns `LayoutErr` if any of the following conditions\n+    /// or returns `LayoutError` if any of the following conditions\n     /// are not met:\n     ///\n     /// * `align` must not be zero,\n@@ -52,9 +52,9 @@ impl Layout {\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutErr> {\n+    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {\n         if !align.is_power_of_two() {\n-            return Err(LayoutErr { private: () });\n+            return Err(LayoutError { private: () });\n         }\n \n         // (power-of-two implies align != 0.)\n@@ -72,7 +72,7 @@ impl Layout {\n         // Above implies that checking for summation overflow is both\n         // necessary and sufficient.\n         if size > usize::MAX - (align - 1) {\n-            return Err(LayoutErr { private: () });\n+            return Err(LayoutError { private: () });\n         }\n \n         // SAFETY: the conditions for `from_size_align_unchecked` have been\n@@ -200,7 +200,7 @@ impl Layout {\n     /// `align` violates the conditions listed in [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n-    pub fn align_to(&self, align: usize) -> Result<Self, LayoutErr> {\n+    pub fn align_to(&self, align: usize) -> Result<Self, LayoutError> {\n         Layout::from_size_align(self.size(), cmp::max(self.align(), align))\n     }\n \n@@ -274,16 +274,16 @@ impl Layout {\n     /// layout of the array and `offs` is the distance between the start\n     /// of each element in the array.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutErr> {\n+    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {\n         // This cannot overflow. Quoting from the invariant of Layout:\n         // > `size`, when rounded up to the nearest multiple of `align`,\n         // > must not overflow (i.e., the rounded value must be less than\n         // > `usize::MAX`)\n         let padded_size = self.size() + self.padding_needed_for(self.align());\n-        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;\n+        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;\n \n         // SAFETY: self.align is already known to be valid and alloc_size has been\n         // padded already.\n@@ -307,16 +307,16 @@ impl Layout {\n     /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     ///\n     /// # Examples\n     ///\n     /// To calculate the layout of a `#[repr(C)]` structure and the offsets of\n     /// the fields from its fields' layouts:\n     ///\n     /// ```rust\n-    /// # use std::alloc::{Layout, LayoutErr};\n-    /// pub fn repr_c(fields: &[Layout]) -> Result<(Layout, Vec<usize>), LayoutErr> {\n+    /// # use std::alloc::{Layout, LayoutError};\n+    /// pub fn repr_c(fields: &[Layout]) -> Result<(Layout, Vec<usize>), LayoutError> {\n     ///     let mut offsets = Vec::new();\n     ///     let mut layout = Layout::from_size_align(0, 1)?;\n     ///     for &field in fields {\n@@ -337,12 +337,12 @@ impl Layout {\n     /// ```\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n-    pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n+    pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n         let new_align = cmp::max(self.align(), next.align());\n         let pad = self.padding_needed_for(next.align());\n \n-        let offset = self.size().checked_add(pad).ok_or(LayoutErr { private: () })?;\n-        let new_size = offset.checked_add(next.size()).ok_or(LayoutErr { private: () })?;\n+        let offset = self.size().checked_add(pad).ok_or(LayoutError { private: () })?;\n+        let new_size = offset.checked_add(next.size()).ok_or(LayoutError { private: () })?;\n \n         let layout = Layout::from_size_align(new_size, new_align)?;\n         Ok((layout, offset))\n@@ -359,11 +359,11 @@ impl Layout {\n     /// guaranteed that all elements in the array will be properly\n     /// aligned.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutErr> {\n-        let size = self.size().checked_mul(n).ok_or(LayoutErr { private: () })?;\n+    pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n+        let size = self.size().checked_mul(n).ok_or(LayoutError { private: () })?;\n         Layout::from_size_align(size, self.align())\n     }\n \n@@ -372,38 +372,46 @@ impl Layout {\n     /// padding is inserted, the alignment of `next` is irrelevant,\n     /// and is not incorporated *at all* into the resulting layout.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutErr> {\n-        let new_size = self.size().checked_add(next.size()).ok_or(LayoutErr { private: () })?;\n+    pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n+        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError { private: () })?;\n         Layout::from_size_align(new_size, self.align())\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n-    pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {\n+    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n         let (layout, offset) = Layout::new::<T>().repeat(n)?;\n         debug_assert_eq!(offset, mem::size_of::<T>());\n         Ok(layout.pad_to_align())\n     }\n }\n \n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+#[rustc_deprecated(\n+    since = \"1.51.0\",\n+    reason = \"Name does not follow std convention, use LayoutError\",\n+    suggestion = \"LayoutError\"\n+)]\n+pub type LayoutErr = LayoutError;\n+\n /// The parameters given to `Layout::from_size_align`\n /// or some other `Layout` constructor\n /// do not satisfy its documented constraints.\n-#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+#[stable(feature = \"alloc_layout_error\", since = \"1.49.0\")]\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct LayoutErr {\n+pub struct LayoutError {\n     private: (),\n }\n \n // (we need this for downstream impl of trait Error)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-impl fmt::Display for LayoutErr {\n+impl fmt::Display for LayoutError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"invalid parameters to Layout::from_size_align\")\n     }"}, {"sha": "bc874e2e522425c4d9fc01616a9e9bc904cdc6e6", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "patch": "@@ -8,7 +8,18 @@ mod layout;\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n pub use self::global::GlobalAlloc;\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-pub use self::layout::{Layout, LayoutErr};\n+pub use self::layout::Layout;\n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+#[rustc_deprecated(\n+    since = \"1.51.0\",\n+    reason = \"Name does not follow std convention, use LayoutError\",\n+    suggestion = \"LayoutError\"\n+)]\n+#[allow(deprecated, deprecated_in_future)]\n+pub use self::layout::LayoutErr;\n+\n+#[stable(feature = \"alloc_layout_error\", since = \"1.49.0\")]\n+pub use self::layout::LayoutError;\n \n use crate::fmt;\n use crate::ptr::{self, NonNull};"}, {"sha": "0044e59d697e3da55ffc1397a854731877b5341a", "filename": "library/std/src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbf75da78393343b155c8bfcf1ef9c0234d9ab1/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=5bbf75da78393343b155c8bfcf1ef9c0234d9ab1", "patch": "@@ -19,7 +19,7 @@ mod tests;\n use core::array;\n use core::convert::Infallible;\n \n-use crate::alloc::{AllocError, LayoutErr};\n+use crate::alloc::{AllocError, LayoutError};\n use crate::any::TypeId;\n use crate::backtrace::Backtrace;\n use crate::borrow::Cow;\n@@ -390,7 +390,7 @@ impl Error for ! {}\n impl Error for AllocError {}\n \n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-impl Error for LayoutErr {}\n+impl Error for LayoutError {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for str::ParseBoolError {"}]}