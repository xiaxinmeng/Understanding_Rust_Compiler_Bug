{"sha": "d2b8406c200430fded9a981d46e08e415daa850a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjg0MDZjMjAwNDMwZmRlZDlhOTgxZDQ2ZTA4ZTQxNWRhYTg1MGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-22T10:44:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-22T10:44:59Z"}, "message": "Remove unused trap_unimplemented_ret_value", "tree": {"sha": "0ea9c0a6534b8a263968374ab188f90b5abbd166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea9c0a6534b8a263968374ab188f90b5abbd166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b8406c200430fded9a981d46e08e415daa850a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b8406c200430fded9a981d46e08e415daa850a", "html_url": "https://github.com/rust-lang/rust/commit/d2b8406c200430fded9a981d46e08e415daa850a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b8406c200430fded9a981d46e08e415daa850a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dc71a419e2db70daa8cb8c5e553bfb4376c4f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc71a419e2db70daa8cb8c5e553bfb4376c4f6b", "html_url": "https://github.com/rust-lang/rust/commit/8dc71a419e2db70daa8cb8c5e553bfb4376c4f6b"}], "stats": {"total": 11, "additions": 0, "deletions": 11}, "files": [{"sha": "37dca77bdbd093e8baa0050099145bfde5a9fd2b", "filename": "src/trap.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d2b8406c200430fded9a981d46e08e415daa850a/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b8406c200430fded9a981d46e08e415daa850a/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=d2b8406c200430fded9a981d46e08e415daa850a", "patch": "@@ -68,14 +68,3 @@ pub(crate) fn trap_unimplemented(fx: &mut FunctionCx<'_, '_, impl Module>, msg:\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n }\n \n-/// Like `trap_unimplemented` but returns a fake value of the specified type.\n-///\n-/// Trap code: user65535\n-pub(crate) fn trap_unimplemented_ret_value<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n-    dest_layout: TyAndLayout<'tcx>,\n-    msg: impl AsRef<str>,\n-) -> CValue<'tcx> {\n-    trap_unimplemented(fx, msg);\n-    CValue::by_ref(Pointer::const_addr(fx, 0), dest_layout)\n-}"}]}