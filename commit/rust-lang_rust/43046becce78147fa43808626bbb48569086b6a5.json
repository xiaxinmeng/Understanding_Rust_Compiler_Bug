{"sha": "43046becce78147fa43808626bbb48569086b6a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMDQ2YmVjY2U3ODE0N2ZhNDM4MDg2MjZiYmI0ODU2OTA4NmI2YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T05:50:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T05:50:30Z"}, "message": "Auto merge of #21558 - alexcrichton:result-debug, r=aturon\n\nThis commit relaxes the bound on `Result::unwrap` and `Result::unwrap_err` from\r\nthe `Display` trait to the `Debug` trait for generating an error message about\r\nthe unwrapping operation.\r\n\r\nThis commit is a breaking change and any breakage should be mitigated by\r\nensuring that `Debug` is implemented on the relevant type.\r\n\r\n[breaking-change]", "tree": {"sha": "1ae13372b4df9d337653a68e95c568c59bbcfd6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ae13372b4df9d337653a68e95c568c59bbcfd6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43046becce78147fa43808626bbb48569086b6a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43046becce78147fa43808626bbb48569086b6a5", "html_url": "https://github.com/rust-lang/rust/commit/43046becce78147fa43808626bbb48569086b6a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43046becce78147fa43808626bbb48569086b6a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988", "html_url": "https://github.com/rust-lang/rust/commit/70b13a7c7caa88a19cfe23e5cdb88a5735bbb988"}, {"sha": "08246520c0fef902b169233e26e15cf58ef1cd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/08246520c0fef902b169233e26e15cf58ef1cd8b", "html_url": "https://github.com/rust-lang/rust/commit/08246520c0fef902b169233e26e15cf58ef1cd8b"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "ab0f447f6c93d79869227022440f5433b0d75ad3", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43046becce78147fa43808626bbb48569086b6a5/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43046becce78147fa43808626bbb48569086b6a5/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=43046becce78147fa43808626bbb48569086b6a5", "patch": "@@ -229,7 +229,7 @@\n use self::Result::{Ok, Err};\n \n use clone::Clone;\n-use fmt::Display;\n+use fmt::Debug;\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use ops::{FnMut, FnOnce};\n use option::Option::{self, None, Some};\n@@ -714,7 +714,7 @@ impl<T, E> Result<T, E> {\n }\n \n #[stable]\n-impl<T, E: Display> Result<T, E> {\n+impl<T, E: Debug> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Ok`.\n     ///\n     /// # Panics\n@@ -739,13 +739,13 @@ impl<T, E: Display> Result<T, E> {\n         match self {\n             Ok(t) => t,\n             Err(e) =>\n-                panic!(\"called `Result::unwrap()` on an `Err` value: {}\", e)\n+                panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", e)\n         }\n     }\n }\n \n #[stable]\n-impl<T: Display, E> Result<T, E> {\n+impl<T: Debug, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Err`.\n     ///\n     /// # Panics\n@@ -769,7 +769,7 @@ impl<T: Display, E> Result<T, E> {\n     pub fn unwrap_err(self) -> E {\n         match self {\n             Ok(t) =>\n-                panic!(\"called `Result::unwrap_err()` on an `Ok` value: {}\", t),\n+                panic!(\"called `Result::unwrap_err()` on an `Ok` value: {:?}\", t),\n             Err(e) => e\n         }\n     }"}, {"sha": "893f353b1a72e406d8ff90ac4fb61cebd34edadb", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/43046becce78147fa43808626bbb48569086b6a5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43046becce78147fa43808626bbb48569086b6a5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=43046becce78147fa43808626bbb48569086b6a5", "patch": "@@ -382,7 +382,7 @@ impl<T> !Sync for SyncSender<T> {}\n /// A `send` operation can only fail if the receiving end of a channel is\n /// disconnected, implying that the data could never be received. The error\n /// contains the data being sent as a payload so it can be recovered.\n-#[derive(PartialEq, Eq, Show)]\n+#[derive(PartialEq, Eq)]\n #[stable]\n pub struct SendError<T>(pub T);\n \n@@ -412,7 +412,7 @@ pub enum TryRecvError {\n \n /// This enumeration is the list of the possible error outcomes for the\n /// `SyncSender::try_send` method.\n-#[derive(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone)]\n #[stable]\n pub enum TrySendError<T> {\n     /// The data could not be sent on the channel because it would require that\n@@ -961,13 +961,30 @@ impl<T: Send> Drop for Receiver<T> {\n     }\n }\n \n+#[stable]\n+impl<T> fmt::Debug for SendError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        \"SendError(..)\".fmt(f)\n+    }\n+}\n+\n #[stable]\n impl<T> fmt::Display for SendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"sending on a closed channel\".fmt(f)\n     }\n }\n \n+#[stable]\n+impl<T> fmt::Debug for TrySendError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            TrySendError::Full(..) => \"Full(..)\".fmt(f),\n+            TrySendError::Disconnected(..) => \"Disconnected(..)\".fmt(f),\n+        }\n+    }\n+}\n+\n #[stable]\n impl<T> fmt::Display for TrySendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "d7fcee3ae2e527df7229c1c2a11a6ad7900f9700", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/43046becce78147fa43808626bbb48569086b6a5/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43046becce78147fa43808626bbb48569086b6a5/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=43046becce78147fa43808626bbb48569086b6a5", "patch": "@@ -53,15 +53,13 @@ pub struct Guard {\n /// is held. The precise semantics for when a lock is poisoned is documented on\n /// each lock, but once a lock is poisoned then all future acquisitions will\n /// return this error.\n-#[derive(Show)]\n #[stable]\n pub struct PoisonError<T> {\n     guard: T,\n }\n \n /// An enumeration of possible errors which can occur while calling the\n /// `try_lock` method.\n-#[derive(Show)]\n #[stable]\n pub enum TryLockError<T> {\n     /// The lock could not be acquired because another task failed while holding\n@@ -92,6 +90,13 @@ pub type LockResult<Guard> = Result<Guard, PoisonError<Guard>>;\n #[stable]\n pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;\n \n+#[stable]\n+impl<T> fmt::Debug for PoisonError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        \"PoisonError { inner: .. }\".fmt(f)\n+    }\n+}\n+\n #[stable]\n impl<T> fmt::Display for PoisonError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -133,6 +138,16 @@ impl<T> FromError<PoisonError<T>> for TryLockError<T> {\n     }\n }\n \n+#[stable]\n+impl<T> fmt::Debug for TryLockError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            TryLockError::Poisoned(..) => \"Poisoned(..)\".fmt(f),\n+            TryLockError::WouldBlock => \"WouldBlock\".fmt(f)\n+        }\n+    }\n+}\n+\n #[stable]\n impl<T> fmt::Display for TryLockError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}]}