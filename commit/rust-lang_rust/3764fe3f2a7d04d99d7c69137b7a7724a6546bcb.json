{"sha": "3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NjRmZTNmMmE3ZDA0ZDk5ZDdjNjkxMzdiN2E3NzI0YTY1NDZiY2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T21:12:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T21:12:49Z"}, "message": "std: Camel case list", "tree": {"sha": "d67d024ae341d4d6447778cc8344e4f5089e9c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d67d024ae341d4d6447778cc8344e4f5089e9c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "html_url": "https://github.com/rust-lang/rust/commit/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e75ea37546ad197cc5a1efa522a054a54d78b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e75ea37546ad197cc5a1efa522a054a54d78b4", "html_url": "https://github.com/rust-lang/rust/commit/d3e75ea37546ad197cc5a1efa522a054a54d78b4"}], "stats": {"total": 177, "additions": 88, "deletions": 89}, "files": [{"sha": "b59ec38b35249de0abba5da2dabda19abbbe3a9f", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -24,7 +24,7 @@\n \n export Arena, arena_with_size;\n \n-use list::{list, cons, nil};\n+use list::{List, Cons, Nil};\n use unsafe::reinterpret_cast;\n use sys::TypeDesc;\n use libc::size_t;\n@@ -53,7 +53,7 @@ struct Arena {\n     // access the head.\n     priv mut head: Chunk;\n     priv mut pod_head: Chunk;\n-    priv mut chunks: @list<Chunk>;\n+    priv mut chunks: @List<Chunk>;\n     drop {\n         unsafe {\n             destroy_chunk(self.head);\n@@ -73,7 +73,7 @@ fn chunk(size: uint, is_pod: bool) -> Chunk {\n fn arena_with_size(initial_size: uint) -> Arena {\n     return Arena {mut head: chunk(initial_size, false),\n                   mut pod_head: chunk(initial_size, true),\n-                  mut chunks: @nil};\n+                  mut chunks: @Nil};\n }\n \n fn Arena() -> Arena {\n@@ -134,7 +134,7 @@ impl &Arena {\n         // Allocate a new chunk.\n         let chunk_size = at_vec::capacity(self.pod_head.data);\n         let new_min_chunk_size = uint::max(n_bytes, chunk_size);\n-        self.chunks = @cons(copy self.pod_head, self.chunks);\n+        self.chunks = @Cons(copy self.pod_head, self.chunks);\n         self.pod_head =\n             chunk(uint::next_power_of_two(new_min_chunk_size + 1u), true);\n \n@@ -176,7 +176,7 @@ impl &Arena {\n         // Allocate a new chunk.\n         let chunk_size = at_vec::capacity(self.head.data);\n         let new_min_chunk_size = uint::max(n_bytes, chunk_size);\n-        self.chunks = @cons(copy self.head, self.chunks);\n+        self.chunks = @Cons(copy self.head, self.chunks);\n         self.head =\n             chunk(uint::next_power_of_two(new_min_chunk_size + 1u), false);\n "}, {"sha": "ff4f20e7be7634176e1158fa0c1f00c8da235661", "filename": "src/libstd/list.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -7,14 +7,14 @@ use core::option;\n use option::*;\n use option::{Some, None};\n \n-enum list<T> {\n-    cons(T, @list<T>),\n-    nil,\n+enum List<T> {\n+    Cons(T, @List<T>),\n+    Nil,\n }\n \n-/// Create a list from a vector\n-fn from_vec<T: copy>(v: &[T]) -> @list<T> {\n-    vec::foldr(v, @nil::<T>, |h, t| @cons(h, t))\n+/// Cregate a list from a vector\n+fn from_vec<T: copy>(v: &[T]) -> @List<T> {\n+    vec::foldr(v, @Nil::<T>, |h, t| @Cons(h, t))\n }\n \n /**\n@@ -30,7 +30,7 @@ fn from_vec<T: copy>(v: &[T]) -> @list<T> {\n  * * z - The initial value\n  * * f - The function to apply\n  */\n-fn foldl<T: copy, U>(+z: T, ls: @list<U>, f: fn((&T), (&U)) -> T) -> T {\n+fn foldl<T: copy, U>(+z: T, ls: @List<U>, f: fn((&T), (&U)) -> T) -> T {\n     let mut accum: T = z;\n     do iter(ls) |elt| { accum = f(&accum, &elt);}\n     accum\n@@ -43,71 +43,71 @@ fn foldl<T: copy, U>(+z: T, ls: @list<U>, f: fn((&T), (&U)) -> T) -> T {\n  * When function `f` returns true then an option containing the element\n  * is returned. If `f` matches no elements then none is returned.\n  */\n-fn find<T: copy>(ls: @list<T>, f: fn((&T)) -> bool) -> Option<T> {\n+fn find<T: copy>(ls: @List<T>, f: fn((&T)) -> bool) -> Option<T> {\n     let mut ls = ls;\n     loop {\n         ls = match *ls {\n-          cons(hd, tl) => {\n+          Cons(hd, tl) => {\n             if f(&hd) { return Some(hd); }\n             tl\n           }\n-          nil => return None\n+          Nil => return None\n         }\n     };\n }\n \n /// Returns true if a list contains an element with the given value\n-fn has<T: copy Eq>(ls: @list<T>, +elt: T) -> bool {\n+fn has<T: copy Eq>(ls: @List<T>, +elt: T) -> bool {\n     for each(ls) |e| {\n         if e == elt { return true; }\n     }\n     return false;\n }\n \n /// Returns true if the list is empty\n-pure fn is_empty<T: copy>(ls: @list<T>) -> bool {\n+pure fn is_empty<T: copy>(ls: @List<T>) -> bool {\n     match *ls {\n-        nil => true,\n+        Nil => true,\n         _ => false\n     }\n }\n \n /// Returns true if the list is not empty\n-pure fn is_not_empty<T: copy>(ls: @list<T>) -> bool {\n+pure fn is_not_empty<T: copy>(ls: @List<T>) -> bool {\n     return !is_empty(ls);\n }\n \n /// Returns the length of a list\n-fn len<T>(ls: @list<T>) -> uint {\n+fn len<T>(ls: @List<T>) -> uint {\n     let mut count = 0u;\n     iter(ls, |_e| count += 1u);\n     count\n }\n \n /// Returns all but the first element of a list\n-pure fn tail<T: copy>(ls: @list<T>) -> @list<T> {\n+pure fn tail<T: copy>(ls: @List<T>) -> @List<T> {\n     match *ls {\n-        cons(_, tl) => return tl,\n-        nil => fail ~\"list empty\"\n+        Cons(_, tl) => return tl,\n+        Nil => fail ~\"list empty\"\n     }\n }\n \n /// Returns the first element of a list\n-pure fn head<T: copy>(ls: @list<T>) -> T {\n+pure fn head<T: copy>(ls: @List<T>) -> T {\n     match *ls {\n-      cons(hd, _) => hd,\n+      Cons(hd, _) => hd,\n       // makes me sad\n       _ => fail ~\"head invoked on empty list\"\n     }\n }\n \n /// Appends one list to another\n-pure fn append<T: copy>(l: @list<T>, m: @list<T>) -> @list<T> {\n+pure fn append<T: copy>(l: @List<T>, m: @List<T>) -> @List<T> {\n     match *l {\n-      nil => return m,\n-      cons(x, xs) => {\n+      Nil => return m,\n+      Cons(x, xs) => {\n         let rest = append(xs, m);\n-        return @cons(x, rest);\n+        return @Cons(x, rest);\n       }\n     }\n }\n@@ -121,45 +121,45 @@ pure fn push<T: copy>(ll: &mut @list<T>, +vv: T) {\n */\n \n /// Iterate over a list\n-fn iter<T>(l: @list<T>, f: fn(T)) {\n+fn iter<T>(l: @List<T>, f: fn(T)) {\n     let mut cur = l;\n     loop {\n         cur = match *cur {\n-          cons(hd, tl) => {\n+          Cons(hd, tl) => {\n             f(hd);\n             tl\n           }\n-          nil => break\n+          Nil => break\n         }\n     }\n }\n \n /// Iterate over a list\n-fn each<T>(l: @list<T>, f: fn(T) -> bool) {\n+fn each<T>(l: @List<T>, f: fn(T) -> bool) {\n     let mut cur = l;\n     loop {\n         cur = match *cur {\n-          cons(hd, tl) => {\n+          Cons(hd, tl) => {\n             if !f(hd) { return; }\n             tl\n           }\n-          nil => break\n+          Nil => break\n         }\n     }\n }\n \n-impl<T:Eq> list<T> : Eq {\n-    pure fn eq(&&other: list<T>) -> bool {\n+impl<T:Eq> List<T> : Eq {\n+    pure fn eq(&&other: List<T>) -> bool {\n         match self {\n-            cons(e0a, e1a) => {\n+            Cons(e0a, e1a) => {\n                 match other {\n-                    cons(e0b, e1b) => e0a == e0b && e1a == e1b,\n+                    Cons(e0b, e1b) => e0a == e0b && e1a == e1b,\n                     _ => false\n                 }\n             }\n-            nil => {\n+            Nil => {\n                 match other {\n-                    nil => true,\n+                    Nil => true,\n                     _ => false\n                 }\n             }\n@@ -172,7 +172,7 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        let empty : @list::list<int> = from_vec(~[]);\n+        let empty : @list::List<int> = from_vec(~[]);\n         let full1 = from_vec(~[1]);\n         let full2 = from_vec(~['r', 'u']);\n \n@@ -200,15 +200,15 @@ mod tests {\n \n     #[test]\n     fn test_from_vec_empty() {\n-        let empty : @list::list<int> = from_vec(~[]);\n-        assert (empty == @list::nil::<int>);\n+        let empty : @list::List<int> = from_vec(~[]);\n+        assert (empty == @list::Nil::<int>);\n     }\n \n     #[test]\n     fn test_foldl() {\n         fn add(a: &uint, b: &int) -> uint { return *a + (*b as uint); }\n         let l = from_vec(~[0, 1, 2, 3, 4]);\n-        let empty = @list::nil::<int>;\n+        let empty = @list::Nil::<int>;\n         assert (list::foldl(0u, l, add) == 10u);\n         assert (list::foldl(0u, empty, add) == 0u);\n     }\n@@ -233,15 +233,15 @@ mod tests {\n     fn test_find_fail() {\n         fn match_(_i: &int) -> bool { return false; }\n         let l = from_vec(~[0, 1, 2]);\n-        let empty = @list::nil::<int>;\n+        let empty = @list::Nil::<int>;\n         assert (list::find(l, match_) == option::None::<int>);\n         assert (list::find(empty, match_) == option::None::<int>);\n     }\n \n     #[test]\n     fn test_has() {\n         let l = from_vec(~[5, 8, 6]);\n-        let empty = @list::nil::<int>;\n+        let empty = @list::Nil::<int>;\n         assert (list::has(l, 5));\n         assert (!list::has(l, 7));\n         assert (list::has(l, 8));\n@@ -251,7 +251,7 @@ mod tests {\n     #[test]\n     fn test_len() {\n         let l = from_vec(~[0, 1, 2]);\n-        let empty = @list::nil::<int>;\n+        let empty = @list::Nil::<int>;\n         assert (list::len(l) == 3u);\n         assert (list::len(empty) == 0u);\n     }"}, {"sha": "dd7bba8d1f109b7950d979e379cf9cbba6eca905", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -61,7 +61,6 @@ mod comm;\n mod bitv;\n mod deque;\n mod fun_treemap;\n-#[allow(non_camel_case_types)] // XXX\n mod list;\n #[allow(non_camel_case_types)] // XXX\n mod map;"}, {"sha": "18df37373b19480f127e7cc65374666082aaa5f5", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -223,7 +223,7 @@ use syntax::codemap::span;\n use util::ppaux::{ty_to_str, region_to_str, explain_region};\n use std::map::{int_hash, hashmap, set};\n use std::list;\n-use std::list::{list, cons, nil};\n+use std::list::{List, Cons, Nil};\n use result::{Result, Ok, Err};\n use syntax::print::pprust;\n use util::common::indenter;"}, {"sha": "7745d7b9eef206602de0aee70466a67dd0ad514a", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -59,7 +59,7 @@ use str::{connect, split_str};\n use vec::pop;\n use syntax::parse::token::ident_interner;\n \n-use std::list::{cons, list, nil};\n+use std::list::{Cons, List, Nil};\n use std::map::{hashmap, int_hash, uint_hash};\n use str_eq = str::eq;\n "}, {"sha": "faf0178128965886e1fc28846e7f0a5bec5f3217", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -19,7 +19,7 @@\n \n use std::map::hashmap;\n use std::list;\n-use std::list::{list, cons, nil};\n+use std::list::{List, Cons, Nil};\n use driver::session::session;\n use metadata::csearch;\n use syntax::ast::*, syntax::ast_util, syntax::visit;\n@@ -122,14 +122,14 @@ fn type_needs(cx: ctx, use: uint, ty: ty::t) {\n     // Optimization -- don't descend type if all params already have this use\n     for vec::each_mut(cx.uses) |u| {\n         if *u & use != use {\n-            type_needs_inner(cx, use, ty, @nil);\n+            type_needs_inner(cx, use, ty, @Nil);\n             return;\n         }\n     }\n }\n \n fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n-                    enums_seen: @list<def_id>) {\n+                    enums_seen: @List<def_id>) {\n     do ty::maybe_walk_ty(ty) |ty| {\n         if ty::type_has_params(ty) {\n             match ty::get(ty).struct {\n@@ -143,7 +143,7 @@ fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n                | ty::ty_trait(_, _, _) => false,\n               ty::ty_enum(did, substs) => {\n                 if option::is_none(list::find(enums_seen, |id| *id == did)) {\n-                    let seen = @cons(did, enums_seen);\n+                    let seen = @Cons(did, enums_seen);\n                     for vec::each(*ty::enum_variants(cx.ccx.tcx, did)) |v| {\n                         for vec::each(v.args) |aty| {\n                             let t = ty::subst(cx.ccx.tcx, &substs, aty);"}, {"sha": "dc484f581e7dccbc0075500e8e3283316276a09d", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -64,7 +64,7 @@ use util::ppaux::{ty_to_str, tys_to_str, region_to_str,\n                      bound_region_to_str, vstore_to_str};\n use util::common::{indent, indenter};\n use std::list;\n-use list::{list, nil, cons};\n+use list::{List, Nil, Cons};\n \n export check_crate;\n export infer;"}, {"sha": "dd8ac61dd460b43cd0649fbf8fd25b9b4e915d07", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -157,15 +157,15 @@ fn blank_fn_ctxt(ccx: @crate_ctxt, rty: ty::t,\n         indirect_ret_ty: None,\n         purity: ast::pure_fn,\n         mut region_lb: region_bnd,\n-        in_scope_regions: @nil,\n+        in_scope_regions: @Nil,\n         inh: blank_inherited(ccx),\n         ccx: ccx\n     }\n }\n \n // a list of mapping from in-scope-region-names (\"isr\") to the\n // corresponding ty::region\n-type isr_alist = @list<(ty::bound_region, ty::region)>;\n+type isr_alist = @List<(ty::bound_region, ty::region)>;\n \n trait get_and_find_region {\n     fn get(br: ty::bound_region) -> ty::region;\n@@ -225,7 +225,7 @@ fn check_fn(ccx: @crate_ctxt,\n     // the node_id of the body block.\n \n     let {isr, self_info, fn_ty} = {\n-        let old_isr = option::map_default(old_fcx, @nil,\n+        let old_isr = option::map_default(old_fcx, @Nil,\n                                          |fcx| fcx.in_scope_regions);\n         replace_bound_regions_in_fn_ty(tcx, old_isr, self_info, fn_ty,\n                                        |br| ty::re_free(body.node.id, br))\n@@ -917,7 +917,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             match structure_of(fcx, sp, in_fty) {\n               ty::ty_fn(ref fn_ty) => {\n                 replace_bound_regions_in_fn_ty(\n-                    fcx.ccx.tcx, @nil, None, fn_ty,\n+                    fcx.ccx.tcx, @Nil, None, fn_ty,\n                     |_br| fcx.infcx().next_region_var(sp,\n                                                       call_expr_id)).fn_ty\n               }\n@@ -1237,7 +1237,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               Some(ty::ty_fn(ref fn_ty)) => {\n                 let {fn_ty, _} =\n                     replace_bound_regions_in_fn_ty(\n-                        tcx, @nil, None, fn_ty,\n+                        tcx, @Nil, None, fn_ty,\n                         |br| ty::re_bound(ty::br_cap_avoid(expr.id, @br)));\n                 (Some({inputs:fn_ty.inputs,\n                        output:fn_ty.output}),"}, {"sha": "2acdfbf8b746365390e84961dd564319a7e957b6", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -103,7 +103,7 @@ fn replace_bound_regions_in_fn_ty(\n               ty::re_bound(br) => {\n                 match isr.find(br) {\n                   Some(_) => isr,\n-                  None => @cons((br, to_r(br)), isr)\n+                  None => @Cons((br, to_r(br)), isr)\n                 }\n               }\n             }"}, {"sha": "ff0afdb4816e6198f971d5c371a4c838f993dfda", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -310,7 +310,7 @@ use result::Result;\n use result::{Ok, Err};\n use std::map::{hashmap, uint_hash};\n use std::cell::{Cell, empty_cell};\n-use std::list::{list, nil, cons};\n+use std::list::{List, Nil, Cons};\n \n use ty::{region, region_vid, hash_region};\n use region::is_subregion_of;"}, {"sha": "bb36473dc3d21c4afd435614cc43a0f2149a6483", "filename": "src/rustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -133,7 +133,7 @@ impl Sub: combine {\n         // First, we instantiate each bound region in the subtype with a fresh\n         // region variable.\n         let {fn_ty: a_fn_ty, _} = {\n-            do replace_bound_regions_in_fn_ty(self.infcx.tcx, @nil,\n+            do replace_bound_regions_in_fn_ty(self.infcx.tcx, @Nil,\n                                               None, a) |br| {\n                 // N.B.: The name of the bound region doesn't have\n                 // anything to do with the region variable that's created\n@@ -153,7 +153,7 @@ impl Sub: combine {\n         // Second, we instantiate each bound region in the supertype with a\n         // fresh concrete region.\n         let {fn_ty: b_fn_ty, _} = {\n-            do replace_bound_regions_in_fn_ty(self.infcx.tcx, @nil,\n+            do replace_bound_regions_in_fn_ty(self.infcx.tcx, @Nil,\n                                               None, b) |br| {\n                 // FIXME: eventually re_skolemized (issue #2263)\n                 ty::re_bound(br)"}, {"sha": "c64fd4bc89c3a12cc7a92b34b5a140fabaf00733", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -2,7 +2,7 @@\n \n use std;\n \n-import std::list::{list, cons, nil};\n+import std::list::{List, Cons, Nil};\n import std::time::precise_time_s;\n \n fn main() {\n@@ -25,7 +25,7 @@ fn run(repeat: int, depth: int) {\n     }\n }\n \n-type nillist = list<()>;\n+type nillist = List<()>;\n \n // Filled with things that have to be unwound\n enum st {\n@@ -56,28 +56,28 @@ fn recurse_or_fail(depth: int, st: Option<st>) {\n         let st = match st {\n           None => {\n             st_({\n-                box: @nil,\n-                unique: ~nil,\n-                fn_box: fn@() -> @nillist { @nil::<()> },\n-                fn_unique: fn~() -> ~nillist { ~nil::<()> },\n-                tuple: (@nil, ~nil),\n-                vec: ~[@nil],\n-                res: r(@nil)\n+                box: @Nil,\n+                unique: ~Nil,\n+                fn_box: fn@() -> @nillist { @Nil::<()> },\n+                fn_unique: fn~() -> ~nillist { ~Nil::<()> },\n+                tuple: (@Nil, ~Nil),\n+                vec: ~[@Nil],\n+                res: r(@Nil)\n             })\n           }\n           Some(st) => {\n             let fn_box = st.fn_box;\n             let fn_unique = st.fn_unique;\n \n             st_({\n-                box: @cons((), st.box),\n-                unique: ~cons((), @*st.unique),\n-                fn_box: fn@() -> @nillist { @cons((), fn_box()) },\n-                fn_unique: fn~() -> ~nillist { ~cons((), @*fn_unique()) },\n-                tuple: (@cons((), st.tuple.first()),\n-                        ~cons((), @*st.tuple.second())),\n-                vec: st.vec + ~[@cons((), st.vec.last())],\n-                res: r(@cons((), st.res._l))\n+                box: @Cons((), st.box),\n+                unique: ~Cons((), @*st.unique),\n+                fn_box: fn@() -> @nillist { @Cons((), fn_box()) },\n+                fn_unique: fn~() -> ~nillist { ~Cons((), @*fn_unique()) },\n+                tuple: (@Cons((), st.tuple.first()),\n+                        ~Cons((), @*st.tuple.second())),\n+                vec: st.vec + ~[@Cons((), st.vec.last())],\n+                res: r(@Cons((), st.res._l))\n             })\n           }\n         };"}, {"sha": "de9541a3c06a128fe368ea9687d399589a4f9da1", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -12,7 +12,7 @@ fn check_log<T>(exp: ~str, v: T) {\n \n fn main() {\n     let x = list::from_vec(~[a(22u), b(~\"hi\")]);\n-    let exp = ~\"@cons(a(22), @cons(b(~\\\"hi\\\"), @nil))\";\n+    let exp = ~\"@Cons(a(22), @Cons(b(~\\\"hi\\\"), @Nil))\";\n     assert fmt!(\"%?\", x) == exp;\n     check_log(exp, x);\n }"}, {"sha": "a2f1775c734f03cf13cfc35faa762e1c0cee04e4", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "patch": "@@ -2,21 +2,21 @@ use std;\n \n import std::list::*;\n \n-pure fn pure_length_go<T: copy>(ls: @list<T>, acc: uint) -> uint {\n-    match *ls { nil => { acc } cons(_, tl) => { pure_length_go(tl, acc + 1u) } }\n+pure fn pure_length_go<T: copy>(ls: @List<T>, acc: uint) -> uint {\n+    match *ls { nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }\n }\n \n-pure fn pure_length<T: copy>(ls: @list<T>) -> uint { pure_length_go(ls, 0u) }\n+pure fn pure_length<T: copy>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n \n-pure fn nonempty_list<T: copy>(ls: @list<T>) -> bool { pure_length(ls) > 0u }\n+pure fn nonempty_list<T: copy>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n-fn safe_head<T: copy>(ls: @list<T>) -> T {\n+fn safe_head<T: copy>(ls: @List<T>) -> T {\n     assert is_not_empty(ls);\n     return head(ls);\n }\n \n fn main() {\n-    let mylist = @cons(@1u, @nil);\n+    let mylist = @Cons(@1u, @Nil);\n     assert (nonempty_list(mylist));\n     assert (*safe_head(mylist) == 1u);\n }"}]}