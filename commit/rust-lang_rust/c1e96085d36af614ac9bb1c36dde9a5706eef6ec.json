{"sha": "c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZTk2MDg1ZDM2YWY2MTRhYzliYjFjMzZkZGU5YTU3MDZlZWY2ZWM=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-09-11T08:18:56Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-09-11T08:18:56Z"}, "message": "don't clone types that are Copy (clippy::clone_on_copy)", "tree": {"sha": "e7d6ffbd044166109bab8167a329bd51094c280c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d6ffbd044166109bab8167a329bd51094c280c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "html_url": "https://github.com/rust-lang/rust/commit/c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22719efcc570b043f2e519d6025e5f36eab38fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/22719efcc570b043f2e519d6025e5f36eab38fe2", "html_url": "https://github.com/rust-lang/rust/commit/22719efcc570b043f2e519d6025e5f36eab38fe2"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "b28f8ce1d8b3af45c611c959bce6d92e2ad43753", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -1739,7 +1739,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     category: constraint.category,\n                     from_closure: false,\n                     span,\n-                    variance_info: constraint.variance_info.clone(),\n+                    variance_info: constraint.variance_info,\n                 };\n             }\n             Locations::Single(loc) => loc,\n@@ -1752,13 +1752,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 category,\n                 from_closure: true,\n                 span: span,\n-                variance_info: constraint.variance_info.clone(),\n+                variance_info: constraint.variance_info,\n             })\n             .unwrap_or(BlameConstraint {\n                 category: constraint.category,\n                 from_closure: false,\n                 span: body.source_info(loc).span,\n-                variance_info: constraint.variance_info.clone(),\n+                variance_info: constraint.variance_info,\n             })\n     }\n \n@@ -2001,7 +2001,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         category: constraint.category,\n                         from_closure: false,\n                         span: constraint.locations.span(body),\n-                        variance_info: constraint.variance_info.clone(),\n+                        variance_info: constraint.variance_info,\n                     }\n                 }\n             })"}, {"sha": "e88c6608aca335540020bb44f498298afd00345a", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -519,7 +519,7 @@ where\n \n         let old_ambient_variance = self.ambient_variance;\n         self.ambient_variance = self.ambient_variance.xform(variance);\n-        self.ambient_variance_info = self.ambient_variance_info.clone().xform(info);\n+        self.ambient_variance_info = self.ambient_variance_info.xform(info);\n \n         debug!(\"relate_with_variance: ambient_variance = {:?}\", self.ambient_variance);\n \n@@ -597,12 +597,12 @@ where\n \n         if self.ambient_covariance() {\n             // Covariance: a <= b. Hence, `b: a`.\n-            self.push_outlives(v_b, v_a, self.ambient_variance_info.clone());\n+            self.push_outlives(v_b, v_a, self.ambient_variance_info);\n         }\n \n         if self.ambient_contravariance() {\n             // Contravariant: b <= a. Hence, `a: b`.\n-            self.push_outlives(v_a, v_b, self.ambient_variance_info.clone());\n+            self.push_outlives(v_a, v_b, self.ambient_variance_info);\n         }\n \n         Ok(a)"}, {"sha": "80dcf99da6224b775936e1b1d746e89a640987c1", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -448,7 +448,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                             span_idx = Some(syn::Index::from(idx));\n                                         } else {\n                                             throw_span_err!(\n-                                                info.span.clone().unwrap(),\n+                                                info.span.unwrap(),\n                                                 \"type of field annotated with `#[suggestion(...)]` contains more than one Span\"\n                                             );\n                                         }\n@@ -460,7 +460,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                             applicability_idx = Some(syn::Index::from(idx));\n                                         } else {\n                                             throw_span_err!(\n-                                                info.span.clone().unwrap(),\n+                                                info.span.unwrap(),\n                                                 \"type of field annotated with `#[suggestion(...)]` contains more than one Applicability\"\n                                             );\n                                         }\n@@ -479,15 +479,15 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                     return Ok((span, applicability));\n                                 }\n                                 throw_span_err!(\n-                                    info.span.clone().unwrap(),\n+                                    info.span.unwrap(),\n                                     \"wrong types for suggestion\",\n                                     |diag| {\n                                         diag.help(\"#[suggestion(...)] on a tuple field must be applied to fields of type (Span, Applicability)\")\n                                     }\n                                 );\n                             }\n                             _ => throw_span_err!(\n-                                info.span.clone().unwrap(),\n+                                info.span.unwrap(),\n                                 \"wrong field type for suggestion\",\n                                 |diag| {\n                                     diag.help(\"#[suggestion(...)] should be applied to fields of type Span or (Span, Applicability)\")"}, {"sha": "4df073c40e22c318eb620685d295283cf0ba4a15", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -2060,7 +2060,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info.span, ascription.source, ascription.user_ty,\n             );\n \n-            let user_ty = ascription.user_ty.clone().user_ty(\n+            let user_ty = ascription.user_ty.user_ty(\n                 &mut self.canonical_user_type_annotations,\n                 ascription.source.ty(&self.local_decls, self.tcx).ty,\n                 source_info.span,"}, {"sha": "a2cce9f1eda076e12fc6f2f43b0465a5c4e62507", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -75,13 +75,11 @@ fn lower_slice_len_call<'tcx>(\n                     let deref_arg = tcx.mk_place_deref(arg);\n                     let r_value = Rvalue::Len(deref_arg);\n                     let len_statement_kind = StatementKind::Assign(Box::new((*dest, r_value)));\n-                    let add_statement = Statement {\n-                        kind: len_statement_kind,\n-                        source_info: terminator.source_info.clone(),\n-                    };\n+                    let add_statement =\n+                        Statement { kind: len_statement_kind, source_info: terminator.source_info };\n \n                     // modify terminator into simple Goto\n-                    let new_terminator_kind = TerminatorKind::Goto { target: bb.clone() };\n+                    let new_terminator_kind = TerminatorKind::Goto { target: *bb };\n \n                     let patch = SliceLenPatchInformation { add_statement, new_terminator_kind };\n "}, {"sha": "392d618995af4a5a2057c4898b9a2261a62785ec", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -1487,7 +1487,7 @@ impl<'a> Resolver<'a> {\n                 .iter()\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n-            main_def: self.main_def.clone(),\n+            main_def: self.main_def,\n             trait_impls: self.trait_impls.clone(),\n             proc_macros,\n             confused_type_with_std_module: self.confused_type_with_std_module.clone(),"}, {"sha": "ef60608a27c8bb6bb03e1fe56e1ea54ab1af908b", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -1357,9 +1357,7 @@ fn for_all_expns_in<E>(\n     mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,\n ) -> Result<(), E> {\n     let all_data: Vec<_> = HygieneData::with(|data| {\n-        expns\n-            .map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn).clone()))\n-            .collect()\n+        expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()\n     });\n     for (expn, data, hash) in all_data.into_iter() {\n         f(expn, &data, hash)?;"}, {"sha": "52367661a4c0018a586e8b3fabf8f5724c9a2f64", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -249,10 +249,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let ObligationCauseCode::WellFormed(Some(wf_loc)) =\n                     root_obligation.cause.code.peel_derives()\n                 {\n-                    if let Some(cause) = self.tcx.diagnostic_hir_wf_check((\n-                        tcx.erase_regions(obligation.predicate),\n-                        wf_loc.clone(),\n-                    )) {\n+                    if let Some(cause) = self\n+                        .tcx\n+                        .diagnostic_hir_wf_check((tcx.erase_regions(obligation.predicate), *wf_loc))\n+                    {\n                         obligation.cause = cause;\n                         span = obligation.cause.span;\n                     }"}, {"sha": "92db0ca2a7c403d6c5f6c2666f6f9f33bd158cdd", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -595,7 +595,7 @@ impl TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n             ty::ReLateBound(debruijn, br) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderRegion { universe, name: br.kind };\n-                self.mapped_regions.insert(p.clone(), br);\n+                self.mapped_regions.insert(p, br);\n                 self.infcx.tcx.mk_region(ty::RePlaceholder(p))\n             }\n             _ => r,\n@@ -613,7 +613,7 @@ impl TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderType { universe, name: bound_ty.var };\n-                self.mapped_types.insert(p.clone(), bound_ty);\n+                self.mapped_types.insert(p, bound_ty);\n                 self.infcx.tcx.mk_ty(ty::Placeholder(p))\n             }\n             _ if t.has_vars_bound_at_or_above(self.current_index) => t.super_fold_with(self),\n@@ -637,7 +637,7 @@ impl TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                     universe,\n                     name: ty::BoundConst { var: bound_const, ty },\n                 };\n-                self.mapped_consts.insert(p.clone(), bound_const);\n+                self.mapped_consts.insert(p, bound_const);\n                 self.infcx.tcx.mk_const(ty::Const { val: ty::ConstKind::Placeholder(p), ty })\n             }\n             _ if ct.has_vars_bound_at_or_above(self.current_index) => ct.super_fold_with(self),"}, {"sha": "9824b644c3ebe0193eec7f1616f413790af0ac96", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -2445,7 +2445,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n             \"get_provisional = {:#?}\",\n             self.map.borrow().get(&fresh_trait_ref),\n         );\n-        Some(self.map.borrow().get(&fresh_trait_ref)?.clone())\n+        Some(*self.map.borrow().get(&fresh_trait_ref)?)\n     }\n \n     /// Insert a provisional result into the cache. The result came"}, {"sha": "cbfdce96bc57bdd0b1554f8b4e32ec1e8343faf6", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -186,7 +186,7 @@ pub enum AutorefOrPtrAdjustment<'tcx> {\n impl<'tcx> AutorefOrPtrAdjustment<'tcx> {\n     fn get_unsize(&self) -> Option<Ty<'tcx>> {\n         match self {\n-            AutorefOrPtrAdjustment::Autoref { mutbl: _, unsize } => unsize.clone(),\n+            AutorefOrPtrAdjustment::Autoref { mutbl: _, unsize } => *unsize,\n             AutorefOrPtrAdjustment::ToConstPtr => None,\n         }\n     }"}, {"sha": "aa2448075141935819b27a6f4bfc69a12083c063", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -53,7 +53,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         // Because the testsuit node holds some of the information as attributes, we can't write it\n         // until all of the tests has ran. Instead of writting every result as they come in, we add\n         // them to a Vec and write them all at once when run is complete.\n-        let duration = exec_time.map(|t| t.0.clone()).unwrap_or_default();\n+        let duration = exec_time.map(|t| t.0).unwrap_or_default();\n         self.results.push((desc.clone(), result.clone(), duration));\n         Ok(())\n     }"}, {"sha": "4f4952d0afb9d561d5351ce7a7ef966de96f8189", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -463,7 +463,7 @@ impl Item {\n             .filter_map(|ItemLink { link: s, link_text, did, ref fragment }| {\n                 match did {\n                     Some(did) => {\n-                        if let Ok((mut href, ..)) = href(did.clone(), cx) {\n+                        if let Ok((mut href, ..)) = href(*did, cx) {\n                             if let Some(ref fragment) = *fragment {\n                                 href.push('#');\n                                 href.push_str(fragment);"}, {"sha": "9222a0338ae6fee7ae8bbb284f101ffe71354ace", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -73,7 +73,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         search_paths: options.libs.clone(),\n         crate_types,\n         lint_opts: if !options.display_warnings { lint_opts } else { vec![] },\n-        lint_cap: Some(options.lint_cap.clone().unwrap_or_else(|| lint::Forbid)),\n+        lint_cap: Some(options.lint_cap.unwrap_or_else(|| lint::Forbid)),\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n         unstable_features: options.render_options.unstable_features,"}, {"sha": "61f6b4e01c18c37a3557b932a0df1d91e2358355", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e96085d36af614ac9bb1c36dde9a5706eef6ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c1e96085d36af614ac9bb1c36dde9a5706eef6ec", "patch": "@@ -1323,7 +1323,7 @@ impl LinkCollector<'_, '_> {\n         if let Some(ref cached) = self.visited_links.get(&key) {\n             match cached {\n                 Some(cached) => {\n-                    self.kind_side_channel.set(cached.side_channel.clone());\n+                    self.kind_side_channel.set(cached.side_channel);\n                     return Some(cached.res.clone());\n                 }\n                 None if cache_resolution_failure => return None,"}]}