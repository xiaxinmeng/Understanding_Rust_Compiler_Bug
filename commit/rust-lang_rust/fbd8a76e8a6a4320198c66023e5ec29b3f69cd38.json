{"sha": "fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDhhNzZlOGE2YTQzMjAxOThjNjYwMjNlNWVjMjliM2Y2OWNkMzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T21:56:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T22:48:47Z"}, "message": "rustdoc: Add a pass to split the document into pages", "tree": {"sha": "6842b2f966f151950ee7f894a8324e4a92622be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6842b2f966f151950ee7f894a8324e4a92622be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "html_url": "https://github.com/rust-lang/rust/commit/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b5f4204a113bcbba4819b2ac728c22df113994", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b5f4204a113bcbba4819b2ac728c22df113994", "html_url": "https://github.com/rust-lang/rust/commit/e9b5f4204a113bcbba4819b2ac728c22df113994"}], "stats": {"total": 237, "additions": 237, "deletions": 0}, "files": [{"sha": "ccee13358356faddc29b13bac0dafdfeb5fd1dea", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "patch": "@@ -240,6 +240,90 @@ impl util for moddoc {\n     }\n }\n \n+impl util for [page] {\n+\n+    fn mods() -> [moddoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(modtag(moddoc)) { some(moddoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn nmods() -> [nmoddoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(nmodtag(nmoddoc)) { some(nmoddoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn fns() -> [fndoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(fntag(fndoc)) { some(fndoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn consts() -> [constdoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(consttag(constdoc)) { some(constdoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn enums() -> [enumdoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(enumtag(enumdoc)) { some(enumdoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn resources() -> [resdoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(restag(resdoc)) { some(resdoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn ifaces() -> [ifacedoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(ifacetag(ifacedoc)) { some(ifacedoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn impls() -> [impldoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(impltag(impldoc)) { some(impldoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n+    fn types() -> [tydoc] {\n+        vec::filter_map(self) {|page|\n+            alt page {\n+              itempage(tytag(tydoc)) { some(tydoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+}\n+\n iface item {\n     fn item() -> itemdoc;\n }"}, {"sha": "e3f2c4235e723986622b3fecd252a96e8008f6ed", "filename": "src/rustdoc/page_pass.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38/src%2Frustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38/src%2Frustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpage_pass.rs?ref=fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "patch": "@@ -0,0 +1,152 @@\n+#[doc = \"\n+\n+Divides the document tree into pages.\n+\n+Each page corresponds is a logical section. There may be pages for individual\n+modules, pages for the crate, indexes, etc.\n+\n+\"];\n+\n+export mk_pass;\n+\n+fn mk_pass(output_style: config::output_style) -> pass {\n+    {\n+        name: \"page\",\n+        f: fn~(srv: astsrv::srv, doc: doc::doc) -> doc::doc {\n+            run(srv, doc, output_style)\n+        }\n+    }\n+}\n+\n+fn run(\n+    _srv: astsrv::srv,\n+    doc: doc::doc,\n+    output_style: config::output_style\n+) -> doc::doc {\n+\n+    if output_style == config::doc_per_crate {\n+        ret doc;\n+    }\n+\n+    let result_port = comm::port();\n+    let result_chan = comm::chan(result_port);\n+    let page_chan = task::spawn_listener {|page_port|\n+        comm::send(result_chan, make_doc_from_pages(page_port));\n+    };\n+\n+    find_pages(doc, page_chan);\n+    comm::recv(result_port)\n+}\n+\n+type page_port = comm::port<option<doc::page>>;\n+type page_chan = comm::chan<option<doc::page>>;\n+\n+fn make_doc_from_pages(page_port: page_port) -> doc::doc {\n+    let mut pages = [];\n+    while true {\n+        let val = comm::recv(page_port);\n+        if option::is_some(val) {\n+            pages += [option::unwrap(val)];\n+        } else {\n+            break;\n+        }\n+    }\n+    {\n+        pages: pages\n+    }\n+}\n+\n+fn find_pages(doc: doc::doc, page_chan: page_chan) {\n+    let fold = fold::fold({\n+        fold_crate: fold_crate,\n+        fold_mod: fold_mod\n+        with *fold::default_any_fold(page_chan)\n+    });\n+    fold.fold_doc(fold, doc);\n+\n+    comm::send(page_chan, none);\n+}\n+\n+fn fold_crate(\n+    fold: fold::fold<page_chan>,\n+    doc: doc::cratedoc\n+) -> doc::cratedoc {\n+\n+    let doc = fold::default_seq_fold_crate(fold, doc);\n+\n+    let page = doc::cratepage({\n+        topmod: strip_mod(doc.topmod)\n+        with doc\n+    });\n+\n+    comm::send(fold.ctxt, some(page));\n+\n+    doc\n+}\n+\n+fn fold_mod(\n+    fold: fold::fold<page_chan>,\n+    doc: doc::moddoc\n+) -> doc::moddoc {\n+\n+    let doc = fold::default_any_fold_mod(fold, doc);\n+\n+    if doc.id() != rustc::syntax::ast::crate_node_id {\n+\n+        let doc = strip_mod(doc);\n+        let page = doc::itempage(doc::modtag(doc));\n+        comm::send(fold.ctxt, some(page));\n+    }\n+\n+    doc\n+}\n+\n+fn strip_mod(doc: doc::moddoc) -> doc::moddoc {\n+    {\n+        items: vec::filter(doc.items) {|item|\n+            alt item {\n+              doc::modtag(_) { false }\n+              _ { true }\n+            }\n+        }\n+        with doc\n+    }\n+}\n+\n+#[test]\n+fn should_not_split_the_doc_into_pages_for_doc_per_crate() {\n+    let doc = test::mk_doc_(\n+        config::doc_per_crate,\n+        \"mod a { } mod b { mod c { } }\"\n+    );\n+    assert doc.pages.len() == 1u;\n+}\n+\n+#[test]\n+fn should_make_a_page_for_every_mod() {\n+    let doc = test::mk_doc(\"mod a { }\");\n+    assert doc.pages.mods()[0].name() == \"a\";\n+}\n+\n+#[test]\n+fn should_remove_mods_from_containing_mods() {\n+    let doc = test::mk_doc(\"mod a { }\");\n+    assert vec::is_empty(doc.cratemod().mods());\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    fn mk_doc_(\n+        output_style: config::output_style,\n+        source: str\n+    ) -> doc::doc {\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            run(srv, doc, output_style)\n+        }\n+    }\n+\n+    fn mk_doc(source: str) -> doc::doc {\n+        mk_doc_(config::doc_per_mod, source)\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "c53b11fa02163240e27786eed919528a9694ea69", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fbd8a76e8a6a4320198c66023e5ec29b3f69cd38/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=fbd8a76e8a6a4320198c66023e5ec29b3f69cd38", "patch": "@@ -38,3 +38,4 @@ mod sort_item_name_pass;\n mod sort_item_type_pass;\n mod reexport_pass;\n mod par;\n+mod page_pass;"}]}