{"sha": "ed89e6b831424ea68060c4f8b1145637d6ee15a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkODllNmI4MzE0MjRlYTY4MDYwYzRmOGIxMTQ1NjM3ZDZlZTE1YTU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-04T00:47:32Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-04T01:03:50Z"}, "message": "Address review comments and Windows failure, and make cleaner", "tree": {"sha": "5578fdeae11bac347eba2e7bf5bc9dd0a4a633f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5578fdeae11bac347eba2e7bf5bc9dd0a4a633f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed89e6b831424ea68060c4f8b1145637d6ee15a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed89e6b831424ea68060c4f8b1145637d6ee15a5", "html_url": "https://github.com/rust-lang/rust/commit/ed89e6b831424ea68060c4f8b1145637d6ee15a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed89e6b831424ea68060c4f8b1145637d6ee15a5/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a8bfe0ab54fa2a2682e05e59bc96d9363760f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a8bfe0ab54fa2a2682e05e59bc96d9363760f0", "html_url": "https://github.com/rust-lang/rust/commit/c2a8bfe0ab54fa2a2682e05e59bc96d9363760f0"}], "stats": {"total": 217, "additions": 108, "deletions": 109}, "files": [{"sha": "38ebe0e52083d8dab856b5451e4f7f95295e2262", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ed89e6b831424ea68060c4f8b1145637d6ee15a5", "patch": "@@ -1253,7 +1253,7 @@ pub struct RustDemangler {\n }\n \n impl Step for RustDemangler {\n-    type Output = GeneratedTarball;\n+    type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1271,11 +1271,17 @@ impl Step for RustDemangler {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n \n+        // Only build this extended tool if explicitly included in `tools`, or if `profiler = true`\n+        let profiler = builder.config.profiler_enabled(target);\n+        if !builder.config.tools.as_ref().map_or(profiler, |t| t.contains(\"rust-demangler\")) {\n+            return None;\n+        }\n+\n         let rust_demangler = builder\n             .ensure(tool::RustDemangler { compiler, target, extra_features: Vec::new() })\n             .expect(\"rust-demangler expected to build - in-tree tool\");\n@@ -1286,7 +1292,7 @@ impl Step for RustDemangler {\n         tarball.is_preview(true);\n         tarball.add_file(&rust_demangler, \"bin\", 0o755);\n         tarball.add_legal_and_readme_to(\"share/doc/rust-demangler\");\n-        tarball.generate()\n+        Some(tarball.generate())\n     }\n }\n \n@@ -1326,14 +1332,7 @@ impl Step for Extended {\n         let rustc_installer = builder.ensure(Rustc { compiler: builder.compiler(stage, target) });\n         let cargo_installer = builder.ensure(Cargo { compiler, target });\n         let rustfmt_installer = builder.ensure(Rustfmt { compiler, target });\n-        let profiler = builder.config.profiler_enabled(target);\n-        let install_rust_demangler =\n-            builder.config.tools.as_ref().map_or(profiler, |t| t.contains(\"rust-demangler\"));\n-        let rust_demangler_installer = if install_rust_demangler {\n-            Some(builder.ensure(RustDemangler { compiler, target }))\n-        } else {\n-            None\n-        };\n+        let rust_demangler_installer = builder.ensure(RustDemangler { compiler, target });\n         let rls_installer = builder.ensure(Rls { compiler, target });\n         let rust_analyzer_installer = builder.ensure(RustAnalyzer { compiler, target });\n         let llvm_tools_installer = builder.ensure(LlvmTools { target });\n@@ -1359,14 +1358,12 @@ impl Step for Extended {\n         let mut tarballs = Vec::new();\n         tarballs.push(rustc_installer);\n         tarballs.push(cargo_installer);\n+        tarballs.push(clippy_installer);\n+        tarballs.extend(rust_demangler_installer.clone());\n         tarballs.extend(rls_installer.clone());\n         tarballs.extend(rust_analyzer_installer.clone());\n-        tarballs.push(clippy_installer);\n         tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n-        if let Some(rust_demangler_installer) = rust_demangler_installer {\n-            tarballs.push(rust_demangler_installer);\n-        }\n         tarballs.extend(llvm_tools_installer);\n         if let Some(analysis_installer) = analysis_installer {\n             tarballs.push(analysis_installer);\n@@ -1421,6 +1418,9 @@ impl Step for Extended {\n \n         let xform = |p: &Path| {\n             let mut contents = t!(fs::read_to_string(p));\n+            if rust_demangler_installer.is_none() {\n+                contents = filter(&contents, \"rust-demangler\");\n+            }\n             if rls_installer.is_none() {\n                 contents = filter(&contents, \"rls\");\n             }\n@@ -1468,11 +1468,10 @@ impl Step for Extended {\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n-            if install_rust_demangler {\n+            prepare(\"clippy\");\n+            if rust_demangler_installer.is_some() {\n                 prepare(\"rust-demangler\");\n             }\n-            prepare(\"clippy\");\n-\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n@@ -1520,6 +1519,8 @@ impl Step for Extended {\n                     \"rust-analyzer-preview\".to_string()\n                 } else if name == \"clippy\" {\n                     \"clippy-preview\".to_string()\n+                } else if name == \"rust-demangler\" {\n+                    \"rust-demangler-preview\".to_string()\n                 } else if name == \"miri\" {\n                     \"miri-preview\".to_string()\n                 } else {\n@@ -1534,12 +1535,12 @@ impl Step for Extended {\n             prepare(\"rustc\");\n             prepare(\"cargo\");\n             prepare(\"rust-analysis\");\n-            if install_rust_demangler {\n-                prepare(\"rust-demangler\");\n-            }\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"clippy\");\n+            if rust_demangler_installer.is_some() {\n+                prepare(\"rust-demangler\");\n+            }\n             if rls_installer.is_some() {\n                 prepare(\"rls\");\n             }\n@@ -1681,7 +1682,7 @@ impl Step for Extended {\n                     .arg(\"-t\")\n                     .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n             );\n-            if install_rust_demangler {\n+            if rust_demangler_installer.is_some() {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1773,6 +1774,9 @@ impl Step for Extended {\n                     .arg(&input);\n                 add_env(builder, &mut cmd, target);\n \n+                if rust_demangler_installer.is_some() {\n+                    cmd.arg(\"-dRustDemanglerDir=rust-demangler\");\n+                }\n                 if rls_installer.is_some() {\n                     cmd.arg(\"-dRlsDir=rls\");\n                 }\n@@ -1795,7 +1799,7 @@ impl Step for Extended {\n             candle(\"CargoGroup.wxs\".as_ref());\n             candle(\"StdGroup.wxs\".as_ref());\n             candle(\"ClippyGroup.wxs\".as_ref());\n-            if install_rust_demangler {\n+            if rust_demangler_installer.is_some() {\n                 candle(\"RustDemanglerGroup.wxs\".as_ref());\n             }\n             if rls_installer.is_some() {\n@@ -1844,7 +1848,7 @@ impl Step for Extended {\n             if rust_analyzer_installer.is_some() {\n                 cmd.arg(\"RustAnalyzerGroup.wixobj\");\n             }\n-            if install_rust_demangler {\n+            if rust_demangler_installer.is_some() {\n                 cmd.arg(\"RustDemanglerGroup.wixobj\");\n             }\n             if miri_installer.is_some() {"}, {"sha": "68e7dc80067268abe28ae010d47a88f4edfd2c72", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=ed89e6b831424ea68060c4f8b1145637d6ee15a5", "patch": "@@ -190,18 +190,14 @@ install!((self, builder, _config),\n             );\n         }\n     };\n-    RustDemangler,\n-        \"rust-demangler\",\n-        Self::should_build(_config),\n-        only_hosts: true,\n-    {\n-        let profiler = builder.config.profiler_enabled(self.target);\n-        let install_rust_demangler =\n-            builder.config.tools.as_ref().map_or(profiler, |t| t.contains(\"rust-demangler\"));\n-        if install_rust_demangler {\n-            let tarball = builder.ensure(\n-                dist::RustDemangler { compiler: self.compiler, target: self.target }\n-            );\n+    RustDemangler, \"rust-demangler\", Self::should_build(_config), only_hosts: true, {\n+        // Note: Even though `should_build` may return true for `extended` default tools,\n+        // dist::RustDemangler may still return None, unless the target-dependent `profiler` config\n+        // is also true, or the `tools` array explicitly includes \"rust-demangler\".\n+        if let Some(tarball) = builder.ensure(dist::RustDemangler {\n+            compiler: self.compiler,\n+            target: self.target\n+        }) {\n             install_sh(builder, \"rust-demangler\", self.compiler.stage, Some(self.target), &tarball);\n         } else {\n             builder.info("}, {"sha": "b02d7e062a524e4076b9d1d52113d5b6a8e4d7b4", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=ed89e6b831424ea68060c4f8b1145637d6ee15a5", "patch": "@@ -68,7 +68,7 @@ impl OverlayKind {\n         match self {\n             OverlayKind::Rust => builder.rust_version(),\n             OverlayKind::LLVM => builder.rust_version(),\n-            OverlayKind::RustDemangler => builder.rust_version(),\n+            OverlayKind::RustDemangler => builder.release_num(\"rust-demangler\"),\n             OverlayKind::Cargo => {\n                 builder.cargo_info.version(builder, &builder.release_num(\"cargo\"))\n             }"}, {"sha": "69d39f5e544c133c874c817d8972c88df5858803", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ed89e6b831424ea68060c4f8b1145637d6ee15a5", "patch": "@@ -393,6 +393,9 @@ impl Step for RustDemangler {\n         t!(fs::create_dir_all(&dir));\n \n         cargo.env(\"RUST_DEMANGLER_DRIVER_PATH\", rust_demangler);\n+\n+        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+\n         cargo.add_rustc_lib_path(builder, compiler);\n \n         builder.run(&mut cargo.into());"}, {"sha": "4e8a689a13a47ba4cffd6461c3f21e86d8ed9c59", "filename": "src/tools/rust-demangler/README.md", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Ftools%2Frust-demangler%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Ftools%2Frust-demangler%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2FREADME.md?ref=ed89e6b831424ea68060c4f8b1145637d6ee15a5", "patch": "@@ -1,18 +1,15 @@\n # rust-demangler\n \n-Demangles rustc mangled names.\n+_Demangles rustc mangled names._\n \n-This tool uses the [rustc-demangle](https://crates.io/crates/rustc-demangle)\n-crate to convert an input buffer of newline-separated mangled names into their\n-demangled translations.\n+`rust-demangler` supports the requirements of the [`llvm-cov show -Xdemangler`\n+option](https://llvm.org/docs/CommandGuide/llvm-cov.html#cmdoption-llvm-cov-show-xdemangler),\n+to perform Rust-specific symbol demangling:\n \n-This tool takes a list of mangled names (one per line) on standard input, and\n-prints a corresponding list of demangled names. The tool is designed to support\n-programs that can leverage a third-party demangler, such as `llvm-cov`, via the\n-`-Xdemangler=<path-to-demangler>` option.\n+> _The demangler is expected to read a newline-separated list of symbols from\n+> stdin and write a newline-separated list of the same length to stdout._\n \n-To use `rust-demangler` with `llvm-cov` for example, add the `-Xdemangler=...`\n-option:\n+To use `rust-demangler` with `llvm-cov` for example:\n \n ```shell\n $ TARGET=\"${PWD}/build/x86_64-unknown-linux-gnu\"\n@@ -21,6 +18,16 @@ $ \"${TARGET}\"/llvm/bin/llvm-cov show \\\n   --instr-profile=main.profdata ./main --show-line-counts-or-regions\n ```\n \n+`rust-demangler` is a Rust \"extended tool\", used in Rust compiler tests, and\n+optionally included in Rust distributions that enable coverage profiling. Symbol\n+demangling is implemented using the\n+[rustc-demangle](https://crates.io/crates/rustc-demangle) crate.\n+\n+_(Note, for Rust developers, the third-party tool\n+[`rustfilt`](https://crates.io/crates/rustfilt) also supports `llvm-cov` symbol\n+demangling. `rustfilt` is a more generalized tool that searches any body of\n+text, using pattern matching, to find and demangle Rust symbols.)_\n+\n ## License\n \n Rust-demangler is distributed under the terms of both the MIT license and the"}, {"sha": "5a67b423225357d0dea17bfc87a842cd7e1c84f8", "filename": "src/tools/rust-demangler/tests/lib.rs", "status": "modified", "additions": 51, "deletions": 62, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed89e6b831424ea68060c4f8b1145637d6ee15a5/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs?ref=ed89e6b831424ea68060c4f8b1145637d6ee15a5", "patch": "@@ -22,74 +22,63 @@ _RNvC9backtrace3foo.llvm.A5310EB9\n _RNvNtNtNtNtCs92dm3009vxr_4rand4rngs7adapter9reseeding4fork23FORK_HANDLER_REGISTERED.0.0\n \";\n \n+const DEMANGLED_OUTPUT: &str = r\"\n+123foo[0]::bar\n+utf8_idents[317d481089b8c8fe]::\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\n+cc[4d6468d6c9fd4bb3]::spawn::{closure#0}::{closure#0}\n+<core[846817f741e54dfd]::slice::Iter<u8> as core[846817f741e54dfd]::iter::iterator::Iterator>::rposition::<core[846817f741e54dfd]::slice::memchr::memrchr::{closure#1}>::{closure#0}\n+alloc[f15a878b47eb696b]::alloc::box_free::<dyn alloc[f15a878b47eb696b]::boxed::FnBox<(), Output = ()>>\n+INtC8arrayvec8ArrayVechKj7b_E\n+<const_generic[317d481089b8c8fe]::Unsigned<11: u8>>\n+<const_generic[317d481089b8c8fe]::Signed<152: i16>>\n+<const_generic[317d481089b8c8fe]::Signed<-11: i8>>\n+<const_generic[317d481089b8c8fe]::Bool<false: bool>>\n+<const_generic[317d481089b8c8fe]::Bool<true: bool>>\n+<const_generic[317d481089b8c8fe]::Char<'v': char>>\n+<const_generic[317d481089b8c8fe]::Char<'\\n': char>>\n+<const_generic[317d481089b8c8fe]::Char<'\u2202': char>>\n+<const_generic[317d481089b8c8fe]::Foo<_>>::foo::FOO\n+foo[0]\n+foo[0]\n+backtrace[0]::foo\n+rand[693ea8e72247470f]::rngs::adapter::reseeding::fork::FORK_HANDLER_REGISTERED.0.0\n+\";\n+\n+const DEMANGLED_OUTPUT_NO_CRATE_DISAMBIGUATORS: &str = r\"\n+123foo[0]::bar\n+utf8_idents::\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\n+cc::spawn::{closure#0}::{closure#0}\n+<core::slice::Iter<u8> as core::iter::iterator::Iterator>::rposition::<core::slice::memchr::memrchr::{closure#1}>::{closure#0}\n+alloc::alloc::box_free::<dyn alloc::boxed::FnBox<(), Output = ()>>\n+INtC8arrayvec8ArrayVechKj7b_E\n+<const_generic::Unsigned<11: u8>>\n+<const_generic::Signed<152: i16>>\n+<const_generic::Signed<-11: i8>>\n+<const_generic::Bool<false: bool>>\n+<const_generic::Bool<true: bool>>\n+<const_generic::Char<'v': char>>\n+<const_generic::Char<'\\n': char>>\n+<const_generic::Char<'\u2202': char>>\n+<const_generic::Foo<_>>::foo::FOO\n+foo[0]\n+foo[0]\n+backtrace[0]::foo\n+rand::rngs::adapter::reseeding::fork::FORK_HANDLER_REGISTERED.0.0\n+\";\n+\n #[test]\n fn test_demangle_lines() {\n     let demangled_lines = demangle_lines(MANGLED_INPUT.lines(), None);\n-    let mut iter = demangled_lines.iter();\n-    assert_eq!(\"\", iter.next().unwrap());\n-    assert_eq!(\"123foo[0]::bar\", iter.next().unwrap());\n-    assert_eq!(\"utf8_idents[317d481089b8c8fe]::\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\", iter.next().unwrap());\n-    assert_eq!(\"cc[4d6468d6c9fd4bb3]::spawn::{closure#0}::{closure#0}\", iter.next().unwrap());\n-    assert_eq!(\n-        \"<core[846817f741e54dfd]::slice::Iter<u8> as core[846817f741e54dfd]::iter::iterator::Iterator>::rposition::<core[846817f741e54dfd]::slice::memchr::memrchr::{closure#1}>::{closure#0}\",\n-        iter.next().unwrap()\n-    );\n-    assert_eq!(\n-        \"alloc[f15a878b47eb696b]::alloc::box_free::<dyn alloc[f15a878b47eb696b]::boxed::FnBox<(), Output = ()>>\",\n-        iter.next().unwrap()\n-    );\n-    assert_eq!(\"INtC8arrayvec8ArrayVechKj7b_E\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Unsigned<11: u8>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Signed<152: i16>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Signed<-11: i8>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Bool<false: bool>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Bool<true: bool>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Char<'v': char>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Char<'\\\\n': char>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Char<'\u2202': char>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic[317d481089b8c8fe]::Foo<_>>::foo::FOO\", iter.next().unwrap());\n-    assert_eq!(\"foo[0]\", iter.next().unwrap());\n-    assert_eq!(\"foo[0]\", iter.next().unwrap());\n-    assert_eq!(\"backtrace[0]::foo\", iter.next().unwrap());\n-    assert_eq!(\n-        \"rand[693ea8e72247470f]::rngs::adapter::reseeding::fork::FORK_HANDLER_REGISTERED.0.0\",\n-        iter.next().unwrap()\n-    );\n-    assert!(iter.next().is_none());\n+    for (expected, actual) in DEMANGLED_OUTPUT.lines().zip(demangled_lines) {\n+        assert_eq!(expected, actual);\n+    }\n }\n \n #[test]\n fn test_demangle_lines_no_crate_disambiguators() {\n     let demangled_lines = demangle_lines(MANGLED_INPUT.lines(), Some(create_disambiguator_re()));\n-    let mut iter = demangled_lines.iter();\n-    assert_eq!(\"\", iter.next().unwrap());\n-    assert_eq!(\"123foo[0]::bar\", iter.next().unwrap());\n-    assert_eq!(\"utf8_idents::\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\", iter.next().unwrap());\n-    assert_eq!(\"cc::spawn::{closure#0}::{closure#0}\", iter.next().unwrap());\n-    assert_eq!(\n-        \"<core::slice::Iter<u8> as core::iter::iterator::Iterator>::rposition::<core::slice::memchr::memrchr::{closure#1}>::{closure#0}\",\n-        iter.next().unwrap()\n-    );\n-    assert_eq!(\n-        \"alloc::alloc::box_free::<dyn alloc::boxed::FnBox<(), Output = ()>>\",\n-        iter.next().unwrap()\n-    );\n-    assert_eq!(\"INtC8arrayvec8ArrayVechKj7b_E\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Unsigned<11: u8>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Signed<152: i16>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Signed<-11: i8>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Bool<false: bool>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Bool<true: bool>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Char<'v': char>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Char<'\\\\n': char>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Char<'\u2202': char>>\", iter.next().unwrap());\n-    assert_eq!(\"<const_generic::Foo<_>>::foo::FOO\", iter.next().unwrap());\n-    assert_eq!(\"foo[0]\", iter.next().unwrap());\n-    assert_eq!(\"foo[0]\", iter.next().unwrap());\n-    assert_eq!(\"backtrace[0]::foo\", iter.next().unwrap());\n-    assert_eq!(\n-        \"rand::rngs::adapter::reseeding::fork::FORK_HANDLER_REGISTERED.0.0\",\n-        iter.next().unwrap()\n-    );\n-    assert!(iter.next().is_none());\n+    for (expected, actual) in DEMANGLED_OUTPUT_NO_CRATE_DISAMBIGUATORS.lines().zip(demangled_lines)\n+    {\n+        assert_eq!(expected, actual);\n+    }\n }"}]}