{"sha": "6b116bedafe29b7876b95575451c92452a1ec72b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTE2YmVkYWZlMjliNzg3NmI5NTU3NTQ1MWM5MjQ1MmExZWM3MmI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T04:15:35Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:04Z"}, "message": "collections: fix fallout", "tree": {"sha": "a279f94c061eb632847254c36757dfa84c697b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a279f94c061eb632847254c36757dfa84c697b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b116bedafe29b7876b95575451c92452a1ec72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b116bedafe29b7876b95575451c92452a1ec72b", "html_url": "https://github.com/rust-lang/rust/commit/6b116bedafe29b7876b95575451c92452a1ec72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b116bedafe29b7876b95575451c92452a1ec72b/comments", "author": null, "committer": null, "parents": [{"sha": "8c59ec048831c913110a0aa385b1cb6f29de28d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c59ec048831c913110a0aa385b1cb6f29de28d7", "html_url": "https://github.com/rust-lang/rust/commit/8c59ec048831c913110a0aa385b1cb6f29de28d7"}], "stats": {"total": 335, "additions": 211, "deletions": 124}, "files": [{"sha": "da461ae2d4d53273a75cc4272f6bb50ea8fcae8e", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -573,7 +573,9 @@ impl<'a, T> Clone for Iter<'a, T> {\n }\n \n #[stable]\n-impl<'a, T> Iterator<&'a T> for Iter<'a, T> {\n+impl<'a, T> Iterator for Iter<'a, T> {\n+    type Item = &'a T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n \n@@ -582,21 +584,23 @@ impl<'a, T> Iterator<&'a T> for Iter<'a, T> {\n }\n \n #[stable]\n-impl<'a, T> DoubleEndedIterator<&'a T> for Iter<'a, T> {\n+impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a T> { self.iter.next_back() }\n }\n \n #[stable]\n-impl<'a, T> ExactSizeIterator<&'a T> for Iter<'a, T> {}\n+impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n /// An iterator that moves out of a `BinaryHeap`.\n pub struct IntoIter<T> {\n     iter: vec::IntoIter<T>,\n }\n \n #[stable]\n-impl<T> Iterator<T> for IntoIter<T> {\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<T> { self.iter.next() }\n \n@@ -605,21 +609,23 @@ impl<T> Iterator<T> for IntoIter<T> {\n }\n \n #[stable]\n-impl<T> DoubleEndedIterator<T> for IntoIter<T> {\n+impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n }\n \n #[stable]\n-impl<T> ExactSizeIterator<T> for IntoIter<T> {}\n+impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }\n \n #[stable]\n-impl<'a, T: 'a> Iterator<T> for Drain<'a, T> {\n+impl<'a, T: 'a> Iterator for Drain<'a, T> {\n+    type Item = T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<T> { self.iter.next() }\n \n@@ -628,24 +634,24 @@ impl<'a, T: 'a> Iterator<T> for Drain<'a, T> {\n }\n \n #[stable]\n-impl<'a, T: 'a> DoubleEndedIterator<T> for Drain<'a, T> {\n+impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n }\n \n #[stable]\n-impl<'a, T: 'a> ExactSizeIterator<T> for Drain<'a, T> {}\n+impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[stable]\n impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n-    fn from_iter<Iter: Iterator<T>>(iter: Iter) -> BinaryHeap<T> {\n+    fn from_iter<Iter: Iterator<Item=T>>(iter: Iter) -> BinaryHeap<T> {\n         BinaryHeap::from_vec(iter.collect())\n     }\n }\n \n #[stable]\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n-    fn extend<Iter: Iterator<T>>(&mut self, mut iter: Iter) {\n+    fn extend<Iter: Iterator<Item=T>>(&mut self, mut iter: Iter) {\n         let (lower, _) = iter.size_hint();\n \n         self.reserve(lower);"}, {"sha": "5c52223bccd136c6870b23f3103e44dc1bb6579a", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -938,7 +938,7 @@ impl Default for Bitv {\n \n #[stable]\n impl FromIterator<bool> for Bitv {\n-    fn from_iter<I:Iterator<bool>>(iterator: I) -> Bitv {\n+    fn from_iter<I:Iterator<Item=bool>>(iterator: I) -> Bitv {\n         let mut ret = Bitv::new();\n         ret.extend(iterator);\n         ret\n@@ -948,7 +948,7 @@ impl FromIterator<bool> for Bitv {\n #[stable]\n impl Extend<bool> for Bitv {\n     #[inline]\n-    fn extend<I: Iterator<bool>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=bool>>(&mut self, mut iterator: I) {\n         let (min, _) = iterator.size_hint();\n         self.reserve(min);\n         for element in iterator {\n@@ -1031,7 +1031,9 @@ pub struct Iter<'a> {\n }\n \n #[stable]\n-impl<'a> Iterator<bool> for Iter<'a> {\n+impl<'a> Iterator for Iter<'a> {\n+    type Item = bool;\n+\n     #[inline]\n     fn next(&mut self) -> Option<bool> {\n         if self.next_idx != self.end_idx {\n@@ -1050,7 +1052,7 @@ impl<'a> Iterator<bool> for Iter<'a> {\n }\n \n #[stable]\n-impl<'a> DoubleEndedIterator<bool> for Iter<'a> {\n+impl<'a> DoubleEndedIterator for Iter<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<bool> {\n         if self.next_idx != self.end_idx {\n@@ -1063,10 +1065,10 @@ impl<'a> DoubleEndedIterator<bool> for Iter<'a> {\n }\n \n #[stable]\n-impl<'a> ExactSizeIterator<bool> for Iter<'a> {}\n+impl<'a> ExactSizeIterator for Iter<'a> {}\n \n #[stable]\n-impl<'a> RandomAccessIterator<bool> for Iter<'a> {\n+impl<'a> RandomAccessIterator for Iter<'a> {\n     #[inline]\n     fn indexable(&self) -> uint {\n         self.end_idx - self.next_idx\n@@ -1134,7 +1136,7 @@ impl Default for BitvSet {\n \n #[stable]\n impl FromIterator<uint> for BitvSet {\n-    fn from_iter<I:Iterator<uint>>(iterator: I) -> BitvSet {\n+    fn from_iter<I:Iterator<Item=uint>>(iterator: I) -> BitvSet {\n         let mut ret = BitvSet::new();\n         ret.extend(iterator);\n         ret\n@@ -1144,7 +1146,7 @@ impl FromIterator<uint> for BitvSet {\n #[stable]\n impl Extend<uint> for BitvSet {\n     #[inline]\n-    fn extend<I: Iterator<uint>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=uint>>(&mut self, mut iterator: I) {\n         for i in iterator {\n             self.insert(i);\n         }\n@@ -1792,7 +1794,9 @@ pub struct Difference<'a>(TwoBitPositions<'a>);\n pub struct SymmetricDifference<'a>(TwoBitPositions<'a>);\n \n #[stable]\n-impl<'a> Iterator<uint> for SetIter<'a> {\n+impl<'a> Iterator for SetIter<'a> {\n+    type Item = uint;\n+\n     fn next(&mut self) -> Option<uint> {\n         while self.next_idx < self.set.bitv.len() {\n             let idx = self.next_idx;\n@@ -1813,7 +1817,9 @@ impl<'a> Iterator<uint> for SetIter<'a> {\n }\n \n #[stable]\n-impl<'a> Iterator<uint> for TwoBitPositions<'a> {\n+impl<'a> Iterator for TwoBitPositions<'a> {\n+    type Item = uint;\n+\n     fn next(&mut self) -> Option<uint> {\n         while self.next_idx < self.set.bitv.len() ||\n               self.next_idx < self.other.bitv.len() {\n@@ -1849,25 +1855,33 @@ impl<'a> Iterator<uint> for TwoBitPositions<'a> {\n }\n \n #[stable]\n-impl<'a> Iterator<uint> for Union<'a> {\n+impl<'a> Iterator for Union<'a> {\n+    type Item = uint;\n+\n     #[inline] fn next(&mut self) -> Option<uint> { self.0.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.0.size_hint() }\n }\n \n #[stable]\n-impl<'a> Iterator<uint> for Intersection<'a> {\n+impl<'a> Iterator for Intersection<'a> {\n+    type Item = uint;\n+\n     #[inline] fn next(&mut self) -> Option<uint> { self.0.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.0.size_hint() }\n }\n \n #[stable]\n-impl<'a> Iterator<uint> for Difference<'a> {\n+impl<'a> Iterator for Difference<'a> {\n+    type Item = uint;\n+\n     #[inline] fn next(&mut self) -> Option<uint> { self.0.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.0.size_hint() }\n }\n \n #[stable]\n-impl<'a> Iterator<uint> for SymmetricDifference<'a> {\n+impl<'a> Iterator for SymmetricDifference<'a> {\n+    type Item = uint;\n+\n     #[inline] fn next(&mut self) -> Option<uint> { self.0.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.0.size_hint() }\n }"}, {"sha": "1317889372308cb602ad7b3cc10f898ecf8a715a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -823,7 +823,7 @@ mod stack {\n \n #[stable]\n impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n-    fn from_iter<T: Iterator<(K, V)>>(iter: T) -> BTreeMap<K, V> {\n+    fn from_iter<T: Iterator<Item=(K, V)>>(iter: T) -> BTreeMap<K, V> {\n         let mut map = BTreeMap::new();\n         map.extend(iter);\n         map\n@@ -833,7 +833,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n #[stable]\n impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     #[inline]\n-    fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n+    fn extend<T: Iterator<Item=(K, V)>>(&mut self, mut iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }\n@@ -949,8 +949,11 @@ enum StackOp<T> {\n     Pop,\n }\n \n-impl<K, V, E, T: Traverse<E> + DoubleEndedIterator<TraversalItem<K, V, E>>>\n-        Iterator<(K, V)> for AbsIter<T> {\n+impl<K, V, E, T> Iterator for AbsIter<T> where\n+    T: DoubleEndedIterator + Iterator<Item=TraversalItem<K, V, E>> + Traverse<E>,\n+{\n+    type Item = (K, V);\n+\n     // This function is pretty long, but only because there's a lot of cases to consider.\n     // Our iterator represents two search paths, left and right, to the smallest and largest\n     // elements we have yet to yield. lca represents the least common ancestor of these two paths,\n@@ -1015,8 +1018,9 @@ impl<K, V, E, T: Traverse<E> + DoubleEndedIterator<TraversalItem<K, V, E>>>\n     }\n }\n \n-impl<K, V, E, T: Traverse<E> + DoubleEndedIterator<TraversalItem<K, V, E>>>\n-        DoubleEndedIterator<(K, V)> for AbsIter<T> {\n+impl<K, V, E, T> DoubleEndedIterator for AbsIter<T> where\n+    T: DoubleEndedIterator + Iterator<Item=TraversalItem<K, V, E>> + Traverse<E>,\n+{\n     // next_back is totally symmetric to next\n     fn next_back(&mut self) -> Option<(K, V)> {\n         loop {\n@@ -1054,64 +1058,75 @@ impl<K, V, E, T: Traverse<E> + DoubleEndedIterator<TraversalItem<K, V, E>>>\n }\n \n #[stable]\n-impl<'a, K, V> Iterator<(&'a K, &'a V)> for Iter<'a, K, V> {\n+impl<'a, K, V> Iterator for Iter<'a, K, V> {\n+    type Item = (&'a K, &'a V);\n+\n     fn next(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n #[stable]\n-impl<'a, K, V> DoubleEndedIterator<(&'a K, &'a V)> for Iter<'a, K, V> {\n+impl<'a, K, V> DoubleEndedIterator for Iter<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next_back() }\n }\n #[stable]\n-impl<'a, K, V> ExactSizeIterator<(&'a K, &'a V)> for Iter<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {}\n \n #[stable]\n-impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for IterMut<'a, K, V> {\n+impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n+    type Item = (&'a K, &'a mut V);\n+\n     fn next(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n #[stable]\n-impl<'a, K, V> DoubleEndedIterator<(&'a K, &'a mut V)> for IterMut<'a, K, V> {\n+impl<'a, K, V> DoubleEndedIterator for IterMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next_back() }\n }\n #[stable]\n-impl<'a, K, V> ExactSizeIterator<(&'a K, &'a mut V)> for IterMut<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {}\n \n #[stable]\n-impl<K, V> Iterator<(K, V)> for IntoIter<K, V> {\n+impl<K, V> Iterator for IntoIter<K, V> {\n+    type Item = (K, V);\n+\n     fn next(&mut self) -> Option<(K, V)> { self.inner.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n #[stable]\n-impl<K, V> DoubleEndedIterator<(K, V)> for IntoIter<K, V> {\n+impl<K, V> DoubleEndedIterator for IntoIter<K, V> {\n     fn next_back(&mut self) -> Option<(K, V)> { self.inner.next_back() }\n }\n #[stable]\n-impl<K, V> ExactSizeIterator<(K, V)> for IntoIter<K, V> {}\n+impl<K, V> ExactSizeIterator for IntoIter<K, V> {}\n \n #[stable]\n-impl<'a, K, V> Iterator<&'a K> for Keys<'a, K, V> {\n+impl<'a, K, V> Iterator for Keys<'a, K, V> {\n+    type Item = &'a K;\n+\n     fn next(&mut self) -> Option<(&'a K)> { self.inner.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n #[stable]\n-impl<'a, K, V> DoubleEndedIterator<&'a K> for Keys<'a, K, V> {\n+impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K)> { self.inner.next_back() }\n }\n #[stable]\n-impl<'a, K, V> ExactSizeIterator<&'a K> for Keys<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {}\n+\n \n #[stable]\n-impl<'a, K, V> Iterator<&'a V> for Values<'a, K, V> {\n+impl<'a, K, V> Iterator for Values<'a, K, V> {\n+    type Item = &'a V;\n+\n     fn next(&mut self) -> Option<(&'a V)> { self.inner.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n #[stable]\n-impl<'a, K, V> DoubleEndedIterator<&'a V> for Values<'a, K, V> {\n+impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a V)> { self.inner.next_back() }\n }\n #[stable]\n-impl<'a, K, V> ExactSizeIterator<&'a V> for Values<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {}\n \n \n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {"}, {"sha": "f50650c2c8be3ddc7b09517443e87627ad7ae5e5", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -210,7 +210,9 @@ impl<T> RawItems<T> {\n     }\n }\n \n-impl<T> Iterator<T> for RawItems<T> {\n+impl<T> Iterator for RawItems<T> {\n+    type Item = T;\n+\n     fn next(&mut self) -> Option<T> {\n         if self.head == self.tail {\n             None\n@@ -230,7 +232,7 @@ impl<T> Iterator<T> for RawItems<T> {\n     }\n }\n \n-impl<T> DoubleEndedIterator<T> for RawItems<T> {\n+impl<T> DoubleEndedIterator for RawItems<T> {\n     fn next_back(&mut self) -> Option<T> {\n         if self.head == self.tail {\n             None\n@@ -1321,8 +1323,10 @@ trait TraversalImpl<K, V, E> {\n /// as no deallocation needs to be done.\n struct ElemsAndEdges<Elems, Edges>(Elems, Edges);\n \n-impl<K, V, E, Elems: DoubleEndedIterator<(K, V)>, Edges: DoubleEndedIterator<E>>\n-        TraversalImpl<K, V, E> for ElemsAndEdges<Elems, Edges> {\n+impl<K, V, E, Elems: DoubleEndedIterator, Edges: DoubleEndedIterator>\n+        TraversalImpl<K, V, E> for ElemsAndEdges<Elems, Edges>\n+    where Elems : Iterator<Item=(K, V)>, Edges : Iterator<Item=E>\n+{\n \n     fn next_kv(&mut self) -> Option<(K, V)> { self.0.next() }\n     fn next_kv_back(&mut self) -> Option<(K, V)> { self.0.next_back() }\n@@ -1414,8 +1418,8 @@ pub type MutTraversal<'a, K, V> = AbsTraversal<ElemsAndEdges<Zip<slice::Iter<'a,\n pub type MoveTraversal<K, V> = AbsTraversal<MoveTraversalImpl<K, V>>;\n \n \n-impl<K, V, E, Impl: TraversalImpl<K, V, E>>\n-        Iterator<TraversalItem<K, V, E>> for AbsTraversal<Impl> {\n+impl<K, V, E, Impl: TraversalImpl<K, V, E>> Iterator for AbsTraversal<Impl> {\n+    type Item = TraversalItem<K, V, E>;\n \n     fn next(&mut self) -> Option<TraversalItem<K, V, E>> {\n         let head_is_edge = self.head_is_edge;\n@@ -1429,9 +1433,7 @@ impl<K, V, E, Impl: TraversalImpl<K, V, E>>\n     }\n }\n \n-impl<K, V, E, Impl: TraversalImpl<K, V, E>>\n-        DoubleEndedIterator<TraversalItem<K, V, E>> for AbsTraversal<Impl> {\n-\n+impl<K, V, E, Impl: TraversalImpl<K, V, E>> DoubleEndedIterator for AbsTraversal<Impl> {\n     fn next_back(&mut self) -> Option<TraversalItem<K, V, E>> {\n         let tail_is_edge = self.tail_is_edge;\n         self.tail_is_edge = !tail_is_edge;"}, {"sha": "6512243ed1a170e3716bec725b6eaa07353fe68f", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -436,7 +436,7 @@ impl<T: Ord> BTreeSet<T> {\n \n #[stable]\n impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n-    fn from_iter<Iter: Iterator<T>>(iter: Iter) -> BTreeSet<T> {\n+    fn from_iter<Iter: Iterator<Item=T>>(iter: Iter) -> BTreeSet<T> {\n         let mut set = BTreeSet::new();\n         set.extend(iter);\n         set\n@@ -446,7 +446,7 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n #[stable]\n impl<T: Ord> Extend<T> for BTreeSet<T> {\n     #[inline]\n-    fn extend<Iter: Iterator<T>>(&mut self, mut iter: Iter) {\n+    fn extend<Iter: Iterator<Item=T>>(&mut self, mut iter: Iter) {\n         for elem in iter {\n             self.insert(elem);\n         }\n@@ -560,28 +560,33 @@ impl<T: Show> Show for BTreeSet<T> {\n }\n \n #[stable]\n-impl<'a, T> Iterator<&'a T> for Iter<'a, T> {\n+impl<'a, T> Iterator for Iter<'a, T> {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n #[stable]\n-impl<'a, T> DoubleEndedIterator<&'a T> for Iter<'a, T> {\n+impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n     fn next_back(&mut self) -> Option<&'a T> { self.iter.next_back() }\n }\n #[stable]\n-impl<'a, T> ExactSizeIterator<&'a T> for Iter<'a, T> {}\n+impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n+\n \n #[stable]\n-impl<T> Iterator<T> for IntoIter<T> {\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = T;\n+\n     fn next(&mut self) -> Option<T> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n #[stable]\n-impl<T> DoubleEndedIterator<T> for IntoIter<T> {\n+impl<T> DoubleEndedIterator for IntoIter<T> {\n     fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n }\n #[stable]\n-impl<T> ExactSizeIterator<T> for IntoIter<T> {}\n+impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// Compare `x` and `y`, but return `short` if x is None and `long` if y is None\n fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>,\n@@ -594,7 +599,9 @@ fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>,\n }\n \n #[stable]\n-impl<'a, T: Ord> Iterator<&'a T> for Difference<'a, T> {\n+impl<'a, T: Ord> Iterator for Difference<'a, T> {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             match cmp_opt(self.a.peek(), self.b.peek(), Less, Less) {\n@@ -607,7 +614,9 @@ impl<'a, T: Ord> Iterator<&'a T> for Difference<'a, T> {\n }\n \n #[stable]\n-impl<'a, T: Ord> Iterator<&'a T> for SymmetricDifference<'a, T> {\n+impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             match cmp_opt(self.a.peek(), self.b.peek(), Greater, Less) {\n@@ -620,7 +629,9 @@ impl<'a, T: Ord> Iterator<&'a T> for SymmetricDifference<'a, T> {\n }\n \n #[stable]\n-impl<'a, T: Ord> Iterator<&'a T> for Intersection<'a, T> {\n+impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             let o_cmp = match (self.a.peek(), self.b.peek()) {\n@@ -639,7 +650,9 @@ impl<'a, T: Ord> Iterator<&'a T> for Intersection<'a, T> {\n }\n \n #[stable]\n-impl<'a, T: Ord> Iterator<&'a T> for Union<'a, T> {\n+impl<'a, T: Ord> Iterator for Union<'a, T> {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             match cmp_opt(self.a.peek(), self.b.peek(), Greater, Less) {"}, {"sha": "b3d61f445639b3fb1b9d87cc324f4ee9357f0b66", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -508,7 +508,9 @@ impl<T> Drop for DList<T> {\n }\n \n #[stable]\n-impl<'a, A> Iterator<&'a A> for Iter<'a, A> {\n+impl<'a, A> Iterator for Iter<'a, A> {\n+    type Item = &'a A;\n+\n     #[inline]\n     fn next(&mut self) -> Option<&'a A> {\n         if self.nelem == 0 {\n@@ -528,7 +530,7 @@ impl<'a, A> Iterator<&'a A> for Iter<'a, A> {\n }\n \n #[stable]\n-impl<'a, A> DoubleEndedIterator<&'a A> for Iter<'a, A> {\n+impl<'a, A> DoubleEndedIterator for Iter<'a, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a A> {\n         if self.nelem == 0 {\n@@ -543,10 +545,11 @@ impl<'a, A> DoubleEndedIterator<&'a A> for Iter<'a, A> {\n }\n \n #[stable]\n-impl<'a, A> ExactSizeIterator<&'a A> for Iter<'a, A> {}\n+impl<'a, A> ExactSizeIterator for Iter<'a, A> {}\n \n #[stable]\n-impl<'a, A> Iterator<&'a mut A> for IterMut<'a, A> {\n+impl<'a, A> Iterator for IterMut<'a, A> {\n+    type Item = &'a mut A;\n     #[inline]\n     fn next(&mut self) -> Option<&'a mut A> {\n         if self.nelem == 0 {\n@@ -569,7 +572,7 @@ impl<'a, A> Iterator<&'a mut A> for IterMut<'a, A> {\n }\n \n #[stable]\n-impl<'a, A> DoubleEndedIterator<&'a mut A> for IterMut<'a, A> {\n+impl<'a, A> DoubleEndedIterator for IterMut<'a, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut A> {\n         if self.nelem == 0 {\n@@ -584,7 +587,7 @@ impl<'a, A> DoubleEndedIterator<&'a mut A> for IterMut<'a, A> {\n }\n \n #[stable]\n-impl<'a, A> ExactSizeIterator<&'a mut A> for IterMut<'a, A> {}\n+impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n \n /// Allows mutating a `DList` while iterating.\n #[deprecated = \"Trait is deprecated, use inherent methods on the iterator instead\"]\n@@ -676,7 +679,9 @@ impl<'a, A> IterMut<'a, A> {\n }\n \n #[stable]\n-impl<A> Iterator<A> for IntoIter<A> {\n+impl<A> Iterator for IntoIter<A> {\n+    type Item = A;\n+\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.list.pop_front() }\n \n@@ -687,14 +692,14 @@ impl<A> Iterator<A> for IntoIter<A> {\n }\n \n #[stable]\n-impl<A> DoubleEndedIterator<A> for IntoIter<A> {\n+impl<A> DoubleEndedIterator for IntoIter<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.list.pop_back() }\n }\n \n #[stable]\n impl<A> FromIterator<A> for DList<A> {\n-    fn from_iter<T: Iterator<A>>(iterator: T) -> DList<A> {\n+    fn from_iter<T: Iterator<Item=A>>(iterator: T) -> DList<A> {\n         let mut ret = DList::new();\n         ret.extend(iterator);\n         ret\n@@ -703,7 +708,7 @@ impl<A> FromIterator<A> for DList<A> {\n \n #[stable]\n impl<A> Extend<A> for DList<A> {\n-    fn extend<T: Iterator<A>>(&mut self, mut iterator: T) {\n+    fn extend<T: Iterator<Item=A>>(&mut self, mut iterator: T) {\n         for elt in iterator { self.push_back(elt); }\n     }\n }"}, {"sha": "1d6caf2cceefdd92c6849dcd4822602056754f54", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -231,7 +231,9 @@ impl<E:CLike> Iter<E> {\n     }\n }\n \n-impl<E:CLike> Iterator<E> for Iter<E> {\n+impl<E:CLike> Iterator for Iter<E> {\n+    type Item = E;\n+\n     fn next(&mut self) -> Option<E> {\n         if self.bits == 0 {\n             return None;\n@@ -254,15 +256,15 @@ impl<E:CLike> Iterator<E> for Iter<E> {\n }\n \n impl<E:CLike> FromIterator<E> for EnumSet<E> {\n-    fn from_iter<I:Iterator<E>>(iterator: I) -> EnumSet<E> {\n+    fn from_iter<I:Iterator<Item=E>>(iterator: I) -> EnumSet<E> {\n         let mut ret = EnumSet::new();\n         ret.extend(iterator);\n         ret\n     }\n }\n \n impl<E:CLike> Extend<E> for EnumSet<E> {\n-    fn extend<I: Iterator<E>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=E>>(&mut self, mut iterator: I) {\n         for element in iterator {\n             self.insert(element);\n         }"}, {"sha": "eb58edbe453bd04fc9f2ef4e301e7ff5040fc619", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -1151,7 +1151,9 @@ impl<'a, T> Clone for Iter<'a, T> {\n }\n \n #[stable]\n-impl<'a, T> Iterator<&'a T> for Iter<'a, T> {\n+impl<'a, T> Iterator for Iter<'a, T> {\n+    type Item = &'a T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<&'a T> {\n         if self.tail == self.head {\n@@ -1170,7 +1172,7 @@ impl<'a, T> Iterator<&'a T> for Iter<'a, T> {\n }\n \n #[stable]\n-impl<'a, T> DoubleEndedIterator<&'a T> for Iter<'a, T> {\n+impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a T> {\n         if self.tail == self.head {\n@@ -1182,10 +1184,10 @@ impl<'a, T> DoubleEndedIterator<&'a T> for Iter<'a, T> {\n }\n \n #[stable]\n-impl<'a, T> ExactSizeIterator<&'a T> for Iter<'a, T> {}\n+impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n #[stable]\n-impl<'a, T> RandomAccessIterator<&'a T> for Iter<'a, T> {\n+impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n         let (len, _) = self.size_hint();\n@@ -1217,7 +1219,9 @@ pub struct IterMut<'a, T:'a> {\n }\n \n #[stable]\n-impl<'a, T> Iterator<&'a mut T> for IterMut<'a, T> {\n+impl<'a, T> Iterator for IterMut<'a, T> {\n+    type Item = &'a mut T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<&'a mut T> {\n         if self.tail == self.head {\n@@ -1239,7 +1243,7 @@ impl<'a, T> Iterator<&'a mut T> for IterMut<'a, T> {\n }\n \n #[stable]\n-impl<'a, T> DoubleEndedIterator<&'a mut T> for IterMut<'a, T> {\n+impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut T> {\n         if self.tail == self.head {\n@@ -1254,7 +1258,7 @@ impl<'a, T> DoubleEndedIterator<&'a mut T> for IterMut<'a, T> {\n }\n \n #[stable]\n-impl<'a, T> ExactSizeIterator<&'a mut T> for IterMut<'a, T> {}\n+impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n /// A by-value RingBuf iterator\n #[stable]\n@@ -1263,7 +1267,9 @@ pub struct IntoIter<T> {\n }\n \n #[stable]\n-impl<T> Iterator<T> for IntoIter<T> {\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<T> {\n         self.inner.pop_front()\n@@ -1277,15 +1283,15 @@ impl<T> Iterator<T> for IntoIter<T> {\n }\n \n #[stable]\n-impl<T> DoubleEndedIterator<T> for IntoIter<T> {\n+impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.inner.pop_back()\n     }\n }\n \n #[stable]\n-impl<T> ExactSizeIterator<T> for IntoIter<T> {}\n+impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// A draining RingBuf iterator\n #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n@@ -1304,7 +1310,9 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n }\n \n #[stable]\n-impl<'a, T: 'a> Iterator<T> for Drain<'a, T> {\n+impl<'a, T: 'a> Iterator for Drain<'a, T> {\n+    type Item = T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<T> {\n         self.inner.pop_front()\n@@ -1318,15 +1326,15 @@ impl<'a, T: 'a> Iterator<T> for Drain<'a, T> {\n }\n \n #[stable]\n-impl<'a, T: 'a> DoubleEndedIterator<T> for Drain<'a, T> {\n+impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.inner.pop_back()\n     }\n }\n \n #[stable]\n-impl<'a, T: 'a> ExactSizeIterator<T> for Drain<'a, T> {}\n+impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[stable]\n impl<A: PartialEq> PartialEq for RingBuf<A> {\n@@ -1382,7 +1390,7 @@ impl<A> IndexMut<uint, A> for RingBuf<A> {\n \n #[stable]\n impl<A> FromIterator<A> for RingBuf<A> {\n-    fn from_iter<T: Iterator<A>>(iterator: T) -> RingBuf<A> {\n+    fn from_iter<T: Iterator<Item=A>>(iterator: T) -> RingBuf<A> {\n         let (lower, _) = iterator.size_hint();\n         let mut deq = RingBuf::with_capacity(lower);\n         deq.extend(iterator);\n@@ -1392,7 +1400,7 @@ impl<A> FromIterator<A> for RingBuf<A> {\n \n #[stable]\n impl<A> Extend<A> for RingBuf<A> {\n-    fn extend<T: Iterator<A>>(&mut self, mut iterator: T) {\n+    fn extend<T: Iterator<Item=A>>(&mut self, mut iterator: T) {\n         for elt in iterator {\n             self.push_back(elt);\n         }"}, {"sha": "92bdf0be3786259aa3762342cfd5e8d4779e4bf9", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -1140,7 +1140,9 @@ struct SizeDirection {\n     dir: Direction,\n }\n \n-impl Iterator<(uint, uint)> for ElementSwaps {\n+impl Iterator for ElementSwaps {\n+    type Item = (uint, uint);\n+\n     #[inline]\n     fn next(&mut self) -> Option<(uint, uint)> {\n         fn new_pos(i: uint, s: Direction) -> uint {\n@@ -1207,7 +1209,9 @@ pub struct Permutations<T> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<T: Clone> Iterator<Vec<T>> for Permutations<T> {\n+impl<T: Clone> Iterator for Permutations<T> {\n+    type Item = Vec<T>;\n+\n     #[inline]\n     fn next(&mut self) -> Option<Vec<T>> {\n         match self.swaps.next() {"}, {"sha": "7f35e5fd1ca0a8c6b30af99c8112680fcd47751c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -181,7 +181,9 @@ pub struct Decompositions<'a> {\n     sorted: bool\n }\n \n-impl<'a> Iterator<char> for Decompositions<'a> {\n+impl<'a> Iterator for Decompositions<'a> {\n+    type Item = char;\n+\n     #[inline]\n     fn next(&mut self) -> Option<char> {\n         match self.buffer.first() {\n@@ -268,7 +270,9 @@ pub struct Recompositions<'a> {\n     last_ccc: Option<u8>\n }\n \n-impl<'a> Iterator<char> for Recompositions<'a> {\n+impl<'a> Iterator for Recompositions<'a> {\n+    type Item = char;\n+\n     #[inline]\n     fn next(&mut self) -> Option<char> {\n         loop {\n@@ -357,7 +361,9 @@ pub struct Utf16Units<'a> {\n     encoder: Utf16Encoder<Chars<'a>>\n }\n \n-impl<'a> Iterator<u16> for Utf16Units<'a> {\n+impl<'a> Iterator for Utf16Units<'a> {\n+    type Item = u16;\n+\n     #[inline]\n     fn next(&mut self) -> Option<u16> { self.encoder.next() }\n "}, {"sha": "99273d9575ba1477f278686c45e8f57e7d85c142", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -781,7 +781,7 @@ impl fmt::Show for FromUtf16Error {\n \n #[experimental = \"waiting on FromIterator stabilization\"]\n impl FromIterator<char> for String {\n-    fn from_iter<I:Iterator<char>>(iterator: I) -> String {\n+    fn from_iter<I:Iterator<Item=char>>(iterator: I) -> String {\n         let mut buf = String::new();\n         buf.extend(iterator);\n         buf\n@@ -790,7 +790,7 @@ impl FromIterator<char> for String {\n \n #[experimental = \"waiting on FromIterator stabilization\"]\n impl<'a> FromIterator<&'a str> for String {\n-    fn from_iter<I:Iterator<&'a str>>(iterator: I) -> String {\n+    fn from_iter<I:Iterator<Item=&'a str>>(iterator: I) -> String {\n         let mut buf = String::new();\n         buf.extend(iterator);\n         buf\n@@ -799,7 +799,7 @@ impl<'a> FromIterator<&'a str> for String {\n \n #[experimental = \"waiting on Extend stabilization\"]\n impl Extend<char> for String {\n-    fn extend<I:Iterator<char>>(&mut self, mut iterator: I) {\n+    fn extend<I:Iterator<Item=char>>(&mut self, mut iterator: I) {\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);\n         for ch in iterator {\n@@ -810,7 +810,7 @@ impl Extend<char> for String {\n \n #[experimental = \"waiting on Extend stabilization\"]\n impl<'a> Extend<&'a str> for String {\n-    fn extend<I: Iterator<&'a str>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=&'a str>>(&mut self, mut iterator: I) {\n         // A guess that at least one byte per iterator element will be needed.\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);"}, {"sha": "cba2824cf9bcb1476b9c24752b91af2dc4b9ad52", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -1164,7 +1164,7 @@ impl<T: PartialEq> Vec<T> {\n \n /// Deprecated: use `unzip` directly on the iterator instead.\n #[deprecated = \"use unzip directly on the iterator instead\"]\n-pub fn unzip<T, U, V: Iterator<(T, U)>>(iter: V) -> (Vec<T>, Vec<U>) {\n+pub fn unzip<T, U, V: Iterator<Item=(T, U)>>(iter: V) -> (Vec<T>, Vec<U>) {\n     iter.unzip()\n }\n \n@@ -1317,7 +1317,7 @@ impl<T> ops::DerefMut for Vec<T> {\n #[experimental = \"waiting on FromIterator stability\"]\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n-    fn from_iter<I:Iterator<T>>(mut iterator: I) -> Vec<T> {\n+    fn from_iter<I:Iterator<Item=T>>(mut iterator: I) -> Vec<T> {\n         let (lower, _) = iterator.size_hint();\n         let mut vector = Vec::with_capacity(lower);\n         for element in iterator {\n@@ -1330,7 +1330,7 @@ impl<T> FromIterator<T> for Vec<T> {\n #[experimental = \"waiting on Extend stability\"]\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n-    fn extend<I: Iterator<T>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=T>>(&mut self, mut iterator: I) {\n         let (lower, _) = iterator.size_hint();\n         self.reserve(lower);\n         for element in iterator {\n@@ -1506,7 +1506,7 @@ impl<'a> fmt::Writer for Vec<u8> {\n pub type CowVec<'a, T> = Cow<'a, Vec<T>, [T]>;\n \n impl<'a, T> FromIterator<T> for CowVec<'a, T> where T: Clone {\n-    fn from_iter<I: Iterator<T>>(it: I) -> CowVec<'a, T> {\n+    fn from_iter<I: Iterator<Item=T>>(it: I) -> CowVec<'a, T> {\n         Cow::Owned(FromIterator::from_iter(it))\n     }\n }\n@@ -1557,7 +1557,9 @@ impl<T> IntoIter<T> {\n     pub fn unwrap(self) -> Vec<T> { self.into_inner() }\n }\n \n-impl<T> Iterator<T> for IntoIter<T> {\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = T;\n+\n     #[inline]\n     fn next<'a>(&'a mut self) -> Option<T> {\n         unsafe {\n@@ -1591,7 +1593,7 @@ impl<T> Iterator<T> for IntoIter<T> {\n     }\n }\n \n-impl<T> DoubleEndedIterator<T> for IntoIter<T> {\n+impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n     fn next_back<'a>(&'a mut self) -> Option<T> {\n         unsafe {\n@@ -1614,7 +1616,7 @@ impl<T> DoubleEndedIterator<T> for IntoIter<T> {\n     }\n }\n \n-impl<T> ExactSizeIterator<T> for IntoIter<T> {}\n+impl<T> ExactSizeIterator for IntoIter<T> {}\n \n #[unsafe_destructor]\n impl<T> Drop for IntoIter<T> {\n@@ -1638,7 +1640,9 @@ pub struct Drain<'a, T> {\n     marker: ContravariantLifetime<'a>,\n }\n \n-impl<'a, T> Iterator<T> for Drain<'a, T> {\n+impl<'a, T> Iterator for Drain<'a, T> {\n+    type Item = T;\n+\n     #[inline]\n     fn next(&mut self) -> Option<T> {\n         unsafe {\n@@ -1672,7 +1676,7 @@ impl<'a, T> Iterator<T> for Drain<'a, T> {\n     }\n }\n \n-impl<'a, T> DoubleEndedIterator<T> for Drain<'a, T> {\n+impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         unsafe {\n@@ -1695,7 +1699,7 @@ impl<'a, T> DoubleEndedIterator<T> for Drain<'a, T> {\n     }\n }\n \n-impl<'a, T> ExactSizeIterator<T> for Drain<'a, T> {}\n+impl<'a, T> ExactSizeIterator for Drain<'a, T> {}\n \n #[unsafe_destructor]\n impl<'a, T> Drop for Drain<'a, T> {"}, {"sha": "bf0c8f10e5ff0f52b72de6fff4ee2ef86ce9360a", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b116bedafe29b7876b95575451c92452a1ec72b/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=6b116bedafe29b7876b95575451c92452a1ec72b", "patch": "@@ -546,7 +546,7 @@ impl<V: fmt::Show> fmt::Show for VecMap<V> {\n \n #[stable]\n impl<V> FromIterator<(uint, V)> for VecMap<V> {\n-    fn from_iter<Iter: Iterator<(uint, V)>>(iter: Iter) -> VecMap<V> {\n+    fn from_iter<Iter: Iterator<Item=(uint, V)>>(iter: Iter) -> VecMap<V> {\n         let mut map = VecMap::new();\n         map.extend(iter);\n         map\n@@ -555,7 +555,7 @@ impl<V> FromIterator<(uint, V)> for VecMap<V> {\n \n #[stable]\n impl<V> Extend<(uint, V)> for VecMap<V> {\n-    fn extend<Iter: Iterator<(uint, V)>>(&mut self, mut iter: Iter) {\n+    fn extend<Iter: Iterator<Item=(uint, V)>>(&mut self, mut iter: Iter) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }\n@@ -581,7 +581,9 @@ impl<V> IndexMut<uint, V> for VecMap<V> {\n macro_rules! iterator {\n     (impl $name:ident -> $elem:ty, $($getter:ident),+) => {\n         #[stable]\n-        impl<'a, V> Iterator<$elem> for $name<'a, V> {\n+        impl<'a, V> Iterator for $name<'a, V> {\n+            type Item = $elem;\n+\n             #[inline]\n             fn next(&mut self) -> Option<$elem> {\n                 while self.front < self.back {\n@@ -614,7 +616,7 @@ macro_rules! iterator {\n macro_rules! double_ended_iterator {\n     (impl $name:ident -> $elem:ty, $($getter:ident),+) => {\n         #[stable]\n-        impl<'a, V> DoubleEndedIterator<$elem> for $name<'a, V> {\n+        impl<'a, V> DoubleEndedIterator for $name<'a, V> {\n             #[inline]\n             fn next_back(&mut self) -> Option<$elem> {\n                 while self.front < self.back {\n@@ -713,32 +715,38 @@ pub struct IntoIter<V> {\n }\n \n #[stable]\n-impl<'a, V> Iterator<uint> for Keys<'a, V> {\n+impl<'a, V> Iterator for Keys<'a, V> {\n+    type Item = uint;\n+\n     fn next(&mut self) -> Option<uint> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n #[stable]\n-impl<'a, V> DoubleEndedIterator<uint> for Keys<'a, V> {\n+impl<'a, V> DoubleEndedIterator for Keys<'a, V> {\n     fn next_back(&mut self) -> Option<uint> { self.iter.next_back() }\n }\n \n #[stable]\n-impl<'a, V> Iterator<&'a V> for Values<'a, V> {\n+impl<'a, V> Iterator for Values<'a, V> {\n+    type Item = &'a V;\n+\n     fn next(&mut self) -> Option<(&'a V)> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n #[stable]\n-impl<'a, V> DoubleEndedIterator<&'a V> for Values<'a, V> {\n+impl<'a, V> DoubleEndedIterator for Values<'a, V> {\n     fn next_back(&mut self) -> Option<(&'a V)> { self.iter.next_back() }\n }\n \n #[stable]\n-impl<V> Iterator<(uint, V)> for IntoIter<V> {\n+impl<V> Iterator for IntoIter<V> {\n+    type Item = (uint, V);\n+\n     fn next(&mut self) -> Option<(uint, V)> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n #[stable]\n-impl<V> DoubleEndedIterator<(uint, V)> for IntoIter<V> {\n+impl<V> DoubleEndedIterator for IntoIter<V> {\n     fn next_back(&mut self) -> Option<(uint, V)> { self.iter.next_back() }\n }\n "}]}