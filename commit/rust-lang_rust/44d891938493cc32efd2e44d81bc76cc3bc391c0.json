{"sha": "44d891938493cc32efd2e44d81bc76cc3bc391c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDg5MTkzODQ5M2NjMzJlZmQyZTQ0ZDgxYmM3NmNjM2JjMzkxYzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T10:23:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T10:23:37Z"}, "message": "Submodule is enum", "tree": {"sha": "c5f526b4ac72c0a72871c537220aa53df4e845b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f526b4ac72c0a72871c537220aa53df4e845b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d891938493cc32efd2e44d81bc76cc3bc391c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d891938493cc32efd2e44d81bc76cc3bc391c0", "html_url": "https://github.com/rust-lang/rust/commit/44d891938493cc32efd2e44d81bc76cc3bc391c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d891938493cc32efd2e44d81bc76cc3bc391c0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a88928f49f31b9b076ef66d57354f45032be56", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a88928f49f31b9b076ef66d57354f45032be56", "html_url": "https://github.com/rust-lang/rust/commit/17a88928f49f31b9b076ef66d57354f45032be56"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "257a323edf152d3a517d0ad71711687136e5baef", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/44d891938493cc32efd2e44d81bc76cc3bc391c0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d891938493cc32efd2e44d81bc76cc3bc391c0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=44d891938493cc32efd2e44d81bc76cc3bc391c0", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use ra_syntax::{\n-    ast::{self, ModuleItemOwner, NameOwner},\n+    ast::{self, ModuleItemOwner, NameOwner, AstNode},\n     SmolStr,\n };\n use relative_path::RelativePathBuf;\n@@ -12,6 +12,7 @@ use crate::{\n     descriptors::DescriptorDatabase,\n     input::{SourceRoot, SourceRootId},\n     Cancelable, FileId, FileResolverImp,\n+    syntax_ptr::SyntaxPtr,\n };\n \n use super::{\n@@ -20,29 +21,48 @@ use super::{\n };\n \n #[derive(Clone, Hash, PartialEq, Eq, Debug)]\n-pub(crate) struct Submodule {\n-    name: SmolStr,\n+pub(crate) enum Submodule {\n+    Declaration(SmolStr),\n+    Definition(SmolStr, SyntaxPtr),\n+}\n+\n+impl Submodule {\n+    fn name(&self) -> &SmolStr {\n+        match self {\n+            Submodule::Declaration(name) => name,\n+            Submodule::Definition(name, _) => name,\n+        }\n+    }\n }\n \n pub(crate) fn submodules(\n     db: &impl DescriptorDatabase,\n     source: ModuleSource,\n ) -> Cancelable<Arc<Vec<Submodule>>> {\n     db::check_canceled(db)?;\n+    let file_id = source.file_id();\n     let submodules = match source.resolve(db) {\n-        ModuleSourceNode::Root(it) => collect_submodules(it.ast()),\n+        ModuleSourceNode::Root(it) => collect_submodules(file_id, it.ast()),\n         ModuleSourceNode::Inline(it) => it\n             .ast()\n             .item_list()\n-            .map(collect_submodules)\n+            .map(|it| collect_submodules(file_id, it))\n             .unwrap_or_else(Vec::new),\n     };\n     return Ok(Arc::new(submodules));\n \n-    fn collect_submodules<'a>(root: impl ast::ModuleItemOwner<'a>) -> Vec<Submodule> {\n+    fn collect_submodules<'a>(\n+        file_id: FileId,\n+        root: impl ast::ModuleItemOwner<'a>,\n+    ) -> Vec<Submodule> {\n         modules(root)\n-            .filter(|(_, m)| m.has_semi())\n-            .map(|(name, _)| Submodule { name })\n+            .map(|(name, m)| {\n+                if m.has_semi() {\n+                    Submodule::Declaration(name)\n+                } else {\n+                    Submodule::Definition(name, SyntaxPtr::new(file_id, m.syntax()))\n+                }\n+            })\n             .collect()\n     }\n }\n@@ -135,25 +155,40 @@ fn build_subtree(\n         children: Vec::new(),\n     });\n     for sub in db.submodules(ModuleSource::File(file_id))?.iter() {\n-        let name = sub.name.clone();\n-        let (points_to, problem) = resolve_submodule(file_id, &name, &source_root.file_resolver);\n         let link = tree.push_link(LinkData {\n-            name,\n+            name: sub.name().clone(),\n             owner: id,\n             points_to: Vec::new(),\n             problem: None,\n         });\n \n-        let points_to = points_to\n-            .into_iter()\n-            .map(|file_id| match roots.remove(&file_id) {\n-                Some(module_id) => {\n-                    tree.module_mut(module_id).parent = Some(link);\n-                    Ok(module_id)\n-                }\n-                None => build_subtree(db, source_root, tree, visited, roots, Some(link), file_id),\n-            })\n-            .collect::<Cancelable<Vec<_>>>()?;\n+        let (points_to, problem) = match sub {\n+            Submodule::Declaration(name) => {\n+                let (points_to, problem) =\n+                    resolve_submodule(file_id, &name, &source_root.file_resolver);\n+                let points_to = points_to\n+                    .into_iter()\n+                    .map(|file_id| match roots.remove(&file_id) {\n+                        Some(module_id) => {\n+                            tree.module_mut(module_id).parent = Some(link);\n+                            Ok(module_id)\n+                        }\n+                        None => build_subtree(\n+                            db,\n+                            source_root,\n+                            tree,\n+                            visited,\n+                            roots,\n+                            Some(link),\n+                            file_id,\n+                        ),\n+                    })\n+                    .collect::<Cancelable<Vec<_>>>()?;\n+                (points_to, problem)\n+            }\n+            Submodule::Definition(..) => continue,\n+        };\n+\n         tree.link_mut(link).points_to = points_to;\n         tree.link_mut(link).problem = problem;\n     }"}, {"sha": "8464b0618a01cb6204c2a09f91e58cad30bb177f", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44d891938493cc32efd2e44d81bc76cc3bc391c0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d891938493cc32efd2e44d81bc76cc3bc391c0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=44d891938493cc32efd2e44d81bc76cc3bc391c0", "patch": "@@ -164,6 +164,13 @@ impl ModuleSource {\n         }\n     }\n \n+    fn file_id(self) -> FileId {\n+        match self {\n+            ModuleSource::File(f) => f,\n+            ModuleSource::Inline(ptr) => ptr.file_id(),\n+        }\n+    }\n+\n     fn resolve(self, db: &impl SyntaxDatabase) -> ModuleSourceNode {\n         match self {\n             ModuleSource::File(file_id) => {"}, {"sha": "4afb1fc93032a2711c4a164f917fa0361b4e7343", "filename": "crates/ra_analysis/src/syntax_ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44d891938493cc32efd2e44d81bc76cc3bc391c0/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d891938493cc32efd2e44d81bc76cc3bc391c0/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs?ref=44d891938493cc32efd2e44d81bc76cc3bc391c0", "patch": "@@ -22,6 +22,10 @@ impl SyntaxPtr {\n         let local = LocalSyntaxPtr::new(node);\n         SyntaxPtr { file_id, local }\n     }\n+\n+    pub(crate) fn file_id(self) -> FileId {\n+        self.file_id\n+    }\n }\n \n /// A pionter to a syntax node inside a file."}]}