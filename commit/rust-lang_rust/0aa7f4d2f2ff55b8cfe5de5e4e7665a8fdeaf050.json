{"sha": "0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTdmNGQyZjJmZjU1YjhjZmU1ZGU1ZTRlNzY2NWE4ZmRlYWYwNTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-02T19:44:25Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-30T10:59:05Z"}, "message": "Make TLS accesses explicit in MIR", "tree": {"sha": "1aa0aed21020a916efac714459a6ba07c6f82f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa0aed21020a916efac714459a6ba07c6f82f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "html_url": "https://github.com/rust-lang/rust/commit/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9e4083100aa3ebf09b8f1ace0348cb37475eb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9e4083100aa3ebf09b8f1ace0348cb37475eb9", "html_url": "https://github.com/rust-lang/rust/commit/0e9e4083100aa3ebf09b8f1ace0348cb37475eb9"}], "stats": {"total": 180, "additions": 157, "deletions": 23}, "files": [{"sha": "a5cda5949eec3971d737d39b56ea4fc280613da1", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -259,6 +259,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     GlobalAlloc::Function(fn_instance) => self.get_fn_addr(fn_instance),\n                     GlobalAlloc::Static(def_id) => {\n                         assert!(self.tcx.is_static(def_id));\n+                        assert!(!self.tcx.is_thread_local_static(def_id));\n                         self.get_static(def_id)\n                     }\n                 };"}, {"sha": "57f72b1065d05a609f352f011546dcc8f1ee5473", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -522,6 +522,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let operand = OperandRef { val: OperandValue::Immediate(val), layout: box_layout };\n                 (bx, operand)\n             }\n+            mir::Rvalue::ThreadLocalRef(def_id) => {\n+                assert!(bx.cx().tcx().is_static(def_id));\n+                let static_ = bx.get_static(def_id);\n+                let layout = bx.layout_of(bx.cx().tcx().static_ptr_ty(def_id));\n+                let operand = OperandRef::from_immediate_or_packed_pair(&mut bx, static_, layout);\n+                (bx, operand)\n+            }\n             mir::Rvalue::Use(ref operand) => {\n                 let operand = self.codegen_operand(&mut bx, operand);\n                 (bx, operand)\n@@ -745,6 +752,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::UnaryOp(..) |\n             mir::Rvalue::Discriminant(..) |\n             mir::Rvalue::NullaryOp(..) |\n+            mir::Rvalue::ThreadLocalRef(_) |\n             mir::Rvalue::Use(..) => // (*)\n                 true,\n             mir::Rvalue::Repeat(..) |"}, {"sha": "3cc25a50a8781c46701df18047875a91349fe1b2", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -513,6 +513,8 @@ pub enum UnsupportedOpInfo {\n     //\n     /// Encountered raw bytes where we needed a pointer.\n     ReadBytesAsPointer,\n+    /// Accessing thread local statics\n+    ThreadLocalStatic(DefId),\n }\n \n impl fmt::Display for UnsupportedOpInfo {\n@@ -526,6 +528,7 @@ impl fmt::Display for UnsupportedOpInfo {\n             NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ReadBytesAsPointer => write!(f, \"unable to turn bytes into a pointer\"),\n+            ThreadLocalStatic(did) => write!(f, \"accessing thread local static {:?}\", did),\n         }\n     }\n }"}, {"sha": "5e57b60894a588d07cc29561c057131e919508de", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -209,6 +209,7 @@ pub fn specialized_encode_alloc_id<'tcx, E: Encoder>(\n             fn_instance.encode(encoder)?;\n         }\n         GlobalAlloc::Static(did) => {\n+            assert!(!tcx.is_thread_local_static(did));\n             // References to statics doesn't need to know about their allocations,\n             // just about its `DefId`.\n             AllocDiscriminant::Static.encode(encoder)?;"}, {"sha": "231f4d5e669278ef39a3c9d1ffc0e9168feac606", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -2209,6 +2209,11 @@ pub enum Rvalue<'tcx> {\n     /// &x or &mut x\n     Ref(Region<'tcx>, BorrowKind, Place<'tcx>),\n \n+    /// Accessing a thread local static. This is inherently a runtime operation, even if llvm\n+    /// treats it as an access to a static. This `Rvalue` yields a reference to the thread local\n+    /// static.\n+    ThreadLocalRef(DefId),\n+\n     /// Create a raw pointer to the given place\n     /// Can be generated by raw address of expressions (`&raw const x`),\n     /// or when casting a reference to a raw pointer.\n@@ -2348,6 +2353,10 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Discriminant(ref place) => write!(fmt, \"discriminant({:?})\", place),\n             NullaryOp(ref op, ref t) => write!(fmt, \"{:?}({:?})\", op, t),\n+            ThreadLocalRef(did) => ty::tls::with(|tcx| {\n+                let muta = tcx.static_mutability(did).unwrap().prefix_str();\n+                write!(fmt, \"&/*tls*/ {}{}\", muta, tcx.def_path_str(did))\n+            }),\n             Ref(region, borrow_kind, ref place) => {\n                 let kind_str = match borrow_kind {\n                     BorrowKind::Shared => \"\",\n@@ -2501,7 +2510,10 @@ impl Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n         match self.literal.val.try_to_scalar() {\n             Some(Scalar::Ptr(ptr)) => match tcx.global_alloc(ptr.alloc_id) {\n-                GlobalAlloc::Static(def_id) => Some(def_id),\n+                GlobalAlloc::Static(def_id) => {\n+                    assert!(!tcx.is_thread_local_static(def_id));\n+                    Some(def_id)\n+                }\n                 _ => None,\n             },\n             _ => None,"}, {"sha": "e1325aadd40b69c41870322ed745e1503f15d996", "filename": "src/librustc_middle/mir/tcx.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftcx.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -152,6 +152,13 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Repeat(ref operand, count) => {\n                 tcx.mk_ty(ty::Array(operand.ty(local_decls, tcx), count))\n             }\n+            Rvalue::ThreadLocalRef(did) => {\n+                if tcx.is_mutable_static(did) {\n+                    tcx.mk_mut_ptr(tcx.type_of(did))\n+                } else {\n+                    tcx.mk_imm_ref(tcx.lifetimes.re_static, tcx.type_of(did))\n+                }\n+            }\n             Rvalue::Ref(reg, bk, ref place) => {\n                 let place_ty = place.ty(local_decls, tcx).ty;\n                 tcx.mk_ref(reg, ty::TypeAndMut { ty: place_ty, mutbl: bk.to_mutbl_lossy() })"}, {"sha": "3512feb128ce3adcd1804c41c70c33fe39e9b37c", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -173,6 +173,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n         match *self {\n             Use(ref op) => Use(op.fold_with(folder)),\n             Repeat(ref op, len) => Repeat(op.fold_with(folder), len),\n+            ThreadLocalRef(did) => ThreadLocalRef(did.fold_with(folder)),\n             Ref(region, bk, ref place) => {\n                 Ref(region.fold_with(folder), bk, place.fold_with(folder))\n             }\n@@ -216,6 +217,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n             Repeat(ref op, _) => op.visit_with(visitor),\n+            ThreadLocalRef(did) => did.visit_with(visitor),\n             Ref(region, _, ref place) => region.visit_with(visitor) || place.visit_with(visitor),\n             AddressOf(_, ref place) => place.visit_with(visitor),\n             Len(ref place) => place.visit_with(visitor),"}, {"sha": "fa648a8807ebc8443642f262b7d0902cb72ebb81", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -600,6 +600,8 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(value, location);\n                     }\n \n+                    Rvalue::ThreadLocalRef(_) => {}\n+\n                     Rvalue::Ref(r, bk, path) => {\n                         self.visit_region(r, location);\n                         let ctx = match bk {"}, {"sha": "213dae130a9edae80c9a77db9d63e4fd1df1b7e3", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -295,6 +295,8 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n                 self.access_place(location, place, access_kind, LocalMutationIsAllowed::No);\n             }\n \n+            Rvalue::ThreadLocalRef(_) => {}\n+\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::UnaryOp(_ /*un_op*/, ref operand)"}, {"sha": "8238f40bbc862992855fe57a5038f305fefe6e7c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -1290,6 +1290,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 );\n             }\n \n+            Rvalue::ThreadLocalRef(_) => {}\n+\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::UnaryOp(_ /*un_op*/, ref operand)"}, {"sha": "fdc3b291ba44a8e21fa01768805d473dc18b0fa3", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -2353,6 +2353,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             Rvalue::AddressOf(..)\n+            | Rvalue::ThreadLocalRef(..)\n             | Rvalue::Use(..)\n             | Rvalue::Len(..)\n             | Rvalue::BinaryOp(..)\n@@ -2368,6 +2369,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<UserTypeAnnotationIndex> {\n         match rvalue {\n             Rvalue::Use(_)\n+            | Rvalue::ThreadLocalRef(_)\n             | Rvalue::Repeat(..)\n             | Rvalue::Ref(..)\n             | Rvalue::AddressOf(..)"}, {"sha": "9905265741534a0f3153334339fab3636c0766d0", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -176,6 +176,7 @@ where\n \n             mir::Rvalue::Cast(..)\n             | mir::Rvalue::Use(..)\n+            | mir::Rvalue::ThreadLocalRef(..)\n             | mir::Rvalue::Repeat(..)\n             | mir::Rvalue::Len(..)\n             | mir::Rvalue::BinaryOp(..)"}, {"sha": "2779c9e1073f385cc5b6bef97e45cae67db4cda8", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -324,6 +324,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n \n     fn gather_rvalue(&mut self, rvalue: &Rvalue<'tcx>) {\n         match *rvalue {\n+            Rvalue::ThreadLocalRef(_) => {} // not-a-move\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::Cast(_, ref operand, _)"}, {"sha": "b5dc40d95519195eb9149b7f600f7b828c44a360", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -358,6 +358,13 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _mem: &Memory<'mir, 'tcx, Self>,\n         _ptr: Pointer<Self::PointerTag>,\n     ) -> InterpResult<'tcx, u64>;\n+\n+    fn thread_local_alloc_id(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        did: DefId,\n+    ) -> InterpResult<'tcx, AllocId> {\n+        throw_unsup!(ThreadLocalStatic(did))\n+    }\n }\n \n // A lot of the flexibility above is just needed for `Miri`, but all \"compile-time\" machines"}, {"sha": "d7f64542aa78dc44c0cf2f7b5d4197aaa7991292", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -437,6 +437,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(GlobalAlloc::Function(..)) => throw_ub!(DerefFunctionPointer(id)),\n             None => throw_ub!(PointerUseAfterFree(id)),\n             Some(GlobalAlloc::Static(def_id)) => {\n+                assert!(!tcx.is_thread_local_static(def_id));\n                 // Notice that every static has two `AllocId` that will resolve to the same\n                 // thing here: one maps to `GlobalAlloc::Static`, this is the \"lazy\" ID,\n                 // and the other one is maps to `GlobalAlloc::Memory`, this is returned by\n@@ -592,6 +593,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // be held throughout the match.\n         match self.tcx.get_global_alloc(id) {\n             Some(GlobalAlloc::Static(did)) => {\n+                assert!(!self.tcx.is_thread_local_static(did));\n                 // Use size and align of the type.\n                 let ty = self.tcx.type_of(did);\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();"}, {"sha": "c15714260dc522a328241ebdaec16f51d3d1aedc", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -141,6 +141,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         use rustc_middle::mir::Rvalue::*;\n         match *rvalue {\n+            ThreadLocalRef(did) => {\n+                let id = M::thread_local_alloc_id(self, did)?;\n+                let val = Scalar::Ptr(self.tag_global_base_pointer(id.into()));\n+                self.write_scalar(val, dest)?;\n+            }\n+\n             Use(ref operand) => {\n                 // Avoid recomputing the layout\n                 let op = self.eval_operand(operand, Some(dest.layout))?;"}, {"sha": "b6676e8263e05b3c0fe739426eb0c0cec100f681", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -418,6 +418,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // Skip validation entirely for some external statics\n                 let alloc_kind = self.ecx.tcx.get_global_alloc(ptr.alloc_id);\n                 if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n+                    assert!(!self.ecx.tcx.is_thread_local_static(did));\n                     // See const_eval::machine::MemoryExtra::can_access_statics for why\n                     // this check is so important.\n                     // This check is reachable when the const just referenced the static,"}, {"sha": "6d7b0c830da4fbabf1db13ee65276e1df2fdba75", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -1136,6 +1136,7 @@ fn create_mono_items_for_default_impls<'tcx>(\n fn collect_miri<'tcx>(tcx: TyCtxt<'tcx>, alloc_id: AllocId, output: &mut Vec<MonoItem<'tcx>>) {\n     match tcx.global_alloc(alloc_id) {\n         GlobalAlloc::Static(def_id) => {\n+            assert!(!tcx.is_thread_local_static(def_id));\n             let instance = Instance::mono(tcx, def_id);\n             if should_monomorphize_locally(tcx, &instance) {\n                 trace!(\"collecting static {:?}\", def_id);"}, {"sha": "5d604d8e3d716c81fd559ebb76b85ff48ce397a0", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -153,7 +153,9 @@ where\n     F: FnMut(Local) -> bool,\n {\n     match rvalue {\n-        Rvalue::NullaryOp(..) => Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx)),\n+        Rvalue::ThreadLocalRef(_) | Rvalue::NullaryOp(..) => {\n+            Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx))\n+        }\n \n         Rvalue::Discriminant(place) | Rvalue::Len(place) => {\n             in_place::<Q, _>(cx, in_local, place.as_ref())"}, {"sha": "354fd200fc594969ab9d326aa2e9ee520b068668", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -263,11 +263,11 @@ impl Validator<'mir, 'tcx> {\n     }\n \n     fn check_static(&mut self, def_id: DefId, span: Span) {\n-        if self.tcx.is_thread_local_static(def_id) {\n-            self.check_op_spanned(ops::ThreadLocalAccess, span)\n-        } else {\n-            self.check_op_spanned(ops::StaticAccess, span)\n-        }\n+        assert!(\n+            !self.tcx.is_thread_local_static(def_id),\n+            \"tls access is checked in `Rvalue::ThreadLocalRef\"\n+        );\n+        self.check_op_spanned(ops::StaticAccess, span)\n     }\n }\n \n@@ -332,6 +332,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         self.super_rvalue(rvalue, location);\n \n         match *rvalue {\n+            Rvalue::ThreadLocalRef(_) => self.check_op(ops::ThreadLocalAccess),\n+\n             Rvalue::Use(_)\n             | Rvalue::Repeat(..)\n             | Rvalue::UnaryOp(UnOp::Neg, _)"}, {"sha": "2c8ad00fd06dc78bd23e4c02f560ab07b3933ec9", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -603,6 +603,8 @@ impl<'tcx> Validator<'_, 'tcx> {\n         }\n \n         match rvalue {\n+            Rvalue::ThreadLocalRef(_) => Err(Unpromotable),\n+\n             Rvalue::NullaryOp(..) => Ok(()),\n \n             Rvalue::Discriminant(place) | Rvalue::Len(place) => self.validate_place(place.as_ref()),"}, {"sha": "5615aa84eecd7c52cbfacaaacdac98eb9d1e7f03", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -156,6 +156,9 @@ fn check_rvalue(\n     span: Span,\n ) -> McfResult {\n     match rvalue {\n+        Rvalue::ThreadLocalRef(_) => {\n+            Err((span, \"cannot access thread local storage in const fn\".into()))\n+        }\n         Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n             check_operand(tcx, operand, span, def_id, body)\n         }"}, {"sha": "e811d68d5a5f8150b627017d742a31f72c900a22", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -258,6 +258,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::InlineAsm { .. }\n             | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Yield { .. }\n+            | ExprKind::ThreadLocalRef(_)\n             | ExprKind::Call { .. } => {\n                 // these are not places, so we need to make a temporary.\n                 debug_assert!(match Category::of(&expr.kind) {"}, {"sha": "9531ff0a9071fd29d289c49c14934a915880b621", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -53,6 +53,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let source_info = this.source_info(expr_span);\n \n         match expr.kind {\n+            ExprKind::ThreadLocalRef(did) => block.and(Rvalue::ThreadLocalRef(did)),\n             ExprKind::Scope { region_scope, lint_level, value } => {\n                 let region_scope = (region_scope, source_info);\n                 this.in_scope(region_scope, lint_level, |this| this.as_rvalue(block, scope, value))"}, {"sha": "901dadd6612782b71691480582077a785696379e", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -63,10 +63,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             if let Some(tail_info) = this.block_context.currently_in_block_tail() {\n                 local_decl = local_decl.block_tail(tail_info);\n             }\n-            if let ExprKind::StaticRef { def_id, .. } = expr.kind {\n-                let is_thread_local = this.hir.tcx().is_thread_local_static(def_id);\n-                local_decl.internal = true;\n-                local_decl.local_info = Some(box LocalInfo::StaticRef { def_id, is_thread_local });\n+            match expr.kind {\n+                ExprKind::StaticRef { def_id, .. } => {\n+                    assert!(!this.hir.tcx().is_thread_local_static(def_id));\n+                    local_decl.internal = true;\n+                    local_decl.local_info = Some(box LocalInfo::StaticRef { def_id, is_thread_local: false });\n+                }\n+                ExprKind::ThreadLocalRef(def_id) => {\n+                    assert!(this.hir.tcx().is_thread_local_static(def_id));\n+                    local_decl.internal = true;\n+                    local_decl.local_info = Some(box LocalInfo::StaticRef { def_id, is_thread_local: true });\n+                }\n+                _ => {}\n             }\n             this.local_decls.push(local_decl)\n         };"}, {"sha": "fb4b7997b6a5a00b18cb0a0edb7c76f094389605", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -65,6 +65,7 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n+            | ExprKind::ThreadLocalRef(_)\n             | ExprKind::LlvmInlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),"}, {"sha": "ac7477c19e339e6d6f790a5cf5f353289ed8c60e", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -444,6 +444,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Tuple { .. }\n             | ExprKind::Closure { .. }\n             | ExprKind::Literal { .. }\n+            | ExprKind::ThreadLocalRef(_)\n             | ExprKind::StaticRef { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     // should be handled above"}, {"sha": "e58b5def1c243704259b29e94a62eca914e6fe2f", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -855,20 +855,17 @@ fn convert_path_expr<'a, 'tcx>(\n         // a constant reference (or constant raw pointer for `static mut`) in MIR\n         Res::Def(DefKind::Static, id) => {\n             let ty = cx.tcx.static_ptr_ty(id);\n-            let ptr = cx.tcx.create_static_alloc(id);\n             let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n-            ExprKind::Deref {\n-                arg: Expr {\n-                    ty,\n-                    temp_lifetime,\n-                    span: expr.span,\n-                    kind: ExprKind::StaticRef {\n-                        literal: ty::Const::from_scalar(cx.tcx, Scalar::Ptr(ptr.into()), ty),\n-                        def_id: id,\n-                    },\n+            let kind = if cx.tcx.is_thread_local_static(id) {\n+                ExprKind::ThreadLocalRef(id)\n+            } else {\n+                let ptr = cx.tcx.create_static_alloc(id);\n+                ExprKind::StaticRef {\n+                    literal: ty::Const::from_scalar(cx.tcx, Scalar::Ptr(ptr.into()), ty),\n+                    def_id: id,\n                 }\n-                .to_ref(),\n-            }\n+            };\n+            ExprKind::Deref { arg: Expr { ty, temp_lifetime, span: expr.span, kind }.to_ref() }\n         }\n \n         Res::Local(var_hir_id) => convert_var(cx, expr, var_hir_id),"}, {"sha": "a8b0f3eab4b04b8a059da2c21a701eb08a49ea2d", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -284,6 +284,8 @@ crate enum ExprKind<'tcx> {\n         operands: Vec<InlineAsmOperand<'tcx>>,\n         options: InlineAsmOptions,\n     },\n+    /// An expression taking a reference to a thread local.\n+    ThreadLocalRef(DefId),\n     LlvmInlineAsm {\n         asm: &'tcx hir::LlvmInlineAsmInner,\n         outputs: Vec<ExprRef<'tcx>>,"}, {"sha": "4f3f6b1b3ac02445fb963fee3f4c3738e79e459b", "filename": "src/test/mir-opt/tls-access.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Ftest%2Fmir-opt%2Ftls-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Ftest%2Fmir-opt%2Ftls-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls-access.rs?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -0,0 +1,13 @@\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static mut FOO: u8 = 3;\n+\n+fn main() {\n+    unsafe {\n+        let a = &FOO;\n+        FOO = 42;\n+    }\n+}\n+\n+// EMIT_MIR rustc.main.SimplifyCfg-final.after.mir"}, {"sha": "e4798c2e32407bffe826524085c6ce1cacea0f21", "filename": "src/test/mir-opt/tls-access/rustc.main.SimplifyCfg-final.after.mir", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Ftest%2Fmir-opt%2Ftls-access%2Frustc.main.SimplifyCfg-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050/src%2Ftest%2Fmir-opt%2Ftls-access%2Frustc.main.SimplifyCfg-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls-access%2Frustc.main.SimplifyCfg-final.after.mir?ref=0aa7f4d2f2ff55b8cfe5de5e4e7665a8fdeaf050", "patch": "@@ -0,0 +1,40 @@\n+// MIR for `main` after SimplifyCfg-final\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/tls-access.rs:6:11: 6:11\n+    let _2: *mut u8;                     // in scope 0 at $DIR/tls-access.rs:8:18: 8:21\n+    let mut _3: *mut u8;                 // in scope 0 at $DIR/tls-access.rs:9:9: 9:12\n+    scope 1 {\n+        let _1: &u8;                     // in scope 1 at $DIR/tls-access.rs:8:13: 8:14\n+        scope 2 {\n+            debug a => _1;               // in scope 2 at $DIR/tls-access.rs:8:13: 8:14\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 1 at $DIR/tls-access.rs:8:13: 8:14\n+        StorageLive(_2);                 // scope 1 at $DIR/tls-access.rs:8:18: 8:21\n+        _2 = &/*tls*/ mut FOO;           // scope 1 at $DIR/tls-access.rs:8:18: 8:21\n+        _1 = &(*_2);                     // scope 1 at $DIR/tls-access.rs:8:17: 8:21\n+        StorageLive(_3);                 // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n+        _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n+        (*_3) = const 42u8;              // scope 2 at $DIR/tls-access.rs:9:9: 9:17\n+                                         // ty::Const\n+                                         // + ty: u8\n+                                         // + val: Value(Scalar(0x2a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/tls-access.rs:9:15: 9:17\n+                                         // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n+        StorageDead(_3);                 // scope 2 at $DIR/tls-access.rs:9:17: 9:18\n+        _0 = const ();                   // scope 1 at $DIR/tls-access.rs:7:5: 10:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/tls-access.rs:7:5: 10:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/tls-access.rs:10:5: 10:6\n+        StorageDead(_1);                 // scope 1 at $DIR/tls-access.rs:10:5: 10:6\n+        return;                          // scope 0 at $DIR/tls-access.rs:11:2: 11:2\n+    }\n+}"}]}