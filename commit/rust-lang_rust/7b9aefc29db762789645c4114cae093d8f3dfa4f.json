{"sha": "7b9aefc29db762789645c4114cae093d8f3dfa4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOWFlZmMyOWRiNzYyNzg5NjQ1YzQxMTRjYWUwOTNkOGYzZGZhNGY=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-09T11:41:03Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-09T11:52:01Z"}, "message": "Fix introduce var duplicating newlines\n\nThis fixes #713.\n\nIf the block before the statement we want to use introduce var on, had empty\nlines these empty lines would also be added between the let-statement and\nthe current line where the new variable is used.\n\nThis fixes that by trimming excess newlines from the start of the indent chunk\nand simply adding a single newline (when the chunk had newlines) between the\nlet-statement and the current statement. If there were no newlines this\nmatches the previous behaviour.", "tree": {"sha": "dab71f1805c3949077e90db0e232330dd0812bdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dab71f1805c3949077e90db0e232330dd0812bdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b9aefc29db762789645c4114cae093d8f3dfa4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9aefc29db762789645c4114cae093d8f3dfa4f", "html_url": "https://github.com/rust-lang/rust/commit/7b9aefc29db762789645c4114cae093d8f3dfa4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b9aefc29db762789645c4114cae093d8f3dfa4f/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a32627a741826502692f2c3de71512b7ec23cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a32627a741826502692f2c3de71512b7ec23cf", "html_url": "https://github.com/rust-lang/rust/commit/d0a32627a741826502692f2c3de71512b7ec23cf"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "954b97b055db3e465bfa3a3db43ff95ab34e82a0", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7b9aefc29db762789645c4114cae093d8f3dfa4f/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b9aefc29db762789645c4114cae093d8f3dfa4f/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=7b9aefc29db762789645c4114cae093d8f3dfa4f", "patch": "@@ -44,7 +44,22 @@ pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n             edit.replace(expr.syntax().range(), buf);\n         } else {\n             buf.push_str(\";\");\n-            indent.text().push_to(&mut buf);\n+\n+            // We want to maintain the indent level,\n+            // but we do not want to duplicate possible\n+            // extra newlines in the indent block\n+            for chunk in indent.text().chunks() {\n+                if chunk.starts_with(\"\\r\\n\") {\n+                    buf.push_str(\"\\r\\n\");\n+                    buf.push_str(chunk.trim_start_matches(\"\\r\\n\"));\n+                } else if chunk.starts_with(\"\\n\") {\n+                    buf.push_str(\"\\n\");\n+                    buf.push_str(chunk.trim_start_matches(\"\\n\"));\n+                } else {\n+                    buf.push_str(chunk);\n+                }\n+            }\n+\n             edit.target(expr.syntax().range());\n             edit.replace(expr.syntax().range(), \"var_name\".to_string());\n             edit.insert(anchor_stmt.range().start(), buf);\n@@ -337,6 +352,70 @@ fn foo() -> u32 {\n \",\n             \"\n fn foo() -> u32 {\n+    let <|>var_name = 2 + 2;\n+    return var_name;\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_introduce_var_does_not_add_extra_whitespace() {\n+        check_assist(\n+            introduce_variable,\n+            \"\n+fn foo() -> u32 {\n+\n+\n+    r<|>eturn 2 + 2;\n+}\n+\",\n+            \"\n+fn foo() -> u32 {\n+\n+\n+    let <|>var_name = 2 + 2;\n+    return var_name;\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            introduce_variable,\n+            \"\n+fn foo() -> u32 {\n+\n+        r<|>eturn 2 + 2;\n+}\n+\",\n+            \"\n+fn foo() -> u32 {\n+\n+        let <|>var_name = 2 + 2;\n+        return var_name;\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            introduce_variable,\n+            \"\n+fn foo() -> u32 {\n+    let foo = 1;\n+\n+    // bar\n+\n+\n+    r<|>eturn 2 + 2;\n+}\n+\",\n+            \"\n+fn foo() -> u32 {\n+    let foo = 1;\n+\n+    // bar\n+\n+\n     let <|>var_name = 2 + 2;\n     return var_name;\n }"}]}