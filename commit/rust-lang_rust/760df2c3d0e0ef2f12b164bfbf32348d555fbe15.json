{"sha": "760df2c3d0e0ef2f12b164bfbf32348d555fbe15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MGRmMmMzZDBlMGVmMmYxMmIxNjRiZmJmMzIzNDhkNTU1ZmJlMTU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T08:59:36Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T08:59:36Z"}, "message": "s/id_to_type/id_to_kind/", "tree": {"sha": "89ef1010ef1369f88f713538f0872ec9847c00bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ef1010ef1369f88f713538f0872ec9847c00bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760df2c3d0e0ef2f12b164bfbf32348d555fbe15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760df2c3d0e0ef2f12b164bfbf32348d555fbe15", "html_url": "https://github.com/rust-lang/rust/commit/760df2c3d0e0ef2f12b164bfbf32348d555fbe15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760df2c3d0e0ef2f12b164bfbf32348d555fbe15/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6", "html_url": "https://github.com/rust-lang/rust/commit/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7243e8ddc9b1f48870f0914c1b036afddbce7d8c", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/760df2c3d0e0ef2f12b164bfbf32348d555fbe15/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760df2c3d0e0ef2f12b164bfbf32348d555fbe15/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=760df2c3d0e0ef2f12b164bfbf32348d555fbe15", "patch": "@@ -303,7 +303,7 @@ pub enum AllocKind<'tcx> {\n \n pub struct AllocMap<'tcx> {\n     /// Lets you know what an AllocId refers to\n-    id_to_type: FxHashMap<AllocId, AllocKind<'tcx>>,\n+    id_to_kind: FxHashMap<AllocId, AllocKind<'tcx>>,\n \n     /// Used to ensure that statics only get one associated AllocId\n     type_interner: FxHashMap<AllocKind<'tcx>, AllocId>,\n@@ -316,7 +316,7 @@ pub struct AllocMap<'tcx> {\n impl<'tcx> AllocMap<'tcx> {\n     pub fn new() -> Self {\n         AllocMap {\n-            id_to_type: Default::default(),\n+            id_to_kind: Default::default(),\n             type_interner: Default::default(),\n             next_id: AllocId(0),\n         }\n@@ -345,7 +345,7 @@ impl<'tcx> AllocMap<'tcx> {\n         }\n         let id = self.reserve();\n         debug!(\"creating alloc_kind {:?} with id {}\", alloc_kind, id);\n-        self.id_to_type.insert(id, alloc_kind.clone());\n+        self.id_to_kind.insert(id, alloc_kind.clone());\n         self.type_interner.insert(alloc_kind, id);\n         id\n     }\n@@ -356,7 +356,7 @@ impl<'tcx> AllocMap<'tcx> {\n     /// `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> AllocId {\n         let id = self.reserve();\n-        self.id_to_type.insert(id, AllocKind::Function(instance));\n+        self.id_to_kind.insert(id, AllocKind::Function(instance));\n         id\n     }\n \n@@ -366,7 +366,7 @@ impl<'tcx> AllocMap<'tcx> {\n     /// This function exists to allow const eval to detect the difference between evaluation-\n     /// local dangling pointers and allocations in constants/statics.\n     pub fn get(&self, id: AllocId) -> Option<AllocKind<'tcx>> {\n-        self.id_to_type.get(&id).cloned()\n+        self.id_to_kind.get(&id).cloned()\n     }\n \n     /// Panics if the `AllocId` does not refer to an `Allocation`\n@@ -397,15 +397,15 @@ impl<'tcx> AllocMap<'tcx> {\n     /// Freeze an `AllocId` created with `reserve` by pointing it at an `Allocation`. Trying to\n     /// call this function twice, even with the same `Allocation` will ICE the compiler.\n     pub fn set_id_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n-        if let Some(old) = self.id_to_type.insert(id, AllocKind::Memory(mem)) {\n+        if let Some(old) = self.id_to_kind.insert(id, AllocKind::Memory(mem)) {\n             bug!(\"tried to set allocation id {}, but it was already existing as {:#?}\", id, old);\n         }\n     }\n \n     /// Freeze an `AllocId` created with `reserve` by pointing it at an `Allocation`. May be called\n     /// twice for the same `(AllocId, Allocation)` pair.\n     pub fn set_id_same_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n-        self.id_to_type.insert_same(id, AllocKind::Memory(mem));\n+        self.id_to_kind.insert_same(id, AllocKind::Memory(mem));\n     }\n }\n "}]}