{"sha": "68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YWU1NWJmYWMxYTYwZmIzYzlmNDViM2EyMjMzNThlYTU5OGY1NmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T19:18:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-09T19:18:30Z"}, "message": "Rollup merge of #67122 - petrochenkov:nodedup, r=estebank\n\nDo not deduplicate diagnostics in UI tests\n\nError reporting infrastructure deduplicates identical diagnostics with identical spans.\n\nWhile it's preferable to do this in \"release\"/\"user-facing\" mode, it sometimes brings [confusion](https://github.com/rust-lang/rust/pull/50682#issuecomment-390949878) and hides details that may be important during development.\n\nDo we run some passes multiple times when we could do it once?\nHow many times we run them exactly? Can this number be large? Can the multiplied error construction be expensive? Can speculative checks be made cheaper if they don't report errors?\n\n*Relying* on this mechanism to deduplicate some specific error never looks like a proper solution to me personally.\n\nIn this PR I attempt to disable this deduplication by applying `-Z deduplicate-diagnostics=no` to UI tests.", "tree": {"sha": "0d1ddd542303d2ac2e00dcfe83fc09d18a4eeb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1ddd542303d2ac2e00dcfe83fc09d18a4eeb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF3yHCRBK7hj4Ov3rIwAAdHIIACO0FEXrorVzBlHvK9GfWpR0\niO3zSkKv/wEbEg9IIzwRgri5Wb4iyl4/ilVW0qIRX538ioDbDWBvrOQxTXkozlb6\nfHJ042CK7xaye22RIDLwt/F2eHtqZg79eJInL5phs0hj/RdKLasZFcx3XsGDl2YO\nolhg5jYn1eQUnAwCgqT0yG+1TSsPaeQHbW4oA91uQp3s03Ap+TLRWNjqWm/Qudo3\n/VrIBHbL59vVpmZ32X35eGYlYg1feleEeCV1OMbCMVkdm0b0tBNFH1HuSU26PLEr\nBbpzEBu+aaqi7rZn/fvOK4yFit7vOi7UvXo0ZbbfBA8i9QaRTz9/gWuHDlqGCCQ=\n=i/9X\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d1ddd542303d2ac2e00dcfe83fc09d18a4eeb92\nparent 92bd267ba8d8d12cba15490c618628c1f3ea5ac5\nparent b82cd9f6391df865551bc6c756cc29a7993e39be\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578597510 +0900\ncommitter GitHub <noreply@github.com> 1578597510 +0900\n\nRollup merge of #67122 - petrochenkov:nodedup, r=estebank\n\nDo not deduplicate diagnostics in UI tests\n\nError reporting infrastructure deduplicates identical diagnostics with identical spans.\n\nWhile it's preferable to do this in \"release\"/\"user-facing\" mode, it sometimes brings [confusion](https://github.com/rust-lang/rust/pull/50682#issuecomment-390949878) and hides details that may be important during development.\n\nDo we run some passes multiple times when we could do it once?\nHow many times we run them exactly? Can this number be large? Can the multiplied error construction be expensive? Can speculative checks be made cheaper if they don't report errors?\n\n*Relying* on this mechanism to deduplicate some specific error never looks like a proper solution to me personally.\n\nIn this PR I attempt to disable this deduplication by applying `-Z deduplicate-diagnostics=no` to UI tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "html_url": "https://github.com/rust-lang/rust/commit/68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92bd267ba8d8d12cba15490c618628c1f3ea5ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/92bd267ba8d8d12cba15490c618628c1f3ea5ac5", "html_url": "https://github.com/rust-lang/rust/commit/92bd267ba8d8d12cba15490c618628c1f3ea5ac5"}, {"sha": "b82cd9f6391df865551bc6c756cc29a7993e39be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82cd9f6391df865551bc6c756cc29a7993e39be", "html_url": "https://github.com/rust-lang/rust/commit/b82cd9f6391df865551bc6c756cc29a7993e39be"}], "stats": {"total": 3322, "additions": 2961, "deletions": 361}, "files": [{"sha": "9db595af63efbd5c8259f267d53c6fd171735ba8", "filename": "src/test/compile-fail/consts/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -6,6 +6,7 @@ const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     for i in 0..x {\n         //~^ ERROR E0015\n+        //~| ERROR E0015\n         //~| ERROR E0658\n         //~| ERROR E0080\n         //~| ERROR E0744"}, {"sha": "597fbbf00d53cf8c36fea2a2afa87745b4f83c42", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,6 +8,7 @@ fn main() {\n     //~| WARN denote infinite loops with\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR calls in constants are limited to constant functions\n+    //~| ERROR calls in constants are limited to constant functions\n     //~| ERROR `for` is not allowed in a `const`\n     //~| ERROR references in constants may only refer to immutable values\n     //~| ERROR evaluation of constant value failed"}, {"sha": "35ddab95831db0ee18964ec9f5537e56fb62d6ac", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -10,6 +10,8 @@ fn lintme() { } //~ ERROR item is named 'lintme'\n \n #[allow(test_lint)]\n //~^ ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+//~| ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+//~| ERROR allow(test_lint) overruled by outer forbid(test_lint)\n pub fn main() {\n     lintme();\n }"}, {"sha": "f93a0a0de5377d17b38743a427d3672e92fc6b73", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,15 @@ LL | #![forbid(test_lint)]\n LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n \n+error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n+  --> $DIR/lint-plugin-forbid-attrs.rs:11:9\n+   |\n+LL | #![forbid(test_lint)]\n+   |           --------- `forbid` level set here\n+...\n+LL | #[allow(test_lint)]\n+   |         ^^^^^^^^^ overruled by previous forbid\n+\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin-forbid-attrs.rs:5:1\n    |\n@@ -27,6 +36,15 @@ note: lint level defined here\n LL | #![forbid(test_lint)]\n    |           ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n+  --> $DIR/lint-plugin-forbid-attrs.rs:11:9\n+   |\n+LL | #![forbid(test_lint)]\n+   |           --------- `forbid` level set here\n+...\n+LL | #[allow(test_lint)]\n+   |         ^^^^^^^^^ overruled by previous forbid\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "695d3aef169051656b4c5ab6c63b2d868f6a25c8", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,6 +8,8 @@\n fn lintme() { } //~ ERROR item is named 'lintme'\n \n #[allow(test_lint)] //~ ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+                    //~| ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+                    //~| ERROR allow(test_lint) overruled by outer forbid(test_lint)\n pub fn main() {\n     lintme();\n }"}, {"sha": "0302ec84d56206f3c9683759075569e667af753e", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -6,6 +6,14 @@ LL | #[allow(test_lint)]\n    |\n    = note: `forbid` lint level was set on command line\n \n+error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n+  --> $DIR/lint-plugin-forbid-cmdline.rs:10:9\n+   |\n+LL | #[allow(test_lint)]\n+   |         ^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `forbid` lint level was set on command line\n+\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin-forbid-cmdline.rs:6:1\n    |\n@@ -22,6 +30,14 @@ LL | fn lintme() { }\n    |\n    = note: requested on the command line with `-F test-lint`\n \n-error: aborting due to 2 previous errors\n+error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n+  --> $DIR/lint-plugin-forbid-cmdline.rs:10:9\n+   |\n+LL | #[allow(test_lint)]\n+   |         ^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `forbid` lint level was set on command line\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "2f1c29ea7b83219cf75a7d0df684b771ddc6740a", "filename": "src/test/ui-fulldeps/lint-tool-cmdline-allow.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,6 +2,10 @@ warning: lint name `test_lint` is deprecated and does not have an effect anymore\n    |\n    = note: requested on the command line with `-A test_lint`\n \n+warning: lint name `test_lint` is deprecated and does not have an effect anymore. Use: clippy::test_lint\n+   |\n+   = note: requested on the command line with `-A test_lint`\n+\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-tool-cmdline-allow.rs:7:1\n    |\n@@ -10,6 +14,10 @@ LL | #![plugin(lint_tool_test)]\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n+warning: lint name `test_lint` is deprecated and does not have an effect anymore. Use: clippy::test_lint\n+   |\n+   = note: requested on the command line with `-A test_lint`\n+\n warning: item is named 'lintme'\n   --> $DIR/lint-tool-cmdline-allow.rs:9:1\n    |\n@@ -18,3 +26,7 @@ LL | fn lintme() {}\n    |\n    = note: `#[warn(clippy::test_lint)]` on by default\n \n+warning: lint name `test_lint` is deprecated and does not have an effect anymore. Use: clippy::test_lint\n+   |\n+   = note: requested on the command line with `-A test_lint`\n+"}, {"sha": "f92bcd213b844a272914c36cf2ceea10bb58ab0f", "filename": "src/test/ui-fulldeps/lint-tool-test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,9 +8,12 @@\n #![allow(dead_code)]\n #![cfg_attr(foo, warn(test_lint))]\n //~^ WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n-//~^^ WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n+//~| WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n+//~| WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n #![deny(clippy_group)]\n //~^ WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n+//~| WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n+//~| WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n \n@@ -25,6 +28,8 @@ pub fn main() {\n \n #[allow(test_group)]\n //~^ WARNING lint name `test_group` is deprecated and may not have an effect in the future\n+//~| WARNING lint name `test_group` is deprecated and may not have an effect in the future\n+//~| WARNING lint name `test_group` is deprecated and may not have an effect in the future\n #[deny(this_lint_does_not_exist)] //~ WARNING unknown lint: `this_lint_does_not_exist`\n fn hello() {\n     fn lintmetoo() { }"}, {"sha": "809b9ac16205dba995214363e3795e885632ab93", "filename": "src/test/ui-fulldeps/lint-tool-test.stderr", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,19 +7,19 @@ LL | #![cfg_attr(foo, warn(test_lint))]\n    = note: `#[warn(renamed_and_removed_lints)]` on by default\n \n warning: lint name `clippy_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n-  --> $DIR/lint-tool-test.rs:12:9\n+  --> $DIR/lint-tool-test.rs:13:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n \n warning: lint name `test_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n-  --> $DIR/lint-tool-test.rs:26:9\n+  --> $DIR/lint-tool-test.rs:29:9\n    |\n LL | #[allow(test_group)]\n    |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n \n warning: unknown lint: `this_lint_does_not_exist`\n-  --> $DIR/lint-tool-test.rs:28:8\n+  --> $DIR/lint-tool-test.rs:33:8\n    |\n LL | #[deny(this_lint_does_not_exist)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,6 +32,18 @@ warning: lint name `test_lint` is deprecated and may not have an effect in the f\n LL | #![cfg_attr(foo, warn(test_lint))]\n    |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n \n+warning: lint name `clippy_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint-tool-test.rs:13:9\n+   |\n+LL | #![deny(clippy_group)]\n+   |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n+\n+warning: lint name `test_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint-tool-test.rs:29:9\n+   |\n+LL | #[allow(test_group)]\n+   |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n+\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-tool-test.rs:6:1\n    |\n@@ -40,31 +52,49 @@ LL | #![plugin(lint_tool_test)]\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n+warning: lint name `test_lint` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint-tool-test.rs:9:23\n+   |\n+LL | #![cfg_attr(foo, warn(test_lint))]\n+   |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n+\n+warning: lint name `clippy_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint-tool-test.rs:13:9\n+   |\n+LL | #![deny(clippy_group)]\n+   |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n+\n error: item is named 'lintme'\n-  --> $DIR/lint-tool-test.rs:15:1\n+  --> $DIR/lint-tool-test.rs:18:1\n    |\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-tool-test.rs:12:9\n+  --> $DIR/lint-tool-test.rs:13:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^\n    = note: `#[deny(clippy::test_lint)]` implied by `#[deny(clippy::group)]`\n \n error: item is named 'lintmetoo'\n-  --> $DIR/lint-tool-test.rs:23:5\n+  --> $DIR/lint-tool-test.rs:26:5\n    |\n LL |     fn lintmetoo() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-tool-test.rs:12:9\n+  --> $DIR/lint-tool-test.rs:13:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^\n    = note: `#[deny(clippy::test_group)]` implied by `#[deny(clippy::group)]`\n \n+warning: lint name `test_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint-tool-test.rs:29:9\n+   |\n+LL | #[allow(test_group)]\n+   |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "65ca017e2f269cf5df0c165671c2dba048d61dad", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -157,10 +157,13 @@ trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n //~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }"}, {"sha": "defa62994e9e12a47a4b2bb11cb4dc9040f44588", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -531,63 +531,87 @@ LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:160:46\n+  --> $DIR/duplicate.rs:158:46\n+   |\n+LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+  --> $DIR/duplicate.rs:161:46\n+   |\n+LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+  --> $DIR/duplicate.rs:161:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:162:49\n+  --> $DIR/duplicate.rs:164:49\n+   |\n+LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n+   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n+  --> $DIR/duplicate.rs:164:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:164:43\n+  --> $DIR/duplicate.rs:167:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:166:43\n+  --> $DIR/duplicate.rs:169:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:168:46\n+  --> $DIR/duplicate.rs:171:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:171:40\n+  --> $DIR/duplicate.rs:174:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:175:44\n+  --> $DIR/duplicate.rs:178:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:179:43\n+  --> $DIR/duplicate.rs:182:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n@@ -667,40 +691,40 @@ LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:171:28\n+  --> $DIR/duplicate.rs:174:28\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:171:40\n+  --> $DIR/duplicate.rs:174:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:175:32\n+  --> $DIR/duplicate.rs:178:32\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:175:44\n+  --> $DIR/duplicate.rs:178:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:179:28\n+  --> $DIR/duplicate.rs:182:28\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:179:43\n+  --> $DIR/duplicate.rs:182:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^\n \n-error: aborting due to 93 previous errors\n+error: aborting due to 96 previous errors\n "}, {"sha": "b12d7bccecead8c2f13b6f212ceeaf03773a433e", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,6 +8,7 @@ impl<T> Trait<'_, '_> for T { }\n \n async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n     //~^ ERROR ambiguous lifetime bound\n+    //~| ERROR ambiguous lifetime bound\n     (a, b)\n }\n "}, {"sha": "f9a1b4b3394c107f0759c8aca9a96f7f5a70fd12", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -6,5 +6,13 @@ LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'\n    |\n    = help: add #![feature(member_constraints)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: ambiguous lifetime bound in `impl Trait`\n+  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n+   |\n+LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+   |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n+   |\n+   = help: add #![feature(member_constraints)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d313691b388577ffb80a60888bf95c513ad5a3aa", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,8 +8,16 @@ async fn bar<T>() -> () {}\n async fn foo() {\n     bar().await;\n     //~^ ERROR type inside `async fn` body must be known in this context\n+    //~| ERROR type inside `async fn` body must be known in this context\n+    //~| ERROR type inside `async fn` body must be known in this context\n     //~| NOTE cannot infer type for type parameter `T`\n+    //~| NOTE cannot infer type for type parameter `T`\n+    //~| NOTE cannot infer type for type parameter `T`\n+    //~| NOTE the type is part of the `async fn` body because of this `await`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE in this expansion of desugaring of `await`\n+    //~| NOTE in this expansion of desugaring of `await`\n     //~| NOTE in this expansion of desugaring of `await`\n }\n fn main() {}"}, {"sha": "6b9e960ca1ae69d27e8149a9e905f81068a156bf", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -10,6 +10,30 @@ note: the type is part of the `async fn` body because of this `await`\n LL |     bar().await;\n    |     ^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0698`."}, {"sha": "e01dc4dfa49be5c45fa8908c9e31fb1a5aaef7d2", "filename": "src/test/ui/attributes/register-attr-tool-import.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -11,4 +11,5 @@ use tool as renamed_tool; // OK\n \n #[renamed_attr] //~ ERROR cannot use an explicitly registered attribute through an import\n #[renamed_tool::attr] //~ ERROR cannot use a tool module through an import\n+                      //~| ERROR cannot use a tool module through an import\n fn main() {}"}, {"sha": "59f5a8620ab11fb742ed42302717074b9f452fff", "filename": "src/test/ui/attributes/register-attr-tool-import.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -22,5 +22,17 @@ note: the tool module imported here\n LL | use tool as renamed_tool; // OK\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: cannot use a tool module through an import\n+  --> $DIR/register-attr-tool-import.rs:13:3\n+   |\n+LL | #[renamed_tool::attr]\n+   |   ^^^^^^^^^^^^\n+   |\n+note: the tool module imported here\n+  --> $DIR/register-attr-tool-import.rs:10:5\n+   |\n+LL | use tool as renamed_tool; // OK\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "141ad5bd2c482bdcd4d4ce5ede1c16113c54f2cc", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -26,6 +26,7 @@ impl<'a, 't> Foo<'a, 't> for &'a isize {\n \n     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n         //~^ ERROR method not compatible with trait\n+        //~| ERROR method not compatible with trait\n         //\n         // Note: This is a terrible error message. It is caused\n         // because, in the trait, 'b is early bound, and in the impl,"}, {"sha": "ad39b3601bffb0a7ecebbb23c23619051ece7714", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -35,8 +35,27 @@ note: ...does not necessarily outlive the lifetime `'c` as defined on the method\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |                        ^^\n \n+error[E0308]: method not compatible with trait\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:27:5\n+   |\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n+              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n+note: the lifetime `'c` as defined on the method body at 27:24...\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n+   |\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |                        ^^\n+note: ...does not necessarily outlive the lifetime `'c` as defined on the method body at 27:24\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n+   |\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |                        ^^\n+\n error[E0195]: lifetime parameters or bounds on method `wrong_bound2` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:41:20\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:42:20\n    |\n LL |     fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n    |                    ---------------- lifetimes in impl do not match this method in trait\n@@ -45,15 +64,15 @@ LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n    |                    ^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:48:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:49:5\n    |\n LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n    |     ------------------------------------------------------- definition of `another_bound` from trait\n ...\n LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0195, E0276, E0308.\n For more information about an error, try `rustc --explain E0195`."}, {"sha": "9300d9576de1d76a3615ff4b775c824f5fbf1cd8", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     match -128i8 {\n         NEG_NEG_128 => println!(\"A\"),\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         _ => println!(\"B\"),\n     }\n }"}, {"sha": "26728cf5415821de775d3fd8ea580a16de60bcf5", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: could not evaluate constant pattern\n LL |         NEG_NEG_128 => println!(\"A\"),\n    |         ^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: could not evaluate constant pattern\n+  --> $DIR/const-eval-overflow-2.rs:15:9\n+   |\n+LL |         NEG_NEG_128 => println!(\"A\"),\n+   |         ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "87136a109db3502a4a6ddd1b677f5a79e9c46f5b", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     match n {\n         0..=10 => {},\n         10..=BAR => {}, //~ ERROR could not evaluate constant pattern\n+                        //~| ERROR could not evaluate constant pattern\n         _ => {},\n     }\n }"}, {"sha": "17f8744ed9fd707b789e5691b901a7b5c3a02768", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ref_to_int_match.rs:24:1\n+  --> $DIR/ref_to_int_match.rs:25:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n@@ -12,6 +12,12 @@ error: could not evaluate constant pattern\n LL |         10..=BAR => {},\n    |              ^^^\n \n-error: aborting due to 2 previous errors\n+error: could not evaluate constant pattern\n+  --> $DIR/ref_to_int_match.rs:7:14\n+   |\n+LL |         10..=BAR => {},\n+   |              ^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5adb2fa54edc41614dbc106c4ab04a6e7ddf4b36", "filename": "src/test/ui/consts/enum-discr-type-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -17,6 +17,7 @@ macro_rules! mac {\n         enum E {\n             $( $v = $s::V, )*\n             //~^ ERROR mismatched types\n+            //~| ERROR mismatched types\n         }\n     }\n }"}, {"sha": "9935f88e5b57718b524430f66a498b5b96b0fe30", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -15,6 +15,23 @@ help: you can convert an `i32` to `isize` and panic if the converted value would\n LL |             $( $v = $s::V.try_into().unwrap(), )*\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/enum-discr-type-err.rs:18:21\n+   |\n+LL |               $( $v = $s::V, )*\n+   |                       ^^^^^ expected `isize`, found `i32`\n+...\n+LL | / mac! {\n+LL | |     A = F,\n+LL | |     B = T,\n+LL | | }\n+   | |_- in this macro invocation\n+   |\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+   |\n+LL |             $( $v = $s::V.try_into().unwrap(), )*\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "1e495438e836cde041550816c42937d560bcc265", "filename": "src/test/ui/consts/match_ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -10,6 +10,7 @@ fn main() {\n     match C {\n         C => {}\n         //~^ ERROR to use a constant of type `S` in a pattern, `S` must be annotated with\n+        //~| ERROR to use a constant of type `S` in a pattern, `S` must be annotated with\n     }\n     const K: &T = &T;\n     match K { //~ ERROR non-exhaustive patterns: `&T` not covered"}, {"sha": "b25ac09ab121144d1a1ce146d30f85373aff2c05", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,7 +5,7 @@ LL |         C => {}\n    |         ^\n \n error[E0004]: non-exhaustive patterns: `&T` not covered\n-  --> $DIR/match_ice.rs:15:11\n+  --> $DIR/match_ice.rs:16:11\n    |\n LL | struct T;\n    | --------- `T` defined here\n@@ -15,6 +15,12 @@ LL |     match K {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to 2 previous errors\n+error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match_ice.rs:11:9\n+   |\n+LL |         C => {}\n+   |         ^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "edbf0e02d8de24df9dd8aecb150fa7f8662dfe39", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -28,6 +28,7 @@ const READ_INTERIOR_MUT: usize = {\n static mut MUTABLE: u32 = 0;\n const READ_MUT: u32 = unsafe { MUTABLE }; //~ WARN any use of this value will cause an error\n //~^ WARN skipping const checks\n+//~| WARN skipping const checks\n \n // ok some day perhaps\n const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value"}, {"sha": "243efbbaa76af224c236bac4332eee0e20e47448", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,7 +29,13 @@ LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                ^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:35:6\n+  --> $DIR/const_refers_to_static.rs:29:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:36:6\n    |\n LL |     &FOO\n    |      ^^^\n@@ -84,7 +90,7 @@ LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                constant accesses static\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static.rs:33:1\n+  --> $DIR/const_refers_to_static.rs:34:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |     static FOO: usize = 0;"}, {"sha": "2817abfcaa8de80de2d4639afa8c225f357f98c1", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,6 +8,7 @@\n fn main() {\n     match &b\"\"[..] {\n         ZST => {} //~ ERROR could not evaluate constant pattern\n+                  //~| ERROR could not evaluate constant pattern\n     }\n }\n "}, {"sha": "296a55ef16076c9ef5e4d59a251f3f7aa6d6cf64", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:14:29\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:15:29\n    |\n LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -15,14 +15,20 @@ LL |         ZST => {}\n    |         ^^^\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-size-mismatch-before-typeck.rs:14:29\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:15:29\n    |\n LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    |                             ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: `usize` (word size)\n    = note: target type: `&'static [u8]` (2 * word size)\n \n-error: aborting due to 3 previous errors\n+error: could not evaluate constant pattern\n+  --> $DIR/transmute-size-mismatch-before-typeck.rs:10:9\n+   |\n+LL |         ZST => {}\n+   |         ^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0512`."}, {"sha": "b2edc1a1f66ca8b3c9d2e1e1f7cae8193e41ab9f", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -3,6 +3,7 @@\n \n trait Foo<X = Box<dyn Foo>> {\n     //~^ ERROR cycle detected\n+    //~| ERROR cycle detected\n }\n \n fn main() { }"}, {"sha": "6b38d85302e66f308c94157803f96c2b5d2738fa", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -11,6 +11,19 @@ note: cycle used when collecting item types in top-level module\n LL | trait Foo<X = Box<dyn Foo>> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0391]: cycle detected when processing `Foo::X`\n+  --> $DIR/cycle-trait-default-type-trait.rs:4:23\n+   |\n+LL | trait Foo<X = Box<dyn Foo>> {\n+   |                       ^^^\n+   |\n+   = note: ...which again requires processing `Foo::X`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/cycle-trait-default-type-trait.rs:4:1\n+   |\n+LL | trait Foo<X = Box<dyn Foo>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "7a28c6428a3555032fa5f7275fd28972609296b1", "filename": "src/test/ui/deduplicate-diagnostics-2.deduplicate.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.deduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.deduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.deduplicate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -0,0 +1,28 @@\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/deduplicate-diagnostics-2.rs:7:9\n+   |\n+LL |         1.0 => {}\n+   |         ^^^\n+   |\n+   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/deduplicate-diagnostics-2.rs:11:9\n+   |\n+LL |         2.0 => {}\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/deduplicate-diagnostics-2.rs:7:9\n+   |\n+LL |         1.0 => {}\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+"}, {"sha": "4fff3a8c0f374fa3afec632af2800fc385edf6d8", "filename": "src/test/ui/deduplicate-diagnostics-2.duplicate.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.duplicate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -0,0 +1,37 @@\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/deduplicate-diagnostics-2.rs:7:9\n+   |\n+LL |         1.0 => {}\n+   |         ^^^\n+   |\n+   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/deduplicate-diagnostics-2.rs:11:9\n+   |\n+LL |         2.0 => {}\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/deduplicate-diagnostics-2.rs:7:9\n+   |\n+LL |         1.0 => {}\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/deduplicate-diagnostics-2.rs:11:9\n+   |\n+LL |         2.0 => {}\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+"}, {"sha": "f46a7c0c1c4d816954aeb64ad052ccb9c51ef426", "filename": "src/test/ui/deduplicate-diagnostics-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics-2.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -0,0 +1,17 @@\n+// build-pass\n+// revisions: duplicate deduplicate\n+//[deduplicate] compile-flags: -Z deduplicate-diagnostics=yes\n+\n+fn main() {\n+    match 0.0 {\n+        1.0 => {} //~ WARNING floating-point types cannot be used in patterns\n+                  //~| WARNING this was previously accepted\n+                  //~| WARNING floating-point types cannot be used in patterns\n+                  //~| WARNING this was previously accepted\n+        2.0 => {} //~ WARNING floating-point types cannot be used in patterns\n+                  //~| WARNING this was previously accepted\n+                  //[duplicate]~| WARNING floating-point types cannot be used in patterns\n+                  //[duplicate]~| WARNING this was previously accepted\n+        _ => {}\n+    }\n+}"}, {"sha": "5df2c687bddc2ea78b7712f4b3e79bc6dfa1f73b", "filename": "src/test/ui/deduplicate-diagnostics.deduplicate.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.deduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.deduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.deduplicate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,8 +1,15 @@\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/deduplicate-diagnostics.rs:8:8\n+   |\n+LL | #[deny(\"literal\")]\n+   |        ^^^^^^^^^ bad attribute argument\n+\n error: cannot find derive macro `Unresolved` in this scope\n   --> $DIR/deduplicate-diagnostics.rs:4:10\n    |\n LL | #[derive(Unresolved)]\n    |          ^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0452`."}, {"sha": "3b100b59995f067811351df595c5e32037a842b9", "filename": "src/test/ui/deduplicate-diagnostics.duplicate.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.duplicate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,3 +1,9 @@\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/deduplicate-diagnostics.rs:8:8\n+   |\n+LL | #[deny(\"literal\")]\n+   |        ^^^^^^^^^ bad attribute argument\n+\n error: cannot find derive macro `Unresolved` in this scope\n   --> $DIR/deduplicate-diagnostics.rs:4:10\n    |\n@@ -10,5 +16,18 @@ error: cannot find derive macro `Unresolved` in this scope\n LL | #[derive(Unresolved)]\n    |          ^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/deduplicate-diagnostics.rs:8:8\n+   |\n+LL | #[deny(\"literal\")]\n+   |        ^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/deduplicate-diagnostics.rs:8:8\n+   |\n+LL | #[deny(\"literal\")]\n+   |        ^^^^^^^^^ bad attribute argument\n+\n+error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0452`."}, {"sha": "c5d41ff2fdac3888241390ce946bc64353002ddb", "filename": "src/test/ui/deduplicate-diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,8 +1,11 @@\n // revisions: duplicate deduplicate\n-//[duplicate] compile-flags: -Z deduplicate-diagnostics=no\n+//[deduplicate] compile-flags: -Z deduplicate-diagnostics=yes\n \n #[derive(Unresolved)] //~ ERROR cannot find derive macro `Unresolved` in this scope\n                       //[duplicate]~| ERROR cannot find derive macro `Unresolved` in this scope\n struct S;\n \n+#[deny(\"literal\")] //~ ERROR malformed lint attribute input\n+                   //[duplicate]~| ERROR malformed lint attribute input\n+                   //[duplicate]~| ERROR malformed lint attribute input\n fn main() {}"}, {"sha": "beef639462ed39699475edd673e9e0f0f156f8f5", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -10,7 +10,11 @@ struct Error;\n #[derive(PartialOrd,PartialEq)]\n enum Enum {\n    A {\n-     x: Error //~ ERROR\n+     x: Error //~ ERROR can't compare `Error` with `Error`\n+              //~| ERROR can't compare `Error` with `Error`\n+              //~| ERROR can't compare `Error` with `Error`\n+              //~| ERROR can't compare `Error` with `Error`\n+              //~| ERROR can't compare `Error` with `Error`\n    }\n }\n "}, {"sha": "80b896f4f043e4f95d1fd88680d9b0455492295f", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,42 @@ LL |      x: Error\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n-error: aborting due to previous error\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+   |\n+LL |      x: Error\n+   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+   |\n+LL |      x: Error\n+   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+   |\n+LL |      x: Error\n+   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+   |\n+LL |      x: Error\n+   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b02828da0d27688e9654cfe441b5edc06ae50078", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -10,7 +10,11 @@ struct Error;\n #[derive(PartialOrd,PartialEq)]\n enum Enum {\n    A(\n-     Error //~ ERROR\n+     Error //~ ERROR can't compare `Error` with `Error`\n+           //~| ERROR can't compare `Error` with `Error`\n+           //~| ERROR can't compare `Error` with `Error`\n+           //~| ERROR can't compare `Error` with `Error`\n+           //~| ERROR can't compare `Error` with `Error`\n      )\n }\n "}, {"sha": "f12038fb867a7fa106ae2e2cd3d4871b85398bf4", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,42 @@ LL |      Error\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n-error: aborting due to previous error\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+   |\n+LL |      Error\n+   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+   |\n+LL |      Error\n+   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+   |\n+LL |      Error\n+   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+   |\n+LL |      Error\n+   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "bfcfc3d5dfdd7003b673d42bb96d9d40a6cf1697", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -9,7 +9,11 @@ struct Error;\n \n #[derive(PartialOrd,PartialEq)]\n struct Struct {\n-    x: Error //~ ERROR\n+    x: Error //~ ERROR can't compare `Error` with `Error`\n+             //~| ERROR can't compare `Error` with `Error`\n+             //~| ERROR can't compare `Error` with `Error`\n+             //~| ERROR can't compare `Error` with `Error`\n+             //~| ERROR can't compare `Error` with `Error`\n }\n \n fn main() {}"}, {"sha": "dbb014752ec01ae91e1e1d030bd4b57b7cf86fb1", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,42 @@ LL |     x: Error\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n-error: aborting due to previous error\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+   |\n+LL |     x: Error\n+   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+   |\n+LL |     x: Error\n+   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+   |\n+LL |     x: Error\n+   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+   |\n+LL |     x: Error\n+   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c8bdd6423a0233efd0875dc06e2a51e338bf7518", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -9,7 +9,11 @@ struct Error;\n \n #[derive(PartialOrd,PartialEq)]\n struct Struct(\n-    Error //~ ERROR\n+    Error //~ ERROR can't compare `Error` with `Error`\n+          //~| ERROR can't compare `Error` with `Error`\n+          //~| ERROR can't compare `Error` with `Error`\n+          //~| ERROR can't compare `Error` with `Error`\n+          //~| ERROR can't compare `Error` with `Error`\n );\n \n fn main() {}"}, {"sha": "f6f1694bbf01e70b2ea0948ba4d26e3513286eda", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,42 @@ LL |     Error\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n-error: aborting due to previous error\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+   |\n+LL |     Error\n+   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+   |\n+LL |     Error\n+   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+   |\n+LL |     Error\n+   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Error` with `Error`\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+   |\n+LL |     Error\n+   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "95d440420b065739f1b989a74598bf253a82bf21", "filename": "src/test/ui/derives/deriving-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-bounds.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,9 +1,11 @@\n #[derive(Send)]\n //~^ ERROR cannot find derive macro `Send` in this scope\n+//~| ERROR cannot find derive macro `Send` in this scope\n struct Test;\n \n #[derive(Sync)]\n //~^ ERROR cannot find derive macro `Sync` in this scope\n+//~| ERROR cannot find derive macro `Sync` in this scope\n struct Test1;\n \n pub fn main() {}"}, {"sha": "74ca37287d23210d9889161d6ec0fd99ad55d3e3", "filename": "src/test/ui/derives/deriving-bounds.stderr", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-bounds.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,15 +1,39 @@\n error: cannot find derive macro `Sync` in this scope\n-  --> $DIR/deriving-bounds.rs:5:10\n+  --> $DIR/deriving-bounds.rs:6:10\n    |\n LL | #[derive(Sync)]\n    |          ^^^^\n    |\n note: unsafe traits like `Sync` should be implemented explicitly\n-  --> $DIR/deriving-bounds.rs:5:10\n+  --> $DIR/deriving-bounds.rs:6:10\n    |\n LL | #[derive(Sync)]\n    |          ^^^^\n \n+error: cannot find derive macro `Sync` in this scope\n+  --> $DIR/deriving-bounds.rs:6:10\n+   |\n+LL | #[derive(Sync)]\n+   |          ^^^^\n+   |\n+note: unsafe traits like `Sync` should be implemented explicitly\n+  --> $DIR/deriving-bounds.rs:6:10\n+   |\n+LL | #[derive(Sync)]\n+   |          ^^^^\n+\n+error: cannot find derive macro `Send` in this scope\n+  --> $DIR/deriving-bounds.rs:1:10\n+   |\n+LL | #[derive(Send)]\n+   |          ^^^^\n+   |\n+note: unsafe traits like `Send` should be implemented explicitly\n+  --> $DIR/deriving-bounds.rs:1:10\n+   |\n+LL | #[derive(Send)]\n+   |          ^^^^\n+\n error: cannot find derive macro `Send` in this scope\n   --> $DIR/deriving-bounds.rs:1:10\n    |\n@@ -22,5 +46,5 @@ note: unsafe traits like `Send` should be implemented explicitly\n LL | #[derive(Send)]\n    |          ^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "6463a7664de93ce22042b3b9099b05f6f48397f9", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,6 @@\n #[derive(Eqr)]\n //~^ ERROR cannot find derive macro `Eqr` in this scope\n+//~| ERROR cannot find derive macro `Eqr` in this scope\n struct Foo;\n \n pub fn main() {}"}, {"sha": "8d0f9e9fc89a833d52528b209168f32704f74146", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: cannot find derive macro `Eqr` in this scope\n LL | #[derive(Eqr)]\n    |          ^^^ help: a derive macro with a similar name exists: `Eq`\n \n-error: aborting due to previous error\n+error: cannot find derive macro `Eqr` in this scope\n+  --> $DIR/deriving-meta-unknown-trait.rs:1:10\n+   |\n+LL | #[derive(Eqr)]\n+   |          ^^^ help: a derive macro with a similar name exists: `Eq`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "1173eca640fc39ab844251ee95316cfcaefbd83d", "filename": "src/test/ui/derives/deriving-primitive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-primitive.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,4 +1,5 @@\n #[derive(FromPrimitive)] //~ ERROR cannot find derive macro `FromPrimitive` in this scope\n+                         //~| ERROR cannot find derive macro `FromPrimitive` in this scope\n enum Foo {}\n \n fn main() {}"}, {"sha": "ca64c9ee732cb3c65de202ce96a3c2cd9ffede25", "filename": "src/test/ui/derives/deriving-primitive.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fderives%2Fderiving-primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-primitive.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: cannot find derive macro `FromPrimitive` in this scope\n LL | #[derive(FromPrimitive)]\n    |          ^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: cannot find derive macro `FromPrimitive` in this scope\n+  --> $DIR/deriving-primitive.rs:1:10\n+   |\n+LL | #[derive(FromPrimitive)]\n+   |          ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "467daef63f6a660b015b84006e342902e2e07e38", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,8 +5,10 @@ fn test_and() {\n     let b = false;\n \n     let _ = a and b; //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n \n     if a and b { //~ ERROR `and` is not a logical operator\n+                 //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n \n@@ -18,8 +20,10 @@ fn test_or() {\n     let b = false;\n \n     let _ = a or b; //~ ERROR `or` is not a logical operator\n+                    //~| ERROR `or` is not a logical operator\n \n     if a or b { //~ ERROR `or` is not a logical operator\n+                //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -28,6 +32,7 @@ fn test_and_par() {\n     let a = true;\n     let b = false;\n     if (a and b) {  //~ ERROR `and` is not a logical operator\n+                    //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -36,6 +41,7 @@ fn test_or_par() {\n     let a = true;\n     let b = false;\n     if (a or b) {  //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -44,6 +50,7 @@ fn test_while_and() {\n     let a = true;\n     let b = false;\n     while a and b {  //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -52,6 +59,7 @@ fn test_while_or() {\n     let a = true;\n     let b = false;\n     while a or b { //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }"}, {"sha": "e8731cf238ec40b56bd74a0328d39d7b87e986cc", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.stderr", "status": "modified", "additions": 73, "deletions": 9, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,69 +7,133 @@ LL |     let _ = a and b;\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:9:10\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:7:15\n+   |\n+LL |     let _ = a and b;\n+   |               ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:10:10\n+   |\n+LL |     if a and b {\n+   |          ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:10:10\n    |\n LL |     if a and b {\n    |          ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:20:15\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:15\n    |\n LL |     let _ = a or b;\n    |               ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:10\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:15\n+   |\n+LL |     let _ = a or b;\n+   |               ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:25:10\n+   |\n+LL |     if a or b {\n+   |          ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:25:10\n    |\n LL |     if a or b {\n    |          ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:30:11\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:34:11\n    |\n LL |     if (a and b) {\n    |           ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:34:11\n+   |\n+LL |     if (a and b) {\n+   |           ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:43:11\n+   |\n+LL |     if (a or b) {\n+   |           ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:38:11\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:43:11\n    |\n LL |     if (a or b) {\n    |           ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:46:13\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:52:13\n    |\n LL |     while a and b {\n    |             ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:52:13\n+   |\n+LL |     while a and b {\n+   |             ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:61:13\n+   |\n+LL |     while a or b {\n+   |             ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:54:13\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:61:13\n    |\n LL |     while a or b {\n    |             ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:13:33\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:15:33\n    |\n LL |     let _recovery_witness: () = 0;\n    |                            --   ^ expected `()`, found integer\n    |                            |\n    |                            expected due to this\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 17 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "a5d8f87261b2b5da3d20201f1d386fc9e8d0431b", "filename": "src/test/ui/error-codes/E0030.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     match 5u32 {\n         1000 ..= 5 => {}\n         //~^ ERROR lower range bound must be less than or equal to upper\n+        //~| ERROR lower range bound must be less than or equal to upper\n     }\n }"}, {"sha": "8a6114024b630d90bdec4c2c304c6b20d2b98beb", "filename": "src/test/ui/error-codes/E0030.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,12 @@ error[E0030]: lower range bound must be less than or equal to upper\n LL |         1000 ..= 5 => {}\n    |         ^^^^ lower bound larger than upper bound\n \n-error: aborting due to previous error\n+error[E0030]: lower range bound must be less than or equal to upper\n+  --> $DIR/E0030.rs:3:9\n+   |\n+LL |         1000 ..= 5 => {}\n+   |         ^^^^ lower bound larger than upper bound\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0030`."}, {"sha": "4e5a6c9301467a1f21ba725b9aa050bdb6e19aa7", "filename": "src/test/ui/error-codes/E0452.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0452.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,4 +1,8 @@\n #![allow(foo = \"\")] //~ ERROR E0452\n-\n+                    //~| ERROR E0452\n+                    //~| ERROR E0452\n+                    //~| ERROR E0452\n+                    //~| ERROR E0452\n+                    //~| ERROR E0452\n fn main() {\n }"}, {"sha": "30c11e3274e1c5049e1f70ce914ab75718e79512", "filename": "src/test/ui/error-codes/E0452.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0452.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,36 @@ error[E0452]: malformed lint attribute input\n LL | #![allow(foo = \"\")]\n    |          ^^^^^^^^ bad attribute argument\n \n-error: aborting due to previous error\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/E0452.rs:1:10\n+   |\n+LL | #![allow(foo = \"\")]\n+   |          ^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/E0452.rs:1:10\n+   |\n+LL | #![allow(foo = \"\")]\n+   |          ^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/E0452.rs:1:10\n+   |\n+LL | #![allow(foo = \"\")]\n+   |          ^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/E0452.rs:1:10\n+   |\n+LL | #![allow(foo = \"\")]\n+   |          ^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/E0452.rs:1:10\n+   |\n+LL | #![allow(foo = \"\")]\n+   |          ^^^^^^^^ bad attribute argument\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0452`."}, {"sha": "69155b0688bc04db05d712d0535b82ee07934a4a", "filename": "src/test/ui/error-codes/E0453.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0453.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,5 +2,7 @@\n \n #[allow(non_snake_case)]\n //~^ ERROR allow(non_snake_case) overruled by outer forbid(non_snake_case)\n+//~| ERROR allow(non_snake_case) overruled by outer forbid(non_snake_case)\n+//~| ERROR allow(non_snake_case) overruled by outer forbid(non_snake_case)\n fn main() {\n }"}, {"sha": "138e8483461c9e461a33a53437820e5868f6e649", "filename": "src/test/ui/error-codes/E0453.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,24 @@ LL |\n LL | #[allow(non_snake_case)]\n    |         ^^^^^^^^^^^^^^ overruled by previous forbid\n \n-error: aborting due to previous error\n+error[E0453]: allow(non_snake_case) overruled by outer forbid(non_snake_case)\n+  --> $DIR/E0453.rs:3:9\n+   |\n+LL | #![forbid(non_snake_case)]\n+   |           -------------- `forbid` level set here\n+LL | \n+LL | #[allow(non_snake_case)]\n+   |         ^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(non_snake_case) overruled by outer forbid(non_snake_case)\n+  --> $DIR/E0453.rs:3:9\n+   |\n+LL | #![forbid(non_snake_case)]\n+   |           -------------- `forbid` level set here\n+LL | \n+LL | #[allow(non_snake_case)]\n+   |         ^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "3bf428676105d383d48a1798cf33bbb0df604760", "filename": "src/test/ui/error-codes/E0565.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,6 @@\n // repr currently doesn't support literals\n #[repr(\"C\")] //~ ERROR E0565\n+             //~| ERROR E0565\n struct A {  }\n \n fn main() {  }"}, {"sha": "aa0951528e1ed5764e246a0c49d48d8029fc1bb7", "filename": "src/test/ui/error-codes/E0565.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,12 @@ error[E0565]: meta item in `repr` must be an identifier\n LL | #[repr(\"C\")]\n    |        ^^^\n \n-error: aborting due to previous error\n+error[E0565]: meta item in `repr` must be an identifier\n+  --> $DIR/E0565.rs:2:8\n+   |\n+LL | #[repr(\"C\")]\n+   |        ^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0565`."}, {"sha": "70137cb166206e6d508eb49c1dd6ff504cbcc97a", "filename": "src/test/ui/error-codes/E0602.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0602.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ferror-codes%2FE0602.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0602.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,6 +2,14 @@ error[E0602]: unknown lint: `bogus`\n    |\n    = note: requested on the command line with `-D bogus`\n \n-error: aborting due to previous error\n+error[E0602]: unknown lint: `bogus`\n+   |\n+   = note: requested on the command line with `-D bogus`\n+\n+error[E0602]: unknown lint: `bogus`\n+   |\n+   = note: requested on the command line with `-D bogus`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0602`."}, {"sha": "3276309f745c2c0403a0c33edfad1c30d7a7b6ad", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -3,14 +3,17 @@\n mod derive {\n     #[derive(x3300)]\n     //~^ ERROR cannot find derive macro `x3300` in this scope\n+    //~| ERROR cannot find derive macro `x3300` in this scope\n     union U { f: i32 }\n \n     #[derive(x3300)]\n     //~^ ERROR cannot find derive macro `x3300` in this scope\n+    //~| ERROR cannot find derive macro `x3300` in this scope\n     enum E { }\n \n     #[derive(x3300)]\n     //~^ ERROR cannot find derive macro `x3300` in this scope\n+    //~| ERROR cannot find derive macro `x3300` in this scope\n     struct S;\n }\n "}, {"sha": "ab16591734471ebc9d464ef8c10967479347ec12", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive-2.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,11 +1,29 @@\n error: cannot find derive macro `x3300` in this scope\n-  --> $DIR/issue-43106-gating-of-derive-2.rs:12:14\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:14:14\n    |\n LL |     #[derive(x3300)]\n    |              ^^^^^\n \n error: cannot find derive macro `x3300` in this scope\n-  --> $DIR/issue-43106-gating-of-derive-2.rs:8:14\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:14:14\n+   |\n+LL |     #[derive(x3300)]\n+   |              ^^^^^\n+\n+error: cannot find derive macro `x3300` in this scope\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:9:14\n+   |\n+LL |     #[derive(x3300)]\n+   |              ^^^^^\n+\n+error: cannot find derive macro `x3300` in this scope\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:9:14\n+   |\n+LL |     #[derive(x3300)]\n+   |              ^^^^^\n+\n+error: cannot find derive macro `x3300` in this scope\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:4:14\n    |\n LL |     #[derive(x3300)]\n    |              ^^^^^\n@@ -16,5 +34,5 @@ error: cannot find derive macro `x3300` in this scope\n LL |     #[derive(x3300)]\n    |              ^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "a01d85515a8b72da5ef7ef2a39dba1a3669af84e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -18,6 +18,7 @@ mod rustc_deprecated {\n \n     #[rustc_deprecated()] struct S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR stability attributes may not be used outside of the standard library\n \n     #[rustc_deprecated()] type T = S;\n     //~^ ERROR stability attributes may not be used outside of the standard library"}, {"sha": "3c4dcfec02b12df493aea1f811352de148882121", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,17 +29,23 @@ LL |     #[rustc_deprecated()] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:22:5\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:19:5\n+   |\n+LL |     #[rustc_deprecated()] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0734]: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:23:5\n    |\n LL |     #[rustc_deprecated()] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:25:5\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n    |\n LL |     #[rustc_deprecated()] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0734`."}, {"sha": "73ff965307fd72d3fad5823ea0ad135d2c5d93fa", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -18,6 +18,7 @@ mod stable {\n \n     #[stable()] struct S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR stability attributes may not be used outside of the standard library\n \n     #[stable()] type T = S;\n     //~^ ERROR stability attributes may not be used outside of the standard library"}, {"sha": "2573db1d684d9670d5bac1fbdbb67c5270d39828", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,17 +29,23 @@ LL |     #[stable()] struct S;\n    |     ^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:22:5\n+  --> $DIR/issue-43106-gating-of-stable.rs:19:5\n+   |\n+LL |     #[stable()] struct S;\n+   |     ^^^^^^^^^^^\n+\n+error[E0734]: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:23:5\n    |\n LL |     #[stable()] type T = S;\n    |     ^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-stable.rs:25:5\n+  --> $DIR/issue-43106-gating-of-stable.rs:26:5\n    |\n LL |     #[stable()] impl S { }\n    |     ^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0734`."}, {"sha": "d8339b00c12d2459221eb59705d909dc2a3e6c90", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -18,6 +18,7 @@ mod unstable {\n \n     #[unstable()] struct S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR stability attributes may not be used outside of the standard library\n \n     #[unstable()] type T = S;\n     //~^ ERROR stability attributes may not be used outside of the standard library"}, {"sha": "500675e054c3f02346c2a1e4677cebbb90842c1f", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,17 +29,23 @@ LL |     #[unstable()] struct S;\n    |     ^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:22:5\n+  --> $DIR/issue-43106-gating-of-unstable.rs:19:5\n+   |\n+LL |     #[unstable()] struct S;\n+   |     ^^^^^^^^^^^^^\n+\n+error[E0734]: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:23:5\n    |\n LL |     #[unstable()] type T = S;\n    |     ^^^^^^^^^^^^^\n \n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-unstable.rs:25:5\n+  --> $DIR/issue-43106-gating-of-unstable.rs:26:5\n    |\n LL |     #[unstable()] impl S { }\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0734`."}, {"sha": "4e6e293846c6e08e2dc387db12d3bf35c8d88680", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,2 +1,3 @@\n #[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include)]` is experimental\n+                          //~| ERROR: `#[doc(include)]` is experimental\n fn main() {}"}, {"sha": "05340184033e9e4a9f6ffa30c5c065a7f1ce2c9e", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,15 @@ LL | #[doc(include=\"asdf.md\")]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44732\n    = help: add `#![feature(external_doc)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: `#[doc(include)]` is experimental\n+  --> $DIR/feature-gate-external_doc.rs:1:1\n+   |\n+LL | #[doc(include=\"asdf.md\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44732\n+   = help: add `#![feature(external_doc)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "b124e9b2f4d7133a9a427c5826ad096025e05cd8", "filename": "src/test/ui/feature-gates/feature-gate-lint-reasons.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,4 +1,6 @@\n #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n //~^ ERROR lint reasons are experimental\n+//~| ERROR lint reasons are experimental\n+//~| ERROR lint reasons are experimental\n \n fn main() {}"}, {"sha": "08ba9d0d3a313200479a2031cf2baa5e64094332", "filename": "src/test/ui/feature-gates/feature-gate-lint-reasons.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,24 @@ LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54503\n    = help: add `#![feature(lint_reasons)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: lint reasons are experimental\n+  --> $DIR/feature-gate-lint-reasons.rs:1:28\n+   |\n+LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54503\n+   = help: add `#![feature(lint_reasons)]` to the crate attributes to enable\n+\n+error[E0658]: lint reasons are experimental\n+  --> $DIR/feature-gate-lint-reasons.rs:1:28\n+   |\n+LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54503\n+   = help: add `#![feature(lint_reasons)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "bf87aea0d4c1ab847001dd46e04e6383eb532198", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:44:24\n+  --> $DIR/auto-trait-regions.rs:45:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n@@ -12,7 +12,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:44:35\n+  --> $DIR/auto-trait-regions.rs:45:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n@@ -31,7 +31,7 @@ LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/auto-trait-regions.rs:48:5\n+  --> $DIR/auto-trait-regions.rs:49:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "dbd8965dcf0d0e94ee857c881ffec1e3f900249f", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,6 +29,7 @@ fn main() {\n     };\n     assert_foo(gen);\n     //~^ ERROR implementation of `Foo` is not general enough\n+    //~| ERROR implementation of `Foo` is not general enough\n \n     // Allow impls which matches any lifetime\n     let x = &OnlyFooIfRef(No);\n@@ -47,4 +48,5 @@ fn main() {\n     };\n     assert_foo(gen);\n     //~^ ERROR not general enough\n+    //~| ERROR not general enough\n }"}, {"sha": "29a3907d93c84bc6ad2156281c3018d636f3bbe2", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -11,7 +11,31 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:48:5\n+  --> $DIR/auto-trait-regions.rs:30:5\n+   |\n+LL | auto trait Foo {}\n+   | ----------------- trait `Foo` defined here\n+...\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:49:5\n+   |\n+LL | auto trait Foo {}\n+   | ----------------- trait `Foo` defined here\n+...\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:49:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here\n@@ -22,5 +46,5 @@ LL |     assert_foo(gen);\n    = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "303c0cc645e38262d42966cd1bf2f7b0e5f47e2e", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -39,6 +39,7 @@ LL | |     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n ...  |\n LL | |     foo_hrtb_bar_not(&mut t);\n    | |     ------------------------ recursive call site\n+LL | |\n LL | | }\n    | |_^ cannot return without recursing\n    |\n@@ -62,7 +63,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:49:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:50:1\n    |\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n LL | |     where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>"}, {"sha": "0303a764c12def1154c80a48ffa058418ffe630c", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -44,6 +44,7 @@ fn foo_hrtb_bar_not<'b,T>(mut t: T)\n     // isize>`, we require `T : for<'a> Bar<&'a isize>`, but the where\n     // clause only specifies `T : Bar<&'b isize>`.\n     foo_hrtb_bar_not(&mut t); //~ ERROR mismatched types\n+                              //~| ERROR mismatched types\n }\n \n fn foo_hrtb_bar_hrtb<T>(mut t: T)"}, {"sha": "1ceb0c99e90e9b0319fcbb3b15fe66b39cd963f6", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,15 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = note: expected type `Bar<&'a isize>`\n               found type `Bar<&'b isize>`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+   |\n+LL |     foo_hrtb_bar_not(&mut t);\n+   |     ^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `Bar<&'a isize>`\n+              found type `Bar<&'b isize>`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "c736c5479f848a47a0b9cd05927477795f280dc6", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -11,10 +11,46 @@ LL |     let filter = map.filter(|x: &_| true);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:116:17\n+  --> $DIR/issue-30786.rs:114:18\n+   |\n+LL |     let filter = map.filter(|x: &_| true);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:114:18\n+   |\n+LL |     let filter = map.filter(|x: &_| true);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:114:18\n+   |\n+LL |     let filter = map.filter(|x: &_| true);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:119:17\n+   |\n+LL |     let count = filter.count(); // Assert that we still have a valid stream.\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:119:17\n+   |\n+LL |     let count = filter.count(); // Assert that we still have a valid stream.\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:119:17\n+   |\n+LL |     let count = filter.count(); // Assert that we still have a valid stream.\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:119:17\n    |\n LL |     let count = filter.count(); // Assert that we still have a valid stream.\n    |                 ^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "c656f8430653629be8124a5b4114d9276921454a", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -113,7 +113,12 @@ fn main() {\n     //[migrate]~| NOTE  implementation of `Stream` is not general enough\n     let filter = map.filter(|x: &_| true);\n     //[nll]~^ ERROR higher-ranked subtype error\n+    //[nll]~| ERROR higher-ranked subtype error\n+    //[nll]~| ERROR higher-ranked subtype error\n+    //[nll]~| ERROR higher-ranked subtype error\n     let count = filter.count(); // Assert that we still have a valid stream.\n     //[nll]~^ ERROR higher-ranked subtype error\n-\n+    //[nll]~| ERROR higher-ranked subtype error\n+    //[nll]~| ERROR higher-ranked subtype error\n+    //[nll]~| ERROR higher-ranked subtype error\n }"}, {"sha": "a6012835f441e1d75dc6a0a8d1dbcf2536175a81", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -12,6 +12,7 @@ fn main() {\n fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n     //~| ERROR cycle detected\n+    //~| ERROR cycle detected\n     send(cycle2().clone());\n     //~^ ERROR cannot be sent between threads safely\n "}, {"sha": "f5e4820feb2d28084ac1a4981f79eef637cb6183", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -11,12 +11,12 @@ LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:21:16\n+  --> $DIR/auto-trait-leak.rs:22:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -47,12 +47,47 @@ LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:21:16\n+  --> $DIR/auto-trait-leak.rs:22:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n+note: cycle used when checking item types in top-level module\n+  --> $DIR/auto-trait-leak.rs:1:1\n+   |\n+LL | / use std::cell::Cell;\n+LL | | use std::rc::Rc;\n+LL | |\n+LL | | fn send<T: Send>(_: T) {}\n+...  |\n+LL | |     Rc::new(String::from(\"foo\"))\n+LL | | }\n+   | |_^\n+\n+error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n+  --> $DIR/auto-trait-leak.rs:12:16\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   |                ^^^^^^^^^^\n+   |\n+note: ...which requires processing `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n+note: ...which requires processing `cycle2::{{opaque}}#0`...\n+  --> $DIR/auto-trait-leak.rs:22:16\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   |                ^^^^^^^^^^\n+note: ...which requires processing `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -70,7 +105,7 @@ LL | | }\n    | |_^\n \n error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:15:5\n+  --> $DIR/auto-trait-leak.rs:16:5\n    |\n LL | fn send<T: Send>(_: T) {}\n    |    ----    ---- required by this bound in `send`\n@@ -81,7 +116,7 @@ LL |     send(cycle2().clone());\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0391.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "c1f048897d9eae7aed38ba84fcdc43a13b33c8ed", "filename": "src/test/ui/imports/issue-55457.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fissue-55457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fissue-55457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55457.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -3,6 +3,8 @@ use non_existent::non_existent; //~ ERROR unresolved import `non_existent`\n \n #[non_existent] //~ ERROR cannot determine resolution for the attribute macro `non_existent`\n #[derive(NonExistent)] //~ ERROR cannot determine resolution for the derive macro `NonExistent`\n+                       //~| ERROR cannot determine resolution for the derive macro `NonExistent`\n+                       //~| ERROR cannot determine resolution for the derive macro `NonExistent`\n struct S;\n \n fn main() {}"}, {"sha": "07de3d95902efa10090592a6f28f735b7751f31a", "filename": "src/test/ui/imports/issue-55457.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,6 +29,22 @@ LL | #[non_existent]\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: aborting due to 4 previous errors\n+error: cannot determine resolution for the derive macro `NonExistent`\n+  --> $DIR/issue-55457.rs:5:10\n+   |\n+LL | #[derive(NonExistent)]\n+   |          ^^^^^^^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: cannot determine resolution for the derive macro `NonExistent`\n+  --> $DIR/issue-55457.rs:5:10\n+   |\n+LL | #[derive(NonExistent)]\n+   |          ^^^^^^^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}, {"sha": "37fe0eceed6b8c4641f1d517557922f9150b0049", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -26,6 +26,7 @@ mod inner1 {\n }\n \n exported!(); //~ ERROR `exported` is ambiguous\n+             //~| ERROR `exported` is ambiguous\n \n mod inner2 {\n     define_exported!();"}, {"sha": "c9498fed6a58eff3fa3d53bd4836054e0f707eaa", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -21,8 +21,31 @@ LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n \n+error[E0659]: `exported` is ambiguous (glob import vs macro-expanded name in the same module during import/macro resolution)\n+  --> $DIR/local-modularized-tricky-fail-1.rs:28:1\n+   |\n+LL | exported!();\n+   | ^^^^^^^^ ambiguous name\n+   |\n+note: `exported` could refer to the macro defined here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:5:5\n+   |\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |       define_exported!();\n+   |       ------------------- in this macro invocation\n+note: `exported` could also refer to the macro imported here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:22:5\n+   |\n+LL | use inner1::*;\n+   |     ^^^^^^^^^\n+   = help: consider adding an explicit import of `exported` to disambiguate\n+\n error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/local-modularized-tricky-fail-1.rs:35:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:36:5\n    |\n LL |     panic!();\n    |     ^^^^^ ambiguous name\n@@ -41,7 +64,7 @@ LL |       define_panic!();\n    = help: use `crate::panic` to refer to this macro unambiguously\n \n error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/local-modularized-tricky-fail-1.rs:46:1\n+  --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n    |\n LL | include!();\n    | ^^^^^^^ ambiguous name\n@@ -59,6 +82,6 @@ LL |       define_include!();\n    |       ------------------ in this macro invocation\n    = help: use `crate::include` to refer to this macro unambiguously\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}, {"sha": "f39711898cdf005943d19018225f5cbee999fe34", "filename": "src/test/ui/imports/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -14,6 +14,7 @@ mod m1 {\n mod m2 {\n     use two_macros::*;\n     m! { //~ ERROR ambiguous\n+         //~| ERROR ambiguous\n         use foo::m;\n     }\n }"}, {"sha": "27b34fe0c01fa8ab4ca548bb4f25e373ad09e088", "filename": "src/test/ui/imports/macros.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,7 +5,25 @@ LL |     m! {\n    |     ^ ambiguous name\n    |\n note: `m` could refer to the macro imported here\n-  --> $DIR/macros.rs:17:13\n+  --> $DIR/macros.rs:18:13\n+   |\n+LL |         use foo::m;\n+   |             ^^^^^^\n+note: `m` could also refer to the macro imported here\n+  --> $DIR/macros.rs:15:9\n+   |\n+LL |     use two_macros::*;\n+   |         ^^^^^^^^^^^^^\n+   = help: consider adding an explicit import of `m` to disambiguate\n+\n+error[E0659]: `m` is ambiguous (glob import vs macro-expanded name in the same module during import/macro resolution)\n+  --> $DIR/macros.rs:16:5\n+   |\n+LL |     m! {\n+   |     ^ ambiguous name\n+   |\n+note: `m` could refer to the macro imported here\n+  --> $DIR/macros.rs:18:13\n    |\n LL |         use foo::m;\n    |             ^^^^^^\n@@ -17,23 +35,23 @@ LL |     use two_macros::*;\n    = help: consider adding an explicit import of `m` to disambiguate\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/macros.rs:29:9\n+  --> $DIR/macros.rs:30:9\n    |\n LL |         m! {\n    |         ^ ambiguous name\n    |\n note: `m` could refer to the macro imported here\n-  --> $DIR/macros.rs:30:17\n+  --> $DIR/macros.rs:31:17\n    |\n LL |             use two_macros::n as m;\n    |                 ^^^^^^^^^^^^^^^^^^\n note: `m` could also refer to the macro imported here\n-  --> $DIR/macros.rs:22:9\n+  --> $DIR/macros.rs:23:9\n    |\n LL |     use two_macros::m;\n    |         ^^^^^^^^^^^^^\n    = help: use `self::m` to refer to this macro unambiguously\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}, {"sha": "9355c8ab15256f7e993d81e57b4a7ea1e77b3faa", "filename": "src/test/ui/issues/issue-17718-const-bad-values.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,7 @@ const C1: &'static mut [usize] = &mut [];\n static mut S: usize = 3;\n const C2: &'static mut usize = unsafe { &mut S };\n //~^ ERROR: constants cannot refer to statics\n+//~| ERROR: constants cannot refer to statics\n //~| ERROR: references in constants may only refer to immutable values\n \n fn main() {}"}, {"sha": "14bf5dc38b47ae7b60e7f298c6199d5ed2533adf", "filename": "src/test/ui/issues/issue-17718-const-bad-values.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -13,6 +13,12 @@ error[E0013]: constants cannot refer to statics, use a constant instead\n LL | const C2: &'static mut usize = unsafe { &mut S };\n    |                                              ^\n \n+error[E0013]: constants cannot refer to statics, use a constant instead\n+  --> $DIR/issue-17718-const-bad-values.rs:5:46\n+   |\n+LL | const C2: &'static mut usize = unsafe { &mut S };\n+   |                                              ^\n+\n error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/issue-17718-const-bad-values.rs:5:41\n    |\n@@ -22,7 +28,7 @@ LL | const C2: &'static mut usize = unsafe { &mut S };\n    = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0013, E0658.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "d0e15cb393ae8b851d51da5747538174a4d5aa04", "filename": "src/test/ui/issues/issue-20831-debruijn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -28,6 +28,7 @@ impl<'a> Publisher<'a> for MyStruct<'a> {\n     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n         // Not obvious, but there is an implicit lifetime here -------^\n         //~^^ ERROR cannot infer\n+        //~| ERROR cannot infer\n         //~| ERROR mismatched types\n         //~| ERROR mismatched types\n         //"}, {"sha": "a4ea1cd9834c89986fe24346e3a90cf134379b5b", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -102,7 +102,49 @@ LL | |     }\n    = note: expected  `Publisher<'_>`\n               found  `Publisher<'_>`\n \n-error: aborting due to 3 previous errors\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/issue-20831-debruijn.rs:28:5\n+   |\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | |         // Not obvious, but there is an implicit lifetime here -------^\n+LL | |\n+LL | |\n+...  |\n+LL | |         self.sub = t;\n+LL | |     }\n+   | |_____^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n+  --> $DIR/issue-20831-debruijn.rs:28:5\n+   |\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | |         // Not obvious, but there is an implicit lifetime here -------^\n+LL | |\n+LL | |\n+...  |\n+LL | |         self.sub = t;\n+LL | |     }\n+   | |_____^\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n+  --> $DIR/issue-20831-debruijn.rs:26:6\n+   |\n+LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n+   |      ^^\n+note: ...so that the types are compatible\n+  --> $DIR/issue-20831-debruijn.rs:28:5\n+   |\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | |         // Not obvious, but there is an implicit lifetime here -------^\n+LL | |\n+LL | |\n+...  |\n+LL | |         self.sub = t;\n+LL | |     }\n+   | |_____^\n+   = note: expected  `Publisher<'_>`\n+              found  `Publisher<'_>`\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0308, E0495.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "3e6cf446da3f7213b3d7af883918fc1467afc206", "filename": "src/test/ui/issues/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,5 +7,6 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n fn main() {\n     size_of_copy::<dyn Misc + Copy>();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n+    //~| ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n }"}, {"sha": "450c37f456a80b471a05a2ba6503c9ef841ec099", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -9,6 +9,17 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n    |                        first non-auto trait\n    |                        trait alias used in trait object type (first use)\n \n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/issue-32963.rs:8:31\n+   |\n+LL |     size_of_copy::<dyn Misc + Copy>();\n+   |                        ----   ^^^^\n+   |                        |      |\n+   |                        |      additional non-auto trait\n+   |                        |      trait alias used in trait object type (additional use)\n+   |                        first non-auto trait\n+   |                        trait alias used in trait object type (first use)\n+\n error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5\n    |\n@@ -18,7 +29,7 @@ LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n LL |     size_of_copy::<dyn Misc + Copy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `dyn Misc`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0225, E0277.\n For more information about an error, try `rustc --explain E0225`."}, {"sha": "2713f47ad2ff6b88f49251e4e66c58a39b4bd04a", "filename": "src/test/ui/issues/issue-33571.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,6 @@\n #[derive(Clone,\n          Sync, //~ ERROR cannot find derive macro `Sync` in this scope\n+               //~| ERROR cannot find derive macro `Sync` in this scope\n          Copy)]\n enum Foo {}\n "}, {"sha": "2a9ba5ba71b8fe0d5d5454293c4154252cf45809", "filename": "src/test/ui/issues/issue-33571.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-33571.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-33571.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33571.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -10,5 +10,17 @@ note: unsafe traits like `Sync` should be implemented explicitly\n LL |          Sync,\n    |          ^^^^\n \n-error: aborting due to previous error\n+error: cannot find derive macro `Sync` in this scope\n+  --> $DIR/issue-33571.rs:2:10\n+   |\n+LL |          Sync,\n+   |          ^^^^\n+   |\n+note: unsafe traits like `Sync` should be implemented explicitly\n+  --> $DIR/issue-33571.rs:2:10\n+   |\n+LL |          Sync,\n+   |          ^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "625fcb0a6f607a211b9c95c5a59be5cfdba82bfd", "filename": "src/test/ui/issues/issue-34229.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,9 @@\n #[derive(PartialEq)] struct Comparable;\n #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n //~^ ERROR can't compare `Comparable`\n+//~| ERROR can't compare `Comparable`\n+//~| ERROR can't compare `Comparable`\n+//~| ERROR can't compare `Comparable`\n+//~| ERROR can't compare `Comparable`\n \n fn main() {}"}, {"sha": "9e1734899bdd27b9e7527b5d49b1603c5b2dbc9d", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,42 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n-error: aborting due to previous error\n+error[E0277]: can't compare `Comparable` with `Comparable`\n+  --> $DIR/issue-34229.rs:2:46\n+   |\n+LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n+   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Comparable` with `Comparable`\n+  --> $DIR/issue-34229.rs:2:46\n+   |\n+LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n+   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Comparable` with `Comparable`\n+  --> $DIR/issue-34229.rs:2:46\n+   |\n+LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n+   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `Comparable` with `Comparable`\n+  --> $DIR/issue-34229.rs:2:46\n+   |\n+LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n+   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "58f44f42524bc2cf9777298504af0e93fe0205f4", "filename": "src/test/ui/issues/issue-36617.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,4 +1,5 @@\n #![derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n                  //~| ERROR cannot determine resolution for the derive macro `Copy`\n+                 //~| ERROR cannot determine resolution for the derive macro `Copy`\n \n fn main() {}"}, {"sha": "98b41b07ea98a43818c3beab18b4e19ec8cf75dd", "filename": "src/test/ui/issues/issue-36617.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-36617.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-36617.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36617.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -12,5 +12,13 @@ LL | #![derive(Copy)]\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: aborting due to 2 previous errors\n+error: cannot determine resolution for the derive macro `Copy`\n+  --> $DIR/issue-36617.rs:1:11\n+   |\n+LL | #![derive(Copy)]\n+   |           ^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "478e13bb177f6db325654ac655f06194776af167", "filename": "src/test/ui/issues/issue-41255.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -12,30 +12,46 @@ fn main() {\n                    //~| ERROR floating-point types cannot be used in patterns\n                    //~| WARNING this was previously accepted by the compiler but is being\n         5.0f32 => {}, //~ ERROR floating-point types cannot be used in patterns\n+                      //~| ERROR floating-point types cannot be used in patterns\n+                      //~| WARNING hard error\n                       //~| WARNING hard error\n         -5.0 => {}, //~ ERROR floating-point types cannot be used in patterns\n+                    //~| ERROR floating-point types cannot be used in patterns\n+                    //~| WARNING hard error\n                     //~| WARNING hard error\n         1.0 .. 33.0 => {}, //~ ERROR floating-point types cannot be used in patterns\n                            //~| WARNING hard error\n                            //~| ERROR floating-point types cannot be used in patterns\n                            //~| WARNING hard error\n+                           //~| ERROR floating-point types cannot be used in patterns\n+                           //~| WARNING hard error\n+                           //~| ERROR floating-point types cannot be used in patterns\n+                           //~| WARNING hard error\n         39.0 ..= 70.0 => {}, //~ ERROR floating-point types cannot be used in patterns\n+                             //~| ERROR floating-point types cannot be used in patterns\n                              //~| WARNING hard error\n                              //~| ERROR floating-point types cannot be used in patterns\n+                             //~| ERROR floating-point types cannot be used in patterns\n+                             //~| WARNING hard error\n+                             //~| WARNING hard error\n                              //~| WARNING hard error\n         _ => {},\n     };\n     let y = 5.0;\n     // Same for tuples\n     match (x, 5) {\n         (3.14, 1) => {}, //~ ERROR floating-point types cannot be used\n+                         //~| ERROR floating-point types cannot be used\n+                         //~| WARNING hard error\n                          //~| WARNING hard error\n         _ => {},\n     }\n     // Or structs\n     struct Foo { x: f32 };\n     match (Foo { x }) {\n         Foo { x: 2.0 } => {}, //~ ERROR floating-point types cannot be used\n+                              //~| ERROR floating-point types cannot be used\n+                              //~| WARNING hard error\n                               //~| WARNING hard error\n         _ => {},\n     }"}, {"sha": "4f24456c169b8a5f2e4d5a93b8d4b43dff350231", "filename": "src/test/ui/issues/issue-41255.stderr", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -22,7 +22,7 @@ LL |         5.0f32 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:16:10\n+  --> $DIR/issue-41255.rs:18:10\n    |\n LL |         -5.0 => {},\n    |          ^^^\n@@ -31,7 +31,7 @@ LL |         -5.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:18:9\n+  --> $DIR/issue-41255.rs:22:9\n    |\n LL |         1.0 .. 33.0 => {},\n    |         ^^^\n@@ -40,7 +40,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:18:16\n+  --> $DIR/issue-41255.rs:22:16\n    |\n LL |         1.0 .. 33.0 => {},\n    |                ^^^^\n@@ -49,7 +49,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:22:9\n+  --> $DIR/issue-41255.rs:30:9\n    |\n LL |         39.0 ..= 70.0 => {},\n    |         ^^^^\n@@ -58,7 +58,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:22:18\n+  --> $DIR/issue-41255.rs:30:18\n    |\n LL |         39.0 ..= 70.0 => {},\n    |                  ^^^^\n@@ -67,7 +67,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:31:10\n+  --> $DIR/issue-41255.rs:43:10\n    |\n LL |         (3.14, 1) => {},\n    |          ^^^^\n@@ -76,7 +76,7 @@ LL |         (3.14, 1) => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:38:18\n+  --> $DIR/issue-41255.rs:52:18\n    |\n LL |         Foo { x: 2.0 } => {},\n    |                  ^^^\n@@ -93,5 +93,77 @@ LL |         5.0 => {},\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to 10 previous errors\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:14:9\n+   |\n+LL |         5.0f32 => {},\n+   |         ^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:18:10\n+   |\n+LL |         -5.0 => {},\n+   |          ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:22:9\n+   |\n+LL |         1.0 .. 33.0 => {},\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:22:16\n+   |\n+LL |         1.0 .. 33.0 => {},\n+   |                ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:30:9\n+   |\n+LL |         39.0 ..= 70.0 => {},\n+   |         ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:30:18\n+   |\n+LL |         39.0 ..= 70.0 => {},\n+   |                  ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:43:10\n+   |\n+LL |         (3.14, 1) => {},\n+   |          ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:52:18\n+   |\n+LL |         Foo { x: 2.0 } => {},\n+   |                  ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "231af76fc932d024adc62b3b3e2cec5b084f7c54", "filename": "src/test/ui/issues/issue-43105.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,6 +8,7 @@ fn main() {\n     match 1 {\n         NUM => unimplemented!(),\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         _ => unimplemented!(),\n     }\n }"}, {"sha": "1a7b67b563d52cefd3ac24afc94ff9caf40e4f74", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -20,6 +20,12 @@ error: could not evaluate constant pattern\n LL |         NUM => unimplemented!(),\n    |         ^^^\n \n-error: aborting due to 3 previous errors\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-43105.rs:9:9\n+   |\n+LL |         NUM => unimplemented!(),\n+   |         ^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "7c8bf299db5819a54cae5b1235222b5f6cff0267", "filename": "src/test/ui/issues/issue-46101.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,6 +1,7 @@\n #![feature(use_extern_macros)]\n trait Foo {}\n #[derive(Foo::Anything)] //~ ERROR failed to resolve: partially resolved path in a derive macro\n+                         //~| ERROR failed to resolve: partially resolved path in a derive macro\n struct S;\n \n fn main() {}"}, {"sha": "2ffa15264b66df02da64b1734e6b6a0b9dd5efb3", "filename": "src/test/ui/issues/issue-46101.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,12 @@ error[E0433]: failed to resolve: partially resolved path in a derive macro\n LL | #[derive(Foo::Anything)]\n    |          ^^^^^^^^^^^^^ partially resolved path in a derive macro\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: partially resolved path in a derive macro\n+  --> $DIR/issue-46101.rs:3:10\n+   |\n+LL | #[derive(Foo::Anything)]\n+   |          ^^^^^^^^^^^^^ partially resolved path in a derive macro\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "deb63872f6968c44f976912a544c357c1f3ae266", "filename": "src/test/ui/issues/issue-50480.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,6 +2,7 @@\n //~^ ERROR the trait `Copy` may not be implemented for this type\n struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n+//~| ERROR cannot find type `NotDefined` in this scope\n //~| ERROR `i32` is not an iterator\n \n fn main() {}"}, {"sha": "2b92664d57772143db6446c90165bd2094e0b87e", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,12 @@ error[E0412]: cannot find type `NotDefined` in this scope\n LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |            ^^^^^^^^^^ not found in this scope\n \n+error[E0412]: cannot find type `NotDefined` in this scope\n+  --> $DIR/issue-50480.rs:3:12\n+   |\n+LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |            ^^^^^^^^^^ not found in this scope\n+\n error[E0277]: `i32` is not an iterator\n   --> $DIR/issue-50480.rs:3:24\n    |\n@@ -24,7 +30,7 @@ LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                 |\n    |                                                 this field does not implement `Copy`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0204, E0277, E0412.\n For more information about an error, try `rustc --explain E0204`."}, {"sha": "b5d55141b7509bc1649c60e41652ade6d0c614bf", "filename": "src/test/ui/issues/issue-53251.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -10,6 +10,7 @@ macro_rules! impl_add {\n             fn $n() {\n                 S::f::<i64>();\n                 //~^ ERROR wrong number of type arguments\n+                //~| ERROR wrong number of type arguments\n             }\n         )*\n     }"}, {"sha": "21e41574a46838ebd3b30bf21f6d6babcc50ecff", "filename": "src/test/ui/issues/issue-53251.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,15 @@ LL |                 S::f::<i64>();\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n \n-error: aborting due to previous error\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/issue-53251.rs:11:24\n+   |\n+LL |                 S::f::<i64>();\n+   |                        ^^^ unexpected type argument\n+...\n+LL | impl_add!(a b);\n+   | --------------- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "8ab47a4af1d2e92952ce4c3a40100bbea4ff410d", "filename": "src/test/ui/issues/issue-59029-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-59029-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-59029-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59029-1.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,6 @@ trait Svc<Req> { type Res; }\n \n trait MkSvc<Target, Req> = Svc<Target> where Self::Res: Svc<Req>;\n //~^ ERROR associated type `Res` not found for `Self`\n+//~| ERROR associated type `Res` not found for `Self`\n \n fn main() {}"}, {"sha": "53cdb8b1baf4cacdbc278e2f234b9084187fb7a3", "filename": "src/test/ui/issues/issue-59029-1.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-59029-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-59029-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59029-1.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,12 @@ error[E0220]: associated type `Res` not found for `Self`\n LL | trait MkSvc<Target, Req> = Svc<Target> where Self::Res: Svc<Req>;\n    |                                                    ^^^ associated type `Res` not found\n \n-error: aborting due to previous error\n+error[E0220]: associated type `Res` not found for `Self`\n+  --> $DIR/issue-59029-1.rs:5:52\n+   |\n+LL | trait MkSvc<Target, Req> = Svc<Target> where Self::Res: Svc<Req>;\n+   |                                                    ^^^ associated type `Res` not found\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0220`."}, {"sha": "cfd02183cb4a8724a06bd935fbf44ae1ea9836ad", "filename": "src/test/ui/issues/issue-62554.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-62554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-62554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-62554.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,6 @@\n+// error-pattern:this file contains an unclosed delimiter\n+// error-pattern:xpected `{`, found `macro_rules`\n+\n fn main() {}\n \n fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n-//~^ ERROR expected `{`, found `macro_rules`\n-//~ ERROR this file contains an unclosed delimiter"}, {"sha": "935d3842cdf6120299f42537bf487e1df044452d", "filename": "src/test/ui/issues/issue-62554.stderr", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-62554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-62554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-62554.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,18 +1,60 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/issue-62554.rs:5:52\n+  --> $DIR/issue-62554.rs:6:89\n    |\n LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n-   |               -                       -         -                  -                  - unclosed delimiter\n-   |               |                       |         |                  |\n+   |               -                       -         -                  -                  - ^\n+   |               |                       |         |                  |                  |\n+   |               |                       |         |                  |                  unclosed delimiter\n+   |               |                       |         |                  unclosed delimiter\n+   |               |                       |         unclosed delimiter\n+   |               unclosed delimiter      unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-62554.rs:6:89\n+   |\n+LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n+   |               -                       -         -                  -                  - ^\n+   |               |                       |         |                  |                  |\n+   |               |                       |         |                  |                  unclosed delimiter\n+   |               |                       |         |                  unclosed delimiter\n+   |               |                       |         unclosed delimiter\n+   |               unclosed delimiter      unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-62554.rs:6:89\n+   |\n+LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n+   |               -                       -         -                  -                  - ^\n+   |               |                       |         |                  |                  |\n+   |               |                       |         |                  |                  unclosed delimiter\n+   |               |                       |         |                  unclosed delimiter\n+   |               |                       |         unclosed delimiter\n+   |               unclosed delimiter      unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-62554.rs:6:89\n+   |\n+LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n+   |               -                       -         -                  -                  - ^\n+   |               |                       |         |                  |                  |\n+   |               |                       |         |                  |                  unclosed delimiter\n+   |               |                       |         |                  unclosed delimiter\n+   |               |                       |         unclosed delimiter\n+   |               unclosed delimiter      unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-62554.rs:6:89\n+   |\n+LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n+   |               -                       -         -                  -                  - ^\n+   |               |                       |         |                  |                  |\n+   |               |                       |         |                  |                  unclosed delimiter\n    |               |                       |         |                  unclosed delimiter\n    |               |                       |         unclosed delimiter\n    |               unclosed delimiter      unclosed delimiter\n-LL |\n-LL |\n-   |                                                    ^\n \n error: expected `{`, found `macro_rules`\n-  --> $DIR/issue-62554.rs:3:23\n+  --> $DIR/issue-62554.rs:6:23\n    |\n LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n    |                 --    ^^^^^^^^^^^ expected `{`\n@@ -22,10 +64,8 @@ LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s\n help: try placing this code inside a block\n    |\n LL | fn foo(u: u8) { if u8 { macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n-LL |\n-LL |\n LL |  }\n    |\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "325137327b26926492c0e2e9d6cc8e7e6c2ec0e3", "filename": "src/test/ui/issues/issue-6804.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -17,7 +17,9 @@ fn main() {\n \n     match [x, 1.0] {\n         [NAN, _] => {}, //~ ERROR floating-point types cannot be used\n-        //~^ WARN this was previously accepted by the compiler but is being phased out\n+                        //~| ERROR floating-point types cannot be used\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n         _ => {},\n     };\n }"}, {"sha": "f4188dc3566c2b435d0e390b17973fb903622479", "filename": "src/test/ui/issues/issue-6804.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-6804.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fissues%2Fissue-6804.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6804.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -30,5 +30,14 @@ LL |         NAN => {},\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to 3 previous errors\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-6804.rs:19:10\n+   |\n+LL |         [NAN, _] => {},\n+   |          ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "13b28e8830b62bd11fc28f2c4e0e4a441745b133", "filename": "src/test/ui/lint/lint-forbid-attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,5 +2,7 @@\n \n #[allow(deprecated)]\n //~^ ERROR allow(deprecated) overruled by outer forbid(deprecated)\n+//~| ERROR allow(deprecated) overruled by outer forbid(deprecated)\n+//~| ERROR allow(deprecated) overruled by outer forbid(deprecated)\n fn main() {\n }"}, {"sha": "bf138c317e93d79289a36e8a46757e3fc87969b1", "filename": "src/test/ui/lint/lint-forbid-attr.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,24 @@ LL |\n LL | #[allow(deprecated)]\n    |         ^^^^^^^^^^ overruled by previous forbid\n \n-error: aborting due to previous error\n+error[E0453]: allow(deprecated) overruled by outer forbid(deprecated)\n+  --> $DIR/lint-forbid-attr.rs:3:9\n+   |\n+LL | #![forbid(deprecated)]\n+   |           ---------- `forbid` level set here\n+LL | \n+LL | #[allow(deprecated)]\n+   |         ^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(deprecated) overruled by outer forbid(deprecated)\n+  --> $DIR/lint-forbid-attr.rs:3:9\n+   |\n+LL | #![forbid(deprecated)]\n+   |           ---------- `forbid` level set here\n+LL | \n+LL | #[allow(deprecated)]\n+   |         ^^^^^^^^^^ overruled by previous forbid\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "821470c86860a4a9ab82fa0f94596445c30cff97", "filename": "src/test/ui/lint/lint-forbid-cmdline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-cmdline.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -F deprecated\n \n #[allow(deprecated)] //~ ERROR allow(deprecated) overruled by outer forbid(deprecated)\n+                     //~| ERROR allow(deprecated) overruled by outer forbid(deprecated)\n+                     //~| ERROR allow(deprecated) overruled by outer forbid(deprecated)\n fn main() {\n }"}, {"sha": "89a4445d80068301db2d5be79d51c5bfb8f45fb9", "filename": "src/test/ui/lint/lint-forbid-cmdline.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-forbid-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-cmdline.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -6,6 +6,22 @@ LL | #[allow(deprecated)]\n    |\n    = note: `forbid` lint level was set on command line\n \n-error: aborting due to previous error\n+error[E0453]: allow(deprecated) overruled by outer forbid(deprecated)\n+  --> $DIR/lint-forbid-cmdline.rs:3:9\n+   |\n+LL | #[allow(deprecated)]\n+   |         ^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `forbid` lint level was set on command line\n+\n+error[E0453]: allow(deprecated) overruled by outer forbid(deprecated)\n+  --> $DIR/lint-forbid-cmdline.rs:3:9\n+   |\n+LL | #[allow(deprecated)]\n+   |         ^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `forbid` lint level was set on command line\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "cf5570753d85d37e12a13b81d796705a46bdea8c", "filename": "src/test/ui/lint/lint-malformed.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,4 +1,8 @@\n #![deny = \"foo\"] //~ ERROR malformed `deny` attribute input\n #![allow(bar = \"baz\")] //~ ERROR malformed lint attribute\n-\n+                       //~| ERROR malformed lint attribute\n+                       //~| ERROR malformed lint attribute\n+                       //~| ERROR malformed lint attribute\n+                       //~| ERROR malformed lint attribute\n+                       //~| ERROR malformed lint attribute\n fn main() { }"}, {"sha": "6dc8d4984445e1e1fefa1edbd137321d3e3062e0", "filename": "src/test/ui/lint/lint-malformed.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,12 +4,42 @@ error[E0452]: malformed lint attribute input\n LL | #![allow(bar = \"baz\")]\n    |          ^^^^^^^^^^^ bad attribute argument\n \n+error[E0452]: malformed lint attribute input\n+  --> $DIR/lint-malformed.rs:2:10\n+   |\n+LL | #![allow(bar = \"baz\")]\n+   |          ^^^^^^^^^^^ bad attribute argument\n+\n error: malformed `deny` attribute input\n   --> $DIR/lint-malformed.rs:1:1\n    |\n LL | #![deny = \"foo\"]\n    | ^^^^^^^^^^^^^^^^ help: must be of the form: `#[deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n \n-error: aborting due to 2 previous errors\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/lint-malformed.rs:2:10\n+   |\n+LL | #![allow(bar = \"baz\")]\n+   |          ^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/lint-malformed.rs:2:10\n+   |\n+LL | #![allow(bar = \"baz\")]\n+   |          ^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/lint-malformed.rs:2:10\n+   |\n+LL | #![allow(bar = \"baz\")]\n+   |          ^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/lint-malformed.rs:2:10\n+   |\n+LL | #![allow(bar = \"baz\")]\n+   |          ^^^^^^^^^^^ bad attribute argument\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0452`."}, {"sha": "b4ab5f5ee62ddee302c9aae215b1593f79f21ef3", "filename": "src/test/ui/lint/lint-removed-cmdline.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,6 +2,18 @@ warning: lint `raw_pointer_derive` has been removed: `using derive with raw poin\n    |\n    = note: requested on the command line with `-D raw_pointer_derive`\n \n+warning: lint `raw_pointer_derive` has been removed: `using derive with raw pointers is ok`\n+   |\n+   = note: requested on the command line with `-D raw_pointer_derive`\n+\n+warning: lint `raw_pointer_derive` has been removed: `using derive with raw pointers is ok`\n+   |\n+   = note: requested on the command line with `-D raw_pointer_derive`\n+\n+warning: lint `raw_pointer_derive` has been removed: `using derive with raw pointers is ok`\n+   |\n+   = note: requested on the command line with `-D raw_pointer_derive`\n+\n error: unused variable: `unused`\n   --> $DIR/lint-removed-cmdline.rs:12:17\n    |"}, {"sha": "6401d9b77e007fa025756a69eddc7ad07cd175e7", "filename": "src/test/ui/lint/lint-renamed-cmdline.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,6 +2,18 @@ warning: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n    |\n    = note: requested on the command line with `-D bare_trait_object`\n \n+warning: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n+   |\n+   = note: requested on the command line with `-D bare_trait_object`\n+\n+warning: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n+   |\n+   = note: requested on the command line with `-D bare_trait_object`\n+\n+warning: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n+   |\n+   = note: requested on the command line with `-D bare_trait_object`\n+\n error: unused variable: `unused`\n   --> $DIR/lint-renamed-cmdline.rs:8:17\n    |"}, {"sha": "0bac9bb3d99cd94dbc3b05ae021cd383418a8620", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -97,10 +97,13 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n         //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n+        //~| WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n         type A = dyn TraitWithAssociatedTypes<\n             TypeUnstable = u8,\n             TypeDeprecated = u16,\n             //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated'\n+            //~| WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated'\n+            //~| WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated'\n         >;\n \n         let _ = DeprecatedStruct { //~ WARN use of deprecated item 'lint_stability::DeprecatedStruct'"}, {"sha": "650373c90bcf27576bca7854a0f6893ce772b1ce", "filename": "src/test/ui/lint/lint-stability-deprecated.stderr", "status": "modified", "additions": 90, "deletions": 72, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -77,241 +77,241 @@ LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:106:17\n+  --> $DIR/lint-stability-deprecated.rs:109:17\n    |\n LL |         let _ = DeprecatedStruct {\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedUnstableStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:109:17\n+  --> $DIR/lint-stability-deprecated.rs:112:17\n    |\n LL |         let _ = DeprecatedUnstableStruct {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedUnitStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:116:17\n+  --> $DIR/lint-stability-deprecated.rs:119:17\n    |\n LL |         let _ = DeprecatedUnitStruct;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedUnstableUnitStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:117:17\n+  --> $DIR/lint-stability-deprecated.rs:120:17\n    |\n LL |         let _ = DeprecatedUnstableUnitStruct;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Enum::DeprecatedVariant': text\n-  --> $DIR/lint-stability-deprecated.rs:121:17\n+  --> $DIR/lint-stability-deprecated.rs:124:17\n    |\n LL |         let _ = Enum::DeprecatedVariant;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Enum::DeprecatedUnstableVariant': text\n-  --> $DIR/lint-stability-deprecated.rs:122:17\n+  --> $DIR/lint-stability-deprecated.rs:125:17\n    |\n LL |         let _ = Enum::DeprecatedUnstableVariant;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedTupleStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:126:17\n+  --> $DIR/lint-stability-deprecated.rs:129:17\n    |\n LL |         let _ = DeprecatedTupleStruct (1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedUnstableTupleStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:127:17\n+  --> $DIR/lint-stability-deprecated.rs:130:17\n    |\n LL |         let _ = DeprecatedUnstableTupleStruct (1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:136:25\n+  --> $DIR/lint-stability-deprecated.rs:139:25\n    |\n LL |         macro_test_arg!(deprecated_text());\n    |                         ^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::deprecated_unstable_text': text\n-  --> $DIR/lint-stability-deprecated.rs:137:25\n+  --> $DIR/lint-stability-deprecated.rs:140:25\n    |\n LL |         macro_test_arg!(deprecated_unstable_text());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:138:41\n+  --> $DIR/lint-stability-deprecated.rs:141:41\n    |\n LL |         macro_test_arg!(macro_test_arg!(deprecated_text()));\n    |                                         ^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:143:9\n+  --> $DIR/lint-stability-deprecated.rs:146:9\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:145:9\n+  --> $DIR/lint-stability-deprecated.rs:148:9\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:147:9\n+  --> $DIR/lint-stability-deprecated.rs:150:9\n    |\n LL |         Trait::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:149:9\n+  --> $DIR/lint-stability-deprecated.rs:152:9\n    |\n LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable': text\n-  --> $DIR/lint-stability-deprecated.rs:151:9\n+  --> $DIR/lint-stability-deprecated.rs:154:9\n    |\n LL |         Trait::trait_deprecated_unstable(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable': text\n-  --> $DIR/lint-stability-deprecated.rs:153:9\n+  --> $DIR/lint-stability-deprecated.rs:156:9\n    |\n LL |         <Foo as Trait>::trait_deprecated_unstable(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n-  --> $DIR/lint-stability-deprecated.rs:155:9\n+  --> $DIR/lint-stability-deprecated.rs:158:9\n    |\n LL | ...   Trait::trait_deprecated_unstable_text(&foo);\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n-  --> $DIR/lint-stability-deprecated.rs:157:9\n+  --> $DIR/lint-stability-deprecated.rs:160:9\n    |\n LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedTrait': text\n-  --> $DIR/lint-stability-deprecated.rs:185:10\n+  --> $DIR/lint-stability-deprecated.rs:188:10\n    |\n LL |     impl DeprecatedTrait for S {}\n    |          ^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedTrait': text\n-  --> $DIR/lint-stability-deprecated.rs:187:25\n+  --> $DIR/lint-stability-deprecated.rs:190:25\n    |\n LL |     trait LocalTrait2 : DeprecatedTrait { }\n    |                         ^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'inheritance::inherited_stability::unstable_mod::deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:206:9\n+  --> $DIR/lint-stability-deprecated.rs:209:9\n    |\n LL |         unstable_mod::deprecated();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:328:9\n+  --> $DIR/lint-stability-deprecated.rs:331:9\n    |\n LL |         deprecated();\n    |         ^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:333:9\n+  --> $DIR/lint-stability-deprecated.rs:336:9\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:335:9\n+  --> $DIR/lint-stability-deprecated.rs:338:9\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:337:9\n+  --> $DIR/lint-stability-deprecated.rs:340:9\n    |\n LL |         deprecated_text();\n    |         ^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:342:9\n+  --> $DIR/lint-stability-deprecated.rs:345:9\n    |\n LL |         Trait::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:344:9\n+  --> $DIR/lint-stability-deprecated.rs:347:9\n    |\n LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::DeprecatedStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:382:17\n+  --> $DIR/lint-stability-deprecated.rs:385:17\n    |\n LL |         let _ = DeprecatedStruct {\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::DeprecatedUnitStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:389:17\n+  --> $DIR/lint-stability-deprecated.rs:392:17\n    |\n LL |         let _ = DeprecatedUnitStruct;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Enum::DeprecatedVariant': text\n-  --> $DIR/lint-stability-deprecated.rs:393:17\n+  --> $DIR/lint-stability-deprecated.rs:396:17\n    |\n LL |         let _ = Enum::DeprecatedVariant;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::DeprecatedTupleStruct': text\n-  --> $DIR/lint-stability-deprecated.rs:397:17\n+  --> $DIR/lint-stability-deprecated.rs:400:17\n    |\n LL |         let _ = DeprecatedTupleStruct (1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:404:9\n+  --> $DIR/lint-stability-deprecated.rs:407:9\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:406:9\n+  --> $DIR/lint-stability-deprecated.rs:409:9\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:408:9\n+  --> $DIR/lint-stability-deprecated.rs:411:9\n    |\n LL |         Trait::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:410:9\n+  --> $DIR/lint-stability-deprecated.rs:413:9\n    |\n LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::test_fn_body::fn_in_body': text\n-  --> $DIR/lint-stability-deprecated.rs:437:9\n+  --> $DIR/lint-stability-deprecated.rs:440:9\n    |\n LL |         fn_in_body();\n    |         ^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::DeprecatedTrait': text\n-  --> $DIR/lint-stability-deprecated.rs:457:10\n+  --> $DIR/lint-stability-deprecated.rs:460:10\n    |\n LL |     impl DeprecatedTrait for S { }\n    |          ^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::DeprecatedTrait': text\n-  --> $DIR/lint-stability-deprecated.rs:459:24\n+  --> $DIR/lint-stability-deprecated.rs:462:24\n    |\n LL |     trait LocalTrait : DeprecatedTrait { }\n    |                        ^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::MethodTester::test_method_body::fn_in_body': text\n-  --> $DIR/lint-stability-deprecated.rs:445:13\n+  --> $DIR/lint-stability-deprecated.rs:448:13\n    |\n LL |             fn_in_body();\n    |             ^^^^^^^^^^\n@@ -323,7 +323,7 @@ LL |         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n    |                                                ^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:102:13\n+  --> $DIR/lint-stability-deprecated.rs:103:13\n    |\n LL |             TypeDeprecated = u16,\n    |             ^^^^^^^^^^^^^^^^^^^^\n@@ -449,188 +449,206 @@ LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedStruct::i': text\n-  --> $DIR/lint-stability-deprecated.rs:107:13\n+  --> $DIR/lint-stability-deprecated.rs:110:13\n    |\n LL |             i: 0\n    |             ^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedUnstableStruct::i': text\n-  --> $DIR/lint-stability-deprecated.rs:111:13\n+  --> $DIR/lint-stability-deprecated.rs:114:13\n    |\n LL |             i: 0\n    |             ^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:142:13\n+  --> $DIR/lint-stability-deprecated.rs:145:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:144:9\n+  --> $DIR/lint-stability-deprecated.rs:147:9\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:146:13\n+  --> $DIR/lint-stability-deprecated.rs:149:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:148:9\n+  --> $DIR/lint-stability-deprecated.rs:151:9\n    |\n LL |         <Foo>::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable': text\n-  --> $DIR/lint-stability-deprecated.rs:150:13\n+  --> $DIR/lint-stability-deprecated.rs:153:13\n    |\n LL |         foo.trait_deprecated_unstable();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable': text\n-  --> $DIR/lint-stability-deprecated.rs:152:9\n+  --> $DIR/lint-stability-deprecated.rs:155:9\n    |\n LL |         <Foo>::trait_deprecated_unstable(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n-  --> $DIR/lint-stability-deprecated.rs:154:13\n+  --> $DIR/lint-stability-deprecated.rs:157:13\n    |\n LL |         foo.trait_deprecated_unstable_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n-  --> $DIR/lint-stability-deprecated.rs:156:9\n+  --> $DIR/lint-stability-deprecated.rs:159:9\n    |\n LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:173:13\n+  --> $DIR/lint-stability-deprecated.rs:176:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:174:13\n+  --> $DIR/lint-stability-deprecated.rs:177:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable': text\n-  --> $DIR/lint-stability-deprecated.rs:175:13\n+  --> $DIR/lint-stability-deprecated.rs:178:13\n    |\n LL |         foo.trait_deprecated_unstable();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n-  --> $DIR/lint-stability-deprecated.rs:176:13\n+  --> $DIR/lint-stability-deprecated.rs:179:13\n    |\n LL |         foo.trait_deprecated_unstable_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::MethodTester::method_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:329:13\n+  --> $DIR/lint-stability-deprecated.rs:332:13\n    |\n LL |         foo.method_deprecated();\n    |             ^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::MethodTester::method_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:330:9\n+  --> $DIR/lint-stability-deprecated.rs:333:9\n    |\n LL |         Foo::method_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::MethodTester::method_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:331:9\n+  --> $DIR/lint-stability-deprecated.rs:334:9\n    |\n LL |         <Foo>::method_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:332:13\n+  --> $DIR/lint-stability-deprecated.rs:335:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:334:9\n+  --> $DIR/lint-stability-deprecated.rs:337:9\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:338:13\n+  --> $DIR/lint-stability-deprecated.rs:341:13\n    |\n LL |         foo.method_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:339:9\n+  --> $DIR/lint-stability-deprecated.rs:342:9\n    |\n LL |         Foo::method_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::MethodTester::method_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:340:9\n+  --> $DIR/lint-stability-deprecated.rs:343:9\n    |\n LL |         <Foo>::method_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:341:13\n+  --> $DIR/lint-stability-deprecated.rs:344:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:343:9\n+  --> $DIR/lint-stability-deprecated.rs:346:9\n    |\n LL |         <Foo>::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::DeprecatedStruct::i': text\n-  --> $DIR/lint-stability-deprecated.rs:384:13\n+  --> $DIR/lint-stability-deprecated.rs:387:13\n    |\n LL |             i: 0\n    |             ^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:403:13\n+  --> $DIR/lint-stability-deprecated.rs:406:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:405:9\n+  --> $DIR/lint-stability-deprecated.rs:408:9\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:407:13\n+  --> $DIR/lint-stability-deprecated.rs:410:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:409:9\n+  --> $DIR/lint-stability-deprecated.rs:412:9\n    |\n LL |         <Foo>::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated': text\n-  --> $DIR/lint-stability-deprecated.rs:426:13\n+  --> $DIR/lint-stability-deprecated.rs:429:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n-  --> $DIR/lint-stability-deprecated.rs:427:13\n+  --> $DIR/lint-stability-deprecated.rs:430:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n+warning: use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n+  --> $DIR/lint-stability-deprecated.rs:98:48\n+   |\n+LL |         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n+   |                                                ^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n+  --> $DIR/lint-stability-deprecated.rs:103:13\n+   |\n+LL |             TypeDeprecated = u16,\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n+  --> $DIR/lint-stability-deprecated.rs:103:13\n+   |\n+LL |             TypeDeprecated = u16,\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "3a78ed2ceea151d0e154fdab161548500e0e9044", "filename": "src/test/ui/lint/lint-unexported-no-mangle.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -6,6 +6,30 @@ warning: lint `private_no_mangle_statics` has been removed: `no longer a warning\n    |\n    = note: requested on the command line with `-F private_no_mangle_statics`\n \n+warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, `#[no_mangle]` functions always exported`\n+   |\n+   = note: requested on the command line with `-F private_no_mangle_fns`\n+\n+warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, `#[no_mangle]` statics always exported`\n+   |\n+   = note: requested on the command line with `-F private_no_mangle_statics`\n+\n+warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, `#[no_mangle]` functions always exported`\n+   |\n+   = note: requested on the command line with `-F private_no_mangle_fns`\n+\n+warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, `#[no_mangle]` statics always exported`\n+   |\n+   = note: requested on the command line with `-F private_no_mangle_statics`\n+\n+warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, `#[no_mangle]` functions always exported`\n+   |\n+   = note: requested on the command line with `-F private_no_mangle_fns`\n+\n+warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, `#[no_mangle]` statics always exported`\n+   |\n+   = note: requested on the command line with `-F private_no_mangle_statics`\n+\n error: const items should never be `#[no_mangle]`\n   --> $DIR/lint-unexported-no-mangle.rs:9:1\n    |"}, {"sha": "27e7ee7fc03bd9afe3f65adb081b5e950f01dedd", "filename": "src/test/ui/lint/lint-unknown-lint-cmdline.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,24 @@ error[E0602]: unknown lint: `dead_cod`\n    = help: did you mean: `dead_code`\n    = note: requested on the command line with `-D dead_cod`\n \n-error: aborting due to 2 previous errors\n+error[E0602]: unknown lint: `bogus`\n+   |\n+   = note: requested on the command line with `-D bogus`\n+\n+error[E0602]: unknown lint: `dead_cod`\n+   |\n+   = help: did you mean: `dead_code`\n+   = note: requested on the command line with `-D dead_cod`\n+\n+error[E0602]: unknown lint: `bogus`\n+   |\n+   = note: requested on the command line with `-D bogus`\n+\n+error[E0602]: unknown lint: `dead_cod`\n+   |\n+   = help: did you mean: `dead_code`\n+   = note: requested on the command line with `-D dead_cod`\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0602`."}, {"sha": "2a38565f60364fc38ea043bc64b8d2a90378e4b0", "filename": "src/test/ui/lint/outer-forbid.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,12 +7,18 @@\n #![forbid(unused, non_snake_case)]\n \n #[allow(unused_variables)] //~ ERROR overruled\n+                           //~| ERROR overruled\n+                           //~| ERROR overruled\n fn foo() {}\n \n #[allow(unused)] //~ ERROR overruled\n+                 //~| ERROR overruled\n+                 //~| ERROR overruled\n fn bar() {}\n \n #[allow(nonstandard_style)] //~ ERROR overruled\n+                            //~| ERROR overruled\n+                            //~| ERROR overruled\n fn main() {\n     println!(\"hello forbidden world\")\n }"}, {"sha": "b2e638e7af978b1210710ee3a69bea3b07e6ee23", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,7 +8,7 @@ LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n \n error[E0453]: allow(unused) overruled by outer forbid(unused)\n-  --> $DIR/outer-forbid.rs:12:9\n+  --> $DIR/outer-forbid.rs:14:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |           ------ `forbid` level set here\n@@ -17,14 +17,68 @@ LL | #[allow(unused)]\n    |         ^^^^^^ overruled by previous forbid\n \n error[E0453]: allow(nonstandard_style) overruled by outer forbid(non_snake_case)\n-  --> $DIR/outer-forbid.rs:15:9\n+  --> $DIR/outer-forbid.rs:19:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |                   -------------- `forbid` level set here\n ...\n LL | #[allow(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n \n-error: aborting due to 3 previous errors\n+error[E0453]: allow(unused_variables) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:9:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:14:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+...\n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(nonstandard_style) overruled by outer forbid(non_snake_case)\n+  --> $DIR/outer-forbid.rs:19:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |                   -------------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused_variables) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:9:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:14:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+...\n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(nonstandard_style) overruled by outer forbid(non_snake_case)\n+  --> $DIR/outer-forbid.rs:19:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |                   -------------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "03cf0679fce9414d5360994b58cc9582b8a18e34", "filename": "src/test/ui/lint/reasons-erroneous.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,24 +2,70 @@\n \n #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n //~^ ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| NOTE reason must be a string literal\n+//~| NOTE reason must be a string literal\n //~| NOTE reason must be a string literal\n #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n //~^ ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| NOTE reason must be a string literal\n+//~| NOTE reason must be a string literal\n //~| NOTE reason must be a string literal\n #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n //~^ ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n //~| NOTE bad attribute argument\n #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n //~^ ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n //~| NOTE bad attribute argument\n #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n //~^ ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n+//~| NOTE bad attribute argument\n //~| NOTE bad attribute argument\n #![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n //~^ ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| NOTE reason in lint attribute must come last\n+//~| NOTE reason in lint attribute must come last\n //~| NOTE reason in lint attribute must come last\n #![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n //~^ ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| ERROR malformed lint attribute\n+//~| NOTE reason in lint attribute must come last\n+//~| NOTE reason in lint attribute must come last\n //~| NOTE reason in lint attribute must come last\n #![warn(missing_copy_implementations, reason)]\n //~^ WARN unknown lint"}, {"sha": "a84167fed12d039222e7a1fa1ea6ff1bf922a000", "filename": "src/test/ui/lint/reasons-erroneous.stderr", "status": "modified", "additions": 146, "deletions": 8, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,49 +5,187 @@ LL | #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n    |                                                          ^ reason must be a string literal\n \n error[E0452]: malformed lint attribute input\n-  --> $DIR/reasons-erroneous.rs:6:40\n+  --> $DIR/reasons-erroneous.rs:10:40\n    |\n LL | #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reason must be a string literal\n \n error[E0452]: malformed lint attribute input\n-  --> $DIR/reasons-erroneous.rs:9:29\n+  --> $DIR/reasons-erroneous.rs:17:29\n    |\n LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n \n error[E0452]: malformed lint attribute input\n-  --> $DIR/reasons-erroneous.rs:12:23\n+  --> $DIR/reasons-erroneous.rs:17:29\n+   |\n+LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:30:23\n    |\n LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n \n error[E0452]: malformed lint attribute input\n-  --> $DIR/reasons-erroneous.rs:15:36\n+  --> $DIR/reasons-erroneous.rs:30:23\n+   |\n+LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:43:36\n+   |\n+LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:43:36\n    |\n LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n \n error[E0452]: malformed lint attribute input\n-  --> $DIR/reasons-erroneous.rs:18:44\n+  --> $DIR/reasons-erroneous.rs:56:44\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n \n error[E0452]: malformed lint attribute input\n-  --> $DIR/reasons-erroneous.rs:21:25\n+  --> $DIR/reasons-erroneous.rs:63:25\n    |\n LL | #![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n \n warning: unknown lint: `reason`\n-  --> $DIR/reasons-erroneous.rs:24:39\n+  --> $DIR/reasons-erroneous.rs:70:39\n    |\n LL | #![warn(missing_copy_implementations, reason)]\n    |                                       ^^^^^^\n    |\n    = note: `#[warn(unknown_lints)]` on by default\n \n-error: aborting due to 7 previous errors\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:3:58\n+   |\n+LL | #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n+   |                                                          ^ reason must be a string literal\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:10:40\n+   |\n+LL | #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reason must be a string literal\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:17:29\n+   |\n+LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:17:29\n+   |\n+LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:30:23\n+   |\n+LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:30:23\n+   |\n+LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:43:36\n+   |\n+LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:43:36\n+   |\n+LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:56:44\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:63:25\n+   |\n+LL | #![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:3:58\n+   |\n+LL | #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n+   |                                                          ^ reason must be a string literal\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:10:40\n+   |\n+LL | #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reason must be a string literal\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:17:29\n+   |\n+LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:17:29\n+   |\n+LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:30:23\n+   |\n+LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:30:23\n+   |\n+LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:43:36\n+   |\n+LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:43:36\n+   |\n+LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad attribute argument\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:56:44\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n+\n+error[E0452]: malformed lint attribute input\n+  --> $DIR/reasons-erroneous.rs:63:25\n+   |\n+LL | #![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ reason in lint attribute must come last\n+\n+error: aborting due to 30 previous errors\n \n For more information about this error, try `rustc --explain E0452`."}, {"sha": "6a71176aabb15db8197c609a1cf4d80335292ba5", "filename": "src/test/ui/lint/reasons-forbidden.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -3,6 +3,8 @@\n #![forbid(\n     unsafe_code,\n     //~^ NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n     reason = \"our errors & omissions insurance policy doesn't cover unsafe Rust\"\n )]\n \n@@ -13,7 +15,13 @@ fn main() {\n \n     #[allow(unsafe_code)]\n     //~^ ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n     //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     unsafe {\n         *a_billion_dollar_mistake"}, {"sha": "0954edea7378c8c32152b0660fab70b5066b21ea", "filename": "src/test/ui/lint/reasons-forbidden.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,5 @@\n error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n-  --> $DIR/reasons-forbidden.rs:14:13\n+  --> $DIR/reasons-forbidden.rs:16:13\n    |\n LL |     unsafe_code,\n    |     ----------- `forbid` level set here\n@@ -9,6 +9,28 @@ LL |     #[allow(unsafe_code)]\n    |\n    = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n \n-error: aborting due to previous error\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:16:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:16:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "c1a4e32a6dcbcd842f4bb64bb4e4c15ba6a0df42", "filename": "src/test/ui/macros/builtin-std-paths-fail.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,6 +1,8 @@\n #[derive(\n     core::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `core`\n+                          //~| ERROR could not find `RustcDecodable` in `core`\n     core::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `core`\n+                          //~| ERROR could not find `RustcDecodable` in `core`\n )]\n #[core::bench] //~ ERROR could not find `bench` in `core`\n #[core::global_allocator] //~ ERROR could not find `global_allocator` in `core`\n@@ -10,7 +12,9 @@ struct Core;\n \n #[derive(\n     std::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `std`\n+                         //~| ERROR could not find `RustcDecodable` in `std`\n     std::RustcDecodable, //~ ERROR could not find `RustcDecodable` in `std`\n+                         //~| ERROR could not find `RustcDecodable` in `std`\n )]\n #[std::bench] //~ ERROR could not find `bench` in `std`\n #[std::global_allocator] //~ ERROR could not find `global_allocator` in `std`"}, {"sha": "9831e46ec30a1c3cf66e54f90f1b16e6e41ab619", "filename": "src/test/ui/macros/builtin-std-paths-fail.stderr", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbuiltin-std-paths-fail.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,23 +1,23 @@\n error[E0433]: failed to resolve: could not find `bench` in `core`\n-  --> $DIR/builtin-std-paths-fail.rs:5:9\n+  --> $DIR/builtin-std-paths-fail.rs:7:9\n    |\n LL | #[core::bench]\n    |         ^^^^^ could not find `bench` in `core`\n \n error[E0433]: failed to resolve: could not find `global_allocator` in `core`\n-  --> $DIR/builtin-std-paths-fail.rs:6:9\n+  --> $DIR/builtin-std-paths-fail.rs:8:9\n    |\n LL | #[core::global_allocator]\n    |         ^^^^^^^^^^^^^^^^ could not find `global_allocator` in `core`\n \n error[E0433]: failed to resolve: could not find `test_case` in `core`\n-  --> $DIR/builtin-std-paths-fail.rs:7:9\n+  --> $DIR/builtin-std-paths-fail.rs:9:9\n    |\n LL | #[core::test_case]\n    |         ^^^^^^^^^ could not find `test_case` in `core`\n \n error[E0433]: failed to resolve: could not find `test` in `core`\n-  --> $DIR/builtin-std-paths-fail.rs:8:9\n+  --> $DIR/builtin-std-paths-fail.rs:10:9\n    |\n LL | #[core::test]\n    |         ^^^^ could not find `test` in `core`\n@@ -29,47 +29,71 @@ LL |     core::RustcDecodable,\n    |           ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `core`\n \n error[E0433]: failed to resolve: could not find `RustcDecodable` in `core`\n-  --> $DIR/builtin-std-paths-fail.rs:3:11\n+  --> $DIR/builtin-std-paths-fail.rs:4:11\n+   |\n+LL |     core::RustcDecodable,\n+   |           ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `core`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:4:11\n+   |\n+LL |     core::RustcDecodable,\n+   |           ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `core`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `core`\n+  --> $DIR/builtin-std-paths-fail.rs:2:11\n    |\n LL |     core::RustcDecodable,\n    |           ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `core`\n \n error[E0433]: failed to resolve: could not find `bench` in `std`\n-  --> $DIR/builtin-std-paths-fail.rs:15:8\n+  --> $DIR/builtin-std-paths-fail.rs:19:8\n    |\n LL | #[std::bench]\n    |        ^^^^^ could not find `bench` in `std`\n \n error[E0433]: failed to resolve: could not find `global_allocator` in `std`\n-  --> $DIR/builtin-std-paths-fail.rs:16:8\n+  --> $DIR/builtin-std-paths-fail.rs:20:8\n    |\n LL | #[std::global_allocator]\n    |        ^^^^^^^^^^^^^^^^ could not find `global_allocator` in `std`\n \n error[E0433]: failed to resolve: could not find `test_case` in `std`\n-  --> $DIR/builtin-std-paths-fail.rs:17:8\n+  --> $DIR/builtin-std-paths-fail.rs:21:8\n    |\n LL | #[std::test_case]\n    |        ^^^^^^^^^ could not find `test_case` in `std`\n \n error[E0433]: failed to resolve: could not find `test` in `std`\n-  --> $DIR/builtin-std-paths-fail.rs:18:8\n+  --> $DIR/builtin-std-paths-fail.rs:22:8\n    |\n LL | #[std::test]\n    |        ^^^^ could not find `test` in `std`\n \n error[E0433]: failed to resolve: could not find `RustcDecodable` in `std`\n-  --> $DIR/builtin-std-paths-fail.rs:12:10\n+  --> $DIR/builtin-std-paths-fail.rs:14:10\n+   |\n+LL |     std::RustcDecodable,\n+   |          ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `std`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:16:10\n+   |\n+LL |     std::RustcDecodable,\n+   |          ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `std`\n+\n+error[E0433]: failed to resolve: could not find `RustcDecodable` in `std`\n+  --> $DIR/builtin-std-paths-fail.rs:16:10\n    |\n LL |     std::RustcDecodable,\n    |          ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `std`\n \n error[E0433]: failed to resolve: could not find `RustcDecodable` in `std`\n-  --> $DIR/builtin-std-paths-fail.rs:13:10\n+  --> $DIR/builtin-std-paths-fail.rs:14:10\n    |\n LL |     std::RustcDecodable,\n    |          ^^^^^^^^^^^^^^ could not find `RustcDecodable` in `std`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "8ed911cbca71839aaaaacdf3206acf199d1c8853", "filename": "src/test/ui/macros/meta-item-absolute-path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,4 +1,5 @@\n #[derive(::Absolute)] //~ ERROR failed to resolve\n+                      //~| ERROR failed to resolve\n struct S;\n \n fn main() {}"}, {"sha": "c53971e245fdb1656c842dc60cfbb7ff4701be59", "filename": "src/test/ui/macros/meta-item-absolute-path.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,12 @@ error[E0433]: failed to resolve: maybe a missing crate `Absolute`?\n LL | #[derive(::Absolute)]\n    |            ^^^^^^^^ maybe a missing crate `Absolute`?\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: maybe a missing crate `Absolute`?\n+  --> $DIR/meta-item-absolute-path.rs:1:12\n+   |\n+LL | #[derive(::Absolute)]\n+   |            ^^^^^^^^ maybe a missing crate `Absolute`?\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "792664e1db82c180a1766351c42cba8a40472e0c", "filename": "src/test/ui/match/match-range-fail-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-2.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -6,16 +6,19 @@ fn main() {\n         _ => { }\n     };\n     //~^^^ ERROR lower range bound must be less than or equal to upper\n+    //~| ERROR lower range bound must be less than or equal to upper\n \n     match 5 {\n         0 .. 0 => { }\n         _ => { }\n     };\n     //~^^^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n \n     match 5u64 {\n         0xFFFF_FFFF_FFFF_FFFF ..= 1 => { }\n         _ => { }\n     };\n     //~^^^ ERROR lower range bound must be less than or equal to upper\n+    //~| ERROR lower range bound must be less than or equal to upper\n }"}, {"sha": "7a0852d7e6ce68137c17b229767d84b09d9aacff", "filename": "src/test/ui/match/match-range-fail-2.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-2.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,18 +5,36 @@ LL |         6 ..= 1 => { }\n    |         ^ lower bound larger than upper bound\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/match-range-fail-2.rs:11:9\n+  --> $DIR/match-range-fail-2.rs:12:9\n    |\n LL |         0 .. 0 => { }\n    |         ^\n \n error[E0030]: lower range bound must be less than or equal to upper\n-  --> $DIR/match-range-fail-2.rs:17:9\n+  --> $DIR/match-range-fail-2.rs:19:9\n    |\n LL |         0xFFFF_FFFF_FFFF_FFFF ..= 1 => { }\n    |         ^^^^^^^^^^^^^^^^^^^^^ lower bound larger than upper bound\n \n-error: aborting due to 3 previous errors\n+error[E0030]: lower range bound must be less than or equal to upper\n+  --> $DIR/match-range-fail-2.rs:5:9\n+   |\n+LL |         6 ..= 1 => { }\n+   |         ^ lower bound larger than upper bound\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/match-range-fail-2.rs:12:9\n+   |\n+LL |         0 .. 0 => { }\n+   |         ^\n+\n+error[E0030]: lower range bound must be less than or equal to upper\n+  --> $DIR/match-range-fail-2.rs:19:9\n+   |\n+LL |         0xFFFF_FFFF_FFFF_FFFF ..= 1 => { }\n+   |         ^^^^^^^^^^^^^^^^^^^^^ lower bound larger than upper bound\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0030, E0579.\n For more information about an error, try `rustc --explain E0030`."}, {"sha": "1c5d0c6f8ab46fd5d9dce13c5af1a6819fc44b9e", "filename": "src/test/ui/parser/issue-62973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-62973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-62973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62973.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-trailing-newlines\n-// error-pattern: aborting due to 6 previous errors\n+// error-pattern: aborting due to 7 previous errors\n \n fn main() {}\n "}, {"sha": "95ee52d810ddcd85139b0870978257bea380b619", "filename": "src/test/ui/parser/issue-62973.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -9,6 +9,17 @@ LL |\n LL | \n    |  ^\n \n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-62973.rs:8:2\n+   |\n+LL | fn p() { match s { v, E { [) {) }\n+   |        -         - unclosed delimiter\n+   |        |\n+   |        unclosed delimiter\n+LL | \n+LL | \n+   |  ^\n+\n error: expected one of `,` or `}`, found `{`\n   --> $DIR/issue-62973.rs:6:25\n    |\n@@ -60,5 +71,5 @@ LL | fn p() { match s { v, E { [) {) }\n    |                              |\n    |                              unclosed delimiter\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "d5f5f1469f35a830acb1ba6b91f034f31e02b656", "filename": "src/test/ui/parser/issue-63135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: aborting due to 5 previous errors\n+// error-pattern: aborting due to 6 previous errors\n \n fn i(n{...,f #"}, {"sha": "462fdf11f40a9ccae0a28a243ebe43178aafc70f", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,6 +7,15 @@ LL | fn i(n{...,f #\n    |     | unclosed delimiter\n    |     unclosed delimiter\n \n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-63135.rs:3:16\n+   |\n+LL | fn i(n{...,f #\n+   |     - -        ^\n+   |     | |\n+   |     | unclosed delimiter\n+   |     unclosed delimiter\n+\n error: expected field pattern, found `...`\n   --> $DIR/issue-63135.rs:3:8\n    |\n@@ -34,5 +43,5 @@ error: expected one of `:` or `|`, found `)`\n LL | fn i(n{...,f #\n    |                ^ expected one of `:` or `|`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "c35236ce7934e96c3e26ce95f56fc436409f28df", "filename": "src/test/ui/parser/missing_right_paren.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,3 +1,3 @@\n // ignore-tidy-trailing-newlines\n-// error-pattern: aborting due to 2 previous errors\n+// error-pattern: aborting due to 3 previous errors\n fn main((\u063c\n\\ No newline at end of file"}, {"sha": "d67e7c88912a5ae2b9641eaf5019d5ebb9c7b593", "filename": "src/test/ui/parser/missing_right_paren.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,11 +7,20 @@ LL | fn main((\u063c\n    |        |unclosed delimiter\n    |        unclosed delimiter\n \n+error: this file contains an unclosed delimiter\n+  --> $DIR/missing_right_paren.rs:3:11\n+   |\n+LL | fn main((\u063c\n+   |        -- ^\n+   |        ||\n+   |        |unclosed delimiter\n+   |        unclosed delimiter\n+\n error: expected one of `:` or `|`, found `)`\n   --> $DIR/missing_right_paren.rs:3:11\n    |\n LL | fn main((\u063c\n    |           ^ expected one of `:` or `|`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "559925c282f9ae2ac3b98e4d243aa40544f44152", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -101,13 +101,15 @@ fn main() {\n         //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n         //~| ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n         //~| ERROR cannot move out of `b` in pattern guard\n+        //~| ERROR cannot move out of `b` in pattern guard\n         _ => {}\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n         //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n         //~| ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n         //~| ERROR cannot move out of `a` in pattern guard\n+        //~| ERROR cannot move out of `a` in pattern guard\n         _ => {}\n     }\n "}, {"sha": "b5c26a1fa039945c21545307010619bfa0cbf28c", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:114:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:116:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:121:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:126:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:128:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:133:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -359,16 +359,32 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n+error[E0507]: cannot move out of `b` in pattern guard\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:66\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n+   |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error[E0507]: cannot move out of `a` in pattern guard\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:66\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n+   |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:121:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -380,7 +396,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:121:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -392,7 +408,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:126:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:128:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -404,7 +420,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:126:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:128:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -415,7 +431,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n LL |     drop(a);\n    |          - immutable borrow later used here\n \n-error: aborting due to 43 previous errors\n+error: aborting due to 45 previous errors\n \n Some errors have detailed explanations: E0502, E0507, E0594.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "5b3db2e57c8360f91a628887e3fbada78d5c0511", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -18,7 +18,8 @@ enum_number!(Change {\n     Pos = 1,\n     Neg = -1,\n     Arith = 1 + 1, //~ ERROR arbitrary expressions aren't allowed in patterns\n-                   //~^ ERROR only char and numeric types are allowed in range patterns\n+                   //~| ERROR arbitrary expressions aren't allowed in patterns\n+                   //~| ERROR only char and numeric types are allowed in range patterns\n });\n \n fn main() {}"}, {"sha": "70dd1a9263f6f315689b9de73cfa499559f88eeb", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,12 @@ error: arbitrary expressions aren't allowed in patterns\n LL |     Arith = 1 + 1,\n    |             ^^^^^\n \n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/patkind-litrange-no-expr.rs:20:13\n+   |\n+LL |     Arith = 1 + 1,\n+   |             ^^^^^\n+\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/patkind-litrange-no-expr.rs:20:13\n    |\n@@ -13,6 +19,6 @@ LL |                 $( $value ..= 42 => Some($name::$variant), )* // PatKind::R\n LL |     Arith = 1 + 1,\n    |             ^^^^^ this is of type `_` but it should be `char` or numeric\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0029`."}, {"sha": "37c4ccda0f5e34ebfd4790c314cd56bf947fcab5", "filename": "src/test/ui/pattern/usefulness/match-range-fail-dominate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -34,11 +34,15 @@ fn main() {\n       //~^ WARNING floating-point types cannot be used in patterns\n       //~| WARNING floating-point types cannot be used in patterns\n       //~| WARNING floating-point types cannot be used in patterns\n+      //~| WARNING floating-point types cannot be used in patterns\n+      //~| WARNING this was previously accepted by the compiler\n       //~| WARNING this was previously accepted by the compiler\n       //~| WARNING this was previously accepted by the compiler\n       //~| WARNING this was previously accepted by the compiler\n       0.02f64 => {} //~ ERROR unreachable pattern\n       //~^ WARNING floating-point types cannot be used in patterns\n+      //~| WARNING floating-point types cannot be used in patterns\n+      //~| WARNING this was previously accepted by the compiler\n       //~| WARNING this was previously accepted by the compiler\n       _ => {}\n     };"}, {"sha": "8412a113664c8e0959e4d765ab53de8c93ec61e3", "filename": "src/test/ui/pattern/usefulness/match-range-fail-dominate.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -48,7 +48,7 @@ LL |       0.01f64 ..= 6.5f64 => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:40:7\n+  --> $DIR/match-range-fail-dominate.rs:42:7\n    |\n LL |       0.02f64 => {}\n    |       ^^^^^^^\n@@ -57,7 +57,7 @@ LL |       0.02f64 => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:40:7\n+  --> $DIR/match-range-fail-dominate.rs:42:7\n    |\n LL |       0.02f64 => {}\n    |       ^^^^^^^\n@@ -71,5 +71,23 @@ LL |       0.01f64 ..= 6.5f64 => {}\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/match-range-fail-dominate.rs:33:19\n+   |\n+LL |       0.01f64 ..= 6.5f64 => {}\n+   |                   ^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/match-range-fail-dominate.rs:42:7\n+   |\n+LL |       0.02f64 => {}\n+   |       ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n error: aborting due to 5 previous errors\n "}, {"sha": "fcf7b19572f1ff509b7897979a2dae2b10d1c70c", "filename": "src/test/ui/privacy/privacy1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -131,6 +131,7 @@ mod foo {\n     fn test2() {\n         use bar::baz::{foo, bar};\n         //~^ ERROR: module `baz` is private\n+        //~| ERROR: module `baz` is private\n \n         foo();\n         bar();"}, {"sha": "29f53cd0e35450e071e90dcd76af26f9ae4bc3ca", "filename": "src/test/ui/privacy/privacy1.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,13 +5,19 @@ LL |         use bar::baz::{foo, bar};\n    |                  ^^^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:140:18\n+  --> $DIR/privacy1.rs:132:18\n+   |\n+LL |         use bar::baz::{foo, bar};\n+   |                  ^^^\n+\n+error[E0603]: module `baz` is private\n+  --> $DIR/privacy1.rs:141:18\n    |\n LL |         use bar::baz;\n    |                  ^^^\n \n error[E0603]: module `i` is private\n-  --> $DIR/privacy1.rs:164:20\n+  --> $DIR/privacy1.rs:165:20\n    |\n LL |     use self::foo::i::A;\n    |                    ^\n@@ -65,7 +71,7 @@ LL |         ::bar::baz::bar();\n    |                ^^^\n \n error[E0603]: trait `B` is private\n-  --> $DIR/privacy1.rs:156:17\n+  --> $DIR/privacy1.rs:157:17\n    |\n LL |     impl ::bar::B for f32 { fn foo() -> f32 { 1.0 } }\n    |                 ^\n@@ -100,7 +106,7 @@ error[E0624]: method `bar2` is private\n LL |         ::bar::baz::A.bar2();\n    |                       ^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 18 previous errors\n \n Some errors have detailed explanations: E0603, E0624.\n For more information about an error, try `rustc --explain E0603`."}, {"sha": "ad1052ada6084971e12f623b51cbe227e3eb3d54", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -17,6 +17,8 @@ mod m {\n         //~^ WARN private trait `m::PrivTr` in public interface\n         //~| WARN this was previously accepted\n         //~| WARN private type `m::Priv` in public interface\n+        //~| WARN private type `m::Priv` in public interface\n+        //~| WARN this was previously accepted\n         //~| WARN this was previously accepted\n         type Alias1: PrivTr;\n         type Alias2: PubTrAux1<Priv> = u8;\n@@ -34,6 +36,7 @@ mod m {\n \n         type Exist = impl PrivTr;\n         //~^ ERROR private trait `m::PrivTr` in public interface\n+        //~| ERROR private trait `m::PrivTr` in public interface\n         fn infer_exist() -> Self::Exist { Priv }\n     }\n }"}, {"sha": "3cc551cdeded63c9e6518385d41d236e64215685", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,8 +29,23 @@ LL | |     }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n+warning: private type `m::Priv` in public interface (error E0446)\n+  --> $DIR/private-in-public-assoc-ty.rs:16:5\n+   |\n+LL | /     pub trait PubTr {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         fn infer_exist() -> Self::Exist;\n+LL | |     }\n+   | |_____^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:25:9\n+  --> $DIR/private-in-public-assoc-ty.rs:27:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -39,7 +54,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:32:9\n+  --> $DIR/private-in-public-assoc-ty.rs:34:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -48,15 +63,24 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:35:9\n+  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+   |\n+LL |     trait PrivTr {}\n+   |     - `m::PrivTr` declared as private\n+...\n+LL |         type Exist = impl PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+\n+error[E0445]: private trait `m::PrivTr` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:37:9\n    |\n LL |     trait PrivTr {}\n    |     - `m::PrivTr` declared as private\n ...\n LL |         type Exist = impl PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0445, E0446.\n For more information about an error, try `rustc --explain E0445`."}, {"sha": "f1934f62fd88afcce777b09b67021168de6acc5b", "filename": "src/test/ui/proc-macro/issue-50493.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,6 +4,7 @@\n extern crate issue_50493;\n \n #[derive(Derive)] //~ ERROR field `field` of struct `Restricted` is private\n+                  //~| ERROR field `field` of struct `Restricted` is private\n struct Restricted {\n     pub(in restricted) field: usize, //~ visibilities can only be restricted to ancestor modules\n }"}, {"sha": "56c7800102176eef3ac768ed524552d3f48336f5", "filename": "src/test/ui/proc-macro/issue-50493.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,5 @@\n error[E0742]: visibilities can only be restricted to ancestor modules\n-  --> $DIR/issue-50493.rs:8:12\n+  --> $DIR/issue-50493.rs:9:12\n    |\n LL |     pub(in restricted) field: usize,\n    |            ^^^^^^^^^^\n@@ -10,7 +10,13 @@ error[E0616]: field `field` of struct `Restricted` is private\n LL | #[derive(Derive)]\n    |          ^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0616]: field `field` of struct `Restricted` is private\n+  --> $DIR/issue-50493.rs:6:10\n+   |\n+LL | #[derive(Derive)]\n+   |          ^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0616, E0742.\n For more information about an error, try `rustc --explain E0616`."}, {"sha": "470b22b48749d8b5b090343ef663fa9ef3cfa530", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -46,6 +46,7 @@ fn check_attr2() {}\n fn check_attr3() {}\n \n #[derive(my_macro)] //~ ERROR cannot find derive macro `my_macro` in this scope\n+                    //~| ERROR cannot find derive macro `my_macro` in this scope\n #[derive(crate::my_macro)] //~ ERROR can't use a procedural macro from the same crate that defines\n                            //~| ERROR expected derive macro, found macro `crate::my_macro`\n struct CheckDerive1;"}, {"sha": "a617319faea80c906b28e9b0554b2732c4f271f8", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -47,19 +47,19 @@ LL | #[MyTrait]\n    |   ^^^^^^^ not an attribute\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:52:10\n+  --> $DIR/macro-namespace-reserved-2.rs:53:10\n    |\n LL | #[derive(my_macro_attr)]\n    |          ^^^^^^^^^^^^^\n \n error: expected derive macro, found attribute macro `my_macro_attr`\n-  --> $DIR/macro-namespace-reserved-2.rs:52:10\n+  --> $DIR/macro-namespace-reserved-2.rs:53:10\n    |\n LL | #[derive(my_macro_attr)]\n    |          ^^^^^^^^^^^^^ not a derive macro\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:55:10\n+  --> $DIR/macro-namespace-reserved-2.rs:56:10\n    |\n LL | #[derive(MyTrait)]\n    |          ^^^^^^^\n@@ -77,13 +77,13 @@ LL | #[crate::my_macro]\n    |   ^^^^^^^^^^^^^^^ not an attribute\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:49:10\n+  --> $DIR/macro-namespace-reserved-2.rs:50:10\n    |\n LL | #[derive(crate::my_macro)]\n    |          ^^^^^^^^^^^^^^^\n \n error: expected derive macro, found macro `crate::my_macro`\n-  --> $DIR/macro-namespace-reserved-2.rs:49:10\n+  --> $DIR/macro-namespace-reserved-2.rs:50:10\n    |\n LL | #[derive(crate::my_macro)]\n    |          ^^^^^^^^^^^^^^^ not a derive macro\n@@ -112,5 +112,11 @@ error: cannot find derive macro `my_macro` in this scope\n LL | #[derive(my_macro)]\n    |          ^^^^^^^^\n \n-error: aborting due to 19 previous errors\n+error: cannot find derive macro `my_macro` in this scope\n+  --> $DIR/macro-namespace-reserved-2.rs:48:10\n+   |\n+LL | #[derive(my_macro)]\n+   |          ^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n "}, {"sha": "ad8a5bbb0f9ffc91be552f7726d62dfc029f07f2", "filename": "src/test/ui/proc-macro/resolve-error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -21,6 +21,7 @@ macro_rules! attr_proc_mac {\n \n #[derive(FooWithLongNan)]\n //~^ ERROR cannot find\n+//~| ERROR cannot find\n struct Foo;\n \n // Interpreted as an unstable custom attribute\n@@ -33,14 +34,17 @@ struct Asdf;\n \n #[derive(Dlone)]\n //~^ ERROR cannot find\n+//~| ERROR cannot find\n struct A;\n \n #[derive(Dlona)]\n //~^ ERROR cannot find\n+//~| ERROR cannot find\n struct B;\n \n #[derive(attr_proc_macra)]\n //~^ ERROR cannot find\n+//~| ERROR cannot find\n struct C;\n \n fn main() {"}, {"sha": "f7e00ed77d9b02fe2be08e3fb44043b4320fce73", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,17 +1,17 @@\n error: cannot find macro `bang_proc_macrp` in this scope\n-  --> $DIR/resolve-error.rs:56:5\n+  --> $DIR/resolve-error.rs:60:5\n    |\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `bang_proc_macro`\n \n error: cannot find macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:53:5\n+  --> $DIR/resolve-error.rs:57:5\n    |\n LL |     Dlona!();\n    |     ^^^^^\n \n error: cannot find macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:50:5\n+  --> $DIR/resolve-error.rs:54:5\n    |\n LL | / macro_rules! attr_proc_mac {\n LL | |     () => {}\n@@ -22,7 +22,7 @@ LL |       attr_proc_macra!();\n    |       ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `attr_proc_mac`\n \n error: cannot find macro `FooWithLongNama` in this scope\n-  --> $DIR/resolve-error.rs:47:5\n+  --> $DIR/resolve-error.rs:51:5\n    |\n LL | / macro_rules! FooWithLongNam {\n LL | |     () => {}\n@@ -33,31 +33,49 @@ LL |       FooWithLongNama!();\n    |       ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `FooWithLongNam`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:42:10\n+  --> $DIR/resolve-error.rs:45:10\n+   |\n+LL | #[derive(attr_proc_macra)]\n+   |          ^^^^^^^^^^^^^^^\n+\n+error: cannot find derive macro `attr_proc_macra` in this scope\n+  --> $DIR/resolve-error.rs:45:10\n    |\n LL | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:38:10\n+  --> $DIR/resolve-error.rs:40:10\n+   |\n+LL | #[derive(Dlona)]\n+   |          ^^^^^ help: a derive macro with a similar name exists: `Clona`\n+\n+error: cannot find derive macro `Dlona` in this scope\n+  --> $DIR/resolve-error.rs:40:10\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clona`\n \n error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:34:10\n+  --> $DIR/resolve-error.rs:35:10\n+   |\n+LL | #[derive(Dlone)]\n+   |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n+\n+error: cannot find derive macro `Dlone` in this scope\n+  --> $DIR/resolve-error.rs:35:10\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n \n error: cannot find attribute `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:31:3\n+  --> $DIR/resolve-error.rs:32:3\n    |\n LL | #[FooWithLongNan]\n    |   ^^^^^^^^^^^^^^\n \n error: cannot find attribute `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:27:3\n+  --> $DIR/resolve-error.rs:28:3\n    |\n LL | #[attr_proc_macra]\n    |   ^^^^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `attr_proc_macro`\n@@ -68,5 +86,11 @@ error: cannot find derive macro `FooWithLongNan` in this scope\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`\n \n-error: aborting due to 10 previous errors\n+error: cannot find derive macro `FooWithLongNan` in this scope\n+  --> $DIR/resolve-error.rs:22:10\n+   |\n+LL | #[derive(FooWithLongNan)]\n+   |          ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "4f57c32e913e1fa2f4e5b317c6613f2404ee170d", "filename": "src/test/ui/range/range_traits-1.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,21 +4,45 @@ use std::ops::*;\n struct AllTheRanges {\n     a: Range<usize>,\n     //~^ ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n     //~| ERROR Ord\n     b: RangeTo<usize>,\n     //~^ ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n     //~| ERROR Ord\n     c: RangeFrom<usize>,\n     //~^ ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n     //~| ERROR Ord\n     d: RangeFull,\n     //~^ ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n     //~| ERROR Ord\n     e: RangeInclusive<usize>,\n     //~^ ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n     //~| ERROR Ord\n     f: RangeToInclusive<usize>,\n     //~^ ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n+    //~| ERROR can't compare\n     //~| ERROR Ord\n }\n "}, {"sha": "f60ec23bdb0daab0eadc95e84205c5e67e611056", "filename": "src/test/ui/range/range_traits-1.stderr", "status": "modified", "additions": 227, "deletions": 11, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,7 +8,7 @@ LL |     a: Range<usize>,\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n-  --> $DIR/range_traits-1.rs:8:5\n+  --> $DIR/range_traits-1.rs:12:5\n    |\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n@@ -17,7 +17,7 @@ LL |     b: RangeTo<usize>,\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n-  --> $DIR/range_traits-1.rs:11:5\n+  --> $DIR/range_traits-1.rs:19:5\n    |\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n@@ -26,7 +26,7 @@ LL |     c: RangeFrom<usize>,\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n-  --> $DIR/range_traits-1.rs:14:5\n+  --> $DIR/range_traits-1.rs:26:5\n    |\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n@@ -35,7 +35,7 @@ LL |     d: RangeFull,\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:17:5\n+  --> $DIR/range_traits-1.rs:33:5\n    |\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n@@ -44,7 +44,223 @@ LL |     e: RangeInclusive<usize>,\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:20:5\n+  --> $DIR/range_traits-1.rs:40:5\n+   |\n+LL |     f: RangeToInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n+  --> $DIR/range_traits-1.rs:5:5\n+   |\n+LL |     a: Range<usize>,\n+   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n+  --> $DIR/range_traits-1.rs:12:5\n+   |\n+LL |     b: RangeTo<usize>,\n+   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n+  --> $DIR/range_traits-1.rs:19:5\n+   |\n+LL |     c: RangeFrom<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n+  --> $DIR/range_traits-1.rs:26:5\n+   |\n+LL |     d: RangeFull,\n+   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:33:5\n+   |\n+LL |     e: RangeInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:40:5\n+   |\n+LL |     f: RangeToInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n+  --> $DIR/range_traits-1.rs:5:5\n+   |\n+LL |     a: Range<usize>,\n+   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n+  --> $DIR/range_traits-1.rs:12:5\n+   |\n+LL |     b: RangeTo<usize>,\n+   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n+  --> $DIR/range_traits-1.rs:19:5\n+   |\n+LL |     c: RangeFrom<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n+  --> $DIR/range_traits-1.rs:26:5\n+   |\n+LL |     d: RangeFull,\n+   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:33:5\n+   |\n+LL |     e: RangeInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:40:5\n+   |\n+LL |     f: RangeToInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n+  --> $DIR/range_traits-1.rs:5:5\n+   |\n+LL |     a: Range<usize>,\n+   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n+  --> $DIR/range_traits-1.rs:12:5\n+   |\n+LL |     b: RangeTo<usize>,\n+   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n+  --> $DIR/range_traits-1.rs:19:5\n+   |\n+LL |     c: RangeFrom<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n+  --> $DIR/range_traits-1.rs:26:5\n+   |\n+LL |     d: RangeFull,\n+   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:33:5\n+   |\n+LL |     e: RangeInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:40:5\n+   |\n+LL |     f: RangeToInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n+  --> $DIR/range_traits-1.rs:5:5\n+   |\n+LL |     a: Range<usize>,\n+   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n+  --> $DIR/range_traits-1.rs:12:5\n+   |\n+LL |     b: RangeTo<usize>,\n+   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n+  --> $DIR/range_traits-1.rs:19:5\n+   |\n+LL |     c: RangeFrom<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n+  --> $DIR/range_traits-1.rs:26:5\n+   |\n+LL |     d: RangeFull,\n+   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:33:5\n+   |\n+LL |     e: RangeInclusive<usize>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n+   |\n+   = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n+   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+\n+error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n+  --> $DIR/range_traits-1.rs:40:5\n    |\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n@@ -61,45 +277,45 @@ LL |     a: Range<usize>,\n    = note: required by `std::cmp::Ord::cmp`\n \n error[E0277]: the trait bound `std::ops::RangeTo<usize>: std::cmp::Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:8:5\n+  --> $DIR/range_traits-1.rs:12:5\n    |\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeTo<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n \n error[E0277]: the trait bound `std::ops::RangeFrom<usize>: std::cmp::Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:11:5\n+  --> $DIR/range_traits-1.rs:19:5\n    |\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeFrom<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n \n error[E0277]: the trait bound `std::ops::RangeFull: std::cmp::Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:14:5\n+  --> $DIR/range_traits-1.rs:26:5\n    |\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeFull`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n \n error[E0277]: the trait bound `std::ops::RangeInclusive<usize>: std::cmp::Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:17:5\n+  --> $DIR/range_traits-1.rs:33:5\n    |\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeInclusive<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n \n error[E0277]: the trait bound `std::ops::RangeToInclusive<usize>: std::cmp::Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:20:5\n+  --> $DIR/range_traits-1.rs:40:5\n    |\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeToInclusive<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 36 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "2921a2bb398c39ea189173b7b07e9ee0a4e944d3", "filename": "src/test/ui/regions/regions-close-object-into-object-5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -21,6 +21,7 @@ fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n         //~| ERROR the parameter type `T` may not live long enough\n         //~| ERROR the parameter type `T` may not live long enough\n         //~| ERROR the parameter type `T` may not live long enough\n+        //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "7c530cec7c31af24f9c70d2b7e798eb69e431c69", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -88,6 +88,21 @@ note: ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n LL |     box B(&*v) as Box<X>\n    |           ^^^\n \n-error: aborting due to 6 previous errors\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-close-object-into-object-5.rs:17:11\n+   |\n+LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+LL |     // oh dear!\n+LL |     box B(&*v) as Box<X>\n+   |           ^^^\n+   |\n+note: ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n+  --> $DIR/regions-close-object-into-object-5.rs:17:11\n+   |\n+LL |     box B(&*v) as Box<X>\n+   |           ^^^\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "e912805d855d2b57a370a6f6bfda5d6c0599c728", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -20,6 +20,8 @@ fn foo<'a: 'b, 'b>()\n \n // Here we get an error: we need `'a: 'b`.\n fn bar<'a, 'b>() //~ ERROR cannot infer\n+                 //~| ERROR cannot infer\n+                 //~| ERROR cannot infer\n     where <() as Project<'a, 'b>>::Item : Eq\n {\n }"}, {"sha": "cc2245f81ace5cef8c1d57e6533fa70a1c4cec17", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,6 +2,8 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n    |\n LL | / fn bar<'a, 'b>()\n+LL | |\n+LL | |\n LL | |     where <() as Project<'a, 'b>>::Item : Eq\n LL | | {\n LL | | }\n@@ -21,13 +23,83 @@ note: ...so that the types are compatible\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n    |\n LL | / fn bar<'a, 'b>()\n+LL | |\n+LL | |\n LL | |     where <() as Project<'a, 'b>>::Item : Eq\n LL | | {\n LL | | }\n    | |_^\n    = note: expected  `Project<'a, 'b>`\n               found  `Project<'_, '_>`\n \n-error: aborting due to previous error\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+   |\n+LL | / fn bar<'a, 'b>()\n+LL | |\n+LL | |\n+LL | |     where <() as Project<'a, 'b>>::Item : Eq\n+LL | | {\n+LL | | }\n+   | |_^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n+   |\n+LL | fn bar<'a, 'b>()\n+   |        ^^\n+note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the function body at 22:12...\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:12\n+   |\n+LL | fn bar<'a, 'b>()\n+   |            ^^\n+note: ...so that the types are compatible\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+   |\n+LL | / fn bar<'a, 'b>()\n+LL | |\n+LL | |\n+LL | |     where <() as Project<'a, 'b>>::Item : Eq\n+LL | | {\n+LL | | }\n+   | |_^\n+   = note: expected  `Project<'a, 'b>`\n+              found  `Project<'_, '_>`\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+   |\n+LL | / fn bar<'a, 'b>()\n+LL | |\n+LL | |\n+LL | |     where <() as Project<'a, 'b>>::Item : Eq\n+LL | | {\n+LL | | }\n+   | |_^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n+   |\n+LL | fn bar<'a, 'b>()\n+   |        ^^\n+note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the function body at 22:12...\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:12\n+   |\n+LL | fn bar<'a, 'b>()\n+   |            ^^\n+note: ...so that the types are compatible\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+   |\n+LL | / fn bar<'a, 'b>()\n+LL | |\n+LL | |\n+LL | |     where <() as Project<'a, 'b>>::Item : Eq\n+LL | | {\n+LL | | }\n+   | |_^\n+   = note: expected  `Project<'a, 'b>`\n+              found  `Project<'_, '_>`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0495`."}, {"sha": "59ca22e9728c6a857c6e676587b9b19bba1200ec", "filename": "src/test/ui/repr/repr-align-assign.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.fixed?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -3,9 +3,11 @@\n #![allow(dead_code)]\n \n #[repr(align(8))] //~ ERROR incorrect `repr(align)` attribute format\n+                 //~| ERROR incorrect `repr(align)` attribute format\n struct A(u64);\n \n #[repr(align(8))] //~ ERROR incorrect `repr(align)` attribute format\n+                   //~| ERROR incorrect `repr(align)` attribute format\n struct B(u64);\n \n fn main() {}"}, {"sha": "6b7799297e89ec20bbb47ea78d2020afc8e029df", "filename": "src/test/ui/repr/repr-align-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -3,9 +3,11 @@\n #![allow(dead_code)]\n \n #[repr(align=8)] //~ ERROR incorrect `repr(align)` attribute format\n+                 //~| ERROR incorrect `repr(align)` attribute format\n struct A(u64);\n \n #[repr(align=\"8\")] //~ ERROR incorrect `repr(align)` attribute format\n+                   //~| ERROR incorrect `repr(align)` attribute format\n struct B(u64);\n \n fn main() {}"}, {"sha": "192312d165bc856477668e2f1c286c9d25793fdb", "filename": "src/test/ui/repr/repr-align-assign.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-align-assign.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,10 +5,22 @@ LL | #[repr(align=8)]\n    |        ^^^^^^^ help: use parentheses instead: `align(8)`\n \n error[E0693]: incorrect `repr(align)` attribute format\n-  --> $DIR/repr-align-assign.rs:8:8\n+  --> $DIR/repr-align-assign.rs:9:8\n    |\n LL | #[repr(align=\"8\")]\n    |        ^^^^^^^^^ help: use parentheses instead: `align(8)`\n \n-error: aborting due to 2 previous errors\n+error[E0693]: incorrect `repr(align)` attribute format\n+  --> $DIR/repr-align-assign.rs:5:8\n+   |\n+LL | #[repr(align=8)]\n+   |        ^^^^^^^ help: use parentheses instead: `align(8)`\n+\n+error[E0693]: incorrect `repr(align)` attribute format\n+  --> $DIR/repr-align-assign.rs:9:8\n+   |\n+LL | #[repr(align=\"8\")]\n+   |        ^^^^^^^^^ help: use parentheses instead: `align(8)`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "58ecf9a518327a0d056e2682a1d80b885a2b9b02", "filename": "src/test/ui/repr/repr-align.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-align.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,24 +1,30 @@\n #![allow(dead_code)]\n \n #[repr(align(16.0))] //~ ERROR: invalid `repr(align)` attribute: not an unsuffixed integer\n+                     //~| ERROR: invalid `repr(align)` attribute: not an unsuffixed integer\n struct S0(i32);\n \n #[repr(align(15))] //~ ERROR: invalid `repr(align)` attribute: not a power of two\n+                   //~| ERROR: invalid `repr(align)` attribute: not a power of two\n struct S1(i32);\n \n #[repr(align(4294967296))] //~ ERROR: invalid `repr(align)` attribute: larger than 2^29\n+                           //~| ERROR: invalid `repr(align)` attribute: larger than 2^29\n struct S2(i32);\n \n #[repr(align(536870912))] // ok: this is the largest accepted alignment\n struct S3(i32);\n \n #[repr(align(16.0))] //~ ERROR: invalid `repr(align)` attribute: not an unsuffixed integer\n+                     //~| ERROR: invalid `repr(align)` attribute: not an unsuffixed integer\n enum E0 { A, B }\n \n #[repr(align(15))] //~ ERROR: invalid `repr(align)` attribute: not a power of two\n+                   //~| ERROR: invalid `repr(align)` attribute: not a power of two\n enum E1 { A, B }\n \n #[repr(align(4294967296))] //~ ERROR: invalid `repr(align)` attribute: larger than 2^29\n+                           //~| ERROR: invalid `repr(align)` attribute: larger than 2^29\n enum E2 { A, B }\n \n #[repr(align(536870912))] // ok: this is the largest accepted alignment"}, {"sha": "900a811bb8ad7a8a725a78c6eae101e68b181274", "filename": "src/test/ui/repr/repr-align.stderr", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frepr%2Frepr-align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-align.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,35 +5,71 @@ LL | #[repr(align(16.0))]\n    |        ^^^^^^^^^^^\n \n error[E0589]: invalid `repr(align)` attribute: not a power of two\n-  --> $DIR/repr-align.rs:6:8\n+  --> $DIR/repr-align.rs:7:8\n    |\n LL | #[repr(align(15))]\n    |        ^^^^^^^^^\n \n error[E0589]: invalid `repr(align)` attribute: larger than 2^29\n-  --> $DIR/repr-align.rs:9:8\n+  --> $DIR/repr-align.rs:11:8\n    |\n LL | #[repr(align(4294967296))]\n    |        ^^^^^^^^^^^^^^^^^\n \n error[E0589]: invalid `repr(align)` attribute: not an unsuffixed integer\n-  --> $DIR/repr-align.rs:15:8\n+  --> $DIR/repr-align.rs:18:8\n+   |\n+LL | #[repr(align(16.0))]\n+   |        ^^^^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: not a power of two\n+  --> $DIR/repr-align.rs:22:8\n+   |\n+LL | #[repr(align(15))]\n+   |        ^^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: larger than 2^29\n+  --> $DIR/repr-align.rs:26:8\n+   |\n+LL | #[repr(align(4294967296))]\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: not an unsuffixed integer\n+  --> $DIR/repr-align.rs:3:8\n    |\n LL | #[repr(align(16.0))]\n    |        ^^^^^^^^^^^\n \n error[E0589]: invalid `repr(align)` attribute: not a power of two\n+  --> $DIR/repr-align.rs:7:8\n+   |\n+LL | #[repr(align(15))]\n+   |        ^^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: larger than 2^29\n+  --> $DIR/repr-align.rs:11:8\n+   |\n+LL | #[repr(align(4294967296))]\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: not an unsuffixed integer\n   --> $DIR/repr-align.rs:18:8\n    |\n+LL | #[repr(align(16.0))]\n+   |        ^^^^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: not a power of two\n+  --> $DIR/repr-align.rs:22:8\n+   |\n LL | #[repr(align(15))]\n    |        ^^^^^^^^^\n \n error[E0589]: invalid `repr(align)` attribute: larger than 2^29\n-  --> $DIR/repr-align.rs:21:8\n+  --> $DIR/repr-align.rs:26:8\n    |\n LL | #[repr(align(4294967296))]\n    |        ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0589`."}, {"sha": "f5cb1860d4786b6167caae66b3d68bd7ee94015c", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -123,9 +123,11 @@ fn _macros() {\n     use_expr!((let 0 = 1 && 0 == 0));\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n     #[cfg(FALSE)] (let 0 = 1);\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n     use_expr!(let 0 = 1);"}, {"sha": "c14a45af40bb17192c2a67f7e8b3e6ab7535df8c", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:131:15\n+  --> $DIR/feature-gate.rs:133:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -260,7 +260,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:129:20\n+  --> $DIR/feature-gate.rs:131:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n@@ -287,7 +287,7 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:126:16\n+  --> $DIR/feature-gate.rs:127:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n@@ -557,14 +557,32 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:126:16\n+  --> $DIR/feature-gate.rs:123:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:127:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:127:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 65 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e9dcb4f85f60bfa43797e09e2c49a40501f468bd", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -21,6 +21,7 @@ fn main() {\n     match WRAP_DIRECT_INLINE {\n         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { println!(\"WRAP_DIRECT_INLINE did not match itself\"); }\n     }\n }"}, {"sha": "9c7d1f3a18fecdd5b7f10747c0993cd91d0d5b91", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n LL |         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-direct-struct-embedded.rs:22:9\n+   |\n+LL |         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "ab1cb3babaa25bd41f86c923879d22ddb35e29ea", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -21,6 +21,7 @@ fn main() {\n     match WRAP_DIRECT_PARAM {\n         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { println!(\"WRAP_DIRECT_PARAM did not match itself\"); }\n     }\n }"}, {"sha": "6f49a8a0c9d212b036e7dbaa3eaefd657e8d6c73", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n LL |         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cant-hide-behind-direct-struct-param.rs:22:9\n+   |\n+LL |         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "59141eac3e896037a62afb2bfb0b37e142bd9a41", "filename": "src/test/ui/rfc1445/match-forbidden-without-eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { }\n     }\n "}, {"sha": "b9476e399f3e7beb7c6e6e622fb17ee180b123bf", "filename": "src/test/ui/rfc1445/match-forbidden-without-eq.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,7 +5,7 @@ LL |         FOO => { }\n    |         ^^^\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-forbidden-without-eq.rs:20:9\n+  --> $DIR/match-forbidden-without-eq.rs:21:9\n    |\n LL |         f32::INFINITY => { }\n    |         ^^^^^^^^^^^^^\n@@ -14,14 +14,20 @@ LL |         f32::INFINITY => { }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match-forbidden-without-eq.rs:13:9\n+   |\n+LL |         FOO => { }\n+   |         ^^^\n+\n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-forbidden-without-eq.rs:20:9\n+  --> $DIR/match-forbidden-without-eq.rs:21:9\n    |\n LL |         f32::INFINITY => { }\n    |         ^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "9ef8a68da80b9223c3ed90619e9155e51627e026", "filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -15,5 +15,6 @@ fn main() {\n     match [B(1)] {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n     }\n }"}, {"sha": "7e354bf9ade5aaed886f73c6249a9da3a69a7d83", "filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: to use a constant of type `B` in a pattern, `B` must be annotated with `#\n LL |         FOO => { }\n    |         ^^^\n \n-error: aborting due to previous error\n+error: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match-nonempty-array-forbidden-without-eq.rs:16:9\n+   |\n+LL |         FOO => { }\n+   |         ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "9530a1ffec453ff3e5bc550896e40fb460b0dbb2", "filename": "src/test/ui/rfc1445/match-requires-both-partialeq-and-eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -16,6 +16,7 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { }\n     }\n }"}, {"sha": "7ef082852ba8d159e7bee051a54a7b7fa3c4f5b1", "filename": "src/test/ui/rfc1445/match-requires-both-partialeq-and-eq.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n LL |         FOO => { }\n    |         ^^^\n \n-error: aborting due to previous error\n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match-requires-both-partialeq-and-eq.rs:17:9\n+   |\n+LL |         FOO => { }\n+   |         ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "0ca7fa37a3096b547b45315107ea3de653b3c8d6", "filename": "src/test/ui/rust-2018/uniform-paths/cross-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fcross-crate.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -6,6 +6,7 @@ use cross_crate::*;\n \n #[built_in_attr] //~ ERROR cannot use a built-in attribute through an import\n #[tool_mod::skip] //~ ERROR cannot use a tool module through an import\n+                  //~| ERROR cannot use a tool module through an import\n fn main() {\n     let _: built_in_type; // OK\n }"}, {"sha": "45f77a0c9fe6a1972a84fa656a51eb15e9cbde8b", "filename": "src/test/ui/rust-2018/uniform-paths/cross-crate.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fcross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fcross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fcross-crate.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -22,5 +22,17 @@ note: the tool module imported here\n LL | use cross_crate::*;\n    |     ^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: cannot use a tool module through an import\n+  --> $DIR/cross-crate.rs:8:3\n+   |\n+LL | #[tool_mod::skip]\n+   |   ^^^^^^^^\n+   |\n+note: the tool module imported here\n+  --> $DIR/cross-crate.rs:5:5\n+   |\n+LL | use cross_crate::*;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "44da71de085be0d480dcab4591df10ab58230da6", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -15,5 +15,7 @@ mod tool_mod {\n #[imported_inline] //~ ERROR cannot use a built-in attribute through an import\n #[builtin::imported_inline] //~ ERROR cannot use a built-in attribute through an import\n #[imported_rustfmt::skip] //~ ERROR cannot use a tool module through an import\n+                          //~| ERROR cannot use a tool module through an import\n #[tool_mod::imported_rustfmt::skip] //~ ERROR cannot use a tool module through an import\n+                                    //~| ERROR cannot use a tool module through an import\n fn main() {}"}, {"sha": "908bb498586131373fedff79731e1a4ddc2bf843", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail-2.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -29,7 +29,7 @@ LL | use rustfmt as imported_rustfmt;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot use a tool module through an import\n-  --> $DIR/prelude-fail-2.rs:18:13\n+  --> $DIR/prelude-fail-2.rs:19:13\n    |\n LL | #[tool_mod::imported_rustfmt::skip]\n    |             ^^^^^^^^^^^^^^^^\n@@ -40,5 +40,29 @@ note: the tool module imported here\n LL |     pub use rustfmt as imported_rustfmt;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: cannot use a tool module through an import\n+  --> $DIR/prelude-fail-2.rs:17:3\n+   |\n+LL | #[imported_rustfmt::skip]\n+   |   ^^^^^^^^^^^^^^^^\n+   |\n+note: the tool module imported here\n+  --> $DIR/prelude-fail-2.rs:10:5\n+   |\n+LL | use rustfmt as imported_rustfmt;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot use a tool module through an import\n+  --> $DIR/prelude-fail-2.rs:19:13\n+   |\n+LL | #[tool_mod::imported_rustfmt::skip]\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+note: the tool module imported here\n+  --> $DIR/prelude-fail-2.rs:12:13\n+   |\n+LL |     pub use rustfmt as imported_rustfmt;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "89b8eba1e95e77b8b5cb841ba53b38abb90ff6bb", "filename": "src/test/ui/span/issue-43927-non-ADT-derive.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,6 +5,9 @@\n //~| ERROR cannot determine resolution for the derive macro `Debug`\n //~| ERROR cannot determine resolution for the derive macro `PartialEq`\n //~| ERROR cannot determine resolution for the derive macro `Eq`\n+//~| ERROR cannot determine resolution for the derive macro `Debug`\n+//~| ERROR cannot determine resolution for the derive macro `PartialEq`\n+//~| ERROR cannot determine resolution for the derive macro `Eq`\n struct DerivedOn;\n \n fn main() {}"}, {"sha": "b68681c52973a9159e7dc304abb4a22d2879767a", "filename": "src/test/ui/span/issue-43927-non-ADT-derive.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -28,5 +28,29 @@ LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: aborting due to 4 previous errors\n+error: cannot determine resolution for the derive macro `Eq`\n+  --> $DIR/issue-43927-non-ADT-derive.rs:3:29\n+   |\n+LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n+   |                             ^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: cannot determine resolution for the derive macro `PartialEq`\n+  --> $DIR/issue-43927-non-ADT-derive.rs:3:18\n+   |\n+LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n+   |                  ^^^^^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: cannot determine resolution for the derive macro `Debug`\n+  --> $DIR/issue-43927-non-ADT-derive.rs:3:11\n+   |\n+LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n+   |           ^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "c3a4eabad705021fa1f29554788035ae08b9cfbb", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,15 +1,27 @@\n #![feature(rustc_attrs)]\n \n #[rustc_dummy = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n+                        //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n+                     //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n+                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n+                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n+                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n+                        //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n+                     //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n+                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n+                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n+                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n+                        //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n+                        //~| ERROR: suffixed literals are not allowed in attributes\n fn main() {}"}, {"sha": "ee35b53abe1113da8ee68a4cb1533080735d3f58", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 107, "deletions": 11, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -7,92 +7,188 @@ LL | #[rustc_dummy = 1usize]\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:4:17\n+  --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n LL | #[rustc_dummy = 1u8]\n    |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:5:17\n+  --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n LL | #[rustc_dummy = 1u16]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:6:17\n+  --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n LL | #[rustc_dummy = 1u32]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:7:17\n+  --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n LL | #[rustc_dummy = 1u64]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:8:17\n+  --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n LL | #[rustc_dummy = 1isize]\n    |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:9:17\n+  --> $DIR/suffixed-literal-meta.rs:15:17\n    |\n LL | #[rustc_dummy = 1i8]\n    |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:10:17\n+  --> $DIR/suffixed-literal-meta.rs:17:17\n    |\n LL | #[rustc_dummy = 1i16]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:11:17\n+  --> $DIR/suffixed-literal-meta.rs:19:17\n    |\n LL | #[rustc_dummy = 1i32]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:12:17\n+  --> $DIR/suffixed-literal-meta.rs:21:17\n    |\n LL | #[rustc_dummy = 1i64]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:23:17\n+   |\n+LL | #[rustc_dummy = 1.0f32]\n+   |                 ^^^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:25:17\n+   |\n+LL | #[rustc_dummy = 1.0f64]\n+   |                 ^^^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:3:17\n+   |\n+LL | #[rustc_dummy = 1usize]\n+   |                 ^^^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:5:17\n+   |\n+LL | #[rustc_dummy = 1u8]\n+   |                 ^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:7:17\n+   |\n+LL | #[rustc_dummy = 1u16]\n+   |                 ^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:9:17\n+   |\n+LL | #[rustc_dummy = 1u32]\n+   |                 ^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:11:17\n+   |\n+LL | #[rustc_dummy = 1u64]\n+   |                 ^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n+LL | #[rustc_dummy = 1isize]\n+   |                 ^^^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:15:17\n+   |\n+LL | #[rustc_dummy = 1i8]\n+   |                 ^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:17:17\n+   |\n+LL | #[rustc_dummy = 1i16]\n+   |                 ^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:19:17\n+   |\n+LL | #[rustc_dummy = 1i32]\n+   |                 ^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:21:17\n+   |\n+LL | #[rustc_dummy = 1i64]\n+   |                 ^^^^\n+   |\n+   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+\n+error: suffixed literals are not allowed in attributes\n+  --> $DIR/suffixed-literal-meta.rs:23:17\n+   |\n LL | #[rustc_dummy = 1.0f32]\n    |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:14:17\n+  --> $DIR/suffixed-literal-meta.rs:25:17\n    |\n LL | #[rustc_dummy = 1.0f64]\n    |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "bf45ba2ed82279fd1dd3d8d1cdc0437b2bf96ac2", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -2,6 +2,7 @@ type A = rustfmt; //~ ERROR expected type, found tool module `rustfmt`\n type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::skip`\n \n #[derive(rustfmt)] //~ ERROR cannot find derive macro `rustfmt` in this scope\n+                   //~| ERROR cannot find derive macro `rustfmt` in this scope\n struct S;\n \n // Interpreted as an unstable custom attribute"}, {"sha": "71fd5f1d44a8d35586c86a8fa83121b6a36d2549", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-1.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,14 +4,20 @@ error: cannot find derive macro `rustfmt` in this scope\n LL | #[derive(rustfmt)]\n    |          ^^^^^^^\n \n+error: cannot find derive macro `rustfmt` in this scope\n+  --> $DIR/tool-attributes-misplaced-1.rs:4:10\n+   |\n+LL | #[derive(rustfmt)]\n+   |          ^^^^^^^\n+\n error: cannot find attribute `rustfmt` in this scope\n-  --> $DIR/tool-attributes-misplaced-1.rs:8:3\n+  --> $DIR/tool-attributes-misplaced-1.rs:9:3\n    |\n LL | #[rustfmt]\n    |   ^^^^^^^\n \n error: cannot find macro `rustfmt` in this scope\n-  --> $DIR/tool-attributes-misplaced-1.rs:14:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:15:5\n    |\n LL |     rustfmt!();\n    |     ^^^^^^^\n@@ -29,18 +35,18 @@ LL | type B = rustfmt::skip;\n    |          ^^^^^^^^^^^^^ not a type\n \n error[E0423]: expected value, found tool module `rustfmt`\n-  --> $DIR/tool-attributes-misplaced-1.rs:13:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:14:5\n    |\n LL |     rustfmt;\n    |     ^^^^^^^ not a value\n \n error[E0423]: expected value, found tool attribute `rustfmt::skip`\n-  --> $DIR/tool-attributes-misplaced-1.rs:16:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:17:5\n    |\n LL |     rustfmt::skip;\n    |     ^^^^^^^^^^^^^ not a value\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0423, E0573.\n For more information about an error, try `rustc --explain E0423`."}, {"sha": "9c8540eede7922b353d94145298126d29279d697", "filename": "src/test/ui/tool_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool_lints.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,3 +1,5 @@\n #[warn(foo::bar)]\n //~^ ERROR an unknown tool name found in scoped lint: `foo::bar`\n+//~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n+//~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n fn main() {}"}, {"sha": "86f87784eaf866133a151a45e40c64910c17d07e", "filename": "src/test/ui/tool_lints.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftool_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool_lints.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,17 @@ error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n LL | #[warn(foo::bar)]\n    |        ^^^\n \n-error: aborting due to previous error\n+error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+  --> $DIR/tool_lints.rs:1:8\n+   |\n+LL | #[warn(foo::bar)]\n+   |        ^^^\n+\n+error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+  --> $DIR/tool_lints.rs:1:8\n+   |\n+LL | #[warn(foo::bar)]\n+   |        ^^^\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "2b2a2c127e9859e6ef1712b7bbb9a6b88d672acb", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -9,6 +9,7 @@ macro_rules! define_struct {\n \n mod foo {\n     define_struct! { (foo) } //~ ERROR cannot find type `foo` in this scope\n+                             //~| ERROR cannot find type `foo` in this scope\n }\n \n fn main() {}"}, {"sha": "2f1ca2fe0c1e74c0db3e798c356e2b85db0970ef", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -15,6 +15,12 @@ error[E0412]: cannot find type `foo` in this scope\n LL |     define_struct! { (foo) }\n    |                       ^^^ not found in this scope\n \n-error: aborting due to 2 previous errors\n+error[E0412]: cannot find type `foo` in this scope\n+  --> $DIR/test2.rs:11:23\n+   |\n+LL |     define_struct! { (foo) }\n+   |                       ^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0412`."}, {"sha": "98d19426e7733b6c7e1d6f999f299468fd69d46f", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -9,6 +9,7 @@ macro_rules! define_struct {\n \n mod foo {\n     define_struct! { foo } //~ ERROR cannot find type `foo` in this scope\n+                           //~| ERROR cannot find type `foo` in this scope\n }\n \n fn main() {}"}, {"sha": "5d42fe6ef50b3884e1ec6229d30d7f73de7dda48", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -15,6 +15,12 @@ error[E0412]: cannot find type `foo` in this scope\n LL |     define_struct! { foo }\n    |                      ^^^ not found in this scope\n \n-error: aborting due to 2 previous errors\n+error[E0412]: cannot find type `foo` in this scope\n+  --> $DIR/test3.rs:11:22\n+   |\n+LL |     define_struct! { foo }\n+   |                      ^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0412`."}, {"sha": "cb2248cc6d18924f30e0b426022095f23af4933d", "filename": "src/test/ui/union/union-const-pat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funion%2Funion-const-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funion%2Funion-const-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-pat.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -8,6 +8,7 @@ const C: U = U { a: 10 };\n fn main() {\n     match C {\n         C => {} //~ ERROR cannot use unions in constant patterns\n+                //~| ERROR cannot use unions in constant patterns\n         _ => {}\n     }\n }"}, {"sha": "bec720401b9e1aa7260ca88f200f397270f5312d", "filename": "src/test/ui/union/union-const-pat.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funion%2Funion-const-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funion%2Funion-const-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-pat.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -4,5 +4,11 @@ error: cannot use unions in constant patterns\n LL |         C => {}\n    |         ^\n \n-error: aborting due to previous error\n+error: cannot use unions in constant patterns\n+  --> $DIR/union-const-pat.rs:10:9\n+   |\n+LL |         C => {}\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "182aec34b4781c5f9c06ab52c1572411f21d2839", "filename": "src/test/ui/unknown-lint-tool-name.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1,4 +1,8 @@\n #![deny(foo::bar)] //~ ERROR an unknown tool name found in scoped lint: `foo::bar`\n+                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n+                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n \n #[allow(foo::bar)] //~ ERROR an unknown tool name found in scoped lint: `foo::bar`\n+                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n+                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n fn main() {}"}, {"sha": "1940f61a47b68d71848474139c8de03769c59458", "filename": "src/test/ui/unknown-lint-tool-name.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funknown-lint-tool-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Funknown-lint-tool-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-lint-tool-name.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,10 +5,34 @@ LL | #![deny(foo::bar)]\n    |         ^^^\n \n error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n-  --> $DIR/unknown-lint-tool-name.rs:3:9\n+  --> $DIR/unknown-lint-tool-name.rs:5:9\n    |\n LL | #[allow(foo::bar)]\n    |         ^^^\n \n-error: aborting due to 2 previous errors\n+error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+  --> $DIR/unknown-lint-tool-name.rs:1:9\n+   |\n+LL | #![deny(foo::bar)]\n+   |         ^^^\n+\n+error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+  --> $DIR/unknown-lint-tool-name.rs:5:9\n+   |\n+LL | #[allow(foo::bar)]\n+   |         ^^^\n+\n+error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+  --> $DIR/unknown-lint-tool-name.rs:1:9\n+   |\n+LL | #![deny(foo::bar)]\n+   |         ^^^\n+\n+error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+  --> $DIR/unknown-lint-tool-name.rs:5:9\n+   |\n+LL | #[allow(foo::bar)]\n+   |         ^^^\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "27a4a653b49039a5ae0b1e9169644a0145ddeadc", "filename": "src/test/ui/use/use-super-global-path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,6 +5,7 @@ struct Z;\n \n mod foo {\n     use ::super::{S, Z}; //~ ERROR global paths cannot start with `super`\n+                         //~| ERROR global paths cannot start with `super`\n \n     pub fn g() {\n         use ::super::main; //~ ERROR global paths cannot start with `super`"}, {"sha": "7f98ac7cd0fefc117616cd6f1a65c26955b84a11", "filename": "src/test/ui/use/use-super-global-path.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -5,13 +5,19 @@ LL |     use ::super::{S, Z};\n    |           ^^^^^ global paths cannot start with `super`\n \n error[E0433]: failed to resolve: global paths cannot start with `super`\n-  --> $DIR/use-super-global-path.rs:10:15\n+  --> $DIR/use-super-global-path.rs:7:11\n+   |\n+LL |     use ::super::{S, Z};\n+   |           ^^^^^ global paths cannot start with `super`\n+\n+error[E0433]: failed to resolve: global paths cannot start with `super`\n+  --> $DIR/use-super-global-path.rs:11:15\n    |\n LL |         use ::super::main;\n    |               ^^^^^ global paths cannot start with `super`\n \n error[E0425]: cannot find function `main` in this scope\n-  --> $DIR/use-super-global-path.rs:11:9\n+  --> $DIR/use-super-global-path.rs:12:9\n    |\n LL |         main();\n    |         ^^^^ not found in this scope\n@@ -21,7 +27,7 @@ help: possible candidate is found in another module, you can import it into scop\n LL |     use main;\n    |\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0425, E0433.\n For more information about an error, try `rustc --explain E0425`."}, {"sha": "1912c9ef5baeb4265497c8de0dfea8022cea7174", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ae55bfac1a60fb3c9f45b3a223358ea598f56d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=68ae55bfac1a60fb3c9f45b3a223358ea598f56d", "patch": "@@ -1864,12 +1864,14 @@ impl<'test> TestCx<'test> {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n                 rustc.arg(\"-Zui-testing\");\n+                rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n             }\n             Ui => {\n                 if !self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\")) {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n                 rustc.arg(\"-Zui-testing\");\n+                rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n             }\n             MirOpt => {\n                 rustc.args(&["}]}