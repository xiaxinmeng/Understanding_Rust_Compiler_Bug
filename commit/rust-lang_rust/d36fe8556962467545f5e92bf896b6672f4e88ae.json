{"sha": "d36fe8556962467545f5e92bf896b6672f4e88ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNmZlODU1Njk2MjQ2NzU0NWY1ZTkyYmY4OTZiNjY3MmY0ZTg4YWU=", "commit": {"author": {"name": "boolean_coercion", "email": "booleancoercion@gmail.com", "date": "2021-02-12T22:33:08Z"}, "committer": {"name": "boolean_coercion", "email": "booleancoercion@gmail.com", "date": "2021-02-12T22:33:08Z"}, "message": "Made parens addition smarter and added tests with bless", "tree": {"sha": "761b9dfdb606fd8005f00e36f45497c323e4abc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/761b9dfdb606fd8005f00e36f45497c323e4abc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d36fe8556962467545f5e92bf896b6672f4e88ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d36fe8556962467545f5e92bf896b6672f4e88ae", "html_url": "https://github.com/rust-lang/rust/commit/d36fe8556962467545f5e92bf896b6672f4e88ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d36fe8556962467545f5e92bf896b6672f4e88ae/comments", "author": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642efabfbbba6577a3698a305bac8ce0c693e67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/642efabfbbba6577a3698a305bac8ce0c693e67f", "html_url": "https://github.com/rust-lang/rust/commit/642efabfbbba6577a3698a305bac8ce0c693e67f"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "993b85ed998934a3cc2a8f679a3a0d8ecce1b88c", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d36fe8556962467545f5e92bf896b6672f4e88ae/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36fe8556962467545f5e92bf896b6672f4e88ae/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=d36fe8556962467545f5e92bf896b6672f4e88ae", "patch": "@@ -5,6 +5,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::span_lint_and_sugg;\n+use crate::utils::sugg::Sugg;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -58,14 +59,20 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n             if let rustc_ast::ast::LitKind::Int(10, _) = lit.node;\n \n             then {\n-                let orig_string = crate::utils::snippet(cx, arguments[0].span, \"string\");\n+                let sugg = Sugg::hir_with_applicability(\n+                    cx,\n+                    &arguments[0],\n+                    \"<string>\",\n+                    &mut Applicability::MachineApplicable\n+                ).maybe_par();\n+\n                 span_lint_and_sugg(\n                     cx,\n                     FROM_STR_RADIX_10,\n                     exp.span,\n                     \"this call to `from_str_radix` can be replaced with a call to `str::parse`\",\n                     \"try\",\n-                    format!(\"({}).parse()\", orig_string),\n+                    format!(\"{}.parse::<{}>()\", sugg, prim_ty.name_str()),\n                     Applicability::MaybeIncorrect\n                 );\n             }"}, {"sha": "0a973128664393306777ccb7ddfa28971fe88bfb", "filename": "tests/ui/from_str_radix_10.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d36fe8556962467545f5e92bf896b6672f4e88ae/tests%2Fui%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36fe8556962467545f5e92bf896b6672f4e88ae/tests%2Fui%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.rs?ref=d36fe8556962467545f5e92bf896b6672f4e88ae", "patch": "@@ -12,12 +12,25 @@ fn from_str_radix(_: &str, _: u32) -> Result<(), std::num::ParseIntError> {\n     unimplemented!()\n }\n \n+// to test parenthesis addition\n+struct Test;\n+\n+impl std::ops::Add<Test> for Test {\n+    type Output = &'static str;\n+\n+    fn add(self, _: Self) -> Self::Output {\n+        \"304\"\n+    }\n+}\n+\n fn main() -> Result<(), Box<dyn std::error::Error>> {\n     // all of these should trigger the lint\n     u32::from_str_radix(\"30\", 10)?;\n     i64::from_str_radix(\"24\", 10)?;\n     isize::from_str_radix(\"100\", 10)?;\n     u8::from_str_radix(\"7\", 10)?;\n+    u16::from_str_radix(&(\"10\".to_owned() + \"5\"), 10)?;\n+    i128::from_str_radix(Test + Test, 10)?;\n \n     let string = \"300\";\n     i32::from_str_radix(string, 10)?;"}, {"sha": "d666900191586c18f35614de521a52510deb6b50", "filename": "tests/ui/from_str_radix_10.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d36fe8556962467545f5e92bf896b6672f4e88ae/tests%2Fui%2Ffrom_str_radix_10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d36fe8556962467545f5e92bf896b6672f4e88ae/tests%2Fui%2Ffrom_str_radix_10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.stderr?ref=d36fe8556962467545f5e92bf896b6672f4e88ae", "patch": "@@ -1,34 +1,46 @@\n error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n-  --> $DIR/from_str_radix_10.rs:17:5\n+  --> $DIR/from_str_radix_10.rs:28:5\n    |\n LL |     u32::from_str_radix(\"30\", 10)?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"30\").parse()`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"30\".parse::<u32>()`\n    |\n    = note: `-D clippy::from-str-radix-10` implied by `-D warnings`\n \n error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n-  --> $DIR/from_str_radix_10.rs:18:5\n+  --> $DIR/from_str_radix_10.rs:29:5\n    |\n LL |     i64::from_str_radix(\"24\", 10)?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"24\").parse()`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"24\".parse::<i64>()`\n \n error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n-  --> $DIR/from_str_radix_10.rs:19:5\n+  --> $DIR/from_str_radix_10.rs:30:5\n    |\n LL |     isize::from_str_radix(\"100\", 10)?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"100\").parse()`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"100\".parse::<isize>()`\n \n error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n-  --> $DIR/from_str_radix_10.rs:20:5\n+  --> $DIR/from_str_radix_10.rs:31:5\n    |\n LL |     u8::from_str_radix(\"7\", 10)?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(\"7\").parse()`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"7\".parse::<u8>()`\n \n error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n-  --> $DIR/from_str_radix_10.rs:23:5\n+  --> $DIR/from_str_radix_10.rs:32:5\n+   |\n+LL |     u16::from_str_radix(&(\"10\".to_owned() + \"5\"), 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(&(\"10\".to_owned() + \"5\")).parse::<u16>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:33:5\n+   |\n+LL |     i128::from_str_radix(Test + Test, 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(Test + Test).parse::<i128>()`\n+\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:36:5\n    |\n LL |     i32::from_str_radix(string, 10)?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(string).parse()`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.parse::<i32>()`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}]}