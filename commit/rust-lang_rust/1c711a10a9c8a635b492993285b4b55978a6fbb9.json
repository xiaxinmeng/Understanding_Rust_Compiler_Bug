{"sha": "1c711a10a9c8a635b492993285b4b55978a6fbb9", "node_id": "C_kwDOAAsO6NoAKDFjNzExYTEwYTljOGE2MzViNDkyOTkzMjg1YjRiNTU5NzhhNmZiYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T15:09:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T15:09:47Z"}, "message": "Auto merge of #2201 - RalfJung:arg-parsing, r=RalfJung\n\nargument parsing: make better use of strip_prefix\n\nThis gets rid of lots of `unwrap`. :)", "tree": {"sha": "64ab6198762c7b7863f003db12bb9abc98e8564d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ab6198762c7b7863f003db12bb9abc98e8564d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c711a10a9c8a635b492993285b4b55978a6fbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c711a10a9c8a635b492993285b4b55978a6fbb9", "html_url": "https://github.com/rust-lang/rust/commit/1c711a10a9c8a635b492993285b4b55978a6fbb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c711a10a9c8a635b492993285b4b55978a6fbb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8631a737e37c26210485bfb838becd79b99268", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8631a737e37c26210485bfb838becd79b99268", "html_url": "https://github.com/rust-lang/rust/commit/fc8631a737e37c26210485bfb838becd79b99268"}, {"sha": "f31a8e09510380dc3b0f6a36d59b3d4c5b5a3de7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31a8e09510380dc3b0f6a36d59b3d4c5b5a3de7", "html_url": "https://github.com/rust-lang/rust/commit/f31a8e09510380dc3b0f6a36d59b3d4c5b5a3de7"}], "stats": {"total": 336, "additions": 141, "deletions": 195}, "files": [{"sha": "e3f38956dae25b04721e30d36b061f936d5b37a4", "filename": "src/bin/miri.rs", "status": "modified", "additions": 141, "deletions": 195, "changes": 336, "blob_url": "https://github.com/rust-lang/rust/blob/1c711a10a9c8a635b492993285b4b55978a6fbb9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c711a10a9c8a635b492993285b4b55978a6fbb9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1c711a10a9c8a635b492993285b4b55978a6fbb9", "patch": "@@ -310,208 +310,154 @@ fn main() {\n         } else if after_dashdash {\n             // Everything that comes after `--` is forwarded to the interpreted crate.\n             miri_config.args.push(arg);\n-        } else {\n-            match arg.as_str() {\n-                \"-Zmiri-disable-validation\" => {\n-                    miri_config.validate = false;\n-                }\n-                \"-Zmiri-disable-stacked-borrows\" => {\n-                    miri_config.stacked_borrows = false;\n-                }\n-                \"-Zmiri-disable-data-race-detector\" => {\n-                    miri_config.data_race_detector = false;\n-                }\n-                \"-Zmiri-disable-alignment-check\" => {\n-                    miri_config.check_alignment = miri::AlignmentCheck::None;\n-                }\n-                \"-Zmiri-symbolic-alignment-check\" => {\n-                    miri_config.check_alignment = miri::AlignmentCheck::Symbolic;\n-                }\n-                \"-Zmiri-check-number-validity\" => {\n-                    eprintln!(\n-                        \"WARNING: the flag `-Zmiri-check-number-validity` no longer has any effect \\\n+        } else if arg == \"--\" {\n+            after_dashdash = true;\n+        } else if arg == \"-Zmiri-disable-validation\" {\n+            miri_config.validate = false;\n+        } else if arg == \"-Zmiri-disable-stacked-borrows\" {\n+            miri_config.stacked_borrows = false;\n+        } else if arg == \"-Zmiri-disable-data-race-detector\" {\n+            miri_config.data_race_detector = false;\n+        } else if arg == \"-Zmiri-disable-alignment-check\" {\n+            miri_config.check_alignment = miri::AlignmentCheck::None;\n+        } else if arg == \"-Zmiri-symbolic-alignment-check\" {\n+            miri_config.check_alignment = miri::AlignmentCheck::Symbolic;\n+        } else if arg == \"-Zmiri-check-number-validity\" {\n+            eprintln!(\n+                \"WARNING: the flag `-Zmiri-check-number-validity` no longer has any effect \\\n                         since it is now enabled by default\"\n-                    );\n-                }\n-                \"-Zmiri-allow-uninit-numbers\" => {\n-                    miri_config.allow_uninit_numbers = true;\n-                }\n-                \"-Zmiri-allow-ptr-int-transmute\" => {\n-                    miri_config.allow_ptr_int_transmute = true;\n-                }\n-                \"-Zmiri-disable-abi-check\" => {\n-                    miri_config.check_abi = false;\n-                }\n-                \"-Zmiri-disable-isolation\" => {\n-                    if matches!(isolation_enabled, Some(true)) {\n-                        panic!(\n-                            \"-Zmiri-disable-isolation cannot be used along with -Zmiri-isolation-error\"\n-                        );\n-                    } else {\n-                        isolation_enabled = Some(false);\n-                    }\n-                    miri_config.isolated_op = miri::IsolatedOp::Allow;\n-                }\n-                arg if arg.starts_with(\"-Zmiri-isolation-error=\") => {\n-                    if matches!(isolation_enabled, Some(false)) {\n-                        panic!(\n-                            \"-Zmiri-isolation-error cannot be used along with -Zmiri-disable-isolation\"\n-                        );\n-                    } else {\n-                        isolation_enabled = Some(true);\n-                    }\n-\n-                    miri_config.isolated_op = match arg\n-                        .strip_prefix(\"-Zmiri-isolation-error=\")\n-                        .unwrap()\n-                    {\n-                        \"abort\" => miri::IsolatedOp::Reject(miri::RejectOpWith::Abort),\n-                        \"hide\" => miri::IsolatedOp::Reject(miri::RejectOpWith::NoWarning),\n-                        \"warn\" => miri::IsolatedOp::Reject(miri::RejectOpWith::Warning),\n-                        \"warn-nobacktrace\" =>\n-                            miri::IsolatedOp::Reject(miri::RejectOpWith::WarningWithoutBacktrace),\n-                        _ =>\n-                            panic!(\n-                                \"-Zmiri-isolation-error must be `abort`, `hide`, `warn`, or `warn-nobacktrace`\"\n-                            ),\n-                    };\n-                }\n-                \"-Zmiri-ignore-leaks\" => {\n-                    miri_config.ignore_leaks = true;\n-                }\n-                \"-Zmiri-panic-on-unsupported\" => {\n-                    miri_config.panic_on_unsupported = true;\n-                }\n-                \"-Zmiri-tag-raw-pointers\" => {\n-                    miri_config.tag_raw = true;\n-                }\n-                \"-Zmiri-strict-provenance\" => {\n-                    miri_config.provenance_mode = ProvenanceMode::Strict;\n-                    miri_config.tag_raw = true;\n-                }\n-                \"-Zmiri-permissive-provenance\" => {\n-                    miri_config.provenance_mode = ProvenanceMode::Permissive;\n-                    miri_config.tag_raw = true;\n-                }\n-                \"-Zmiri-mute-stdout-stderr\" => {\n-                    miri_config.mute_stdout_stderr = true;\n-                }\n-                \"-Zmiri-track-raw-pointers\" => {\n-                    eprintln!(\n-                        \"WARNING: -Zmiri-track-raw-pointers has been renamed to -Zmiri-tag-raw-pointers, the old name is deprecated.\"\n-                    );\n-                    miri_config.tag_raw = true;\n-                }\n-                \"--\" => {\n-                    after_dashdash = true;\n-                }\n-                arg if arg.starts_with(\"-Zmiri-seed=\") => {\n-                    if miri_config.seed.is_some() {\n-                        panic!(\"Cannot specify -Zmiri-seed multiple times!\");\n-                    }\n-                    let seed = u64::from_str_radix(arg.strip_prefix(\"-Zmiri-seed=\").unwrap(), 16)\n+            );\n+        } else if arg == \"-Zmiri-allow-uninit-numbers\" {\n+            miri_config.allow_uninit_numbers = true;\n+        } else if arg == \"-Zmiri-allow-ptr-int-transmute\" {\n+            miri_config.allow_ptr_int_transmute = true;\n+        } else if arg == \"-Zmiri-disable-abi-check\" {\n+            miri_config.check_abi = false;\n+        } else if arg == \"-Zmiri-disable-isolation\" {\n+            if matches!(isolation_enabled, Some(true)) {\n+                panic!(\"-Zmiri-disable-isolation cannot be used along with -Zmiri-isolation-error\");\n+            } else {\n+                isolation_enabled = Some(false);\n+            }\n+            miri_config.isolated_op = miri::IsolatedOp::Allow;\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-isolation-error=\") {\n+            if matches!(isolation_enabled, Some(false)) {\n+                panic!(\"-Zmiri-isolation-error cannot be used along with -Zmiri-disable-isolation\");\n+            } else {\n+                isolation_enabled = Some(true);\n+            }\n+\n+            miri_config.isolated_op = match param {\n+                \"abort\" => miri::IsolatedOp::Reject(miri::RejectOpWith::Abort),\n+                \"hide\" => miri::IsolatedOp::Reject(miri::RejectOpWith::NoWarning),\n+                \"warn\" => miri::IsolatedOp::Reject(miri::RejectOpWith::Warning),\n+                \"warn-nobacktrace\" =>\n+                    miri::IsolatedOp::Reject(miri::RejectOpWith::WarningWithoutBacktrace),\n+                _ =>\n+                    panic!(\n+                        \"-Zmiri-isolation-error must be `abort`, `hide`, `warn`, or `warn-nobacktrace`\"\n+                    ),\n+            };\n+        } else if arg == \"-Zmiri-ignore-leaks\" {\n+            miri_config.ignore_leaks = true;\n+        } else if arg == \"-Zmiri-panic-on-unsupported\" {\n+            miri_config.panic_on_unsupported = true;\n+        } else if arg == \"-Zmiri-tag-raw-pointers\" {\n+            miri_config.tag_raw = true;\n+        } else if arg == \"-Zmiri-strict-provenance\" {\n+            miri_config.provenance_mode = ProvenanceMode::Strict;\n+            miri_config.tag_raw = true;\n+        } else if arg == \"-Zmiri-permissive-provenance\" {\n+            miri_config.provenance_mode = ProvenanceMode::Permissive;\n+            miri_config.tag_raw = true;\n+        } else if arg == \"-Zmiri-mute-stdout-stderr\" {\n+            miri_config.mute_stdout_stderr = true;\n+        } else if arg == \"-Zmiri-track-raw-pointers\" {\n+            eprintln!(\n+                \"WARNING: -Zmiri-track-raw-pointers has been renamed to -Zmiri-tag-raw-pointers, the old name is deprecated.\"\n+            );\n+            miri_config.tag_raw = true;\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-seed=\") {\n+            if miri_config.seed.is_some() {\n+                panic!(\"Cannot specify -Zmiri-seed multiple times!\");\n+            }\n+            let seed = u64::from_str_radix(param, 16)\n                         .unwrap_or_else(|_| panic!(\n                             \"-Zmiri-seed should only contain valid hex digits [0-9a-fA-F] and fit into a u64 (max 16 characters)\"\n                         ));\n-                    miri_config.seed = Some(seed);\n-                }\n-                arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n-                    miri_config\n-                        .excluded_env_vars\n-                        .push(arg.strip_prefix(\"-Zmiri-env-exclude=\").unwrap().to_owned());\n-                }\n-                arg if arg.starts_with(\"-Zmiri-env-forward=\") => {\n-                    miri_config\n-                        .forwarded_env_vars\n-                        .push(arg.strip_prefix(\"-Zmiri-env-forward=\").unwrap().to_owned());\n-                }\n-                arg if arg.starts_with(\"-Zmiri-track-pointer-tag=\") => {\n-                    let ids: Vec<u64> = match parse_comma_list(\n-                        arg.strip_prefix(\"-Zmiri-track-pointer-tag=\").unwrap(),\n-                    ) {\n-                        Ok(ids) => ids,\n-                        Err(err) =>\n-                            panic!(\n-                                \"-Zmiri-track-pointer-tag requires a comma separated list of valid `u64` arguments: {}\",\n-                                err\n-                            ),\n-                    };\n-                    for id in ids.into_iter().map(miri::PtrId::new) {\n-                        if let Some(id) = id {\n-                            miri_config.tracked_pointer_tags.insert(id);\n-                        } else {\n-                            panic!(\"-Zmiri-track-pointer-tag requires nonzero arguments\");\n-                        }\n-                    }\n-                }\n-                arg if arg.starts_with(\"-Zmiri-track-call-id=\") => {\n-                    let ids: Vec<u64> = match parse_comma_list(\n-                        arg.strip_prefix(\"-Zmiri-track-call-id=\").unwrap(),\n-                    ) {\n-                        Ok(ids) => ids,\n-                        Err(err) =>\n-                            panic!(\n-                                \"-Zmiri-track-call-id requires a comma separated list of valid `u64` arguments: {}\",\n-                                err\n-                            ),\n-                    };\n-                    for id in ids.into_iter().map(miri::CallId::new) {\n-                        if let Some(id) = id {\n-                            miri_config.tracked_call_ids.insert(id);\n-                        } else {\n-                            panic!(\"-Zmiri-track-call-id requires a nonzero argument\");\n-                        }\n-                    }\n-                }\n-                arg if arg.starts_with(\"-Zmiri-track-alloc-id=\") => {\n-                    let ids: Vec<miri::AllocId> = match parse_comma_list::<NonZeroU64>(\n-                        arg.strip_prefix(\"-Zmiri-track-alloc-id=\").unwrap(),\n-                    ) {\n-                        Ok(ids) => ids.into_iter().map(miri::AllocId).collect(),\n-                        Err(err) =>\n-                            panic!(\n-                                \"-Zmiri-track-alloc-id requires a comma separated list of valid non-zero `u64` arguments: {}\",\n-                                err\n-                            ),\n-                    };\n-                    miri_config.tracked_alloc_ids.extend(ids);\n-                }\n-                arg if arg.starts_with(\"-Zmiri-compare-exchange-weak-failure-rate=\") => {\n-                    let rate = match arg\n-                        .strip_prefix(\"-Zmiri-compare-exchange-weak-failure-rate=\")\n-                        .unwrap()\n-                        .parse::<f64>()\n-                    {\n-                        Ok(rate) if rate >= 0.0 && rate <= 1.0 => rate,\n-                        Ok(_) =>\n-                            panic!(\n-                                \"-Zmiri-compare-exchange-weak-failure-rate must be between `0.0` and `1.0`\"\n-                            ),\n-                        Err(err) =>\n-                            panic!(\n-                                \"-Zmiri-compare-exchange-weak-failure-rate requires a `f64` between `0.0` and `1.0`: {}\",\n-                                err\n-                            ),\n-                    };\n-                    miri_config.cmpxchg_weak_failure_rate = rate;\n-                }\n-                arg if arg.starts_with(\"-Zmiri-measureme=\") => {\n-                    let measureme_out = arg.strip_prefix(\"-Zmiri-measureme=\").unwrap();\n-                    miri_config.measureme_out = Some(measureme_out.to_string());\n-                }\n-                arg if arg.starts_with(\"-Zmiri-backtrace=\") => {\n-                    miri_config.backtrace_style = match arg.strip_prefix(\"-Zmiri-backtrace=\") {\n-                        Some(\"0\") => BacktraceStyle::Off,\n-                        Some(\"1\") => BacktraceStyle::Short,\n-                        Some(\"full\") => BacktraceStyle::Full,\n-                        _ => panic!(\"-Zmiri-backtrace may only be 0, 1, or full\"),\n-                    };\n+            miri_config.seed = Some(seed);\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-env-exclude=\") {\n+            miri_config.excluded_env_vars.push(param.to_owned());\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-env-forward=\") {\n+            miri_config.forwarded_env_vars.push(param.to_owned());\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-track-pointer-tag=\") {\n+            let ids: Vec<u64> = match parse_comma_list(param) {\n+                Ok(ids) => ids,\n+                Err(err) =>\n+                    panic!(\n+                        \"-Zmiri-track-pointer-tag requires a comma separated list of valid `u64` arguments: {}\",\n+                        err\n+                    ),\n+            };\n+            for id in ids.into_iter().map(miri::PtrId::new) {\n+                if let Some(id) = id {\n+                    miri_config.tracked_pointer_tags.insert(id);\n+                } else {\n+                    panic!(\"-Zmiri-track-pointer-tag requires nonzero arguments\");\n                 }\n-                _ => {\n-                    // Forward to rustc.\n-                    rustc_args.push(arg);\n+            }\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-track-call-id=\") {\n+            let ids: Vec<u64> = match parse_comma_list(param) {\n+                Ok(ids) => ids,\n+                Err(err) =>\n+                    panic!(\n+                        \"-Zmiri-track-call-id requires a comma separated list of valid `u64` arguments: {}\",\n+                        err\n+                    ),\n+            };\n+            for id in ids.into_iter().map(miri::CallId::new) {\n+                if let Some(id) = id {\n+                    miri_config.tracked_call_ids.insert(id);\n+                } else {\n+                    panic!(\"-Zmiri-track-call-id requires a nonzero argument\");\n                 }\n             }\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-track-alloc-id=\") {\n+            let ids: Vec<miri::AllocId> = match parse_comma_list::<NonZeroU64>(param) {\n+                Ok(ids) => ids.into_iter().map(miri::AllocId).collect(),\n+                Err(err) =>\n+                    panic!(\n+                        \"-Zmiri-track-alloc-id requires a comma separated list of valid non-zero `u64` arguments: {}\",\n+                        err\n+                    ),\n+            };\n+            miri_config.tracked_alloc_ids.extend(ids);\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-compare-exchange-weak-failure-rate=\") {\n+            let rate = match param.parse::<f64>() {\n+                Ok(rate) if rate >= 0.0 && rate <= 1.0 => rate,\n+                Ok(_) =>\n+                    panic!(\n+                        \"-Zmiri-compare-exchange-weak-failure-rate must be between `0.0` and `1.0`\"\n+                    ),\n+                Err(err) =>\n+                    panic!(\n+                        \"-Zmiri-compare-exchange-weak-failure-rate requires a `f64` between `0.0` and `1.0`: {}\",\n+                        err\n+                    ),\n+            };\n+            miri_config.cmpxchg_weak_failure_rate = rate;\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-measureme=\") {\n+            miri_config.measureme_out = Some(param.to_string());\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-backtrace=\") {\n+            miri_config.backtrace_style = match param {\n+                \"0\" => BacktraceStyle::Off,\n+                \"1\" => BacktraceStyle::Short,\n+                \"full\" => BacktraceStyle::Full,\n+                _ => panic!(\"-Zmiri-backtrace may only be 0, 1, or full\"),\n+            };\n+        } else {\n+            // Forward to rustc.\n+            rustc_args.push(arg);\n         }\n     }\n "}]}