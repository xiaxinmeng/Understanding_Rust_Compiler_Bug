{"sha": "1bfa2483d587cbb41fb335e18459127394242ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZmEyNDgzZDU4N2NiYjQxZmIzMzVlMTg0NTkxMjczOTQyNDJlYzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T11:54:57Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:56Z"}, "message": "defatalize `compile_declarative_macro`", "tree": {"sha": "9554051d3064f474f90fc22eff2aa1f5e8e40b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9554051d3064f474f90fc22eff2aa1f5e8e40b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfa2483d587cbb41fb335e18459127394242ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfa2483d587cbb41fb335e18459127394242ec1", "html_url": "https://github.com/rust-lang/rust/commit/1bfa2483d587cbb41fb335e18459127394242ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfa2483d587cbb41fb335e18459127394242ec1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df9cec2df4da27b8a6d1f3ec031392290ff279d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/df9cec2df4da27b8a6d1f3ec031392290ff279d1", "html_url": "https://github.com/rust-lang/rust/commit/df9cec2df4da27b8a6d1f3ec031392290ff279d1"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "6377347585c7624b24a12fa3cedb9e50c433ff1d", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1bfa2483d587cbb41fb335e18459127394242ec1/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfa2483d587cbb41fb335e18459127394242ec1/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=1bfa2483d587cbb41fb335e18459127394242ec1", "patch": "@@ -15,7 +15,7 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, DiagnosticBuilder, FatalError};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_session::parse::ParseSess;\n@@ -180,6 +180,19 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n     }\n }\n \n+struct MacroRulesDummyExpander;\n+\n+impl TTMacroExpander for MacroRulesDummyExpander {\n+    fn expand<'cx>(\n+        &self,\n+        _: &'cx mut ExtCtxt<'_>,\n+        sp: Span,\n+        _: TokenStream,\n+    ) -> Box<dyn MacResult + 'cx> {\n+        DummyResult::any(sp)\n+    }\n+}\n+\n fn trace_macros_note(cx_expansions: &mut FxHashMap<Span, Vec<String>>, sp: Span, message: String) {\n     let sp = sp.macro_backtrace().last().map(|trace| trace.call_site).unwrap_or(sp);\n     cx_expansions.entry(sp).or_default().push(message);\n@@ -362,6 +375,18 @@ pub fn compile_declarative_macro(\n     def: &ast::Item,\n     edition: Edition,\n ) -> SyntaxExtension {\n+    let mk_syn_ext = |expander| {\n+        SyntaxExtension::new(\n+            sess,\n+            SyntaxExtensionKind::LegacyBang(expander),\n+            def.span,\n+            Vec::new(),\n+            edition,\n+            def.ident.name,\n+            &def.attrs,\n+        )\n+    };\n+\n     let diag = &sess.span_diagnostic;\n     let lhs_nm = ast::Ident::new(sym::lhs, def.span);\n     let rhs_nm = ast::Ident::new(sym::rhs, def.span);\n@@ -416,13 +441,12 @@ pub fn compile_declarative_macro(\n         Failure(token, msg) => {\n             let s = parse_failure_msg(&token);\n             let sp = token.span.substitute_dummy(def.span);\n-            let mut err = sess.span_diagnostic.struct_span_fatal(sp, &s);\n-            err.span_label(sp, msg);\n-            err.emit();\n-            FatalError.raise();\n+            sess.span_diagnostic.struct_span_err(sp, &s).span_label(sp, msg).emit();\n+            return mk_syn_ext(Box::new(MacroRulesDummyExpander));\n         }\n-        Error(sp, s) => {\n-            sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s).raise();\n+        Error(sp, msg) => {\n+            sess.span_diagnostic.struct_span_err(sp.substitute_dummy(def.span), &msg).emit();\n+            return mk_syn_ext(Box::new(MacroRulesDummyExpander));\n         }\n     };\n \n@@ -494,15 +518,7 @@ pub fn compile_declarative_macro(\n         valid,\n     });\n \n-    SyntaxExtension::new(\n-        sess,\n-        SyntaxExtensionKind::LegacyBang(expander),\n-        def.span,\n-        Vec::new(),\n-        edition,\n-        def.ident.name,\n-        &def.attrs,\n-    )\n+    mk_syn_ext(expander)\n }\n \n fn check_lhs_nt_follows("}, {"sha": "3967481098cff05cf1e45789b9d40462b5007b4d", "filename": "src/test/ui/macros/local-ambiguity-multiple-parsing-options.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bfa2483d587cbb41fb335e18459127394242ec1/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfa2483d587cbb41fb335e18459127394242ec1/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.rs?ref=1bfa2483d587cbb41fb335e18459127394242ec1", "patch": "@@ -0,0 +1,8 @@\n+fn main() {}\n+\n+macro_rules! ambiguity {\n+    ($($i:ident)* $j:ident) => {};\n+}\n+\n+ambiguity!(error); //~ ERROR local ambiguity\n+ambiguity!(error); //~ ERROR local ambiguity"}, {"sha": "0ae56c422213cbfc7fbe1b5d12e520b4c9f82b1b", "filename": "src/test/ui/macros/local-ambiguity-multiple-parsing-options.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bfa2483d587cbb41fb335e18459127394242ec1/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfa2483d587cbb41fb335e18459127394242ec1/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr?ref=1bfa2483d587cbb41fb335e18459127394242ec1", "patch": "@@ -0,0 +1,14 @@\n+error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+  --> $DIR/local-ambiguity-multiple-parsing-options.rs:7:12\n+   |\n+LL | ambiguity!(error);\n+   |            ^^^^^\n+\n+error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+  --> $DIR/local-ambiguity-multiple-parsing-options.rs:8:12\n+   |\n+LL | ambiguity!(error);\n+   |            ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}