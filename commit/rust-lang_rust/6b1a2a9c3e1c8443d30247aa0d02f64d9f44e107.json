{"sha": "6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWEyYTljM2UxYzg0NDNkMzAyNDdhYTBkMDJmNjRkOWY0NGUxMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-29T19:58:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-29T19:58:13Z"}, "message": "Auto merge of #3648 - phansch:const_fn_lint, r=oli-obk\n\nAdd initial version of const_fn lint\n\nThis adds an initial version of a lint that can tell if a function could be `const`.\n\nTODO:\n\n- [x] Finish up the docs\n- [x] Fix the ICE\n\ncc #2440", "tree": {"sha": "27b8bfa101f7b15065f8e0ebf0528ad43741bcb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b8bfa101f7b15065f8e0ebf0528ad43741bcb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "html_url": "https://github.com/rust-lang/rust/commit/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55d521e6bad60568aeb89d3d86eb15ad0ed5642", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55d521e6bad60568aeb89d3d86eb15ad0ed5642", "html_url": "https://github.com/rust-lang/rust/commit/f55d521e6bad60568aeb89d3d86eb15ad0ed5642"}, {"sha": "d0d7c5e92271c40b74e796bcf71758348a748553", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d7c5e92271c40b74e796bcf71758348a748553", "html_url": "https://github.com/rust-lang/rust/commit/d0d7c5e92271c40b74e796bcf71758348a748553"}], "stats": {"total": 306, "additions": 304, "deletions": 2}, "files": [{"sha": "c0679d280c266749a8e1a18bcdecbc1b2884a3ec", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -878,6 +878,7 @@ All notable changes to this project will be documented in this file.\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n+[`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes"}, {"sha": "dad18ef756901880890681d9b2173cfc495de036", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 292 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 293 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "3483aae0ca3bc8caa4bfa06e71a72233d617cc18", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -23,6 +23,8 @@ extern crate rustc_data_structures;\n #[allow(unused_extern_crates)]\n extern crate rustc_errors;\n #[allow(unused_extern_crates)]\n+extern crate rustc_mir;\n+#[allow(unused_extern_crates)]\n extern crate rustc_plugin;\n #[allow(unused_extern_crates)]\n extern crate rustc_target;\n@@ -144,6 +146,7 @@ pub mod methods;\n pub mod minmax;\n pub mod misc;\n pub mod misc_early;\n+pub mod missing_const_for_fn;\n pub mod missing_doc;\n pub mod missing_inline;\n pub mod multiple_crate_versions;\n@@ -486,6 +489,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box slow_vector_initialization::Pass);\n     reg.register_late_lint_pass(box types::RefToMut);\n     reg.register_late_lint_pass(box assertions_on_constants::AssertionsOnConstants);\n+    reg.register_late_lint_pass(box missing_const_for_fn::MissingConstForFn);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -1027,6 +1031,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_lint_group(\"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         fallible_impl_from::FALLIBLE_IMPL_FROM,\n+        missing_const_for_fn::MISSING_CONST_FOR_FN,\n         mutex_atomic::MUTEX_INTEGER,\n         needless_borrow::NEEDLESS_BORROW,\n         redundant_clone::REDUNDANT_CLONE,"}, {"sha": "9228c586bbfd57657cd91efeab890ea88d161f91", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -0,0 +1,121 @@\n+use crate::utils::{is_entrypoint_fn, span_lint};\n+use rustc::hir;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::{Body, Constness, FnDecl};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n+use syntax::ast::NodeId;\n+use syntax_pos::Span;\n+\n+/// **What it does:**\n+///\n+/// Suggests the use of `const` in functions and methods where possible.\n+///\n+/// **Why is this bad?**\n+///\n+/// Not having the function const prevents callers of the function from being const as well.\n+///\n+/// **Known problems:**\n+///\n+/// Const functions are currently still being worked on, with some features only being available\n+/// on nightly. This lint does not consider all edge cases currently and the suggestions may be\n+/// incorrect if you are using this lint on stable.\n+///\n+/// Also, the lint only runs one pass over the code. Consider these two non-const functions:\n+///\n+/// ```rust\n+/// fn a() -> i32 {\n+///     0\n+/// }\n+/// fn b() -> i32 {\n+///     a()\n+/// }\n+/// ```\n+///\n+/// When running Clippy, the lint will only suggest to make `a` const, because `b` at this time\n+/// can't be const as it calls a non-const function. Making `a` const and running Clippy again,\n+/// will suggest to make `b` const, too.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// fn new() -> Self {\n+///     Self { random_number: 42 }\n+/// }\n+/// ```\n+///\n+/// Could be a const fn:\n+///\n+/// ```rust\n+/// const fn new() -> Self {\n+///     Self { random_number: 42 }\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub MISSING_CONST_FOR_FN,\n+    nursery,\n+    \"Lint functions definitions that could be made `const fn`\"\n+}\n+\n+#[derive(Clone)]\n+pub struct MissingConstForFn;\n+\n+impl LintPass for MissingConstForFn {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MISSING_CONST_FOR_FN)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"MissingConstForFn\"\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_, '_>,\n+        kind: FnKind<'_>,\n+        _: &FnDecl,\n+        _: &Body,\n+        span: Span,\n+        node_id: NodeId,\n+    ) {\n+        let def_id = cx.tcx.hir().local_def_id(node_id);\n+\n+        if is_entrypoint_fn(cx, def_id) {\n+            return;\n+        }\n+\n+        // Perform some preliminary checks that rule out constness on the Clippy side. This way we\n+        // can skip the actual const check and return early.\n+        match kind {\n+            FnKind::ItemFn(_, _, header, ..) => {\n+                if already_const(header) {\n+                    return;\n+                }\n+            },\n+            FnKind::Method(_, sig, ..) => {\n+                if already_const(sig.header) {\n+                    return;\n+                }\n+            },\n+            _ => return,\n+        }\n+\n+        let mir = cx.tcx.optimized_mir(def_id);\n+\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, def_id, &mir) {\n+            if cx.tcx.is_min_const_fn(def_id) {\n+                cx.tcx.sess.span_err(span, &err);\n+            }\n+        } else {\n+            span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a const_fn\");\n+        }\n+    }\n+}\n+\n+// We don't have to lint on something that's already `const`\n+fn already_const(header: hir::FnHeader) -> bool {\n+    header.constness == Constness::Const\n+}"}, {"sha": "ee3356fdc82346fddd8d35be135a2683d976be8e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::Node;\n use rustc::hir::*;\n@@ -350,6 +350,14 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n     Some(matched)\n }\n \n+/// Returns true if the provided `def_id` is an entrypoint to a program\n+pub fn is_entrypoint_fn(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n+    if let Some((entry_fn_def_id, _)) = cx.tcx.entry_fn(LOCAL_CRATE) {\n+        return def_id == entry_fn_def_id;\n+    }\n+    false\n+}\n+\n /// Get the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Name> {\n     let parent_id = cx.tcx.hir().get_parent(expr.id);"}, {"sha": "36efe16b84f0f855535743f7f7fe054f14fb85d2", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -0,0 +1,57 @@\n+//! False-positive tests to ensure we don't suggest `const` for things where it would cause a\n+//! compilation error.\n+//! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n+\n+#![warn(clippy::missing_const_for_fn)]\n+#![feature(start)]\n+\n+struct Game;\n+\n+// This should not be linted because it's already const\n+const fn already_const() -> i32 {\n+    32\n+}\n+\n+impl Game {\n+    // This should not be linted because it's already const\n+    pub const fn already_const() -> i32 {\n+        32\n+    }\n+}\n+\n+// Allowing on this function, because it would lint, which we don't want in this case.\n+#[allow(clippy::missing_const_for_fn)]\n+fn random() -> u32 {\n+    42\n+}\n+\n+// We should not suggest to make this function `const` because `random()` is non-const\n+fn random_caller() -> u32 {\n+    random()\n+}\n+\n+static Y: u32 = 0;\n+\n+// We should not suggest to make this function `const` because const functions are not allowed to\n+// refer to a static variable\n+fn get_y() -> u32 {\n+    Y\n+    //~^ ERROR E0013\n+}\n+\n+// Don't lint entrypoint functions\n+#[start]\n+fn init(num: isize, something: *const *const u8) -> isize {\n+    1\n+}\n+\n+trait Foo {\n+    // This should not be suggested to be made const\n+    // (rustc doesn't allow const trait methods)\n+    fn f() -> u32;\n+\n+    // This should not be suggested to be made const either\n+    fn g() -> u32 {\n+        33\n+    }\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/missing_const_for_fn/cant_be_const.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107"}, {"sha": "139e64de1ff5d465e423ed02e115b8dff3327749", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -0,0 +1,57 @@\n+#![warn(clippy::missing_const_for_fn)]\n+#![allow(clippy::let_and_return)]\n+\n+use std::mem::transmute;\n+\n+struct Game {\n+    guess: i32,\n+}\n+\n+impl Game {\n+    // Could be const\n+    pub fn new() -> Self {\n+        Self { guess: 42 }\n+    }\n+}\n+\n+// Could be const\n+fn one() -> i32 {\n+    1\n+}\n+\n+// Could also be const\n+fn two() -> i32 {\n+    let abc = 2;\n+    abc\n+}\n+\n+// FIXME: This is a false positive in the `is_min_const_fn` function.\n+// At least until the `const_string_new` feature is stabilzed.\n+fn string() -> String {\n+    String::new()\n+}\n+\n+// Could be const\n+unsafe fn four() -> i32 {\n+    4\n+}\n+\n+// Could also be const\n+fn generic<T>(t: T) -> T {\n+    t\n+}\n+\n+// FIXME: Depends on the `const_transmute` and `const_fn` feature gates.\n+// In the future Clippy should be able to suggest this as const, too.\n+fn sub(x: u32) -> usize {\n+    unsafe { transmute(&x) }\n+}\n+\n+// NOTE: This is currently not yet allowed to be const\n+// Once implemented, Clippy should be able to suggest this as const, too.\n+fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n+    t[0]\n+}\n+\n+// Should not be const\n+fn main() {}"}, {"sha": "22ea852905dacf1e4e1599d6a8ba0c673b96bfff", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "patch": "@@ -0,0 +1,53 @@\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:12:5\n+   |\n+LL | /     pub fn new() -> Self {\n+LL | |         Self { guess: 42 }\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:18:1\n+   |\n+LL | / fn one() -> i32 {\n+LL | |     1\n+LL | | }\n+   | |_^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:23:1\n+   |\n+LL | / fn two() -> i32 {\n+LL | |     let abc = 2;\n+LL | |     abc\n+LL | | }\n+   | |_^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:30:1\n+   |\n+LL | / fn string() -> String {\n+LL | |     String::new()\n+LL | | }\n+   | |_^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:35:1\n+   |\n+LL | / unsafe fn four() -> i32 {\n+LL | |     4\n+LL | | }\n+   | |_^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:40:1\n+   |\n+LL | / fn generic<T>(t: T) -> T {\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 6 previous errors\n+"}]}