{"sha": "018a6cac072767dfd630c22e6d9ce134b7bb09af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOGE2Y2FjMDcyNzY3ZGZkNjMwYzIyZTZkOWNlMTM0YjdiYjA5YWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-13T15:59:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T15:59:50Z"}, "message": "Merge #5750\n\n5750: Rename ra_ide -> ide\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4293492e643f9a604c5f30e051289bcea182694c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4293492e643f9a604c5f30e051289bcea182694c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/018a6cac072767dfd630c22e6d9ce134b7bb09af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNWN2CRBK7hj4Ov3rIwAAdHIIACuVf9SpvoZNaEzXhS7iUP/h\nBzurHQ2Mwvrg/WIv1Zys7G/U3S32swfEO6dX6l/xlGb6ytkZ2k4M9DXktJFpPaHy\nPgrtZUqTHc+grzEDjmtF2eIXRs1NnVXqtkTqHOJ0ujqO5Uc6sRxQ1kCjEiD7bFy6\nR41ftDuDRRRAXMKP3bRSgx01QNkP76Kbbib55s8HfDOrJJ0RmEcT+4J074gaNZXU\n0SzofzfE05EkidVdmSGDBizr+bcSCCg8mxPGG8esJms/y3VAXOHeI20sKsDnzrpJ\nMHE4s1yNlAmHU8cfMlyYwux2ZlxtBHh/y2bgyOW201/YrZvhM1hVYbMngxuFSEM=\n=28R3\n-----END PGP SIGNATURE-----\n", "payload": "tree 4293492e643f9a604c5f30e051289bcea182694c\nparent 00fb411f3edea72a1a9739f7df6f21cca045730b\nparent 6bc2633c90cedad057c5201d1ab7f67b57247004\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597334390 +0000\ncommitter GitHub <noreply@github.com> 1597334390 +0000\n\nMerge #5750\n\n5750: Rename ra_ide -> ide\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/018a6cac072767dfd630c22e6d9ce134b7bb09af", "html_url": "https://github.com/rust-lang/rust/commit/018a6cac072767dfd630c22e6d9ce134b7bb09af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/018a6cac072767dfd630c22e6d9ce134b7bb09af/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00fb411f3edea72a1a9739f7df6f21cca045730b", "url": "https://api.github.com/repos/rust-lang/rust/commits/00fb411f3edea72a1a9739f7df6f21cca045730b", "html_url": "https://github.com/rust-lang/rust/commit/00fb411f3edea72a1a9739f7df6f21cca045730b"}, {"sha": "6bc2633c90cedad057c5201d1ab7f67b57247004", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc2633c90cedad057c5201d1ab7f67b57247004", "html_url": "https://github.com/rust-lang/rust/commit/6bc2633c90cedad057c5201d1ab7f67b57247004"}], "stats": {"total": 594, "additions": 246, "deletions": 348}, "files": [{"sha": "2386c8f3a5d6a9a072f426d75af5bdf63759b883", "filename": "Cargo.lock", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -346,7 +346,7 @@ dependencies = [\n \n [[package]]\n name = \"expect\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"difference\",\n  \"once_cell\",\n@@ -385,7 +385,7 @@ dependencies = [\n \n [[package]]\n name = \"flycheck\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"cargo_metadata\",\n  \"crossbeam-channel\",\n@@ -579,6 +579,30 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"ide\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"assists\",\n+ \"base_db\",\n+ \"cfg\",\n+ \"either\",\n+ \"expect\",\n+ \"hir\",\n+ \"ide_db\",\n+ \"indexmap\",\n+ \"itertools\",\n+ \"log\",\n+ \"oorandom\",\n+ \"profile\",\n+ \"rustc-hash\",\n+ \"ssr\",\n+ \"stdx\",\n+ \"syntax\",\n+ \"test_utils\",\n+ \"text_edit\",\n+]\n+\n [[package]]\n name = \"ide_db\"\n version = \"0.0.0\"\n@@ -992,7 +1016,7 @@ dependencies = [\n \n [[package]]\n name = \"paths\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n \n [[package]]\n name = \"percent-encoding\"\n@@ -1052,7 +1076,7 @@ dependencies = [\n \n [[package]]\n name = \"proc_macro_api\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n@@ -1119,30 +1143,6 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n-[[package]]\n-name = \"ra_ide\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"assists\",\n- \"base_db\",\n- \"cfg\",\n- \"either\",\n- \"expect\",\n- \"hir\",\n- \"ide_db\",\n- \"indexmap\",\n- \"itertools\",\n- \"log\",\n- \"oorandom\",\n- \"profile\",\n- \"rustc-hash\",\n- \"ssr\",\n- \"stdx\",\n- \"syntax\",\n- \"test_utils\",\n- \"text_edit\",\n-]\n-\n [[package]]\n name = \"rayon\"\n version = \"1.3.1\"\n@@ -1213,7 +1213,7 @@ dependencies = [\n \n [[package]]\n name = \"rust-analyzer\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"anyhow\",\n  \"base_db\",\n@@ -1225,6 +1225,7 @@ dependencies = [\n  \"hir\",\n  \"hir_def\",\n  \"hir_ty\",\n+ \"ide\",\n  \"ide_db\",\n  \"itertools\",\n  \"jod-thread\",\n@@ -1239,7 +1240,6 @@ dependencies = [\n  \"proc_macro_srv\",\n  \"profile\",\n  \"project_model\",\n- \"ra_ide\",\n  \"rayon\",\n  \"rustc-hash\",\n  \"serde\",\n@@ -1444,7 +1444,7 @@ dependencies = [\n \n [[package]]\n name = \"ssr\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"base_db\",\n  \"expect\",\n@@ -1458,7 +1458,7 @@ dependencies = [\n \n [[package]]\n name = \"stdx\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n \n [[package]]\n name = \"syn\"\n@@ -1515,7 +1515,7 @@ dependencies = [\n \n [[package]]\n name = \"test_utils\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"difference\",\n  \"rustc-hash\",\n@@ -1729,7 +1729,7 @@ dependencies = [\n \n [[package]]\n name = \"vfs\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"fst\",\n  \"paths\",\n@@ -1738,7 +1738,7 @@ dependencies = [\n \n [[package]]\n name = \"vfs-notify\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\","}, {"sha": "264e4da7073013f5a6c5b83b88a7fc483e89b844", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -39,7 +39,7 @@ https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frls-2.2E0\n \n * Website: https://rust-analyzer.github.io/\n * Metrics: https://rust-analyzer.github.io/metrics/\n-* API docs: https://rust-analyzer.github.io/rust-analyzer/ra_ide/\n+* API docs: https://rust-analyzer.github.io/rust-analyzer/ide/\n \n ## License\n "}, {"sha": "ee3415850654d4b2739985290e0b9f4da2d89922", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,4 +1,4 @@\n-//! base_db defines basic database traits. The concrete DB is defined by ra_ide.\n+//! base_db defines basic database traits. The concrete DB is defined by ide.\n mod cancellation;\n mod input;\n pub mod fixture;"}, {"sha": "b54d3a60e300e48e208623126cea2b80a74d95be", "filename": "crates/expect/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fexpect%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fexpect%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,14 +1,15 @@\n [package]\n name = \"expect\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n-license = \"MIT OR Apache-2.0\"\n \n [lib]\n doctest = false\n \n [dependencies]\n once_cell = \"1\"\n difference = \"2\"\n+\n stdx = { path = \"../stdx\" }"}, {"sha": "262a66e4e3dba9d3871fbe9972512eab17dc68cc", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,9 +1,9 @@\n [package]\n-edition = \"2018\"\n name = \"flycheck\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n+version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false\n@@ -14,4 +14,5 @@ log = \"0.4.8\"\n cargo_metadata = \"0.11.1\"\n serde_json = \"1.0.48\"\n jod-thread = \"0.1.1\"\n+\n toolchain = { path = \"../toolchain\" }"}, {"sha": "e4b970c73b4e701ecdd0a9f022734e454de0c470", "filename": "crates/ide/Cargo.toml", "status": "renamed", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,16 +1,13 @@\n [package]\n-edition = \"2018\"\n-name = \"ra_ide\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n+name = \"ide\"\n+version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false\n \n-[features]\n-wasm = []\n-\n [dependencies]\n either = \"1.5.3\"\n indexmap = \"1.3.2\"\n@@ -20,7 +17,6 @@ rustc-hash = \"1.1.0\"\n oorandom = \"11.1.2\"\n \n stdx = { path = \"../stdx\" }\n-\n syntax = { path = \"../syntax\" }\n text_edit = { path = \"../text_edit\" }\n base_db = { path = \"../base_db\" }\n@@ -31,7 +27,7 @@ test_utils = { path = \"../test_utils\" }\n assists = { path = \"../assists\" }\n ssr = { path = \"../ssr\" }\n \n-# ra_ide should depend only on the top-level `hir` package. if you need\n+# ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n hir = { path = \"../hir\" }\n ", "previous_filename": "crates/ra_ide/Cargo.toml"}, {"sha": "58e26b94ca7c4b45afb3dd24de3f367db8cacd34", "filename": "crates/ide/src/call_hierarchy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/call_hierarchy.rs"}, {"sha": "86abd2d8cec2beeaeac323cf8bee36b9d993c892", "filename": "crates/ide/src/call_info.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_info.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/call_info.rs"}, {"sha": "7fb4d687e1c16b35cfd0ff6ff4fa311719a265ea", "filename": "crates/ide/src/completion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion.rs"}, {"sha": "603d935deb76413a0893bf1ed551bd0f1f725868", "filename": "crates/ide/src/completion/complete_attribute.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_attribute.rs"}, {"sha": "5326652852f0ba7cd055c421ab54b0e8f5a394a0", "filename": "crates/ide/src/completion/complete_dot.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_dot.rs"}, {"sha": "7c63ce58f8932728777893df7b897349830575c2", "filename": "crates/ide/src/completion/complete_fn_param.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_fn_param.rs"}, {"sha": "a80708935ea1badd7e9c123f9aa0f27c896b29b6", "filename": "crates/ide/src/completion/complete_keyword.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_keyword.rs"}, {"sha": "0447f0511515401aaf605dbaa727677ed9d0b2b6", "filename": "crates/ide/src/completion/complete_macro_in_item_position.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_macro_in_item_position.rs"}, {"sha": "aceb77cb5ccc2ddbbda05ec2f8ec9287b23e7414", "filename": "crates/ide/src/completion/complete_pattern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_pattern.rs"}, {"sha": "d50b13c52c39cdd883b27f43a2a8e4b7c262b3ca", "filename": "crates/ide/src/completion/complete_postfix.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_postfix.rs"}, {"sha": "cb7dd23c187d02387b425ad6ade407bb9ccac288", "filename": "crates/ide/src/completion/complete_qualified_path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_qualified_path.rs"}, {"sha": "74b94594dca697598f845c4de3f9b49743dfbd70", "filename": "crates/ide/src/completion/complete_record.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_record.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_record.rs"}, {"sha": "4368e4eec8422274135bdbd68f62bd8e3d9f5d92", "filename": "crates/ide/src/completion/complete_snippet.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_snippet.rs"}, {"sha": "478e312623724d28e1327f358ebaea05d22bc386", "filename": "crates/ide/src/completion/complete_trait_impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_trait_impl.rs"}, {"sha": "824227f310a936647042c38c243bc96899367881", "filename": "crates/ide/src/completion/complete_unqualified_path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs"}, {"sha": "71b49ace8bfb0e38a746ff34866d9f3a3cfb46dc", "filename": "crates/ide/src/completion/completion_config.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_config.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/completion_config.rs"}, {"sha": "047ecd9d771738e2c036d776aeb366f45863eef2", "filename": "crates/ide/src/completion/completion_context.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/completion_context.rs"}, {"sha": "9377cdc577eaec057636c8c84d38d475e8f065f6", "filename": "crates/ide/src/completion/completion_item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/completion_item.rs"}, {"sha": "ffc97c076a272988958ab6b242c9a53c1ec13231", "filename": "crates/ide/src/completion/patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/patterns.rs"}, {"sha": "e1b1ea4ce44cf55d3329fc71dc78a07892d507f4", "filename": "crates/ide/src/completion/presentation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/presentation.rs"}, {"sha": "1452d7e9e54b5cde41216ec3fd558907a8c1f8f1", "filename": "crates/ide/src/completion/test_utils.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/completion/test_utils.rs"}, {"sha": "a3ec98178a10a6623f2a4fdbcbdcc00564157985", "filename": "crates/ide/src/diagnostics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/diagnostics.rs"}, {"sha": "85b46c9958a17eaa86f1dd27d8a5df4dfc017a83", "filename": "crates/ide/src/diagnostics/diagnostics_with_fix.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/diagnostics/diagnostics_with_fix.rs"}, {"sha": "41b5bdc490c086859f74f607a07793b82319a36c", "filename": "crates/ide/src/display.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/display.rs"}, {"sha": "e77106177267785d7d26cd9b2bf06b028daf876a", "filename": "crates/ide/src/display/navigation_target.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/display/navigation_target.rs"}, {"sha": "ea49d9f970787ba9686d8169a08e7e0b94883dd6", "filename": "crates/ide/src/display/short_label.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/display/short_label.rs"}, {"sha": "31455709d7d8ad5bbccde3ddfe970e5d9431caa4", "filename": "crates/ide/src/expand_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/expand_macro.rs"}, {"sha": "34563a0267f6acd64edce4b35aa6d4315b75e9e8", "filename": "crates/ide/src/extend_selection.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/extend_selection.rs"}, {"sha": "c90247ba658242f1d9aacf5e839b3ee44d8c6622", "filename": "crates/ide/src/file_structure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/file_structure.rs"}, {"sha": "7523aec55732bdde0eddd88f2314928e3339cd23", "filename": "crates/ide/src/folding_ranges.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/folding_ranges.rs"}, {"sha": "15e9b7fad825e9298ad80dca3a95a5c483fed6d5", "filename": "crates/ide/src/goto_definition.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/goto_definition.rs"}, {"sha": "f503f4ec5fe4b0c14689796bb3a818bbcf5bac99", "filename": "crates/ide/src/goto_implementation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/goto_implementation.rs"}, {"sha": "4a151b1506401992d2fb1aa3f6d2a656d7b3cf88", "filename": "crates/ide/src/goto_type_definition.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/goto_type_definition.rs"}, {"sha": "331aa4db0c736bbceec74d136710be40795d4612", "filename": "crates/ide/src/hover.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/hover.rs"}, {"sha": "002adf9159f89bd8ef9de0269d56bd215d7c628e", "filename": "crates/ide/src/inlay_hints.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/inlay_hints.rs"}, {"sha": "e37702acdf05ac9a82220b46fd8f7693bfc96320", "filename": "crates/ide/src/join_lines.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/join_lines.rs"}, {"sha": "eb63895297063900c7b913e67e87641d0869d16f", "filename": "crates/ide/src/lib.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,4 +1,4 @@\n-//! ra_ide crate provides \"ide-centric\" APIs for the rust-analyzer. That is,\n+//! ide crate provides \"ide-centric\" APIs for the rust-analyzer. That is,\n //! it generally operates with files and text ranges, and returns results as\n //! Strings, suitable for displaying to the human.\n //!", "previous_filename": "crates/ra_ide/src/lib.rs"}, {"sha": "60c193c40aba27b81111fcab406a69584de34f6d", "filename": "crates/ide/src/markup.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fmarkup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fmarkup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmarkup.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/markup.rs"}, {"sha": "cb6abb0db948c451c5c39b5389761e6d09dbae88", "filename": "crates/ide/src/matching_brace.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmatching_brace.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/matching_brace.rs"}, {"sha": "363e6d27e5a55ac97fdd5090cbfd7051007a2f1e", "filename": "crates/ide/src/mock_analysis.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmock_analysis.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/mock_analysis.rs"}, {"sha": "59ed2967cf2ac4c049e70f1e7b6768d457db1216", "filename": "crates/ide/src/parent_module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/parent_module.rs"}, {"sha": "c5ab5a1d87ba18d94068ec8bceb6514525d998ec", "filename": "crates/ide/src/prime_caches.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/prime_caches.rs"}, {"sha": "0a76ec6b4306fa9d8ef7fb06d4738400be77a8ec", "filename": "crates/ide/src/references.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/references.rs"}, {"sha": "d73dc9cd00b0ae2b56834d071054d35729603005", "filename": "crates/ide/src/references/rename.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/references/rename.rs"}, {"sha": "c3e07c8dec731f8b2ca7448a4f345bd58f636b6a", "filename": "crates/ide/src/runnables.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/runnables.rs"}, {"sha": "c2370818180798cc28513e643a1fa2b233055121", "filename": "crates/ide/src/status.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/status.rs"}, {"sha": "5d7c7e8d02a20586675ed2f1478a336a38e7298c", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/syntax_highlighting.rs"}, {"sha": "249368ff8142a3670197a40e2e9181cef25072b5", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/syntax_highlighting/html.rs"}, {"sha": "43f4e6feab309290af0ff95039f250de81f3b9fb", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/syntax_highlighting/injection.rs"}, {"sha": "49ec94bdcdb98d6b67fe02bd116a3776968f8408", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/syntax_highlighting/tags.rs"}, {"sha": "94f37d773f7704be6d1c1f2d1cb9366b2a113346", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -105,7 +105,7 @@ impl<T> Option<T> {\n }\n \"#\n         .trim(),\n-        expect_file![\"crates/ra_ide/test_data/highlighting.html\"],\n+        expect_file![\"crates/ide/test_data/highlighting.html\"],\n         false,\n     );\n }\n@@ -128,7 +128,7 @@ fn bar() {\n }\n \"#\n         .trim(),\n-        expect_file![\"crates/ra_ide/test_data/rainbow_highlighting.html\"],\n+        expect_file![\"crates/ide/test_data/rainbow_highlighting.html\"],\n         true,\n     );\n }\n@@ -181,7 +181,7 @@ fn main() {\n     );\n }\"##\n         .trim(),\n-        expect_file![\"crates/ra_ide/test_data/highlight_injection.html\"],\n+        expect_file![\"crates/ide/test_data/highlight_injection.html\"],\n         false,\n     );\n }\n@@ -264,7 +264,7 @@ fn main() {\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n }\"#\n         .trim(),\n-        expect_file![\"crates/ra_ide/test_data/highlight_strings.html\"],\n+        expect_file![\"crates/ide/test_data/highlight_strings.html\"],\n         false,\n     );\n }\n@@ -337,7 +337,7 @@ fn main() {\n }\n \"#\n         .trim(),\n-        expect_file![\"crates/ra_ide/test_data/highlight_unsafe.html\"],\n+        expect_file![\"crates/ide/test_data/highlight_unsafe.html\"],\n         false,\n     );\n }\n@@ -413,7 +413,7 @@ macro_rules! noop {\n }\n \"#\n         .trim(),\n-        expect_file![\"crates/ra_ide/test_data/highlight_doctest.html\"],\n+        expect_file![\"crates/ide/test_data/highlight_doctest.html\"],\n         false,\n     );\n }\n@@ -430,7 +430,7 @@ fn test_extern_crate() {\n         //- /alloc/lib.rs\n         pub struct A\n         \"#,\n-        expect_file![\"crates/ra_ide/test_data/highlight_extern_crate.html\"],\n+        expect_file![\"crates/ide/test_data/highlight_extern_crate.html\"],\n         false,\n     );\n }", "previous_filename": "crates/ra_ide/src/syntax_highlighting/tests.rs"}, {"sha": "f8004495960c83e3a47dda5fac2bf41642543b3b", "filename": "crates/ide/src/syntax_tree.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/syntax_tree.rs"}, {"sha": "899ce5f26527058c5e97473c7dfccd63f7fc2467", "filename": "crates/ide/src/typing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/typing.rs"}, {"sha": "f7d46146c50923b044e8f797afb00c3c9108c1d3", "filename": "crates/ide/src/typing/on_enter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/src/typing/on_enter.rs"}, {"sha": "6322d404fba5c6c7cab62278eecce9b22af4b45c", "filename": "crates/ide/test_data/highlight_doctest.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Fhighlight_doctest.html?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/test_data/highlight_doctest.html"}, {"sha": "800d894c7693d2a4649dfe9c691219c6833e4d01", "filename": "crates/ide/test_data/highlight_extern_crate.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Fhighlight_extern_crate.html?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/test_data/highlight_extern_crate.html"}, {"sha": "18addd00d283c68b13aa8dbd99b5b964c3e1d0c1", "filename": "crates/ide/test_data/highlight_injection.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Fhighlight_injection.html?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/test_data/highlight_injection.html"}, {"sha": "1b681b2c6b53b5e88c49766605429f4c832ff1c7", "filename": "crates/ide/test_data/highlight_strings.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Fhighlight_strings.html?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/test_data/highlight_strings.html"}, {"sha": "552fea668923f1f9fd9e9a17973d7575885bb90b", "filename": "crates/ide/test_data/highlight_unsafe.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Fhighlight_unsafe.html?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/test_data/highlight_unsafe.html"}, {"sha": "8e0160eee5b47dd945c106d23d47e4933f4e8b53", "filename": "crates/ide/test_data/highlighting.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Fhighlighting.html?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/test_data/highlighting.html"}, {"sha": "401e87a73d3bc12d0e464d1f30b5caff9d03f59c", "filename": "crates/ide/test_data/rainbow_highlighting.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Frainbow_highlighting.html?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "previous_filename": "crates/ra_ide/test_data/rainbow_highlighting.html"}, {"sha": "692fb64153bba3a2af71388cd7a8aea55e9abcc5", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -25,6 +25,6 @@ text_edit = { path = \"../text_edit\" }\n base_db = { path = \"../base_db\" }\n profile = { path = \"../profile\" }\n test_utils = { path = \"../test_utils\" }\n-# ra_ide should depend only on the top-level `hir` package. if you need\n+# ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n hir = { path = \"../hir\" }"}, {"sha": "0d0affc273575eca6758b78ed22ecd8feecce7c9", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -243,7 +243,7 @@ impl NameRefClass {\n }\n \n // Note: we don't have unit-tests for this rather important function.\n-// It is primarily exercised via goto definition tests in `ra_ide`.\n+// It is primarily exercised via goto definition tests in `ide`.\n pub fn classify_name_ref(\n     sema: &Semantics<RootDatabase>,\n     name_ref: &ast::NameRef,"}, {"sha": "562e92252b2a40d9561270a11d883952eea00189", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -142,19 +142,19 @@ pub(crate) fn reparser(\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n         BLOCK_EXPR => expressions::block_expr,\n-        RECORD_FIELD_LIST => items::record_field_def_list,\n-        RECORD_EXPR_FIELD_LIST => items::record_field_list,\n-        VARIANT_LIST => items::enum_variant_list,\n+        RECORD_FIELD_LIST => items::record_field_list,\n+        RECORD_EXPR_FIELD_LIST => items::record_expr_field_list,\n+        VARIANT_LIST => items::variant_list,\n         MATCH_ARM_LIST => items::match_arm_list,\n         USE_TREE_LIST => items::use_tree_list,\n         EXTERN_ITEM_LIST => items::extern_item_list,\n         TOKEN_TREE if first_child? == T!['{'] => items::token_tree,\n         ASSOC_ITEM_LIST => match parent? {\n-            IMPL => items::impl_item_list,\n-            TRAIT => items::trait_item_list,\n+            IMPL => items::assoc_item_list,\n+            TRAIT => items::assoc_item_list,\n             _ => return None,\n         },\n-        ITEM_LIST => items::mod_item_list,\n+        ITEM_LIST => items::item_list,\n         _ => return None,\n     };\n     Some(res)\n@@ -217,7 +217,7 @@ fn opt_visibility(p: &mut Parser) -> bool {\n     true\n }\n \n-fn opt_alias(p: &mut Parser) {\n+fn opt_rename(p: &mut Parser) {\n     if p.at(T![as]) {\n         let m = p.start();\n         p.bump(T![as]);\n@@ -239,7 +239,7 @@ fn abi(p: &mut Parser) {\n     abi.complete(p, ABI);\n }\n \n-fn opt_fn_ret_type(p: &mut Parser) -> bool {\n+fn opt_ret_type(p: &mut Parser) -> bool {\n     if p.at(T![->]) {\n         let m = p.start();\n         p.bump(T![->]);"}, {"sha": "dab0f62c3caaf6fcea791cddeac9e585e1b1bdf7", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,19 +2,19 @@\n \n use super::*;\n \n-pub(super) fn inner_attributes(p: &mut Parser) {\n+pub(super) fn inner_attrs(p: &mut Parser) {\n     while p.at(T![#]) && p.nth(1) == T![!] {\n-        attribute(p, true)\n+        attr(p, true)\n     }\n }\n \n-pub(super) fn outer_attributes(p: &mut Parser) {\n+pub(super) fn outer_attrs(p: &mut Parser) {\n     while p.at(T![#]) {\n-        attribute(p, false)\n+        attr(p, false)\n     }\n }\n \n-fn attribute(p: &mut Parser, inner: bool) {\n+fn attr(p: &mut Parser, inner: bool) {\n     let attr = p.start();\n     assert!(p.at(T![#]));\n     p.bump(T![#]);"}, {"sha": "e72929f8ccdab3d0dec31b97a22e0cd2cb9cc48c", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -22,7 +22,7 @@ pub(super) fn expr(p: &mut Parser) -> (Option<CompletedMarker>, BlockLike) {\n pub(super) fn expr_with_attrs(p: &mut Parser) -> bool {\n     let m = p.start();\n     let has_attrs = p.at(T![#]);\n-    attributes::outer_attributes(p);\n+    attributes::outer_attrs(p);\n \n     let (cm, _block_like) = expr(p);\n     let success = cm.is_some();\n@@ -64,7 +64,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n     //     #[D] return ();\n     // }\n     let has_attrs = p.at(T![#]);\n-    attributes::outer_attributes(p);\n+    attributes::outer_attrs(p);\n \n     if p.at(T![let]) {\n         let_stmt(p, m, with_semi);\n@@ -175,7 +175,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n \n pub(super) fn expr_block_contents(p: &mut Parser) {\n     // This is checked by a validator\n-    attributes::inner_attributes(p);\n+    attributes::inner_attrs(p);\n \n     while !p.at(EOF) && !p.at(T!['}']) {\n         // test nocontentexpr\n@@ -489,7 +489,7 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     let m = lhs.precede(p);\n     p.bump_any();\n     name_ref(p);\n-    type_args::opt_type_arg_list(p, true);\n+    type_args::opt_generic_arg_list(p, true);\n     if p.at(T!['(']) {\n         arg_list(p);\n     }\n@@ -585,7 +585,7 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n     paths::expr_path(p);\n     match p.current() {\n         T!['{'] if !r.forbid_structs => {\n-            record_field_list(p);\n+            record_expr_field_list(p);\n             (m.complete(p, RECORD_EXPR), BlockLike::NotBlock)\n         }\n         T![!] if !p.at(T![!=]) => {\n@@ -603,7 +603,7 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n //     S { x, y: 32, ..Default::default() };\n //     TupleStruct { 0: 1 };\n // }\n-pub(crate) fn record_field_list(p: &mut Parser) {\n+pub(crate) fn record_expr_field_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);\n@@ -613,7 +613,7 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n         // fn main() {\n         //     S { #[cfg(test)] field: 1 }\n         // }\n-        attributes::outer_attributes(p);\n+        attributes::outer_attrs(p);\n \n         match p.current() {\n             IDENT | INT_NUMBER => {"}, {"sha": "ba6dd2fbcc4681944f039a321b5109cad9f0b054", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -75,9 +75,9 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T!['('] => tuple_expr(p),\n         T!['['] => array_expr(p),\n         L_DOLLAR => meta_var_expr(p),\n-        T![|] => lambda_expr(p),\n-        T![move] if la == T![|] => lambda_expr(p),\n-        T![async] if la == T![|] || (la == T![move] && p.nth(2) == T![|]) => lambda_expr(p),\n+        T![|] => closure_expr(p),\n+        T![move] if la == T![|] => closure_expr(p),\n+        T![async] if la == T![|] || (la == T![move] && p.nth(2) == T![|]) => closure_expr(p),\n         T![if] => if_expr(p),\n \n         T![loop] => loop_expr(p, None),\n@@ -228,7 +228,7 @@ fn array_expr(p: &mut Parser) -> CompletedMarker {\n //     move || {};\n //     async move || {};\n // }\n-fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n+fn closure_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(\n         p.at(T![|])\n             || (p.at(T![move]) && p.nth(1) == T![|])\n@@ -239,7 +239,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     p.eat(T![async]);\n     p.eat(T![move]);\n     params::param_list_closure(p);\n-    if opt_fn_ret_type(p) {\n+    if opt_ret_type(p) {\n         // test lambda_ret_block\n         // fn main() { || -> i32 { 92 }(); }\n         block_expr(p);\n@@ -265,7 +265,7 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![if]));\n     let m = p.start();\n     p.bump(T![if]);\n-    cond(p);\n+    condition(p);\n     block_expr(p);\n     if p.at(T![else]) {\n         p.bump(T![else]);\n@@ -314,7 +314,7 @@ fn while_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![while]));\n     let m = m.unwrap_or_else(|| p.start());\n     p.bump(T![while]);\n-    cond(p);\n+    condition(p);\n     block_expr(p);\n     m.complete(p, WHILE_EXPR)\n }\n@@ -342,7 +342,7 @@ fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n //     while let Some(_) | Some(_) = None {}\n //     while let | Some(_) = None {}\n // }\n-fn cond(p: &mut Parser) {\n+fn condition(p: &mut Parser) {\n     let m = p.start();\n     if p.eat(T![let]) {\n         patterns::pattern_top(p);\n@@ -386,7 +386,7 @@ pub(crate) fn match_arm_list(p: &mut Parser) {\n     //         _ => (),\n     //     }\n     // }\n-    attributes::inner_attributes(p);\n+    attributes::inner_attrs(p);\n \n     while !p.at(EOF) && !p.at(T!['}']) {\n         if p.at(T!['{']) {\n@@ -437,7 +437,7 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n     //         _ => (),\n     //     }\n     // }\n-    attributes::outer_attributes(p);\n+    attributes::outer_attrs(p);\n \n     patterns::pattern_top_r(p, TokenSet::EMPTY);\n     if p.at(T![if]) {"}, {"sha": "b2f7cc21f68122a12eec22394b5e06ad25f31853", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -6,9 +6,9 @@ mod traits;\n mod use_item;\n \n pub(crate) use self::{\n-    adt::{enum_variant_list, record_field_def_list},\n-    expressions::{match_arm_list, record_field_list},\n-    traits::{impl_item_list, trait_item_list},\n+    adt::{record_field_list, variant_list},\n+    expressions::{match_arm_list, record_expr_field_list},\n+    traits::assoc_item_list,\n     use_item::use_tree_list,\n };\n use super::*;\n@@ -20,7 +20,7 @@ use super::*;\n // super::baz! {}\n // struct S;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n-    attributes::inner_attributes(p);\n+    attributes::inner_attrs(p);\n     while !(stop_on_r_curly && p.at(T!['}']) || p.at(EOF)) {\n         item_or_macro(p, stop_on_r_curly)\n     }\n@@ -33,7 +33,7 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n \n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n     let m = p.start();\n-    attributes::outer_attributes(p);\n+    attributes::outer_attrs(p);\n     let m = match maybe_item(p, m) {\n         Ok(()) => {\n             if p.at(T![;]) {\n@@ -144,30 +144,30 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         // test fn\n         // fn foo() {}\n         T![fn] => {\n-            fn_def(p);\n+            fn_(p);\n             m.complete(p, FN);\n         }\n \n         // test trait\n         // trait T {}\n         T![trait] => {\n-            traits::trait_def(p);\n+            traits::trait_(p);\n             m.complete(p, TRAIT);\n         }\n \n         T![const] => {\n-            consts::const_def(p, m);\n+            consts::konst(p, m);\n         }\n \n         // test impl\n         // impl T for S {}\n         T![impl] => {\n-            traits::impl_def(p);\n+            traits::impl_(p);\n             m.complete(p, IMPL);\n         }\n \n         T![type] => {\n-            type_def(p, m);\n+            type_alias(p, m);\n         }\n         _ => {\n             if !has_visibility && !has_mods {\n@@ -190,9 +190,9 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     match p.current() {\n         // test extern_crate\n         // extern crate foo;\n-        T![extern] if la == T![crate] => extern_crate_item(p, m),\n+        T![extern] if la == T![crate] => extern_crate(p, m),\n         T![type] => {\n-            type_def(p, m);\n+            type_alias(p, m);\n         }\n         T![mod] => mod_item(p, m),\n         T![struct] => {\n@@ -205,7 +205,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            adt::struct_def(p, m);\n+            adt::strukt(p, m);\n         }\n         // test pub_macro_def\n         // pub macro m($:ident) {}\n@@ -219,12 +219,12 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            adt::union_def(p, m);\n+            adt::union(p, m);\n         }\n-        T![enum] => adt::enum_def(p, m),\n-        T![use] => use_item::use_item(p, m),\n-        T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::const_def(p, m),\n-        T![static] => consts::static_def(p, m),\n+        T![enum] => adt::enum_(p, m),\n+        T![use] => use_item::use_(p, m),\n+        T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::konst(p, m),\n+        T![static] => consts::static_(p, m),\n         // test extern_block\n         // extern {}\n         T![extern]\n@@ -239,7 +239,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     Ok(())\n }\n \n-fn extern_crate_item(p: &mut Parser, m: Marker) {\n+fn extern_crate(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![extern]));\n     p.bump(T![extern]);\n     assert!(p.at(T![crate]));\n@@ -251,7 +251,7 @@ fn extern_crate_item(p: &mut Parser, m: Marker) {\n         name_ref(p);\n     }\n \n-    opt_alias(p);\n+    opt_rename(p);\n     p.expect(T![;]);\n     m.complete(p, EXTERN_CRATE);\n }\n@@ -265,14 +265,14 @@ pub(crate) fn extern_item_list(p: &mut Parser) {\n     m.complete(p, EXTERN_ITEM_LIST);\n }\n \n-fn fn_def(p: &mut Parser) {\n+fn fn_(p: &mut Parser) {\n     assert!(p.at(T![fn]));\n     p.bump(T![fn]);\n \n     name_r(p, ITEM_RECOVERY_SET);\n     // test function_type_params\n     // fn foo<T: Clone + Copy>(){}\n-    type_params::opt_type_param_list(p);\n+    type_params::opt_generic_param_list(p);\n \n     if p.at(T!['(']) {\n         params::param_list_fn_def(p);\n@@ -282,7 +282,7 @@ fn fn_def(p: &mut Parser) {\n     // test function_ret_type\n     // fn foo() {}\n     // fn bar() -> () {}\n-    opt_fn_ret_type(p);\n+    opt_ret_type(p);\n \n     // test function_where_clause\n     // fn foo<T>() where T: Copy {}\n@@ -299,15 +299,15 @@ fn fn_def(p: &mut Parser) {\n \n // test type_item\n // type Foo = Bar;\n-fn type_def(p: &mut Parser, m: Marker) {\n+fn type_alias(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![type]));\n     p.bump(T![type]);\n \n     name(p);\n \n     // test type_item_type_params\n     // type Result<T> = ();\n-    type_params::opt_type_param_list(p);\n+    type_params::opt_generic_param_list(p);\n \n     if p.at(T![:]) {\n         type_params::bounds(p);\n@@ -329,14 +329,14 @@ pub(crate) fn mod_item(p: &mut Parser, m: Marker) {\n \n     name(p);\n     if p.at(T!['{']) {\n-        mod_item_list(p);\n+        item_list(p);\n     } else if !p.eat(T![;]) {\n         p.error(\"expected `;` or `{`\");\n     }\n     m.complete(p, MODULE);\n }\n \n-pub(crate) fn mod_item_list(p: &mut Parser) {\n+pub(crate) fn item_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);"}, {"sha": "67c0c56970716b7e717b586a3dc83191ec5b0937", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,29 +2,29 @@\n \n use super::*;\n \n-pub(super) fn struct_def(p: &mut Parser, m: Marker) {\n+pub(super) fn strukt(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![struct]));\n     p.bump(T![struct]);\n     struct_or_union(p, m, T![struct], STRUCT);\n }\n \n-pub(super) fn union_def(p: &mut Parser, m: Marker) {\n+pub(super) fn union(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"union\"));\n     p.bump_remap(T![union]);\n     struct_or_union(p, m, T![union], UNION);\n }\n \n fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n     name_r(p, ITEM_RECOVERY_SET);\n-    type_params::opt_type_param_list(p);\n+    type_params::opt_generic_param_list(p);\n     match p.current() {\n         T![where] => {\n             type_params::opt_where_clause(p);\n             match p.current() {\n                 T![;] => {\n                     p.bump(T![;]);\n                 }\n-                T!['{'] => record_field_def_list(p),\n+                T!['{'] => record_field_list(p),\n                 _ => {\n                     //FIXME: special case `(` error message\n                     p.error(\"expected `;` or `{`\");\n@@ -34,9 +34,9 @@ fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n         T![;] if kw == T![struct] => {\n             p.bump(T![;]);\n         }\n-        T!['{'] => record_field_def_list(p),\n+        T!['{'] => record_field_list(p),\n         T!['('] if kw == T![struct] => {\n-            tuple_field_def_list(p);\n+            tuple_field_list(p);\n             // test tuple_struct_where\n             // struct Test<T>(T) where T: Clone;\n             // struct Test<T>(T);\n@@ -53,21 +53,21 @@ fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n     m.complete(p, def);\n }\n \n-pub(super) fn enum_def(p: &mut Parser, m: Marker) {\n+pub(super) fn enum_(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![enum]));\n     p.bump(T![enum]);\n     name_r(p, ITEM_RECOVERY_SET);\n-    type_params::opt_type_param_list(p);\n+    type_params::opt_generic_param_list(p);\n     type_params::opt_where_clause(p);\n     if p.at(T!['{']) {\n-        enum_variant_list(p);\n+        variant_list(p);\n     } else {\n         p.error(\"expected `{`\")\n     }\n     m.complete(p, ENUM);\n }\n \n-pub(crate) fn enum_variant_list(p: &mut Parser) {\n+pub(crate) fn variant_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);\n@@ -77,12 +77,12 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n             continue;\n         }\n         let var = p.start();\n-        attributes::outer_attributes(p);\n+        attributes::outer_attrs(p);\n         if p.at(IDENT) {\n             name(p);\n             match p.current() {\n-                T!['{'] => record_field_def_list(p),\n-                T!['('] => tuple_field_def_list(p),\n+                T!['{'] => record_field_list(p),\n+                T!['('] => tuple_field_list(p),\n                 _ => (),\n             }\n \n@@ -104,7 +104,7 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n     m.complete(p, VARIANT_LIST);\n }\n \n-pub(crate) fn record_field_def_list(p: &mut Parser) {\n+pub(crate) fn record_field_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);\n@@ -128,7 +128,7 @@ pub(crate) fn record_field_def_list(p: &mut Parser) {\n         //     #[serde(with = \"url_serde\")]\n         //     pub uri: Uri,\n         // }\n-        attributes::outer_attributes(p);\n+        attributes::outer_attrs(p);\n         opt_visibility(p);\n         if p.at(IDENT) {\n             name(p);\n@@ -142,7 +142,7 @@ pub(crate) fn record_field_def_list(p: &mut Parser) {\n     }\n }\n \n-fn tuple_field_def_list(p: &mut Parser) {\n+fn tuple_field_list(p: &mut Parser) {\n     assert!(p.at(T!['(']));\n     let m = p.start();\n     if !p.expect(T!['(']) {\n@@ -159,7 +159,7 @@ fn tuple_field_def_list(p: &mut Parser) {\n         // enum S {\n         //     Uri(#[serde(with = \"url_serde\")] Uri),\n         // }\n-        attributes::outer_attributes(p);\n+        attributes::outer_attrs(p);\n         opt_visibility(p);\n         if !p.at_ts(types::TYPE_FIRST) {\n             p.error(\"expected a type\");"}, {"sha": "eb7d1f8281dee00d6d2fab4f316663d36e13d597", "filename": "crates/parser/src/grammar/items/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,11 +2,11 @@\n \n use super::*;\n \n-pub(super) fn static_def(p: &mut Parser, m: Marker) {\n+pub(super) fn static_(p: &mut Parser, m: Marker) {\n     const_or_static(p, m, T![static], STATIC)\n }\n \n-pub(super) fn const_def(p: &mut Parser, m: Marker) {\n+pub(super) fn konst(p: &mut Parser, m: Marker) {\n     const_or_static(p, m, T![const], CONST)\n }\n "}, {"sha": "8394020dafae3b70d3daa24f637147470237dfa8", "filename": "crates/parser/src/grammar/items/traits.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -5,11 +5,11 @@ use super::*;\n // test trait_item\n // trait T<U>: Hash + Clone where U: Copy {}\n // trait X<U: Debug + Display>: Hash + Clone where U: Copy {}\n-pub(super) fn trait_def(p: &mut Parser) {\n+pub(super) fn trait_(p: &mut Parser) {\n     assert!(p.at(T![trait]));\n     p.bump(T![trait]);\n     name_r(p, ITEM_RECOVERY_SET);\n-    type_params::opt_type_param_list(p);\n+    type_params::opt_generic_param_list(p);\n     // test trait_alias\n     // trait Z<U> = T<U>;\n     // trait Z<U> = T<U> where U: Copy;\n@@ -25,41 +25,19 @@ pub(super) fn trait_def(p: &mut Parser) {\n     }\n     type_params::opt_where_clause(p);\n     if p.at(T!['{']) {\n-        trait_item_list(p);\n+        assoc_item_list(p);\n     } else {\n         p.error(\"expected `{`\");\n     }\n }\n \n-// test trait_item_list\n-// impl F {\n-//     type A: Clone;\n-//     const B: i32;\n-//     fn foo() {}\n-//     fn bar(&self);\n-// }\n-pub(crate) fn trait_item_list(p: &mut Parser) {\n-    assert!(p.at(T!['{']));\n-    let m = p.start();\n-    p.bump(T!['{']);\n-    while !p.at(EOF) && !p.at(T!['}']) {\n-        if p.at(T!['{']) {\n-            error_block(p, \"expected an item\");\n-            continue;\n-        }\n-        item_or_macro(p, true);\n-    }\n-    p.expect(T!['}']);\n-    m.complete(p, ASSOC_ITEM_LIST);\n-}\n-\n // test impl_def\n // impl Foo {}\n-pub(super) fn impl_def(p: &mut Parser) {\n+pub(super) fn impl_(p: &mut Parser) {\n     assert!(p.at(T![impl]));\n     p.bump(T![impl]);\n     if choose_type_params_over_qpath(p) {\n-        type_params::opt_type_param_list(p);\n+        type_params::opt_generic_param_list(p);\n     }\n \n     // FIXME: never type\n@@ -74,7 +52,7 @@ pub(super) fn impl_def(p: &mut Parser) {\n     }\n     type_params::opt_where_clause(p);\n     if p.at(T!['{']) {\n-        impl_item_list(p);\n+        assoc_item_list(p);\n     } else {\n         p.error(\"expected `{`\");\n     }\n@@ -87,7 +65,7 @@ pub(super) fn impl_def(p: &mut Parser) {\n //     fn foo() {}\n //     fn bar(&self) {}\n // }\n-pub(crate) fn impl_item_list(p: &mut Parser) {\n+pub(crate) fn assoc_item_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);\n@@ -97,7 +75,7 @@ pub(crate) fn impl_item_list(p: &mut Parser) {\n     //      //! This is a doc comment\n     //      #![doc(\"This is also a doc comment\")]\n     // }\n-    attributes::inner_attributes(p);\n+    attributes::inner_attrs(p);\n \n     while !p.at(EOF) && !p.at(T!['}']) {\n         if p.at(T!['{']) {"}, {"sha": "20e6a13cf96da0933c2ce7947ec1d160e6c0a4b0", "filename": "crates/parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,7 +2,7 @@\n \n use super::*;\n \n-pub(super) fn use_item(p: &mut Parser, m: Marker) {\n+pub(super) fn use_(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![use]));\n     p.bump(T![use]);\n     use_tree(p, true);\n@@ -80,7 +80,7 @@ fn use_tree(p: &mut Parser, top_level: bool) {\n                     //  running::out::of::synonyms::for_::different::*\n                     // };\n                     // use Trait as _;\n-                    opt_alias(p);\n+                    opt_rename(p);\n                 }\n                 T![:] if p.at(T![::]) => {\n                     p.bump(T![::]);"}, {"sha": "a665ffc133c9a97816c15a197b9478d2a551a548", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -47,20 +47,20 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n     if let FnDef = flavor {\n         // test self_param_outer_attr\n         // fn f(#[must_use] self) {}\n-        attributes::outer_attributes(p);\n+        attributes::outer_attrs(p);\n         opt_self_param(p);\n     }\n \n     while !p.at(EOF) && !p.at(ket) {\n         // test param_outer_arg\n         // fn f(#[attr1] pat: Type) {}\n-        attributes::outer_attributes(p);\n+        attributes::outer_attrs(p);\n \n-        if !p.at_ts(VALUE_PARAMETER_FIRST) {\n+        if !p.at_ts(PARAM_FIRST) {\n             p.error(\"expected value parameter\");\n             break;\n         }\n-        let param = value_parameter(p, flavor);\n+        let param = param(p, flavor);\n         if !p.at(ket) {\n             p.expect(T![,]);\n         }\n@@ -73,11 +73,11 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n     m.complete(p, PARAM_LIST);\n }\n \n-const VALUE_PARAMETER_FIRST: TokenSet = patterns::PATTERN_FIRST.union(types::TYPE_FIRST);\n+const PARAM_FIRST: TokenSet = patterns::PATTERN_FIRST.union(types::TYPE_FIRST);\n \n struct Variadic(bool);\n \n-fn value_parameter(p: &mut Parser, flavor: Flavor) -> Variadic {\n+fn param(p: &mut Parser, flavor: Flavor) -> Variadic {\n     let mut res = Variadic(false);\n     let m = p.start();\n     match flavor {"}, {"sha": "52562afa41c7c0fde56041e974727fc10ee38128", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -105,11 +105,11 @@ fn opt_path_type_args(p: &mut Parser, mode: Mode) {\n             // type F = Box<Fn(i32) -> ()>;\n             if p.at(T!['(']) {\n                 params::param_list_fn_trait(p);\n-                opt_fn_ret_type(p);\n+                opt_ret_type(p);\n             } else {\n-                type_args::opt_type_arg_list(p, false)\n+                type_args::opt_generic_arg_list(p, false)\n             }\n         }\n-        Mode::Expr => type_args::opt_type_arg_list(p, true),\n+        Mode::Expr => type_args::opt_generic_arg_list(p, true),\n     }\n }"}, {"sha": "07b1d6dd53c4c8c8516dab3392d4d19d8553aaef", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -79,22 +79,22 @@ const PAT_RECOVERY_SET: TokenSet =\n fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     let m = match p.nth(0) {\n         T![box] => box_pat(p),\n-        T![ref] | T![mut] => bind_pat(p, true),\n+        T![ref] | T![mut] => ident_pat(p, true),\n         IDENT => match p.nth(1) {\n             // Checks the token after an IDENT to see if a pattern is a path (Struct { .. }) or macro\n             // (T![x]).\n             T!['('] | T!['{'] | T![!] => path_or_macro_pat(p),\n             T![:] if p.nth_at(1, T![::]) => path_or_macro_pat(p),\n-            _ => bind_pat(p, true),\n+            _ => ident_pat(p, true),\n         },\n \n         // test type_path_in_pattern\n         // fn main() { let <_>::Foo = (); }\n         _ if paths::is_path_start(p) => path_or_macro_pat(p),\n         _ if is_literal_pat_start(p) => literal_pat(p),\n \n-        T![.] if p.at(T![..]) => dot_dot_pat(p),\n-        T![_] => placeholder_pat(p),\n+        T![.] if p.at(T![..]) => rest_pat(p),\n+        T![_] => wildcard_pat(p),\n         T![&] => ref_pat(p),\n         T!['('] => tuple_pat(p),\n         T!['['] => slice_pat(p),\n@@ -149,7 +149,7 @@ fn path_or_macro_pat(p: &mut Parser) -> CompletedMarker {\n             TUPLE_STRUCT_PAT\n         }\n         T!['{'] => {\n-            record_field_pat_list(p);\n+            record_pat_field_list(p);\n             RECORD_PAT\n         }\n         // test marco_pat\n@@ -186,7 +186,7 @@ fn tuple_pat_fields(p: &mut Parser) {\n //     let S { h: _, ..} = ();\n //     let S { h: _, } = ();\n // }\n-fn record_field_pat_list(p: &mut Parser) {\n+fn record_pat_field_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);\n@@ -214,7 +214,7 @@ fn record_field_pat_list(p: &mut Parser) {\n                         box_pat(p);\n                     }\n                     _ => {\n-                        bind_pat(p, false);\n+                        ident_pat(p, false);\n                     }\n                 }\n                 m.complete(p, RECORD_PAT_FIELD);\n@@ -230,7 +230,7 @@ fn record_field_pat_list(p: &mut Parser) {\n \n // test placeholder_pat\n // fn main() { let _ = (); }\n-fn placeholder_pat(p: &mut Parser) -> CompletedMarker {\n+fn wildcard_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![_]));\n     let m = p.start();\n     p.bump(T![_]);\n@@ -263,7 +263,7 @@ fn placeholder_pat(p: &mut Parser) -> CompletedMarker {\n //     let [head, .., mid, tail @ ..] = ();\n //     let [head, .., mid, .., cons] = ();\n // }\n-fn dot_dot_pat(p: &mut Parser) -> CompletedMarker {\n+fn rest_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![..]));\n     let m = p.start();\n     p.bump(T![..]);\n@@ -353,7 +353,7 @@ fn pat_list(p: &mut Parser, ket: SyntaxKind) {\n //     let e @ _ = ();\n //     let ref mut f @ g @ _ = ();\n // }\n-fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n+fn ident_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     let m = p.start();\n     p.eat(T![ref]);\n     p.eat(T![mut]);"}, {"sha": "f2d34a749955f1f58ff3f5aaf4e407663e5e6dd5", "filename": "crates/parser/src/grammar/type_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,7 +2,7 @@\n \n use super::*;\n \n-pub(super) fn opt_type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n+pub(super) fn opt_generic_arg_list(p: &mut Parser, colon_colon_required: bool) {\n     let m;\n     if p.at(T![::]) && p.nth(2) == T![<] {\n         m = p.start();\n@@ -16,7 +16,7 @@ pub(super) fn opt_type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n     }\n \n     while !p.at(EOF) && !p.at(T![>]) {\n-        type_arg(p);\n+        generic_arg(p);\n         if !p.at(T![>]) && !p.expect(T![,]) {\n             break;\n         }\n@@ -27,7 +27,7 @@ pub(super) fn opt_type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n \n // test type_arg\n // type A = B<'static, i32, 1, { 2 }, Item=u64>;\n-fn type_arg(p: &mut Parser) {\n+fn generic_arg(p: &mut Parser) {\n     let m = p.start();\n     match p.current() {\n         LIFETIME => {"}, {"sha": "bc7d8d7244a3b5ed574187461776cddba7b8552b", "filename": "crates/parser/src/grammar/type_params.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,14 +2,14 @@\n \n use super::*;\n \n-pub(super) fn opt_type_param_list(p: &mut Parser) {\n+pub(super) fn opt_generic_param_list(p: &mut Parser) {\n     if !p.at(T![<]) {\n         return;\n     }\n-    type_param_list(p);\n+    generic_param_list(p);\n }\n \n-fn type_param_list(p: &mut Parser) {\n+fn generic_param_list(p: &mut Parser) {\n     assert!(p.at(T![<]));\n     let m = p.start();\n     p.bump(T![<]);\n@@ -20,12 +20,12 @@ fn type_param_list(p: &mut Parser) {\n         // test generic_lifetime_type_attribute\n         // fn foo<#[derive(Lifetime)] 'a, #[derive(Type)] T>(_: &'a T) {\n         // }\n-        attributes::outer_attributes(p);\n+        attributes::outer_attrs(p);\n \n         match p.current() {\n             LIFETIME => lifetime_param(p, m),\n             IDENT => type_param(p, m),\n-            CONST_KW => type_const_param(p, m),\n+            CONST_KW => const_param(p, m),\n             _ => {\n                 m.abandon(p);\n                 p.err_and_bump(\"expected type parameter\")\n@@ -65,7 +65,7 @@ fn type_param(p: &mut Parser, m: Marker) {\n \n // test const_param\n // struct S<const N: u32>;\n-fn type_const_param(p: &mut Parser, m: Marker) {\n+fn const_param(p: &mut Parser, m: Marker) {\n     assert!(p.at(CONST_KW));\n     p.bump(T![const]);\n     name(p);"}, {"sha": "c876545f441d9918bec4af35bd845107a44f51af", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -32,11 +32,11 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n     match p.current() {\n         T!['('] => paren_or_tuple_type(p),\n         T![!] => never_type(p),\n-        T![*] => pointer_type(p),\n+        T![*] => ptr_type(p),\n         T!['['] => array_or_slice_type(p),\n-        T![&] => reference_type(p),\n-        T![_] => placeholder_type(p),\n-        T![fn] | T![unsafe] | T![extern] => fn_pointer_type(p),\n+        T![&] => ref_type(p),\n+        T![_] => infer_type(p),\n+        T![fn] | T![unsafe] | T![extern] => fn_ptr_type(p),\n         T![for] => for_type(p),\n         T![impl] => impl_trait_type(p),\n         T![dyn] => dyn_trait_type(p),\n@@ -96,7 +96,7 @@ fn never_type(p: &mut Parser) {\n     m.complete(p, NEVER_TYPE);\n }\n \n-fn pointer_type(p: &mut Parser) {\n+fn ptr_type(p: &mut Parser) {\n     assert!(p.at(T![*]));\n     let m = p.start();\n     p.bump(T![*]);\n@@ -156,7 +156,7 @@ fn array_or_slice_type(p: &mut Parser) {\n // type A = &();\n // type B = &'static ();\n // type C = &mut ();\n-fn reference_type(p: &mut Parser) {\n+fn ref_type(p: &mut Parser) {\n     assert!(p.at(T![&]));\n     let m = p.start();\n     p.bump(T![&]);\n@@ -168,7 +168,7 @@ fn reference_type(p: &mut Parser) {\n \n // test placeholder_type\n // type Placeholder = _;\n-fn placeholder_type(p: &mut Parser) {\n+fn infer_type(p: &mut Parser) {\n     assert!(p.at(T![_]));\n     let m = p.start();\n     p.bump(T![_]);\n@@ -180,7 +180,7 @@ fn placeholder_type(p: &mut Parser) {\n // type B = unsafe fn();\n // type C = unsafe extern \"C\" fn();\n // type D = extern \"C\" fn ( u8 , ... ) -> u8;\n-fn fn_pointer_type(p: &mut Parser) {\n+fn fn_ptr_type(p: &mut Parser) {\n     let m = p.start();\n     p.eat(T![unsafe]);\n     if p.at(T![extern]) {\n@@ -200,15 +200,15 @@ fn fn_pointer_type(p: &mut Parser) {\n     }\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n-    opt_fn_ret_type(p);\n+    opt_ret_type(p);\n     m.complete(p, FN_PTR_TYPE);\n }\n \n pub(super) fn for_binder(p: &mut Parser) {\n     assert!(p.at(T![for]));\n     p.bump(T![for]);\n     if p.at(T![<]) {\n-        type_params::opt_type_param_list(p);\n+        type_params::opt_generic_param_list(p);\n     } else {\n         p.error(\"expected `<`\");\n     }"}, {"sha": "5ac18d63b350acfc0e99587c4fed0fd3b5c323a4", "filename": "crates/paths/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fpaths%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fpaths%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,9 +1,9 @@\n [package]\n name = \"paths\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n-license = \"MIT OR Apache-2.0\"\n \n [lib]\n doctest = false"}, {"sha": "a3a4c1103332e883624fb9d31685f00f16ca7cd9", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,10 +1,9 @@\n [package]\n-edition = \"2018\"\n name = \"proc_macro_api\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n-publish = false\n+version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false"}, {"sha": "c7c1eda0fda4a019c2934f709fbcfd18b29212a0", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,10 +1,10 @@\n [package]\n-edition = \"2018\"\n name = \"rust-analyzer\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n autobins = false\n-license = \"MIT OR Apache-2.0\"\n+edition = \"2018\"\n \n [lib]\n doctest = false\n@@ -30,12 +30,11 @@ serde_json = \"1.0.48\"\n threadpool = \"1.7.1\"\n rayon = \"1.3.1\"\n mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n+lsp-server = \"0.3.3\"\n \n stdx = { path = \"../stdx\" }\n-\n-lsp-server = \"0.3.3\"\n flycheck = { path = \"../flycheck\" }\n-ra_ide = { path = \"../ra_ide\" }\n+ide = { path = \"../ide\" }\n profile = { path = \"../profile\" }\n project_model = { path = \"../project_model\" }\n syntax = { path = \"../syntax\" }"}, {"sha": "3041915e1866028d96d6b69f82e355d27e46fe6b", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,8 +1,8 @@\n //! See `CargoTargetSpec`\n \n use cfg::CfgExpr;\n+use ide::{FileId, RunnableKind, TestId};\n use project_model::{self, TargetKind};\n-use ra_ide::{FileId, RunnableKind, TestId};\n use vfs::AbsPathBuf;\n \n use crate::{global_state::GlobalStateSnapshot, Result};"}, {"sha": "6966ee576ffce64777c49f70966f0d246e13b3d2", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -10,7 +10,7 @@ mod ssr;\n use std::io::Read;\n \n use anyhow::Result;\n-use ra_ide::Analysis;\n+use ide::Analysis;\n use syntax::{AstNode, SourceFile};\n \n pub use self::{"}, {"sha": "0f614f9e0c5ed8611426535c978e1d5996e9fc9f", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -7,7 +7,7 @@ use base_db::{\n     salsa::{Database, Durability},\n     FileId,\n };\n-use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosition, LineCol};\n+use ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosition, LineCol};\n use vfs::AbsPathBuf;\n \n use crate::{"}, {"sha": "3371c4fd30192a4324a94cd0c59d9cc76be3fc09", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashSet;\n \n use base_db::SourceDatabaseExt;\n use hir::Crate;\n-use ra_ide::Severity;\n+use ide::Severity;\n \n use crate::cli::{load_cargo::load_cargo, Result};\n "}, {"sha": "c47cf6ef3e4a29e680d046f781815e3abbaf3244", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -5,8 +5,8 @@ use std::{path::Path, sync::Arc};\n use anyhow::Result;\n use base_db::CrateGraph;\n use crossbeam_channel::{unbounded, Receiver};\n+use ide::{AnalysisChange, AnalysisHost};\n use project_model::{CargoConfig, ProcMacroClient, ProjectManifest, ProjectWorkspace};\n-use ra_ide::{AnalysisChange, AnalysisHost};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::reload::{ProjectFolders, SourceRootConfig};"}, {"sha": "33fb5e9c225314a1d47dd669716fb986821974c7", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -10,9 +10,9 @@\n use std::{ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n+use ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n use lsp_types::ClientCapabilities;\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n-use ra_ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n use serde::Deserialize;\n use vfs::AbsPathBuf;\n "}, {"sha": "108df3eb048b5d788669903754d5433076716345", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -3,7 +3,7 @@ pub(crate) mod to_proto;\n \n use std::{mem, sync::Arc};\n \n-use ra_ide::FileId;\n+use ide::FileId;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::lsp_ext;"}, {"sha": "5b9f52993dd602114488471f9cbbaec82c22e67d", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,7 +2,7 @@\n use std::convert::TryFrom;\n \n use base_db::{FileId, FilePosition, FileRange};\n-use ra_ide::{AssistKind, LineCol, LineIndex};\n+use ide::{AssistKind, LineCol, LineIndex};\n use syntax::{TextRange, TextSize};\n use vfs::AbsPathBuf;\n "}, {"sha": "212f98a3005c09c3839d5f8d825b6c0ede84b7d3", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -8,10 +8,10 @@ use std::{sync::Arc, time::Instant};\n use base_db::{CrateId, VfsPath};\n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n+use ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n-use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n use rustc_hash::FxHashMap;\n \n use crate::{"}, {"sha": "74f73655a4e69327a85bcf84823f57b42c70c384", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,12 +1,16 @@\n //! This module is responsible for implementing handlers for Language Server\n //! Protocol. The majority of requests are fulfilled by calling into the\n-//! `ra_ide` crate.\n+//! `ide` crate.\n \n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n };\n \n+use ide::{\n+    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n+    RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n+};\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n@@ -19,10 +23,6 @@ use lsp_types::{\n     TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n-use ra_ide::{\n-    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n-    RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n-};\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n use stdx::{format_to, split_once};\n@@ -212,7 +212,7 @@ pub(crate) fn handle_on_type_formatting(\n     let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let line_endings = snap.file_line_endings(position.file_id);\n \n-    // in `ra_ide`, the `on_type` invariant is that\n+    // in `ide`, the `on_type` invariant is that\n     // `text.char_at(position) == typed_char`.\n     position.offset -= TextSize::of('.');\n     let char_typed = params.ch.chars().next().unwrap_or('\\0');"}, {"sha": "87f72b497467a791fe36b7cee68d93d09062eeaa", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,6 +1,6 @@\n //! Implementation of the LSP for rust-analyzer.\n //!\n-//! This crate takes Rust-specific analysis results from ra_ide and translates\n+//! This crate takes Rust-specific analysis results from ide and translates\n //! into LSP types.\n //!\n //! It also is the root of all state. `world` module defines the bulk of the\n@@ -41,7 +41,7 @@ use serde::de::DeserializeOwned;\n \n pub type Result<T, E = Box<dyn std::error::Error + Send + Sync>> = std::result::Result<T, E>;\n pub use crate::{caps::server_capabilities, main_loop::main_loop};\n-use ra_ide::AnalysisHost;\n+use ide::AnalysisHost;\n use std::fmt;\n use vfs::Vfs;\n "}, {"sha": "85c6615714838973c58984d0ecdb9d8c0ffe5e5c", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -2,8 +2,8 @@\n use std::{error::Error, ops::Range};\n \n use base_db::Canceled;\n+use ide::LineIndex;\n use lsp_server::Notification;\n-use ra_ide::LineIndex;\n \n use crate::{from_proto, global_state::GlobalState};\n "}, {"sha": "66e04653a31a6ac90ba1db7607140f29d20b5fc3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -7,9 +7,9 @@ use std::{\n \n use base_db::VfsPath;\n use crossbeam_channel::{select, Receiver};\n+use ide::{Canceled, FileId};\n use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n-use ra_ide::{Canceled, FileId};\n \n use crate::{\n     config::Config,"}, {"sha": "a2cfb4e0d5ca5f6bf6203099a87f5eadc2282dd0", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -3,8 +3,8 @@ use std::{mem, sync::Arc};\n \n use base_db::{CrateGraph, SourceRoot, VfsPath};\n use flycheck::FlycheckHandle;\n+use ide::AnalysisChange;\n use project_model::{ProcMacroClient, ProjectWorkspace};\n-use ra_ide::AnalysisChange;\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{"}, {"sha": "8a2cfa2aee1a7fc4689202441d734d759511e3a7", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -5,13 +5,13 @@ use std::{\n };\n \n use base_db::{FileId, FileRange};\n-use itertools::Itertools;\n-use ra_ide::{\n+use ide::{\n     Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation,\n     FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag, HighlightedRange,\n     Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget,\n     ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n+use itertools::Itertools;\n use syntax::{SyntaxKind, TextRange, TextSize};\n \n use crate::{\n@@ -761,7 +761,7 @@ pub(crate) fn markup_content(markup: Markup) -> lsp_types::MarkupContent {\n \n #[cfg(test)]\n mod tests {\n-    use ra_ide::Analysis;\n+    use ide::Analysis;\n \n     use super::*;\n "}, {"sha": "56c1f776187e3a4a78597f2d1d62e8facb0d0c7d", "filename": "crates/ssr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"ssr\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n description = \"Structural search and replace of Rust code\"\n license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-analyzer/rust-analyzer\""}, {"sha": "b186b46f2984e8d3c45ba47aabd7adc28024305e", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,9 +1,9 @@\n [package]\n name = \"stdx\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n-license = \"MIT OR Apache-2.0\"\n \n [lib]\n doctest = false"}, {"sha": "c7289e4008adf9a2431729e56fe5fe55d682751d", "filename": "crates/syntax/test_data/parser/inline/ok/0001_trait_item_list.rast", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/00fb411f3edea72a1a9739f7df6f21cca045730b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/00fb411f3edea72a1a9739f7df6f21cca045730b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast?ref=00fb411f3edea72a1a9739f7df6f21cca045730b", "patch": "@@ -1,71 +0,0 @@\n-SOURCE_FILE@0..83\n-  IMPL@0..82\n-    IMPL_KW@0..4 \"impl\"\n-    WHITESPACE@4..5 \" \"\n-    PATH_TYPE@5..6\n-      PATH@5..6\n-        PATH_SEGMENT@5..6\n-          NAME_REF@5..6\n-            IDENT@5..6 \"F\"\n-    WHITESPACE@6..7 \" \"\n-    ASSOC_ITEM_LIST@7..82\n-      L_CURLY@7..8 \"{\"\n-      WHITESPACE@8..13 \"\\n    \"\n-      TYPE_ALIAS@13..27\n-        TYPE_KW@13..17 \"type\"\n-        WHITESPACE@17..18 \" \"\n-        NAME@18..19\n-          IDENT@18..19 \"A\"\n-        COLON@19..20 \":\"\n-        WHITESPACE@20..21 \" \"\n-        TYPE_BOUND_LIST@21..26\n-          TYPE_BOUND@21..26\n-            PATH_TYPE@21..26\n-              PATH@21..26\n-                PATH_SEGMENT@21..26\n-                  NAME_REF@21..26\n-                    IDENT@21..26 \"Clone\"\n-        SEMICOLON@26..27 \";\"\n-      WHITESPACE@27..32 \"\\n    \"\n-      CONST@32..45\n-        CONST_KW@32..37 \"const\"\n-        WHITESPACE@37..38 \" \"\n-        NAME@38..39\n-          IDENT@38..39 \"B\"\n-        COLON@39..40 \":\"\n-        WHITESPACE@40..41 \" \"\n-        PATH_TYPE@41..44\n-          PATH@41..44\n-            PATH_SEGMENT@41..44\n-              NAME_REF@41..44\n-                IDENT@41..44 \"i32\"\n-        SEMICOLON@44..45 \";\"\n-      WHITESPACE@45..50 \"\\n    \"\n-      FN@50..61\n-        FN_KW@50..52 \"fn\"\n-        WHITESPACE@52..53 \" \"\n-        NAME@53..56\n-          IDENT@53..56 \"foo\"\n-        PARAM_LIST@56..58\n-          L_PAREN@56..57 \"(\"\n-          R_PAREN@57..58 \")\"\n-        WHITESPACE@58..59 \" \"\n-        BLOCK_EXPR@59..61\n-          L_CURLY@59..60 \"{\"\n-          R_CURLY@60..61 \"}\"\n-      WHITESPACE@61..66 \"\\n    \"\n-      FN@66..80\n-        FN_KW@66..68 \"fn\"\n-        WHITESPACE@68..69 \" \"\n-        NAME@69..72\n-          IDENT@69..72 \"bar\"\n-        PARAM_LIST@72..79\n-          L_PAREN@72..73 \"(\"\n-          SELF_PARAM@73..78\n-            AMP@73..74 \"&\"\n-            SELF_KW@74..78 \"self\"\n-          R_PAREN@78..79 \")\"\n-        SEMICOLON@79..80 \";\"\n-      WHITESPACE@80..81 \"\\n\"\n-      R_CURLY@81..82 \"}\"\n-  WHITESPACE@82..83 \"\\n\""}, {"sha": "a5ec3239f8fe2a060fbfbce7f86f192ae72a0f5a", "filename": "crates/syntax/test_data/parser/inline/ok/0001_trait_item_list.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00fb411f3edea72a1a9739f7df6f21cca045730b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fb411f3edea72a1a9739f7df6f21cca045730b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rs?ref=00fb411f3edea72a1a9739f7df6f21cca045730b", "patch": "@@ -1,6 +0,0 @@\n-impl F {\n-    type A: Clone;\n-    const B: i32;\n-    fn foo() {}\n-    fn bar(&self);\n-}"}, {"sha": "45e5fb97f7a24ee45e47096ab37cb0adc5ba2e15", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,9 +1,9 @@\n [package]\n-edition = \"2018\"\n name = \"test_utils\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n+version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false\n@@ -14,4 +14,5 @@ difference = \"2.0.0\"\n text-size = \"1.0.0\"\n serde_json = \"1.0.48\"\n rustc-hash = \"1.1.0\"\n+\n stdx = { path = \"../stdx\" }"}, {"sha": "c1e53f4b150eb294c69c5c67349f8838e3a0230f", "filename": "crates/vfs-notify/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fvfs-notify%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fvfs-notify%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,9 +1,9 @@\n [package]\n name = \"vfs-notify\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n-license = \"MIT OR Apache-2.0\"\n \n [lib]\n doctest = false"}, {"sha": "9ae8f19b6f9023157a9e626752666d0767cd8c80", "filename": "crates/vfs/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fvfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/crates%2Fvfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2FCargo.toml?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -1,9 +1,9 @@\n [package]\n name = \"vfs\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n-license = \"MIT OR Apache-2.0\"\n \n [lib]\n doctest = false"}, {"sha": "ad18217f177fd9661bb0fe51c4d3a460855a3646", "filename": "docs/dev/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -14,7 +14,7 @@ To learn more about how rust-analyzer works, see\n \n We also publish rustdoc docs to pages:\n \n-https://rust-analyzer.github.io/rust-analyzer/ra_ide/\n+https://rust-analyzer.github.io/rust-analyzer/ide/\n \n Various organizational and process issues are discussed in this document.\n \n@@ -159,7 +159,7 @@ IDE should use only types from `hir`, and should not depend on the underling com\n \n ## IDE API\n \n-The main IDE crate (`ra_ide`) uses \"Plain Old Data\" for the API.\n+The main IDE crate (`ide`) uses \"Plain Old Data\" for the API.\n Rather than talking in definitions and references, it talks in Strings and textual offsets.\n In general, API is centered around UI concerns -- the result of the call is what the user sees in the editor, and not what the compiler sees underneath.\n The results are 100% Rust specific though."}, {"sha": "6f1377f2f0c5a542b3319e284a7c486a90d7cefb", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -118,7 +118,7 @@ directly query the database.\n \n The top-level `hir` fa\u00e7ade crate wraps ids into a more OO-flavored API.\n \n-### `crates/ra_ide`\n+### `crates/ide`\n \n A stateful library for analyzing many Rust files as they change. `AnalysisHost`\n is a mutable entity (clojure's atom) which holds the current state, incorporates\n@@ -136,11 +136,11 @@ offsets and strings as output. This works on top of rich code model powered by\n \n ### `crates/rust-analyzer`\n \n-An LSP implementation which wraps `ra_ide` into a language server protocol.\n+An LSP implementation which wraps `ide` into a language server protocol.\n \n ### `ra_vfs`\n \n-Although `hir` and `ra_ide` don't do any IO, we need to be able to read\n+Although `hir` and `ide` don't do any IO, we need to be able to read\n files from disk at the end of the day. This is what `ra_vfs` does. It also\n manages overlays: \"dirty\" files in the editor, whose \"true\" contents is\n different from data on disk. This is more or less the single really\n@@ -161,7 +161,7 @@ disk. For this reason, we try to avoid writing too many tests on this boundary:\n in a statically typed language, it's hard to make an error in the protocol\n itself if messages are themselves typed.\n \n-The middle, and most important, boundary is `ra_ide`. Unlike\n+The middle, and most important, boundary is `ide`. Unlike\n `rust-analyzer`, which exposes API, `ide` uses Rust API and is intended to\n use by various tools. Typical test creates an `AnalysisHost`, calls some\n `Analysis` functions and compares the results against expectation."}, {"sha": "b5a5d7c9350f496da5068b08c2ec978698ecf563", "filename": "docs/dev/guide.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/docs%2Fdev%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/docs%2Fdev%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fguide.md?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -40,8 +40,8 @@ terms of files and offsets, and **not** in terms of Rust concepts like structs,\n traits, etc. The \"typed\" API with Rust specific types is slightly lower in the\n stack, we'll talk about it later.\n \n-[`AnalysisHost`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/lib.rs#L265-L284\n-[`Analysis`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/lib.rs#L291-L478\n+[`AnalysisHost`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L265-L284\n+[`Analysis`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L291-L478\n \n The reason for this separation of `Analysis` and `AnalysisHost` is that we want to apply\n changes \"uniquely\", but we might also want to fork an `Analysis` and send it to\n@@ -69,7 +69,7 @@ the `AnalysisHost::apply_change` method, which accepts a single argument, a\n \"transaction\", so it suffices to study its methods to understand all of the\n input data.\n \n-[`AnalysisChange`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/lib.rs#L119-L167\n+[`AnalysisChange`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L119-L167\n \n The `(add|change|remove)_file` methods control the set of the input files, where\n each file has an integer id (`FileId`, picked by the client), text (`String`)\n@@ -253,7 +253,7 @@ All analyzer information is stored in a salsa database. `Analysis` and\n `AnalysisHost` types are newtype wrappers for [`RootDatabase`] -- a salsa\n database.\n \n-[`RootDatabase`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/db.rs#L88-L134\n+[`RootDatabase`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/db.rs#L88-L134\n \n Salsa input queries are defined in [`FilesDatabase`] (which is a part of\n `RootDatabase`). They closely mirror the familiar `AnalysisChange` structure:\n@@ -565,11 +565,11 @@ the type to completion.\n [schedule it on the threadpool]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L428\n [catch]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L436-L442\n [the handler]: https://salsa.zulipchat.com/#narrow/stream/181542-rfcs.2Fsalsa-query-group/topic/design.20next.20steps\n-[ask analysis for completion]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/lib.rs#L439-L444\n-[completion implementation]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion.rs#L46-L62\n-[`CompletionContext`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L14-L37\n-[\"IntelliJ Trick\"]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L72-L75\n-[find an ancestor `fn` node]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L116-L120\n-[semantic model]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L123\n-[series of independent completion routines]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion.rs#L52-L59\n-[`complete_dot`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/complete_dot.rs#L6-L22\n+[ask analysis for completion]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L439-L444\n+[completion implementation]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L46-L62\n+[`CompletionContext`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L14-L37\n+[\"IntelliJ Trick\"]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L72-L75\n+[find an ancestor `fn` node]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L116-L120\n+[semantic model]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L123\n+[series of independent completion routines]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L52-L59\n+[`complete_dot`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/complete_dot.rs#L6-L22"}, {"sha": "76895aeca025f4c9343833e39a791c0a75b6245b", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018a6cac072767dfd630c22e6d9ce134b7bb09af/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018a6cac072767dfd630c22e6d9ce134b7bb09af/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=018a6cac072767dfd630c22e6d9ce134b7bb09af", "patch": "@@ -194,7 +194,7 @@ impl TidyDocs {\n         let poorly_documented = [\n             \"hir\",\n             \"hir_expand\",\n-            \"ra_ide\",\n+            \"ide\",\n             \"mbe\",\n             \"parser\",\n             \"profile\","}]}