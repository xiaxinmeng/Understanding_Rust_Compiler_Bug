{"sha": "06817d1bb34398718c501d67edd6ecc07ca1723e", "node_id": "C_kwDOAAsO6NoAKDA2ODE3ZDFiYjM0Mzk4NzE4YzUwMWQ2N2VkZDZlY2MwN2NhMTcyM2U", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-04-09T08:27:47Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-05-12T00:16:25Z"}, "message": "Add `unsigned_offset_from` on pointers\n\nLike we have `add`/`sub` which are the `usize` version of `offset`, this adds the `usize` equivalent of `offset_from`.  Like how `.add(d)` replaced a whole bunch of `.offset(d as isize)`, you can see from the changes here that it's fairly common that code actually knows the order between the pointers and *wants* a `usize`, not an `isize`.\n\nAs a bonus, this can do `sub nuw`+`udiv exact`, rather than `sub`+`sdiv exact`, which can be optimized slightly better because it doesn't have to worry about negatives.  That's why the slice iterators weren't using `offset_from`, though I haven't updated that code in this PR because slices are so perf-critical that I'll do it as its own change.\n\nThis is an intrinsic, like `offset_from`, so that it can eventually be allowed in CTFE.  It also allows checking the extra safety condition -- see the test confirming that CTFE catches it if you pass the pointers in the wrong order.", "tree": {"sha": "69e4dfbc2007d4b5ffc4c322d344731e22da5d6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e4dfbc2007d4b5ffc4c322d344731e22da5d6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06817d1bb34398718c501d67edd6ecc07ca1723e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06817d1bb34398718c501d67edd6ecc07ca1723e", "html_url": "https://github.com/rust-lang/rust/commit/06817d1bb34398718c501d67edd6ecc07ca1723e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06817d1bb34398718c501d67edd6ecc07ca1723e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32202f20cdfb1e01d88d2b61edb492daf3f33e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32202f20cdfb1e01d88d2b61edb492daf3f33e5e", "html_url": "https://github.com/rust-lang/rust/commit/32202f20cdfb1e01d88d2b61edb492daf3f33e5e"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b254ca3bec8435a729001cf530744dfdb0d10831", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06817d1bb34398718c501d67edd6ecc07ca1723e/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06817d1bb34398718c501d67edd6ecc07ca1723e/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=06817d1bb34398718c501d67edd6ecc07ca1723e", "patch": "@@ -713,14 +713,21 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, val);\n         };\n \n-        ptr_offset_from, (v ptr, v base) {\n+        ptr_offset_from | ptr_offset_from_unsigned, (v ptr, v base) {\n             let ty = substs.type_at(0);\n             let isize_layout = fx.layout_of(fx.tcx.types.isize);\n \n             let pointee_size: u64 = fx.layout_of(ty).size.bytes();\n-            let diff = fx.bcx.ins().isub(ptr, base);\n+            let diff_bytes = fx.bcx.ins().isub(ptr, base);\n             // FIXME this can be an exact division.\n-            let val = CValue::by_val(fx.bcx.ins().sdiv_imm(diff, pointee_size as i64), isize_layout);\n+            let diff = if intrinsic == sym::ptr_offset_from_unsigned {\n+                // Because diff_bytes ULT isize::MAX, this would be fine as signed,\n+                // but unsigned is slightly easier to codegen, so might as well.\n+                fx.bcx.ins().udiv_imm(diff_bytes, pointee_size as i64)\n+            } else {\n+                fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64)\n+            };\n+            let val = CValue::by_val(diff, isize_layout);\n             ret.write_cvalue(fx, val);\n         };\n "}]}