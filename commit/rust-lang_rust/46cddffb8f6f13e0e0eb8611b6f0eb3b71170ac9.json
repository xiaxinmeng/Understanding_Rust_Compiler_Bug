{"sha": "46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Y2RkZmZiOGY2ZjEzZTBlMGViODYxMWI2ZjBlYjNiNzExNzBhYzk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-23T17:45:02Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-23T17:45:02Z"}, "message": "Go back to a single visit_fn function in visit.rs", "tree": {"sha": "c34a24d0f50c07921dd5cff9af82ff08b820bd9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34a24d0f50c07921dd5cff9af82ff08b820bd9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "html_url": "https://github.com/rust-lang/rust/commit/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "711ff657e260def1c05d27d6447fa6b6733a5b2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/711ff657e260def1c05d27d6447fa6b6733a5b2a", "html_url": "https://github.com/rust-lang/rust/commit/711ff657e260def1c05d27d6447fa6b6733a5b2a"}], "stats": {"total": 176, "additions": 75, "deletions": 101}, "files": [{"sha": "959f5e02e175f3a4bda79b9a1d711b1f9cf3a46f", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -61,7 +61,7 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> (copy_map, ref_map) {\n                copy_map: std::map::new_int_hash(),\n                ref_map: std::map::new_int_hash(),\n                mutable silent: false};\n-    let v = @{visit_fn_body: bind visit_fn_body(cx, _, _, _, _, _, _, _),\n+    let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _, _),\n               visit_expr: bind visit_expr(cx, _, _, _),\n               visit_block: bind visit_block(cx, _, _, _)\n               with *visit::default_visitor::<scope>()};\n@@ -71,9 +71,9 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> (copy_map, ref_map) {\n     ret (cx.copy_map, cx.ref_map);\n }\n \n-fn visit_fn_body(cx: @ctx, decl: ast::fn_decl, body: ast::blk,\n-                 sp: span, _name: ast::fn_ident,\n-                 id: ast::node_id, sc: scope, v: vt<scope>) {\n+fn visit_fn(cx: @ctx, decl: ast::fn_decl, _ts: [ast::ty_param],\n+            body: ast::blk, sp: span, _name: ast::fn_ident,\n+            id: ast::node_id, sc: scope, v: vt<scope>) {\n     visit::visit_fn_decl(decl, sc, v);\n     let fty = ty::node_id_to_type(cx.tcx, id);\n     let args = ty::ty_fn_args(cx.tcx, fty);"}, {"sha": "995c16ddb2c47cfaf60182e83f0ad28e4ad364e3", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -32,16 +32,16 @@ fn map_crate(c: crate) -> map {\n         (@{visit_item: bind map_item(cx, _),\n            visit_native_item: bind map_native_item(cx, _),\n            visit_expr: bind map_expr(cx, _),\n-           visit_fn_body: bind map_fn_body(cx, _, _, _, _, _),\n+           visit_fn: bind map_fn(cx, _, _, _, _, _, _),\n            visit_local: bind map_local(cx, _),\n            visit_arm: bind map_arm(cx, _)\n            with *visit::default_simple_visitor()});\n     visit::visit_crate(c, (), v_map);\n     ret cx.map;\n }\n \n-fn map_fn_body(cx: ctx, decl: fn_decl, _body: blk,\n-               _sp: codemap::span, _n: fn_ident, _id: node_id) {\n+fn map_fn(cx: ctx, decl: fn_decl, _tps: [ty_param], _body: blk,\n+          _sp: codemap::span, _n: fn_ident, _id: node_id) {\n     for a in decl.inputs {\n         cx.map.insert(a.id, node_arg(a, cx.local_id));\n         cx.local_id += 1u;"}, {"sha": "9e18bae4a2ea79b4befc4c707dbb13eb1479a297", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -82,15 +82,15 @@ fn annotate_freevars(def_map: resolve::def_map, crate: @ast::crate) ->\n    freevar_map {\n     let freevars = new_int_hash();\n \n-    let walk_fn_body = lambda (_decl: ast::fn_decl, blk: ast::blk,\n-                               _sp: span, _nm: ast::fn_ident,\n-                               nid: ast::node_id) {\n+    let walk_fn = lambda (_decl: ast::fn_decl, _tps: [ast::ty_param],\n+                          blk: ast::blk, _sp: span, _nm: ast::fn_ident,\n+                          nid: ast::node_id) {\n         let vars = collect_freevars(def_map, blk);\n         freevars.insert(nid, vars);\n     };\n \n     let visitor =\n-        visit::mk_simple_visitor(@{visit_fn_body: walk_fn_body\n+        visit::mk_simple_visitor(@{visit_fn: walk_fn\n                                    with *visit::default_simple_visitor()});\n     visit::visit_crate(*crate, (), visitor);\n "}, {"sha": "2c9952ddec9d5a437c03cb4308f8710e1d388824", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -43,7 +43,7 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n     let visit = visit::mk_vt(@{\n         visit_expr: check_expr,\n         visit_stmt: check_stmt,\n-        visit_fn_body: check_fn_body\n+        visit_fn: check_fn\n         with *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, ctx, visit);\n@@ -66,8 +66,8 @@ fn with_closure_check_fn(cx: ctx, id: node_id,\n \n // Check that the free variables used in a shared/sendable closure conform\n // to the copy/move kind bounds. Then recursively check the function body.\n-fn check_fn_body(decl: fn_decl, body: blk, sp: span, i: fn_ident, id: node_id,\n-                 cx: ctx, v: visit::vt<ctx>) {\n+fn check_fn(decl: fn_decl, tps: [ty_param], body: blk, sp: span,\n+            i: fn_ident, id: node_id, cx: ctx, v: visit::vt<ctx>) {\n \n     // n.b.: This could be the body of either a fn decl or a fn expr.  In the\n     // former case, the prototype will be proto_bare and no check occurs.  In\n@@ -87,7 +87,7 @@ fn check_fn_body(decl: fn_decl, body: blk, sp: span, i: fn_ident, id: node_id,\n         }\n     }\n \n-    visit::visit_fn_body(decl, body, sp, i, id, cx, v);\n+    visit::visit_fn(decl, tps, body, sp, i, id, cx, v);\n }\n \n fn check_fn_cap_clause(cx: ctx,"}, {"sha": "7b1a0b6c0a3fba8f9d9b10621ce7d7388c10f6d2", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -43,7 +43,7 @@ type ctx = {last_uses: std::map::hashmap<node_id, bool>,\n fn find_last_uses(c: @crate, def_map: resolve::def_map,\n                   ref_map: alias::ref_map, tcx: ty::ctxt) -> last_uses {\n     let v = visit::mk_vt(@{visit_expr: visit_expr,\n-                           visit_fn_body: visit_fn_body\n+                           visit_fn: visit_fn\n                            with *visit::default_visitor()});\n     let cx = {last_uses: std::map::new_int_hash(),\n               def_map: def_map,\n@@ -153,19 +153,19 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n     }\n }\n \n-fn visit_fn_body(decl: fn_decl, body: blk,\n-                 sp: span, nm: fn_ident, id: node_id,\n-                 cx: ctx, v: visit::vt<ctx>) {\n+fn visit_fn(decl: fn_decl, tps: [ty_param], body: blk,\n+            sp: span, nm: fn_ident, id: node_id,\n+            cx: ctx, v: visit::vt<ctx>) {\n     let fty = ty::node_id_to_type(cx.tcx, id);\n     let proto = ty::ty_fn_proto(cx.tcx, fty);\n     if proto == proto_block {\n         visit_block(func, cx, {||\n-            visit::visit_fn_body(decl, body, sp, nm, id, cx, v);\n+            visit::visit_fn(decl, tps, body, sp, nm, id, cx, v);\n         });\n     } else {\n         let old = nil;\n         cx.blocks <-> old;\n-        visit::visit_fn_body(decl, body, sp, nm, id, cx, v);\n+        visit::visit_fn(decl, tps, body, sp, nm, id, cx, v);\n         cx.blocks <-> old;\n         leave_fn(cx);\n     }"}, {"sha": "3c633e0e9ff1fa9fc6abb284094711f50850fe50", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -336,8 +336,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           visit_expr: bind walk_expr(e, _, _, _),\n           visit_ty: bind walk_ty(e, _, _, _),\n           visit_constr: bind walk_constr(e, _, _, _, _, _),\n-          visit_fn_proto:\n-              bind visit_fn_proto_with_scope(e, _, _, _, _, _, _, _, _)\n+          visit_fn: bind visit_fn_with_scope(e, _, _, _, _, _, _, _, _)\n           with *visit::default_visitor()};\n     visit::visit_crate(*c, cons(scope_crate, @nil), visit::mk_vt(v));\n     e.used_imports.track = false;\n@@ -403,8 +402,8 @@ fn visit_item_with_scope(i: @ast::item, sc: scopes, v: vt<scopes>) {\n         alt ifce { some(ty) { v.visit_ty(ty, sc, v); } _ {} }\n         v.visit_ty(sty, sc, v);\n         for m in methods {\n-            v.visit_fn_proto(m.decl, tps + m.tps, m.body, m.span,\n-                             some(m.ident), m.id, sc, v);\n+            v.visit_fn(m.decl, tps + m.tps, m.body, m.span,\n+                       some(m.ident), m.id, sc, v);\n         }\n       }\n       _ { visit::visit_item(i, sc, v); }\n@@ -416,9 +415,9 @@ fn visit_native_item_with_scope(ni: @ast::native_item, sc: scopes,\n     visit::visit_native_item(ni, cons(scope_native_item(ni), @sc), v);\n }\n \n-fn visit_fn_proto_with_scope(e: @env, decl: ast::fn_decl, tp: [ast::ty_param],\n-                             body: ast::blk, sp: span, name: fn_ident,\n-                             id: node_id, sc: scopes, v: vt<scopes>) {\n+fn visit_fn_with_scope(e: @env, decl: ast::fn_decl, tp: [ast::ty_param],\n+                       body: ast::blk, sp: span, name: fn_ident,\n+                       id: node_id, sc: scopes, v: vt<scopes>) {\n     // is this a main fn declaration?\n     alt name {\n       some(nm) {\n@@ -439,7 +438,7 @@ fn visit_fn_proto_with_scope(e: @env, decl: ast::fn_decl, tp: [ast::ty_param],\n       _ { scope_fn_expr(decl, id, tp) }\n     };\n \n-    visit::visit_fn_proto(decl, tp, body, sp, name, id, cons(scope, @sc), v);\n+    visit::visit_fn(decl, tp, body, sp, name, id, cons(scope, @sc), v);\n }\n \n fn visit_block_with_scope(b: ast::blk, sc: scopes, v: vt<scopes>) {"}, {"sha": "cc1360114cdaa9f4f4bb2a3d3fb017a9c0e4caf2", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -56,16 +56,16 @@ fn visit_fn(ccx: crate_ctxt, num_constraints: uint, body: blk) {\n     init_vecs(ccx, node_id_vec, num_constraints);\n }\n \n-fn annotate_in_fn_body(ccx: crate_ctxt, _decl: fn_decl, body: blk,\n-                       _sp: span, _n: fn_ident, id: node_id) {\n+fn annotate_in_fn(ccx: crate_ctxt, _decl: fn_decl, _ts: [ty_param], body: blk,\n+                  _sp: span, _n: fn_ident, id: node_id) {\n     let f_info = get_fn_info(ccx, id);\n     visit_fn(ccx, num_constraints(f_info), body);\n }\n \n fn annotate_crate(ccx: crate_ctxt, crate: crate) {\n     let do_ann =\n         visit::mk_simple_visitor(\n-            @{visit_fn_body: bind annotate_in_fn_body(ccx, _, _, _, _, _)\n+            @{visit_fn: bind annotate_in_fn(ccx, _, _, _, _, _, _)\n               with *visit::default_simple_visitor()});\n     visit::visit_crate(crate, (), do_ann);\n }"}, {"sha": "340b2264354bd8ff36249458a98eb5159f626c10", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -1008,7 +1008,7 @@ fn op_to_oper_ty(io: init_op) -> oper_type {\n }\n \n // default function visitor\n-fn do_nothing<T>(_decl: fn_decl, _body: blk,\n+fn do_nothing<T>(_decl: fn_decl, _ts: [ty_param], _body: blk,\n                  _sp: span, _i: fn_ident, _id: node_id,\n                  _t: T, _v: visit::vt<T>) {\n }"}, {"sha": "120e33d9254891843680c375f62a3418ddad9d8d", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -151,7 +151,7 @@ fn relax_precond_block(fcx: fn_ctxt, i: node_id, b: blk) {\n           visit_stmt: relax_precond_stmt,\n           visit_item:\n               fn (_i: @item, _cx: relax_ctxt, _vt: visit::vt<relax_ctxt>) { },\n-          visit_fn_body: bind do_nothing(_, _, _, _, _, _, _)\n+          visit_fn: bind do_nothing(_, _, _, _, _, _, _, _)\n              with *visitor};\n     let v1 = visit::mk_vt(visitor);\n     v1.visit_block(b, cx, v1);"}, {"sha": "f790334fbc492ef0b1bfa204070cc0e76189136e", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -106,9 +106,9 @@ fn check_states_against_conditions(fcx: fn_ctxt,\n     let visitor = visit::mk_vt(\n         @{visit_stmt: check_states_stmt,\n           visit_expr: check_states_expr,\n-          visit_fn_body: bind do_nothing::<fn_ctxt>(_, _, _, _, _, _, _)\n+          visit_fn: bind do_nothing::<fn_ctxt>(_, _, _, _, _, _, _, _)\n           with *visit::default_visitor::<fn_ctxt>()});\n-    visit::visit_fn_body(f_decl, f_body, sp, nm, id, fcx, visitor);\n+    visit::visit_fn(f_decl, [], f_body, sp, nm, id, fcx, visitor);\n \n     /* Check that the return value is initialized */\n     let post = aux::block_poststate(fcx.ccx, f_body);\n@@ -158,10 +158,10 @@ fn check_fn_states(fcx: fn_ctxt,\n     check_states_against_conditions(fcx, f_decl, f_body, sp, nm, id);\n }\n \n-fn fn_states(f_decl: ast::fn_decl, f_body: ast::blk,\n+fn fn_states(f_decl: ast::fn_decl, tps: [ast::ty_param], f_body: ast::blk,\n              sp: span, i: ast::fn_ident, id: node_id,\n              ccx: crate_ctxt, v: visit::vt<crate_ctxt>) {\n-    visit::visit_fn_body(f_decl, f_body, sp, i, id, ccx, v);\n+    visit::visit_fn(f_decl, tps, f_body, sp, i, id, ccx, v);\n     /* Look up the var-to-bit-num map for this function */\n \n     assert (ccx.fm.contains_key(id));\n@@ -182,13 +182,13 @@ fn check_crate(cx: ty::ctxt, crate: @crate) {\n     /* Compute the pre and postcondition for every subexpression */\n \n     let vtor = visit::default_visitor::<crate_ctxt>();\n-    vtor = @{visit_fn_body: fn_pre_post with *vtor};\n+    vtor = @{visit_fn: fn_pre_post with *vtor};\n     visit::visit_crate(*crate, ccx, visit::mk_vt(vtor));\n \n     /* Check the pre- and postcondition against the pre- and poststate\n        for every expression */\n     let vtor = visit::default_visitor::<crate_ctxt>();\n-    vtor = @{visit_fn_body: fn_states with *vtor};\n+    vtor = @{visit_fn: fn_states with *vtor};\n     visit::visit_crate(*crate, ccx, visit::mk_vt(vtor));\n }\n //"}, {"sha": "457a6ca0173563d5a789159e8646686f37cbe247", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -46,6 +46,7 @@ fn collect_pred(e: @expr, cx: ctxt, v: visit::vt<ctxt>) {\n \n fn find_locals(tcx: ty::ctxt,\n                f_decl: fn_decl,\n+               tps: [ty_param],\n                f_body: blk,\n                sp: span,\n                n: fn_ident,\n@@ -56,10 +57,10 @@ fn find_locals(tcx: ty::ctxt,\n     visitor =\n         @{visit_local: collect_local,\n           visit_expr: collect_pred,\n-          visit_fn_body: bind do_nothing(_, _, _, _, _, _, _)\n+          visit_fn: bind do_nothing(_, _, _, _, _, _, _, _)\n           with *visitor};\n-    visit::visit_fn_body(f_decl, f_body, sp,\n-                         n, id, cx, visit::mk_vt(visitor));\n+    visit::visit_fn(f_decl, tps, f_body, sp,\n+                    n, id, cx, visit::mk_vt(visitor));\n     ret cx;\n }\n \n@@ -98,6 +99,7 @@ fn add_constraint(tcx: ty::ctxt, c: sp_constr, next: uint, tbl: constr_map) ->\n    to a bit number in the precondition/postcondition vectors */\n fn mk_fn_info(ccx: crate_ctxt,\n               f_decl: fn_decl,\n+              tps: [ty_param],\n               f_body: blk,\n               f_sp: span,\n               f_name: fn_ident,\n@@ -106,7 +108,8 @@ fn mk_fn_info(ccx: crate_ctxt,\n     let res_map = @new_def_hash::<constraint>();\n     let next: uint = 0u;\n \n-    let cx: ctxt = find_locals(ccx.tcx, f_decl, f_body, f_sp, f_name, id);\n+    let cx: ctxt = find_locals(ccx.tcx, f_decl, tps, f_body, f_sp,\n+                               f_name, id);\n     /* now we have to add bit nums for both the constraints\n        and the variables... */\n \n@@ -163,8 +166,8 @@ fn mk_fn_info(ccx: crate_ctxt,\n    to bit number) */\n fn mk_f_to_fn_info(ccx: crate_ctxt, c: @crate) {\n     let visitor =\n-        visit::mk_simple_visitor(@{visit_fn_body:\n-                                       bind mk_fn_info(ccx, _, _, _, _, _)\n+        visit::mk_simple_visitor(@{visit_fn:\n+                                       bind mk_fn_info(ccx, _, _, _, _, _, _)\n                                    with *visit::default_simple_visitor()});\n     visit::visit_crate(*c, (), visitor);\n }"}, {"sha": "9a3100e7bb2edf0eec9a981787f8a3419ea118a5", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -727,10 +727,10 @@ fn find_pre_post_fn(fcx: fn_ctxt, body: blk) {\n     }\n }\n \n-fn fn_pre_post(decl: fn_decl, body: blk, sp: span,\n+fn fn_pre_post(decl: fn_decl, tps: [ty_param], body: blk, sp: span,\n                i: fn_ident, id: node_id,\n                ccx: crate_ctxt, v: visit::vt<crate_ctxt>) {\n-    visit::visit_fn_body(decl, body, sp, i, id, ccx, v);\n+    visit::visit_fn(decl, tps, body, sp, i, id, ccx, v);\n     assert (ccx.fm.contains_key(id));\n     let fcx =\n         {enclosing: ccx.fm.get(id),"}, {"sha": "16a1801fd89b9834bfad76d1ce03c8f15d6c97ad", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -1124,16 +1124,16 @@ fn gather_locals(ccx: @crate_ctxt,\n         };\n \n     // Don't descend into fns and items\n-    fn visit_fn_body<T>(_decl: ast::fn_decl, _body: ast::blk,\n-                        _sp: span, _nm: ast::fn_ident, _id: ast::node_id,\n-                        _t: T, _v: visit::vt<T>) {\n+    fn visit_fn<T>(_decl: ast::fn_decl, _ts: [ast::ty_param], _body: ast::blk,\n+                   _sp: span, _nm: ast::fn_ident, _id: ast::node_id,\n+                   _t: T, _v: visit::vt<T>) {\n     }\n     fn visit_item<E>(_i: @ast::item, _e: E, _v: visit::vt<E>) { }\n \n     let visit =\n         @{visit_local: visit_local,\n           visit_pat: visit_pat,\n-          visit_fn_body: bind visit_fn_body(_, _, _, _, _, _, _),\n+          visit_fn: bind visit_fn(_, _, _, _, _, _, _, _),\n           visit_item: bind visit_item(_, _, _)\n               with *visit::default_visitor()};\n "}, {"sha": "22c3d104f3be70979caa0fb04e552adfe7d10ad5", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 21, "deletions": 49, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=46cddffb8f6f13e0e0eb8611b6f0eb3b71170ac9", "patch": "@@ -31,14 +31,8 @@ type visitor<E> =\n       visit_expr: fn@(@expr, E, vt<E>),\n       visit_ty: fn@(@ty, E, vt<E>),\n       visit_constr: fn@(@path, span, node_id, E, vt<E>),\n-\n-      // A function with a fully specified prototype:\n-      visit_fn_proto: fn@(fn_decl, [ty_param], blk, span, fn_ident, node_id,\n-                          E, vt<E>),\n-\n-      // Invoked by both visit_fn_proto above.\n-      // Intended to be a common flow point for all fn decls in AST.\n-      visit_fn_body: fn@(fn_decl, blk, span, fn_ident, node_id, E, vt<E>)};\n+      visit_fn: fn@(fn_decl, [ty_param], blk, span, fn_ident, node_id,\n+                    E, vt<E>)};\n \n fn default_visitor<E>() -> visitor<E> {\n     ret @{visit_mod: bind visit_mod::<E>(_, _, _, _),\n@@ -54,8 +48,7 @@ fn default_visitor<E>() -> visitor<E> {\n           visit_expr: bind visit_expr::<E>(_, _, _),\n           visit_ty: bind skip_ty::<E>(_, _, _),\n           visit_constr: bind visit_constr::<E>(_, _, _, _, _),\n-          visit_fn_proto: bind visit_fn_proto::<E>(_, _, _, _, _, _, _, _),\n-          visit_fn_body: bind visit_fn_body::<E>(_, _, _, _, _, _, _)};\n+          visit_fn: bind visit_fn::<E>(_, _, _, _, _, _, _, _)};\n }\n \n fn visit_crate<E>(c: crate, e: E, v: vt<E>) {\n@@ -92,7 +85,7 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n     alt i.node {\n       item_const(t, ex) { v.visit_ty(t, e, v); v.visit_expr(ex, e, v); }\n       item_fn(decl, tp, body) {\n-        v.visit_fn_proto(decl, tp, body, i.span, some(i.ident), i.id, e, v);\n+        v.visit_fn(decl, tp, body, i.span, some(i.ident), i.id, e, v);\n       }\n       item_mod(m) { v.visit_mod(m, i.span, e, v); }\n       item_native_mod(nm) {\n@@ -101,8 +94,8 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n       }\n       item_ty(t, _) { v.visit_ty(t, e, v); }\n       item_res(decl, tps, body, dtor_id, _) {\n-        v.visit_fn_proto(decl, tps, body, i.span, some(i.ident), dtor_id,\n-                         e, v);\n+        v.visit_fn(decl, tps, body, i.span, some(i.ident), dtor_id,\n+                   e, v);\n       }\n       item_tag(variants, _) {\n         for vr: variant in variants {\n@@ -112,16 +105,16 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n       item_obj(ob, _, _) {\n         for f: obj_field in ob.fields { v.visit_ty(f.ty, e, v); }\n         for m: @method in ob.methods {\n-            v.visit_fn_proto(m.decl, m.tps, m.body, m.span,\n-                             some(m.ident), m.id, e, v);\n+            v.visit_fn(m.decl, m.tps, m.body, m.span,\n+                       some(m.ident), m.id, e, v);\n         }\n       }\n       item_impl(_, ifce, ty, methods) {\n         alt ifce { some(ty) { v.visit_ty(ty, e, v); } _ {} }\n         v.visit_ty(ty, e, v);\n         for m in methods {\n-            v.visit_fn_proto(m.decl, m.tps, m.body, m.span,\n-                             some(m.ident), m.id, e, v);\n+            v.visit_fn(m.decl, m.tps, m.body, m.span,\n+                       some(m.ident), m.id, e, v);\n         }\n       }\n       item_iface(_, methods) {\n@@ -211,14 +204,8 @@ fn visit_fn_decl<E>(fd: fn_decl, e: E, v: vt<E>) {\n     v.visit_ty(fd.output, e, v);\n }\n \n-fn visit_fn_proto<E>(decl: fn_decl, _tp: [ty_param], body: blk, sp: span,\n-                     i: fn_ident, id: node_id, e: E, v: vt<E>) {\n-    v.visit_fn_body(decl, body, sp, i, id, e, v);\n-}\n-\n-fn visit_fn_body<E>(decl: fn_decl, body: blk, _sp: span,\n-                    _name: fn_ident, _id: node_id,\n-                    e: E, v: vt<E>) {\n+fn visit_fn<E>(decl: fn_decl, _tp: [ty_param], body: blk, _sp: span,\n+               _i: fn_ident, _id: node_id, e: E, v: vt<E>) {\n     visit_fn_decl(decl, e, v);\n     v.visit_block(body, e, v);\n }\n@@ -309,10 +296,10 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         for a: arm in arms { v.visit_arm(a, e, v); }\n       }\n       expr_fn(decl, body, _) {\n-        v.visit_fn_proto(decl, [], body, ex.span, none, ex.id, e, v);\n+        v.visit_fn(decl, [], body, ex.span, none, ex.id, e, v);\n       }\n       expr_fn_block(decl, body) {\n-        v.visit_fn_proto(decl, [], body, ex.span, none, ex.id, e, v);\n+        v.visit_fn(decl, [], body, ex.span, none, ex.id, e, v);\n       }\n       expr_block(b) { v.visit_block(b, e, v); }\n       expr_assign(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n@@ -355,8 +342,8 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n           some(ex) { v.visit_expr(ex, e, v); }\n         }\n         for m: @method in anon_obj.methods {\n-            v.visit_fn_proto(m.decl, m.tps, m.body, m.span,\n-                             some(m.ident), m.id, e, v);\n+            v.visit_fn(m.decl, m.tps, m.body, m.span,\n+                       some(m.ident), m.id, e, v);\n         }\n       }\n       expr_mac(mac) { visit_mac(mac, e, v); }\n@@ -388,8 +375,7 @@ type simple_visitor =\n       visit_expr: fn@(@expr),\n       visit_ty: fn@(@ty),\n       visit_constr: fn@(@path, span, node_id),\n-      visit_fn_proto: fn@(fn_decl, [ty_param], blk, span, fn_ident, node_id),\n-      visit_fn_body: fn@(fn_decl, blk, span, fn_ident, node_id)};\n+      visit_fn: fn@(fn_decl, [ty_param], blk, span, fn_ident, node_id)};\n \n fn simple_ignore_ty(_t: @ty) {}\n \n@@ -407,12 +393,8 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_expr: fn(_e: @expr) { },\n           visit_ty: simple_ignore_ty,\n           visit_constr: fn(_p: @path, _sp: span, _id: node_id) { },\n-          visit_fn_proto:\n-              fn(_d: fn_decl, _tps: [ty_param], _b: blk, _sp: span,\n-                 _ident: fn_ident, _id: node_id) { },\n-          visit_fn_body:\n-              fn(_f: fn_decl, _b: blk, _sp: span,\n-                 _nm: fn_ident, _node_id: node_id) { }\n+          visit_fn: fn(_d: fn_decl, _tps: [ty_param], _b: blk, _sp: span,\n+                       _ident: fn_ident, _id: node_id) { }\n          };\n }\n \n@@ -475,14 +457,7 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n             decl: fn_decl, tps: [ty_param], body: blk, sp: span,\n             ident: fn_ident, id: node_id, &&e: (), v: vt<()>) {\n         f(decl, tps, body, sp, ident, id);\n-        visit_fn_proto(decl, tps, body, sp, ident, id, e, v);\n-    }\n-    fn v_fn_body(f: fn@(fn_decl, blk, span, fn_ident, node_id),\n-                 fn_decl: fn_decl, blk: blk,\n-                 sp: span, name: fn_ident, node_id: node_id,\n-                 &&e: (), v: vt<()>) {\n-        f(fn_decl, blk, sp, name, node_id);\n-        visit_fn_body(fn_decl, blk, sp, name, node_id, e, v);\n+        visit_fn(decl, tps, body, sp, ident, id, e, v);\n     }\n     let visit_ty = if v.visit_ty == simple_ignore_ty {\n         bind skip_ty(_, _, _)\n@@ -503,10 +478,7 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n                 visit_expr: bind v_expr(v.visit_expr, _, _, _),\n                 visit_ty: visit_ty,\n                 visit_constr: bind v_constr(v.visit_constr, _, _, _, _, _),\n-                visit_fn_proto:\n-                    bind v_fn(v.visit_fn_proto, _, _, _, _, _, _, _, _),\n-                visit_fn_body:\n-                    bind v_fn_body(v.visit_fn_body, _, _, _, _, _, _, _),\n+                visit_fn: bind v_fn(v.visit_fn, _, _, _, _, _, _, _, _)\n                });\n }\n "}]}