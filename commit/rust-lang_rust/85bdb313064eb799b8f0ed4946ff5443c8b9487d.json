{"sha": "85bdb313064eb799b8f0ed4946ff5443c8b9487d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YmRiMzEzMDY0ZWI3OTliOGYwZWQ0OTQ2ZmY1NDQzYzhiOTQ4N2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-01T22:23:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-01T22:23:48Z"}, "message": "Rollup merge of #22777 - pnkfelix:issue-22443, r=nikomatsakis\n\n Check for unbounded recursion during dropck.\n\nSuch recursion can be introduced by the erroneous use of non-regular types (aka types employing polymorphic recursion), which Rust does not support.\n\nFix #22443", "tree": {"sha": "72f35a2aa4ecae337cc4bf5acaafe34d206913cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f35a2aa4ecae337cc4bf5acaafe34d206913cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85bdb313064eb799b8f0ed4946ff5443c8b9487d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85bdb313064eb799b8f0ed4946ff5443c8b9487d", "html_url": "https://github.com/rust-lang/rust/commit/85bdb313064eb799b8f0ed4946ff5443c8b9487d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85bdb313064eb799b8f0ed4946ff5443c8b9487d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb19cd7fb775fee1afb315525dcdc82472796337", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb19cd7fb775fee1afb315525dcdc82472796337", "html_url": "https://github.com/rust-lang/rust/commit/fb19cd7fb775fee1afb315525dcdc82472796337"}, {"sha": "180ef47af2f1e72f7d199e09bf0a2fc895e2235f", "url": "https://api.github.com/repos/rust-lang/rust/commits/180ef47af2f1e72f7d199e09bf0a2fc895e2235f", "html_url": "https://github.com/rust-lang/rust/commit/180ef47af2f1e72f7d199e09bf0a2fc895e2235f"}], "stats": {"total": 323, "additions": 299, "deletions": 24}, "files": [{"sha": "cffd74ccd7218c3da9458131a756bfd3e1578cb6", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 123, "deletions": 23, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=85bdb313064eb799b8f0ed4946ff5443c8b9487d", "patch": "@@ -14,8 +14,9 @@ use middle::infer;\n use middle::region;\n use middle::subst;\n use middle::ty::{self, Ty};\n-use util::ppaux::{Repr};\n+use util::ppaux::{Repr, UserString};\n \n+use syntax::ast;\n use syntax::codemap::Span;\n \n pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n@@ -28,29 +29,98 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>\n     // types that have been traversed so far by `traverse_type_if_unseen`\n     let mut breadcrumbs: Vec<Ty<'tcx>> = Vec::new();\n \n-    iterate_over_potentially_unsafe_regions_in_type(\n+    let result = iterate_over_potentially_unsafe_regions_in_type(\n         rcx,\n         &mut breadcrumbs,\n+        TypeContext::Root,\n         typ,\n         span,\n         scope,\n+        0,\n         0);\n+    match result {\n+        Ok(()) => {}\n+        Err(Error::Overflow(ref ctxt, ref detected_on_typ)) => {\n+            let tcx = rcx.tcx();\n+            span_err!(tcx.sess, span, E0320,\n+                      \"overflow while adding drop-check rules for {}\",\n+                      typ.user_string(rcx.tcx()));\n+            match *ctxt {\n+                TypeContext::Root => {\n+                    // no need for an additional note if the overflow\n+                    // was somehow on the root.\n+                }\n+                TypeContext::EnumVariant { def_id, variant, arg_index } => {\n+                    // FIXME (pnkfelix): eventually lookup arg_name\n+                    // for the given index on struct variants.\n+                    span_note!(\n+                        rcx.tcx().sess,\n+                        span,\n+                        \"overflowed on enum {} variant {} argument {} type: {}\",\n+                        ty::item_path_str(tcx, def_id),\n+                        variant,\n+                        arg_index,\n+                        detected_on_typ.user_string(rcx.tcx()));\n+                }\n+                TypeContext::Struct { def_id, field } => {\n+                    span_note!(\n+                        rcx.tcx().sess,\n+                        span,\n+                        \"overflowed on struct {} field {} type: {}\",\n+                        ty::item_path_str(tcx, def_id),\n+                        field,\n+                        detected_on_typ.user_string(rcx.tcx()));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+enum Error<'tcx> {\n+    Overflow(TypeContext, ty::Ty<'tcx>),\n+}\n+\n+enum TypeContext {\n+    Root,\n+    EnumVariant {\n+        def_id: ast::DefId,\n+        variant: ast::Name,\n+        arg_index: usize,\n+    },\n+    Struct {\n+        def_id: ast::DefId,\n+        field: ast::Name,\n+    }\n }\n \n+// The `depth` counts the number of calls to this function;\n+// the `xref_depth` counts the subset of such calls that go\n+// across a `Box<T>` or `PhantomData<T>`.\n fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n     rcx: &mut Rcx<'a, 'tcx>,\n     breadcrumbs: &mut Vec<Ty<'tcx>>,\n+    context: TypeContext,\n     ty_root: ty::Ty<'tcx>,\n     span: Span,\n     scope: region::CodeExtent,\n-    depth: uint)\n+    depth: uint,\n+    xref_depth: uint) -> Result<(), Error<'tcx>>\n {\n+    // Issue #22443: Watch out for overflow. While we are careful to\n+    // handle regular types properly, non-regular ones cause problems.\n+    let recursion_limit = rcx.tcx().sess.recursion_limit.get();\n+    if xref_depth >= recursion_limit {\n+        return Err(Error::Overflow(context, ty_root))\n+    }\n+\n     let origin = || infer::SubregionOrigin::SafeDestructor(span);\n     let mut walker = ty_root.walk();\n     let opt_phantom_data_def_id = rcx.tcx().lang_items.phantom_data();\n \n     let destructor_for_type = rcx.tcx().destructor_for_type.borrow();\n \n+    let xref_depth_orig = xref_depth;\n+\n     while let Some(typ) = walker.next() {\n         // Avoid recursing forever.\n         if breadcrumbs.contains(&typ) {\n@@ -61,20 +131,33 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n         // If we encounter `PhantomData<T>`, then we should replace it\n         // with `T`, the type it represents as owned by the\n         // surrounding context, before doing further analysis.\n-        let typ = if let ty::ty_struct(struct_did, substs) = typ.sty {\n-            if opt_phantom_data_def_id == Some(struct_did) {\n-                let item_type = ty::lookup_item_type(rcx.tcx(), struct_did);\n-                let tp_def = item_type.generics.types\n-                    .opt_get(subst::TypeSpace, 0).unwrap();\n-                let new_typ = substs.type_for_def(tp_def);\n-                debug!(\"replacing phantom {} with {}\",\n+        let (typ, xref_depth) = match typ.sty {\n+            ty::ty_struct(struct_did, substs) => {\n+                if opt_phantom_data_def_id == Some(struct_did) {\n+                    let item_type = ty::lookup_item_type(rcx.tcx(), struct_did);\n+                    let tp_def = item_type.generics.types\n+                        .opt_get(subst::TypeSpace, 0).unwrap();\n+                    let new_typ = substs.type_for_def(tp_def);\n+                    debug!(\"replacing phantom {} with {}\",\n+                           typ.repr(rcx.tcx()), new_typ.repr(rcx.tcx()));\n+                    (new_typ, xref_depth_orig + 1)\n+                } else {\n+                    (typ, xref_depth_orig)\n+                }\n+            }\n+\n+            // Note: When ty_uniq is removed from compiler, the\n+            // definition of `Box<T>` must carry a PhantomData that\n+            // puts us into the previous case.\n+            ty::ty_uniq(new_typ) => {\n+                debug!(\"replacing ty_uniq {} with {}\",\n                        typ.repr(rcx.tcx()), new_typ.repr(rcx.tcx()));\n-                new_typ\n-            } else {\n-                typ\n+                (new_typ, xref_depth_orig + 1)\n+            }\n+\n+            _ => {\n+                (typ, xref_depth_orig)\n             }\n-        } else {\n-            typ\n         };\n \n         let opt_type_did = match typ.sty {\n@@ -87,9 +170,9 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n             opt_type_did.and_then(|did| destructor_for_type.get(&did));\n \n         debug!(\"iterate_over_potentially_unsafe_regions_in_type \\\n-                {}typ: {} scope: {:?} opt_dtor: {:?}\",\n+                {}typ: {} scope: {:?} opt_dtor: {:?} xref: {}\",\n                (0..depth).map(|_| ' ').collect::<String>(),\n-               typ.repr(rcx.tcx()), scope, opt_dtor);\n+               typ.repr(rcx.tcx()), scope, opt_dtor, xref_depth);\n \n         // If `typ` has a destructor, then we must ensure that all\n         // borrowed data reachable via `typ` must outlive the parent\n@@ -228,6 +311,8 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n \n             match typ.sty {\n                 ty::ty_struct(struct_did, substs) => {\n+                    debug!(\"typ: {} is struct; traverse structure and not type-expression\",\n+                           typ.repr(rcx.tcx()));\n                     // Don't recurse; we extract type's substructure,\n                     // so do not process subparts of type expression.\n                     walker.skip_current_subtree();\n@@ -240,17 +325,24 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n                                                   struct_did,\n                                                   field.id,\n                                                   substs);\n-                        iterate_over_potentially_unsafe_regions_in_type(\n+                        try!(iterate_over_potentially_unsafe_regions_in_type(\n                             rcx,\n                             breadcrumbs,\n+                            TypeContext::Struct {\n+                                def_id: struct_did,\n+                                field: field.name,\n+                            },\n                             field_type,\n                             span,\n                             scope,\n-                            depth+1)\n+                            depth+1,\n+                            xref_depth))\n                     }\n                 }\n \n                 ty::ty_enum(enum_did, substs) => {\n+                    debug!(\"typ: {} is enum; traverse structure and not type-expression\",\n+                           typ.repr(rcx.tcx()));\n                     // Don't recurse; we extract type's substructure,\n                     // so do not process subparts of type expression.\n                     walker.skip_current_subtree();\n@@ -260,14 +352,20 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n                                                  enum_did,\n                                                  substs);\n                     for variant_info in all_variant_info.iter() {\n-                        for argument_type in variant_info.args.iter() {\n-                            iterate_over_potentially_unsafe_regions_in_type(\n+                        for (i, arg_type) in variant_info.args.iter().enumerate() {\n+                            try!(iterate_over_potentially_unsafe_regions_in_type(\n                                 rcx,\n                                 breadcrumbs,\n-                                *argument_type,\n+                                TypeContext::EnumVariant {\n+                                    def_id: enum_did,\n+                                    variant: variant_info.name,\n+                                    arg_index: i,\n+                                },\n+                                *arg_type,\n                                 span,\n                                 scope,\n-                                depth+1)\n+                                depth+1,\n+                                xref_depth));\n                         }\n                     }\n                 }\n@@ -290,4 +388,6 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n             // is done.\n         }\n     }\n+\n+    return Ok(());\n }"}, {"sha": "3bd15fbc7dbea774fb55ebad140bd1ab85fed0ff", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=85bdb313064eb799b8f0ed4946ff5443c8b9487d", "patch": "@@ -174,7 +174,8 @@ register_diagnostics! {\n     E0249, // expected constant expr for array length\n     E0250, // expected constant expr for array length\n     E0318, // can't create default impls for traits outside their crates\n-    E0319  // trait impls for defaulted traits allowed just for structs/enums\n+    E0319, // trait impls for defaulted traits allowed just for structs/enums\n+    E0320  // recursive overflow during dropck\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "f09688538198905d2ba88ccfb823c1d76941ca26", "filename": "src/test/compile-fail/dropck_no_diverge_on_nonregular_1.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_1.rs?ref=85bdb313064eb799b8f0ed4946ff5443c8b9487d", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 22443: Reject code using non-regular types that would\n+// otherwise cause dropck to loop infinitely.\n+\n+use std::marker::PhantomData;\n+\n+struct Digit<T> {\n+    elem: T\n+}\n+\n+struct Node<T:'static> { m: PhantomData<&'static T> }\n+\n+\n+enum FingerTree<T:'static> {\n+    Single(T),\n+    // Bug report said Digit after Box would stack overflow (versus\n+    // Digit before Box; see dropck_no_diverge_on_nonregular_2).\n+    Deep(\n+        Box<FingerTree<Node<T>>>,\n+        Digit<T>,\n+        )\n+}\n+\n+fn main() {\n+    let ft = //~ ERROR overflow while adding drop-check rules for FingerTree\n+        FingerTree::Single(1);\n+    //~^ ERROR overflow while adding drop-check rules for FingerTree\n+}"}, {"sha": "886bd6bea20d785f4e1a2c90e95058c3b7aa288c", "filename": "src/test/compile-fail/dropck_no_diverge_on_nonregular_2.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_2.rs?ref=85bdb313064eb799b8f0ed4946ff5443c8b9487d", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 22443: Reject code using non-regular types that would\n+// otherwise cause dropck to loop infinitely.\n+\n+use std::marker::PhantomData;\n+\n+struct Digit<T> {\n+    elem: T\n+}\n+\n+struct Node<T:'static> { m: PhantomData<&'static T> }\n+\n+enum FingerTree<T:'static> {\n+    Single(T),\n+    // Bug report said Digit before Box would infinite loop (versus\n+    // Digit after Box; see dropck_no_diverge_on_nonregular_1).\n+    Deep(\n+        Digit<T>,\n+        Box<FingerTree<Node<T>>>,\n+        )\n+}\n+\n+fn main() {\n+    let ft = //~ ERROR overflow while adding drop-check rules for FingerTree\n+        FingerTree::Single(1);\n+    //~^ ERROR overflow while adding drop-check rules for FingerTree\n+}"}, {"sha": "f7eb6e10ca78827cc9f7a09ed263ebab99e56cdc", "filename": "src/test/compile-fail/dropck_no_diverge_on_nonregular_3.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_3.rs?ref=85bdb313064eb799b8f0ed4946ff5443c8b9487d", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 22443: Reject code using non-regular types that would\n+// otherwise cause dropck to loop infinitely.\n+//\n+// This version is just checking that we still sanely handle a trivial\n+// wrapper around the non-regular type. (It also demonstrates how the\n+// error messages will report different types depending on which type\n+// dropck is analyzing.)\n+\n+use std::marker::PhantomData;\n+\n+struct Digit<T> {\n+    elem: T\n+}\n+\n+struct Node<T:'static> { m: PhantomData<&'static T> }\n+\n+enum FingerTree<T:'static> {\n+    Single(T),\n+    // According to the bug report, Digit before Box would infinite loop.\n+    Deep(\n+        Digit<T>,\n+        Box<FingerTree<Node<T>>>,\n+        )\n+}\n+\n+enum Wrapper<T:'static> {\n+    Simple,\n+    Other(FingerTree<T>),\n+}\n+\n+fn main() {\n+    let w = //~ ERROR overflow while adding drop-check rules for core::option\n+        Some(Wrapper::Simple::<u32>);\n+    //~^ ERROR overflow while adding drop-check rules for core::option::Option\n+    //~| ERROR overflow while adding drop-check rules for Wrapper\n+}"}, {"sha": "cab33beda405f619afc786f6b5c94c64e99a2475", "filename": "src/test/run-pass/issue-22777.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Frun-pass%2Fissue-22777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bdb313064eb799b8f0ed4946ff5443c8b9487d/src%2Ftest%2Frun-pass%2Fissue-22777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22777.rs?ref=85bdb313064eb799b8f0ed4946ff5443c8b9487d", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test is reduced from libsyntax.  It is just checking that we\n+// can successfully deal with a \"deep\" structure, which the drop-check\n+// was hitting a recursion limit on at one point.\n+\n+#![allow(non_camel_case_types)]\n+\n+pub fn noop_fold_impl_item() -> SmallVector<ImplItem> {\n+    loop  { }\n+}\n+\n+pub struct SmallVector<T>(P<T>);\n+pub struct ImplItem(P<S01_Method>);\n+\n+struct P<T>(Box<T>);\n+\n+struct S01_Method(P<S02_Generics>);\n+struct S02_Generics(P<S03_TyParam>);\n+struct S03_TyParam(P<S04_TyParamBound>);\n+struct S04_TyParamBound(S05_PolyTraitRef);\n+struct S05_PolyTraitRef(S06_TraitRef);\n+struct S06_TraitRef(S07_Path);\n+struct S07_Path(Vec<S08_PathSegment>);\n+struct S08_PathSegment(S09_PathParameters);\n+struct S09_PathParameters(P<S10_ParenthesizedParameterData>);\n+struct S10_ParenthesizedParameterData(Option<P<S11_Ty>>);\n+struct S11_Ty(P<S12_Expr>);\n+struct S12_Expr(P<S13_Block>);\n+struct S13_Block(Vec<P<S14_Stmt>>);\n+struct S14_Stmt(P<S15_Decl>);\n+struct S15_Decl(P<S16_Local>);\n+struct S16_Local(P<S17_Pat>);\n+struct S17_Pat(P<S18_Mac>);\n+struct S18_Mac(Vec<P<S19_TokenTree>>);\n+struct S19_TokenTree(P<S20_Token>);\n+struct S20_Token(P<S21_Nonterminal>);\n+struct S21_Nonterminal(P<S22_Item>);\n+struct S22_Item(P<S23_EnumDef>);\n+struct S23_EnumDef(Vec<P<S24_Variant>>);\n+struct S24_Variant(P<S25_VariantKind>);\n+struct S25_VariantKind(P<S26_StructDef>);\n+struct S26_StructDef(Vec<P<S27_StructField>>);\n+struct S27_StructField(P<S28_StructFieldKind>);\n+struct S28_StructFieldKind;\n+\n+pub fn main() {}"}]}