{"sha": "277eeb95c33ce33090409549b184c9977bf535e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3N2VlYjk1YzMzY2UzMzA5MDQwOTU0OWIxODRjOTk3N2JmNTM1ZTU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-08-25T18:52:15Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-08-25T18:52:15Z"}, "message": "move destructors_for_type into AdtDef", "tree": {"sha": "ffdafe17916efc8a73da355053f516d7f90cc721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffdafe17916efc8a73da355053f516d7f90cc721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/277eeb95c33ce33090409549b184c9977bf535e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/277eeb95c33ce33090409549b184c9977bf535e5", "html_url": "https://github.com/rust-lang/rust/commit/277eeb95c33ce33090409549b184c9977bf535e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/277eeb95c33ce33090409549b184c9977bf535e5/comments", "author": null, "committer": null, "parents": [{"sha": "d07ee255d0587f696155f6095f263b53237c0dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07ee255d0587f696155f6095f263b53237c0dca", "html_url": "https://github.com/rust-lang/rust/commit/d07ee255d0587f696155f6095f263b53237c0dca"}], "stats": {"total": 125, "additions": 69, "deletions": 56}, "files": [{"sha": "9153fd6484e2e9632b920f116d6e8eea9549023c", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -548,7 +548,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                         e: &ast::Expr, node_ty: Ty<'tcx>) {\n     match node_ty.sty {\n         ty::TyStruct(def, _) |\n-        ty::TyEnum(def, _) if def.has_dtor(v.tcx) => {\n+        ty::TyEnum(def, _) if def.has_dtor() => {\n             v.add_qualif(ConstQualif::NEEDS_DROP);\n             if v.mode != Mode::Var {\n                 v.tcx.sess.span_err(e.span,"}, {"sha": "d8f3ff3d9cb26c0115038d1ac3861a779509b364", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -239,8 +239,9 @@ impl OverloadedCallType {\n // mem_categorization, it requires a TYPER, which is a type that\n // supplies types from the tree. After type checking is complete, you\n // can just use the tcx as the typer.\n-\n-pub struct ExprUseVisitor<'d, 't, 'a: 't, 'tcx:'a+'d> {\n+//\n+// FIXME(stage0): the :'t here is probably only important for stage0\n+pub struct ExprUseVisitor<'d, 't, 'a: 't, 'tcx:'a+'d+'t> {\n     typer: &'t infer::InferCtxt<'a, 'tcx>,\n     mc: mc::MemCategorizationContext<'t, 'a, 'tcx>,\n     delegate: &'d mut (Delegate<'tcx>+'d),"}, {"sha": "4eef000169668aa82e1b41ee66cebcfe6fbc246e", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -355,9 +355,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // this properly would result in the necessity of computing *type*\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&mut self) {\n-        for (_, destructor_def_id) in self.tcx.destructor_for_type.borrow().iter() {\n-            if destructor_def_id.is_local() {\n-                self.reachable_symbols.insert(destructor_def_id.node);\n+        for adt in self.tcx.adt_defs() {\n+            if let Some(destructor_def_id) = adt.destructor() {\n+                if destructor_def_id.is_local() {\n+                    self.reachable_symbols.insert(destructor_def_id.node);\n+                }\n             }\n         }\n     }"}, {"sha": "e9be9010d4a8ca815b7005245e4af3d8c3f4b687", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -112,7 +112,7 @@ pub struct CrateAnalysis {\n #[derive(Copy, Clone)]\n pub enum DtorKind {\n     NoDtor,\n-    TraitDtor(DefId, bool)\n+    TraitDtor(bool)\n }\n \n impl DtorKind {\n@@ -126,7 +126,7 @@ impl DtorKind {\n     pub fn has_drop_flag(&self) -> bool {\n         match self {\n             &NoDtor => false,\n-            &TraitDtor(_, flag) => flag\n+            &TraitDtor(flag) => flag\n         }\n     }\n }\n@@ -797,12 +797,6 @@ pub struct ctxt<'tcx> {\n     /// True if the variance has been computed yet; false otherwise.\n     pub variance_computed: Cell<bool>,\n \n-    /// A mapping from the def ID of an enum or struct type to the def ID\n-    /// of the method that implements its destructor. If the type is not\n-    /// present in this map, it does not have a destructor. This map is\n-    /// populated during the coherence phase of typechecking.\n-    pub destructor_for_type: RefCell<DefIdMap<DefId>>,\n-\n     /// A method will be in this list if and only if it is a destructor.\n     pub destructors: RefCell<DefIdSet>,\n \n@@ -3057,7 +3051,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n             _ => return Err(TypeIsStructural),\n         };\n \n-        if adt.has_dtor(tcx) {\n+        if adt.has_dtor() {\n             return Err(TypeHasDestructor)\n         }\n \n@@ -3262,6 +3256,7 @@ bitflags! {\n         const IS_PHANTOM_DATA     = 1 << 3,\n         const IS_SIMD             = 1 << 4,\n         const IS_FUNDAMENTAL      = 1 << 5,\n+        const IS_NO_DROP_FLAG     = 1 << 6,\n     }\n }\n \n@@ -3312,6 +3307,7 @@ pub struct FieldDefData<'tcx, 'container: 'tcx> {\n pub struct AdtDefData<'tcx, 'container: 'tcx> {\n     pub did: DefId,\n     pub variants: Vec<VariantDefData<'tcx, 'container>>,\n+    destructor: Cell<Option<DefId>>,\n     flags: Cell<AdtFlags>,\n }\n \n@@ -3347,6 +3343,9 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n         if attr::contains_name(&attrs, \"fundamental\") {\n             flags = flags | AdtFlags::IS_FUNDAMENTAL;\n         }\n+        if attr::contains_name(&attrs, \"unsafe_no_drop_flag\") {\n+            flags = flags | AdtFlags::IS_NO_DROP_FLAG;\n+        }\n         if tcx.lookup_simd(did) {\n             flags = flags | AdtFlags::IS_SIMD;\n         }\n@@ -3360,6 +3359,7 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n             did: did,\n             variants: variants,\n             flags: Cell::new(flags),\n+            destructor: Cell::new(None)\n         }\n     }\n \n@@ -3410,8 +3410,11 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n     }\n \n     /// Returns whether this type has a destructor.\n-    pub fn has_dtor(&self, tcx: &ctxt<'tcx>) -> bool {\n-        tcx.destructor_for_type.borrow().contains_key(&self.did)\n+    pub fn has_dtor(&self) -> bool {\n+        match self.dtor_kind() {\n+            NoDtor => false,\n+            TraitDtor(..) => true\n+        }\n     }\n \n     /// Asserts this is a struct and returns the struct's unique\n@@ -3473,6 +3476,24 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n             _ => panic!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n     }\n+\n+    pub fn destructor(&self) -> Option<DefId> {\n+        self.destructor.get()\n+    }\n+\n+    pub fn set_destructor(&self, dtor: DefId) {\n+        assert!(self.destructor.get().is_none());\n+        self.destructor.set(Some(dtor));\n+    }\n+\n+    pub fn dtor_kind(&self) -> DtorKind {\n+        match self.destructor.get() {\n+            Some(_) => {\n+                TraitDtor(!self.flags.get().intersects(AdtFlags::IS_NO_DROP_FLAG))\n+            }\n+            None => NoDtor,\n+        }\n+    }\n }\n \n impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n@@ -3856,7 +3877,6 @@ impl<'tcx> ctxt<'tcx> {\n             normalized_cache: RefCell::new(FnvHashMap()),\n             lang_items: lang_items,\n             provided_method_sources: RefCell::new(DefIdMap()),\n-            destructor_for_type: RefCell::new(DefIdMap()),\n             destructors: RefCell::new(DefIdSet()),\n             inherent_impls: RefCell::new(DefIdMap()),\n             impl_items: RefCell::new(DefIdMap()),\n@@ -4679,7 +4699,7 @@ impl<'tcx> TyS<'tcx> {\n                             })\n                         });\n \n-                    if def.has_dtor(cx) {\n+                    if def.has_dtor() {\n                         res = res | TC::OwnsDtor;\n                     }\n \n@@ -6017,18 +6037,6 @@ impl<'tcx> ctxt<'tcx> {\n         self.with_path(id, |path| ast_map::path_to_string(path))\n     }\n \n-    /* If struct_id names a struct with a dtor. */\n-    pub fn ty_dtor(&self, struct_id: DefId) -> DtorKind {\n-        match self.destructor_for_type.borrow().get(&struct_id) {\n-            Some(&method_def_id) => {\n-                let flag = !self.has_attr(struct_id, \"unsafe_no_drop_flag\");\n-\n-                TraitDtor(method_def_id, flag)\n-            }\n-            None => NoDtor,\n-        }\n-    }\n-\n     pub fn with_path<T, F>(&self, id: DefId, f: F) -> T where\n         F: FnOnce(ast_map::PathElems) -> T,\n     {\n@@ -6113,6 +6121,11 @@ impl<'tcx> ctxt<'tcx> {\n         self.lookup_adt_def_master(did)\n     }\n \n+    /// Return the list of all interned ADT definitions\n+    pub fn adt_defs(&self) -> Vec<AdtDef<'tcx>> {\n+        self.adt_defs.borrow().values().cloned().collect()\n+    }\n+\n     /// Given the did of an item, returns its full set of predicates.\n     pub fn lookup_predicates(&self, did: DefId) -> GenericPredicates<'tcx> {\n         lookup_locally_or_in_crate_store(\n@@ -6760,8 +6773,8 @@ impl<'tcx> ctxt<'tcx> {\n     /// Returns true if this ADT is a dtorck type, i.e. whether it being\n     /// safe for destruction requires it to be alive\n     fn is_adt_dtorck(&self, adt: AdtDef<'tcx>) -> bool {\n-        let dtor_method = match self.destructor_for_type.borrow().get(&adt.did) {\n-            Some(dtor) => *dtor,\n+        let dtor_method = match adt.destructor() {\n+            Some(dtor) => dtor,\n             None => return false\n         };\n         let impl_did = self.impl_of_method(dtor_method).unwrap_or_else(|| {"}, {"sha": "7f9128228a576629402505e5c61506ae44a6099c", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -747,7 +747,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             }\n             LpExtend(ref lp_base, _, LpInterior(InteriorField(_))) => {\n                 match lp_base.to_type().sty {\n-                    ty::TyStruct(def, _) | ty::TyEnum(def, _) if def.has_dtor(self.tcx()) => {\n+                    ty::TyStruct(def, _) | ty::TyEnum(def, _) if def.has_dtor() => {\n                         // In the case where the owner implements drop, then\n                         // the path must be initialized to prevent a case of\n                         // partial reinitialization"}, {"sha": "2d08183ba6ecaf89546d32f4ee1b3910227815de", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -180,7 +180,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         mc::cat_interior(ref b, mc::InteriorElement(Kind::Pattern, _)) => {\n             match b.ty.sty {\n                 ty::TyStruct(def, _) | ty::TyEnum(def, _) => {\n-                    if def.has_dtor(bccx.tcx) {\n+                    if def.has_dtor() {\n                         Some(cmt.clone())\n                     } else {\n                         check_and_get_illegal_move_origin(bccx, b)"}, {"sha": "465fffe33851f5acdc5d18d11fa2fafd34b5948e", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -137,7 +137,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         mc::cat_interior(ref b, mc::InteriorField(_)) => {\n             match b.ty.sty {\n                 ty::TyStruct(def, _) |\n-                ty::TyEnum(def, _) if def.has_dtor(bccx.tcx) => {\n+                ty::TyEnum(def, _) if def.has_dtor() => {\n                     bccx.span_err(\n                         move_from.span,\n                         &format!(\"cannot move out of type `{}`, \\"}, {"sha": "e582b9266cd94d36e4d07ba8f4385ac7be3e7440", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -1952,26 +1952,26 @@ impl LintPass for MissingCopyImplementations {\n         if !cx.exported_items.contains(&item.id) {\n             return;\n         }\n-        if cx.tcx.destructor_for_type.borrow().contains_key(&DefId::local(item.id)) {\n-            return;\n-        }\n-        let ty = match item.node {\n+        let (def, ty) = match item.node {\n             ast::ItemStruct(_, ref ast_generics) => {\n                 if ast_generics.is_parameterized() {\n                     return;\n                 }\n-                cx.tcx.mk_struct(cx.tcx.lookup_adt_def(DefId::local(item.id)),\n-                                 cx.tcx.mk_substs(Substs::empty()))\n+                let def = cx.tcx.lookup_adt_def(DefId::local(item.id));\n+                (def, cx.tcx.mk_struct(def,\n+                                       cx.tcx.mk_substs(Substs::empty())))\n             }\n             ast::ItemEnum(_, ref ast_generics) => {\n                 if ast_generics.is_parameterized() {\n                     return;\n                 }\n-                cx.tcx.mk_enum(cx.tcx.lookup_adt_def(DefId::local(item.id)),\n-                               cx.tcx.mk_substs(Substs::empty()))\n+                let def = cx.tcx.lookup_adt_def(DefId::local(item.id));\n+                (def, cx.tcx.mk_enum(def,\n+                                     cx.tcx.mk_substs(Substs::empty())))\n             }\n             _ => return,\n         };\n+        if def.has_dtor() { return; }\n         let parameter_environment = cx.tcx.empty_parameter_environment();\n         // FIXME (@jroesch) should probably inver this so that the parameter env still impls this\n         // method\n@@ -2583,7 +2583,7 @@ impl LintPass for DropWithReprExtern {\n                     let self_type_did = self_type_def.did;\n                     let hints = ctx.tcx.lookup_repr_hints(self_type_did);\n                     if hints.iter().any(|attr| *attr == attr::ReprExtern) &&\n-                        ctx.tcx.ty_dtor(self_type_did).has_drop_flag() {\n+                        self_type_def.dtor_kind().has_drop_flag() {\n                         let drop_impl_span = ctx.tcx.map.def_id_span(drop_impl_did,\n                                                                      codemap::DUMMY_SP);\n                         let self_defn_span = ctx.tcx.map.def_id_span(self_type_did,"}, {"sha": "e425ffcaebf647ac242c238b0d7e625e9462516e", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -250,7 +250,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 monomorphize::field_ty(cx.tcx(), substs, field)\n             }).collect::<Vec<_>>();\n             let packed = cx.tcx().lookup_packed(def.did);\n-            let dtor = cx.tcx().ty_dtor(def.did).has_drop_flag();\n+            let dtor = def.dtor_kind().has_drop_flag();\n             if dtor {\n                 ftys.push(cx.tcx().dtor_type());\n             }\n@@ -265,7 +265,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let hint = *cx.tcx().lookup_repr_hints(def.did).get(0)\n                 .unwrap_or(&attr::ReprAny);\n \n-            let dtor = cx.tcx().ty_dtor(def.did).has_drop_flag();\n+            let dtor = def.dtor_kind().has_drop_flag();\n \n             if cases.is_empty() {\n                 // Uninhabitable; represent as unit"}, {"sha": "64c146e3825b09f439c3bf7bde06477e17833ef8", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -1267,7 +1267,7 @@ fn trans_def_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         def::DefStruct(_) => {\n             let ty = expr_ty(bcx, ref_expr);\n             match ty.sty {\n-                ty::TyStruct(def, _) if def.has_dtor(bcx.tcx()) => {\n+                ty::TyStruct(def, _) if def.has_dtor() => {\n                     let repr = adt::represent_type(bcx.ccx(), ty);\n                     adt::trans_set_discr(bcx, &*repr, lldest, 0);\n                 }"}, {"sha": "b72f6bbb451bc99a6d2a7b31ae096e6c2ab1572d", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -356,7 +356,7 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             traits::VtableImpl(data) => data,\n             _ => tcx.sess.bug(&format!(\"dtor for {:?} is not an impl???\", t))\n         };\n-        let dtor_did = tcx.destructor_for_type.borrow()[&def.did];\n+        let dtor_did = def.destructor().unwrap();\n         let datum = callee::trans_fn_ref_with_substs(bcx.ccx(),\n                                                      dtor_did,\n                                                      ExprId(0),\n@@ -534,9 +534,8 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n             }\n         }\n         ty::TyStruct(def, _) | ty::TyEnum(def, _) => {\n-            let tcx = bcx.tcx();\n-            match (tcx.ty_dtor(def.did), skip_dtor) {\n-                (ty::TraitDtor(_, true), false) => {\n+            match (def.dtor_kind(), skip_dtor) {\n+                (ty::TraitDtor(true), false) => {\n                     // FIXME(16758) Since the struct is unsized, it is hard to\n                     // find the drop flag (which is at the end of the struct).\n                     // Lets just ignore the flag and pretend everything will be\n@@ -552,7 +551,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n                         trans_struct_drop(bcx, t, v0)\n                     }\n                 }\n-                (ty::TraitDtor(_, false), false) => {\n+                (ty::TraitDtor(false), false) => {\n                     trans_struct_drop(bcx, t, v0)\n                 }\n                 (ty::NoDtor, _) | (_, true) => {"}, {"sha": "f8778fbc42d2de12953e5dad8f38b917de0172a7", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277eeb95c33ce33090409549b184c9977bf535e5/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=277eeb95c33ce33090409549b184c9977bf535e5", "patch": "@@ -311,9 +311,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             match self_type.ty.sty {\n                 ty::TyEnum(type_def, _) |\n                 ty::TyStruct(type_def, _) => {\n-                    tcx.destructor_for_type\n-                       .borrow_mut()\n-                       .insert(type_def.did, method_def_id.def_id());\n+                    type_def.set_destructor(method_def_id.def_id());\n                     tcx.destructors\n                        .borrow_mut()\n                        .insert(method_def_id.def_id());"}]}