{"sha": "7702ae16a23407cdd909ff9174294563ae1f4ba3", "node_id": "C_kwDOAAsO6NoAKDc3MDJhZTE2YTIzNDA3Y2RkOTA5ZmY5MTc0Mjk0NTYzYWUxZjRiYTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T02:56:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T02:56:06Z"}, "message": "Auto merge of #98221 - cjgillot:single-coh, r=lcnr\n\nPerform coherence checking per impl.\n\nr? `@ghost`", "tree": {"sha": "9f4359ef5069931c4db1af139c8940f429e3d5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4359ef5069931c4db1af139c8940f429e3d5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7702ae16a23407cdd909ff9174294563ae1f4ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7702ae16a23407cdd909ff9174294563ae1f4ba3", "html_url": "https://github.com/rust-lang/rust/commit/7702ae16a23407cdd909ff9174294563ae1f4ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7702ae16a23407cdd909ff9174294563ae1f4ba3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "221bdb62a23f54a32b56b55a6578646f3594fd3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/221bdb62a23f54a32b56b55a6578646f3594fd3b", "html_url": "https://github.com/rust-lang/rust/commit/221bdb62a23f54a32b56b55a6578646f3594fd3b"}, {"sha": "9388824b9ec480e0995fa1cec43b852026deb72e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9388824b9ec480e0995fa1cec43b852026deb72e", "html_url": "https://github.com/rust-lang/rust/commit/9388824b9ec480e0995fa1cec43b852026deb72e"}], "stats": {"total": 535, "additions": 251, "deletions": 284}, "files": [{"sha": "6c3894bbcf7fed8baf1e53c796902755ab5b7f5e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -906,9 +906,10 @@ rustc_queries! {\n \n     /// Checks whether all impls in the crate pass the overlap check, returning\n     /// which impls fail it. If all impls are correct, the returned slice is empty.\n-    query orphan_check_crate(_: ()) -> &'tcx [LocalDefId] {\n-        desc {\n-            \"checking whether the immpl in the this crate follow the orphan rules\",\n+    query orphan_check_impl(key: LocalDefId) -> Result<(), ErrorGuaranteed> {\n+        desc { |tcx|\n+            \"checking whether impl `{}` follows the orphan rules\",\n+            tcx.def_path_str(key.to_def_id()),\n         }\n     }\n "}, {"sha": "a1861529b59649ebed4b7d0946d8a55a133e1846", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -452,7 +452,7 @@ fn report_conflicting_impls(\n     match used_to_be_allowed {\n         None => {\n             let reported = if overlap.with_impl.is_local()\n-                || !tcx.orphan_check_crate(()).contains(&impl_def_id)\n+                || tcx.orphan_check_impl(impl_def_id).is_ok()\n             {\n                 let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n                 Some(decorate("}, {"sha": "447ec87f3026410b5da346a05499e630404c57e1", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -146,7 +146,7 @@ pub fn provide(providers: &mut Providers) {\n     use self::builtin::coerce_unsized_info;\n     use self::inherent_impls::{crate_incoherent_impls, crate_inherent_impls, inherent_impls};\n     use self::inherent_impls_overlap::crate_inherent_impls_overlap_check;\n-    use self::orphan::orphan_check_crate;\n+    use self::orphan::orphan_check_impl;\n \n     *providers = Providers {\n         coherent_trait,\n@@ -155,7 +155,7 @@ pub fn provide(providers: &mut Providers) {\n         inherent_impls,\n         crate_inherent_impls_overlap_check,\n         coerce_unsized_info,\n-        orphan_check_crate,\n+        orphan_check_impl,\n         ..*providers\n     };\n }\n@@ -171,21 +171,12 @@ fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n \n         check_impl(tcx, impl_def_id, trait_ref);\n         check_object_overlap(tcx, impl_def_id, trait_ref);\n-    }\n-    builtin::check_trait(tcx, def_id);\n-}\n \n-pub fn check_coherence(tcx: TyCtxt<'_>) {\n-    tcx.sess.time(\"unsafety_checking\", || unsafety::check(tcx));\n-    tcx.ensure().orphan_check_crate(());\n-\n-    for &trait_def_id in tcx.all_local_trait_impls(()).keys() {\n-        tcx.ensure().coherent_trait(trait_def_id);\n+        tcx.sess.time(\"unsafety_checking\", || unsafety::check_item(tcx, impl_def_id));\n+        tcx.sess.time(\"orphan_checking\", || tcx.ensure().orphan_check_impl(impl_def_id));\n     }\n \n-    // these queries are executed for side-effects (error reporting):\n-    tcx.ensure().crate_inherent_impls(());\n-    tcx.ensure().crate_inherent_impls_overlap_check(());\n+    builtin::check_trait(tcx, def_id);\n }\n \n /// Checks whether an impl overlaps with the automatic `impl Trait for dyn Trait`."}, {"sha": "f3a043a08a30201b253b33f34ba6f8f00acaf39c", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 86, "deletions": 90, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -18,26 +18,29 @@ use rustc_span::Span;\n use rustc_trait_selection::traits;\n use std::ops::ControlFlow;\n \n-pub(super) fn orphan_check_crate(tcx: TyCtxt<'_>, (): ()) -> &[LocalDefId] {\n-    let mut errors = Vec::new();\n-    for (&trait_def_id, impls_of_trait) in tcx.all_local_trait_impls(()) {\n-        for &impl_of_trait in impls_of_trait {\n-            match orphan_check_impl(tcx, impl_of_trait) {\n-                Ok(()) => {}\n-                Err(_) => errors.push(impl_of_trait),\n-            }\n-        }\n+#[instrument(skip(tcx), level = \"debug\")]\n+pub(crate) fn orphan_check_impl(\n+    tcx: TyCtxt<'_>,\n+    impl_def_id: LocalDefId,\n+) -> Result<(), ErrorGuaranteed> {\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+    if let Some(err) = trait_ref.error_reported() {\n+        return Err(err);\n+    }\n \n-        if tcx.trait_is_auto(trait_def_id) {\n-            lint_auto_trait_impls(tcx, trait_def_id, impls_of_trait);\n-        }\n+    let ret = do_orphan_check_impl(tcx, trait_ref, impl_def_id);\n+    if tcx.trait_is_auto(trait_ref.def_id) {\n+        lint_auto_trait_impl(tcx, trait_ref, impl_def_id);\n     }\n-    tcx.arena.alloc_slice(&errors)\n+\n+    ret\n }\n \n-#[instrument(skip(tcx), level = \"debug\")]\n-fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGuaranteed> {\n-    let trait_ref = tcx.impl_trait_ref(def_id).unwrap();\n+fn do_orphan_check_impl<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_ref: ty::TraitRef<'tcx>,\n+    def_id: LocalDefId,\n+) -> Result<(), ErrorGuaranteed> {\n     let trait_def_id = trait_ref.def_id;\n \n     let item = tcx.hir().item(hir::ItemId { def_id });\n@@ -329,89 +332,82 @@ fn emit_orphan_check_error<'tcx>(\n \n /// Lint impls of auto traits if they are likely to have\n /// unsound or surprising effects on auto impls.\n-fn lint_auto_trait_impls(tcx: TyCtxt<'_>, trait_def_id: DefId, impls: &[LocalDefId]) {\n-    let mut non_covering_impls = Vec::new();\n-    for &impl_def_id in impls {\n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-        if trait_ref.references_error() {\n-            return;\n-        }\n+fn lint_auto_trait_impl<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_ref: ty::TraitRef<'tcx>,\n+    impl_def_id: LocalDefId,\n+) {\n+    if tcx.impl_polarity(impl_def_id) != ImplPolarity::Positive {\n+        return;\n+    }\n \n-        if tcx.impl_polarity(impl_def_id) != ImplPolarity::Positive {\n+    assert_eq!(trait_ref.substs.len(), 1);\n+    let self_ty = trait_ref.self_ty();\n+    let (self_type_did, substs) = match self_ty.kind() {\n+        ty::Adt(def, substs) => (def.did(), substs),\n+        _ => {\n+            // FIXME: should also lint for stuff like `&i32` but\n+            // considering that auto traits are unstable, that\n+            // isn't too important for now as this only affects\n+            // crates using `nightly`, and std.\n             return;\n         }\n+    };\n \n-        assert_eq!(trait_ref.substs.len(), 1);\n-        let self_ty = trait_ref.self_ty();\n-        let (self_type_did, substs) = match self_ty.kind() {\n-            ty::Adt(def, substs) => (def.did(), substs),\n-            _ => {\n-                // FIXME: should also lint for stuff like `&i32` but\n-                // considering that auto traits are unstable, that\n-                // isn't too important for now as this only affects\n-                // crates using `nightly`, and std.\n-                continue;\n-            }\n-        };\n+    // Impls which completely cover a given root type are fine as they\n+    // disable auto impls entirely. So only lint if the substs\n+    // are not a permutation of the identity substs.\n+    let Err(arg) = tcx.uses_unique_generic_params(substs, IgnoreRegions::Yes) else {\n+        // ok\n+        return;\n+    };\n \n-        // Impls which completely cover a given root type are fine as they\n-        // disable auto impls entirely. So only lint if the substs\n-        // are not a permutation of the identity substs.\n-        match tcx.uses_unique_generic_params(substs, IgnoreRegions::Yes) {\n-            Ok(()) => {} // ok\n-            Err(arg) => {\n-                // Ideally:\n-                //\n-                // - compute the requirements for the auto impl candidate\n-                // - check whether these are implied by the non covering impls\n-                // - if not, emit the lint\n-                //\n-                // What we do here is a bit simpler:\n-                //\n-                // - badly check if an auto impl candidate definitely does not apply\n-                //   for the given simplified type\n-                // - if so, do not lint\n-                if fast_reject_auto_impl(tcx, trait_def_id, self_ty) {\n-                    // ok\n-                } else {\n-                    non_covering_impls.push((impl_def_id, self_type_did, arg));\n-                }\n-            }\n-        }\n+    // Ideally:\n+    //\n+    // - compute the requirements for the auto impl candidate\n+    // - check whether these are implied by the non covering impls\n+    // - if not, emit the lint\n+    //\n+    // What we do here is a bit simpler:\n+    //\n+    // - badly check if an auto impl candidate definitely does not apply\n+    //   for the given simplified type\n+    // - if so, do not lint\n+    if fast_reject_auto_impl(tcx, trait_ref.def_id, self_ty) {\n+        // ok\n+        return;\n     }\n \n-    for &(impl_def_id, self_type_did, arg) in &non_covering_impls {\n-        tcx.struct_span_lint_hir(\n-            lint::builtin::SUSPICIOUS_AUTO_TRAIT_IMPLS,\n-            tcx.hir().local_def_id_to_hir_id(impl_def_id),\n-            tcx.def_span(impl_def_id),\n-            |err| {\n-                let item_span = tcx.def_span(self_type_did);\n-                let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n-                let mut err = err.build(&format!(\n-                    \"cross-crate traits with a default impl, like `{}`, \\\n+    tcx.struct_span_lint_hir(\n+        lint::builtin::SUSPICIOUS_AUTO_TRAIT_IMPLS,\n+        tcx.hir().local_def_id_to_hir_id(impl_def_id),\n+        tcx.def_span(impl_def_id),\n+        |err| {\n+            let item_span = tcx.def_span(self_type_did);\n+            let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n+            let mut err = err.build(&format!(\n+                \"cross-crate traits with a default impl, like `{}`, \\\n                          should not be specialized\",\n-                    tcx.def_path_str(trait_def_id),\n-                ));\n-                match arg {\n-                    ty::util::NotUniqueParam::DuplicateParam(arg) => {\n-                        err.note(&format!(\"`{}` is mentioned multiple times\", arg));\n-                    }\n-                    ty::util::NotUniqueParam::NotParam(arg) => {\n-                        err.note(&format!(\"`{}` is not a generic parameter\", arg));\n-                    }\n+                tcx.def_path_str(trait_ref.def_id),\n+            ));\n+            match arg {\n+                ty::util::NotUniqueParam::DuplicateParam(arg) => {\n+                    err.note(&format!(\"`{}` is mentioned multiple times\", arg));\n                 }\n-                err.span_note(\n-                    item_span,\n-                    &format!(\n-                        \"try using the same sequence of generic parameters as the {} definition\",\n-                        self_descr,\n-                    ),\n-                );\n-                err.emit();\n-            },\n-        );\n-    }\n+                ty::util::NotUniqueParam::NotParam(arg) => {\n+                    err.note(&format!(\"`{}` is not a generic parameter\", arg));\n+                }\n+            }\n+            err.span_note(\n+                item_span,\n+                &format!(\n+                    \"try using the same sequence of generic parameters as the {} definition\",\n+                    self_descr,\n+                ),\n+            );\n+            err.emit();\n+        },\n+    );\n }\n \n fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty: Ty<'tcx>) -> bool {"}, {"sha": "e45fb5fe41c02599502b5bb5bca5f1eea8ea11f5", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -6,37 +6,18 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::Unsafety;\n use rustc_middle::ty::TyCtxt;\n+use rustc_span::def_id::LocalDefId;\n \n-pub fn check(tcx: TyCtxt<'_>) {\n-    for id in tcx.hir().items() {\n-        if matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n-            let item = tcx.hir().item(id);\n-            if let hir::ItemKind::Impl(ref impl_) = item.kind {\n-                check_unsafety_coherence(\n-                    tcx,\n-                    item,\n-                    Some(&impl_.generics),\n-                    impl_.unsafety,\n-                    impl_.polarity,\n-                );\n-            }\n-        }\n-    }\n-}\n+pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+    debug_assert!(matches!(tcx.def_kind(def_id), DefKind::Impl));\n+    let item = tcx.hir().expect_item(def_id);\n+    let hir::ItemKind::Impl(ref impl_) = item.kind else { bug!() };\n \n-fn check_unsafety_coherence<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    item: &hir::Item<'_>,\n-    impl_generics: Option<&hir::Generics<'_>>,\n-    unsafety: hir::Unsafety,\n-    polarity: hir::ImplPolarity,\n-) {\n     if let Some(trait_ref) = tcx.impl_trait_ref(item.def_id) {\n         let trait_def = tcx.trait_def(trait_ref.def_id);\n-        let unsafe_attr = impl_generics.and_then(|generics| {\n-            generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\")\n-        });\n-        match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n+        let unsafe_attr =\n+            impl_.generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\");\n+        match (trait_def.unsafety, unsafe_attr, impl_.unsafety, impl_.polarity) {\n             (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {\n                 struct_span_err!(\n                     tcx.sess,"}, {"sha": "a7a008bc2eb0463ae902dfd0f6ee09414a6c2bec", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -513,7 +513,15 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorGuaranteed> {\n     })?;\n \n     tcx.sess.track_errors(|| {\n-        tcx.sess.time(\"coherence_checking\", || coherence::check_coherence(tcx));\n+        tcx.sess.time(\"coherence_checking\", || {\n+            for &trait_def_id in tcx.all_local_trait_impls(()).keys() {\n+                tcx.ensure().coherent_trait(trait_def_id);\n+            }\n+\n+            // these queries are executed for side-effects (error reporting):\n+            tcx.ensure().crate_inherent_impls(());\n+            tcx.ensure().crate_inherent_impls_overlap_check(());\n+        });\n     })?;\n \n     if tcx.features().rustc_attrs {"}, {"sha": "c364c707ff9eac202517a2a371fc43b01b498760", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,15 @@\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:15:1\n+   |\n+LL | impl !Marker1 for dyn Object + Marker2 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n+\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:17:1\n+   |\n+LL | impl !Marker2 for dyn Object + Marker2 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n+\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:23:1\n    |\n@@ -21,18 +33,6 @@ error[E0321]: cross-crate traits with a default impl, like `Send`, can only be i\n LL | impl !Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n-error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:15:1\n-   |\n-LL | impl !Marker1 for dyn Object + Marker2 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n-\n-error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:17:1\n-   |\n-LL | impl !Marker2 for dyn Object + Marker2 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n-\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0117, E0321, E0371."}, {"sha": "b80429794f92cb2b76eddef9a4657600934ad36c", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,15 @@\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:15:1\n+   |\n+LL | impl Marker1 for dyn Object + Marker2 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n+\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:17:1\n+   |\n+LL | impl Marker2 for dyn Object + Marker2 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n+\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:23:1\n    |\n@@ -21,18 +33,6 @@ error[E0321]: cross-crate traits with a default impl, like `Send`, can only be i\n LL | unsafe impl Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n-error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:15:1\n-   |\n-LL | impl Marker1 for dyn Object + Marker2 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n-\n-error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:17:1\n-   |\n-LL | impl Marker2 for dyn Object + Marker2 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n-\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0117, E0321, E0371."}, {"sha": "86356af256433865f48df61496b3538e8ba86bcf", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -9,49 +9,49 @@ LL | impl Copy for i32 {}\n    |\n    = note: define and implement a trait or new type instead\n \n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`\n+  --> $DIR/coherence-impls-copy.rs:28:1\n+   |\n+LL | impl Copy for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> Copy for &T\n+             where T: ?Sized;\n+\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:25:1\n+  --> $DIR/coherence-impls-copy.rs:33:1\n    |\n-LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^----------------\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^------------------\n    | |             |\n-   | |             this is not defined in the current crate because tuples are always foreign\n+   | |             this is not defined in the current crate because slices are always foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:30:1\n+  --> $DIR/coherence-impls-copy.rs:25:1\n    |\n-LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^--------\n+LL | impl Copy for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^----------------\n    | |             |\n-   | |             this is not defined in the current crate because slices are always foreign\n+   | |             this is not defined in the current crate because tuples are always foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:33:1\n+  --> $DIR/coherence-impls-copy.rs:30:1\n    |\n-LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^------------------\n+LL | impl Copy for [MyType] {}\n+   | ^^^^^^^^^^^^^^--------\n    | |             |\n    | |             this is not defined in the current crate because slices are always foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`\n-  --> $DIR/coherence-impls-copy.rs:28:1\n-   |\n-LL | impl Copy for &'static NotSync {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<T> Copy for &T\n-             where T: ?Sized;\n-\n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:21:15\n    |"}, {"sha": "e1071846e146ea6f5c9e42e046c65f584cb82da8", "filename": "src/test/ui/coherence/coherence-impls-send.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,14 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:25:1\n+   |\n+LL | unsafe impl Send for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^------------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-send.rs:16:1\n    |\n@@ -26,17 +37,6 @@ LL | unsafe impl Send for [MyType] {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:25:1\n-   |\n-LL | unsafe impl Send for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^------------------\n-   | |                    |\n-   | |                    this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0117, E0321."}, {"sha": "17a7544521de5d6657c15cc8e917f04873c103b5", "filename": "src/test/ui/coherence/coherence-impls-sized.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,36 +1,3 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:20:1\n-   |\n-LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^----------------\n-   | |              |\n-   | |              this is not defined in the current crate because tuples are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:27:1\n-   |\n-LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^--------\n-   | |              |\n-   | |              this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:31:1\n-   |\n-LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^------------------\n-   | |              |\n-   | |              this is not defined in the current crate because slices are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:14:1\n    |\n@@ -49,6 +16,17 @@ error[E0322]: explicit impls for the `Sized` trait are not permitted\n LL | impl Sized for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:20:1\n+   |\n+LL | impl Sized for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^----------------\n+   | |              |\n+   | |              this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:24:1\n    |\n@@ -61,12 +39,34 @@ error[E0322]: explicit impls for the `Sized` trait are not permitted\n LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:27:1\n+   |\n+LL | impl Sized for [MyType] {}\n+   | ^^^^^^^^^^^^^^^--------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:31:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:31:1\n+   |\n+LL | impl Sized for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^------------------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0117, E0322."}, {"sha": "d2ca63fa1469172d2501cf494b6799b6da032f6f", "filename": "src/test/ui/coherence/coherence-with-closure.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueClosure>`\n+  --> $DIR/coherence-with-closure.rs:12:1\n+   |\n+LL | impl Trait for Wrapper<OpaqueClosure> {}\n+   | ------------------------------------- first implementation here\n+LL |\n+LL | impl<T: Sync> Trait for Wrapper<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueClosure>`\n+\n error: cannot implement trait on type alias impl trait\n   --> $DIR/coherence-with-closure.rs:10:24\n    |\n@@ -10,15 +19,6 @@ note: type alias impl trait defined here\n LL | type OpaqueClosure = impl Sized;\n    |                      ^^^^^^^^^^\n \n-error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueClosure>`\n-  --> $DIR/coherence-with-closure.rs:12:1\n-   |\n-LL | impl Trait for Wrapper<OpaqueClosure> {}\n-   | ------------------------------------- first implementation here\n-LL |\n-LL | impl<T: Sync> Trait for Wrapper<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueClosure>`\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "804bc1c3a6dd47020c95772c713975ed5d534beb", "filename": "src/test/ui/coherence/coherence-with-generator.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n+  --> $DIR/coherence-with-generator.rs:16:1\n+   |\n+LL | impl Trait for Wrapper<OpaqueGenerator> {}\n+   | --------------------------------------- first implementation here\n+LL |\n+LL | impl<T: Sync> Trait for Wrapper<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueGenerator>`\n+\n error: cannot implement trait on type alias impl trait\n   --> $DIR/coherence-with-generator.rs:14:24\n    |\n@@ -10,15 +19,6 @@ note: type alias impl trait defined here\n LL | type OpaqueGenerator = impl Sized;\n    |                        ^^^^^^^^^^\n \n-error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n-  --> $DIR/coherence-with-generator.rs:16:1\n-   |\n-LL | impl Trait for Wrapper<OpaqueGenerator> {}\n-   | --------------------------------------- first implementation here\n-LL |\n-LL | impl<T: Sync> Trait for Wrapper<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueGenerator>`\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "5e10272b0db3c3e05c69bf6f56c27c60eadf6287", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,12 @@\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+  --> $DIR/auto-trait.rs:21:1\n+   |\n+LL | impl<T: Send> AnotherTrait for T {}\n+   | -------------------------------- first implementation here\n+...\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n+\n error: cannot implement trait on type alias impl trait\n   --> $DIR/auto-trait.rs:21:25\n    |\n@@ -10,15 +19,6 @@ note: type alias impl trait defined here\n LL | type OpaqueType = impl OpaqueTrait;\n    |                   ^^^^^^^^^^^^^^^^\n \n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n-  --> $DIR/auto-trait.rs:21:1\n-   |\n-LL | impl<T: Send> AnotherTrait for T {}\n-   | -------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "479b451855d5517fb2a7fe6edf8358d15130874c", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,14 @@\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+  --> $DIR/negative-reasoning.rs:19:1\n+   |\n+LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n+   | ------------------------------------------- first implementation here\n+...\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n+   |\n+   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n+\n error: cannot implement trait on type alias impl trait\n   --> $DIR/negative-reasoning.rs:19:25\n    |\n@@ -10,17 +21,6 @@ note: type alias impl trait defined here\n LL | type OpaqueType = impl OpaqueTrait;\n    |                   ^^^^^^^^^^^^^^^^\n \n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n-  --> $DIR/negative-reasoning.rs:19:1\n-   |\n-LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n-   | ------------------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n-   |\n-   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "b9d93160192e969c63379bd0df5472527fba7b79", "filename": "src/test/ui/traits/alias/issue-83613.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -1,3 +1,11 @@\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `OpaqueType`\n+  --> $DIR/issue-83613.rs:10:1\n+   |\n+LL | impl<T: Send> AnotherTrait for T {}\n+   | -------------------------------- first implementation here\n+LL | impl AnotherTrait for OpaqueType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `OpaqueType`\n+\n error: cannot implement trait on type alias impl trait\n   --> $DIR/issue-83613.rs:10:23\n    |\n@@ -10,14 +18,6 @@ note: type alias impl trait defined here\n LL | type OpaqueType = impl OpaqueTrait;\n    |                   ^^^^^^^^^^^^^^^^\n \n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `OpaqueType`\n-  --> $DIR/issue-83613.rs:10:1\n-   |\n-LL | impl<T: Send> AnotherTrait for T {}\n-   | -------------------------------- first implementation here\n-LL | impl AnotherTrait for OpaqueType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `OpaqueType`\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "92f9f4b467a97be51f4d7f0051ea4e3aefcfbe3c", "filename": "src/test/ui/traits/issue-78372.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.rs?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -4,7 +4,6 @@ impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {} //~ ERROR cannot find type `U`\n //~^ ERROR cannot find type `MISC` in this scope\n //~| ERROR use of unstable library feature 'dispatch_from_dyn'\n //~| ERROR the trait `DispatchFromDyn` may only be implemented for a coercion between structures\n-//~| ERROR type parameter `T` must be covered by another type when it appears before the first\n trait Foo: X<u32> {}\n trait X<T> {\n     fn foo(self: Smaht<Self, T>);"}, {"sha": "7574c9107d9accc620e897eea69b132a1f07fd81", "filename": "src/test/ui/traits/issue-78372.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7702ae16a23407cdd909ff9174294563ae1f4ba3/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr?ref=7702ae16a23407cdd909ff9174294563ae1f4ba3", "patch": "@@ -50,22 +50,13 @@ LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n    |\n    = help: add `#![feature(dispatch_from_dyn)]` to the crate attributes to enable\n \n-error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Smaht<[type error], [type error]>`)\n-  --> $DIR/issue-78372.rs:3:6\n-   |\n-LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n-   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Smaht<[type error], [type error]>`)\n-   |\n-   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local, and no uncovered type parameters appear before that first local type\n-   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n-\n error[E0378]: the trait `DispatchFromDyn` may only be implemented for a coercion between structures\n   --> $DIR/issue-78372.rs:3:1\n    |\n LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0210, E0378, E0412, E0658.\n-For more information about an error, try `rustc --explain E0210`.\n+Some errors have detailed explanations: E0378, E0412, E0658.\n+For more information about an error, try `rustc --explain E0378`."}]}