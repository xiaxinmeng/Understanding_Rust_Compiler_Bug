{"sha": "6e7ec0c5b4b961a9260e72613b7d5477f09d7187", "node_id": "C_kwDOAAsO6NoAKDZlN2VjMGM1YjRiOTYxYTkyNjBlNzI2MTNiN2Q1NDc3ZjA5ZDcxODc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-12T13:45:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-07T20:21:57Z"}, "message": "Simplify collect_in_band_defs.", "tree": {"sha": "6ad7f935c9894b727a74fd21fdb4cf2e2825249b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad7f935c9894b727a74fd21fdb4cf2e2825249b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7ec0c5b4b961a9260e72613b7d5477f09d7187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7ec0c5b4b961a9260e72613b7d5477f09d7187", "html_url": "https://github.com/rust-lang/rust/commit/6e7ec0c5b4b961a9260e72613b7d5477f09d7187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7ec0c5b4b961a9260e72613b7d5477f09d7187/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6f079e4987ded15c13a15b734e7cfb8176839f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6f079e4987ded15c13a15b734e7cfb8176839f", "html_url": "https://github.com/rust-lang/rust/commit/0b6f079e4987ded15c13a15b734e7cfb8176839f"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "ec5022679d43977b3fd05fa0a2e8cdb8c5feca23", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6e7ec0c5b4b961a9260e72613b7d5477f09d7187/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7ec0c5b4b961a9260e72613b7d5477f09d7187/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6e7ec0c5b4b961a9260e72613b7d5477f09d7187", "patch": "@@ -646,31 +646,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// parameter while `f` is running (and restored afterwards).\n     fn collect_in_band_defs<T>(\n         &mut self,\n-        parent_def_id: LocalDefId,\n-        anonymous_lifetime_mode: AnonymousLifetimeMode,\n-        f: impl FnOnce(&mut Self) -> (Vec<hir::GenericParam<'hir>>, T),\n-    ) -> (Vec<hir::GenericParam<'hir>>, T) {\n+        f: impl FnOnce(&mut Self) -> T,\n+    ) -> (Vec<(Span, ParamName)>, T) {\n         assert!(!self.is_collecting_in_band_lifetimes);\n         assert!(self.lifetimes_to_define.is_empty());\n-        let old_anonymous_lifetime_mode = self.anonymous_lifetime_mode;\n-\n-        self.anonymous_lifetime_mode = anonymous_lifetime_mode;\n         self.is_collecting_in_band_lifetimes = true;\n \n-        let (in_band_ty_params, res) = f(self);\n+        let res = f(self);\n \n         self.is_collecting_in_band_lifetimes = false;\n-        self.anonymous_lifetime_mode = old_anonymous_lifetime_mode;\n-\n-        let lifetimes_to_define = self.lifetimes_to_define.split_off(0);\n \n-        let params = lifetimes_to_define\n-            .into_iter()\n-            .map(|(span, hir_name)| self.lifetime_to_generic_param(span, hir_name, parent_def_id))\n-            .chain(in_band_ty_params.into_iter())\n-            .collect();\n-\n-        (params, res)\n+        let lifetimes_to_define = std::mem::take(&mut self.lifetimes_to_define);\n+        (lifetimes_to_define, res)\n     }\n \n     /// Converts a lifetime into a new generic parameter.\n@@ -785,27 +772,39 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n         f: impl FnOnce(&mut Self, &mut Vec<hir::GenericParam<'hir>>) -> T,\n     ) -> (hir::Generics<'hir>, T) {\n-        let (in_band_defs, (mut lowered_generics, res)) =\n-            self.with_in_scope_lifetime_defs(&generics.params, |this| {\n-                this.collect_in_band_defs(parent_def_id, anonymous_lifetime_mode, |this| {\n-                    let mut params = Vec::new();\n-                    // Note: it is necessary to lower generics *before* calling `f`.\n-                    // When lowering `async fn`, there's a final step when lowering\n-                    // the return type that assumes that all in-scope lifetimes have\n-                    // already been added to either `in_scope_lifetimes` or\n-                    // `lifetimes_to_define`. If we swapped the order of these two,\n-                    // in-band-lifetimes introduced by generics or where-clauses\n-                    // wouldn't have been added yet.\n-                    let generics = this.lower_generics_mut(\n-                        generics,\n-                        ImplTraitContext::Universal(&mut params, this.current_hir_id_owner),\n-                    );\n-                    let res = f(this, &mut params);\n-                    (params, (generics, res))\n+        let (lifetimes_to_define, (mut lowered_generics, impl_trait_defs, res)) = self\n+            .collect_in_band_defs(|this| {\n+                this.with_anonymous_lifetime_mode(anonymous_lifetime_mode, |this| {\n+                    this.with_in_scope_lifetime_defs(&generics.params, |this| {\n+                        let mut impl_trait_defs = Vec::new();\n+                        // Note: it is necessary to lower generics *before* calling `f`.\n+                        // When lowering `async fn`, there's a final step when lowering\n+                        // the return type that assumes that all in-scope lifetimes have\n+                        // already been added to either `in_scope_lifetimes` or\n+                        // `lifetimes_to_define`. If we swapped the order of these two,\n+                        // in-band-lifetimes introduced by generics or where-clauses\n+                        // wouldn't have been added yet.\n+                        let generics = this.lower_generics_mut(\n+                            generics,\n+                            ImplTraitContext::Universal(\n+                                &mut impl_trait_defs,\n+                                this.current_hir_id_owner,\n+                            ),\n+                        );\n+                        let res = f(this, &mut impl_trait_defs);\n+                        (generics, impl_trait_defs, res)\n+                    })\n                 })\n             });\n \n-        lowered_generics.params.extend(in_band_defs);\n+        lowered_generics.params.extend(\n+            lifetimes_to_define\n+                .into_iter()\n+                .map(|(span, hir_name)| {\n+                    self.lifetime_to_generic_param(span, hir_name, parent_def_id)\n+                })\n+                .chain(impl_trait_defs),\n+        );\n \n         let lowered_generics = lowered_generics.into_generics(self.arena);\n         (lowered_generics, res)"}]}