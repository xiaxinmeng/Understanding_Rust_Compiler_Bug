{"sha": "ff87ff962cc0a267e1261b936227d840eff021e9", "node_id": "C_kwDOAAsO6NoAKGZmODdmZjk2MmNjMGEyNjdlMTI2MWI5MzYyMjdkODQwZWZmMDIxZTk", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-06T17:42:07Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-06T18:04:31Z"}, "message": "Replace some uses of vec.drain(..) with vec.into_iter()\n\nIntoIter should optimize better than Drain", "tree": {"sha": "bee784968e5efaeedce22399ef9aec909a261fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee784968e5efaeedce22399ef9aec909a261fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff87ff962cc0a267e1261b936227d840eff021e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff87ff962cc0a267e1261b936227d840eff021e9", "html_url": "https://github.com/rust-lang/rust/commit/ff87ff962cc0a267e1261b936227d840eff021e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff87ff962cc0a267e1261b936227d840eff021e9/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d22dd65835190278f315e06442614142653ec98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d22dd65835190278f315e06442614142653ec98f", "html_url": "https://github.com/rust-lang/rust/commit/d22dd65835190278f315e06442614142653ec98f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "253ac266bedaa246cc1039b9a6e5191447cb152b", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff87ff962cc0a267e1261b936227d840eff021e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff87ff962cc0a267e1261b936227d840eff021e9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=ff87ff962cc0a267e1261b936227d840eff021e9", "patch": "@@ -2665,7 +2665,7 @@ impl<'tcx> UserTypeProjections {\n         mut self,\n         mut f: impl FnMut(UserTypeProjection) -> UserTypeProjection,\n     ) -> Self {\n-        self.contents = self.contents.drain(..).map(|(proj, span)| (f(proj), span)).collect();\n+        self.contents = self.contents.into_iter().map(|(proj, span)| (f(proj), span)).collect();\n         self\n     }\n "}, {"sha": "b51e93a429dffcd8e7cca44ca811a1d24677cbe6", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff87ff962cc0a267e1261b936227d840eff021e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff87ff962cc0a267e1261b936227d840eff021e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ff87ff962cc0a267e1261b936227d840eff021e9", "patch": "@@ -333,7 +333,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let candidates = self\n             .r\n             .lookup_import_candidates(ident, ns, &self.parent_scope, is_expected)\n-            .drain(..)\n+            .into_iter()\n             .filter(|ImportSuggestion { did, .. }| {\n                 match (did, res.and_then(|res| res.opt_def_id())) {\n                     (Some(suggestion_did), Some(actual_did)) => *suggestion_did != actual_did,\n@@ -1554,7 +1554,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         if suggest_only_tuple_variants {\n             // Suggest only tuple variants regardless of whether they have fields and do not\n             // suggest path with added parentheses.\n-            let mut suggestable_variants = variants\n+            let suggestable_variants = variants\n                 .iter()\n                 .filter(|(.., kind)| *kind == CtorKind::Fn)\n                 .map(|(variant, ..)| path_names_to_string(variant))\n@@ -1580,7 +1580,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestions(\n                     span,\n                     &msg,\n-                    suggestable_variants.drain(..),\n+                    suggestable_variants.into_iter(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -1638,7 +1638,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 );\n             }\n \n-            let mut suggestable_variants_with_placeholders = variants\n+            let suggestable_variants_with_placeholders = variants\n                 .iter()\n                 .filter(|(_, def_id, kind)| needs_placeholder(*def_id, *kind))\n                 .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n@@ -1663,7 +1663,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestions(\n                     span,\n                     msg,\n-                    suggestable_variants_with_placeholders.drain(..),\n+                    suggestable_variants_with_placeholders.into_iter(),\n                     Applicability::HasPlaceholders,\n                 );\n             }"}]}