{"sha": "a6919ef889fe48daf796268b9619f64020ca4afa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OTE5ZWY4ODlmZTQ4ZGFmNzk2MjY4Yjk2MTlmNjQwMjBjYTRhZmE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-19T16:20:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-19T16:20:20Z"}, "message": "Rollup merge of #77877 - scottmcm:fewer-try-trait-method-references, r=shepmaster\n\nUse `try{}` in `try_fold` to decouple iterators in the library from `Try` details\n\nI'd like to experiment with changing the `?`/`try` desugaring and correspondingly the `Try` trait (see #42327 for discussions about the suboptimalities of the current one) and this change would keep from needing any `cfg(bootstrap)` in iterator things.\n\nThis will be lowered to the same thing, so shouldn't cause any perf issues:\nhttps://github.com/rust-lang/rust/blob/08e2d4616613716362b4b49980ff303f2b9ae654/compiler/rustc_ast_lowering/src/expr.rs#L428-L429\n\nBut ~~I'll trigger~~ I've triggered [a perf run](https://perf.rust-lang.org/compare.html?start=d65c08e9cc164b7b44de53503fae859a4fafd976&end=2c067c5235e779cd75e9f0cdfe572c64f1a12b9b) just in case.\n\n~~EDIT: changed to a draft because of the rustfmt-only syntax error.  zulip thread about it: https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/New.20bootstrap.20rustfmt.20doesn't.20support.20syntax.20from.20sept.3F/near/213098097~~\n\nEDIT: This now includes a rustfmt version bump to get through tidy.", "tree": {"sha": "1988d1a685dcf8c06570a92ad4955c82845a05b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1988d1a685dcf8c06570a92ad4955c82845a05b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6919ef889fe48daf796268b9619f64020ca4afa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjbzFCRBK7hj4Ov3rIwAAdHIIABCRu7vkBkPMxbpdAeE0fEG1\nPoTGi+8wd/8o7hZkky+BivVHnSzGAhHGoJFeQbaQ1ZgE3Wd/eEZRhnOBSsrZWC0+\nyEIRb01yWb497TqPQEAVwWY4jXgZbwpNod/Nc7zmCJqLsp+OxaflgnMpLOs1ZzGP\ntmFXOOXDKSSdz4n79JTXCcty2gD/BgkeS61ITvEcemu+obIcjbu4NMJDEAbF33DA\nMFEE+2okxo9RbJQxwu/rbrcgrCNCH1mNVZKZYlFbKLSydhvo/z5YhTd31Qbm9DBo\nDroX60B+R6X8WpSd+jSezCf70S4PyCbv/BC01hwE9K3yC36jfOIOzquQDXzG2I4=\n=LFmU\n-----END PGP SIGNATURE-----\n", "payload": "tree 1988d1a685dcf8c06570a92ad4955c82845a05b1\nparent cb2462c53f2cc3f140c0f1ea0976261cab968a34\nparent 8374c1702c1d9858d8906051cd531757be63998d\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1603124420 +0200\ncommitter GitHub <noreply@github.com> 1603124420 +0200\n\nRollup merge of #77877 - scottmcm:fewer-try-trait-method-references, r=shepmaster\n\nUse `try{}` in `try_fold` to decouple iterators in the library from `Try` details\n\nI'd like to experiment with changing the `?`/`try` desugaring and correspondingly the `Try` trait (see #42327 for discussions about the suboptimalities of the current one) and this change would keep from needing any `cfg(bootstrap)` in iterator things.\n\nThis will be lowered to the same thing, so shouldn't cause any perf issues:\nhttps://github.com/rust-lang/rust/blob/08e2d4616613716362b4b49980ff303f2b9ae654/compiler/rustc_ast_lowering/src/expr.rs#L428-L429\n\nBut ~~I'll trigger~~ I've triggered [a perf run](https://perf.rust-lang.org/compare.html?start=d65c08e9cc164b7b44de53503fae859a4fafd976&end=2c067c5235e779cd75e9f0cdfe572c64f1a12b9b) just in case.\n\n~~EDIT: changed to a draft because of the rustfmt-only syntax error.  zulip thread about it: https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/New.20bootstrap.20rustfmt.20doesn't.20support.20syntax.20from.20sept.3F/near/213098097~~\n\nEDIT: This now includes a rustfmt version bump to get through tidy.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6919ef889fe48daf796268b9619f64020ca4afa", "html_url": "https://github.com/rust-lang/rust/commit/a6919ef889fe48daf796268b9619f64020ca4afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6919ef889fe48daf796268b9619f64020ca4afa/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2462c53f2cc3f140c0f1ea0976261cab968a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2462c53f2cc3f140c0f1ea0976261cab968a34", "html_url": "https://github.com/rust-lang/rust/commit/cb2462c53f2cc3f140c0f1ea0976261cab968a34"}, {"sha": "8374c1702c1d9858d8906051cd531757be63998d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8374c1702c1d9858d8906051cd531757be63998d", "html_url": "https://github.com/rust-lang/rust/commit/8374c1702c1d9858d8906051cd531757be63998d"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "2e070d71224422b9bb0e190e802a2d5fd1de0084", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -109,7 +109,7 @@ where\n             acc = b.try_fold(acc, f)?;\n             // we don't fuse the second iterator\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     fn fold<Acc, F>(self, mut acc: Acc, mut f: F) -> Acc\n@@ -292,7 +292,7 @@ where\n             acc = a.try_rfold(acc, f)?;\n             // we don't fuse the second iterator\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     fn rfold<Acc, F>(self, mut acc: Acc, mut f: F) -> Acc"}, {"sha": "35adb4f69d854eec06cab4edfdf17eb80bcda98d", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -317,7 +317,7 @@ where\n         }\n         self.backiter = None;\n \n-        Try::from_ok(init)\n+        try { init }\n     }\n \n     #[inline]\n@@ -397,7 +397,7 @@ where\n         }\n         self.frontiter = None;\n \n-        Try::from_ok(init)\n+        try { init }\n     }\n \n     #[inline]"}, {"sha": "60ac3524e66964c65b3c37e1d6c517815c5bc788", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -303,7 +303,7 @@ where\n             acc = iter.try_fold(acc, fold)?;\n             self.iter = None;\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     #[inline]\n@@ -353,7 +353,7 @@ where\n             acc = iter.try_rfold(acc, fold)?;\n             self.iter = None;\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     #[inline]"}, {"sha": "bf30dcb7689fab38c092d497bd5a27c80f248e2c", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -579,7 +579,7 @@ where\n         })?;\n \n         if is_empty {\n-            return Try::from_ok(acc);\n+            return try { acc };\n         }\n \n         loop {\n@@ -715,7 +715,7 @@ where\n         if self.first_take {\n             self.first_take = false;\n             match self.iter.next() {\n-                None => return Try::from_ok(acc),\n+                None => return try { acc },\n                 Some(x) => acc = f(acc, x)?,\n             }\n         }\n@@ -792,7 +792,7 @@ where\n         }\n \n         match self.next_back() {\n-            None => Try::from_ok(init),\n+            None => try { init },\n             Some(x) => {\n                 let acc = f(init, x)?;\n                 from_fn(nth_back(&mut self.iter, self.step)).try_fold(acc, f)\n@@ -1075,7 +1075,7 @@ fn filter_try_fold<'a, T, Acc, R: Try<Ok = Acc>>(\n     predicate: &'a mut impl FnMut(&T) -> bool,\n     mut fold: impl FnMut(Acc, T) -> R + 'a,\n ) -> impl FnMut(Acc, T) -> R + 'a {\n-    move |acc, item| if predicate(&item) { fold(acc, item) } else { R::from_ok(acc) }\n+    move |acc, item| if predicate(&item) { fold(acc, item) } else { try { acc } }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1229,7 +1229,7 @@ fn filter_map_try_fold<'a, T, B, Acc, R: Try<Ok = Acc>>(\n ) -> impl FnMut(Acc, T) -> R + 'a {\n     move |acc, item| match f(item) {\n         Some(x) => fold(acc, x),\n-        None => R::from_ok(acc),\n+        None => try { acc },\n     }\n }\n \n@@ -1660,7 +1660,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n         R: Try<Ok = B>,\n     {\n         let acc = match self.peeked.take() {\n-            Some(None) => return Try::from_ok(init),\n+            Some(None) => return try { init },\n             Some(Some(v)) => f(init, v)?,\n             None => init,\n         };\n@@ -1703,7 +1703,7 @@ where\n         R: Try<Ok = B>,\n     {\n         match self.peeked.take() {\n-            Some(None) => Try::from_ok(init),\n+            Some(None) => try { init },\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n                 Ok(acc) => f(acc, v),\n                 Err(e) => {\n@@ -1938,7 +1938,7 @@ where\n         if !self.flag {\n             match self.next() {\n                 Some(v) => init = fold(init, v)?,\n-                None => return Try::from_ok(init),\n+                None => return try { init },\n             }\n         }\n         self.iter.try_fold(init, fold)\n@@ -2065,13 +2065,13 @@ where\n                     ControlFlow::from_try(fold(acc, x))\n                 } else {\n                     *flag = true;\n-                    ControlFlow::Break(Try::from_ok(acc))\n+                    ControlFlow::Break(try { acc })\n                 }\n             }\n         }\n \n         if self.flag {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let flag = &mut self.flag;\n             let p = &mut self.predicate;\n@@ -2180,7 +2180,7 @@ where\n         let Self { iter, predicate } = self;\n         iter.try_fold(init, |acc, x| match predicate(x) {\n             Some(item) => ControlFlow::from_try(fold(acc, item)),\n-            None => ControlFlow::Break(Try::from_ok(acc)),\n+            None => ControlFlow::Break(try { acc }),\n         })\n         .into_try()\n     }\n@@ -2316,7 +2316,7 @@ where\n         if n > 0 {\n             // nth(n) skips n+1\n             if self.iter.nth(n - 1).is_none() {\n-                return Try::from_ok(init);\n+                return try { init };\n             }\n         }\n         self.iter.try_fold(init, fold)\n@@ -2381,11 +2381,7 @@ where\n         }\n \n         let n = self.len();\n-        if n == 0 {\n-            Try::from_ok(init)\n-        } else {\n-            self.iter.try_rfold(init, check(n, fold)).into_try()\n-        }\n+        if n == 0 { try { init } } else { self.iter.try_rfold(init, check(n, fold)).into_try() }\n     }\n \n     fn rfold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n@@ -2509,7 +2505,7 @@ where\n         }\n \n         if self.n == 0 {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let n = &mut self.n;\n             self.iter.try_fold(init, check(n, fold)).into_try()\n@@ -2587,11 +2583,11 @@ where\n         R: Try<Ok = Acc>,\n     {\n         if self.n == 0 {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let len = self.iter.len();\n             if len > self.n && self.iter.nth_back(len - self.n - 1).is_none() {\n-                Try::from_ok(init)\n+                try { init }\n             } else {\n                 self.iter.try_rfold(init, fold)\n             }\n@@ -2687,7 +2683,7 @@ where\n             mut fold: impl FnMut(Acc, B) -> R + 'a,\n         ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n             move |acc, x| match f(state, x) {\n-                None => ControlFlow::Break(Try::from_ok(acc)),\n+                None => ControlFlow::Break(try { acc }),\n                 Some(x) => ControlFlow::from_try(fold(acc, x)),\n             }\n         }\n@@ -2951,7 +2947,7 @@ where\n                 Ok(x) => ControlFlow::from_try(f(acc, x)),\n                 Err(e) => {\n                     *error = Err(e);\n-                    ControlFlow::Break(Try::from_ok(acc))\n+                    ControlFlow::Break(try { acc })\n                 }\n             })\n             .into_try()"}, {"sha": "cd8ab11cb842641ede0ed39576e8328ad2ff0fa9", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -713,7 +713,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         R: Try<Ok = B>,\n     {\n         if self.is_empty() {\n-            return Try::from_ok(init);\n+            return try { init };\n         }\n \n         let mut accum = init;\n@@ -731,7 +731,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     #[inline]\n@@ -818,7 +818,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         R: Try<Ok = B>,\n     {\n         if self.is_empty() {\n-            return Try::from_ok(init);\n+            return try { init };\n         }\n \n         let mut accum = init;\n@@ -836,7 +836,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     #[inline]"}, {"sha": "87fe3c210402e5f68e89c1430422cb2792c30959", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -224,7 +224,7 @@ pub trait DoubleEndedIterator: Iterator {\n         while let Some(x) = self.next_back() {\n             accum = f(accum, x)?;\n         }\n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     /// An iterator method that reduces the iterator's elements to a single,"}, {"sha": "18b4adc23e8ef280040ee26191e41d0499a57cb5", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -1887,7 +1887,7 @@ pub trait Iterator {\n         while let Some(x) = self.next() {\n             accum = f(accum, x)?;\n         }\n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     /// An iterator method that applies a fallible function to each item in the"}, {"sha": "af4b7199397b3977fb6fc7d97c4e642e6e8e6219", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -129,6 +129,7 @@\n #![feature(str_split_as_str)]\n #![feature(str_split_inclusive_as_str)]\n #![feature(transparent_unions)]\n+#![feature(try_blocks)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n #![cfg_attr(bootstrap, feature(untagged_unions))]"}, {"sha": "9eaa58dd438692e53eb23cfa8b5535008e1502c8", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6919ef889fe48daf796268b9619f64020ca4afa/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a6919ef889fe48daf796268b9619f64020ca4afa/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=a6919ef889fe48daf796268b9619f64020ca4afa", "patch": "@@ -20,7 +20,7 @@ cargo: beta\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2020-10-07\n+rustfmt: nightly-2020-10-12\n \n # When making a stable release the process currently looks like:\n #"}]}