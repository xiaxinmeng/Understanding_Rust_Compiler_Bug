{"sha": "7b073343db09aa51c6ff181aa721d4d022aa6d6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMDczMzQzZGIwOWFhNTFjNmZmMTgxYWE3MjFkNGQwMjJhYTZkNmY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-29T02:12:03Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T16:21:33Z"}, "message": "rustc_metadata: remove astencode tests.", "tree": {"sha": "4f152b05f94c6a7e65baf69a829c580bf7dc0623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f152b05f94c6a7e65baf69a829c580bf7dc0623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b073343db09aa51c6ff181aa721d4d022aa6d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b073343db09aa51c6ff181aa721d4d022aa6d6f", "html_url": "https://github.com/rust-lang/rust/commit/7b073343db09aa51c6ff181aa721d4d022aa6d6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b073343db09aa51c6ff181aa721d4d022aa6d6f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ace66b6a8833b709270584491a5ed8beb51bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ace66b6a8833b709270584491a5ed8beb51bea", "html_url": "https://github.com/rust-lang/rust/commit/78ace66b6a8833b709270584491a5ed8beb51bea"}], "stats": {"total": 199, "additions": 12, "deletions": 187}, "files": [{"sha": "f7c3eebdc298105573b3d7f564e843aa8b07a43d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7b073343db09aa51c6ff181aa721d4d022aa6d6f", "patch": "@@ -81,21 +81,7 @@ pub trait Resolver {\n \n     // We must keep the set of definitions up to date as we add nodes that weren't in the AST.\n     // This should only return `None` during testing.\n-    fn definitions(&mut self) -> Option<&mut Definitions>;\n-}\n-\n-pub struct DummyResolver;\n-impl Resolver for DummyResolver {\n-    fn resolve_generated_global_path(&mut self, _path: &hir::Path, _is_value: bool) -> Def {\n-        Def::Err\n-    }\n-    fn get_resolution(&mut self, _id: NodeId) -> Option<PathResolution> {\n-        None\n-    }\n-    fn record_resolution(&mut self, _id: NodeId, _def: Def) {}\n-    fn definitions(&mut self) -> Option<&mut Definitions> {\n-        None\n-    }\n+    fn definitions(&mut self) -> &mut Definitions;\n }\n \n pub fn lower_crate(sess: &Session,\n@@ -177,9 +163,9 @@ impl<'a> LoweringContext<'a> {\n         where F: FnOnce(&mut LoweringContext) -> T\n     {\n         let old_def = self.parent_def;\n-        self.parent_def = match self.resolver.definitions() {\n-            Some(defs) => Some(defs.opt_def_index(parent_id).unwrap()),\n-            None => old_def,\n+        self.parent_def = {\n+            let defs = self.resolver.definitions();\n+            Some(defs.opt_def_index(parent_id).unwrap())\n         };\n \n         let result = f(self);\n@@ -1719,9 +1705,10 @@ impl<'a> LoweringContext<'a> {\n         let expr_path = hir::ExprPath(None, self.path_ident(span, id));\n         let expr = self.expr(span, expr_path, ThinVec::new());\n \n-        let def = self.resolver.definitions().map(|defs| {\n+        let def = {\n+            let defs = self.resolver.definitions();\n             Def::Local(defs.local_def_id(binding), binding)\n-        }).unwrap_or(Def::Err);\n+        };\n         self.resolver.record_resolution(expr.id, def);\n \n         expr\n@@ -1869,11 +1856,12 @@ impl<'a> LoweringContext<'a> {\n         let pat = self.pat(span, pat_ident);\n \n         let parent_def = self.parent_def;\n-        let def = self.resolver.definitions().map(|defs| {\n+        let def = {\n+            let defs = self.resolver.definitions();\n             let def_path_data = DefPathData::Binding(name.as_str());\n             let def_index = defs.create_def_with_parent(parent_def, pat.id, def_path_data);\n             Def::Local(DefId::local(def_index), pat.id)\n-        }).unwrap_or(Def::Err);\n+        };\n         self.resolver.record_resolution(pat.id, def);\n \n         pat"}, {"sha": "b7781ef620fa5af655f941474b69d9cbee0358d6", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=7b073343db09aa51c6ff181aa721d4d022aa6d6f", "patch": "@@ -51,11 +51,6 @@ use rbml;\n use rustc_serialize::{Decodable, Decoder, DecoderHelpers};\n use rustc_serialize::{Encodable, EncoderHelpers};\n \n-#[cfg(test)] use std::io::Cursor;\n-#[cfg(test)] use syntax::parse;\n-#[cfg(test)] use rustc::hir::print as pprust;\n-#[cfg(test)] use rustc::hir::lowering::{LoweringContext, DummyResolver};\n-\n struct DecodeContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     cdata: &'a cstore::CrateMetadata,\n@@ -1068,136 +1063,3 @@ fn inlined_item_id_range(ii: &InlinedItem) -> IdRange {\n     ii.visit(&mut visitor);\n     visitor.result()\n }\n-\n-// ______________________________________________________________________\n-// Testing of astencode_gen\n-\n-#[cfg(test)]\n-fn encode_item_ast(rbml_w: &mut Encoder, item: &hir::Item) {\n-    rbml_w.start_tag(c::tag_tree as usize);\n-    (*item).encode(rbml_w);\n-    rbml_w.end_tag();\n-}\n-\n-#[cfg(test)]\n-fn decode_item_ast(item_doc: rbml::Doc) -> hir::Item {\n-    let chi_doc = item_doc.get(c::tag_tree as usize);\n-    let mut d = reader::Decoder::new(chi_doc);\n-    Decodable::decode(&mut d).unwrap()\n-}\n-\n-#[cfg(test)]\n-trait FakeExtCtxt {\n-    fn call_site(&self) -> syntax_pos::Span;\n-    fn cfg(&self) -> ast::CrateConfig;\n-    fn ident_of(&self, st: &str) -> ast::Ident;\n-    fn name_of(&self, st: &str) -> ast::Name;\n-    fn parse_sess(&self) -> &parse::ParseSess;\n-}\n-\n-#[cfg(test)]\n-impl FakeExtCtxt for parse::ParseSess {\n-    fn call_site(&self) -> syntax_pos::Span {\n-        syntax_pos::Span {\n-            lo: syntax_pos::BytePos(0),\n-            hi: syntax_pos::BytePos(0),\n-            expn_id: syntax_pos::NO_EXPANSION,\n-        }\n-    }\n-    fn cfg(&self) -> ast::CrateConfig { Vec::new() }\n-    fn ident_of(&self, st: &str) -> ast::Ident {\n-        parse::token::str_to_ident(st)\n-    }\n-    fn name_of(&self, st: &str) -> ast::Name {\n-        parse::token::intern(st)\n-    }\n-    fn parse_sess(&self) -> &parse::ParseSess { self }\n-}\n-\n-#[cfg(test)]\n-fn mk_ctxt() -> parse::ParseSess {\n-    parse::ParseSess::new()\n-}\n-\n-#[cfg(test)]\n-fn with_testing_context<T, F: FnOnce(&mut LoweringContext) -> T>(f: F) -> T {\n-    let mut resolver = DummyResolver;\n-    let mut lcx = LoweringContext::testing_context(&mut resolver);\n-    f(&mut lcx)\n-}\n-\n-#[cfg(test)]\n-fn roundtrip(in_item: hir::Item) {\n-    let mut wr = Cursor::new(Vec::new());\n-    encode_item_ast(&mut Encoder::new(&mut wr), &in_item);\n-    let rbml_doc = rbml::Doc::new(wr.get_ref());\n-    let out_item = decode_item_ast(rbml_doc);\n-\n-    assert!(in_item == out_item);\n-}\n-\n-#[test]\n-fn test_basic() {\n-    let cx = mk_ctxt();\n-    with_testing_context(|lcx| {\n-        roundtrip(lcx.lower_item(&quote_item!(&cx,\n-            fn foo() {}\n-        ).unwrap()));\n-    });\n-}\n-\n-#[test]\n-fn test_smalltalk() {\n-    let cx = mk_ctxt();\n-    with_testing_context(|lcx| {\n-        roundtrip(lcx.lower_item(&quote_item!(&cx,\n-            fn foo() -> isize { 3 + 4 } // first smalltalk program ever executed.\n-        ).unwrap()));\n-    });\n-}\n-\n-#[test]\n-fn test_more() {\n-    let cx = mk_ctxt();\n-    with_testing_context(|lcx| {\n-        roundtrip(lcx.lower_item(&quote_item!(&cx,\n-            fn foo(x: usize, y: usize) -> usize {\n-                let z = x + y;\n-                return z;\n-            }\n-        ).unwrap()));\n-    });\n-}\n-\n-#[test]\n-fn test_simplification() {\n-    use middle::cstore::LOCAL_CRATE;\n-    use rustc::hir::def_id::CRATE_DEF_INDEX;\n-\n-    let cx = mk_ctxt();\n-    let item = quote_item!(&cx,\n-        fn new_int_alist<B>() -> alist<isize, B> {\n-            fn eq_int(a: isize, b: isize) -> bool { a == b }\n-            return alist {eq_fn: eq_int, data: Vec::new()};\n-        }\n-    ).unwrap();\n-    let cx = mk_ctxt();\n-    with_testing_context(|lcx| {\n-        let hir_item = lcx.lower_item(&item);\n-        let def_id = DefId { krate: LOCAL_CRATE, index: CRATE_DEF_INDEX }; // dummy\n-        let item_in = InlinedItemRef::Item(def_id, &hir_item);\n-        let (item_out, _) = simplify_ast(item_in);\n-        let item_exp = InlinedItem::Item(def_id, P(lcx.lower_item(&quote_item!(&cx,\n-            fn new_int_alist<B>() -> alist<isize, B> {\n-                return alist {eq_fn: eq_int, data: Vec::new()};\n-            }\n-        ).unwrap())));\n-        match (item_out, item_exp) {\n-            (InlinedItem::Item(_, item_out), InlinedItem::Item(_, item_exp)) => {\n-                 assert!(pprust::item_to_string(&item_out) ==\n-                         pprust::item_to_string(&item_exp));\n-            }\n-            _ => bug!()\n-        }\n-    });\n-}"}, {"sha": "17b3c392edb368d25897a855e703e5d38baf9604", "filename": "src/librustc_metadata/rbml/writer.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc_metadata%2Frbml%2Fwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc_metadata%2Frbml%2Fwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frbml%2Fwriter.rs?ref=7b073343db09aa51c6ff181aa721d4d022aa6d6f", "patch": "@@ -495,28 +495,3 @@ impl<'a> serialize::Encoder for Encoder<'a> {\n         self.end_tag()\n     }\n }\n-\n-#[test]\n-fn test_option_int() {\n-    use rbml::reader;\n-    use serialize::{Encodable, Decodable};\n-    use std::io::Cursor;\n-\n-    fn test_v(v: Option<isize>) {\n-        debug!(\"v == {:?}\", v);\n-        let mut wr = Cursor::new(Vec::new());\n-        {\n-            let mut rbml_w = Encoder::new(&mut wr);\n-            let _ = v.encode(&mut rbml_w);\n-        }\n-        let rbml_doc = reader::Doc::new(wr.get_ref());\n-        let mut deser = reader::Decoder::new(rbml_doc);\n-        let v1 = Decodable::decode(&mut deser).unwrap();\n-        debug!(\"v1 == {:?}\", v1);\n-        assert_eq!(v, v1);\n-    }\n-\n-    test_v(Some(22));\n-    test_v(None);\n-    test_v(Some(3));\n-}"}, {"sha": "31893b0873c72afec33156f04ee6a55fa318a158", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b073343db09aa51c6ff181aa721d4d022aa6d6f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7b073343db09aa51c6ff181aa721d4d022aa6d6f", "patch": "@@ -1151,8 +1151,8 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         self.def_map.insert(id, PathResolution::new(def));\n     }\n \n-    fn definitions(&mut self) -> Option<&mut Definitions> {\n-        Some(&mut self.definitions)\n+    fn definitions(&mut self) -> &mut Definitions {\n+        &mut self.definitions\n     }\n }\n "}]}