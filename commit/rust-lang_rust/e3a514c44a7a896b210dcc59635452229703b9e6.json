{"sha": "e3a514c44a7a896b210dcc59635452229703b9e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYTUxNGM0NGE3YTg5NmIyMTBkY2M1OTYzNTQ1MjIyOTcwM2I5ZTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-20T22:30:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-20T22:30:55Z"}, "message": "Rollup merge of #71174 - Nokel81:fix-async-main-error, r=petrochenkov\n\nCheck that main/start is not async\n\n* Add new error code E0752\n* Add span to hir::IsAsync::Yes\n* Emit an error if main or the start function is marked as async\n* Add two regression tests\n\nThis PR fixes #68523.", "tree": {"sha": "f3591bdc3bc72a2b0c02702bafa82b31f402ca23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3591bdc3bc72a2b0c02702bafa82b31f402ca23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a514c44a7a896b210dcc59635452229703b9e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeniKfCRBK7hj4Ov3rIwAAdHIIAHedS3Svpsiv+kKs4iyglLQx\nXxP5Z1/9RyUo+433kCwus4MAv1kUzwH4CxCCcfM+6BtBXwTA8gLlupt4bUksItS0\nNIOPwG1azeexdT8jLXaxXWypisr/IAGKhQ2IRCJStgzM6KlkjYeB0LMNtjaUPFbG\nxwRg+URim9JOsy1gX+uR1CwU/ncr7UvLWsEx2gvrPwibxvU89uXrT6BrC6bC7jVb\nBdSjBIvnBfnbwK6CqEy6emCcKRFckpJGZ0g+TPhyWA7qMUxlJzTzIyPddKMzM6e6\ne4f1whDout2XJOf8OsShAKFL3pVYhNOvAYIbAfvwOz+uURIoRsxzvfl/nqolZm0=\n=1zVL\n-----END PGP SIGNATURE-----\n", "payload": "tree f3591bdc3bc72a2b0c02702bafa82b31f402ca23\nparent 69a528eda688b3191127865f889fef65d979bb9c\nparent 6120acec8799616dbd7e646c1d7957eab894202b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587421855 +0200\ncommitter GitHub <noreply@github.com> 1587421855 +0200\n\nRollup merge of #71174 - Nokel81:fix-async-main-error, r=petrochenkov\n\nCheck that main/start is not async\n\n* Add new error code E0752\n* Add span to hir::IsAsync::Yes\n* Emit an error if main or the start function is marked as async\n* Add two regression tests\n\nThis PR fixes #68523.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a514c44a7a896b210dcc59635452229703b9e6", "html_url": "https://github.com/rust-lang/rust/commit/e3a514c44a7a896b210dcc59635452229703b9e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a514c44a7a896b210dcc59635452229703b9e6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a528eda688b3191127865f889fef65d979bb9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a528eda688b3191127865f889fef65d979bb9c", "html_url": "https://github.com/rust-lang/rust/commit/69a528eda688b3191127865f889fef65d979bb9c"}, {"sha": "6120acec8799616dbd7e646c1d7957eab894202b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6120acec8799616dbd7e646c1d7957eab894202b", "html_url": "https://github.com/rust-lang/rust/commit/6120acec8799616dbd7e646c1d7957eab894202b"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "bc04809eaa1dfd59e97927d5a90eedf1224dda9b", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -431,6 +431,7 @@ E0748: include_str!(\"./error_codes/E0748.md\"),\n E0749: include_str!(\"./error_codes/E0749.md\"),\n E0750: include_str!(\"./error_codes/E0750.md\"),\n E0751: include_str!(\"./error_codes/E0751.md\"),\n+E0752: include_str!(\"./error_codes/E0752.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "86945f83b55240a30af21ecd8c5460a666dbbb80", "filename": "src/librustc_error_codes/error_codes/E0752.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0752.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0752.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0752.md?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -0,0 +1,11 @@\n+`fn main()` or the specified start function is not allowed to be\n+async. You might be seeing this error because your async runtime\n+library is not set up correctly.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0752\n+async fn main() -> Result<i32, ()> {\n+    Ok(1)\n+}\n+```"}, {"sha": "fd87759a7621f1bed44e2a2af3d1983f0f3643d3", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -82,10 +82,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         match &node {\n             hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) => {\n                 self.describe_generator(*body_id).or_else(|| {\n-                    Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n-                        \"an async function\"\n-                    } else {\n-                        \"a function\"\n+                    Some(match sig.header {\n+                        hir::FnHeader { asyncness: hir::IsAsync::Async, .. } => \"an async function\",\n+                        _ => \"a function\",\n                     })\n                 })\n             }\n@@ -97,10 +96,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 kind: hir::ImplItemKind::Fn(sig, body_id),\n                 ..\n             }) => self.describe_generator(*body_id).or_else(|| {\n-                Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n-                    \"an async method\"\n-                } else {\n-                    \"a method\"\n+                Some(match sig.header {\n+                    hir::FnHeader { asyncness: hir::IsAsync::Async, .. } => \"an async method\",\n+                    _ => \"a method\",\n                 })\n             }),\n             hir::Node::Expr(hir::Expr {"}, {"sha": "331c8f3be841a2a5952b5399b42be1201620bacd", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -1318,10 +1318,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let is_async = inner_generator_body\n             .and_then(|body| body.generator_kind())\n-            .map(|generator_kind| match generator_kind {\n-                hir::GeneratorKind::Async(..) => true,\n-                _ => false,\n-            })\n+            .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n             .unwrap_or(false);\n         let (await_or_yield, an_await_or_yield) =\n             if is_async { (\"await\", \"an await\") } else { (\"yield\", \"a yield\") };"}, {"sha": "cd76184c9bf2d30ae55946ff253fc440ac80025a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -159,7 +159,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     match main_t.kind {\n         ty::FnDef(..) => {\n             if let Some(Node::Item(it)) = tcx.hir().find(main_id) {\n-                if let hir::ItemKind::Fn(.., ref generics, _) = it.kind {\n+                if let hir::ItemKind::Fn(ref sig, ref generics, _) = it.kind {\n                     let mut error = false;\n                     if !generics.params.is_empty() {\n                         let msg = \"`main` function is not allowed to have generic \\\n@@ -182,6 +182,18 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n                         .emit();\n                         error = true;\n                     }\n+                    if let hir::IsAsync::Async = sig.header.asyncness {\n+                        let span = tcx.sess.source_map().guess_head_span(it.span);\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            span,\n+                            E0752,\n+                            \"`main` function is not allowed to be `async`\"\n+                        )\n+                        .span_label(span, \"`main` function is not allowed to be `async`\")\n+                        .emit();\n+                        error = true;\n+                    }\n                     if error {\n                         return;\n                     }\n@@ -226,7 +238,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n     match start_t.kind {\n         ty::FnDef(..) => {\n             if let Some(Node::Item(it)) = tcx.hir().find(start_id) {\n-                if let hir::ItemKind::Fn(.., ref generics, _) = it.kind {\n+                if let hir::ItemKind::Fn(ref sig, ref generics, _) = it.kind {\n                     let mut error = false;\n                     if !generics.params.is_empty() {\n                         struct_span_err!(\n@@ -250,6 +262,18 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n                         .emit();\n                         error = true;\n                     }\n+                    if let hir::IsAsync::Async = sig.header.asyncness {\n+                        let span = tcx.sess.source_map().guess_head_span(it.span);\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            span,\n+                            E0752,\n+                            \"start is not allowed to be `async`\"\n+                        )\n+                        .span_label(span, \"start is not allowed to be `async`\")\n+                        .emit();\n+                        error = true;\n+                    }\n                     if error {\n                         return;\n                     }"}, {"sha": "5988dffd68fa799a5e94421587235c82c48b26fa", "filename": "src/test/ui/async-await/issue-68523-start.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523-start.rs?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+#![feature(start)]\n+\n+#[start]\n+pub async fn start(_: isize, _: *const *const u8) -> isize {\n+//~^ ERROR start is not allowed to be `async`\n+    0\n+}"}, {"sha": "e471945900e7d462e06a627ce85042da162b012b", "filename": "src/test/ui/async-await/issue-68523-start.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523-start.stderr?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -0,0 +1,9 @@\n+error[E0752]: start is not allowed to be `async`\n+  --> $DIR/issue-68523-start.rs:6:1\n+   |\n+LL | pub async fn start(_: isize, _: *const *const u8) -> isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ start is not allowed to be `async`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0752`."}, {"sha": "e6250c40c714c3f2147fe02a0d5baf644b3e8479", "filename": "src/test/ui/async-await/issue-68523.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+async fn main() -> Result<i32, ()> {\n+//~^ ERROR `main` function is not allowed to be `async`\n+//~^^ ERROR `main` has invalid return type `impl std::future::Future`\n+    Ok(1)\n+}"}, {"sha": "62e37cf2629d73de3e9f4b30ca1c3ce04909b17f", "filename": "src/test/ui/async-await/issue-68523.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3a514c44a7a896b210dcc59635452229703b9e6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr?ref=e3a514c44a7a896b210dcc59635452229703b9e6", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: `main` has invalid return type `impl std::future::Future`\n+  --> $DIR/issue-68523.rs:3:20\n+   |\n+LL | async fn main() -> Result<i32, ()> {\n+   |                    ^^^^^^^^^^^^^^^ `main` can only return types that implement `std::process::Termination`\n+   |\n+   = help: consider using `()`, or a `Result`\n+\n+error[E0752]: `main` function is not allowed to be `async`\n+  --> $DIR/issue-68523.rs:3:1\n+   |\n+LL | async fn main() -> Result<i32, ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `main` function is not allowed to be `async`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0752.\n+For more information about an error, try `rustc --explain E0277`."}]}