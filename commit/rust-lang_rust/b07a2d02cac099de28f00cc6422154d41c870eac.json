{"sha": "b07a2d02cac099de28f00cc6422154d41c870eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwN2EyZDAyY2FjMDk5ZGUyOGYwMGNjNjQyMjE1NGQ0MWM4NzBlYWM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-09T13:15:41Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-09T13:15:41Z"}, "message": "codegen_llvm/misc: improve common patterns", "tree": {"sha": "af8639ad6f2bdb73bc804c1d31b37d4487ba3ce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af8639ad6f2bdb73bc804c1d31b37d4487ba3ce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07a2d02cac099de28f00cc6422154d41c870eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07a2d02cac099de28f00cc6422154d41c870eac", "html_url": "https://github.com/rust-lang/rust/commit/b07a2d02cac099de28f00cc6422154d41c870eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07a2d02cac099de28f00cc6422154d41c870eac/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e90e8aaeba102760b9a8b4237b37085f50b6f573", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90e8aaeba102760b9a8b4237b37085f50b6f573", "html_url": "https://github.com/rust-lang/rust/commit/e90e8aaeba102760b9a8b4237b37085f50b6f573"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "56352ae963f20ab4d1febe92224d51cf80767c5e", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=b07a2d02cac099de28f00cc6422154d41c870eac", "patch": "@@ -37,7 +37,7 @@ pub struct MirDebugScope<'ll> {\n \n impl MirDebugScope<'ll> {\n     pub fn is_valid(&self) -> bool {\n-        !self.scope_metadata.is_none()\n+        self.scope_metadata.is_some()\n     }\n }\n "}, {"sha": "5383d5fbebe891ef8e4588d77c1de486f4df94a2", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=b07a2d02cac099de28f00cc6422154d41c870eac", "patch": "@@ -163,10 +163,10 @@ impl TypeMap<'ll, 'tcx> {\n     fn get_unique_type_id_of_type<'a>(&mut self, cx: &CodegenCx<'a, 'tcx>,\n                                       type_: Ty<'tcx>) -> UniqueTypeId {\n         // Let's see if we already have something in the cache\n-        match self.type_to_unique_id.get(&type_).cloned() {\n-            Some(unique_type_id) => return unique_type_id,\n-            None => { /* generate one */}\n-        };\n+        if let Some(unique_type_id) = self.type_to_unique_id.get(&type_).cloned() {\n+            return unique_type_id\n+        }\n+        // if not, generate one\n \n         // The hasher we are using to generate the UniqueTypeId. We want\n         // something that provides more than the 64 bits of the DefaultHasher.\n@@ -286,11 +286,11 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n // unique id can be found in the type map\n macro_rules! return_if_metadata_created_in_meantime {\n     ($cx: expr, $unique_type_id: expr) => (\n-        match debug_context($cx).type_map\n-                                .borrow()\n-                                .find_metadata_for_unique_id($unique_type_id) {\n-            Some(metadata) => return MetadataCreationResult::new(metadata, true),\n-            None => { /* proceed normally */ }\n+        if let Some(metadata) = debug_context($cx).type_map\n+            .borrow()\n+            .find_metadata_for_unique_id($unique_type_id)\n+        {\n+            return MetadataCreationResult::new(metadata, true)\n         }\n     )\n }\n@@ -548,12 +548,12 @@ pub fn type_metadata(\n             _ => {\n                 let pointee_metadata = type_metadata(cx, ty, usage_site_span);\n \n-                match debug_context(cx).type_map\n-                                        .borrow()\n-                                        .find_metadata_for_unique_id(unique_type_id) {\n-                    Some(metadata) => return Err(metadata),\n-                    None => { /* proceed normally */ }\n-                };\n+                if let Some(metadata) = debug_context(cx).type_map\n+                    .borrow()\n+                    .find_metadata_for_unique_id(unique_type_id)\n+                {\n+                    return Err(metadata)\n+                }\n \n                 Ok(MetadataCreationResult::new(pointer_type_metadata(cx, t, pointee_metadata),\n                    false))\n@@ -608,12 +608,12 @@ pub fn type_metadata(\n                                                        unique_type_id,\n                                                        t.fn_sig(cx.tcx),\n                                                        usage_site_span).metadata;\n-            match debug_context(cx).type_map\n-                                   .borrow()\n-                                   .find_metadata_for_unique_id(unique_type_id) {\n-                Some(metadata) => return metadata,\n-                None => { /* proceed normally */ }\n-            };\n+            if let Some(metadata) = debug_context(cx).type_map\n+               .borrow()\n+               .find_metadata_for_unique_id(unique_type_id)\n+            {\n+                return metadata\n+            }\n \n             // This is actually a function pointer, so wrap it in pointer DI\n             MetadataCreationResult::new(pointer_type_metadata(cx, t, fn_metadata), false)\n@@ -1476,9 +1476,8 @@ fn prepare_enum_metadata(\n         }\n     };\n \n-    match (&layout.abi, discriminant_type_metadata) {\n-        (&layout::Abi::Scalar(_), Some(discr)) => return FinalMetadata(discr),\n-        _ => {}\n+    if let (&layout::Abi::Scalar(_), Some(discr)) = (&layout.abi, discriminant_type_metadata) {\n+        return FinalMetadata(discr)\n     }\n \n     let (enum_type_size, enum_type_align) = layout.size_and_align();"}, {"sha": "acb79d6f568cc5cb6fa1a9abc394547ddf3e6367", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=b07a2d02cac099de28f00cc6422154d41c870eac", "patch": "@@ -271,16 +271,14 @@ pub fn create_function_debug_context(\n     let mut flags = DIFlags::FlagPrototyped;\n \n     let local_id = cx.tcx.hir.as_local_node_id(def_id);\n-    match *cx.sess().entry_fn.borrow() {\n-        Some((id, _, _)) => {\n-            if local_id == Some(id) {\n-                flags = flags | DIFlags::FlagMainSubprogram;\n-            }\n+    if let Some((id, _, _)) = *cx.sess().entry_fn.borrow() {\n+        if local_id == Some(id) {\n+            flags |= DIFlags::FlagMainSubprogram;\n         }\n-        None => {}\n-    };\n+    }\n+\n     if cx.layout_of(sig.output()).abi.is_uninhabited() {\n-        flags = flags | DIFlags::FlagNoReturn;\n+        flags |= DIFlags::FlagNoReturn;\n     }\n \n     let fn_metadata = unsafe {"}, {"sha": "405cffdefa285b865ef4cd86d6930e6e26b5133e", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07a2d02cac099de28f00cc6422154d41c870eac/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=b07a2d02cac099de28f00cc6422154d41c870eac", "patch": "@@ -56,11 +56,8 @@ pub fn set_source_location(\n /// switches source location emitting on and must therefore be called before the\n /// first real statement/expression of the function is codegened.\n pub fn start_emitting_source_locations(dbg_context: &FunctionDebugContext<'ll>) {\n-    match *dbg_context {\n-        FunctionDebugContext::RegularContext(ref data) => {\n-            data.source_locations_enabled.set(true)\n-        },\n-        _ => { /* safe to ignore */ }\n+    if let FunctionDebugContext::RegularContext(ref data) = *dbg_context {\n+        data.source_locations_enabled.set(true)\n     }\n }\n "}]}