{"sha": "344cbac150d08d0931d03ab0651becc977baa64b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NGNiYWMxNTBkMDhkMDkzMWQwM2FiMDY1MWJlY2M5NzdiYWE2NGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-24T13:24:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-24T13:24:06Z"}, "message": "Fix simd_reduce_* intrinsics", "tree": {"sha": "d05357702d646e37575cef02e943b2829efb0b56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05357702d646e37575cef02e943b2829efb0b56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/344cbac150d08d0931d03ab0651becc977baa64b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/344cbac150d08d0931d03ab0651becc977baa64b", "html_url": "https://github.com/rust-lang/rust/commit/344cbac150d08d0931d03ab0651becc977baa64b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/344cbac150d08d0931d03ab0651becc977baa64b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b06e81fc008750de32b9a57e292bb341d0b842", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b06e81fc008750de32b9a57e292bb341d0b842", "html_url": "https://github.com/rust-lang/rust/commit/a7b06e81fc008750de32b9a57e292bb341d0b842"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "6a818e2df1e83ee6db6f7fd9fd7c7ca962fca078", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/344cbac150d08d0931d03ab0651becc977baa64b/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344cbac150d08d0931d03ab0651becc977baa64b/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=344cbac150d08d0931d03ab0651becc977baa64b", "patch": "@@ -218,15 +218,17 @@ fn simd_pair_for_each_lane<'tcx>(\n fn simd_reduce<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     val: CValue<'tcx>,\n+    acc: Option<Value>,\n     ret: CPlace<'tcx>,\n     f: impl Fn(&mut FunctionCx<'_, '_, 'tcx>, TyAndLayout<'tcx>, Value, Value) -> Value,\n ) {\n     let (lane_count, lane_ty) = val.layout().ty.simd_size_and_type(fx.tcx);\n     let lane_layout = fx.layout_of(lane_ty);\n     assert_eq!(lane_layout, ret.layout());\n \n-    let mut res_val = val.value_lane(fx, 0).load_scalar(fx);\n-    for lane_idx in 1..lane_count {\n+    let (mut res_val, start_lane) =\n+        if let Some(acc) = acc { (acc, 0) } else { (val.value_lane(fx, 0).load_scalar(fx), 1) };\n+    for lane_idx in start_lane..lane_count {\n         let lane = val.value_lane(fx, lane_idx).load_scalar(fx);\n         res_val = f(fx, lane_layout, res_val, lane);\n     }"}, {"sha": "db36437ab417a9819722587aa7e219a364863b92", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/344cbac150d08d0931d03ab0651becc977baa64b/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344cbac150d08d0931d03ab0651becc977baa64b/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=344cbac150d08d0931d03ab0651becc977baa64b", "patch": "@@ -236,9 +236,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_flt_binop!(fx, fmax(x, y) -> ret);\n         };\n \n-        simd_reduce_add_ordered | simd_reduce_add_unordered, (c v) {\n+        simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n             validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, ret, |fx, lane_layout, a, b| {\n+            simd_reduce(fx, v, Some(acc), ret, |fx, lane_layout, a, b| {\n                 if lane_layout.ty.is_floating_point() {\n                     fx.bcx.ins().fadd(a, b)\n                 } else {\n@@ -247,9 +247,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n \n-        simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v) {\n+        simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n             validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, ret, |fx, lane_layout, a, b| {\n+            simd_reduce(fx, v, Some(acc), ret, |fx, lane_layout, a, b| {\n                 if lane_layout.ty.is_floating_point() {\n                     fx.bcx.ins().fmul(a, b)\n                 } else {"}]}