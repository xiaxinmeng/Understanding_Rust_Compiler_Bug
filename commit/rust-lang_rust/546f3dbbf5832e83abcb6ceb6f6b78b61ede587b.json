{"sha": "546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NmYzZGJiZjU4MzJlODNhYmNiNmNlYjZmNmI3OGI2MWVkZTU4N2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-25T00:29:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-25T00:29:32Z"}, "message": "Build the export_map2 from visibility markers, unless #[legacy_exports];", "tree": {"sha": "7265f9a88b9cf88ae7c4a8e91404a6d77f7d9f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7265f9a88b9cf88ae7c4a8e91404a6d77f7d9f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "html_url": "https://github.com/rust-lang/rust/commit/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "html_url": "https://github.com/rust-lang/rust/commit/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5"}], "stats": {"total": 109, "additions": 98, "deletions": 11}, "files": [{"sha": "f7c389e67ff8e93f898e6c247b015c7e46a55940", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 60, "deletions": 11, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2868,6 +2868,64 @@ impl Resolver {\n \n     fn record_exports_for_module(module_: @Module) {\n         let mut exports2 = ~[];\n+\n+        if module_.legacy_exports {\n+            self.add_exports_for_legacy_module(&mut exports2, module_);\n+        } else {\n+            self.add_exports_for_module(&mut exports2, module_);\n+        }\n+        match copy module_.def_id {\n+            Some(def_id) => {\n+                self.export_map2.insert(def_id.node, move exports2);\n+                debug!(\"(computing exports) writing exports for %d (some)\",\n+                       def_id.node);\n+            }\n+            None => {}\n+        }\n+    }\n+\n+\n+    fn add_exports_of_namebindings(exports2: &mut ~[Export2],\n+                                   atom: Atom,\n+                                   namebindings: @NameBindings,\n+                                   reexport: bool) {\n+        for [ModuleNS, TypeNS, ValueNS].each |ns| {\n+            match namebindings.def_for_namespace(*ns) {\n+                Some(d) if d.privacy == Public => {\n+                    vec::push(*exports2,  Export2 {\n+                        reexport: reexport,\n+                        name: self.session.str_of(atom),\n+                        def_id: def_id_of_def(d.def)\n+                    });\n+                }\n+                _ => ()\n+            }\n+        }\n+    }\n+\n+    fn add_exports_for_module(exports2: &mut ~[Export2], module_: @Module) {\n+\n+        for module_.children.each_ref |atom, namebindings| {\n+            self.add_exports_of_namebindings(exports2, *atom,\n+                                             *namebindings, false)\n+        }\n+\n+        for module_.import_resolutions.each_ref |atom, importresolution| {\n+            for [ModuleNS, TypeNS, ValueNS].each |ns| {\n+                match importresolution.target_for_namespace(*ns) {\n+                    Some(target) => {\n+                        self.add_exports_of_namebindings(exports2, *atom,\n+                                                         target.bindings,\n+                                                         true)\n+                    }\n+                    _ => ()\n+                }\n+            }\n+        }\n+    }\n+\n+    fn add_exports_for_legacy_module(exports2: &mut ~[Export2],\n+                                     module_: @Module) {\n         for module_.exported_names.each |name, _exp_node_id| {\n             for self.namespaces.each |namespace| {\n                 match self.resolve_definition_of_name_in_module(module_,\n@@ -2882,7 +2940,7 @@ impl Resolver {\n                                 for %?\",\n                                self.session.str_of(name),\n                                module_.def_id);\n-                        vec::push(exports2, Export2 {\n+                        vec::push(*exports2, Export2 {\n                             reexport: false,\n                             name: self.session.str_of(name),\n                             def_id: def_id_of_def(target_def)\n@@ -2893,7 +2951,7 @@ impl Resolver {\n                                 %?\",\n                                self.session.str_of(name),\n                                module_.def_id);\n-                        vec::push(exports2, Export2 {\n+                        vec::push(*exports2, Export2 {\n                             reexport: true,\n                             name: self.session.str_of(name),\n                             def_id: def_id_of_def(target_def)\n@@ -2902,15 +2960,6 @@ impl Resolver {\n                 }\n             }\n         }\n-\n-        match copy module_.def_id {\n-            Some(def_id) => {\n-                self.export_map2.insert(def_id.node, move exports2);\n-                debug!(\"(computing exports) writing exports for %d (some)\",\n-                       def_id.node);\n-            }\n-            None => {}\n-        }\n     }\n \n     // AST resolution"}, {"sha": "29113d906fb29aef12042f2c65f2fb2df6eb6d11", "filename": "src/test/auxiliary/cci_borrow_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_borrow_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_borrow_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_borrow_lib.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n fn foo(x: &uint) -> uint {\n     *x\n }"}, {"sha": "2d7404aa1d2c8abb8a798c22a8b2e12fc90e5f5c", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_exports];\n+\n export foo;\n \n use comm::*;"}, {"sha": "1cde1a049fe63eff90b7fd9d45b20ecc5d49ff51", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_exports];\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     #[legacy_exports];"}, {"sha": "9471bf7be72fd5cbef466d4f45992b9aebb7fc43", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,5 +1,6 @@\n #[link(name=\"cci_iter_lib\", vers=\"0.0\")];\n #[legacy_modes];\n+#[legacy_exports];\n \n #[inline]\n fn iter<T>(v: ~[T], f: fn(T)) {"}, {"sha": "4d3c68e91631129a64cae6a3e18c84b2719df2dd", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,4 +1,5 @@\n #[legacy_modes];\n+#[legacy_exports];\n \n use dvec::DVec;\n "}, {"sha": "f6dcf93d604e73f84e4e298c52b238f1c152232e", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,4 +1,5 @@\n #[link(name=\"cci_no_inline_lib\", vers=\"0.0\")];\n+#[legacy_exports];\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n fn iter(v: ~[uint], f: fn(uint)) {"}, {"sha": "7c1dce38630ff55f18b719e2ebf343f560a5af01", "filename": "src/test/auxiliary/crateresolve1-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 10 }"}, {"sha": "a4aee870bc0b1d969328d613018e53d56edded0c", "filename": "src/test/auxiliary/crateresolve1-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 20 }"}, {"sha": "b23ab1622020e4b8c29f6ef56b3db862126b85e1", "filename": "src/test/auxiliary/crateresolve1-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.3\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 30 }"}, {"sha": "3c1a5e5b4cdf3e119f97912df8b361d9f5d39c91", "filename": "src/test/auxiliary/crateresolve2-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 10 }"}, {"sha": "f81746d5c0cdf2aeb1be7841560cd983ef7fd771", "filename": "src/test/auxiliary/crateresolve2-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 20 }"}, {"sha": "eee52b73ecc97971b74cab823a35f6d817ac376c", "filename": "src/test/auxiliary/crateresolve2-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.3\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 30 }"}, {"sha": "41532a61652f814bb5be593580a0ac7e32404ea0", "filename": "src/test/auxiliary/crateresolve3-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 10 }"}, {"sha": "83621ce64eb3d1f4734649586e2cce3c410eeb54", "filename": "src/test/auxiliary/crateresolve3-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,5 +2,6 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn g() -> int { 20 }"}, {"sha": "31b314dfec252cb0e9d1d115f693b20132f7b70e", "filename": "src/test/auxiliary/crateresolve4a-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,4 +1,5 @@\n #[link(name = \"crateresolve4a\", vers = \"0.1\")];\n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 10 }"}, {"sha": "aa03575759596a0b4b9d07773e0e7b359520ea2f", "filename": "src/test/auxiliary/crateresolve4a-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,4 +1,5 @@\n #[link(name = \"crateresolve4a\", vers= \"0.2\")];\n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn g() -> int { 20 }"}, {"sha": "5f68504fa74351986e15800cbd9cd4e8cb13a68f", "filename": "src/test/auxiliary/crateresolve4b-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,6 +2,7 @@\n // aux-build:crateresolve4a-2.rs\n #[link(name = \"crateresolve4b\", vers = \"0.1\")];\n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n extern mod crateresolve4a(vers=\"0.2\");\n "}, {"sha": "91ce7fbc10bdd62b474e74a37a8c837842196266", "filename": "src/test/auxiliary/crateresolve4b-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,6 +2,7 @@\n // aux-build:crateresolve4a-2.rs\n #[link(name = \"crateresolve4b\", vers = \"0.2\")];\n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n extern mod crateresolve4a(vers=\"0.1\");\n "}, {"sha": "874b26176d7ffd1e94dbeb1a54ea492ff9da7496", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,6 +2,7 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn structural() -> { name: ~str, val: int } {\n     { name: ~\"crateresolve5\", val: 10 }"}, {"sha": "01d0e9d579c507acee259cf8536a358b6deb0de9", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,6 +2,7 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn structural() -> { name: ~str, val: int } {\n     { name: ~\"crateresolve5\", val: 10 }"}, {"sha": "de7b0ba97e23e4404870666475791f2b3fe97cca", "filename": "src/test/auxiliary/crateresolve_calories-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -3,5 +3,6 @@\n        calories = \"100\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 100 }"}, {"sha": "b814b263b75262e4b0da375615fe1745646f72b0", "filename": "src/test/auxiliary/crateresolve_calories-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -3,5 +3,6 @@\n        calories = \"200\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n fn f() -> int { 200 }"}, {"sha": "bca18e8facc48c68982ed27e6144667ee8c2a24a", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,6 +2,7 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n extern mod rustrt {\n     #[legacy_exports];"}, {"sha": "04d6cd8e0687fe80904eb5cbb25039ebfc5497f6", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,5 +1,6 @@\n #[link(name = \"a\", vers = \"0.0\")];\n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n trait i<T> { }\n "}, {"sha": "0ede9fb3f1926a0d200521d9afb6f414bed593ca", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,5 +1,6 @@\n #[link(name = \"req\")];\n #[crate_type = \"lib\"];\n+#[legacy_exports];\n \n extern mod std;\n "}, {"sha": "07071afa6f9d97ee1fdce7ed681898a5632d22f0", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_exports];\n unsafe fn f(xs: ~[int]) {\n   xs.map(|_x| { unsafe fn q() { fail; } });\n }\n\\ No newline at end of file"}, {"sha": "b150b58c638f0757378f800675cea961ec1ff313", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -3,6 +3,7 @@\n \n   Could probably be more minimal.\n  */\n+#[legacy_exports];\n \n use libc::size_t;\n "}, {"sha": "d8d644c954bd70fc8cbf5621d521141820dfe4f2", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,6 +1,8 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_borrow_lib.rs\n \n+#[legacy_exports];\n+\n extern mod cci_borrow_lib;\n use cci_borrow_lib::foo;\n "}, {"sha": "de0802e89a217bc5ab26e01842fd2aac86c5bda1", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -4,6 +4,8 @@\n // This test makes sure we can do cross-crate inlining on functions\n // that use capture clauses.\n \n+#[legacy_exports];\n+\n extern mod cci_capture_clause;\n \n use comm::recv;"}, {"sha": "86cc4508fd9344834689996cbbc7805934934e59", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -2,6 +2,7 @@\n // aux-build:cci_nested_lib.rs\n \n #[legacy_modes];\n+#[legacy_exports];\n \n extern mod cci_nested_lib;\n use cci_nested_lib::*;"}, {"sha": "9aa4dd4f9cc11aae2878b984252d164a0c7c6591", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -1,6 +1,8 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_no_inline_lib.rs\n \n+#[legacy_exports];\n+\n extern mod cci_no_inline_lib;\n use cci_no_inline_lib::iter;\n "}, {"sha": "496c92141679bd2fb2f7d1f47a9720ca5533c2d9", "filename": "src/test/run-pass/crateresolve4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f3dbbf5832e83abcb6ceb6f6b78b61ede587b/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs?ref=546f3dbbf5832e83abcb6ceb6f6b78b61ede587b", "patch": "@@ -4,6 +4,8 @@\n // aux-build:crateresolve4b-1.rs\n // aux-build:crateresolve4b-2.rs\n \n+#[legacy_exports];\n+\n mod a {\n     #[legacy_exports];\n     extern mod crateresolve4b(vers = \"0.1\");"}]}