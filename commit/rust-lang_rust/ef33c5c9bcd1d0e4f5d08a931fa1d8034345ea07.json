{"sha": "ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMzNjNWM5YmNkMWQwZTRmNWQwOGE5MzFmYTFkODAzNDM0NWVhMDc=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-22T17:37:04Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-24T23:48:44Z"}, "message": "Typo fixes in comments.", "tree": {"sha": "5983afc75146dd13e44482563cd73647b1ab8bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5983afc75146dd13e44482563cd73647b1ab8bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07", "html_url": "https://github.com/rust-lang/rust/commit/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c8c8ae286b517fe00da9f68a776ce1e6845f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c8c8ae286b517fe00da9f68a776ce1e6845f0d", "html_url": "https://github.com/rust-lang/rust/commit/a8c8c8ae286b517fe00da9f68a776ce1e6845f0d"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "50f38b16e096131b07c6b5d2180595a6b75946be", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07", "patch": "@@ -52,7 +52,7 @@ Regions are more complex than type parameters because, unlike type\n parameters, they can be universally quantified within a type.  To put\n it another way, you cannot (at least at the time of this writing) have\n a variable `x` of type `fn<T>(T) -> T`.  You can have an *item* of\n-type `fn<T>(T) - T`, but whenever it is referenced within a method,\n+type `fn<T>(T) -> T`, but whenever it is referenced within a method,\n that type parameter `T` is replaced with a concrete type *variable*\n `$T`.  To make this more concrete, imagine this code:\n \n@@ -114,7 +114,7 @@ to `&a` would be `re_bound(rid_param(\"a\", 0u))`, and the inner reference\n would be `re_free(rid_param(\"a\", 0u))`.  In `item2()`, the inner reference\n would be `re_bound(rid_param(\"a\", 0u))`.\n \n-#### Impliciations for typeck\n+#### Implications for typeck\n \n In typeck, whenever we call a function, we must go over and replace\n all references to `re_bound()` regions within its parameters with"}, {"sha": "909ab69362f172fc6fc06892734b448f80d66a6c", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=ef33c5c9bcd1d0e4f5d08a931fa1d8034345ea07", "patch": "@@ -1090,8 +1090,8 @@ impl assignment for infer_ctxt {\n // ______________________________________________________________________\n // Type combining\n //\n-// There are three type combiners, sub, lub, and glb.  Each implements\n-// the interface `combine` contains methods for combining two\n+// There are three type combiners: sub, lub, and glb.  Each implements\n+// the interface `combine` and contains methods for combining two\n // instances of various things and yielding a new instance.  These\n // combiner methods always yield a `result<T>`---failure is propagated\n // upward using `chain()` methods.\n@@ -1101,13 +1101,13 @@ impl assignment for infer_ctxt {\n // instance as the first parameter.  This would be better implemented\n // using traits.  For this system to work properly, you should not\n // call the `super_X(foo, ...)` functions directly, but rather call\n-// `foo.X(...)`.  The implemtation of `X()` can then choose to delegate\n+// `foo.X(...)`.  The implementation of `X()` can then choose to delegate\n // to the `super` routine or to do other things.\n //\n // In reality, the sub operation is rather different from lub/glb, but\n // they are combined into one interface to avoid duplication (they\n // used to be separate but there were many bugs because there were two\n-// copies of most routines.\n+// copies of most routines).\n //\n // The differences are:\n //\n@@ -1177,7 +1177,7 @@ fn super_substs<C:combine>(\n           (_, _) {\n             // If these two substitutions are for the same type (and\n             // they should be), then the type should either\n-            // consistenly have a region parameter or not have a\n+            // consistently have a region parameter or not have a\n             // region parameter.\n             infcx.tcx.sess.bug(\n                 #fmt[\"substitution a had opt_region %s and \\"}]}