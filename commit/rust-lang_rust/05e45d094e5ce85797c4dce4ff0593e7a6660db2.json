{"sha": "05e45d094e5ce85797c4dce4ff0593e7a6660db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZTQ1ZDA5NGU1Y2U4NTc5N2M0ZGNlNGZmMDU5M2U3YTY2NjBkYjI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T00:05:28Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T10:51:03Z"}, "message": "Rollup merge of #21983 - pnkfelix:eschew-untyped-arena-in-regions-mock-tcx, r=huonw\n\n Ported regions-mock-tcx to use TypedArena rather than Arena since it holds cyclic structure (which the Arena API updated for the Drop-Check-Rule cannot handle).\n\nPlus, the use of `arena::Arena` here really is not justified; the allocated values are all the same type anyway.", "tree": {"sha": "cc4f2deafb607215716b45d1302d04cd27cbcee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc4f2deafb607215716b45d1302d04cd27cbcee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05e45d094e5ce85797c4dce4ff0593e7a6660db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05e45d094e5ce85797c4dce4ff0593e7a6660db2", "html_url": "https://github.com/rust-lang/rust/commit/05e45d094e5ce85797c4dce4ff0593e7a6660db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05e45d094e5ce85797c4dce4ff0593e7a6660db2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114324f2badcad183127a50fdedd0e3e9a9a285a", "url": "https://api.github.com/repos/rust-lang/rust/commits/114324f2badcad183127a50fdedd0e3e9a9a285a", "html_url": "https://github.com/rust-lang/rust/commit/114324f2badcad183127a50fdedd0e3e9a9a285a"}, {"sha": "e4a678ddab7727a8336fc51a6cf8ea2a2952f27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a678ddab7727a8336fc51a6cf8ea2a2952f27c", "html_url": "https://github.com/rust-lang/rust/commit/e4a678ddab7727a8336fc51a6cf8ea2a2952f27c"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "bf789d5364500df680752103028111dccdb92c33", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05e45d094e5ce85797c4dce4ff0593e7a6660db2/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e45d094e5ce85797c4dce4ff0593e7a6660db2/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=05e45d094e5ce85797c4dce4ff0593e7a6660db2", "patch": "@@ -21,7 +21,7 @@ extern crate libc;\n \n use TypeStructure::{TypeInt, TypeFunction};\n use AstKind::{ExprInt, ExprVar, ExprLambda};\n-use arena::Arena;\n+use arena::TypedArena;\n use std::collections::HashMap;\n use std::mem;\n \n@@ -45,17 +45,20 @@ impl<'tcx> PartialEq for TypeStructure<'tcx> {\n \n impl<'tcx> Eq for TypeStructure<'tcx> {}\n \n+type TyArena<'tcx> = TypedArena<TypeStructure<'tcx>>;\n+type AstArena<'ast> = TypedArena<AstStructure<'ast>>;\n+\n struct TypeContext<'tcx, 'ast> {\n-    ty_arena: &'tcx Arena,\n+    ty_arena: &'tcx TyArena<'tcx>,\n     types: Vec<Type<'tcx>> ,\n     type_table: HashMap<NodeId, Type<'tcx>>,\n \n-    ast_arena: &'ast Arena,\n+    ast_arena: &'ast AstArena<'ast>,\n     ast_counter: uint,\n }\n \n impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n-    fn new(ty_arena: &'tcx Arena, ast_arena: &'ast Arena)\n+    fn new(ty_arena: &'tcx TyArena<'tcx>, ast_arena: &'ast AstArena<'ast>)\n            -> TypeContext<'tcx, 'ast> {\n         TypeContext { ty_arena: ty_arena,\n                       types: Vec::new(),\n@@ -72,7 +75,7 @@ impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n             }\n         }\n \n-        let ty = self.ty_arena.alloc(|| s);\n+        let ty = self.ty_arena.alloc(s);\n         self.types.push(ty);\n         ty\n     }\n@@ -85,7 +88,7 @@ impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n     fn ast(&mut self, a: AstKind<'ast>) -> Ast<'ast> {\n         let id = self.ast_counter;\n         self.ast_counter += 1;\n-        self.ast_arena.alloc(|| AstStructure { id: NodeId {id:id}, kind: a })\n+        self.ast_arena.alloc(AstStructure { id: NodeId {id:id}, kind: a })\n     }\n }\n \n@@ -127,8 +130,8 @@ fn compute_types<'tcx,'ast>(tcx: &mut TypeContext<'tcx,'ast>,\n }\n \n pub fn main() {\n-    let ty_arena = arena::Arena::new();\n-    let ast_arena = arena::Arena::new();\n+    let ty_arena = TypedArena::new();\n+    let ast_arena = TypedArena::new();\n     let mut tcx = TypeContext::new(&ty_arena, &ast_arena);\n     let ast = tcx.ast(ExprInt);\n     let ty = compute_types(&mut tcx, ast);"}]}