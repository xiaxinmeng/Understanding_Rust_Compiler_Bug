{"sha": "fa1efa8b104c71721d8317ae59819f6abf2d0ac8", "node_id": "C_kwDOAAsO6NoAKGZhMWVmYThiMTA0YzcxNzIxZDgzMTdhZTU5ODE5ZjZhYmYyZDBhYzg", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-18T01:57:56Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-18T01:57:56Z"}, "message": "refactor", "tree": {"sha": "6d41f22013bea50e5e2df2284adcbd76eeea29af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d41f22013bea50e5e2df2284adcbd76eeea29af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa1efa8b104c71721d8317ae59819f6abf2d0ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1efa8b104c71721d8317ae59819f6abf2d0ac8", "html_url": "https://github.com/rust-lang/rust/commit/fa1efa8b104c71721d8317ae59819f6abf2d0ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa1efa8b104c71721d8317ae59819f6abf2d0ac8/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80707aa95faae4acf8b35abf0daf4626afdb446e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80707aa95faae4acf8b35abf0daf4626afdb446e", "html_url": "https://github.com/rust-lang/rust/commit/80707aa95faae4acf8b35abf0daf4626afdb446e"}], "stats": {"total": 77, "additions": 22, "deletions": 55}, "files": [{"sha": "7113f0c55d4d3540975a0d236960b9ebb4b97002", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 22, "deletions": 55, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fa1efa8b104c71721d8317ae59819f6abf2d0ac8/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa1efa8b104c71721d8317ae59819f6abf2d0ac8/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=fa1efa8b104c71721d8317ae59819f6abf2d0ac8", "patch": "@@ -126,14 +126,12 @@ impl LateLintPass<'_> for SemicolonBlock {\n                     ..\n                 } = stmt else { return };\n                 semicolon_outside_block(cx, block, expr, span);\n-                semicolon_outside_block_if_singleline_check_outside(cx, block, expr, stmt.span);\n             },\n             StmtKind::Semi(Expr {\n                 kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n                 ..\n             }) if !block.span.from_expansion() => {\n                 semicolon_inside_block(cx, block, tail, stmt.span);\n-                semicolon_outside_block_if_singleline_check_inside(cx, block, tail, stmt.span);\n             },\n             _ => (),\n         }\n@@ -144,6 +142,8 @@ fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'\n     let insert_span = tail.span.source_callsite().shrink_to_hi();\n     let remove_span = semi_span.with_lo(block.span.hi());\n \n+    semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, true, \"inside\");\n+\n     span_lint_and_then(\n         cx,\n         SEMICOLON_INSIDE_BLOCK,\n@@ -166,6 +166,8 @@ fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_ex\n     let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n     let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n \n+    semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, false, \"outside\");\n+\n     span_lint_and_then(\n         cx,\n         SEMICOLON_OUTSIDE_BLOCK,\n@@ -182,23 +184,28 @@ fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_ex\n     );\n }\n \n-fn semicolon_outside_block_if_singleline_check_inside(\n+fn semicolon_outside_block_if_singleline(\n     cx: &LateContext<'_>,\n     block: &Block<'_>,\n-    tail: &Expr<'_>,\n-    semi_span: Span,\n+    remove_span: Span,\n+    insert_span: Span,\n+    inequality: bool,\n+    ty: &str,\n ) {\n-    let insert_span = tail.span.source_callsite().shrink_to_hi();\n-    let remove_span = semi_span.with_lo(block.span.hi());\n+    let (remove_line, insert_line) = (get_line(cx, remove_span), get_line(cx, insert_span));\n \n-    let (remove_line, insert_line) = get_line(cx, remove_span, insert_span);\n+    let eq = if inequality {\n+        remove_line != insert_line\n+    } else {\n+        remove_line == insert_line\n+    };\n \n-    if insert_line != remove_line {\n+    if eq {\n         span_lint_and_then(\n             cx,\n             SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n             block.span,\n-            \"consider moving the `;` inside the block for consistent formatting\",\n+            &format!(\"consider moving the `;` {ty} the block for consistent formatting\"),\n             |diag| {\n                 multispan_sugg_with_applicability(\n                     diag,\n@@ -211,50 +218,10 @@ fn semicolon_outside_block_if_singleline_check_inside(\n     }\n }\n \n-fn semicolon_outside_block_if_singleline_check_outside(\n-    cx: &LateContext<'_>,\n-    block: &Block<'_>,\n-    tail_stmt_expr: &Expr<'_>,\n-    semi_span: Span,\n-) {\n-    let insert_span = block.span.with_lo(block.span.hi());\n-    // account for macro calls\n-    let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n-    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n-\n-    let (remove_line, insert_line) = get_line(cx, remove_span, insert_span);\n-\n-    if remove_line == insert_line {\n-        span_lint_and_then(\n-            cx,\n-            SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n-            block.span,\n-            \"consider moving the `;` outside the block for consistent formatting\",\n-            |diag| {\n-                multispan_sugg_with_applicability(\n-                    diag,\n-                    \"put the `;` here\",\n-                    Applicability::MachineApplicable,\n-                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-                );\n-            },\n-        );\n-    }\n-}\n-\n-fn get_line(cx: &LateContext<'_>, remove_span: Span, insert_span: Span) -> (usize, usize) {\n-    let remove_line = cx\n-        .sess()\n-        .source_map()\n-        .lookup_line(remove_span.lo())\n-        .expect(\"failed to get `remove_span`'s line\")\n-        .line;\n-    let insert_line = cx\n-        .sess()\n+fn get_line(cx: &LateContext<'_>, span: Span) -> usize {\n+    cx.sess()\n         .source_map()\n-        .lookup_line(insert_span.lo())\n-        .expect(\"failed to get `insert_span`'s line\")\n-        .line;\n-\n-    (remove_line, insert_line)\n+        .lookup_line(span.lo())\n+        .expect(\"failed to get span's line\")\n+        .line\n }"}]}