{"sha": "3ffc6f0450ad2a462370235fb30cc23190f03cc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmM2ZjA0NTBhZDJhNDYyMzcwMjM1ZmIzMGNjMjMxOTBmMDNjYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-06T06:49:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-06T06:49:03Z"}, "message": "Auto merge of #30222 - mitaa:fqn#2, r=alexcrichton\n\nI missed this in #30149\n\nfixes #30198\n\nr? @alexcrichton", "tree": {"sha": "18471d9fc77a2087390426517af85115f50d40af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18471d9fc77a2087390426517af85115f50d40af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffc6f0450ad2a462370235fb30cc23190f03cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffc6f0450ad2a462370235fb30cc23190f03cc7", "html_url": "https://github.com/rust-lang/rust/commit/3ffc6f0450ad2a462370235fb30cc23190f03cc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffc6f0450ad2a462370235fb30cc23190f03cc7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b16384f101bbe28dc4eec0651a61cb9d5274ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b16384f101bbe28dc4eec0651a61cb9d5274ac", "html_url": "https://github.com/rust-lang/rust/commit/c4b16384f101bbe28dc4eec0651a61cb9d5274ac"}, {"sha": "f69cedb0d551cbd5789574185d88f62871da46b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69cedb0d551cbd5789574185d88f62871da46b1", "html_url": "https://github.com/rust-lang/rust/commit/f69cedb0d551cbd5789574185d88f62871da46b1"}], "stats": {"total": 31, "additions": 8, "deletions": 23}, "files": [{"sha": "1336acb6b0355d170afad191f40ec12716d30c37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3ffc6f0450ad2a462370235fb30cc23190f03cc7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffc6f0450ad2a462370235fb30cc23190f03cc7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3ffc6f0450ad2a462370235fb30cc23190f03cc7", "patch": "@@ -654,10 +654,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                 (tcx.lang_items.sync_trait().unwrap(),\n                  external_path(cx, \"Sync\", None, vec![], &empty)),\n         };\n-        let fqn = tcx.sess.cstore.item_path(did);\n-        let fqn = fqn.into_iter().map(|i| i.to_string()).collect();\n-        cx.external_paths.borrow_mut().as_mut().unwrap().insert(did,\n-                                                                (fqn, TypeTrait));\n+        inline::record_extern_fqn(cx, did, TypeTrait);\n         TraitBound(PolyTrait {\n             trait_: ResolvedPath {\n                 path: path,\n@@ -676,13 +673,9 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n             Some(tcx) => tcx,\n             None => return RegionBound(Lifetime::statik())\n         };\n-        let fqn = tcx.sess.cstore.item_path(self.def_id);\n-        let fqn = fqn.into_iter().map(|i| i.to_string())\n-                     .collect::<Vec<String>>();\n-        let path = external_path(cx, fqn.last().unwrap(),\n+        inline::record_extern_fqn(cx, self.def_id, TypeTrait);\n+        let path = external_path(cx, &tcx.item_name(self.def_id).as_str(),\n                                  Some(self.def_id), vec![], self.substs);\n-        cx.external_paths.borrow_mut().as_mut().unwrap().insert(self.def_id,\n-                                                            (fqn, TypeTrait));\n \n         debug!(\"ty::TraitRef\\n  substs.types(TypeSpace): {:?}\\n\",\n                self.substs.types.get_slice(ParamSpace::TypeSpace));\n@@ -1663,15 +1656,13 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyStruct(def, substs) |\n             ty::TyEnum(def, substs) => {\n                 let did = def.did;\n-                let fqn = cx.tcx().sess.cstore.item_path(did);\n-                let fqn: Vec<_> = fqn.into_iter().map(|i| i.to_string()).collect();\n                 let kind = match self.sty {\n                     ty::TyStruct(..) => TypeStruct,\n                     _ => TypeEnum,\n                 };\n-                let path = external_path(cx, &fqn.last().unwrap().to_string(),\n+                inline::record_extern_fqn(cx, did, kind);\n+                let path = external_path(cx, &cx.tcx().item_name(did).as_str(),\n                                          None, vec![], substs);\n-                cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, kind));\n                 ResolvedPath {\n                     path: path,\n                     typarams: None,\n@@ -1681,12 +1672,10 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             }\n             ty::TyTrait(box ty::TraitTy { ref principal, ref bounds }) => {\n                 let did = principal.def_id();\n-                let fqn = cx.tcx().sess.cstore.item_path(did);\n-                let fqn: Vec<_> = fqn.into_iter().map(|i| i.to_string()).collect();\n+                inline::record_extern_fqn(cx, did, TypeTrait);\n                 let (typarams, bindings) = bounds.clean(cx);\n-                let path = external_path(cx, &fqn.last().unwrap().to_string(),\n+                let path = external_path(cx, &cx.tcx().item_name(did).as_str(),\n                                          Some(did), bindings, principal.substs());\n-                cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, TypeTrait));\n                 ResolvedPath {\n                     path: path,\n                     typarams: Some(typarams),\n@@ -2816,11 +2805,7 @@ fn lang_struct(cx: &DocContext, did: Option<DefId>,\n         Some(did) => did,\n         None => return fallback(box t.clean(cx)),\n     };\n-    let fqn = cx.tcx().sess.cstore.item_path(did);\n-    let fqn: Vec<String> = fqn.into_iter().map(|i| {\n-        i.to_string()\n-    }).collect();\n-    cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, TypeStruct));\n+    inline::record_extern_fqn(cx, did, TypeStruct);\n     ResolvedPath {\n         typarams: None,\n         did: did,"}]}