{"sha": "24ee5069134e6ee6b88487f229cd05e383e1a314", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZWU1MDY5MTM0ZTZlZTZiODg0ODdmMjI5Y2QwNWUzODNlMWEzMTQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-05-27T21:26:10Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-05-27T21:26:10Z"}, "message": "Ensure that depth first search does not get stuck in cycles.", "tree": {"sha": "289b01451df629f03354896eb01ecc3ca444f1c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289b01451df629f03354896eb01ecc3ca444f1c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ee5069134e6ee6b88487f229cd05e383e1a314", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlsLInIACgkQAXYLT59T\n8VRfGBAAmbSV9IgvFmiZlWP/+s1/h/+g45sUAd7uv1kHlWh5BWQITvlMvXSJNnPl\npq5eWXqPEnk7IqW30iFX1PFpS7liqXrRuEL1dQA0jL/B1FKuggDygHNb/EDYRdnb\nE9ImUJmLxzFP5Gf6oSRofApT3du97yRi8ygqyPTgXiMxcRAfgwsy3mLFzPrdeY27\nKDMw3I6u4Rp8VH4kilSLvNu5MYHS1Kf/yaBw+UQJMNNzDld9RoW9u4dw0M7ZxpMp\nMaWbAuBUXbuxPOOpHmSt6IhPbHz3a+WDWgcgRbXj5NWAIcjZsoru3Cpfs3YN75PD\nW7pre7+kuTr4ENVWFZcScEtAwDo9a94JMrWMEhtLt8Y5Qyct3XrJYU19pUVL+1Mh\nNwTKymmsqWDQQWpDRLvAkgY7AEpDCnJ6IEKJvhJLhlABZtk0MiS8yuoUZ8qKI/Jq\n/i52B2ENSFugmODPc9Hue7v7g3dPiCFro1+suBHa6yY4ZsHOeWPWNlxqHevJtZlx\n48l2la0mTGLnRJCCjiHKoF503az9IQUS02lYT84Kay+aum1QqlFXLNpl3poDgm3T\nd4NgN/egZQ+GcGy8PBzI/hZeL3uCPpi+MZfYpN1WLaiFio4B6mT1f/dVOWnhWavb\nuM+tAGCO4PXg/5PAE+GHqgQSwlJPVfA2LHxJHfwnAi+sVAMZAJE=\n=nWVr\n-----END PGP SIGNATURE-----", "payload": "tree 289b01451df629f03354896eb01ecc3ca444f1c9\nparent 0eeebe179590836cb4d9307bbc13f31e7f2f80e5\nauthor David Wood <david@davidtw.co> 1527456370 +0100\ncommitter David Wood <david@davidtw.co> 1527456370 +0100\n\nEnsure that depth first search does not get stuck in cycles.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ee5069134e6ee6b88487f229cd05e383e1a314", "html_url": "https://github.com/rust-lang/rust/commit/24ee5069134e6ee6b88487f229cd05e383e1a314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ee5069134e6ee6b88487f229cd05e383e1a314/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eeebe179590836cb4d9307bbc13f31e7f2f80e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eeebe179590836cb4d9307bbc13f31e7f2f80e5", "html_url": "https://github.com/rust-lang/rust/commit/0eeebe179590836cb4d9307bbc13f31e7f2f80e5"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "317b62b22dc3a0a254d6176b56068b03a1c42cdb", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/24ee5069134e6ee6b88487f229cd05e383e1a314/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ee5069134e6ee6b88487f229cd05e383e1a314/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=24ee5069134e6ee6b88487f229cd05e383e1a314", "patch": "@@ -59,9 +59,16 @@ fn precompute_borrows_out_of_scope<'a, 'tcx>(\n     borrows_out_of_scope_at_location: &mut FxHashMap<Location, Vec<BorrowIndex>>,\n     borrow_index: BorrowIndex,\n     borrow_region: RegionVid,\n-    location: Location\n+    location: Location,\n+    visited_locations: &mut Vec<Location>\n ) {\n-    // Start by dealing with the current location.\n+    // Check if we have already visited this location and skip\n+    // it if we have - avoids infinite loops.\n+    if visited_locations.contains(&location) { return; }\n+    visited_locations.push(location.clone());\n+\n+    // Next, add the borrow index to the current location's vector if the region does\n+    // not contain the point at that location (or create a new vector if required).\n     if !regioncx.region_contains_point(borrow_region, location) {\n         borrows_out_of_scope_at_location\n             .entry(location.clone())\n@@ -80,57 +87,65 @@ fn precompute_borrows_out_of_scope<'a, 'tcx>(\n                 TerminatorKind::FalseUnwind { real_target: target, .. } => {\n                     precompute_borrows_out_of_scope(\n                         mir, regioncx, borrows_out_of_scope_at_location,\n-                        borrow_index, borrow_region, target.start_location()\n+                        borrow_index, borrow_region, target.start_location(),\n+                        visited_locations\n                     );\n                 },\n                 TerminatorKind::SwitchInt { ref targets, .. } => {\n                     for block in targets {\n                         precompute_borrows_out_of_scope(\n                             mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location()\n+                            borrow_index, borrow_region, block.start_location(),\n+                            visited_locations\n                         );\n                     }\n                 },\n                 TerminatorKind::Drop { target, unwind, .. } |\n                 TerminatorKind::DropAndReplace { target, unwind, .. } => {\n                     precompute_borrows_out_of_scope(\n                         mir, regioncx, borrows_out_of_scope_at_location,\n-                        borrow_index, borrow_region, target.start_location()\n+                        borrow_index, borrow_region, target.start_location(),\n+                        visited_locations\n                     );\n \n                     if let Some(unwind_block) = unwind {\n                         precompute_borrows_out_of_scope(\n                             mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, unwind_block.start_location()\n+                            borrow_index, borrow_region, unwind_block.start_location(),\n+                            visited_locations\n                         );\n                     }\n                 },\n                 TerminatorKind::Call { ref destination, cleanup, .. } => {\n                     if let Some((_, block)) = destination  {\n                         precompute_borrows_out_of_scope(\n                             mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location()\n+                            borrow_index, borrow_region, block.start_location(),\n+                            visited_locations\n                         );\n                     }\n \n                     if let Some(block) = cleanup  {\n                         precompute_borrows_out_of_scope(\n                             mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location()\n+                            borrow_index, borrow_region, block.start_location(),\n+                            visited_locations\n                         );\n                     }\n                 },\n                 TerminatorKind::Assert { target, cleanup, .. } |\n                 TerminatorKind::Yield { resume: target, drop: cleanup, .. } => {\n                     precompute_borrows_out_of_scope(\n                         mir, regioncx, borrows_out_of_scope_at_location,\n-                        borrow_index, borrow_region, target.start_location()\n+                        borrow_index, borrow_region, target.start_location(),\n+                        visited_locations\n                     );\n \n                     if let Some(block) = cleanup  {\n                         precompute_borrows_out_of_scope(\n                             mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location()\n+                            borrow_index, borrow_region, block.start_location(),\n+                            visited_locations\n                         );\n                     }\n                 },\n@@ -142,7 +157,7 @@ fn precompute_borrows_out_of_scope<'a, 'tcx>(\n     } else {\n         precompute_borrows_out_of_scope(mir, regioncx, borrows_out_of_scope_at_location,\n                                         borrow_index, borrow_region,\n-                                        location.successor_within_block());\n+                                        location.successor_within_block(), visited_locations);\n     }\n }\n \n@@ -167,7 +182,8 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n \n             precompute_borrows_out_of_scope(mir, &nonlexical_regioncx,\n                                             &mut borrows_out_of_scope_at_location,\n-                                            borrow_index, borrow_region, location);\n+                                            borrow_index, borrow_region, location,\n+                                            &mut Vec::new());\n         }\n \n         Borrows {"}]}