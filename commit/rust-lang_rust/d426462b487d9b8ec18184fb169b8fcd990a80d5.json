{"sha": "d426462b487d9b8ec18184fb169b8fcd990a80d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MjY0NjJiNDg3ZDliOGVjMTgxODRmYjE2OWI4ZmNkOTkwYTgwZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-17T08:32:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T08:32:20Z"}, "message": "Merge #4007\n\n4007: Reduce allocations when looking up proc macro decl r=edwin0cheng a=lnicola\n\n`libserde_derive` has about 21K symbols on Linux. It's not much, but let's ~~not be wasteful~~ avoid the allocations anyway.\r\n\r\nr? @edwin0cheng\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "5688c83e7d8a9ddd72b5114b4b5fd1cb523d2251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5688c83e7d8a9ddd72b5114b4b5fd1cb523d2251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d426462b487d9b8ec18184fb169b8fcd990a80d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemWmUCRBK7hj4Ov3rIwAAdHIIAERo621544ZAy6ONXcZ+R0lh\n6E6fvAtQs6+RNIWu+jEN8COgXOYtqRqS/YsPrJapj5LNMuuP/ZkNQu3/zde0DYNY\nhE8gNezLbg8C2ULfixNyImGovUi0IAjwRHyoTYMUFks8YJM+LkOfqBnSHtwaG5H+\niZTTz0XeTI53sHiK1q5uLNfsc5POd2MtHRZAOCAnMSpJi/WI5qWFdN+Nrgl3svHg\nmuDrrhQEbzrjs+TYZRfFlTzxUQmR9F/qWKmlZaEhMdgBNjq0B+V0wY+2LrRjcK7D\nlX98DrPupIEkZrnlpe2mlvBiB+GHN7Uu8dFM3cAcNlpxmij0TdyZ66cFRvAarhE=\n=5k3q\n-----END PGP SIGNATURE-----\n", "payload": "tree 5688c83e7d8a9ddd72b5114b4b5fd1cb523d2251\nparent 8d296be1090b21b60e509c831864ae85feec2490\nparent 02b96d522cc50252b4cb7927cae04248ea6b6193\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587112340 +0000\ncommitter GitHub <noreply@github.com> 1587112340 +0000\n\nMerge #4007\n\n4007: Reduce allocations when looking up proc macro decl r=edwin0cheng a=lnicola\n\n`libserde_derive` has about 21K symbols on Linux. It's not much, but let's ~~not be wasteful~~ avoid the allocations anyway.\r\n\r\nr? @edwin0cheng\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d426462b487d9b8ec18184fb169b8fcd990a80d5", "html_url": "https://github.com/rust-lang/rust/commit/d426462b487d9b8ec18184fb169b8fcd990a80d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d426462b487d9b8ec18184fb169b8fcd990a80d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d296be1090b21b60e509c831864ae85feec2490", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d296be1090b21b60e509c831864ae85feec2490", "html_url": "https://github.com/rust-lang/rust/commit/8d296be1090b21b60e509c831864ae85feec2490"}, {"sha": "02b96d522cc50252b4cb7927cae04248ea6b6193", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b96d522cc50252b4cb7927cae04248ea6b6193", "html_url": "https://github.com/rust-lang/rust/commit/02b96d522cc50252b4cb7927cae04248ea6b6193"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "7d6e5d3239daa2357b152124df6d12a24bab7432", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d426462b487d9b8ec18184fb169b8fcd990a80d5/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d426462b487d9b8ec18184fb169b8fcd990a80d5/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=d426462b487d9b8ec18184fb169b8fcd990a80d5", "patch": "@@ -16,55 +16,53 @@ fn invalid_data_err(e: impl Into<Box<dyn std::error::Error + Send + Sync>>) -> I\n     IoError::new(IoErrorKind::InvalidData, e)\n }\n \n-fn get_symbols_from_lib(file: &Path) -> Result<Vec<String>, IoError> {\n+fn is_derive_registrar_symbol(symbol: &str) -> bool {\n+    symbol.contains(NEW_REGISTRAR_SYMBOL)\n+}\n+\n+fn find_registrar_symbol(file: &Path) -> Result<Option<String>, IoError> {\n     let buffer = std::fs::read(file)?;\n     let object = Object::parse(&buffer).map_err(invalid_data_err)?;\n \n     match object {\n         Object::Elf(elf) => {\n             let symbols = elf.dynstrtab.to_vec().map_err(invalid_data_err)?;\n-            let names = symbols.iter().map(|s| s.to_string()).collect();\n-            Ok(names)\n+            let name =\n+                symbols.iter().find(|s| is_derive_registrar_symbol(s)).map(|s| s.to_string());\n+            Ok(name)\n         }\n         Object::PE(pe) => {\n-            let symbol_names =\n-                pe.exports.iter().flat_map(|s| s.name).map(|n| n.to_string()).collect();\n-            Ok(symbol_names)\n+            let name = pe\n+                .exports\n+                .iter()\n+                .flat_map(|s| s.name)\n+                .find(|s| is_derive_registrar_symbol(s))\n+                .map(|s| s.to_string());\n+            Ok(name)\n         }\n-        Object::Mach(mach) => match mach {\n-            Mach::Binary(binary) => {\n-                let exports = binary.exports().map_err(invalid_data_err)?;\n-                let names = exports\n-                    .into_iter()\n-                    .map(|s| {\n-                        // In macos doc:\n-                        // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dlsym.3.html\n-                        // Unlike other dyld API's, the symbol name passed to dlsym() must NOT be\n-                        // prepended with an underscore.\n-                        if s.name.starts_with(\"_\") {\n-                            s.name[1..].to_string()\n-                        } else {\n-                            s.name\n-                        }\n-                    })\n-                    .collect();\n-                Ok(names)\n-            }\n-            Mach::Fat(_) => Ok(vec![]),\n-        },\n-        Object::Archive(_) | Object::Unknown(_) => Ok(vec![]),\n+        Object::Mach(Mach::Binary(binary)) => {\n+            let exports = binary.exports().map_err(invalid_data_err)?;\n+            let name = exports\n+                .iter()\n+                .map(|s| {\n+                    // In macos doc:\n+                    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dlsym.3.html\n+                    // Unlike other dyld API's, the symbol name passed to dlsym() must NOT be\n+                    // prepended with an underscore.\n+                    if s.name.starts_with(\"_\") {\n+                        &s.name[1..]\n+                    } else {\n+                        &s.name\n+                    }\n+                })\n+                .find(|s| is_derive_registrar_symbol(&s))\n+                .map(|s| s.to_string());\n+            Ok(name)\n+        }\n+        _ => Ok(None),\n     }\n }\n \n-fn is_derive_registrar_symbol(symbol: &str) -> bool {\n-    symbol.contains(NEW_REGISTRAR_SYMBOL)\n-}\n-\n-fn find_registrar_symbol(file: &Path) -> Result<Option<String>, IoError> {\n-    let symbols = get_symbols_from_lib(file)?;\n-    Ok(symbols.into_iter().find(|s| is_derive_registrar_symbol(s)))\n-}\n-\n /// Loads dynamic library in platform dependent manner.\n ///\n /// For unix, you have to use RTLD_DEEPBIND flag to escape problems described"}]}