{"sha": "199d40fa5589bb0e74c4086e30825015277439c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OWQ0MGZhNTU4OWJiMGU3NGM0MDg2ZTMwODI1MDE1Mjc3NDM5YzE=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-06T20:13:14Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-06T20:27:11Z"}, "message": "Increase default function call width limit", "tree": {"sha": "571d67860ba081a474ca69c13ea33a2696380108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571d67860ba081a474ca69c13ea33a2696380108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/199d40fa5589bb0e74c4086e30825015277439c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/199d40fa5589bb0e74c4086e30825015277439c1", "html_url": "https://github.com/rust-lang/rust/commit/199d40fa5589bb0e74c4086e30825015277439c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/199d40fa5589bb0e74c4086e30825015277439c1/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76df6b4d9a67e67137cf0773d96f0027da827c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76df6b4d9a67e67137cf0773d96f0027da827c7", "html_url": "https://github.com/rust-lang/rust/commit/a76df6b4d9a67e67137cf0773d96f0027da827c7"}], "stats": {"total": 145, "additions": 49, "deletions": 96}, "files": [{"sha": "3648e5e5f67f6e33c04b5c4c560a8c263a23e7b3", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -2,11 +2,11 @@\n name = \"rustfmt\"\n version = \"0.0.1\"\n dependencies = [\n- \"diff 0.1.5 (git+https://github.com/utkarshkukreti/diff.rs.git)\",\n+ \"diff 0.1.7 (git+https://github.com/utkarshkukreti/diff.rs.git)\",\n  \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n- \"term 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -21,15 +21,15 @@ dependencies = [\n \n [[package]]\n name = \"diff\"\n-version = \"0.1.5\"\n-source = \"git+https://github.com/utkarshkukreti/diff.rs.git#1921576a73e1b50a0ecb26c8ce62eefb26d273b4\"\n+version = \"0.1.7\"\n+source = \"git+https://github.com/utkarshkukreti/diff.rs.git#6edb9454bf4127087aced0fe07ab3ea6894083cb\"\n \n [[package]]\n name = \"kernel32-sys\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -84,11 +84,11 @@ dependencies = [\n \n [[package]]\n name = \"term\"\n-version = \"0.2.11\"\n+version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -106,7 +106,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"winapi\"\n-version = \"0.2.3\"\n+version = \"0.2.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]"}, {"sha": "86d1a9aeb1496002af7ad4fe8a38c138c67f7e46", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -348,8 +348,7 @@ mod test {\n         assert_eq!(&uncommented(\"abc/*...*/\"), \"abc\");\n         assert_eq!(&uncommented(\"// .... /* \\n../* /* *** / */ */a/* // */c\\n\"),\n                    \"..ac\\n\");\n-        assert_eq!(&uncommented(\"abc \\\" /* */\\\" qsdf\"),\n-                   \"abc \\\" /* */\\\" qsdf\");\n+        assert_eq!(&uncommented(\"abc \\\" /* */\\\" qsdf\"), \"abc \\\" /* */\\\" qsdf\");\n     }\n \n     #[test]"}, {"sha": "b237ce4ddfc4597cfde383ede73a3c4707332752", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -260,7 +260,7 @@ create_config! {\n     max_width: usize, 100, \"Maximum width of each line\";\n     ideal_width: usize, 80, \"Ideal width of each line\";\n     tab_spaces: usize, 4, \"Number of spaces per tab\";\n-    fn_call_width: usize, 55,\n+    fn_call_width: usize, 60,\n         \"Maximum width of the args of a function call before faling back to vertical formatting\";\n     struct_lit_width: usize, 16,\n         \"Maximum width in the body of a struct lit before faling back to vertical formatting\";"}, {"sha": "ac966dc5118d165dc7bf9b3e5a998ac1016f0635", "filename": "src/expr.rs", "status": "modified", "additions": 14, "deletions": 40, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -14,7 +14,7 @@ use std::borrow::Borrow;\n use Indent;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            DefinitiveListTactic, definitive_tactic};\n+            DefinitiveListTactic, definitive_tactic, ListItem, format_fn_args};\n use string::{StringFormat, rewrite_string};\n use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search};\n use visitor::FmtVisitor;\n@@ -148,13 +148,7 @@ impl Rewrite for ast::Expr {\n                 Some(format!(\"break{}\", id_str))\n             }\n             ast::Expr_::ExprClosure(capture, ref fn_decl, ref body) => {\n-                rewrite_closure(capture,\n-                                fn_decl,\n-                                body,\n-                                self.span,\n-                                context,\n-                                width,\n-                                offset)\n+                rewrite_closure(capture, fn_decl, body, self.span, context, width, offset)\n             }\n             ast::Expr_::ExprField(..) |\n             ast::Expr_::ExprTupField(..) |\n@@ -172,10 +166,7 @@ impl Rewrite for ast::Expr {\n                 })\n             }\n             ast::Expr_::ExprRet(None) => {\n-                wrap_str(\"return\".to_owned(),\n-                         context.config.max_width,\n-                         width,\n-                         offset)\n+                wrap_str(\"return\".to_owned(), context.config.max_width, width, offset)\n             }\n             ast::Expr_::ExprRet(Some(ref expr)) => {\n                 rewrite_unary_prefix(context, \"return \", expr, width, offset)\n@@ -227,7 +218,8 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                                       .map(|li| li.item.as_ref().map(|s| s.len() > 10))\n                                       .fold(Some(false),\n                                             |acc, x| acc.and_then(|y| x.map(|x| (x || y)))));\n-    let tactic = if has_long_item || items.iter().any(|li| li.is_multiline()) {\n+\n+    let tactic = if has_long_item || items.iter().any(ListItem::is_multiline) {\n         definitive_tactic(&items, ListTactic::HorizontalVertical, max_item_width)\n     } else {\n         DefinitiveListTactic::Mixed\n@@ -282,9 +274,7 @@ fn rewrite_closure(capture: ast::CaptureClause,\n                                  span_after(span, \"|\", context.codemap),\n                                  body.span.lo);\n     let item_vec = arg_items.collect::<Vec<_>>();\n-    let tactic = definitive_tactic(&item_vec,\n-                                   ListTactic::HorizontalVertical,\n-                                   horizontal_budget);\n+    let tactic = definitive_tactic(&item_vec, ListTactic::HorizontalVertical, horizontal_budget);\n     let budget = match tactic {\n         DefinitiveListTactic::Horizontal => horizontal_budget,\n         _ => budget,\n@@ -589,11 +579,7 @@ fn rewrite_if_else(context: &RewriteContext,\n \n     // Try to format if-else on single line.\n     if allow_single_line && context.config.single_line_if_else {\n-        let trial = single_line_if_else(context,\n-                                        &pat_expr_string,\n-                                        if_block,\n-                                        else_block_opt,\n-                                        width);\n+        let trial = single_line_if_else(context, &pat_expr_string, if_block, else_block_opt, width);\n \n         if trial.is_some() {\n             return trial;\n@@ -780,8 +766,7 @@ fn rewrite_match(context: &RewriteContext,\n         }\n     }\n     // BytePos(1) = closing match brace.\n-    let last_span = mk_sp(arm_end_pos(&arms[arms.len() - 1]),\n-                          span.hi - BytePos(1));\n+    let last_span = mk_sp(arm_end_pos(&arms[arms.len() - 1]), span.hi - BytePos(1));\n     let last_comment = context.snippet(last_span);\n     let comment = try_opt!(rewrite_match_arm_comment(context,\n                                                      &last_comment,\n@@ -894,8 +879,7 @@ impl Rewrite for ast::Arm {\n         // 4 = ` => `.len()\n         let same_line_body = if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n-            let offset = Indent::new(offset.block_indent,\n-                                     line_start + 4 - offset.block_indent);\n+            let offset = Indent::new(offset.block_indent, line_start + 4 - offset.block_indent);\n             let rewrite = nop_block_collapse(body.rewrite(context, budget, offset), budget);\n \n             match rewrite {\n@@ -1081,13 +1065,7 @@ pub fn rewrite_call<R>(context: &RewriteContext,\n     where R: Rewrite\n {\n     let closure = |callee_max_width| {\n-        rewrite_call_inner(context,\n-                           callee,\n-                           callee_max_width,\n-                           args,\n-                           span,\n-                           width,\n-                           offset)\n+        rewrite_call_inner(context, callee, callee_max_width, args, span, width, offset)\n     };\n \n     // 2 is for parens\n@@ -1145,7 +1123,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                              span.lo,\n                              span.hi);\n \n-    let list_str = match ::lists::format_fn_args(items, remaining_width, offset, context.config) {\n+    let list_str = match format_fn_args(items, remaining_width, offset, context.config) {\n         Some(str) => str,\n         None => return Err(Ordering::Less),\n     };\n@@ -1174,9 +1152,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                           width: usize,\n                           offset: Indent)\n                           -> Option<String> {\n-    debug!(\"rewrite_struct_lit: width {}, offset {:?}\",\n-           width,\n-           offset);\n+    debug!(\"rewrite_struct_lit: width {}, offset {:?}\", width, offset);\n     assert!(!fields.is_empty() || base.is_some());\n \n     enum StructLitField<'a> {\n@@ -1327,9 +1303,7 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n                      width: usize,\n                      offset: Indent)\n                      -> Option<String> {\n-    debug!(\"rewrite_tuple_lit: width: {}, offset: {:?}\",\n-           width,\n-           offset);\n+    debug!(\"rewrite_tuple_lit: width: {}, offset: {:?}\", width, offset);\n     let indent = offset + 1;\n     // In case of length 1, need a trailing comma\n     if items.len() == 1 {\n@@ -1350,7 +1324,7 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n                              span.lo + BytePos(1), // Remove parens\n                              span.hi - BytePos(1));\n     let budget = try_opt!(width.checked_sub(2));\n-    let list_str = try_opt!(::lists::format_fn_args(items, budget, indent, context.config));\n+    let list_str = try_opt!(format_fn_args(items, budget, indent, context.config));\n \n     Some(format!(\"({})\", list_str))\n }"}, {"sha": "d94c1501734517d5eca0f7f59d71ff27496b5471", "filename": "src/filemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -115,8 +115,7 @@ fn write_file(text: &StringBuffer,\n             try!(write_system_newlines(&mut v, text, config));\n             let fmt_text = String::from_utf8(v).unwrap();\n             let diff = make_diff(&ori_text, &fmt_text, 3);\n-            print_diff(diff,\n-                       |line_num| format!(\"\\nDiff at line {}:\", line_num));\n+            print_diff(diff, |line_num| format!(\"\\nDiff at line {}:\", line_num));\n         }\n         WriteMode::Return => {\n             // io::Write is not implemented for String, working around with"}, {"sha": "aab5dd76799ba764e2323887f72402cc59e77092", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use Indent;\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic};\n+use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n use utils::span_after;\n use rewrite::{Rewrite, RewriteContext};\n \n@@ -153,9 +153,9 @@ pub fn rewrite_use_list(width: usize,\n         items[1..].sort_by(|a, b| a.item.cmp(&b.item));\n     }\n \n-    let tactic = ::lists::definitive_tactic(&items[first_index..],\n-                                            ::lists::ListTactic::Mixed,\n-                                            remaining_width);\n+    let tactic = definitive_tactic(&items[first_index..],\n+                                   ::lists::ListTactic::Mixed,\n+                                   remaining_width);\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\","}, {"sha": "04a61fff358bc6879bfd21ceb08f7787eb0fec93", "filename": "src/issues.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -236,8 +236,7 @@ fn find_unnumbered_issue() {\n \n     fn check_pass(text: &str) {\n         let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n-        assert_eq!(None,\n-                   text.chars().position(|c| seeker.inspect(c).is_some()));\n+        assert_eq!(None, text.chars().position(|c| seeker.inspect(c).is_some()));\n     }\n \n     check_fail(\"TODO\\n\", 4);\n@@ -272,9 +271,7 @@ fn find_issue() {\n                          ReportTactic::Never,\n                          ReportTactic::Always));\n \n-    assert!(!is_bad_issue(\"bad FIXME\\n\",\n-                          ReportTactic::Always,\n-                          ReportTactic::Never));\n+    assert!(!is_bad_issue(\"bad FIXME\\n\", ReportTactic::Always, ReportTactic::Never));\n }\n \n #[test]"}, {"sha": "9cc228ae2c829c60eb05475460c20f79b819e1d4", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -312,9 +312,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let context = self.get_context();\n         let ret_str = fd.output\n-                        .rewrite(&context,\n-                                 self.config.max_width - indent.width(),\n-                                 indent)\n+                        .rewrite(&context, self.config.max_width - indent.width(), indent)\n                         .unwrap();\n \n         // Args."}, {"sha": "1dfb05c88b6df3c81aadff3d5bc5fce5b1005235", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -19,7 +19,6 @@\n // keeping some scratch mem for this and running our own StrPool?\n // TODO for lint violations of names, emit a refactor script\n \n-\n #[macro_use]\n extern crate log;\n "}, {"sha": "e7565851871c84022ce8613583f0c324d4cf6445", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -19,12 +19,15 @@ use comment::{FindUncommented, rewrite_comment, find_comment_end};\n use config::Config;\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+/// Formatting tactic for lists. This will be cast down to a\n+/// DefinitiveListTactic depending on the number and length of the items and\n+/// their comments.\n pub enum ListTactic {\n     // One item per row.\n     Vertical,\n     // All items on one row.\n     Horizontal,\n-    // Try Horizontal layout, if that fails then vertical\n+    // Try Horizontal layout, if that fails then vertical.\n     HorizontalVertical,\n     // HorizontalVertical with a soft limit of n characters.\n     LimitedHorizontalVertical(usize),\n@@ -72,11 +75,7 @@ pub fn format_item_list<I>(items: I,\n                            -> Option<String>\n     where I: Iterator<Item = ListItem>\n {\n-    list_helper(items,\n-                width,\n-                offset,\n-                config,\n-                ListTactic::HorizontalVertical)\n+    list_helper(items, width, offset, config, ListTactic::HorizontalVertical)\n }\n \n fn list_helper<I>(items: I,\n@@ -111,7 +110,7 @@ impl AsRef<ListItem> for ListItem {\n pub struct ListItem {\n     // None for comments mean that they are not present.\n     pub pre_comment: Option<String>,\n-    // Item should include attributes and doc comments. None indicates failed\n+    // Item should include attributes and doc comments. None indicates a failed\n     // rewrite.\n     pub item: Option<String>,\n     pub post_comment: Option<String>,\n@@ -121,7 +120,6 @@ pub struct ListItem {\n \n impl ListItem {\n     pub fn is_multiline(&self) -> bool {\n-        // FIXME: fail earlier!\n         self.item.as_ref().map(|s| s.contains('\\n')).unwrap_or(false) ||\n         self.pre_comment.is_some() ||\n         self.post_comment.as_ref().map(|s| s.contains('\\n')).unwrap_or(false)\n@@ -142,6 +140,7 @@ impl ListItem {\n }\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+/// The definitive formatting tactic for lists.\n pub enum DefinitiveListTactic {\n     Vertical,\n     Horizontal,\n@@ -488,8 +487,6 @@ fn calculate_width<'li, I, T>(items: I) -> (usize, usize)\n }\n \n fn total_item_width(item: &ListItem) -> usize {\n-    // FIXME: If the item has a `None` item, it may be better to fail earlier\n-    // rather than later.\n     comment_len(item.pre_comment.as_ref().map(|x| &(*x)[..])) +\n     comment_len(item.post_comment.as_ref().map(|x| &(*x)[..])) +\n     item.item.as_ref().map(|str| str.len()).unwrap_or(0)"}, {"sha": "163a9f12f24fac314f9de930929dc3d65a877da3", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -89,12 +89,7 @@ pub fn rewrite_macro(mac: &ast::Mac,\n     match style {\n         MacroStyle::Parens => {\n             // Format macro invocation as function call.\n-            rewrite_call(context,\n-                         &macro_name,\n-                         &expr_vec,\n-                         mac.span,\n-                         width,\n-                         offset)\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, width, offset)\n         }\n         MacroStyle::Brackets => {\n             // Format macro invocation as array literal."}, {"sha": "2cbbed92fa511cc68b6efcf1bb68e24adadf5ead", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -13,7 +13,7 @@ use syntax::print::pprust;\n use syntax::codemap::{self, Span, BytePos, CodeMap};\n \n use Indent;\n-use lists::itemize_list;\n+use lists::{format_item_list, itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, span_after, format_mutability, wrap_str};\n \n@@ -226,10 +226,10 @@ fn rewrite_segment(segment: &ast::PathSegment,\n                                      },\n                                      list_lo,\n                                      span_hi);\n-            let list_str = try_opt!(::lists::format_item_list(items,\n-                                                              list_width,\n-                                                              offset + extra_offset,\n-                                                              context.config));\n+            let list_str = try_opt!(format_item_list(items,\n+                                                     list_width,\n+                                                     offset + extra_offset,\n+                                                     context.config));\n \n             // Update position of last bracket.\n             *span_lo = next_span_lo;\n@@ -258,7 +258,7 @@ fn rewrite_segment(segment: &ast::PathSegment,\n                                      |ty| ty.rewrite(context, budget, offset),\n                                      list_lo,\n                                      span_hi);\n-            let list_str = try_opt!(::lists::format_fn_args(items, budget, offset, context.config));\n+            let list_str = try_opt!(format_fn_args(items, budget, offset, context.config));\n \n             format!(\"({}){}\", list_str, output)\n         }\n@@ -363,8 +363,7 @@ impl Rewrite for ast::TyParamBound {\n             }\n             ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::Maybe) => {\n                 let budget = try_opt!(width.checked_sub(1));\n-                Some(format!(\"?{}\",\n-                             try_opt!(tref.rewrite(context, budget, offset + 1))))\n+                Some(format!(\"?{}\", try_opt!(tref.rewrite(context, budget, offset + 1))))\n             }\n             ast::TyParamBound::RegionTyParamBound(ref l) => {\n                 Some(pprust::lifetime_to_string(l))"}, {"sha": "b02e8a72b8fb74ba8249237437daee64d9d6d324", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d40fa5589bb0e74c4086e30825015277439c1/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=199d40fa5589bb0e74c4086e30825015277439c1", "patch": "@@ -319,9 +319,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn format_mod(&mut self, m: &ast::Mod, s: Span, ident: ast::Ident) {\n-        debug!(\"FmtVisitor::format_mod: ident: {:?}, span: {:?}\",\n-               ident,\n-               s);\n+        debug!(\"FmtVisitor::format_mod: ident: {:?}, span: {:?}\", ident, s);\n \n         // Decide whether this is an inline mod or an external mod.\n         let local_file_name = self.codemap.span_to_filename(s);\n@@ -359,9 +357,7 @@ impl<'a> FmtVisitor<'a> {\n             overflow_indent: Indent::empty(),\n         };\n         // 1 = \";\"\n-        match vp.rewrite(&context,\n-                         self.config.max_width - offset.width() - 1,\n-                         offset) {\n+        match vp.rewrite(&context, self.config.max_width - offset.width() - 1, offset) {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n                 let prev_span = codemap::mk_sp(self.last_pos, span.lo);"}]}