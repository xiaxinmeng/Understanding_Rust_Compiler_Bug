{"sha": "e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Yjc0YTkwMTcyZTk5ZTM2MWZmNDYyNzdmNTJiZmMwM2QwYTdiYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-22T08:16:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-22T08:16:53Z"}, "message": "Auto merge of #27860 - m4rw3r:rustdoc_unstable_feature_issue, r=alexcrichton\n\nImplemented #27759 \r\n\r\nExample:\r\n\r\n![screen shot 2015-08-16 at 21 45 17](https://cloud.githubusercontent.com/assets/108100/9295040/1fb24d50-4460-11e5-8ab8-81ac5330974a.png)", "tree": {"sha": "afdac33cb88b62d1b7700a34febcf5ef5ba19c3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afdac33cb88b62d1b7700a34febcf5ef5ba19c3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "html_url": "https://github.com/rust-lang/rust/commit/e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "983d2b3d1a97846c90ea8f689774be8353b340be", "url": "https://api.github.com/repos/rust-lang/rust/commits/983d2b3d1a97846c90ea8f689774be8353b340be", "html_url": "https://github.com/rust-lang/rust/commit/983d2b3d1a97846c90ea8f689774be8353b340be"}, {"sha": "6532a08525137a5f839c4ed555ad95360621f5db", "url": "https://api.github.com/repos/rust-lang/rust/commits/6532a08525137a5f839c4ed555ad95360621f5db", "html_url": "https://github.com/rust-lang/rust/commit/6532a08525137a5f839c4ed555ad95360621f5db"}], "stats": {"total": 187, "additions": 125, "deletions": 62}, "files": [{"sha": "677916b53989b7a1ec5a884f16c6c14c8afe2632", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -69,6 +69,7 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject))]\n #![no_std]\n #![cfg_attr(not(stage0), needs_allocator)]"}, {"sha": "2639e6dce468fa0cda1a1290b2cd06248c720abe", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -26,6 +26,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject))]\n \n #![allow(trivial_casts)]"}, {"sha": "f05ef0fe5da555faeafb4dc3c13cf788223c60a2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -58,7 +58,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![doc(test(no_crate_inject))]\n \n #![no_core]"}, {"sha": "6273c1214ec4e2dae0777b19adb5e88bb15e165e", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -21,7 +21,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![cfg_attr(test, feature(test))]\n \n //! Bindings for the C standard library and other platform libraries"}, {"sha": "d046393cdeb08e0f972a02f6ab1039c74371189e", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -30,6 +30,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject))]\n #![no_std]\n "}, {"sha": "05be445820d10b668b63345d5a171e0f458c5daa", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -2688,7 +2688,8 @@ pub struct Stability {\n     pub feature: String,\n     pub since: String,\n     pub deprecated_since: String,\n-    pub reason: String\n+    pub reason: String,\n+    pub issue: Option<u32>\n }\n \n impl Clean<Stability> for attr::Stability {\n@@ -2702,6 +2703,7 @@ impl Clean<Stability> for attr::Stability {\n                                                                     |istr| istr.to_string()),\n             reason: self.reason.as_ref().map_or(\"\".to_string(),\n                                                 |interned| interned.to_string()),\n+            issue: self.issue,\n         }\n     }\n }\n@@ -2717,6 +2719,7 @@ impl<'a> Clean<Stability> for &'a attr::Stability {\n                                                                     |istr| istr.to_string()),\n             reason: self.reason.as_ref().map_or(\"\".to_string(),\n                                                 |interned| interned.to_string()),\n+            issue: self.issue,\n         }\n     }\n }"}, {"sha": "d2c8078e62a4050141ce824b6f980d11eef64420", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 82, "deletions": 57, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -103,6 +103,9 @@ pub struct Context {\n     pub render_redirect_pages: bool,\n     /// All the passes that were run on this crate.\n     pub passes: HashSet<String>,\n+    /// The base-URL of the issue tracker for when an item has been tagged with\n+    /// an issue number.\n+    pub issue_tracker_base_url: Option<String>,\n }\n \n /// Indicates where an external crate can be found.\n@@ -323,6 +326,7 @@ pub fn run(mut krate: clean::Crate,\n         },\n         include_sources: true,\n         render_redirect_pages: false,\n+        issue_tracker_base_url: None,\n     };\n \n     try!(mkdir(&cx.dst));\n@@ -352,6 +356,10 @@ pub fn run(mut krate: clean::Crate,\n                             }\n                         });\n                     }\n+                    clean::NameValue(ref x, ref s)\n+                            if \"issue_tracker_base_url\" == *x => {\n+                        cx.issue_tracker_base_url = Some(s.to_string());\n+                    }\n                     clean::Word(ref x)\n                             if \"html_no_source\" == *x => {\n                         cx.include_sources = false;\n@@ -1485,16 +1493,16 @@ impl<'a> fmt::Display for Item<'a> {\n                 item_module(fmt, self.cx, self.item, &m.items)\n             }\n             clean::FunctionItem(ref f) | clean::ForeignFunctionItem(ref f) =>\n-                item_function(fmt, self.item, f),\n+                item_function(fmt, self.cx, self.item, f),\n             clean::TraitItem(ref t) => item_trait(fmt, self.cx, self.item, t),\n-            clean::StructItem(ref s) => item_struct(fmt, self.item, s),\n-            clean::EnumItem(ref e) => item_enum(fmt, self.item, e),\n-            clean::TypedefItem(ref t, _) => item_typedef(fmt, self.item, t),\n-            clean::MacroItem(ref m) => item_macro(fmt, self.item, m),\n-            clean::PrimitiveItem(ref p) => item_primitive(fmt, self.item, p),\n+            clean::StructItem(ref s) => item_struct(fmt, self.cx, self.item, s),\n+            clean::EnumItem(ref e) => item_enum(fmt, self.cx, self.item, e),\n+            clean::TypedefItem(ref t, _) => item_typedef(fmt, self.cx, self.item, t),\n+            clean::MacroItem(ref m) => item_macro(fmt, self.cx, self.item, m),\n+            clean::PrimitiveItem(ref p) => item_primitive(fmt, self.cx, self.item, p),\n             clean::StaticItem(ref i) | clean::ForeignStaticItem(ref i) =>\n-                item_static(fmt, self.item, i),\n-            clean::ConstantItem(ref c) => item_constant(fmt, self.item, c),\n+                item_static(fmt, self.cx, self.item, i),\n+            clean::ConstantItem(ref c) => item_constant(fmt, self.cx, self.item, c),\n             _ => Ok(())\n         }\n     }\n@@ -1537,8 +1545,8 @@ fn plain_summary_line(s: Option<&str>) -> String {\n     markdown::plain_summary_line(&line[..])\n }\n \n-fn document(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n-    if let Some(s) = short_stability(item, true) {\n+fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n+    if let Some(s) = short_stability(item, cx, true) {\n         try!(write!(w, \"<div class='stability'>{}</div>\", s));\n     }\n     if let Some(s) = item.doc_value() {\n@@ -1549,7 +1557,7 @@ fn document(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n \n fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                item: &clean::Item, items: &[clean::Item]) -> fmt::Result {\n-    try!(document(w, item));\n+    try!(document(w, cx, item));\n \n     let mut indices = (0..items.len()).filter(|i| {\n         !cx.ignore_private_item(&items[*i])\n@@ -1657,7 +1665,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n             _ => {\n                 if myitem.name.is_none() { continue }\n-                let stab_docs = if let Some(s) = short_stability(myitem, false) {\n+                let stab_docs = if let Some(s) = short_stability(myitem, cx, false) {\n                     format!(\"[{}]\", s)\n                 } else {\n                     String::new()\n@@ -1685,7 +1693,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     write!(w, \"</table>\")\n }\n \n-fn short_stability(item: &clean::Item, show_reason: bool) -> Option<String> {\n+fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Option<String> {\n     item.stability.as_ref().and_then(|stab| {\n         let reason = if show_reason && !stab.reason.is_empty() {\n             format!(\": {}\", stab.reason)\n@@ -1700,7 +1708,22 @@ fn short_stability(item: &clean::Item, show_reason: bool) -> Option<String> {\n             };\n             format!(\"Deprecated{}{}\", since, Markdown(&reason))\n         } else if stab.level == attr::Unstable {\n-            format!(\"Unstable{}\", Markdown(&reason))\n+            let unstable_extra = if show_reason {\n+                match (!stab.feature.is_empty(), &cx.issue_tracker_base_url, stab.issue) {\n+                    (true, &Some(ref tracker_url), Some(issue_no)) =>\n+                        format!(\" (<code>{}</code> <a href=\\\"{}{}\\\">#{}</a>)\",\n+                                Escape(&stab.feature), tracker_url, issue_no, issue_no),\n+                    (false, &Some(ref tracker_url), Some(issue_no)) =>\n+                        format!(\" (<a href=\\\"{}{}\\\">#{}</a>)\", Escape(&tracker_url), issue_no,\n+                                issue_no),\n+                    (true, _, _) =>\n+                        format!(\" (<code>{}</code>)\", Escape(&stab.feature)),\n+                    _ => String::new(),\n+                }\n+            } else {\n+                String::new()\n+            };\n+            format!(\"Unstable{}{}\", unstable_extra, Markdown(&reason))\n         } else {\n             return None\n         };\n@@ -1720,18 +1743,18 @@ impl<'a> fmt::Display for Initializer<'a> {\n     }\n }\n \n-fn item_constant(w: &mut fmt::Formatter, it: &clean::Item,\n+fn item_constant(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  c: &clean::Constant) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust const'>{vis}const \\\n                     {name}: {typ}{init}</pre>\",\n            vis = VisSpace(it.visibility),\n            name = it.name.as_ref().unwrap(),\n            typ = c.type_,\n            init = Initializer(&c.expr)));\n-    document(w, it)\n+    document(w, cx, it)\n }\n \n-fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n+fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                s: &clean::Static) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust static'>{vis}static {mutability}\\\n                     {name}: {typ}{init}</pre>\",\n@@ -1740,10 +1763,10 @@ fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n            name = it.name.as_ref().unwrap(),\n            typ = s.type_,\n            init = Initializer(&s.expr)));\n-    document(w, it)\n+    document(w, cx, it)\n }\n \n-fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n+fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust fn'>{vis}{unsafety}{abi}{constness}fn \\\n                     {name}{generics}{decl}{where_clause}</pre>\",\n@@ -1755,7 +1778,7 @@ fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n            generics = f.generics,\n            where_clause = WhereClause(&f.generics),\n            decl = f.decl));\n-    document(w, it)\n+    document(w, cx, it)\n }\n \n fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n@@ -1832,17 +1855,17 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     try!(write!(w, \"</pre>\"));\n \n     // Trait documentation\n-    try!(document(w, it));\n+    try!(document(w, cx, it));\n \n-    fn trait_item(w: &mut fmt::Formatter, m: &clean::Item)\n+    fn trait_item(w: &mut fmt::Formatter, cx: &Context, m: &clean::Item)\n                   -> fmt::Result {\n         try!(write!(w, \"<h3 id='{ty}.{name}' class='method stab {stab}'><code>\",\n                     ty = shortty(m),\n                     name = *m.name.as_ref().unwrap(),\n                     stab = m.stability_class()));\n         try!(render_assoc_item(w, m, AssocItemLink::Anchor));\n         try!(write!(w, \"</code></h3>\"));\n-        try!(document(w, m));\n+        try!(document(w, cx, m));\n         Ok(())\n     }\n \n@@ -1852,7 +1875,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             <div class='methods'>\n         \"));\n         for t in &types {\n-            try!(trait_item(w, *t));\n+            try!(trait_item(w, cx, *t));\n         }\n         try!(write!(w, \"</div>\"));\n     }\n@@ -1863,7 +1886,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             <div class='methods'>\n         \"));\n         for t in &consts {\n-            try!(trait_item(w, *t));\n+            try!(trait_item(w, cx, *t));\n         }\n         try!(write!(w, \"</div>\"));\n     }\n@@ -1875,7 +1898,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             <div class='methods'>\n         \"));\n         for m in &required {\n-            try!(trait_item(w, *m));\n+            try!(trait_item(w, cx, *m));\n         }\n         try!(write!(w, \"</div>\"));\n     }\n@@ -1885,13 +1908,13 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             <div class='methods'>\n         \"));\n         for m in &provided {\n-            try!(trait_item(w, *m));\n+            try!(trait_item(w, cx, *m));\n         }\n         try!(write!(w, \"</div>\"));\n     }\n \n     // If there are methods directly on this trait object, render them here.\n-    try!(render_assoc_items(w, it.def_id, AssocItemRender::All));\n+    try!(render_assoc_items(w, cx, it.def_id, AssocItemRender::All));\n \n     let cache = cache();\n     try!(write!(w, \"\n@@ -2003,7 +2026,7 @@ fn render_assoc_item(w: &mut fmt::Formatter, meth: &clean::Item,\n     }\n }\n \n-fn item_struct(w: &mut fmt::Formatter, it: &clean::Item,\n+fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                s: &clean::Struct) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust struct'>\"));\n     try!(render_attributes(w, it));\n@@ -2016,7 +2039,7 @@ fn item_struct(w: &mut fmt::Formatter, it: &clean::Item,\n                        true));\n     try!(write!(w, \"</pre>\"));\n \n-    try!(document(w, it));\n+    try!(document(w, cx, it));\n     let mut fields = s.fields.iter().filter(|f| {\n         match f.inner {\n             clean::StructFieldItem(clean::HiddenStructField) => false,\n@@ -2033,16 +2056,16 @@ fn item_struct(w: &mut fmt::Formatter, it: &clean::Item,\n                                     <code>{name}</code></td><td>\",\n                             stab = field.stability_class(),\n                             name = field.name.as_ref().unwrap()));\n-                try!(document(w, field));\n+                try!(document(w, cx, field));\n                 try!(write!(w, \"</td></tr>\"));\n             }\n             try!(write!(w, \"</table>\"));\n         }\n     }\n-    render_assoc_items(w, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it.def_id, AssocItemRender::All)\n }\n \n-fn item_enum(w: &mut fmt::Formatter, it: &clean::Item,\n+fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n              e: &clean::Enum) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust enum'>\"));\n     try!(render_attributes(w, it));\n@@ -2095,13 +2118,13 @@ fn item_enum(w: &mut fmt::Formatter, it: &clean::Item,\n     }\n     try!(write!(w, \"</pre>\"));\n \n-    try!(document(w, it));\n+    try!(document(w, cx, it));\n     if !e.variants.is_empty() {\n         try!(write!(w, \"<h2 class='variants'>Variants</h2>\\n<table>\"));\n         for variant in &e.variants {\n             try!(write!(w, \"<tr><td id='variant.{name}'><code>{name}</code></td><td>\",\n                           name = variant.name.as_ref().unwrap()));\n-            try!(document(w, variant));\n+            try!(document(w, cx, variant));\n             match variant.inner {\n                 clean::VariantItem(ref var) => {\n                     match var.kind {\n@@ -2123,7 +2146,7 @@ fn item_enum(w: &mut fmt::Formatter, it: &clean::Item,\n                                                   <code>{f}</code></td><td>\",\n                                               v = variant.name.as_ref().unwrap(),\n                                               f = field.name.as_ref().unwrap()));\n-                                try!(document(w, field));\n+                                try!(document(w, cx, field));\n                                 try!(write!(w, \"</td></tr>\"));\n                             }\n                             try!(write!(w, \"</table>\"));\n@@ -2138,7 +2161,7 @@ fn item_enum(w: &mut fmt::Formatter, it: &clean::Item,\n         try!(write!(w, \"</table>\"));\n \n     }\n-    try!(render_assoc_items(w, it.def_id, AssocItemRender::All));\n+    try!(render_assoc_items(w, cx, it.def_id, AssocItemRender::All));\n     Ok(())\n }\n \n@@ -2233,6 +2256,7 @@ enum AssocItemRender<'a> {\n }\n \n fn render_assoc_items(w: &mut fmt::Formatter,\n+                      cx: &Context,\n                       it: ast::DefId,\n                       what: AssocItemRender) -> fmt::Result {\n     let c = cache();\n@@ -2256,7 +2280,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             }\n         };\n         for i in &non_trait {\n-            try!(render_impl(w, i, AssocItemLink::Anchor, render_header));\n+            try!(render_impl(w, cx, i, AssocItemLink::Anchor, render_header));\n         }\n     }\n     if let AssocItemRender::DerefFor { .. } = what {\n@@ -2272,7 +2296,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             }\n         });\n         if let Some(impl_) = deref_impl {\n-            try!(render_deref_methods(w, impl_));\n+            try!(render_deref_methods(w, cx, impl_));\n         }\n         try!(write!(w, \"<h2 id='implementations'>Trait \\\n                           Implementations</h2>\"));\n@@ -2281,22 +2305,22 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         });\n         for i in &manual {\n             let did = i.trait_did().unwrap();\n-            try!(render_impl(w, i, AssocItemLink::GotoSource(did), true));\n+            try!(render_impl(w, cx, i, AssocItemLink::GotoSource(did), true));\n         }\n         if !derived.is_empty() {\n             try!(write!(w, \"<h3 id='derived_implementations'>\\\n                 Derived Implementations \\\n             </h3>\"));\n             for i in &derived {\n                 let did = i.trait_did().unwrap();\n-                try!(render_impl(w, i, AssocItemLink::GotoSource(did), true));\n+                try!(render_impl(w, cx, i, AssocItemLink::GotoSource(did), true));\n             }\n         }\n     }\n     Ok(())\n }\n \n-fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n+fn render_deref_methods(w: &mut fmt::Formatter, cx: &Context, impl_: &Impl) -> fmt::Result {\n     let deref_type = impl_.impl_.trait_.as_ref().unwrap();\n     let target = impl_.impl_.items.iter().filter_map(|item| {\n         match item.inner {\n@@ -2306,12 +2330,12 @@ fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n     }).next().expect(\"Expected associated type binding\");\n     let what = AssocItemRender::DerefFor { trait_: deref_type, type_: target };\n     match *target {\n-        clean::ResolvedPath { did, .. } => render_assoc_items(w, did, what),\n+        clean::ResolvedPath { did, .. } => render_assoc_items(w, cx, did, what),\n         _ => {\n             if let Some(prim) = target.primitive_type() {\n                 if let Some(c) = cache().primitive_locations.get(&prim) {\n                     let did = ast::DefId { krate: *c, node: prim.to_node_id() };\n-                    try!(render_assoc_items(w, did, what));\n+                    try!(render_assoc_items(w, cx, did, what));\n                 }\n             }\n             Ok(())\n@@ -2322,7 +2346,7 @@ fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n // Render_header is false when we are rendering a `Deref` impl and true\n // otherwise. If render_header is false, we will avoid rendering static\n // methods, since they are not accessible for the type implementing `Deref`\n-fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n+fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_header: bool) -> fmt::Result {\n     if render_header {\n         try!(write!(w, \"<h3 class='impl'><code>{}</code></h3>\", i.impl_));\n@@ -2331,7 +2355,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n         }\n     }\n \n-    fn doctraititem(w: &mut fmt::Formatter, item: &clean::Item,\n+    fn doctraititem(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n                     link: AssocItemLink, render_static: bool) -> fmt::Result {\n         match item.inner {\n             clean::MethodItem(..) | clean::TyMethodItem(..) => {\n@@ -2381,7 +2405,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n             if is_static_method(item) && !render_static {\n                 Ok(())\n             } else {\n-                document(w, item)\n+                document(w, cx, item)\n             }\n         } else {\n             Ok(())\n@@ -2398,10 +2422,11 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n \n     try!(write!(w, \"<div class='impl-items'>\"));\n     for trait_item in &i.impl_.items {\n-        try!(doctraititem(w, trait_item, link, render_header));\n+        try!(doctraititem(w, cx, trait_item, link, render_header));\n     }\n \n     fn render_default_items(w: &mut fmt::Formatter,\n+                            cx: &Context,\n                             did: ast::DefId,\n                             t: &clean::Trait,\n                               i: &clean::Impl,\n@@ -2413,7 +2438,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n                 None => {}\n             }\n \n-            try!(doctraititem(w, trait_item, AssocItemLink::GotoSource(did), render_static));\n+            try!(doctraititem(w, cx, trait_item, AssocItemLink::GotoSource(did), render_static));\n         }\n         Ok(())\n     }\n@@ -2424,23 +2449,23 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n     // for them work.\n     if let Some(clean::ResolvedPath { did, .. }) = i.impl_.trait_ {\n         if let Some(t) = cache().traits.get(&did) {\n-            try!(render_default_items(w, did, t, &i.impl_, render_header));\n+            try!(render_default_items(w, cx, did, t, &i.impl_, render_header));\n \n         }\n     }\n     try!(write!(w, \"</div>\"));\n     Ok(())\n }\n \n-fn item_typedef(w: &mut fmt::Formatter, it: &clean::Item,\n+fn item_typedef(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust typedef'>type {}{}{where_clause} = {type_};</pre>\",\n                   it.name.as_ref().unwrap(),\n                   t.generics,\n                   where_clause = WhereClause(&t.generics),\n                   type_ = t.type_));\n \n-    document(w, it)\n+    document(w, cx, it)\n }\n \n impl<'a> fmt::Display for Sidebar<'a> {\n@@ -2511,19 +2536,19 @@ impl<'a> fmt::Display for Source<'a> {\n     }\n }\n \n-fn item_macro(w: &mut fmt::Formatter, it: &clean::Item,\n+fn item_macro(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n               t: &clean::Macro) -> fmt::Result {\n     try!(w.write_str(&highlight::highlight(&t.source,\n                                           Some(\"macro\"),\n                                           None)));\n-    document(w, it)\n+    document(w, cx, it)\n }\n \n-fn item_primitive(w: &mut fmt::Formatter,\n+fn item_primitive(w: &mut fmt::Formatter, cx: &Context,\n                   it: &clean::Item,\n                   _p: &clean::PrimitiveType) -> fmt::Result {\n-    try!(document(w, it));\n-    render_assoc_items(w, it.def_id, AssocItemRender::All)\n+    try!(document(w, cx, it));\n+    render_assoc_items(w, cx, it.def_id, AssocItemRender::All)\n }\n \n fn get_basic_keywords() -> &'static str {"}, {"sha": "c98b7825795b5bd0c138a46165b91a15cd13f2c4", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -355,6 +355,10 @@ nav.sub {\n     margin-left: 20px;\n }\n \n+.content .stability code {\n+\tfont-size: 90%;\n+}\n+\n nav {\n     border-bottom: 1px solid #e0e0e0;\n     padding-bottom: 10px;\n@@ -387,11 +391,11 @@ a {\n     background: transparent;\n }\n \n-.docblock a {\n+.docblock a, .stability a {\n     color: #4e8bca;\n }\n \n-.docblock a:hover {\n+.docblock a:hover, .stability a {\n     text-decoration: underline;\n }\n "}, {"sha": "baca87809a66ba77c883772c290c555ced9736d0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -195,6 +195,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n "}, {"sha": "2d5f97b1f9331ada1fcaf990670425f374498baf", "filename": "src/test/rustdoc/issue-27759.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27759.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+#![staged_api]\n+#![doc(issue_tracker_base_url = \"http://issue_url/\")]\n+\n+// @has issue_27759/unstable/index.html\n+// @has - '<code>test</code>'\n+// @has - '<a href=\"http://issue_url/27759\">#27759</a>'\n+#[unstable(feature=\"test\", issue=\"27759\")]\n+pub mod unstable {\n+    // @has issue_27759/unstable/fn.issue.html\n+    // @has - '<code>test_function</code>'\n+    // @has - '<a href=\"http://issue_url/1234567890\">#1234567890</a>'\n+    #[unstable(feature=\"test_function\", issue=\"1234567890\")]\n+    pub fn issue() {}\n+}"}]}