{"sha": "f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZDRlYmYwMTUwNTg3N2ZmMzZiYTYzZjhhMjZlYThlYTA5NzM5Njk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-19T23:33:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:07Z"}, "message": "Remove unnecessary expansions created by `#[test_case/test/bench]`\n\nThe expansions were created to allow unstable things inside `#[test_case/test/bench]`, but that's not a proper way to do that.\nPut the required `allow_internal_unstable`s into the macros' properties instead.", "tree": {"sha": "fd28c53c8840af05b056f1469e7343455ac7bc66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd28c53c8840af05b056f1469e7343455ac7bc66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "html_url": "https://github.com/rust-lang/rust/commit/f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "url": "https://api.github.com/repos/rust-lang/rust/commits/16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "html_url": "https://github.com/rust-lang/rust/commit/16918a8e28d4e7a476f31ff3d3c1e2d998c086af"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "293a2dd94922fbc88047d803359c252385669d03", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "patch": "@@ -1244,19 +1244,22 @@ mod builtin {\n \n     /// Attribute macro applied to a function to turn it into a unit test.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n     #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro test($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a function to turn it into a benchmark test.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n     #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro bench($item:item) { /* compiler built-in */ }\n \n     /// An implementation detail of the `#[test]` and `#[bench]` macros.\n     #[unstable(feature = \"custom_test_frameworks\", issue = \"50297\",\n                reason = \"custom test frameworks are an unstable feature\")]\n+    #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n     #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro test_case($item:item) { /* compiler built-in */ }"}, {"sha": "da0f8ca6da0908121f7a213caa8f10e5a04795f8", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "patch": "@@ -72,6 +72,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n     let mut register = |name, ext| {\n         resolver.add_builtin(ast::Ident::with_empty_ctxt(name), Lrc::new(ext));\n     };\n+\n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $(\n             register(sym::$name, SyntaxExtension::default(\n@@ -125,24 +126,31 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n         trace_macros: trace_macros::expand_trace_macros,\n     }\n \n+    let allow_internal_unstable = Some([sym::test, sym::rustc_attrs][..].into());\n     register(sym::test_case, SyntaxExtension {\n         stability: Some(Stability::unstable(\n             sym::custom_test_frameworks,\n             Some(Symbol::intern(EXPLAIN_CUSTOM_TEST_FRAMEWORKS)),\n             50297,\n         )),\n+        allow_internal_unstable: allow_internal_unstable.clone(),\n         ..SyntaxExtension::default(\n             SyntaxExtensionKind::LegacyAttr(Box::new(test_case::expand)), edition\n         )\n     });\n-    register(sym::test, SyntaxExtension::default(\n-        SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_test)), edition\n-    ));\n-    register(sym::bench, SyntaxExtension::default(\n-        SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_bench)), edition\n-    ));\n-\n-    // format_args uses `unstable` things internally.\n+    register(sym::test, SyntaxExtension {\n+        allow_internal_unstable: allow_internal_unstable.clone(),\n+        ..SyntaxExtension::default(\n+            SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_test)), edition\n+        )\n+    });\n+    register(sym::bench, SyntaxExtension {\n+        allow_internal_unstable,\n+        ..SyntaxExtension::default(\n+            SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_bench)), edition\n+        )\n+    });\n+\n     let allow_internal_unstable = Some([sym::fmt_internals][..].into());\n     register(sym::format_args, SyntaxExtension {\n         allow_internal_unstable: allow_internal_unstable.clone(),"}, {"sha": "c5c5ef57b3122a67cae7f5c493ee33991a9aa8db", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "patch": "@@ -3,13 +3,12 @@\n \n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ext::hygiene::SyntaxContext;\n use syntax::attr;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n-use syntax::source_map::{ExpnInfo, ExpnKind};\n use std::iter;\n \n pub fn expand_test(\n@@ -60,15 +59,8 @@ pub fn expand_test_or_bench(\n         return vec![Annotatable::Item(item)];\n     }\n \n-    let (sp, attr_sp) = {\n-        let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(ExpnInfo::with_unstable(\n-            ExpnKind::MacroAttribute(sym::test), attr_sp, cx.parse_sess.edition,\n-            &[sym::rustc_attrs, sym::test],\n-        ));\n-        (item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark)),\n-         attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark)))\n-    };\n+    let ctxt = SyntaxContext::empty().apply_mark(cx.current_expansion.mark);\n+    let (sp, attr_sp) = (item.span.with_ctxt(ctxt), attr_sp.with_ctxt(ctxt));\n \n     // Gensym \"test\" so we can extern crate without conflicting with any local names\n     let test_id = cx.ident_of(\"test\").gensym();"}, {"sha": "af2cf42e04bb9a28814bc386d371a642a98bd17b", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d4ebf01505877ff36ba63f8a26ea8ea0973969/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=f1d4ebf01505877ff36ba63f8a26ea8ea0973969", "patch": "@@ -11,12 +11,11 @@\n \n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ext::hygiene::SyntaxContext;\n use syntax::ast;\n use syntax::source_map::respan;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n-use syntax::source_map::{ExpnInfo, ExpnKind};\n \n pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n@@ -26,17 +25,8 @@ pub fn expand(\n ) -> Vec<Annotatable> {\n     if !ecx.ecfg.should_test { return vec![]; }\n \n-    let sp = {\n-        let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(ExpnInfo::with_unstable(\n-            ExpnKind::MacroAttribute(sym::test_case), attr_sp, ecx.parse_sess.edition,\n-            &[sym::test, sym::rustc_attrs],\n-        ));\n-        attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n-    };\n-\n+    let sp = attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(ecx.current_expansion.mark));\n     let mut item = anno_item.expect_item();\n-\n     item = item.map(|mut item| {\n         item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n         item.ident = item.ident.gensym();"}]}