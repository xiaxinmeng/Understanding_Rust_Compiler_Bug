{"sha": "60a900ee10c70ea90927c1192ec6683f26f496de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTkwMGVlMTBjNzBlYTkwOTI3YzExOTJlYzY2ODNmMjZmNDk2ZGU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-05-15T18:08:09Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-05-18T23:41:09Z"}, "message": "remove InPlaceIterable marker from Peekable due to unsoundness\n\nThe unsoundness is not in Peekable per se, it rather is due to the\ninteraction between Peekable being able to hold an extra item\nand vec::IntoIter's clone implementation shortening the allocation.\n\nAn alternative solution would be to change IntoIter's clone implementation\nto keep enough spare capacity available.", "tree": {"sha": "181874762c8c73285900a39bea3d953e43ffbaa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/181874762c8c73285900a39bea3d953e43ffbaa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a900ee10c70ea90927c1192ec6683f26f496de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a900ee10c70ea90927c1192ec6683f26f496de", "html_url": "https://github.com/rust-lang/rust/commit/60a900ee10c70ea90927c1192ec6683f26f496de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a900ee10c70ea90927c1192ec6683f26f496de/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3e6db011c5b482d2bef8ba02274657f93b5e0d", "html_url": "https://github.com/rust-lang/rust/commit/4e3e6db011c5b482d2bef8ba02274657f93b5e0d"}], "stats": {"total": 7, "additions": 1, "deletions": 6}, "files": [{"sha": "c9bdcaa78f3916436b5c05c36e70d341827d00fb", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60a900ee10c70ea90927c1192ec6683f26f496de/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a900ee10c70ea90927c1192ec6683f26f496de/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=60a900ee10c70ea90927c1192ec6683f26f496de", "patch": "@@ -468,7 +468,6 @@ fn bench_in_place_recycle(b: &mut Bencher) {\n                 .enumerate()\n                 .map(|(idx, e)| idx.wrapping_add(e))\n                 .fuse()\n-                .peekable()\n                 .collect::<Vec<usize>>(),\n         );\n     });"}, {"sha": "aa606cd23158aa6c63da2fbcd811c9469de61dbf", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60a900ee10c70ea90927c1192ec6683f26f496de/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a900ee10c70ea90927c1192ec6683f26f496de/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=60a900ee10c70ea90927c1192ec6683f26f496de", "patch": "@@ -1002,7 +1002,6 @@ fn test_from_iter_specialization_with_iterator_adapters() {\n         .zip(std::iter::repeat(1usize))\n         .map(|(a, b)| a + b)\n         .map_while(Option::Some)\n-        .peekable()\n         .skip(1)\n         .map(|e| if e != usize::MAX { Ok(std::num::NonZeroUsize::new(e)) } else { Err(()) });\n     assert_in_place_trait(&iter);"}, {"sha": "69bd2996efe73df9abc8747ad3d0602264d18fa0", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60a900ee10c70ea90927c1192ec6683f26f496de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a900ee10c70ea90927c1192ec6683f26f496de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=60a900ee10c70ea90927c1192ec6683f26f496de", "patch": "@@ -1,4 +1,4 @@\n-use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::iter::{adapters::SourceIter, FusedIterator, TrustedLen};\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator with a `peek()` that returns an optional reference to the next\n@@ -356,6 +356,3 @@ where\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n-\n-#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<I: InPlaceIterable> InPlaceIterable for Peekable<I> {}"}]}