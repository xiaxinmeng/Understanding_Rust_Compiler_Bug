{"sha": "2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZWY0NmIxN2IzZDFlMmRkZDRiOTg1YTZiNTk4NTM3NDZjMDRiODY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-12-31T09:55:20Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-12-31T13:10:49Z"}, "message": "support pattern as const parents in type_of", "tree": {"sha": "9d93f0dc7e8999872f16695905671306c67167f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d93f0dc7e8999872f16695905671306c67167f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "html_url": "https://github.com/rust-lang/rust/commit/2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2267046859c9ceb932abc983561d53a117089f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2267046859c9ceb932abc983561d53a117089f6", "html_url": "https://github.com/rust-lang/rust/commit/e2267046859c9ceb932abc983561d53a117089f6"}], "stats": {"total": 138, "additions": 127, "deletions": 11}, "files": [{"sha": "ad681115812cbf1652775135e6f5e5c90acfb32b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "patch": "@@ -760,9 +760,9 @@ pub struct Pat<'hir> {\n     pub default_binding_modes: bool,\n }\n \n-impl Pat<'_> {\n+impl<'hir> Pat<'hir> {\n     // FIXME(#19596) this is a workaround, but there should be a better way\n-    fn walk_short_(&self, it: &mut impl FnMut(&Pat<'_>) -> bool) -> bool {\n+    fn walk_short_(&self, it: &mut impl FnMut(&Pat<'hir>) -> bool) -> bool {\n         if !it(self) {\n             return false;\n         }\n@@ -785,12 +785,12 @@ impl Pat<'_> {\n     /// Note that when visiting e.g. `Tuple(ps)`,\n     /// if visiting `ps[0]` returns `false`,\n     /// then `ps[1]` will not be visited.\n-    pub fn walk_short(&self, mut it: impl FnMut(&Pat<'_>) -> bool) -> bool {\n+    pub fn walk_short(&self, mut it: impl FnMut(&Pat<'hir>) -> bool) -> bool {\n         self.walk_short_(&mut it)\n     }\n \n     // FIXME(#19596) this is a workaround, but there should be a better way\n-    fn walk_(&self, it: &mut impl FnMut(&Pat<'_>) -> bool) {\n+    fn walk_(&self, it: &mut impl FnMut(&Pat<'hir>) -> bool) {\n         if !it(self) {\n             return;\n         }\n@@ -810,7 +810,7 @@ impl Pat<'_> {\n     /// Walk the pattern in left-to-right order.\n     ///\n     /// If `it(pat)` returns `false`, the children are not visited.\n-    pub fn walk(&self, mut it: impl FnMut(&Pat<'_>) -> bool) {\n+    pub fn walk(&self, mut it: impl FnMut(&Pat<'hir>) -> bool) {\n         self.walk_(&mut it)\n     }\n "}, {"sha": "3c97b55005c4448b4ac8709e8b001ff8b91eeed3", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::Node;\n+use rustc_hir::{HirId, Node};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::util::IntTypeExt;\n@@ -22,7 +22,6 @@ use super::{bad_placeholder_type, is_suggestable_infer_ty};\n /// This should be called using the query `tcx.opt_const_param_of`.\n pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n     use hir::*;\n-\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n     if let Node::AnonConst(_) = tcx.hir().get(hir_id) {\n@@ -62,9 +61,9 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             }\n \n             Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n-            | Node::Expr(&Expr { kind: ExprKind::Struct(..), .. })\n-            | Node::Expr(&Expr { kind: ExprKind::Path(_), .. })\n-            | Node::TraitRef(..) => {\n+            | Node::Expr(&Expr { kind: ExprKind::Path(_) | ExprKind::Struct(..), .. })\n+            | Node::TraitRef(..)\n+            | Node::Pat(_) => {\n                 let path = match parent_node {\n                     Node::Ty(&Ty { kind: TyKind::Path(QPath::Resolved(_, path)), .. })\n                     | Node::TraitRef(&TraitRef { path, .. }) => &*path,\n@@ -79,6 +78,20 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         let _tables = tcx.typeck(body_owner);\n                         &*path\n                     }\n+                    Node::Pat(pat) => {\n+                        if let Some(path) = get_path_containing_arg_in_pat(pat, hir_id) {\n+                            path\n+                        } else {\n+                            tcx.sess.delay_span_bug(\n+                                tcx.def_span(def_id),\n+                                &format!(\n+                                    \"unable to find const parent for {} in pat {:?}\",\n+                                    hir_id, pat\n+                                ),\n+                            );\n+                            return None;\n+                        }\n+                    }\n                     _ => {\n                         tcx.sess.delay_span_bug(\n                             tcx.def_span(def_id),\n@@ -91,7 +104,6 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 // We've encountered an `AnonConst` in some path, so we need to\n                 // figure out which generic parameter it corresponds to and return\n                 // the relevant type.\n-\n                 let (arg_index, segment) = path\n                     .segments\n                     .iter()\n@@ -144,6 +156,34 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n     }\n }\n \n+fn get_path_containing_arg_in_pat<'hir>(\n+    pat: &'hir hir::Pat<'hir>,\n+    arg_id: HirId,\n+) -> Option<&'hir hir::Path<'hir>> {\n+    use hir::*;\n+\n+    let is_arg_in_path = |p: &hir::Path<'_>| {\n+        p.segments\n+            .iter()\n+            .filter_map(|seg| seg.args)\n+            .flat_map(|args| args.args)\n+            .any(|arg| arg.id() == arg_id)\n+    };\n+    let mut arg_path = None;\n+    pat.walk(|pat| match pat.kind {\n+        PatKind::Struct(QPath::Resolved(_, path), _, _)\n+        | PatKind::TupleStruct(QPath::Resolved(_, path), _, _)\n+        | PatKind::Path(QPath::Resolved(_, path))\n+            if is_arg_in_path(path) =>\n+        {\n+            arg_path = Some(path);\n+            false\n+        }\n+        _ => true,\n+    });\n+    arg_path\n+}\n+\n pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     let def_id = def_id.expect_local();\n     use rustc_hir::*;"}, {"sha": "82555084e418f13c3112f2781b012a36ceafb8ec", "filename": "src/test/ui/const-generics/arg-in-pat-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-1.rs?ref=2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+enum ConstGenericEnum<const N: usize> {\n+    Foo([i32; N]),\n+    Bar,\n+}\n+\n+fn foo<const N: usize>(val: &ConstGenericEnum<N>) {\n+    if let ConstGenericEnum::<N>::Foo(field, ..) = val {}\n+}\n+\n+fn bar<const N: usize>(val: &ConstGenericEnum<N>) {\n+    match val {\n+        ConstGenericEnum::<N>::Foo(field, ..) => (),\n+        ConstGenericEnum::<N>::Bar => (),\n+    }\n+}\n+\n+fn main() {\n+    match ConstGenericEnum::Bar {\n+        ConstGenericEnum::<3>::Foo(field, ..) => (),\n+        ConstGenericEnum::<3>::Bar => (),\n+    }\n+}"}, {"sha": "dc9e722eda84c94783843c551be481897ba71138", "filename": "src/test/ui/const-generics/arg-in-pat-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-2.rs?ref=2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+enum Generic<const N: usize> {\n+    Variant,\n+}\n+\n+fn main() {\n+    match todo!() {\n+        Generic::<0usize>::Variant => todo!()\n+    }\n+}"}, {"sha": "24626a3b68ae56b5c99450123ca9d6f89611e958", "filename": "src/test/ui/const-generics/arg-in-pat-3.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aef46b17b3d1e2ddd4b985a6b59853746c04b86/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farg-in-pat-3.rs?ref=2aef46b17b3d1e2ddd4b985a6b59853746c04b86", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+struct Foo<const N: usize>;\n+\n+fn bindingp() {\n+    match Foo {\n+        mut x @ Foo::<3> => {\n+            let ref mut _x @ Foo::<3> = x;\n+        }\n+    }\n+}\n+\n+struct Bar<const N: usize> {\n+    field: Foo<N>,\n+}\n+\n+fn structp() {\n+    match todo!() {\n+        Bar::<3> {\n+            field: Foo::<3>,\n+        } => (),\n+    }\n+}\n+\n+struct Baz<const N: usize>(Foo<N>);\n+\n+fn tuplestructp() {\n+    match Baz(Foo) {\n+        Baz::<3>(Foo::<3>) => (),\n+    }\n+}\n+\n+impl<const N: usize> Baz<N> {\n+    const ASSOC: usize = 3;\n+}\n+\n+fn pathp() {\n+    match 3 {\n+        Baz::<3>::ASSOC => (),\n+        _ => (),\n+    }\n+}\n+\n+fn main() {}"}]}