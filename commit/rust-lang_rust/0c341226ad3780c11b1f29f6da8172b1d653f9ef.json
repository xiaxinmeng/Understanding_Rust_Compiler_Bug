{"sha": "0c341226ad3780c11b1f29f6da8172b1d653f9ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzQxMjI2YWQzNzgwYzExYjFmMjlmNmRhODE3MmIxZDY1M2Y5ZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T05:46:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T05:46:08Z"}, "message": "Auto merge of #83084 - nagisa:nagisa/features-native, r=petrochenkov\n\nAdjust `-Ctarget-cpu=native` handling in cg_llvm\n\nWhen cg_llvm encounters the `-Ctarget-cpu=native` it computes an\nexplciit set of features that applies to the target in order to\ncorrectly compile code for the host CPU (because e.g. `skylake` alone is\nnot sufficient to tell if some of the instructions are available or\nnot).\n\nHowever there were a couple of issues with how we did this. Firstly, the\norder in which features were overriden wasn't quite right \u2013 conceptually\nyou'd expect `-Ctarget-cpu=native` option to override the features that\nare implicitly set by the target definition. However due to how other\n`-Ctarget-cpu` values are handled we must adopt the following order\nof priority:\n\n* Features from -Ctarget-cpu=*; are overriden by\n* Features implied by --target; are overriden by\n* Features from -Ctarget-feature; are overriden by\n* function specific features.\n\nAnother problem was in that the function level `target-features`\nattribute would overwrite the entire set of the globally enabled\nfeatures, rather than just the features the\n`#[target_feature(enable/disable)]` specified. With something like\n`-Ctarget-cpu=native` we'd end up in a situation wherein a function\nwithout `#[target_feature(enable)]` annotation would have a broader\nset of features compared to a function with one such attribute. This\nturned out to be a cause of heavy run-time regressions in some code\nusing these function-level attributes in conjunction with\n`-Ctarget-cpu=native`, for example.\n\nWith this PR rustc is more careful about specifying the entire set of\nfeatures for functions that use `#[target_feature(enable/disable)]` or\n`#[instruction_set]` attributes.\n\nSadly testing the original reproducer for this behaviour is quite\nimpossible \u2013 we cannot rely on `-Ctarget-cpu=native` to be anything in\nparticular on developer or CI machines.\n\ncc https://github.com/rust-lang/rust/issues/83027 `@BurntSushi`", "tree": {"sha": "162d827decc1efff2f30628bed859f092890ef44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162d827decc1efff2f30628bed859f092890ef44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c341226ad3780c11b1f29f6da8172b1d653f9ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c341226ad3780c11b1f29f6da8172b1d653f9ef", "html_url": "https://github.com/rust-lang/rust/commit/0c341226ad3780c11b1f29f6da8172b1d653f9ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c341226ad3780c11b1f29f6da8172b1d653f9ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e655fb62216b6ba64a094b30f116d7988d19322d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e655fb62216b6ba64a094b30f116d7988d19322d", "html_url": "https://github.com/rust-lang/rust/commit/e655fb62216b6ba64a094b30f116d7988d19322d"}, {"sha": "72fb4379d56b93b9bd0149649a74fb4b5465ec18", "url": "https://api.github.com/repos/rust-lang/rust/commits/72fb4379d56b93b9bd0149649a74fb4b5465ec18", "html_url": "https://github.com/rust-lang/rust/commit/72fb4379d56b93b9bd0149649a74fb4b5465ec18"}], "stats": {"total": 207, "additions": 155, "deletions": 52}, "files": [{"sha": "64ebe585dd837f0124fd7d63dab7aede4e07d996", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0c341226ad3780c11b1f29f6da8172b1d653f9ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c341226ad3780c11b1f29f6da8172b1d653f9ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=0c341226ad3780c11b1f29f6da8172b1d653f9ef", "patch": "@@ -152,18 +152,6 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     }\n }\n \n-pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n-    const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n-\n-    let cmdline = sess\n-        .opts\n-        .cg\n-        .target_feature\n-        .split(',')\n-        .filter(|f| !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)));\n-    sess.target.features.split(',').chain(cmdline).filter(|l| !l.is_empty())\n-}\n-\n pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     let target_cpu = SmallCStr::new(llvm_util::target_cpu(cx.tcx.sess));\n     llvm::AddFunctionAttrStringValue(\n@@ -301,20 +289,22 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     // The target doesn't care; the subtarget reads our attribute.\n     apply_tune_cpu_attr(cx, llfn);\n \n-    let features = llvm_target_features(cx.tcx.sess)\n-        .map(|s| s.to_string())\n-        .chain(codegen_fn_attrs.target_features.iter().map(|f| {\n+    let function_features = codegen_fn_attrs\n+        .target_features\n+        .iter()\n+        .map(|f| {\n             let feature = &f.as_str();\n             format!(\"+{}\", llvm_util::to_llvm_feature(cx.tcx.sess, feature))\n-        }))\n+        })\n         .chain(codegen_fn_attrs.instruction_set.iter().map(|x| match x {\n             InstructionSetAttr::ArmA32 => \"-thumb-mode\".to_string(),\n             InstructionSetAttr::ArmT32 => \"+thumb-mode\".to_string(),\n         }))\n-        .collect::<Vec<String>>()\n-        .join(\",\");\n-\n-    if !features.is_empty() {\n+        .collect::<Vec<String>>();\n+    if !function_features.is_empty() {\n+        let mut global_features = llvm_util::llvm_global_features(cx.tcx.sess);\n+        global_features.extend(function_features.into_iter());\n+        let features = global_features.join(\",\");\n         let val = CString::new(features).unwrap();\n         llvm::AddFunctionAttrStringValue(\n             llfn,"}, {"sha": "388dd7ce81b143f1d240e01899ed33aabaf3f883", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c341226ad3780c11b1f29f6da8172b1d653f9ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c341226ad3780c11b1f29f6da8172b1d653f9ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=0c341226ad3780c11b1f29f6da8172b1d653f9ef", "patch": "@@ -1,4 +1,3 @@\n-use crate::attributes;\n use crate::back::lto::ThinBuffer;\n use crate::back::profiling::{\n     selfprofile_after_pass_callback, selfprofile_before_pass_callback, LlvmSelfProfiler,\n@@ -166,8 +165,6 @@ pub fn target_machine_factory(\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n-    let mut features = llvm_util::handle_native_features(sess);\n-    features.extend(attributes::llvm_target_features(sess).map(|s| s.to_owned()));\n     let mut singlethread = sess.target.singlethread;\n \n     // On the wasm target once the `atomics` feature is enabled that means that\n@@ -182,7 +179,7 @@ pub fn target_machine_factory(\n \n     let triple = SmallCStr::new(&sess.target.llvm_target);\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n-    let features = features.join(\",\");\n+    let features = llvm_util::llvm_global_features(sess).join(\",\");\n     let features = CString::new(features).unwrap();\n     let abi = SmallCStr::new(&sess.target.llvm_abiname);\n     let trap_unreachable ="}, {"sha": "c7dff41955eccebee6effbc62ad825666444fd79", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0c341226ad3780c11b1f29f6da8172b1d653f9ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c341226ad3780c11b1f29f6da8172b1d653f9ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=0c341226ad3780c11b1f29f6da8172b1d653f9ef", "patch": "@@ -218,13 +218,39 @@ pub fn target_cpu(sess: &Session) -> &str {\n     handle_native(name)\n }\n \n-pub fn handle_native_features(sess: &Session) -> Vec<String> {\n+/// The list of LLVM features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,\n+/// `--target` and similar).\n+// FIXME(nagisa): Cache the output of this somehow? Maybe make this a query? We're calling this\n+// for every function that has `#[target_feature]` on it. The global features won't change between\n+// the functions; only crates, maybe\u2026\n+pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n+    // FIXME(nagisa): this should definitely be available more centrally and to other codegen backends.\n+    /// These features control behaviour of rustc rather than llvm.\n+    const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n+\n+    // Features that come earlier are overriden by conflicting features later in the string.\n+    // Typically we'll want more explicit settings to override the implicit ones, so:\n+    //\n+    // * Features from -Ctarget-cpu=*; are overriden by [^1]\n+    // * Features implied by --target; are overriden by\n+    // * Features from -Ctarget-feature; are overriden by\n+    // * function specific features.\n+    //\n+    // [^1]: target-cpu=native is handled here, other target-cpu values are handled implicitly\n+    // through LLVM TargetMachine implementation.\n+    //\n+    // FIXME(nagisa): it isn't clear what's the best interaction between features implied by\n+    // `-Ctarget-cpu` and `--target` are. On one hand, you'd expect CLI arguments to always\n+    // override anything that's implicit, so e.g. when there's no `--target` flag, features implied\n+    // the host target are overriden by `-Ctarget-cpu=*`. On the other hand, what about when both\n+    // `--target` and `-Ctarget-cpu=*` are specified? Both then imply some target features and both\n+    // flags are specified by the user on the CLI. It isn't as clear-cut which order of precedence\n+    // should be taken in cases like these.\n+    let mut features = vec![];\n+\n+    // -Ctarget-cpu=native\n     match sess.opts.cg.target_cpu {\n-        Some(ref s) => {\n-            if s != \"native\" {\n-                return vec![];\n-            }\n-\n+        Some(ref s) if s == \"native\" => {\n             let features_string = unsafe {\n                 let ptr = llvm::LLVMGetHostCPUFeatures();\n                 let features_string = if !ptr.is_null() {\n@@ -242,11 +268,31 @@ pub fn handle_native_features(sess: &Session) -> Vec<String> {\n \n                 features_string\n             };\n-\n-            features_string.split(\",\").map(|s| s.to_owned()).collect()\n+            features.extend(features_string.split(\",\").map(String::from));\n         }\n-        None => vec![],\n-    }\n+        Some(_) | None => {}\n+    };\n+\n+    // Features implied by an implicit or explicit `--target`.\n+    features.extend(\n+        sess.target\n+            .features\n+            .split(',')\n+            .filter(|f| !f.is_empty() && !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)))\n+            .map(String::from),\n+    );\n+\n+    // -Ctarget-features\n+    features.extend(\n+        sess.opts\n+            .cg\n+            .target_feature\n+            .split(',')\n+            .filter(|f| !f.is_empty() && !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)))\n+            .map(String::from),\n+    );\n+\n+    features\n }\n \n pub fn tune_cpu(sess: &Session) -> Option<&str> {"}, {"sha": "4c2073678b842a084e6f10fdf444d775d331fc01", "filename": "src/test/assembly/target-feature-multiple.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0c341226ad3780c11b1f29f6da8172b1d653f9ef/src%2Ftest%2Fassembly%2Ftarget-feature-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c341226ad3780c11b1f29f6da8172b1d653f9ef/src%2Ftest%2Fassembly%2Ftarget-feature-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Ftarget-feature-multiple.rs?ref=0c341226ad3780c11b1f29f6da8172b1d653f9ef", "patch": "@@ -0,0 +1,41 @@\n+// assembly-output: emit-asm\n+// needs-llvm-components: x86\n+// revisions: TWOFLAGS SINGLEFLAG\n+// compile-flags: --target=x86_64-unknown-linux-gnu\n+// [TWOFLAGS] compile-flags: -C target-feature=+rdrnd -C target-feature=+rdseed\n+// [SINGLEFLAG] compile-flags: -C target-feature=+rdrnd,+rdseed\n+\n+// Target features set via flags aren't necessarily reflected in the IR, so the only way to test\n+// them is to build code that requires the features to be enabled to work.\n+//\n+// In this particular test if `rdrnd,rdseed` somehow didn't make it to LLVM, the instruction\n+// selection should crash.\n+//\n+// > LLVM ERROR: Cannot select: 0x7f00f400c010: i32,i32,ch = X86ISD::RDSEED 0x7f00f400bfa8:2\n+// > In function: foo\n+//\n+// See also src/test/codegen/target-feature-overrides.rs\n+#![feature(no_core, lang_items, link_llvm_intrinsics, abi_unadjusted)]\n+#![crate_type = \"lib\"]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+// Use of these requires target features to be enabled\n+extern \"unadjusted\" {\n+    #[link_name = \"llvm.x86.rdrand.32\"]\n+    fn x86_rdrand32_step() -> (u32, i32);\n+    #[link_name = \"llvm.x86.rdseed.32\"]\n+    fn x86_rdseed32_step() -> (u32, i32);\n+}\n+\n+#[no_mangle]\n+pub unsafe fn foo() -> (u32, u32) {\n+    // CHECK-LABEL: foo:\n+    // CHECK: rdrand\n+    // CHECK: rdseed\n+    (x86_rdrand32_step().0, x86_rdseed32_step().0)\n+}"}, {"sha": "f71a9c3c58216b119738d90c6977dc7bea28a158", "filename": "src/test/codegen/target-feature-multiple.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e655fb62216b6ba64a094b30f116d7988d19322d/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e655fb62216b6ba64a094b30f116d7988d19322d/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs?ref=e655fb62216b6ba64a094b30f116d7988d19322d", "patch": "@@ -1,9 +0,0 @@\n-// only-x86_64\n-// compile-flags: -C target-feature=+sse2,-avx,+avx2 -C target-feature=+avx,-avx2\n-\n-#![crate_type = \"lib\"]\n-\n-#[no_mangle]\n-pub fn foo() {\n-    // CHECK: attributes #0 = { {{.*}}\"target-features\"=\"+sse2,-avx,+avx2,+avx,-avx2\"{{.*}} }\n-}"}, {"sha": "d4d39d08b1eaa3de33e1b8308002826885ab7512", "filename": "src/test/codegen/target-feature-on-functions.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e655fb62216b6ba64a094b30f116d7988d19322d/src%2Ftest%2Fcodegen%2Ftarget-feature-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e655fb62216b6ba64a094b30f116d7988d19322d/src%2Ftest%2Fcodegen%2Ftarget-feature-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-on-functions.rs?ref=e655fb62216b6ba64a094b30f116d7988d19322d", "patch": "@@ -1,9 +0,0 @@\n-// only-x86_64\n-// compile-flags: -C target-feature=+avx\n-\n-#![crate_type = \"lib\"]\n-\n-#[no_mangle]\n-pub fn foo() {\n-    // CHECK: attributes #0 = { {{.*}}\"target-features\"=\"+avx\"{{.*}} }\n-}"}, {"sha": "2c19cfd8c220127f54212fd66d6a73534fffbb77", "filename": "src/test/codegen/target-feature-overrides.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0c341226ad3780c11b1f29f6da8172b1d653f9ef/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c341226ad3780c11b1f29f6da8172b1d653f9ef/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs?ref=0c341226ad3780c11b1f29f6da8172b1d653f9ef", "patch": "@@ -0,0 +1,47 @@\n+// revisions: COMPAT INCOMPAT\n+// needs-llvm-components: x86\n+// compile-flags: --target=x86_64-unknown-linux-gnu -Copt-level=3\n+// [COMPAT] compile-flags: -Ctarget-feature=+avx2,+avx\n+// [INCOMPAT] compile-flags: -Ctarget-feature=-avx2,-avx\n+\n+// See also src/test/assembly/target-feature-multiple.rs\n+#![feature(no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_core]\n+\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+extern \"C\" {\n+    fn peach() -> u32;\n+}\n+\n+#[inline]\n+#[target_feature(enable = \"avx\")]\n+#[no_mangle]\n+pub unsafe fn apple() -> u32 {\n+// CHECK-LABEL: @apple()\n+// CHECK-SAME: [[APPLEATTRS:#[0-9]+]] {\n+// CHECK: {{.*}}call{{.*}}@peach\n+    peach()\n+}\n+\n+// target features same as global (not reflected or overriden in IR)\n+#[no_mangle]\n+pub unsafe fn banana() -> u32 {\n+// CHECK-LABEL: @banana()\n+// CHECK-SAME: [[BANANAATTRS:#[0-9]+]] {\n+// COMPAT: {{.*}}call{{.*}}@peach\n+// INCOMPAT: {{.*}}call{{.*}}@apple\n+    apple() // Compatible for inline in COMPAT revision and can't be inlined in INCOMPAT\n+}\n+\n+// CHECK: attributes [[APPLEATTRS]]\n+// COMPAT-SAME: \"target-features\"=\"+avx2,+avx,+avx\"\n+// INCOMPAT-SAME: \"target-features\"=\"-avx2,-avx,+avx\"\n+// CHECK: attributes [[BANANAATTRS]]\n+// CHECK-NOT: target-features\n+// CHECK-SAME: }"}]}