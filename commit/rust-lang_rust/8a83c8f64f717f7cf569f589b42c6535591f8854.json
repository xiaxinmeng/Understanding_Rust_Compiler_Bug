{"sha": "8a83c8f64f717f7cf569f589b42c6535591f8854", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhODNjOGY2NGY3MTdmN2NmNTY5ZjU4OWI0MmM2NTM1NTkxZjg4NTQ=", "commit": {"author": {"name": "Reese Williams", "email": "reese@reesew.io", "date": "2021-01-21T02:49:11Z"}, "committer": {"name": "Reese Williams", "email": "reese@reesew.io", "date": "2021-01-21T04:06:19Z"}, "message": "Improve suggestion for tuple struct pattern matching errors.\n\nCurrently, when a user uses a struct pattern to pattern match on\na tuple struct, the errors we emit generally suggest adding fields\nusing their field names, which are numbers. However, numbers are\nnot valid identifiers, so the suggestions, which use the shorthand\nnotation, are not valid syntax. This commit changes those errors\nto suggest using the actual tuple struct pattern syntax instead,\nwhich is a more actionable suggestion.", "tree": {"sha": "37017ad48316cd09df1fca14669b834e755cf552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37017ad48316cd09df1fca14669b834e755cf552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a83c8f64f717f7cf569f589b42c6535591f8854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a83c8f64f717f7cf569f589b42c6535591f8854", "html_url": "https://github.com/rust-lang/rust/commit/8a83c8f64f717f7cf569f589b42c6535591f8854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a83c8f64f717f7cf569f589b42c6535591f8854/comments", "author": {"login": "reese", "id": 26661872, "node_id": "MDQ6VXNlcjI2NjYxODcy", "avatar_url": "https://avatars.githubusercontent.com/u/26661872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reese", "html_url": "https://github.com/reese", "followers_url": "https://api.github.com/users/reese/followers", "following_url": "https://api.github.com/users/reese/following{/other_user}", "gists_url": "https://api.github.com/users/reese/gists{/gist_id}", "starred_url": "https://api.github.com/users/reese/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reese/subscriptions", "organizations_url": "https://api.github.com/users/reese/orgs", "repos_url": "https://api.github.com/users/reese/repos", "events_url": "https://api.github.com/users/reese/events{/privacy}", "received_events_url": "https://api.github.com/users/reese/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reese", "id": 26661872, "node_id": "MDQ6VXNlcjI2NjYxODcy", "avatar_url": "https://avatars.githubusercontent.com/u/26661872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reese", "html_url": "https://github.com/reese", "followers_url": "https://api.github.com/users/reese/followers", "following_url": "https://api.github.com/users/reese/following{/other_user}", "gists_url": "https://api.github.com/users/reese/gists{/gist_id}", "starred_url": "https://api.github.com/users/reese/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reese/subscriptions", "organizations_url": "https://api.github.com/users/reese/orgs", "repos_url": "https://api.github.com/users/reese/repos", "events_url": "https://api.github.com/users/reese/events{/privacy}", "received_events_url": "https://api.github.com/users/reese/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058a71016553f267ae80b90276ef79956457d51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/058a71016553f267ae80b90276ef79956457d51a", "html_url": "https://github.com/rust-lang/rust/commit/058a71016553f267ae80b90276ef79956457d51a"}], "stats": {"total": 132, "additions": 118, "deletions": 14}, "files": [{"sha": "d8be90cd8452f79377f4c7ed40d4e66dc157e5d7", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a83c8f64f717f7cf569f589b42c6535591f8854/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a83c8f64f717f7cf569f589b42c6535591f8854/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=8a83c8f64f717f7cf569f589b42c6535591f8854", "patch": "@@ -932,7 +932,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             Ok(Ident::new(symbol, self.prev_token.span))\n         } else {\n-            self.parse_ident_common(false)\n+            self.parse_ident_common(true)\n         }\n     }\n "}, {"sha": "15b67ca9fafb7593c80077a3bc22da4ef455e67e", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a83c8f64f717f7cf569f589b42c6535591f8854/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a83c8f64f717f7cf569f589b42c6535591f8854/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=8a83c8f64f717f7cf569f589b42c6535591f8854", "patch": "@@ -999,7 +999,7 @@ impl<'a> Parser<'a> {\n             let boxed_span = self.token.span;\n             let is_ref = self.eat_keyword(kw::Ref);\n             let is_mut = self.eat_keyword(kw::Mut);\n-            let fieldname = self.parse_ident()?;\n+            let fieldname = self.parse_field_name()?;\n             hi = self.prev_token.span;\n \n             let bind_type = match (is_ref, is_mut) {"}, {"sha": "f16f8c9caf2dd1a0c0a1a8272223e2b599a2b125", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 86, "deletions": 12, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8a83c8f64f717f7cf569f589b42c6535591f8854/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a83c8f64f717f7cf569f589b42c6535591f8854/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=8a83c8f64f717f7cf569f589b42c6535591f8854", "patch": "@@ -16,6 +16,7 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n+use ty::VariantDef;\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -1209,14 +1210,68 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     u.emit();\n                 }\n             }\n-            (None, Some(mut err)) | (Some(mut err), None) => {\n+            (None, Some(mut u)) => {\n+                if let Some(mut e) = self.error_tuple_variant_as_struct_pat(pat, fields, variant) {\n+                    u.delay_as_bug();\n+                    e.emit();\n+                } else {\n+                    u.emit();\n+                }\n+            }\n+            (Some(mut err), None) => {\n                 err.emit();\n             }\n-            (None, None) => {}\n+            (None, None) => {\n+                if let Some(mut err) =\n+                    self.error_tuple_variant_index_shorthand(variant, pat, fields)\n+                {\n+                    err.emit();\n+                }\n+            }\n         }\n         no_field_errors\n     }\n \n+    fn error_tuple_variant_index_shorthand(\n+        &self,\n+        variant: &VariantDef,\n+        pat: &'_ Pat<'_>,\n+        fields: &[hir::FieldPat<'_>],\n+    ) -> Option<DiagnosticBuilder<'_>> {\n+        // if this is a tuple struct, then all field names will be numbers\n+        // so if any fields in a struct pattern use shorthand syntax, they will\n+        // be invalid identifiers (for example, Foo { 0, 1 }).\n+        if let (CtorKind::Fn, PatKind::Struct(qpath, field_patterns, ..)) =\n+            (variant.ctor_kind, &pat.kind)\n+        {\n+            let has_shorthand_field_name = field_patterns.iter().any(|field| field.is_shorthand);\n+            if has_shorthand_field_name {\n+                let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                    s.print_qpath(qpath, false)\n+                });\n+                let mut err = struct_span_err!(\n+                    self.tcx.sess,\n+                    pat.span,\n+                    E0769,\n+                    \"tuple variant `{}` uses a bare index in a struct pattern\",\n+                    path\n+                );\n+                err.span_suggestion(\n+                    pat.span,\n+                    \"use the tuple variant pattern syntax instead\",\n+                    format!(\n+                        \"{}({})\",\n+                        path,\n+                        self.get_suggested_tuple_struct_pattern(fields, variant)\n+                    ),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                return Some(err);\n+            }\n+        }\n+        None\n+    }\n+\n     fn error_foreign_non_exhaustive_spat(&self, pat: &Pat<'_>, descr: &str, no_fields: bool) {\n         let sess = self.tcx.sess;\n         let sm = sess.source_map();\n@@ -1356,16 +1411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             let (sugg, appl) = if fields.len() == variant.fields.len() {\n                 (\n-                    fields\n-                        .iter()\n-                        .map(|f| match self.tcx.sess.source_map().span_to_snippet(f.pat.span) {\n-                            Ok(f) => f,\n-                            Err(_) => rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n-                                s.print_pat(f.pat)\n-                            }),\n-                        })\n-                        .collect::<Vec<String>>()\n-                        .join(\", \"),\n+                    self.get_suggested_tuple_struct_pattern(fields, variant),\n                     Applicability::MachineApplicable,\n                 )\n             } else {\n@@ -1385,6 +1431,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    fn get_suggested_tuple_struct_pattern(\n+        &self,\n+        fields: &[hir::FieldPat<'_>],\n+        variant: &VariantDef,\n+    ) -> String {\n+        let variant_field_idents = variant.fields.iter().map(|f| f.ident).collect::<Vec<Ident>>();\n+        fields\n+            .iter()\n+            .map(|field| {\n+                match self.tcx.sess.source_map().span_to_snippet(field.pat.span) {\n+                    Ok(f) => {\n+                        // Field names are numbers, but numbers\n+                        // are not valid identifiers\n+                        if variant_field_idents.contains(&field.ident) {\n+                            String::from(\"_\")\n+                        } else {\n+                            f\n+                        }\n+                    }\n+                    Err(_) => rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                        s.print_pat(field.pat)\n+                    }),\n+                }\n+            })\n+            .collect::<Vec<String>>()\n+            .join(\", \")\n+    }\n+\n     /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n     /// inaccessible fields.\n     ///"}, {"sha": "0ebbff75e59ff404f91e366becf1b4b76306cfed", "filename": "src/test/ui/structs/struct-tuple-field-names.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a83c8f64f717f7cf569f589b42c6535591f8854/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a83c8f64f717f7cf569f589b42c6535591f8854/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs?ref=8a83c8f64f717f7cf569f589b42c6535591f8854", "patch": "@@ -0,0 +1,15 @@\n+struct S(i32, f32);\n+enum E {\n+    S(i32, f32),\n+}\n+fn main() {\n+    let x = E::S(1, 2.2);\n+    match x {\n+        E::S { 0, 1 } => {}\n+        //~^ ERROR tuple variant `E::S` uses a bare index in a struct pattern [E0769]\n+    }\n+    let y = S(1, 2.2);\n+    match y {\n+        S { } => {} //~ ERROR: tuple variant `S` written as struct variant [E0769]\n+    }\n+}"}, {"sha": "2021aa9d70e39bef6814b5aa4d2c16d1c681b156", "filename": "src/test/ui/structs/struct-tuple-field-names.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a83c8f64f717f7cf569f589b42c6535591f8854/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a83c8f64f717f7cf569f589b42c6535591f8854/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr?ref=8a83c8f64f717f7cf569f589b42c6535591f8854", "patch": "@@ -0,0 +1,15 @@\n+error[E0769]: tuple variant `E::S` uses a bare index in a struct pattern\n+  --> $DIR/struct-tuple-field-names.rs:8:9\n+   |\n+LL |         E::S { 0, 1 } => {}\n+   |         ^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `E::S(_, _)`\n+\n+error[E0769]: tuple variant `S` written as struct variant\n+  --> $DIR/struct-tuple-field-names.rs:13:9\n+   |\n+LL |         S { } => {}\n+   |         ^^^^^ help: use the tuple variant pattern syntax instead: `S(_, _)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0769`."}]}