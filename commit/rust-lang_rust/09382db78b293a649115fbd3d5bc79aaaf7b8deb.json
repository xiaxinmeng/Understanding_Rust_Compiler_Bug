{"sha": "09382db78b293a649115fbd3d5bc79aaaf7b8deb", "node_id": "C_kwDOAAsO6NoAKDA5MzgyZGI3OGIyOTNhNjQ5MTE1ZmJkM2Q1YmM3OWFhYWY3YjhkZWI", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-07T05:36:32Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-07T05:36:32Z"}, "message": "minor fixes for `error_codes.rs` tidy check", "tree": {"sha": "a848fdebca6f8b46f8f6a5de141b34c4f97195be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a848fdebca6f8b46f8f6a5de141b34c4f97195be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09382db78b293a649115fbd3d5bc79aaaf7b8deb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzFiEEYSWD6p+RIeSP1N2eF81cKtrg00QFAmO5BREVHGV6cmFzdXJl\nQG91dGxvb2suY29tAAoJEBfNXCra4NNEyH8QAIks/1o5i6AW5SpRPqmsBA6UQKXy\n9XGM2odzW/NhY4eTsik2wA/8oAgfm2Ctw+MTvmAjwL4JrU0OcHAonHahQqmAJNLe\n+dTxW2W/wIjVR/v8FMrwIKcGTbES/7M3wTjT5Gn8Rk1kzzBZrS00xqwwzelx75F9\nJFS1LbZShfukixFRj7sMT6ArWgqd7T1ACftzNn+N3GoEA/usERHBVSsVvxSuEvWv\nBNGykBYlYzQ71js5t5dYdlCj9aM5iwhW84UF0xVz2sRG0ZLOaGPdfOr+kj+H711Q\ndD+RQ4t6shVMSke0h/ApnWw7meDMjNegjb2Haq6XAyC6D7UAW06Zc3oh2J2rjXkf\nm5Nmxwg8SW5XZf15fxNDgOqiwBp05bd0uZq2W/ixlhbEMhCRC+6+TpG6VI93O7dG\nhMOg0o7PdNMpDOOKn+P/6PJM4NtwJAlu94h6ocTSjaUckJtFJEd2uhfXskFa1h5H\nCiQKn1pihQ9k16UChux5aGugqTnHB7WbSeFM/tvDmGphtLfUIr0yOqR59d7wJu+t\nkNDX8S9LA4gLKdEydWaJIEwSTf7lqgngZ6wSyg6iwDCryaeYjyngEYdlOMZUDyVg\nhMTitGvZWCMo8AhUVjYNZc+2pG+AhMPuT3vGFWGqZf8qupgy8BSaZYXSUgQ5ku19\nFwmFAGyTWqba5ZML\n=/FME\n-----END PGP SIGNATURE-----", "payload": "tree a848fdebca6f8b46f8f6a5de141b34c4f97195be\nparent 84f22e44c588be9c9058d6d6ed02a21aa32ad843\nauthor Ezra Shaw <ezrasure@outlook.com> 1673069792 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1673069792 +1300\n\nminor fixes for `error_codes.rs` tidy check\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09382db78b293a649115fbd3d5bc79aaaf7b8deb", "html_url": "https://github.com/rust-lang/rust/commit/09382db78b293a649115fbd3d5bc79aaaf7b8deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09382db78b293a649115fbd3d5bc79aaaf7b8deb/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f22e44c588be9c9058d6d6ed02a21aa32ad843", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f22e44c588be9c9058d6d6ed02a21aa32ad843", "html_url": "https://github.com/rust-lang/rust/commit/84f22e44c588be9c9058d6d6ed02a21aa32ad843"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "4b0a62fac839efcacb02296c63aa4260482a2cd1", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/09382db78b293a649115fbd3d5bc79aaaf7b8deb/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09382db78b293a649115fbd3d5bc79aaaf7b8deb/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=09382db78b293a649115fbd3d5bc79aaaf7b8deb", "patch": "@@ -15,8 +15,6 @@\n //!\n //! 4. We check that the error code is actually emitted by the compiler.\n //!   - This is done by searching `compiler/` with a regex.\n-//!\n-//! This tidy check was merged and refactored from two others. See #PR_NUM for information about linting changes that occurred during this refactor.\n \n use std::{ffi::OsStr, fs, path::Path};\n \n@@ -57,7 +55,7 @@ pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut\n     let no_longer_emitted = check_error_codes_docs(root_path, &error_codes, &mut errors, verbose);\n \n     // Stage 3: check list has UI tests\n-    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose);\n+    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose, &no_longer_emitted);\n \n     // Stage 4: check list is emitted by compiler\n     check_error_codes_used(search_paths, &error_codes, &mut errors, &no_longer_emitted, verbose);\n@@ -174,22 +172,21 @@ fn check_error_codes_docs(\n             return;\n         }\n \n-        let (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning) =\n+        let (found_code_example, found_proper_doctest, emit_ignore_warning, no_longer_emitted) =\n             check_explanation_has_doctest(&contents, &err_code);\n+\n         if emit_ignore_warning {\n             verbose_print!(\n                 verbose,\n                 \"warning: Error code `{err_code}` uses the ignore header. This should not be used, add the error code to the \\\n                 `IGNORE_DOCTEST_CHECK` constant instead.\"\n             );\n         }\n-        if emit_no_longer_warning {\n+\n+        if no_longer_emitted {\n             no_longer_emitted_codes.push(err_code.to_owned());\n-            verbose_print!(\n-                verbose,\n-                \"warning: Error code `{err_code}` is no longer emitted and should be removed entirely.\"\n-            );\n         }\n+\n         if !found_code_example {\n             verbose_print!(\n                 verbose,\n@@ -226,7 +223,7 @@ fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bo\n     let mut found_proper_doctest = false;\n \n     let mut emit_ignore_warning = false;\n-    let mut emit_no_longer_warning = false;\n+    let mut no_longer_emitted = false;\n \n     for line in explanation.lines() {\n         let line = line.trim();\n@@ -246,13 +243,13 @@ fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bo\n         } else if line\n             .starts_with(\"#### Note: this error code is no longer emitted by the compiler\")\n         {\n-            emit_no_longer_warning = true;\n+            no_longer_emitted = true;\n             found_code_example = true;\n             found_proper_doctest = true;\n         }\n     }\n \n-    (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning)\n+    (found_code_example, found_proper_doctest, emit_ignore_warning, no_longer_emitted)\n }\n \n // Stage 3: Checks that each error code has a UI test in the correct directory\n@@ -261,6 +258,7 @@ fn check_error_codes_tests(\n     error_codes: &[String],\n     errors: &mut Vec<String>,\n     verbose: bool,\n+    no_longer_emitted: &[String],\n ) {\n     let tests_path = root_path.join(Path::new(ERROR_TESTS_PATH));\n \n@@ -295,6 +293,11 @@ fn check_error_codes_tests(\n             }\n         };\n \n+        if no_longer_emitted.contains(code) {\n+            // UI tests *can't* contain error codes that are no longer emitted.\n+            continue;\n+        }\n+\n         let mut found_code = false;\n \n         for line in file.lines() {"}]}