{"sha": "6bb1e2291195a518ddeef6e64337f4edb1432a72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYjFlMjI5MTE5NWE1MThkZGVlZjZlNjQzMzdmNGVkYjE0MzJhNzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T13:43:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:57:58Z"}, "message": "New WF condition requires checking that argument types are WF\non every call. This ensures that implies bounds are reasonable\n(the older code only checked that the values provided had WF types, but\nwe also must know that the formal types of the arguments are WF.)", "tree": {"sha": "38a5bee21293c18702d0c865ab12a4f363147559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a5bee21293c18702d0c865ab12a4f363147559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb1e2291195a518ddeef6e64337f4edb1432a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb1e2291195a518ddeef6e64337f4edb1432a72", "html_url": "https://github.com/rust-lang/rust/commit/6bb1e2291195a518ddeef6e64337f4edb1432a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb1e2291195a518ddeef6e64337f4edb1432a72/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d98877112d4deb3786de521457418757e010c69", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d98877112d4deb3786de521457418757e010c69", "html_url": "https://github.com/rust-lang/rust/commit/8d98877112d4deb3786de521457418757e010c69"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "bf5d1373d0bf56a961aaa081518dbea6db4a141d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6bb1e2291195a518ddeef6e64337f4edb1432a72/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb1e2291195a518ddeef6e64337f4edb1432a72/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6bb1e2291195a518ddeef6e64337f4edb1432a72", "patch": "@@ -2432,6 +2432,12 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         1\n     };\n \n+    // All the input types from the fn signature must outlive the call\n+    // so as to validate implied bounds.\n+    for &fn_input_ty in fn_inputs {\n+        fcx.register_wf_obligation(fn_input_ty, sp, traits::MiscObligation);\n+    }\n+\n     let mut expected_arg_tys = expected_arg_tys;\n     let expected_arg_count = fn_inputs.len();\n     let formal_tys = if tuple_arguments == TupleArguments {\n@@ -3541,16 +3547,18 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n       }\n       ast::ExprCall(ref callee, ref args) => {\n           callee::check_call(fcx, expr, &**callee, &args[..], expected);\n+\n+          // we must check that return type of called functions is WF:\n+          let ret_ty = fcx.expr_ty(expr);\n+          fcx.register_wf_obligation(ret_ty, expr.span, traits::MiscObligation);\n       }\n       ast::ExprMethodCall(ident, ref tps, ref args) => {\n-        check_method_call(fcx, expr, ident, &args[..], &tps[..], expected, lvalue_pref);\n-        let arg_tys = args.iter().map(|a| fcx.expr_ty(&**a));\n-        let  args_err = arg_tys.fold(false,\n-             |rest_err, a| {\n-              rest_err || a.references_error()});\n-        if args_err {\n-            fcx.write_error(id);\n-        }\n+          check_method_call(fcx, expr, ident, &args[..], &tps[..], expected, lvalue_pref);\n+          let arg_tys = args.iter().map(|a| fcx.expr_ty(&**a));\n+          let args_err = arg_tys.fold(false, |rest_err, a| rest_err || a.references_error());\n+          if args_err {\n+              fcx.write_error(id);\n+          }\n       }\n       ast::ExprCast(ref e, ref t) => {\n         if let ast::TyFixedLengthVec(_, ref count_expr) = t.node {"}]}