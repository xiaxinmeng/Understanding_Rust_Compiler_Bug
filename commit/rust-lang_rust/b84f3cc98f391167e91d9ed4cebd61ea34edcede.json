{"sha": "b84f3cc98f391167e91d9ed4cebd61ea34edcede", "node_id": "C_kwDOAAsO6NoAKGI4NGYzY2M5OGYzOTExNjdlOTFkOWVkNGNlYmQ2MWVhMzRlZGNlZGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-26T12:39:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-01T17:57:08Z"}, "message": "Update docs and config", "tree": {"sha": "4637369ba8e1a1dac5de5b8581ffe1ac8619d8f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4637369ba8e1a1dac5de5b8581ffe1ac8619d8f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b84f3cc98f391167e91d9ed4cebd61ea34edcede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b84f3cc98f391167e91d9ed4cebd61ea34edcede", "html_url": "https://github.com/rust-lang/rust/commit/b84f3cc98f391167e91d9ed4cebd61ea34edcede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b84f3cc98f391167e91d9ed4cebd61ea34edcede/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f27eb57a51dffa4f5c8b3bd4dcbcc5423c3617c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f27eb57a51dffa4f5c8b3bd4dcbcc5423c3617c", "html_url": "https://github.com/rust-lang/rust/commit/9f27eb57a51dffa4f5c8b3bd4dcbcc5423c3617c"}], "stats": {"total": 902, "additions": 459, "deletions": 443}, "files": [{"sha": "c70bf206ffe34b43e698b073249f7d86e1443b90", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 185, "deletions": 191, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/b84f3cc98f391167e91d9ed4cebd61ea34edcede/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b84f3cc98f391167e91d9ed4cebd61ea34edcede/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=b84f3cc98f391167e91d9ed4cebd61ea34edcede", "patch": "@@ -1,107 +1,56 @@\n-[[rust-analyzer.assist.exprFillDefault]]rust-analyzer.assist.exprFillDefault (default: `\"todo\"`)::\n+[[rust-analyzer.assist.expressionFillDefault]]rust-analyzer.assist.expressionFillDefault (default: `\"todo\"`)::\n +\n --\n Placeholder for missing expressions in assists.\n --\n-[[rust-analyzer.assist.importGranularity]]rust-analyzer.assist.importGranularity (default: `\"crate\"`)::\n-+\n---\n-How imports should be grouped into use statements.\n---\n-[[rust-analyzer.assist.importEnforceGranularity]]rust-analyzer.assist.importEnforceGranularity (default: `false`)::\n-+\n---\n-Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n---\n-[[rust-analyzer.assist.importPrefix]]rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n-+\n---\n-The path structure for newly inserted paths to use.\n---\n-[[rust-analyzer.assist.importGroup]]rust-analyzer.assist.importGroup (default: `true`)::\n-+\n---\n-Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n---\n-[[rust-analyzer.assist.allowMergingIntoGlobImports]]rust-analyzer.assist.allowMergingIntoGlobImports (default: `true`)::\n-+\n---\n-Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n---\n-[[rust-analyzer.cache.warmup]]rust-analyzer.cache.warmup (default: `true`)::\n-+\n---\n-Warm up caches on project load.\n---\n-[[rust-analyzer.callInfo.full]]rust-analyzer.callInfo.full (default: `true`)::\n-+\n---\n-Show function name and docs in parameter hints.\n---\n [[rust-analyzer.cargo.autoreload]]rust-analyzer.cargo.autoreload (default: `true`)::\n +\n --\n Automatically refresh project info via `cargo metadata` on\n `Cargo.toml` changes.\n --\n-[[rust-analyzer.cargo.allFeatures]]rust-analyzer.cargo.allFeatures (default: `false`)::\n-+\n---\n-Activate all available features (`--all-features`).\n---\n-[[rust-analyzer.cargo.unsetTest]]rust-analyzer.cargo.unsetTest (default: `[\"core\"]`)::\n-+\n---\n-Unsets `#[cfg(test)]` for the specified crates.\n---\n-[[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n-+\n---\n-List of features to activate.\n---\n-[[rust-analyzer.cargo.runBuildScripts]]rust-analyzer.cargo.runBuildScripts (default: `true`)::\n+[[rust-analyzer.cargo.buildScripts.enable]]rust-analyzer.cargo.buildScripts.enable (default: `true`)::\n +\n --\n Run build scripts (`build.rs`) for more precise code analysis.\n --\n-[[rust-analyzer.cargo.runBuildScriptsCommand]]rust-analyzer.cargo.runBuildScriptsCommand (default: `null`)::\n+[[rust-analyzer.cargo.buildScripts.overrideCommand]]rust-analyzer.cargo.buildScripts.overrideCommand (default: `null`)::\n +\n --\n Advanced option, fully override the command rust-analyzer uses to\n run build scripts and build procedural macros. The command should\n include `--message-format=json` or a similar option.\n --\n-[[rust-analyzer.cargo.useRustcWrapperForBuildScripts]]rust-analyzer.cargo.useRustcWrapperForBuildScripts (default: `true`)::\n+[[rust-analyzer.cargo.buildScripts.useRustcWrapper]]rust-analyzer.cargo.buildScripts.useRustcWrapper (default: `true`)::\n +\n --\n Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n avoid compiling unnecessary things.\n --\n-[[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n+[[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n +\n --\n-Do not activate the `default` feature.\n+List of features to activate. Set to `\"all\"` to pass `--all-features` to cargo.\n --\n-[[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::\n+[[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n +\n --\n-Compilation target (target triple).\n+Do not activate the `default` feature.\n --\n [[rust-analyzer.cargo.noSysroot]]rust-analyzer.cargo.noSysroot (default: `false`)::\n +\n --\n Internal config for debugging, disables loading of sysroot crates.\n --\n-[[rust-analyzer.checkOnSave.enable]]rust-analyzer.checkOnSave.enable (default: `true`)::\n+[[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::\n +\n --\n-Run specified `cargo check` command for diagnostics on save.\n+Compilation target override (target triple).\n --\n-[[rust-analyzer.checkOnSave.allFeatures]]rust-analyzer.checkOnSave.allFeatures (default: `null`)::\n+[[rust-analyzer.cargo.unsetTest]]rust-analyzer.cargo.unsetTest (default: `[\"core\"]`)::\n +\n --\n-Check with all features (`--all-features`).\n-Defaults to `#rust-analyzer.cargo.allFeatures#`.\n+Unsets `#[cfg(test)]` for the specified crates.\n --\n [[rust-analyzer.checkOnSave.allTargets]]rust-analyzer.checkOnSave.allTargets (default: `true`)::\n +\n@@ -113,16 +62,10 @@ Check all targets and tests (`--all-targets`).\n --\n Cargo command to use for `cargo check`.\n --\n-[[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n-+\n---\n-Do not activate the `default` feature.\n---\n-[[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n+[[rust-analyzer.checkOnSave.enable]]rust-analyzer.checkOnSave.enable (default: `true`)::\n +\n --\n-Check for a specific target. Defaults to\n-`#rust-analyzer.cargo.target#`.\n+Run specified `cargo check` command for diagnostics on save.\n --\n [[rust-analyzer.checkOnSave.extraArgs]]rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n +\n@@ -133,7 +76,12 @@ Extra arguments for `cargo check`.\n +\n --\n List of features to activate. Defaults to\n-`#rust-analyzer.cargo.features#`.\n+`#rust-analyzer.cargo.features#`. Set to `\"all\"` to pass `--all-features` to cargo.\n+--\n+[[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n++\n+--\n+Do not activate the `default` feature.\n --\n [[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n +\n@@ -142,18 +90,40 @@ Advanced option, fully override the command rust-analyzer uses for\n checking. The command should include `--message-format=json` or\n similar option.\n --\n-[[rust-analyzer.completion.addCallArgumentSnippets]]rust-analyzer.completion.addCallArgumentSnippets (default: `true`)::\n+[[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n +\n --\n-Whether to add argument snippets when completing functions.\n-Only applies when `#rust-analyzer.completion.addCallParenthesis#` is set.\n+Check for a specific target. Defaults to\n+`#rust-analyzer.cargo.target#`.\n --\n-[[rust-analyzer.completion.addCallParenthesis]]rust-analyzer.completion.addCallParenthesis (default: `true`)::\n+[[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n +\n --\n-Whether to add parenthesis when completing functions.\n+Toggles the additional completions that automatically add imports when completed.\n+Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n --\n-[[rust-analyzer.completion.snippets]]rust-analyzer.completion.snippets::\n+[[rust-analyzer.completion.autoself.enable]]rust-analyzer.completion.autoself.enable (default: `true`)::\n++\n+--\n+Toggles the additional completions that automatically show method calls and field accesses\n+with `self` prefixed to them when inside a method.\n+--\n+[[rust-analyzer.completion.callable.snippets]]rust-analyzer.completion.callable.snippets (default: `\"fill_arguments\"`)::\n++\n+--\n+Whether to add parenthesis and argument snippets when completing function.\n+--\n+[[rust-analyzer.completion.postfix.enable]]rust-analyzer.completion.postfix.enable (default: `true`)::\n++\n+--\n+Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n+--\n+[[rust-analyzer.completion.privateEditable.enable]]rust-analyzer.completion.privateEditable.enable (default: `false`)::\n++\n+--\n+Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n+--\n+[[rust-analyzer.completion.snippets.custom]]rust-analyzer.completion.snippets.custom::\n +\n --\n Default:\n@@ -203,44 +173,22 @@ Default:\n Custom completion snippets.\n \n --\n-[[rust-analyzer.completion.postfix.enable]]rust-analyzer.completion.postfix.enable (default: `true`)::\n-+\n---\n-Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n---\n-[[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n-+\n---\n-Toggles the additional completions that automatically add imports when completed.\n-Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n---\n-[[rust-analyzer.completion.autoself.enable]]rust-analyzer.completion.autoself.enable (default: `true`)::\n-+\n---\n-Toggles the additional completions that automatically show method calls and field accesses\n-with `self` prefixed to them when inside a method.\n---\n-[[rust-analyzer.completion.privateEditable.enable]]rust-analyzer.completion.privateEditable.enable (default: `false`)::\n+[[rust-analyzer.diagnostics.disabled]]rust-analyzer.diagnostics.disabled (default: `[]`)::\n +\n --\n-Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n+List of rust-analyzer diagnostics to disable.\n --\n [[rust-analyzer.diagnostics.enable]]rust-analyzer.diagnostics.enable (default: `true`)::\n +\n --\n Whether to show native rust-analyzer diagnostics.\n --\n-[[rust-analyzer.diagnostics.enableExperimental]]rust-analyzer.diagnostics.enableExperimental (default: `false`)::\n+[[rust-analyzer.diagnostics.experimental.enable]]rust-analyzer.diagnostics.experimental.enable (default: `false`)::\n +\n --\n Whether to show experimental rust-analyzer diagnostics that might\n have more false positives than usual.\n --\n-[[rust-analyzer.diagnostics.disabled]]rust-analyzer.diagnostics.disabled (default: `[]`)::\n-+\n---\n-List of rust-analyzer diagnostics to disable.\n---\n [[rust-analyzer.diagnostics.remapPrefix]]rust-analyzer.diagnostics.remapPrefix (default: `{}`)::\n +\n --\n@@ -263,132 +211,117 @@ List of warnings that should be displayed with info severity.\n The warnings will be indicated by a blue squiggly underline in code\n and a blue icon in the `Problems Panel`.\n --\n-[[rust-analyzer.experimental.procAttrMacros]]rust-analyzer.experimental.procAttrMacros (default: `true`)::\n-+\n---\n-Expand attribute macros.\n---\n-[[rust-analyzer.files.watcher]]rust-analyzer.files.watcher (default: `\"client\"`)::\n-+\n---\n-Controls file watching implementation.\n---\n [[rust-analyzer.files.excludeDirs]]rust-analyzer.files.excludeDirs (default: `[]`)::\n +\n --\n These directories will be ignored by rust-analyzer. They are\n relative to the workspace root, and globs are not supported. You may\n also need to add the folders to Code's `files.watcherExclude`.\n --\n-[[rust-analyzer.highlightRelated.references]]rust-analyzer.highlightRelated.references (default: `true`)::\n-+\n---\n-Enables highlighting of related references while hovering your mouse above any identifier.\n---\n-[[rust-analyzer.highlightRelated.exitPoints]]rust-analyzer.highlightRelated.exitPoints (default: `true`)::\n+[[rust-analyzer.files.watcher]]rust-analyzer.files.watcher (default: `\"client\"`)::\n +\n --\n-Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n+Controls file watching implementation.\n --\n-[[rust-analyzer.highlightRelated.breakPoints]]rust-analyzer.highlightRelated.breakPoints (default: `true`)::\n+[[rust-analyzer.highlightRelated.breakPoints.enable]]rust-analyzer.highlightRelated.breakPoints.enable (default: `true`)::\n +\n --\n Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\n --\n-[[rust-analyzer.highlightRelated.yieldPoints]]rust-analyzer.highlightRelated.yieldPoints (default: `true`)::\n-+\n---\n-Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n---\n-[[rust-analyzer.highlighting.strings]]rust-analyzer.highlighting.strings (default: `true`)::\n+[[rust-analyzer.highlightRelated.exitPoints.enable]]rust-analyzer.highlightRelated.exitPoints.enable (default: `true`)::\n +\n --\n-Use semantic tokens for strings.\n-\n-In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n-By disabling semantic tokens for strings, other grammars can be used to highlight\n-their contents.\n+Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n --\n-[[rust-analyzer.hover.documentation]]rust-analyzer.hover.documentation (default: `true`)::\n+[[rust-analyzer.highlightRelated.references.enable]]rust-analyzer.highlightRelated.references.enable (default: `true`)::\n +\n --\n-Whether to show documentation on hover.\n+Enables highlighting of related references while hovering your mouse above any identifier.\n --\n-[[rust-analyzer.hover.linksInHover]]rust-analyzer.hover.linksInHover (default: `true`)::\n+[[rust-analyzer.highlightRelated.yieldPoints.enable]]rust-analyzer.highlightRelated.yieldPoints.enable (default: `true`)::\n +\n --\n-Use markdown syntax for links in hover.\n+Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n --\n-[[rust-analyzer.hoverActions.debug]]rust-analyzer.hoverActions.debug (default: `true`)::\n+[[rust-analyzer.hover.actions.debug.enable]]rust-analyzer.hover.actions.debug.enable (default: `true`)::\n +\n --\n Whether to show `Debug` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.enable]]rust-analyzer.hoverActions.enable (default: `true`)::\n+[[rust-analyzer.hover.actions.enable]]rust-analyzer.hover.actions.enable (default: `true`)::\n +\n --\n Whether to show HoverActions in Rust files.\n --\n-[[rust-analyzer.hoverActions.gotoTypeDef]]rust-analyzer.hoverActions.gotoTypeDef (default: `true`)::\n+[[rust-analyzer.hover.actions.gotoTypeDef.enable]]rust-analyzer.hover.actions.gotoTypeDef.enable (default: `true`)::\n +\n --\n Whether to show `Go to Type Definition` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.implementations]]rust-analyzer.hoverActions.implementations (default: `true`)::\n+[[rust-analyzer.hover.actions.implementations.enable]]rust-analyzer.hover.actions.implementations.enable (default: `true`)::\n +\n --\n Whether to show `Implementations` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.references]]rust-analyzer.hoverActions.references (default: `false`)::\n+[[rust-analyzer.hover.actions.references.enable]]rust-analyzer.hover.actions.references.enable (default: `false`)::\n +\n --\n Whether to show `References` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.run]]rust-analyzer.hoverActions.run (default: `true`)::\n+[[rust-analyzer.hover.actions.run.enable]]rust-analyzer.hover.actions.run.enable (default: `true`)::\n +\n --\n Whether to show `Run` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.inlayHints.renderColons]]rust-analyzer.inlayHints.renderColons (default: `true`)::\n+[[rust-analyzer.hover.documentation.enable]]rust-analyzer.hover.documentation.enable (default: `true`)::\n +\n --\n-Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n+Whether to show documentation on hover.\n --\n-[[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `25`)::\n+[[rust-analyzer.hover.links.enable]]rust-analyzer.hover.links.enable (default: `true`)::\n +\n --\n-Maximum length for inlay hints. Set to null to have an unlimited length.\n+Use markdown syntax for links in hover.\n --\n-[[rust-analyzer.inlayHints.parameterHints]]rust-analyzer.inlayHints.parameterHints (default: `true`)::\n+[[rust-analyzer.imports.enforceGranularity]]rust-analyzer.imports.enforceGranularity (default: `false`)::\n +\n --\n-Whether to show function parameter name inlay hints at the call\n-site.\n+Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n --\n-[[rust-analyzer.inlayHints.typeHints]]rust-analyzer.inlayHints.typeHints (default: `true`)::\n+[[rust-analyzer.imports.granularity]]rust-analyzer.imports.granularity (default: `\"crate\"`)::\n +\n --\n-Whether to show inlay type hints for variables.\n+How imports should be grouped into use statements.\n --\n-[[rust-analyzer.inlayHints.chainingHints]]rust-analyzer.inlayHints.chainingHints (default: `true`)::\n+[[rust-analyzer.imports.group]]rust-analyzer.imports.group (default: `true`)::\n +\n --\n-Whether to show inlay type hints for method chains.\n+Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n --\n-[[rust-analyzer.inlayHints.closureReturnTypeHints]]rust-analyzer.inlayHints.closureReturnTypeHints (default: `false`)::\n+[[rust-analyzer.imports.mergeIntoGlob]]rust-analyzer.imports.mergeIntoGlob (default: `true`)::\n +\n --\n-Whether to show inlay type hints for return types of closures with blocks.\n+Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n --\n-[[rust-analyzer.inlayHints.reborrowHints]]rust-analyzer.inlayHints.reborrowHints (default: `false`)::\n+[[rust-analyzer.imports.prefix]]rust-analyzer.imports.prefix (default: `\"plain\"`)::\n +\n --\n-Whether to show inlay type hints for compiler inserted reborrows.\n+The path structure for newly inserted paths to use.\n+--\n+[[rust-analyzer.inlayHints.chainingHints.enable]]rust-analyzer.inlayHints.chainingHints.enable (default: `true`)::\n++\n+--\n+Whether to show inlay type hints for method chains.\n+--\n+[[rust-analyzer.inlayHints.closureReturnTypeHints.enable]]rust-analyzer.inlayHints.closureReturnTypeHints.enable (default: `false`)::\n++\n+--\n+Whether to show inlay type hints for return types of closures with blocks.\n --\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n@@ -400,11 +333,42 @@ Whether to show inlay type hints for elided lifetimes in function signatures.\n --\n Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n --\n-[[rust-analyzer.inlayHints.hideNamedConstructorHints]]rust-analyzer.inlayHints.hideNamedConstructorHints (default: `false`)::\n+[[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `25`)::\n++\n+--\n+Maximum length for inlay hints. Set to null to have an unlimited length.\n+--\n+[[rust-analyzer.inlayHints.parameterHints.enable]]rust-analyzer.inlayHints.parameterHints.enable (default: `true`)::\n++\n+--\n+Whether to show function parameter name inlay hints at the call\n+site.\n+--\n+[[rust-analyzer.inlayHints.reborrowHints.enable]]rust-analyzer.inlayHints.reborrowHints.enable (default: `false`)::\n++\n+--\n+Whether to show inlay type hints for compiler inserted reborrows.\n+--\n+[[rust-analyzer.inlayHints.renderColons]]rust-analyzer.inlayHints.renderColons (default: `true`)::\n++\n+--\n+Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n+--\n+[[rust-analyzer.inlayHints.typeHints.enable]]rust-analyzer.inlayHints.typeHints.enable (default: `true`)::\n++\n+--\n+Whether to show inlay type hints for variables.\n+--\n+[[rust-analyzer.inlayHints.typeHints.hideNamedConstructor]]rust-analyzer.inlayHints.typeHints.hideNamedConstructor (default: `false`)::\n +\n --\n Whether to hide inlay hints for constructors.\n --\n+[[rust-analyzer.joinLines.joinAssignments]]rust-analyzer.joinLines.joinAssignments (default: `true`)::\n++\n+--\n+Join lines merges consecutive declaration and initialization of an assignment.\n+--\n [[rust-analyzer.joinLines.joinElseIf]]rust-analyzer.joinLines.joinElseIf (default: `true`)::\n +\n --\n@@ -420,12 +384,7 @@ Join lines removes trailing commas.\n --\n Join lines unwraps trivial blocks.\n --\n-[[rust-analyzer.joinLines.joinAssignments]]rust-analyzer.joinLines.joinAssignments (default: `true`)::\n-+\n---\n-Join lines merges consecutive declaration and initialization of an assignment.\n---\n-[[rust-analyzer.lens.debug]]rust-analyzer.lens.debug (default: `true`)::\n+[[rust-analyzer.lens.debug.enable]]rust-analyzer.lens.debug.enable (default: `true`)::\n +\n --\n Whether to show `Debug` lens. Only applies when\n@@ -436,41 +395,47 @@ Whether to show `Debug` lens. Only applies when\n --\n Whether to show CodeLens in Rust files.\n --\n-[[rust-analyzer.lens.implementations]]rust-analyzer.lens.implementations (default: `true`)::\n+[[rust-analyzer.lens.forceCustomCommands]]rust-analyzer.lens.forceCustomCommands (default: `true`)::\n +\n --\n-Whether to show `Implementations` lens. Only applies when\n-`#rust-analyzer.lens.enable#` is set.\n+Internal config: use custom client-side commands even when the\n+client doesn't set the corresponding capability.\n --\n-[[rust-analyzer.lens.run]]rust-analyzer.lens.run (default: `true`)::\n+[[rust-analyzer.lens.implementations.enable]]rust-analyzer.lens.implementations.enable (default: `true`)::\n +\n --\n-Whether to show `Run` lens. Only applies when\n+Whether to show `Implementations` lens. Only applies when\n `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.methodReferences]]rust-analyzer.lens.methodReferences (default: `false`)::\n+[[rust-analyzer.lens.references.adt.enable]]rust-analyzer.lens.references.adt.enable (default: `false`)::\n +\n --\n-Whether to show `Method References` lens. Only applies when\n-`#rust-analyzer.lens.enable#` is set.\n+Whether to show `References` lens for Struct, Enum, and Union.\n+Only applies when `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.references]]rust-analyzer.lens.references (default: `false`)::\n+[[rust-analyzer.lens.references.adt.variant.enable]]rust-analyzer.lens.references.adt.variant.enable (default: `false`)::\n +\n --\n-Whether to show `References` lens for Struct, Enum, Union and Trait.\n+Whether to show `References` lens for Enum Variants.\n Only applies when `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.enumVariantReferences]]rust-analyzer.lens.enumVariantReferences (default: `false`)::\n+[[rust-analyzer.lens.references.method.enable]]rust-analyzer.lens.references.method.enable (default: `false`)::\n +\n --\n-Whether to show `References` lens for Enum Variants.\n+Whether to show `Method References` lens. Only applies when\n+`#rust-analyzer.lens.enable#` is set.\n+--\n+[[rust-analyzer.lens.references.trait.enable]]rust-analyzer.lens.references.trait.enable (default: `false`)::\n++\n+--\n+Whether to show `References` lens for Trait.\n Only applies when `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.forceCustomCommands]]rust-analyzer.lens.forceCustomCommands (default: `true`)::\n+[[rust-analyzer.lens.run.enable]]rust-analyzer.lens.run.enable (default: `true`)::\n +\n --\n-Internal config: use custom client-side commands even when the\n-client doesn't set the corresponding capability.\n+Whether to show `Run` lens. Only applies when\n+`#rust-analyzer.lens.enable#` is set.\n --\n [[rust-analyzer.linkedProjects]]rust-analyzer.linkedProjects (default: `[]`)::\n +\n@@ -481,7 +446,7 @@ of projects.\n Elements must be paths pointing to `Cargo.toml`,\n `rust-project.json`, or JSON objects in `rust-project.json` format.\n --\n-[[rust-analyzer.lruCapacity]]rust-analyzer.lruCapacity (default: `null`)::\n+[[rust-analyzer.lru.capacity]]rust-analyzer.lru.capacity (default: `null`)::\n +\n --\n Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n@@ -491,21 +456,25 @@ Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n --\n Whether to show `can't find Cargo.toml` error message.\n --\n+[[rust-analyzer.primeCaches.enable]]rust-analyzer.primeCaches.enable (default: `true`)::\n++\n+--\n+Warm up caches on project load.\n+--\n [[rust-analyzer.primeCaches.numThreads]]rust-analyzer.primeCaches.numThreads (default: `0`)::\n +\n --\n How many worker threads to to handle priming caches. The default `0` means to pick automatically.\n --\n-[[rust-analyzer.procMacro.enable]]rust-analyzer.procMacro.enable (default: `true`)::\n+[[rust-analyzer.procMacro.attributes.enable]]rust-analyzer.procMacro.attributes.enable (default: `true`)::\n +\n --\n-Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n+Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n --\n-[[rust-analyzer.procMacro.server]]rust-analyzer.procMacro.server (default: `null`)::\n+[[rust-analyzer.procMacro.enable]]rust-analyzer.procMacro.enable (default: `true`)::\n +\n --\n-Internal config, path to proc-macro server executable (typically,\n-this is rust-analyzer itself, but we override this in tests).\n+Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n --\n [[rust-analyzer.procMacro.ignored]]rust-analyzer.procMacro.ignored (default: `{}`)::\n +\n@@ -514,18 +483,24 @@ These proc-macros will be ignored when trying to expand them.\n \n This config takes a map of crate names with the exported proc-macro names to ignore as values.\n --\n-[[rust-analyzer.runnables.overrideCargo]]rust-analyzer.runnables.overrideCargo (default: `null`)::\n+[[rust-analyzer.procMacro.server]]rust-analyzer.procMacro.server (default: `null`)::\n++\n+--\n+Internal config, path to proc-macro server executable (typically,\n+this is rust-analyzer itself, but we override this in tests).\n+--\n+[[rust-analyzer.runnables.command]]rust-analyzer.runnables.command (default: `null`)::\n +\n --\n Command to be executed instead of 'cargo' for runnables.\n --\n-[[rust-analyzer.runnables.cargoExtraArgs]]rust-analyzer.runnables.cargoExtraArgs (default: `[]`)::\n+[[rust-analyzer.runnables.extraArgs]]rust-analyzer.runnables.extraArgs (default: `[]`)::\n +\n --\n Additional arguments to be passed to cargo for runnables such as\n tests or binaries. For example, it may be `--release`.\n --\n-[[rust-analyzer.rustcSource]]rust-analyzer.rustcSource (default: `null`)::\n+[[rust-analyzer.rustc.source]]rust-analyzer.rustc.source (default: `null`)::\n +\n --\n Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\n@@ -548,17 +523,31 @@ Additional arguments to `rustfmt`.\n Advanced option, fully override the command rust-analyzer uses for\n formatting.\n --\n-[[rust-analyzer.rustfmt.enableRangeFormatting]]rust-analyzer.rustfmt.enableRangeFormatting (default: `false`)::\n+[[rust-analyzer.rustfmt.rangeFormatting.enable]]rust-analyzer.rustfmt.rangeFormatting.enable (default: `false`)::\n +\n --\n Enables the use of rustfmt's unstable range formatting command for the\n `textDocument/rangeFormatting` request. The rustfmt option is unstable and only\n available on a nightly build.\n --\n-[[rust-analyzer.workspace.symbol.search.scope]]rust-analyzer.workspace.symbol.search.scope (default: `\"workspace\"`)::\n+[[rust-analyzer.semanticHighlighting.strings.enable]]rust-analyzer.semanticHighlighting.strings.enable (default: `true`)::\n +\n --\n-Workspace symbol search scope.\n+Use semantic tokens for strings.\n+\n+In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+By disabling semantic tokens for strings, other grammars can be used to highlight\n+their contents.\n+--\n+[[rust-analyzer.signatureInfo.documentation.enable]]rust-analyzer.signatureInfo.documentation.enable (default: `true`)::\n++\n+--\n+Show documentation.\n+--\n+[[rust-analyzer.signatureInfo.signature.enable]]rust-analyzer.signatureInfo.signature.enable (default: `true`)::\n++\n+--\n+Show full signature of the callable. Only shows parameters if disabled.\n --\n [[rust-analyzer.workspace.symbol.search.kind]]rust-analyzer.workspace.symbol.search.kind (default: `\"only_types\"`)::\n +\n@@ -572,3 +561,8 @@ Limits the number of items returned from a workspace symbol search (Defaults to\n Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n Other clients requires all results upfront and might require a higher limit.\n --\n+[[rust-analyzer.workspace.symbol.search.scope]]rust-analyzer.workspace.symbol.search.scope (default: `\"workspace\"`)::\n++\n+--\n+Workspace symbol search scope.\n+--"}, {"sha": "c4e7036a3ce54dce2f7707253bd73ca662845463", "filename": "editors/code/package.json", "status": "modified", "additions": 274, "deletions": 252, "changes": 526, "blob_url": "https://github.com/rust-lang/rust/blob/b84f3cc98f391167e91d9ed4cebd61ea34edcede/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b84f3cc98f391167e91d9ed4cebd61ea34edcede/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b84f3cc98f391167e91d9ed4cebd61ea34edcede", "patch": "@@ -368,7 +368,7 @@\n                     \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n                 \"$generated-start\": {},\n-                \"rust-analyzer.assist.exprFillDefault\": {\n+                \"rust-analyzer.assist.expressionFillDefault\": {\n                     \"markdownDescription\": \"Placeholder for missing expressions in assists.\",\n                     \"default\": \"todo\",\n                     \"type\": \"string\",\n@@ -381,97 +381,17 @@\n                         \"Fill missing expressions with reasonable defaults, `new` or `default` constructors.\"\n                     ]\n                 },\n-                \"rust-analyzer.assist.importGranularity\": {\n-                    \"markdownDescription\": \"How imports should be grouped into use statements.\",\n-                    \"default\": \"crate\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"preserve\",\n-                        \"crate\",\n-                        \"module\",\n-                        \"item\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n-                        \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n-                        \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n-                        \"Flatten imports so that each has its own use statement.\"\n-                    ]\n-                },\n-                \"rust-analyzer.assist.importEnforceGranularity\": {\n-                    \"markdownDescription\": \"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.assist.importPrefix\": {\n-                    \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n-                    \"default\": \"plain\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"plain\",\n-                        \"self\",\n-                        \"crate\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n-                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.\",\n-                        \"Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from.\"\n-                    ]\n-                },\n-                \"rust-analyzer.assist.importGroup\": {\n-                    \"markdownDescription\": \"Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.assist.allowMergingIntoGlobImports\": {\n-                    \"markdownDescription\": \"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.cache.warmup\": {\n-                    \"markdownDescription\": \"Warm up caches on project load.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.callInfo.full\": {\n-                    \"markdownDescription\": \"Show function name and docs in parameter hints.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.cargo.autoreload\": {\n                     \"markdownDescription\": \"Automatically refresh project info via `cargo metadata` on\\n`Cargo.toml` changes.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.allFeatures\": {\n-                    \"markdownDescription\": \"Activate all available features (`--all-features`).\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.cargo.unsetTest\": {\n-                    \"markdownDescription\": \"Unsets `#[cfg(test)]` for the specified crates.\",\n-                    \"default\": [\n-                        \"core\"\n-                    ],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.cargo.features\": {\n-                    \"markdownDescription\": \"List of features to activate.\",\n-                    \"default\": [],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.cargo.runBuildScripts\": {\n+                \"rust-analyzer.cargo.buildScripts.enable\": {\n                     \"markdownDescription\": \"Run build scripts (`build.rs`) for more precise code analysis.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.runBuildScriptsCommand\": {\n+                \"rust-analyzer.cargo.buildScripts.overrideCommand\": {\n                     \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses to\\nrun build scripts and build procedural macros. The command should\\ninclude `--message-format=json` or a similar option.\",\n                     \"default\": null,\n                     \"type\": [\n@@ -482,42 +402,56 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.cargo.useRustcWrapperForBuildScripts\": {\n+                \"rust-analyzer.cargo.buildScripts.useRustcWrapper\": {\n                     \"markdownDescription\": \"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\\navoid compiling unnecessary things.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.cargo.features\": {\n+                    \"markdownDescription\": \"List of features to activate. Set to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n+                    \"default\": [],\n+                    \"type\": [\n+                        \"string\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"enum\": [\n+                        \"all\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Pass `--all-features` to cargo\"\n+                    ]\n+                },\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n                     \"markdownDescription\": \"Do not activate the `default` feature.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.target\": {\n-                    \"markdownDescription\": \"Compilation target (target triple).\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ]\n-                },\n                 \"rust-analyzer.cargo.noSysroot\": {\n                     \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.checkOnSave.enable\": {\n-                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.checkOnSave.allFeatures\": {\n-                    \"markdownDescription\": \"Check with all features (`--all-features`).\\nDefaults to `#rust-analyzer.cargo.allFeatures#`.\",\n+                \"rust-analyzer.cargo.target\": {\n+                    \"markdownDescription\": \"Compilation target override (target triple).\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n-                        \"boolean\"\n+                        \"string\"\n                     ]\n                 },\n+                \"rust-analyzer.cargo.unsetTest\": {\n+                    \"markdownDescription\": \"Unsets `#[cfg(test)]` for the specified crates.\",\n+                    \"default\": [\n+                        \"core\"\n+                    ],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n                 \"rust-analyzer.checkOnSave.allTargets\": {\n                     \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n                     \"default\": true,\n@@ -528,21 +462,10 @@\n                     \"default\": \"check\",\n                     \"type\": \"string\"\n                 },\n-                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n-                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"boolean\"\n-                    ]\n-                },\n-                \"rust-analyzer.checkOnSave.target\": {\n-                    \"markdownDescription\": \"Check for a specific target. Defaults to\\n`#rust-analyzer.cargo.target#`.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ]\n+                \"rust-analyzer.checkOnSave.enable\": {\n+                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.checkOnSave.extraArgs\": {\n                     \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n@@ -553,15 +476,30 @@\n                     }\n                 },\n                 \"rust-analyzer.checkOnSave.features\": {\n-                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\",\n+                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`. Set to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n                     \"default\": null,\n                     \"type\": [\n-                        \"null\",\n-                        \"array\"\n+                        \"string\",\n+                        \"array\",\n+                        \"null\"\n                     ],\n                     \"items\": {\n                         \"type\": \"string\"\n-                    }\n+                    },\n+                    \"enum\": [\n+                        \"all\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Pass `--all-features` to cargo\"\n+                    ]\n+                },\n+                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n+                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"boolean\"\n+                    ]\n                 },\n                 \"rust-analyzer.checkOnSave.overrideCommand\": {\n                     \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses for\\nchecking. The command should include `--message-format=json` or\\nsimilar option.\",\n@@ -574,17 +512,51 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.completion.addCallArgumentSnippets\": {\n-                    \"markdownDescription\": \"Whether to add argument snippets when completing functions.\\nOnly applies when `#rust-analyzer.completion.addCallParenthesis#` is set.\",\n+                \"rust-analyzer.checkOnSave.target\": {\n+                    \"markdownDescription\": \"Check for a specific target. Defaults to\\n`#rust-analyzer.cargo.target#`.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ]\n+                },\n+                \"rust-analyzer.completion.autoimport.enable\": {\n+                    \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed.\\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.completion.addCallParenthesis\": {\n-                    \"markdownDescription\": \"Whether to add parenthesis when completing functions.\",\n+                \"rust-analyzer.completion.autoself.enable\": {\n+                    \"markdownDescription\": \"Toggles the additional completions that automatically show method calls and field accesses\\nwith `self` prefixed to them when inside a method.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.completion.snippets\": {\n+                \"rust-analyzer.completion.callable.snippets\": {\n+                    \"markdownDescription\": \"Whether to add parenthesis and argument snippets when completing function.\",\n+                    \"default\": \"fill_arguments\",\n+                    \"type\": [\n+                        \"string\",\n+                        \"null\"\n+                    ],\n+                    \"enum\": [\n+                        \"fill_arguments\",\n+                        \"add_parentheses\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Add call parentheses and pre-fill arguments\",\n+                        \"Add call parentheses\"\n+                    ]\n+                },\n+                \"rust-analyzer.completion.postfix.enable\": {\n+                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.completion.privateEditable.enable\": {\n+                    \"markdownDescription\": \"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.completion.snippets.custom\": {\n                     \"markdownDescription\": \"Custom completion snippets.\",\n                     \"default\": {\n                         \"Arc::new\": {\n@@ -629,45 +601,25 @@\n                     },\n                     \"type\": \"object\"\n                 },\n-                \"rust-analyzer.completion.postfix.enable\": {\n-                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.completion.autoimport.enable\": {\n-                    \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed.\\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.completion.autoself.enable\": {\n-                    \"markdownDescription\": \"Toggles the additional completions that automatically show method calls and field accesses\\nwith `self` prefixed to them when inside a method.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.completion.privateEditable.enable\": {\n-                    \"markdownDescription\": \"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n+                \"rust-analyzer.diagnostics.disabled\": {\n+                    \"markdownDescription\": \"List of rust-analyzer diagnostics to disable.\",\n+                    \"default\": [],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"uniqueItems\": true\n                 },\n                 \"rust-analyzer.diagnostics.enable\": {\n                     \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.diagnostics.enableExperimental\": {\n+                \"rust-analyzer.diagnostics.experimental.enable\": {\n                     \"markdownDescription\": \"Whether to show experimental rust-analyzer diagnostics that might\\nhave more false positives than usual.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.diagnostics.disabled\": {\n-                    \"markdownDescription\": \"List of rust-analyzer diagnostics to disable.\",\n-                    \"default\": [],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"uniqueItems\": true\n-                },\n                 \"rust-analyzer.diagnostics.remapPrefix\": {\n                     \"markdownDescription\": \"Map of prefixes to be substituted when parsing diagnostic file paths.\\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\",\n                     \"default\": {},\n@@ -689,16 +641,6 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.experimental.procAttrMacros\": {\n-                    \"markdownDescription\": \"Expand attribute macros.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.files.watcher\": {\n-                    \"markdownDescription\": \"Controls file watching implementation.\",\n-                    \"default\": \"client\",\n-                    \"type\": \"string\"\n-                },\n                 \"rust-analyzer.files.excludeDirs\": {\n                     \"markdownDescription\": \"These directories will be ignored by rust-analyzer. They are\\nrelative to the workspace root, and globs are not supported. You may\\nalso need to add the folders to Code's `files.watcherExclude`.\",\n                     \"default\": [],\n@@ -707,114 +649,135 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.highlightRelated.references\": {\n-                    \"markdownDescription\": \"Enables highlighting of related references while hovering your mouse above any identifier.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.highlightRelated.exitPoints\": {\n-                    \"markdownDescription\": \"Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n+                \"rust-analyzer.files.watcher\": {\n+                    \"markdownDescription\": \"Controls file watching implementation.\",\n+                    \"default\": \"client\",\n+                    \"type\": \"string\"\n                 },\n-                \"rust-analyzer.highlightRelated.breakPoints\": {\n+                \"rust-analyzer.highlightRelated.breakPoints.enable\": {\n                     \"markdownDescription\": \"Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.highlightRelated.yieldPoints\": {\n-                    \"markdownDescription\": \"Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.highlighting.strings\": {\n-                    \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n+                \"rust-analyzer.highlightRelated.exitPoints.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hover.documentation\": {\n-                    \"markdownDescription\": \"Whether to show documentation on hover.\",\n+                \"rust-analyzer.highlightRelated.references.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of related references while hovering your mouse above any identifier.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hover.linksInHover\": {\n-                    \"markdownDescription\": \"Use markdown syntax for links in hover.\",\n+                \"rust-analyzer.highlightRelated.yieldPoints.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.debug\": {\n+                \"rust-analyzer.hover.actions.debug.enable\": {\n                     \"markdownDescription\": \"Whether to show `Debug` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.enable\": {\n+                \"rust-analyzer.hover.actions.enable\": {\n                     \"markdownDescription\": \"Whether to show HoverActions in Rust files.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.gotoTypeDef\": {\n+                \"rust-analyzer.hover.actions.gotoTypeDef.enable\": {\n                     \"markdownDescription\": \"Whether to show `Go to Type Definition` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.implementations\": {\n+                \"rust-analyzer.hover.actions.implementations.enable\": {\n                     \"markdownDescription\": \"Whether to show `Implementations` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.references\": {\n+                \"rust-analyzer.hover.actions.references.enable\": {\n                     \"markdownDescription\": \"Whether to show `References` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.run\": {\n+                \"rust-analyzer.hover.actions.run.enable\": {\n                     \"markdownDescription\": \"Whether to show `Run` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.renderColons\": {\n-                    \"markdownDescription\": \"Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\",\n+                \"rust-analyzer.hover.documentation.enable\": {\n+                    \"markdownDescription\": \"Whether to show documentation on hover.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.maxLength\": {\n-                    \"markdownDescription\": \"Maximum length for inlay hints. Set to null to have an unlimited length.\",\n-                    \"default\": 25,\n-                    \"type\": [\n-                        \"null\",\n-                        \"integer\"\n+                \"rust-analyzer.hover.links.enable\": {\n+                    \"markdownDescription\": \"Use markdown syntax for links in hover.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.imports.enforceGranularity\": {\n+                    \"markdownDescription\": \"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.imports.granularity\": {\n+                    \"markdownDescription\": \"How imports should be grouped into use statements.\",\n+                    \"default\": \"crate\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"preserve\",\n+                        \"crate\",\n+                        \"module\",\n+                        \"item\"\n                     ],\n-                    \"minimum\": 0\n+                    \"enumDescriptions\": [\n+                        \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n+                        \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n+                        \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n+                        \"Flatten imports so that each has its own use statement.\"\n+                    ]\n                 },\n-                \"rust-analyzer.inlayHints.parameterHints\": {\n-                    \"markdownDescription\": \"Whether to show function parameter name inlay hints at the call\\nsite.\",\n+                \"rust-analyzer.imports.group\": {\n+                    \"markdownDescription\": \"Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.typeHints\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for variables.\",\n+                \"rust-analyzer.imports.mergeIntoGlob\": {\n+                    \"markdownDescription\": \"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.chainingHints\": {\n+                \"rust-analyzer.imports.prefix\": {\n+                    \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n+                    \"default\": \"plain\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"plain\",\n+                        \"self\",\n+                        \"crate\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n+                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.\",\n+                        \"Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from.\"\n+                    ]\n+                },\n+                \"rust-analyzer.inlayHints.chainingHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for method chains.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.closureReturnTypeHints\": {\n+                \"rust-analyzer.inlayHints.closureReturnTypeHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for return types of closures with blocks.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.reborrowHints\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\",\n-                    \"type\": \"string\",\n+                    \"type\": [\n+                        \"string\",\n+                        \"boolean\"\n+                    ],\n                     \"enum\": [\n                         \"always\",\n                         \"never\",\n@@ -831,11 +794,45 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.hideNamedConstructorHints\": {\n+                \"rust-analyzer.inlayHints.maxLength\": {\n+                    \"markdownDescription\": \"Maximum length for inlay hints. Set to null to have an unlimited length.\",\n+                    \"default\": 25,\n+                    \"type\": [\n+                        \"null\",\n+                        \"integer\"\n+                    ],\n+                    \"minimum\": 0\n+                },\n+                \"rust-analyzer.inlayHints.parameterHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show function parameter name inlay hints at the call\\nsite.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.reborrowHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.renderColons\": {\n+                    \"markdownDescription\": \"Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.typeHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for variables.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.typeHints.hideNamedConstructor\": {\n                     \"markdownDescription\": \"Whether to hide inlay hints for constructors.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.joinLines.joinAssignments\": {\n+                    \"markdownDescription\": \"Join lines merges consecutive declaration and initialization of an assignment.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.joinLines.joinElseIf\": {\n                     \"markdownDescription\": \"Join lines inserts else between consecutive ifs.\",\n                     \"default\": true,\n@@ -851,12 +848,7 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.joinLines.joinAssignments\": {\n-                    \"markdownDescription\": \"Join lines merges consecutive declaration and initialization of an assignment.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.lens.debug\": {\n+                \"rust-analyzer.lens.debug.enable\": {\n                     \"markdownDescription\": \"Whether to show `Debug` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n@@ -866,33 +858,38 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.implementations\": {\n-                    \"markdownDescription\": \"Whether to show `Implementations` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.forceCustomCommands\": {\n+                    \"markdownDescription\": \"Internal config: use custom client-side commands even when the\\nclient doesn't set the corresponding capability.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.run\": {\n-                    \"markdownDescription\": \"Whether to show `Run` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.implementations.enable\": {\n+                    \"markdownDescription\": \"Whether to show `Implementations` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.methodReferences\": {\n-                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.references.adt.enable\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Struct, Enum, and Union.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.references\": {\n-                    \"markdownDescription\": \"Whether to show `References` lens for Struct, Enum, Union and Trait.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.references.adt.variant.enable\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Enum Variants.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.enumVariantReferences\": {\n-                    \"markdownDescription\": \"Whether to show `References` lens for Enum Variants.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.references.method.enable\": {\n+                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.forceCustomCommands\": {\n-                    \"markdownDescription\": \"Internal config: use custom client-side commands even when the\\nclient doesn't set the corresponding capability.\",\n+                \"rust-analyzer.lens.references.trait.enable\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Trait.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.run.enable\": {\n+                    \"markdownDescription\": \"Whether to show `Run` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n@@ -907,7 +904,7 @@\n                         ]\n                     }\n                 },\n-                \"rust-analyzer.lruCapacity\": {\n+                \"rust-analyzer.lru.capacity\": {\n                     \"markdownDescription\": \"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\",\n                     \"default\": null,\n                     \"type\": [\n@@ -921,18 +918,33 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.primeCaches.enable\": {\n+                    \"markdownDescription\": \"Warm up caches on project load.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.primeCaches.numThreads\": {\n                     \"markdownDescription\": \"How many worker threads to to handle priming caches. The default `0` means to pick automatically.\",\n                     \"default\": 0,\n                     \"type\": \"number\",\n                     \"minimum\": 0,\n                     \"maximum\": 255\n                 },\n+                \"rust-analyzer.procMacro.attributes.enable\": {\n+                    \"markdownDescription\": \"Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.procMacro.enable\": {\n                     \"markdownDescription\": \"Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.procMacro.ignored\": {\n+                    \"markdownDescription\": \"These proc-macros will be ignored when trying to expand them.\\n\\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.procMacro.server\": {\n                     \"markdownDescription\": \"Internal config, path to proc-macro server executable (typically,\\nthis is rust-analyzer itself, but we override this in tests).\",\n                     \"default\": null,\n@@ -941,28 +953,23 @@\n                         \"string\"\n                     ]\n                 },\n-                \"rust-analyzer.procMacro.ignored\": {\n-                    \"markdownDescription\": \"These proc-macros will be ignored when trying to expand them.\\n\\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.\",\n-                    \"default\": {},\n-                    \"type\": \"object\"\n-                },\n-                \"rust-analyzer.runnables.overrideCargo\": {\n+                \"rust-analyzer.runnables.command\": {\n                     \"markdownDescription\": \"Command to be executed instead of 'cargo' for runnables.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n                         \"string\"\n                     ]\n                 },\n-                \"rust-analyzer.runnables.cargoExtraArgs\": {\n+                \"rust-analyzer.runnables.extraArgs\": {\n                     \"markdownDescription\": \"Additional arguments to be passed to cargo for runnables such as\\ntests or binaries. For example, it may be `--release`.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.rustcSource\": {\n+                \"rust-analyzer.rustc.source\": {\n                     \"markdownDescription\": \"Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\\nprojects, or \\\"discover\\\" to try to automatically find it if the `rustc-dev` component\\nis installed.\\n\\nAny project which uses rust-analyzer with the rustcPrivate\\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\\n\\nThis option does not take effect until rust-analyzer is restarted.\",\n                     \"default\": null,\n                     \"type\": [\n@@ -989,23 +996,25 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.rustfmt.enableRangeFormatting\": {\n+                \"rust-analyzer.rustfmt.rangeFormatting.enable\": {\n                     \"markdownDescription\": \"Enables the use of rustfmt's unstable range formatting command for the\\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\\navailable on a nightly build.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.workspace.symbol.search.scope\": {\n-                    \"markdownDescription\": \"Workspace symbol search scope.\",\n-                    \"default\": \"workspace\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"workspace\",\n-                        \"workspace_and_dependencies\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Search in current workspace only\",\n-                        \"Search in current workspace and dependencies\"\n-                    ]\n+                \"rust-analyzer.semanticHighlighting.strings.enable\": {\n+                    \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.signatureInfo.documentation.enable\": {\n+                    \"markdownDescription\": \"Show documentation.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.signatureInfo.signature.enable\": {\n+                    \"markdownDescription\": \"Show full signature of the callable. Only shows parameters if disabled.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.workspace.symbol.search.kind\": {\n                     \"markdownDescription\": \"Workspace symbol search kind.\",\n@@ -1026,6 +1035,19 @@\n                     \"type\": \"integer\",\n                     \"minimum\": 0\n                 },\n+                \"rust-analyzer.workspace.symbol.search.scope\": {\n+                    \"markdownDescription\": \"Workspace symbol search scope.\",\n+                    \"default\": \"workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"workspace\",\n+                        \"workspace_and_dependencies\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Search in current workspace only\",\n+                        \"Search in current workspace and dependencies\"\n+                    ]\n+                },\n                 \"$generated-end\": {}\n             }\n         },"}]}