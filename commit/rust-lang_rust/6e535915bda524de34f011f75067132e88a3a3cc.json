{"sha": "6e535915bda524de34f011f75067132e88a3a3cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNTM1OTE1YmRhNTI0ZGUzNGYwMTFmNzUwNjcxMzJlODhhM2EzY2M=", "commit": {"author": {"name": "Tim", "email": "tdhutt@gmail.com", "date": "2020-03-31T08:01:41Z"}, "committer": {"name": "Tim Hutt", "email": "timh@graphcore.ai", "date": "2020-03-31T08:06:46Z"}, "message": "Use namespace import", "tree": {"sha": "2ac5bb244d501ef0fbf0d2279aeb063fbf10673d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac5bb244d501ef0fbf0d2279aeb063fbf10673d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e535915bda524de34f011f75067132e88a3a3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e535915bda524de34f011f75067132e88a3a3cc", "html_url": "https://github.com/rust-lang/rust/commit/6e535915bda524de34f011f75067132e88a3a3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e535915bda524de34f011f75067132e88a3a3cc/comments", "author": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "768aa4259fce15f313042892739ed4d8b7e518b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/768aa4259fce15f313042892739ed4d8b7e518b4", "html_url": "https://github.com/rust-lang/rust/commit/768aa4259fce15f313042892739ed4d8b7e518b4"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "fa1c4a951ddbb68dfaa45b4ef276d244eb97f15a", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e535915bda524de34f011f75067132e88a3a3cc/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6e535915bda524de34f011f75067132e88a3a3cc/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=6e535915bda524de34f011f75067132e88a3a3cc", "patch": "@@ -1,19 +1,11 @@\n-import {\n-    Disposable,\n-    ShellExecution,\n-    Task,\n-    TaskGroup,\n-    TaskProvider,\n-    tasks,\n-    WorkspaceFolder,\n-} from 'vscode';\n+import * as vscode from 'vscode';\n \n // This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n // our configuration should be compatible with it so use the same key.\n const TASK_TYPE = 'cargo';\n \n-export function activateTaskProvider(target: WorkspaceFolder): Disposable {\n-    const provider: TaskProvider = {\n+export function activateTaskProvider(target: vscode.WorkspaceFolder): vscode.Disposable {\n+    const provider: vscode.TaskProvider = {\n         // Detect Rust tasks. Currently we do not do any actual detection\n         // of tasks (e.g. aliases in .cargo/config) and just return a fixed\n         // set of tasks that always exist. These tasks cannot be removed in\n@@ -24,19 +16,19 @@ export function activateTaskProvider(target: WorkspaceFolder): Disposable {\n         resolveTask: () => undefined,\n     };\n \n-    return tasks.registerTaskProvider(TASK_TYPE, provider);\n+    return vscode.tasks.registerTaskProvider(TASK_TYPE, provider);\n }\n \n-function getStandardCargoTasks(target: WorkspaceFolder): Task[] {\n+function getStandardCargoTasks(target: vscode.WorkspaceFolder): vscode.Task[] {\n     return [\n-        { command: 'build', group: TaskGroup.Build },\n-        { command: 'check', group: TaskGroup.Build },\n-        { command: 'test', group: TaskGroup.Test },\n-        { command: 'clean', group: TaskGroup.Clean },\n+        { command: 'build', group: vscode.TaskGroup.Build },\n+        { command: 'check', group: vscode.TaskGroup.Build },\n+        { command: 'test', group: vscode.TaskGroup.Test },\n+        { command: 'clean', group: vscode.TaskGroup.Clean },\n         { command: 'run', group: undefined },\n     ]\n         .map(({ command, group }) => {\n-            const vscodeTask = new Task(\n+            const vscodeTask = new vscode.Task(\n                 // The contents of this object end up in the tasks.json entries.\n                 {\n                     type: TASK_TYPE,\n@@ -50,7 +42,7 @@ function getStandardCargoTasks(target: WorkspaceFolder): Task[] {\n                 `cargo ${command}`,\n                 'rust',\n                 // What to do when this command is executed.\n-                new ShellExecution('cargo', [command]),\n+                new vscode.ShellExecution('cargo', [command]),\n                 // Problem matchers.\n                 ['$rustc'],\n             );"}]}