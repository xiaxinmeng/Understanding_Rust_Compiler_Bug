{"sha": "c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMWUyZjA1YTNlZjI3ZTQ2NGQxZjAwNTdkZGFiY2RlNmZmZGU3MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-20T15:21:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-20T15:21:46Z"}, "message": "auto merge of #13017 : alexcrichton/rust/issue-13010, r=huonw\n\nPreviously, any library of the pattern `lib<name>-<hash>-<version>.so` was\r\n>considered a candidate (rightly so) for loading a crate. Sets are generated for\r\neach unique `<hash>`, and then from these sets a candidate is selected. If a set\r\ncontained more than one element, then it immediately generated an error saying\r\nthat multiple copies of the same dylib were found.\r\n\r\nThis is incorrect because each candidate needs to be validated to actually\r\ncontain a rust library (valid metadata). This commit alters the logic to filter\r\neach set of candidates for a hash to only libraries which are actually rust\r\nlibraries. This means that if multiple false positives are found with the right\r\nname pattern, they're all ignored.\r\n\r\nCloses #13010", "tree": {"sha": "406e59332c306f95e106320f69d7e95c8e1f6b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/406e59332c306f95e106320f69d7e95c8e1f6b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "html_url": "https://github.com/rust-lang/rust/commit/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cfef59cc0922f15979bf4e8a0b344cecfa8d9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cfef59cc0922f15979bf4e8a0b344cecfa8d9e2", "html_url": "https://github.com/rust-lang/rust/commit/8cfef59cc0922f15979bf4e8a0b344cecfa8d9e2"}, {"sha": "068740b3433099d148c8e2d4bcc9b25309f40701", "url": "https://api.github.com/repos/rust-lang/rust/commits/068740b3433099d148c8e2d4bcc9b25309f40701", "html_url": "https://github.com/rust-lang/rust/commit/068740b3433099d148c8e2d4bcc9b25309f40701"}], "stats": {"total": 79, "additions": 60, "deletions": 19}, "files": [{"sha": "eb47b30b9c03c223f3abaf44ee12391f47374a0d", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "patch": "@@ -284,38 +284,46 @@ impl<'a> Context<'a> {\n     //                reading dylib metadata is quite slow.\n     fn extract_one(&mut self, m: HashSet<Path>, flavor: &str,\n                    slot: &mut Option<MetadataBlob>) -> Option<Path> {\n-        if m.len() == 0 { return None }\n-        if m.len() > 1 {\n-            self.sess.span_err(self.span,\n-                               format!(\"multiple {} candidates for `{}` \\\n-                                        found\", flavor, self.crate_id.name));\n-            for (i, path) in m.iter().enumerate() {\n-                self.sess.span_note(self.span,\n-                                    format!(r\"candidate \\#{}: {}\", i + 1,\n-                                            path.display()));\n-            }\n-            return None\n-        }\n+        let mut ret = None::<Path>;\n+        let mut error = 0;\n \n-        let lib = m.move_iter().next().unwrap();\n-        if slot.is_none() {\n+        for lib in m.move_iter() {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n-            match get_metadata_section(self.os, &lib) {\n+            let metadata = match get_metadata_section(self.os, &lib) {\n                 Ok(blob) => {\n                     if self.crate_matches(blob.as_slice()) {\n-                        *slot = Some(blob);\n+                        blob\n                     } else {\n                         info!(\"metadata mismatch\");\n-                        return None;\n+                        continue\n                     }\n                 }\n                 Err(_) => {\n                     info!(\"no metadata found\");\n-                    return None\n+                    continue\n                 }\n+            };\n+            if ret.is_some() {\n+                self.sess.span_err(self.span,\n+                                   format!(\"multiple {} candidates for `{}` \\\n+                                            found\", flavor, self.crate_id.name));\n+                self.sess.span_note(self.span,\n+                                    format!(r\"candidate \\#1: {}\",\n+                                            ret.get_ref().display()));\n+                error = 1;\n+                ret = None;\n+            }\n+            if error > 0 {\n+                error += 1;\n+                self.sess.span_note(self.span,\n+                                    format!(r\"candidate \\#{}: {}\", error,\n+                                            lib.display()));\n+                continue\n             }\n+            *slot = Some(metadata);\n+            ret = Some(lib);\n         }\n-        return Some(lib);\n+        return if error > 0 {None} else {ret}\n     }\n \n     fn crate_matches(&mut self, crate_data: &[u8]) -> bool {"}, {"sha": "621f3064b5cede48a67a32fd9bcf51f44a39800f", "filename": "src/test/run-make/suspicious-library/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Ftest%2Frun-make%2Fsuspicious-library%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Ftest%2Frun-make%2Fsuspicious-library%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsuspicious-library%2FMakefile?ref=c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs\n+\ttouch $(call DYLIB,foo-something-special)\n+\ttouch $(call DYLIB,foo-something-special2)\n+\t$(RUSTC) bar.rs"}, {"sha": "ed0e8a7e23e80ac10908a40235953b52a9f73cda", "filename": "src/test/run-make/suspicious-library/bar.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Ftest%2Frun-make%2Fsuspicious-library%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Ftest%2Frun-make%2Fsuspicious-library%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsuspicious-library%2Fbar.rs?ref=c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+fn main() { foo::foo() }"}, {"sha": "890fd3a7dd66150de0affbfabdec46789b9f3dc0", "filename": "src/test/run-make/suspicious-library/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Ftest%2Frun-make%2Fsuspicious-library%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01e2f05a3ef27e464d1f0057ddabcde6ffde70c/src%2Ftest%2Frun-make%2Fsuspicious-library%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsuspicious-library%2Ffoo.rs?ref=c01e2f05a3ef27e464d1f0057ddabcde6ffde70c", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_type = \"dylib\"];\n+\n+pub fn foo() {}"}]}