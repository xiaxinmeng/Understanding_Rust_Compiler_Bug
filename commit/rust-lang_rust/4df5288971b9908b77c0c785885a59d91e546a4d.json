{"sha": "4df5288971b9908b77c0c785885a59d91e546a4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZjUyODg5NzFiOTkwOGI3N2MwYzc4NTg4NWE1OWQ5MWU1NDZhNGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-09T01:27:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-16T18:57:46Z"}, "message": "move duplicate checking into TypeCheck\n\nThis completes the effort to not touch the impl-items during\n`Collect(Impl)`.", "tree": {"sha": "0c5bffb3c7170b20b36af61ede32ed3cbd8a3192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5bffb3c7170b20b36af61ede32ed3cbd8a3192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4df5288971b9908b77c0c785885a59d91e546a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4df5288971b9908b77c0c785885a59d91e546a4d", "html_url": "https://github.com/rust-lang/rust/commit/4df5288971b9908b77c0c785885a59d91e546a4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4df5288971b9908b77c0c785885a59d91e546a4d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a39ab8346721cf60cfb15f7e025eb24efc818f", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a39ab8346721cf60cfb15f7e025eb24efc818f", "html_url": "https://github.com/rust-lang/rust/commit/29a39ab8346721cf60cfb15f7e025eb24efc818f"}], "stats": {"total": 85, "additions": 54, "deletions": 31}, "files": [{"sha": "4111fa9a2c0d0de90c00e4865d4235f91a181595", "filename": "src/librustc_typeck/check/impl_item_duplicate.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4df5288971b9908b77c0c785885a59d91e546a4d/src%2Flibrustc_typeck%2Fcheck%2Fimpl_item_duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df5288971b9908b77c0c785885a59d91e546a4d/src%2Flibrustc_typeck%2Fcheck%2Fimpl_item_duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fimpl_item_duplicate.rs?ref=4df5288971b9908b77c0c785885a59d91e546a4d", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir;\n+use rustc_data_structures::fx::FxHashMap;\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n+\n+use CrateCtxt;\n+\n+/// Enforce that we do not have two items in an impl with the same name.\n+pub fn enforce_impl_items_are_distinct<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n+                                                 impl_item_ids: &[hir::ImplItemId])\n+{\n+    let tcx = ccx.tcx;\n+    let mut seen_type_items = FxHashMap();\n+    let mut seen_value_items = FxHashMap();\n+    for &impl_item_id in impl_item_ids {\n+        let impl_item = tcx.map.impl_item(impl_item_id);\n+        let seen_items = match impl_item.node {\n+            hir::ImplItemKind::Type(_) => &mut seen_type_items,\n+            _                    => &mut seen_value_items,\n+        };\n+        match seen_items.entry(impl_item.name) {\n+            Occupied(entry) => {\n+                let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n+                                               \"duplicate definitions with name `{}`:\",\n+                                               impl_item.name);\n+                err.span_label(*entry.get(),\n+                               &format!(\"previous definition of `{}` here\",\n+                                        impl_item.name));\n+                err.span_label(impl_item.span, &format!(\"duplicate definition\"));\n+                err.emit();\n+            }\n+            Vacant(entry) => {\n+                entry.insert(impl_item.span);\n+            }\n+        }\n+    }\n+}"}, {"sha": "7c21ddbe4019148f78e2e37babe4f763da330403", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4df5288971b9908b77c0c785885a59d91e546a4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df5288971b9908b77c0c785885a59d91e546a4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4df5288971b9908b77c0c785885a59d91e546a4d", "patch": "@@ -143,6 +143,7 @@ mod closure;\n mod callee;\n mod compare_method;\n mod intrinsic;\n+mod impl_item_duplicate;\n mod impl_parameters_used;\n mod op;\n \n@@ -834,6 +835,8 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                                                                     impl_def_id,\n                                                                     impl_item_ids);\n \n+          impl_item_duplicate::enforce_impl_items_are_distinct(ccx,\n+                                                               impl_item_ids);\n       }\n       hir::ItemTrait(..) => {\n         let def_id = ccx.tcx.map.local_def_id(it.id);"}, {"sha": "c20e1d1d4d74a1517e8fddc85de3d2b3251fd3d4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4df5288971b9908b77c0c785885a59d91e546a4d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df5288971b9908b77c0c785885a59d91e546a4d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4df5288971b9908b77c0c785885a59d91e546a4d", "patch": "@@ -77,7 +77,6 @@ use CrateCtxt;\n use rustc_const_math::ConstInt;\n \n use std::cell::RefCell;\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use syntax::{abi, ast, attr};\n use syntax::parse::token::{self, keywords};\n@@ -732,7 +731,11 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                       ref generics,\n                       ref opt_trait_ref,\n                       ref selfty,\n-                      ref impl_item_ids) => {\n+                      ref _impl_item_ids /* [1] */) => {\n+            // [1]: We really don't want to be inspecting the details\n+            // of impl-items here; it creates bad edges in the\n+            // incr. comp. graph.\n+\n             // Create generics from the generics specified in the impl head.\n             debug!(\"convert: ast_generics={:?}\", generics);\n             let def_id = ccx.tcx.map.local_def_id(it.id);\n@@ -763,35 +766,6 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                                                &mut ctp::parameters_for_impl(selfty, trait_ref));\n \n             tcx.predicates.borrow_mut().insert(def_id, ty_predicates.clone());\n-\n-\n-            // Convert all the associated consts.\n-            // Also, check if there are any duplicate associated items\n-            let mut seen_type_items = FxHashMap();\n-            let mut seen_value_items = FxHashMap();\n-\n-            for &impl_item_id in impl_item_ids {\n-                let impl_item = tcx.map.impl_item(impl_item_id);\n-                let seen_items = match impl_item.node {\n-                    hir::ImplItemKind::Type(_) => &mut seen_type_items,\n-                    _                    => &mut seen_value_items,\n-                };\n-                match seen_items.entry(impl_item.name) {\n-                    Occupied(entry) => {\n-                        let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n-                                                       \"duplicate definitions with name `{}`:\",\n-                                                       impl_item.name);\n-                        err.span_label(*entry.get(),\n-                                   &format!(\"previous definition of `{}` here\",\n-                                        impl_item.name));\n-                        err.span_label(impl_item.span, &format!(\"duplicate definition\"));\n-                        err.emit();\n-                    }\n-                    Vacant(entry) => {\n-                        entry.insert(impl_item.span);\n-                    }\n-                }\n-            }\n         },\n         hir::ItemTrait(.., ref trait_items) => {\n             let trait_def = trait_def_of_item(ccx, it);"}]}