{"sha": "c8dae10f14122555bfc1625b037b92eb104e67ad", "node_id": "C_kwDOAAsO6NoAKGM4ZGFlMTBmMTQxMjI1NTViZmMxNjI1YjAzN2I5MmViMTA0ZTY3YWQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-06T20:11:43Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-14T12:51:39Z"}, "message": "Check for overflow in evaluate_canonical_goal", "tree": {"sha": "83b9a3ee70806174dbbf6c04e64b3da93bc7ebdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83b9a3ee70806174dbbf6c04e64b3da93bc7ebdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8dae10f14122555bfc1625b037b92eb104e67ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPrg9wACgkQgTGiTgx5\n76/rWA/6AoBmwJwhD2qHzosNOY7vP+bj4MVeE6xWnQrRHmCHGmKxW1AjJrYAXmil\nmKJRfbqm3pEAUwKXBbRXhpg6UMbl/zcqMb2rpJ1pwkiJuq0l0IAlc76AG00RGfny\nLO6V0hCRP72Lxwupn+977LymqwTQKfiNn+DiUZHOeHkCi44/xpRipeGZqbTIfIB7\nmGTLeqVLCKAmU8KjZ1CLyaJiXKL/nnxJXyOw0Rg556AsYR5Bhg0GIz0BL3hvRkJ5\nwI6SNlTDawklWS6ypOncri2rgItSci7tHxMJRuUCHKb8UuAEeMIW4iAFVwaNKmkB\n8IW4/WdMbXfKIVUpX2zeY2L6FgGFlfyaa2YAL3IBXbAtUQUVsspAy8SoRROyr0vR\nVDwk8e4BxYD0aHVJrfp8Yzr/KKmlKsyu4AstX2FZg0H06LfEFv6hQxIhdfIBvZjI\nJs9VKycU8UztwPNM3we7tf4+qgG3lZ1HZKFainnn1cKoYoxmT3oH7eMlr1C4Atlu\nglKwThCeSZlBZOmm5XZ+v9GAUmseiBts1BlKzYHzW6HLvjmQCWDGUqsqIWj0KvxS\nGwB3PMsumssAboaP0HeuuCB6MkDzq6osC5ErLMbYdYAbKX0M/6kieTJE9opMQ1pi\n4Xvwox4ww+hg0yAAIwcb+0xfekmwwomSkuritc1C9GyhOUbS7ws=\n=/wau\n-----END PGP SIGNATURE-----", "payload": "tree 83b9a3ee70806174dbbf6c04e64b3da93bc7ebdb\nparent 826bee7085620843d184dda382b1aa825fc4b770\nauthor Santiago Pastorino <spastorino@gmail.com> 1675714303 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676379099 -0300\n\nCheck for overflow in evaluate_canonical_goal\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8dae10f14122555bfc1625b037b92eb104e67ad", "html_url": "https://github.com/rust-lang/rust/commit/c8dae10f14122555bfc1625b037b92eb104e67ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8dae10f14122555bfc1625b037b92eb104e67ad/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826bee7085620843d184dda382b1aa825fc4b770", "url": "https://api.github.com/repos/rust-lang/rust/commits/826bee7085620843d184dda382b1aa825fc4b770", "html_url": "https://github.com/rust-lang/rust/commit/826bee7085620843d184dda382b1aa825fc4b770"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "d444ca69df1014a5e4c3240be2d8a5315a54d842", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c8dae10f14122555bfc1625b037b92eb104e67ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8dae10f14122555bfc1625b037b92eb104e67ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=c8dae10f14122555bfc1625b037b92eb104e67ad", "patch": "@@ -211,27 +211,16 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         search_graph: &'a mut search_graph::SearchGraph<'tcx>,\n         canonical_goal: CanonicalGoal<'tcx>,\n     ) -> QueryResult<'tcx> {\n-        match search_graph.try_push_stack(tcx, canonical_goal) {\n-            Ok(()) => {}\n-            // Our goal is already on the stack, eager return.\n-            Err(response) => return response,\n-        }\n-\n-        // We may have to repeatedly recompute the goal in case of coinductive cycles,\n-        // check out the `cache` module for more information.\n+        // Deal with overflow, caching, and coinduction.\n         //\n-        // FIXME: Similar to `evaluate_all`, this has to check for overflow.\n-        loop {\n+        // The actual solver logic happens in `ecx.compute_goal`.\n+        search_graph.with_new_goal(tcx, canonical_goal, |search_graph| {\n             let (ref infcx, goal, var_values) =\n                 tcx.infer_ctxt().build_with_canonical(DUMMY_SP, &canonical_goal);\n             let mut ecx =\n                 EvalCtxt { infcx, var_values, search_graph, in_projection_eq_hack: false };\n-            let result = ecx.compute_goal(goal);\n-\n-            if search_graph.try_finalize_goal(tcx, canonical_goal, result) {\n-                return result;\n-            }\n-        }\n+            ecx.compute_goal(goal)\n+        })\n     }\n \n     fn make_canonical_response(&self, certainty: Certainty) -> QueryResult<'tcx> {\n@@ -487,7 +476,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ) -> Result<Certainty, NoSolution> {\n         let mut new_goals = Vec::new();\n         self.repeat_while_none(\n-            |_| Certainty::Maybe(MaybeCause::Overflow),\n+            |_| Ok(Certainty::Maybe(MaybeCause::Overflow)),\n             |this| {\n                 let mut has_changed = Err(Certainty::Yes);\n                 for goal in goals.drain(..) {"}, {"sha": "9b398ef0e6232a4af5e0efa40184a490d0b2462d", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c8dae10f14122555bfc1625b037b92eb104e67ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8dae10f14122555bfc1625b037b92eb104e67ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=c8dae10f14122555bfc1625b037b92eb104e67ad", "patch": "@@ -3,6 +3,7 @@ pub(crate) mod overflow;\n \n use self::cache::ProvisionalEntry;\n use super::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n+use crate::solve::search_graph::overflow::OverflowHandler;\n use cache::ProvisionalCache;\n use overflow::OverflowData;\n use rustc_index::vec::IndexVec;\n@@ -13,7 +14,7 @@ rustc_index::newtype_index! {\n     pub struct StackDepth {}\n }\n \n-struct StackElem<'tcx> {\n+pub(crate) struct StackElem<'tcx> {\n     goal: CanonicalGoal<'tcx>,\n     has_been_used: bool,\n }\n@@ -127,7 +128,8 @@ impl<'tcx> SearchGraph<'tcx> {\n         actual_goal: CanonicalGoal<'tcx>,\n         response: QueryResult<'tcx>,\n     ) -> bool {\n-        let StackElem { goal, has_been_used } = self.stack.pop().unwrap();\n+        let stack_elem = self.stack.pop().unwrap();\n+        let StackElem { goal, has_been_used } = stack_elem;\n         assert_eq!(goal, actual_goal);\n \n         let cache = &mut self.provisional_cache;\n@@ -156,18 +158,19 @@ impl<'tcx> SearchGraph<'tcx> {\n             self.stack.push(StackElem { goal, has_been_used: false });\n             false\n         } else {\n-            self.try_move_finished_goal_to_global_cache(tcx, &goal);\n+            self.try_move_finished_goal_to_global_cache(tcx, stack_elem);\n             true\n         }\n     }\n \n     pub(super) fn try_move_finished_goal_to_global_cache(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n-        goal: &CanonicalGoal<'tcx>,\n+        stack_elem: StackElem<'tcx>,\n     ) {\n+        let StackElem { goal, .. } = stack_elem;\n         let cache = &mut self.provisional_cache;\n-        let provisional_entry_index = *cache.lookup_table.get(goal).unwrap();\n+        let provisional_entry_index = *cache.lookup_table.get(&goal).unwrap();\n         let provisional_entry = &mut cache.entries[provisional_entry_index];\n         let depth = provisional_entry.depth;\n \n@@ -193,4 +196,34 @@ impl<'tcx> SearchGraph<'tcx> {\n             }\n         }\n     }\n+\n+    pub(super) fn with_new_goal(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        canonical_goal: CanonicalGoal<'tcx>,\n+        mut loop_body: impl FnMut(&mut Self) -> QueryResult<'tcx>,\n+    ) -> QueryResult<'tcx> {\n+        match self.try_push_stack(tcx, canonical_goal) {\n+            Ok(()) => {}\n+            // Our goal is already on the stack, eager return.\n+            Err(response) => return response,\n+        }\n+\n+        self.repeat_while_none(\n+            |this| {\n+                let result = this.deal_with_overflow(tcx, canonical_goal);\n+                let stack_elem = this.stack.pop().unwrap();\n+                this.try_move_finished_goal_to_global_cache(tcx, stack_elem);\n+                result\n+            },\n+            |this| {\n+                let result = loop_body(this);\n+                if this.try_finalize_goal(tcx, canonical_goal, result) {\n+                    Some(result)\n+                } else {\n+                    None\n+                }\n+            },\n+        )\n+    }\n }"}, {"sha": "ea62152789e48b4c8a76f6ab8f34161da7f7a769", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8dae10f14122555bfc1625b037b92eb104e67ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8dae10f14122555bfc1625b037b92eb104e67ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs?ref=c8dae10f14122555bfc1625b037b92eb104e67ad", "patch": "@@ -55,7 +55,7 @@ pub(crate) trait OverflowHandler<'tcx> {\n \n     fn repeat_while_none<T>(\n         &mut self,\n-        on_overflow: impl FnOnce(&mut Self) -> T,\n+        on_overflow: impl FnOnce(&mut Self) -> Result<T, NoSolution>,\n         mut loop_body: impl FnMut(&mut Self) -> Option<Result<T, NoSolution>>,\n     ) -> Result<T, NoSolution> {\n         let start_depth = self.search_graph().overflow_data.additional_depth;\n@@ -70,7 +70,7 @@ pub(crate) trait OverflowHandler<'tcx> {\n         }\n         self.search_graph().overflow_data.additional_depth = start_depth;\n         self.search_graph().overflow_data.deal_with_overflow();\n-        Ok(on_overflow(self))\n+        on_overflow(self)\n     }\n }\n "}]}