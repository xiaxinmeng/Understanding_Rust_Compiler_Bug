{"sha": "4e1fac89bb3e757801735ba6220ddf756054e071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMWZhYzg5YmIzZTc1NzgwMTczNWJhNjIyMGRkZjc1NjA1NGUwNzE=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T09:10:50Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T09:10:50Z"}, "message": "Move `position` and `rposition` methods to `ImmutableVector` trait", "tree": {"sha": "4eb68a2af0044c35dfa5fdc960deaccc75cb3389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb68a2af0044c35dfa5fdc960deaccc75cb3389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1fac89bb3e757801735ba6220ddf756054e071", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1fac89bb3e757801735ba6220ddf756054e071", "html_url": "https://github.com/rust-lang/rust/commit/4e1fac89bb3e757801735ba6220ddf756054e071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1fac89bb3e757801735ba6220ddf756054e071/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "html_url": "https://github.com/rust-lang/rust/commit/3aa1122ec25d15a2a73a295f8298ad9c38b09a10"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "be903413ace8d4ec9519d13b023730da105614ea", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4e1fac89bb3e757801735ba6220ddf756054e071/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1fac89bb3e757801735ba6220ddf756054e071/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=4e1fac89bb3e757801735ba6220ddf756054e071", "patch": "@@ -2069,6 +2069,8 @@ pub trait ImmutableVector<'self, T> {\n     fn initn(&self, n: uint) -> &'self [T];\n     fn last(&self) -> &'self T;\n     fn last_opt(&self) -> Option<&'self T>;\n+    fn position(&self, f: &fn(t: &T) -> bool) -> Option<uint>;\n+    fn rposition(&self, f: &fn(t: &T) -> bool) -> Option<uint>;\n     #[cfg(stage0)]\n     fn each_reverse(&self, blk: &fn(&T) -> bool);\n     #[cfg(not(stage0))]\n@@ -2136,6 +2138,30 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n     #[inline]\n     fn last_opt(&self) -> Option<&'self T> { last_opt(*self) }\n \n+    /**\n+     * Find the first index matching some predicate\n+     *\n+     * Apply function `f` to each element of `v`.  When function `f` returns\n+     * true then an option containing the index is returned. If `f` matches no\n+     * elements then none is returned.\n+     */\n+    #[inline]\n+    fn position(&self, f: &fn(t: &T) -> bool) -> Option<uint> {\n+        position(*self, f)\n+    }\n+\n+    /**\n+     * Find the last index matching some predicate\n+     *\n+     * Apply function `f` to each element of `v` in reverse order.  When\n+     * function `f` returns true then an option containing the index is\n+     * returned. If `f` matches no elements then none is returned.\n+     */\n+    #[inline]\n+    fn rposition(&self, f: &fn(t: &T) -> bool) -> Option<uint> {\n+        rposition(*self, f)\n+    }\n+\n     /// Iterates over a vector's elements in reverse.\n     #[inline]\n     #[cfg(stage0)]\n@@ -2228,43 +2254,17 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n }\n \n pub trait ImmutableEqVector<T:Eq> {\n-    fn position(&self, f: &fn(t: &T) -> bool) -> Option<uint>;\n     fn position_elem(&self, t: &T) -> Option<uint>;\n-    fn rposition(&self, f: &fn(t: &T) -> bool) -> Option<uint>;\n     fn rposition_elem(&self, t: &T) -> Option<uint>;\n }\n \n impl<'self,T:Eq> ImmutableEqVector<T> for &'self [T] {\n-    /**\n-     * Find the first index matching some predicate\n-     *\n-     * Apply function `f` to each element of `v`.  When function `f` returns\n-     * true then an option containing the index is returned. If `f` matches no\n-     * elements then none is returned.\n-     */\n-    #[inline]\n-    fn position(&self, f: &fn(t: &T) -> bool) -> Option<uint> {\n-        position(*self, f)\n-    }\n-\n     /// Find the first index containing a matching value\n     #[inline]\n     fn position_elem(&self, x: &T) -> Option<uint> {\n         position_elem(*self, x)\n     }\n \n-    /**\n-     * Find the last index matching some predicate\n-     *\n-     * Apply function `f` to each element of `v` in reverse order.  When\n-     * function `f` returns true then an option containing the index is\n-     * returned. If `f` matches no elements then none is returned.\n-     */\n-    #[inline]\n-    fn rposition(&self, f: &fn(t: &T) -> bool) -> Option<uint> {\n-        rposition(*self, f)\n-    }\n-\n     /// Find the last index containing a matching value\n     #[inline]\n     fn rposition_elem(&self, t: &T) -> Option<uint> {"}]}