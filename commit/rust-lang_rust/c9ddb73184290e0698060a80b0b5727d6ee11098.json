{"sha": "c9ddb73184290e0698060a80b0b5727d6ee11098", "node_id": "C_kwDOAAsO6NoAKGM5ZGRiNzMxODQyOTBlMDY5ODA2MGE4MGIwYjU3MjdkNmVlMTEwOTg", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-17T08:35:43Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-19T07:20:20Z"}, "message": "refactor: refactor identifier parsing somewhat", "tree": {"sha": "8e1885f39b4962c4d58e7b1e6b941f7521a0d762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1885f39b4962c4d58e7b1e6b941f7521a0d762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ddb73184290e0698060a80b0b5727d6ee11098", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQWt7QACgkQZ6vxb7Ds\n2HAUfRAAt7Sn32CKUtHctHauMmh9Wqh11wpNzd65BGgCYVzimzuSCSHcBNU6vsyA\nVP6eGp9QGfd2ks3a0ruO24PIguGVMMXFJ+3PafBkWeNJDj7Wr+XUx/I7DgjwkO/K\nF9fxQrv3UNB92UiRWJmfJBd/ou+nG+c0lDoTdkVmLsk3tgPzMyMoKwKdA6YVku8+\nZ3JaFt4g8wkb9MkKAHl7iFMPiJm7iRqnbMVMDAyEwOeA+Bo04B3DZn/1kJ3nxKDU\nQjP01aZsaVcS93FJV28F3nmts/PqNMYcEwg3MwYemR6B2lGybr5Ym+5UYvVDY+S6\nBmZpiRN3LCwPuP5mNupaFIid7XOEqvREdIsszBlqqbIZHDMFjlY4rtqK4JM2NCdS\nBrBxtOGPblQvWK++HheRiY2cRmfogKvhDVCkc4FeX/6cmn7H0HZOdS4KP2q6i5IY\nVBKLHMlT+Wsrx6897XE8Vy9Fxzxbi72wfeZntrga6XFwumKqi9kRHh/4WtL4ODUe\n/BlGM+ZhIvqm0BWNF12JFm9fYS72LmTXG5Zu27/5Fg9YX4NxCL7mCuL6DW4iiTcD\nwZ2aSihu5AtbqNH/ns64C3vJ99HLKBoEIehIxVBDHMGK6WcaJwtAptuGr2G+zDwk\nw5RFuDG9iN0EyXpuAA4nBBXUjnKGvg/s95hct/7nCJ6Up8ySzPA=\n=AqXg\n-----END PGP SIGNATURE-----", "payload": "tree 8e1885f39b4962c4d58e7b1e6b941f7521a0d762\nparent 85123d2504885e4670d80dab96f4f9629f2be98b\nauthor Ezra Shaw <ezrasure@outlook.com> 1679042143 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1679210420 +1300\n\nrefactor: refactor identifier parsing somewhat\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ddb73184290e0698060a80b0b5727d6ee11098", "html_url": "https://github.com/rust-lang/rust/commit/c9ddb73184290e0698060a80b0b5727d6ee11098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ddb73184290e0698060a80b0b5727d6ee11098/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85123d2504885e4670d80dab96f4f9629f2be98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/85123d2504885e4670d80dab96f4f9629f2be98b", "html_url": "https://github.com/rust-lang/rust/commit/85123d2504885e4670d80dab96f4f9629f2be98b"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "96765c296e79bdc0b266710380853c5b4c103d1c", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=c9ddb73184290e0698060a80b0b5727d6ee11098", "patch": "@@ -336,7 +336,7 @@ parse_expected_identifier_found_reserved_keyword = expected identifier, found re\n parse_expected_identifier_found_doc_comment = expected identifier, found doc comment\n parse_expected_identifier = expected identifier\n \n-parse_sugg_escape_to_use_as_identifier = escape `{$ident_name}` to use it as an identifier\n+parse_sugg_escape_identifier = escape `{$ident_name}` to use it as an identifier\n \n parse_sugg_remove_comma = remove this comma\n "}, {"sha": "2def5c5b32f178f24f92afe9aa6cc86eaad27583", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=c9ddb73184290e0698060a80b0b5727d6ee11098", "patch": "@@ -888,12 +888,12 @@ pub(crate) struct InvalidMetaItem {\n \n #[derive(Subdiagnostic)]\n #[suggestion(\n-    parse_sugg_escape_to_use_as_identifier,\n+    parse_sugg_escape_identifier,\n     style = \"verbose\",\n     applicability = \"maybe-incorrect\",\n     code = \"r#\"\n )]\n-pub(crate) struct SuggEscapeToUseAsIdentifier {\n+pub(crate) struct SuggEscapeIdentifier {\n     #[primary_span]\n     pub span: Span,\n     pub ident_name: String,\n@@ -937,7 +937,7 @@ impl ExpectedIdentifierFound {\n pub(crate) struct ExpectedIdentifier {\n     pub span: Span,\n     pub token: Token,\n-    pub suggest_raw: Option<SuggEscapeToUseAsIdentifier>,\n+    pub suggest_raw: Option<SuggEscapeIdentifier>,\n     pub suggest_remove_comma: Option<SuggRemoveComma>,\n     pub help_cannot_start_number: Option<HelpIdentifierStartsWithNumber>,\n }"}, {"sha": "a9f24ab44ea84d71f313b2181c8c40f9aa9566ff", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c9ddb73184290e0698060a80b0b5727d6ee11098", "patch": "@@ -6,14 +6,14 @@ use super::{\n use crate::errors::{\n     AmbiguousPlus, AttributeOnParamType, BadQPathStage2, BadTypePlus, BadTypePlusSub,\n     ComparisonOperatorsCannotBeChained, ComparisonOperatorsCannotBeChainedSugg,\n-    ConstGenericWithoutBraces, ConstGenericWithoutBracesSugg, DocCommentOnParamType,\n-    DoubleColonInBound, ExpectedIdentifier, ExpectedSemi, ExpectedSemiSugg,\n+    ConstGenericWithoutBraces, ConstGenericWithoutBracesSugg, DocCommentDoesNotDocumentAnything,\n+    DocCommentOnParamType, DoubleColonInBound, ExpectedIdentifier, ExpectedSemi, ExpectedSemiSugg,\n     GenericParamsWithoutAngleBrackets, GenericParamsWithoutAngleBracketsSugg,\n     HelpIdentifierStartsWithNumber, InInTypo, IncorrectAwait, IncorrectSemicolon,\n     IncorrectUseOfAwait, ParenthesesInForHead, ParenthesesInForHeadSugg,\n     PatternMethodParamWithoutBody, QuestionMarkInType, QuestionMarkInTypeSugg, SelfParamNotFirst,\n     StructLiteralBodyWithoutPath, StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens,\n-    StructLiteralNeedingParensSugg, SuggEscapeToUseAsIdentifier, SuggRemoveComma,\n+    StructLiteralNeedingParensSugg, SuggEscapeIdentifier, SuggRemoveComma,\n     UnexpectedConstInGenericParam, UnexpectedConstParamDeclaration,\n     UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets, UseEqInstead,\n };\n@@ -268,7 +268,16 @@ impl<'a> Parser<'a> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n \n+    /// Emits an error with suggestions if an identifier was expected but not found.\n     pub(super) fn expected_ident_found(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        if let TokenKind::DocComment(..) = self.prev_token.kind {\n+            return DocCommentDoesNotDocumentAnything {\n+                span: self.prev_token.span,\n+                missing_comma: None,\n+            }\n+            .into_diagnostic(&self.sess.span_diagnostic);\n+        }\n+\n         let valid_follow = &[\n             TokenKind::Eq,\n             TokenKind::Colon,\n@@ -286,7 +295,7 @@ impl<'a> Parser<'a> {\n                 if ident.is_raw_guess()\n                     && self.look_ahead(1, |t| valid_follow.contains(&t.kind)) =>\n             {\n-                Some(SuggEscapeToUseAsIdentifier {\n+                Some(SuggEscapeIdentifier {\n                     span: ident.span.shrink_to_lo(),\n                     // `Symbol::to_string()` is different from `Symbol::into_diagnostic_arg()`,\n                     // which uses `Symbol::to_ident_string()` and \"helpfully\" adds an implicit `r#`"}, {"sha": "b7415dc8fb84c37da4d022c0737d370ab00e2b83", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=c9ddb73184290e0698060a80b0b5727d6ee11098", "patch": "@@ -1744,7 +1744,7 @@ impl<'a> Parser<'a> {\n     /// Parses a field identifier. Specialized version of `parse_ident_common`\n     /// for better diagnostics and suggestions.\n     fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n-        let (ident, is_raw) = self.ident_or_err()?;\n+        let (ident, is_raw) = self.ident_or_err(true)?;\n         if !is_raw && ident.is_reserved() {\n             let snapshot = self.create_snapshot_for_diagnostic();\n             let err = if self.check_fn_front_matter(false, Case::Sensitive) {"}, {"sha": "6991520895ddd721ba371bd7b1c3db3c1e572cb7", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddb73184290e0698060a80b0b5727d6ee11098/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=c9ddb73184290e0698060a80b0b5727d6ee11098", "patch": "@@ -42,8 +42,7 @@ use thin_vec::ThinVec;\n use tracing::debug;\n \n use crate::errors::{\n-    DocCommentDoesNotDocumentAnything, IncorrectVisibilityRestriction, MismatchedClosingDelimiter,\n-    NonStringAbiLiteral,\n+    IncorrectVisibilityRestriction, MismatchedClosingDelimiter, NonStringAbiLiteral,\n };\n \n bitflags::bitflags! {\n@@ -552,19 +551,8 @@ impl<'a> Parser<'a> {\n         self.parse_ident_common(true)\n     }\n \n-    fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n-        self.token.ident().ok_or_else(|| match self.prev_token.kind {\n-            TokenKind::DocComment(..) => DocCommentDoesNotDocumentAnything {\n-                span: self.prev_token.span,\n-                missing_comma: None,\n-            }\n-            .into_diagnostic(&self.sess.span_diagnostic),\n-            _ => self.expected_ident_found(),\n-        })\n-    }\n-\n     fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {\n-        let (ident, is_raw) = self.ident_or_err()?;\n+        let (ident, is_raw) = self.ident_or_err(recover)?;\n         if !is_raw && ident.is_reserved() {\n             let mut err = self.expected_ident_found();\n             if recover {\n@@ -577,6 +565,17 @@ impl<'a> Parser<'a> {\n         Ok(ident)\n     }\n \n+    fn ident_or_err(&mut self, _recover: bool) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n+        let result = self.token.ident().ok_or_else(|| self.expected_ident_found());\n+\n+        let (ident, is_raw) = match result {\n+            Ok(ident) => ident,\n+            Err(err) => return Err(err),\n+        };\n+\n+        Ok((ident, is_raw))\n+    }\n+\n     /// Checks if the next token is `tok`, and returns `true` if so.\n     ///\n     /// This method will automatically add `tok` to `expected_tokens` if `tok` is not"}]}