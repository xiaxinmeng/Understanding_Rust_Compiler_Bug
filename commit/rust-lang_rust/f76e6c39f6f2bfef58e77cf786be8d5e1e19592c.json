{"sha": "f76e6c39f6f2bfef58e77cf786be8d5e1e19592c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NmU2YzM5ZjZmMmJmZWY1OGU3N2NmNzg2YmU4ZDVlMWUxOTU5MmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T22:54:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T00:06:58Z"}, "message": "rt: Fix lock_held_by_current_thread\n\nThis simplifies the check for thread ownership by removing the _locked flag\nand just comparing against the thread ID of the last thread to take the lock.\nIf the running thread took the lock _holding_thread will be equal to\npthread_self(); if _holding_thread is some other value then the running thread\ndoes not have the lock.\n\nSetting a pthread_t to 0 like this is not portable but should work on every\nplatform we are likely to care about for the near future.", "tree": {"sha": "39f5abebef3a22153709dc66f5c76fc8bd82b4d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f5abebef3a22153709dc66f5c76fc8bd82b4d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c", "html_url": "https://github.com/rust-lang/rust/commit/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b5f7865bea09737f67fa7ff5af5ee49b52955bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5f7865bea09737f67fa7ff5af5ee49b52955bb", "html_url": "https://github.com/rust-lang/rust/commit/6b5f7865bea09737f67fa7ff5af5ee49b52955bb"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "b678530e5a4de909cad59cf7f9afea0039068913", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=f76e6c39f6f2bfef58e77cf786be8d5e1e19592c", "patch": "@@ -1,3 +1,4 @@\n+#include <assert.h>\n #include \"../globals.h\"\n \n /*\n@@ -9,8 +10,13 @@\n \n #include \"lock_and_signal.h\"\n \n+// FIXME: This is not a portable way of specifying an invalid pthread_t\n+#define INVALID_THREAD 0\n+\n+\n #if defined(__WIN32__)\n lock_and_signal::lock_and_signal()\n+    : _holding_thread(INVALID_THREAD)\n {\n     // FIXME: In order to match the behavior of pthread_cond_broadcast on\n     // Windows, we create manual reset events. This however breaks the\n@@ -23,7 +29,7 @@ lock_and_signal::lock_and_signal()\n \n #else\n lock_and_signal::lock_and_signal()\n-    : _locked(false)\n+    : _holding_thread(INVALID_THREAD)\n {\n     CHECKED(pthread_cond_init(&_cond, NULL));\n     CHECKED(pthread_mutex_init(&_mutex, NULL));\n@@ -47,11 +53,10 @@ void lock_and_signal::lock() {\n     CHECKED(pthread_mutex_lock(&_mutex));\n     _holding_thread = pthread_self();\n #endif\n-    _locked = true;\n }\n \n void lock_and_signal::unlock() {\n-    _locked = false;\n+    _holding_thread = INVALID_THREAD;\n #if defined(__WIN32__)\n     LeaveCriticalSection(&_cs);\n #else\n@@ -67,7 +72,8 @@ void lock_and_signal::wait() {\n }\n \n bool lock_and_signal::timed_wait(size_t timeout_in_ms) {\n-    _locked = false;\n+    assert(lock_held_by_current_thread());\n+    _holding_thread = INVALID_THREAD;\n     bool rv = true;\n #if defined(__WIN32__)\n     LeaveCriticalSection(&_cs);\n@@ -105,7 +111,6 @@ bool lock_and_signal::timed_wait(size_t timeout_in_ms) {\n     }\n     _holding_thread = pthread_self();\n #endif\n-    _locked = true;\n     return rv;\n }\n \n@@ -134,9 +139,9 @@ void lock_and_signal::signal_all() {\n bool lock_and_signal::lock_held_by_current_thread()\n {\n #if defined(__WIN32__)\n-    return _locked && _holding_thread == GetCurrentThreadId();\n+    return _holding_thread == GetCurrentThreadId();\n #else\n-    return _locked && _holding_thread == pthread_self();\n+    return pthread_equal(_holding_thread, pthread_self());\n #endif\n }\n "}, {"sha": "f5137ca0073fc27bd0888deb302e4c05a6f72a61", "filename": "src/rt/sync/lock_and_signal.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c/src%2Frt%2Fsync%2Flock_and_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/f76e6c39f6f2bfef58e77cf786be8d5e1e19592c/src%2Frt%2Fsync%2Flock_and_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.h?ref=f76e6c39f6f2bfef58e77cf786be8d5e1e19592c", "patch": "@@ -13,7 +13,6 @@ class lock_and_signal {\n \n     pthread_t _holding_thread;\n #endif\n-    bool _locked;\n \n public:\n     lock_and_signal();"}]}