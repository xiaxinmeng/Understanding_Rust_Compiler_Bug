{"sha": "d46c99abe8671479c48b003bf06e98eda7eb85ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NmM5OWFiZTg2NzE0NzljNDhiMDAzYmYwNmU5OGVkYTdlYjg1YWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-12T08:17:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-09T01:45:44Z"}, "message": "std: Funnel read_to_end through to one location\n\nThis pushes the implementation detail of proxying `read_to_end` through to\n`read_to_end_uninitialized` all the way down to the `FileDesc` and `Handle`\nimplementations on Unix/Windows. This way intermediate layers will also be able\nto take advantage of this optimized implementation.\n\nThis commit also adds the optimized implementation for `ChildStdout` and\n`ChildStderr`.", "tree": {"sha": "9cd992343e114fea26c3be8383a2d304e06e4a56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cd992343e114fea26c3be8383a2d304e06e4a56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d46c99abe8671479c48b003bf06e98eda7eb85ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d46c99abe8671479c48b003bf06e98eda7eb85ab", "html_url": "https://github.com/rust-lang/rust/commit/d46c99abe8671479c48b003bf06e98eda7eb85ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d46c99abe8671479c48b003bf06e98eda7eb85ab/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eabfc160f87ccc0b296f49af7fe688506580c473", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabfc160f87ccc0b296f49af7fe688506580c473", "html_url": "https://github.com/rust-lang/rust/commit/eabfc160f87ccc0b296f49af7fe688506580c473"}], "stats": {"total": 147, "additions": 136, "deletions": 11}, "files": [{"sha": "6b88d498b1041666fdd26e07e59ea0ddae099122", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -22,7 +22,6 @@ use ffi::OsString;\n use io::{self, SeekFrom, Seek, Read, Write};\n use path::{Path, PathBuf};\n use sys::fs as fs_imp;\n-use sys_common::io::read_to_end_uninitialized;\n use sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n use vec::Vec;\n use time::SystemTime;\n@@ -351,7 +350,7 @@ impl Read for File {\n         self.inner.read(buf)\n     }\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n+        self.inner.read_to_end(buf)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -372,6 +371,9 @@ impl<'a> Read for &'a File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for &'a File {"}, {"sha": "25309a785c45a3e08b25ea25ac759db63ffa81d1", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -18,7 +18,6 @@ use io::lazy::Lazy;\n use io::{self, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n-use sys_common::io::{read_to_end_uninitialized};\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n use thread::LocalKeyState;\n \n@@ -78,6 +77,9 @@ fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n \n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n }\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n@@ -116,6 +118,12 @@ impl<R: io::Read> io::Read for Maybe<R> {\n             Maybe::Fake => Ok(0)\n         }\n     }\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        match *self {\n+            Maybe::Real(ref mut r) => handle_ebadf(r.read_to_end(buf), 0),\n+            Maybe::Fake => Ok(0)\n+        }\n+    }\n }\n \n fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n@@ -294,7 +302,7 @@ impl<'a> Read for StdinLock<'a> {\n         self.inner.read(buf)\n     }\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n+        self.inner.read_to_end(buf)\n     }\n }\n "}, {"sha": "414696413f49488b9ca26094e1c9c29598b36763", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -14,7 +14,6 @@ use io::prelude::*;\n use fmt;\n use io;\n use net::{ToSocketAddrs, SocketAddr, Shutdown};\n-use sys_common::io::read_to_end_uninitialized;\n use sys_common::net as net_imp;\n use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n@@ -269,7 +268,7 @@ impl TcpStream {\n impl Read for TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n+        self.0.read_to_end(buf)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -281,7 +280,7 @@ impl Write for TcpStream {\n impl<'a> Read for &'a TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n+        self.0.read_to_end(buf)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ec86dd062b540540662d358d18f46a874cceb51e", "filename": "src/libstd/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -134,6 +134,9 @@ impl Read for ChildStdout {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n }\n \n impl AsInner<AnonPipe> for ChildStdout {\n@@ -161,6 +164,9 @@ impl Read for ChildStderr {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n }\n \n impl AsInner<AnonPipe> for ChildStderr {"}, {"sha": "aa92e5be1140330943ec870f855f74f2ae0250c8", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -225,6 +225,10 @@ impl TcpStream {\n         self.inner.read(buf)\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n         let ret = try!(cvt(unsafe {"}, {"sha": "a00e6c3eb7254e2871ec76779f29ff7e7e57202b", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io;\n+use prelude::v1::*;\n+\n+use io::{self, Read};\n use libc::{self, c_int, size_t, c_void};\n use mem;\n+use sync::atomic::{AtomicBool, Ordering};\n use sys::cvt;\n use sys_common::AsInner;\n-use sync::atomic::{AtomicBool, Ordering};\n+use sys_common::io::read_to_end_uninitialized;\n \n pub struct FileDesc {\n     fd: c_int,\n@@ -42,6 +45,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        let mut me = self;\n+        (&mut me).read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let ret = try!(cvt(unsafe {\n             libc::write(self.fd,\n@@ -118,6 +126,17 @@ impl FileDesc {\n     }\n }\n \n+#[unstable(reason = \"not public\", issue = \"0\", feature = \"fd_read\")]\n+impl<'a> Read for &'a FileDesc {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        (**self).read(buf)\n+    }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        unsafe { read_to_end_uninitialized(self, buf) }\n+    }\n+}\n+\n impl AsInner<c_int> for FileDesc {\n     fn as_inner(&self) -> &c_int { &self.fd }\n }"}, {"sha": "3985a07470e0dc4def49786863c7daf6ad474c84", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -486,6 +486,10 @@ impl File {\n         self.0.read(buf)\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "acf501d5fda88a8d6c0eeee4f4225e1cc7bbfea7", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -116,6 +116,10 @@ impl Socket {\n         self.0.read(buf)\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {"}, {"sha": "d88193e62273b7705868adbee6ee3c8a56f46afe", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -57,6 +57,10 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "37d1d9a969ed8d7a435a0fdf4b9818938348a1cf", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use io;\n use libc;\n use sys::fd::FileDesc;\n@@ -25,6 +27,13 @@ impl Stdin {\n         fd.into_raw();\n         ret\n     }\n+\n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        let fd = FileDesc::new(libc::STDIN_FILENO);\n+        let ret = fd.read_to_end(buf);\n+        fd.into_raw();\n+        ret\n+    }\n }\n \n impl Stdout {"}, {"sha": "624fef097fcc5c365f7ded97bf1e7b60c83b634d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n use io::prelude::*;\n use os::windows::prelude::*;\n \n@@ -312,6 +313,10 @@ impl File {\n         self.handle.read(buf)\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.handle.read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.handle.write(buf)\n     }"}, {"sha": "f4b8b2754c5b6df56bad0664a06356d33e389bf0", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -8,14 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use cmp;\n-use io::ErrorKind;\n+use io::{ErrorKind, Read};\n use io;\n use mem;\n use ops::Deref;\n use ptr;\n use sys::c;\n use sys::cvt;\n+use sys_common::io::read_to_end_uninitialized;\n use u32;\n \n /// An owned container for `HANDLE` object, closing them on Drop.\n@@ -87,6 +90,11 @@ impl RawHandle {\n         }\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        let mut me = self;\n+        (&mut me).read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let mut amt = 0;\n         // WriteFile takes a DWORD (u32) for the length so it only supports\n@@ -111,3 +119,14 @@ impl RawHandle {\n         Ok(Handle::new(ret))\n     }\n }\n+\n+#[unstable(reason = \"not public\", issue = \"0\", feature = \"fd_read\")]\n+impl<'a> Read for &'a RawHandle {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        (**self).read(buf)\n+    }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        unsafe { read_to_end_uninitialized(self, buf) }\n+    }\n+}"}, {"sha": "01e3a6cd8ed8fcee0901302af39c5d3f6ea89a37", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use cmp;\n-use io;\n+use io::{self, Read};\n use libc::{c_int, c_void, c_ulong};\n use mem;\n use net::{SocketAddr, Shutdown};\n@@ -20,6 +22,7 @@ use sync::Once;\n use sys::c;\n use sys;\n use sys_common::{self, AsInner, FromInner, IntoInner};\n+use sys_common::io::read_to_end_uninitialized;\n use sys_common::net;\n use time::Duration;\n \n@@ -142,6 +145,11 @@ impl Socket {\n         }\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        let mut me = self;\n+        (&mut me).read_to_end(buf)\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>,\n                        kind: c_int) -> io::Result<()> {\n         let timeout = match dur {\n@@ -206,6 +214,17 @@ impl Socket {\n     }\n }\n \n+#[unstable(reason = \"not public\", issue = \"0\", feature = \"fd_read\")]\n+impl<'a> Read for &'a Socket {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        (**self).read(buf)\n+    }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        unsafe { read_to_end_uninitialized(self, buf) }\n+    }\n+}\n+\n impl Drop for Socket {\n     fn drop(&mut self) {\n         let _ = unsafe { c::closesocket(self.0) };"}, {"sha": "8c3171d2470bcd63a9946ab386842fa989455693", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use io;\n use ptr;\n use sys::cvt;\n@@ -41,6 +43,10 @@ impl AnonPipe {\n         self.inner.read(buf)\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }"}, {"sha": "5a8705bf0cb9852e7ff78a7b7e63a2b1c4097501", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c99abe8671479c48b003bf06e98eda7eb85ab/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=d46c99abe8671479c48b003bf06e98eda7eb85ab", "patch": "@@ -18,6 +18,7 @@ use sync::Mutex;\n use sys::c;\n use sys::cvt;\n use sys::handle::Handle;\n+use sys_common::io::read_to_end_uninitialized;\n \n pub struct NoClose(Option<Handle>);\n \n@@ -113,6 +114,22 @@ impl Stdin {\n         // MemReader shouldn't error here since we just filled it\n         utf8.read(buf)\n     }\n+\n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        let mut me = self;\n+        (&mut me).read_to_end(buf)\n+    }\n+}\n+\n+#[unstable(reason = \"not public\", issue = \"0\", feature = \"fd_read\")]\n+impl<'a> Read for &'a Stdin {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        (**self).read(buf)\n+    }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        unsafe { read_to_end_uninitialized(self, buf) }\n+    }\n }\n \n impl Stdout {"}]}