{"sha": "8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMWQwZGVmZGYzNGYwMTdjYTVhZWViZmU4NTkyNGMxYWMwMjhjODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-21T21:35:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-21T21:35:21Z"}, "message": "Auto merge of #58592 - nikomatsakis:universe-leak-check, r=aturon\n\nRe-implement leak check in terms of universes\n\nThis PR temporarily restores the leak-check, but implemented in terms of universes. This is not because the leak check behavior was necessarily **correct**, but because (a) we may want to have a transition period and because (b) we want to have more breathing room to work through the full implications of handling higher-ranked types correctly. Note that this PR builds atop https://github.com/rust-lang/rust/pull/58056.\n\nFixes #58451\nFixes #46989\nFixes #57639\n\nr? @aturon\ncc @arielb1, @lqd\n\n~~Temporary note: I've not finished running `./x.py test` locally -- I'm confident a lot of error messages in tests will need updating. I sort of expect them to revert to the older, (imo) less good error messages, which is mildly unfortunate. There might be a way to preserve the new error messages, not sure.~~", "tree": {"sha": "112aee9acee8d1d2efe74ae96e5a811075958d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112aee9acee8d1d2efe74ae96e5a811075958d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "html_url": "https://github.com/rust-lang/rust/commit/8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "633d75ac17fa1a1bdaf5923895e6d5b7f3040c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/633d75ac17fa1a1bdaf5923895e6d5b7f3040c92", "html_url": "https://github.com/rust-lang/rust/commit/633d75ac17fa1a1bdaf5923895e6d5b7f3040c92"}, {"sha": "33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "html_url": "https://github.com/rust-lang/rust/commit/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2"}], "stats": {"total": 1652, "additions": 1280, "deletions": 372}, "files": [{"sha": "7c83fe7fd69467c6eb68e971cacc55356973aff5", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -4,6 +4,7 @@\n use super::combine::CombineFields;\n use super::{HigherRankedType, InferCtxt, PlaceholderMap};\n \n+use crate::infer::CombinedSnapshot;\n use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n use crate::ty::{self, Binder, TypeFoldable};\n \n@@ -29,27 +30,32 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n         let span = self.trace.cause.span;\n \n-        // First, we instantiate each bound region in the supertype with a\n-        // fresh placeholder region.\n-        let (b_prime, _) = self.infcx.replace_bound_vars_with_placeholders(b);\n+        return self.infcx.commit_if_ok(|snapshot| {\n+            // First, we instantiate each bound region in the supertype with a\n+            // fresh placeholder region.\n+            let (b_prime, placeholder_map) = self.infcx.replace_bound_vars_with_placeholders(b);\n \n-        // Next, we instantiate each bound region in the subtype\n-        // with a fresh region variable. These region variables --\n-        // but no other pre-existing region variables -- can name\n-        // the placeholders.\n-        let (a_prime, _) =\n-            self.infcx\n-                .replace_bound_vars_with_fresh_vars(span, HigherRankedType, a);\n+            // Next, we instantiate each bound region in the subtype\n+            // with a fresh region variable. These region variables --\n+            // but no other pre-existing region variables -- can name\n+            // the placeholders.\n+            let (a_prime, _) =\n+                self.infcx\n+                    .replace_bound_vars_with_fresh_vars(span, HigherRankedType, a);\n+\n+            debug!(\"a_prime={:?}\", a_prime);\n+            debug!(\"b_prime={:?}\", b_prime);\n \n-        debug!(\"a_prime={:?}\", a_prime);\n-        debug!(\"b_prime={:?}\", b_prime);\n+            // Compare types now that bound regions have been replaced.\n+            let result = self.sub(a_is_expected).relate(&a_prime, &b_prime)?;\n \n-        // Compare types now that bound regions have been replaced.\n-        let result = self.sub(a_is_expected).relate(&a_prime, &b_prime)?;\n+            self.infcx\n+                .leak_check(!a_is_expected, &placeholder_map, snapshot)?;\n \n-        debug!(\"higher_ranked_sub: OK result={:?}\", result);\n+            debug!(\"higher_ranked_sub: OK result={:?}\", result);\n \n-        Ok(ty::Binder::bind(result))\n+            Ok(ty::Binder::bind(result))\n+        });\n     }\n }\n \n@@ -72,10 +78,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/hrtb.html\n     pub fn replace_bound_vars_with_placeholders<T>(\n         &self,\n-        binder: &ty::Binder<T>\n+        binder: &ty::Binder<T>,\n     ) -> (T, PlaceholderMap<'tcx>)\n     where\n-        T: TypeFoldable<'tcx>\n+        T: TypeFoldable<'tcx>,\n     {\n         let next_universe = self.create_next_universe();\n \n@@ -97,16 +103,24 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\n             \"replace_bound_vars_with_placeholders(\\\n-                next_universe={:?}, \\\n-                binder={:?}, \\\n-                result={:?}, \\\n-                map={:?})\",\n-            next_universe,\n-            binder,\n-            result,\n-            map,\n+             next_universe={:?}, \\\n+             binder={:?}, \\\n+             result={:?}, \\\n+             map={:?})\",\n+            next_universe, binder, result, map,\n         );\n \n         (result, map)\n     }\n+\n+    /// See `infer::region_constraints::RegionConstraintCollector::leak_check`.\n+    pub fn leak_check(\n+        &self,\n+        overly_polymorphic: bool,\n+        placeholder_map: &PlaceholderMap<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n+    ) -> RelateResult<'tcx, ()> {\n+        self.borrow_region_constraints()\n+            .leak_check(self.tcx, overly_polymorphic, placeholder_map, snapshot)\n+    }\n }"}, {"sha": "ac2ebece442c8f94e1b61377096e7bac0ac83782", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -937,32 +937,41 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        let (\n-            ty::SubtypePredicate {\n-                a_is_expected,\n-                a,\n-                b,\n-            },\n-            _,\n-        ) = self.replace_bound_vars_with_placeholders(predicate);\n+        Some(self.commit_if_ok(|snapshot| {\n+            let (\n+                ty::SubtypePredicate {\n+                    a_is_expected,\n+                    a,\n+                    b,\n+                },\n+                placeholder_map,\n+            ) = self.replace_bound_vars_with_placeholders(predicate);\n \n-        Some(\n-            self.at(cause, param_env)\n-                .sub_exp(a_is_expected, a, b)\n-                .map(|ok| ok.unit()),\n-        )\n+            let ok = self.at(cause, param_env)\n+                .sub_exp(a_is_expected, a, b)?;\n+\n+            self.leak_check(false, &placeholder_map, snapshot)?;\n+\n+            Ok(ok.unit())\n+        }))\n     }\n \n     pub fn region_outlives_predicate(\n         &self,\n         cause: &traits::ObligationCause<'tcx>,\n         predicate: &ty::PolyRegionOutlivesPredicate<'tcx>,\n-    ) {\n-        let (ty::OutlivesPredicate(r_a, r_b), _) =\n-            self.replace_bound_vars_with_placeholders(predicate);\n-        let origin =\n-            SubregionOrigin::from_obligation_cause(cause, || RelateRegionParamBound(cause.span));\n-        self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`\n+    ) -> UnitResult<'tcx> {\n+        self.commit_if_ok(|snapshot| {\n+            let (ty::OutlivesPredicate(r_a, r_b), placeholder_map) =\n+                self.replace_bound_vars_with_placeholders(predicate);\n+            let origin = SubregionOrigin::from_obligation_cause(\n+                cause,\n+                || RelateRegionParamBound(cause.span),\n+            );\n+            self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`\n+            self.leak_check(false, &placeholder_map, snapshot)?;\n+            Ok(())\n+        })\n     }\n \n     pub fn next_ty_var_id(&self, diverging: bool, origin: TypeVariableOrigin) -> TyVid {"}, {"sha": "8085258610d8489e8796c8141abec3b3686939f1", "filename": "src/librustc/infer/region_constraints/leak_check.rs", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,174 @@\n+use super::*;\n+use crate::infer::{CombinedSnapshot, PlaceholderMap};\n+use crate::ty::error::TypeError;\n+use crate::ty::relate::RelateResult;\n+\n+impl<'tcx> RegionConstraintCollector<'tcx> {\n+    /// Searches region constraints created since `snapshot` that\n+    /// affect one of the placeholders in `placeholder_map`, returning\n+    /// an error if any of the placeholders are related to another\n+    /// placeholder or would have to escape into some parent universe\n+    /// that cannot name them.\n+    ///\n+    /// This is a temporary backwards compatibility measure to try and\n+    /// retain the older (arguably incorrect) behavior of the\n+    /// compiler.\n+    ///\n+    /// NB. The use of snapshot here is mostly an efficiency thing --\n+    /// we could search *all* region constraints, but that'd be a\n+    /// bigger set and the data structures are not setup for that. If\n+    /// we wind up keeping some form of this check long term, it would\n+    /// probably be better to remove the snapshot parameter and to\n+    /// refactor the constraint set.\n+    pub fn leak_check(\n+        &mut self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        overly_polymorphic: bool,\n+        placeholder_map: &PlaceholderMap<'tcx>,\n+        _snapshot: &CombinedSnapshot<'_, 'tcx>,\n+    ) -> RelateResult<'tcx, ()> {\n+        debug!(\"leak_check(placeholders={:?})\", placeholder_map);\n+\n+        assert!(self.in_snapshot());\n+\n+        // If the user gave `-Zno-leak-check`, then skip the leak\n+        // check completely. This is wildly unsound and also not\n+        // unlikely to cause an ICE or two. It is intended for use\n+        // only during a transition period, in which the MIR typeck\n+        // uses the \"universe-style\" check, and the rest of typeck\n+        // uses the more conservative leak check.  Since the leak\n+        // check is more conservative, we can't test the\n+        // universe-style check without disabling it.\n+        if tcx.sess.opts.debugging_opts.no_leak_check {\n+            return Ok(());\n+        }\n+\n+        // Go through each placeholder that we created.\n+        for (_, &placeholder_region) in placeholder_map {\n+            // Find the universe this placeholder inhabits.\n+            let placeholder = match placeholder_region {\n+                ty::RePlaceholder(p) => p,\n+                _ => bug!(\n+                    \"leak_check: expected placeholder found {:?}\",\n+                    placeholder_region,\n+                ),\n+            };\n+\n+            // Find all regions that are related to this placeholder\n+            // in some way. This means any region that either outlives\n+            // or is outlived by a placeholder.\n+            let mut taint_set = TaintSet::new(\n+                TaintDirections::both(),\n+                placeholder_region,\n+            );\n+            taint_set.fixed_point(tcx, &self.undo_log, &self.data.verifys);\n+            let tainted_regions = taint_set.into_set();\n+\n+            // Report an error if two placeholders in the same universe\n+            // are related to one another, or if a placeholder is related\n+            // to something from a parent universe.\n+            for &tainted_region in &tainted_regions {\n+                if let ty::RePlaceholder(_) = tainted_region {\n+                    // Two placeholders cannot be related:\n+                    if tainted_region == placeholder_region {\n+                        continue;\n+                    }\n+                } else if self.universe(tainted_region).can_name(placeholder.universe) {\n+                    continue;\n+                }\n+\n+                return Err(if overly_polymorphic {\n+                    debug!(\"Overly polymorphic!\");\n+                    TypeError::RegionsOverlyPolymorphic(placeholder.name, tainted_region)\n+                } else {\n+                    debug!(\"Not as polymorphic!\");\n+                    TypeError::RegionsInsufficientlyPolymorphic(placeholder.name, tainted_region)\n+                });\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct TaintSet<'tcx> {\n+    directions: TaintDirections,\n+    regions: FxHashSet<ty::Region<'tcx>>,\n+}\n+\n+impl<'tcx> TaintSet<'tcx> {\n+    fn new(directions: TaintDirections, initial_region: ty::Region<'tcx>) -> Self {\n+        let mut regions = FxHashSet::default();\n+        regions.insert(initial_region);\n+        TaintSet {\n+            directions: directions,\n+            regions: regions,\n+        }\n+    }\n+\n+    fn fixed_point(\n+        &mut self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        undo_log: &[UndoLog<'tcx>],\n+        verifys: &[Verify<'tcx>],\n+    ) {\n+        let mut prev_len = 0;\n+        while prev_len < self.len() {\n+            debug!(\n+                \"tainted: prev_len = {:?} new_len = {:?}\",\n+                prev_len,\n+                self.len()\n+            );\n+\n+            prev_len = self.len();\n+\n+            for undo_entry in undo_log {\n+                match undo_entry {\n+                    &AddConstraint(Constraint::VarSubVar(a, b)) => {\n+                        self.add_edge(tcx.mk_region(ReVar(a)), tcx.mk_region(ReVar(b)));\n+                    }\n+                    &AddConstraint(Constraint::RegSubVar(a, b)) => {\n+                        self.add_edge(a, tcx.mk_region(ReVar(b)));\n+                    }\n+                    &AddConstraint(Constraint::VarSubReg(a, b)) => {\n+                        self.add_edge(tcx.mk_region(ReVar(a)), b);\n+                    }\n+                    &AddConstraint(Constraint::RegSubReg(a, b)) => {\n+                        self.add_edge(a, b);\n+                    }\n+                    &AddGiven(a, b) => {\n+                        self.add_edge(a, tcx.mk_region(ReVar(b)));\n+                    }\n+                    &AddVerify(i) => span_bug!(\n+                        verifys[i].origin.span(),\n+                        \"we never add verifications while doing higher-ranked things\",\n+                    ),\n+                    &Purged | &AddCombination(..) | &AddVar(..) => {}\n+                }\n+            }\n+        }\n+    }\n+\n+    fn into_set(self) -> FxHashSet<ty::Region<'tcx>> {\n+        self.regions\n+    }\n+\n+    fn len(&self) -> usize {\n+        self.regions.len()\n+    }\n+\n+    fn add_edge(&mut self, source: ty::Region<'tcx>, target: ty::Region<'tcx>) {\n+        if self.directions.incoming {\n+            if self.regions.contains(&target) {\n+                self.regions.insert(source);\n+            }\n+        }\n+\n+        if self.directions.outgoing {\n+            if self.regions.contains(&source) {\n+                self.regions.insert(target);\n+            }\n+        }\n+    }\n+}"}, {"sha": "8389f0ab1aa79ec374545989347cecf95a53f2ef", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -17,6 +17,8 @@ use crate::ty::{Region, RegionVid};\n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};\n \n+mod leak_check;\n+\n #[derive(Default)]\n pub struct RegionConstraintCollector<'tcx> {\n     /// For each `RegionVid`, the corresponding `RegionVariableOrigin`."}, {"sha": "60a3777abf844257fc9eab1ae27fc36de885af16", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -771,7 +771,13 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n                 }\n                 &ty::Predicate::RegionOutlives(ref binder) => {\n-                    let () = select.infcx().region_outlives_predicate(&dummy_cause, binder);\n+                    if select\n+                        .infcx()\n+                        .region_outlives_predicate(&dummy_cause, binder)\n+                        .is_err()\n+                    {\n+                        return false;\n+                    }\n                 }\n                 &ty::Predicate::TypeOutlives(ref binder) => {\n                     match ("}, {"sha": "3eb49092fed1d6af4f4abc02a83ece899ff6c8b8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -730,9 +730,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     }\n \n                     ty::Predicate::RegionOutlives(ref predicate) => {\n-                        // These errors should show up as region\n-                        // inference failures.\n-                        panic!(\"region outlives {:?} failed\", predicate);\n+                        let predicate = self.resolve_type_vars_if_possible(predicate);\n+                        let err = self.region_outlives_predicate(&obligation.cause,\n+                                                                 &predicate).err().unwrap();\n+                        struct_span_err!(\n+                            self.tcx.sess, span, E0279,\n+                            \"the requirement `{}` is not satisfied (`{}`)\",\n+                            predicate, err,\n+                        )\n                     }\n \n                     ty::Predicate::Projection(..) | ty::Predicate::TypeOutlives(..) => {"}, {"sha": "7648bde1d3c873e51cccf61f712d5e6045d5a317", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -331,8 +331,10 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n             }\n \n             ty::Predicate::RegionOutlives(ref binder) => {\n-                let () = self.selcx.infcx().region_outlives_predicate(&obligation.cause, binder);\n-                ProcessResult::Changed(vec![])\n+                match self.selcx.infcx().region_outlives_predicate(&obligation.cause, binder) {\n+                    Ok(()) => ProcessResult::Changed(vec![]),\n+                    Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),\n+                }\n             }\n \n             ty::Predicate::TypeOutlives(ref binder) => {"}, {"sha": "05141c9daf1d4b23277e175497e270cc8dc42296", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -191,12 +191,15 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n            obligation);\n \n     let infcx = selcx.infcx();\n-    infcx.commit_if_ok(|_| {\n-        let (placeholder_predicate, _) =\n+    infcx.commit_if_ok(|snapshot| {\n+        let (placeholder_predicate, placeholder_map) =\n             infcx.replace_bound_vars_with_placeholders(&obligation.predicate);\n \n         let placeholder_obligation = obligation.with(placeholder_predicate);\n-        project_and_unify_type(selcx, &placeholder_obligation)\n+        let result = project_and_unify_type(selcx, &placeholder_obligation)?;\n+        infcx.leak_check(false, &placeholder_map, snapshot)\n+            .map_err(|err| MismatchedProjectionTypes { err })?;\n+        Ok(result)\n     })\n }\n \n@@ -1427,9 +1430,8 @@ fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n fn confirm_param_env_candidate<'cx, 'gcx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n-    poly_cache_entry: ty::PolyProjectionPredicate<'tcx>)\n-    -> Progress<'tcx>\n-{\n+    poly_cache_entry: ty::PolyProjectionPredicate<'tcx>,\n+) -> Progress<'tcx> {\n     let infcx = selcx.infcx();\n     let cause = &obligation.cause;\n     let param_env = obligation.param_env;"}, {"sha": "05fb40ac10a075147dd6927596103df34214d14b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 62, "deletions": 22, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -29,7 +29,7 @@ use super::{\n \n use crate::dep_graph::{DepKind, DepNodeIndex};\n use crate::hir::def_id::DefId;\n-use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n+use crate::infer::{CombinedSnapshot, InferCtxt, InferOk, PlaceholderMap, TypeFreshener};\n use crate::middle::lang_items;\n use crate::mir::interpret::GlobalId;\n use crate::ty::fast_reject;\n@@ -1667,8 +1667,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             _ => return,\n         }\n \n-        let result = self.infcx.probe(|_| {\n-            self.match_projection_obligation_against_definition_bounds(obligation)\n+        let result = self.infcx.probe(|snapshot| {\n+            self.match_projection_obligation_against_definition_bounds(\n+                obligation,\n+                snapshot,\n+            )\n         });\n \n         if result {\n@@ -1679,26 +1682,27 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn match_projection_obligation_against_definition_bounds(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> bool {\n         let poly_trait_predicate = self.infcx()\n             .resolve_type_vars_if_possible(&obligation.predicate);\n-        let (skol_trait_predicate, _) = self.infcx()\n+        let (placeholder_trait_predicate, placeholder_map) = self.infcx()\n             .replace_bound_vars_with_placeholders(&poly_trait_predicate);\n         debug!(\n             \"match_projection_obligation_against_definition_bounds: \\\n-             skol_trait_predicate={:?}\",\n-            skol_trait_predicate,\n+             placeholder_trait_predicate={:?}\",\n+            placeholder_trait_predicate,\n         );\n \n-        let (def_id, substs) = match skol_trait_predicate.trait_ref.self_ty().sty {\n+        let (def_id, substs) = match placeholder_trait_predicate.trait_ref.self_ty().sty {\n             ty::Projection(ref data) => (data.trait_ref(self.tcx()).def_id, data.substs),\n             ty::Opaque(def_id, substs) => (def_id, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n                     \"match_projection_obligation_against_definition_bounds() called \\\n                      but self-ty is not a projection: {:?}\",\n-                    skol_trait_predicate.trait_ref.self_ty()\n+                    placeholder_trait_predicate.trait_ref.self_ty()\n                 );\n             }\n         };\n@@ -1723,7 +1727,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     self.match_projection(\n                         obligation,\n                         bound.clone(),\n-                        skol_trait_predicate.trait_ref.clone(),\n+                        placeholder_trait_predicate.trait_ref.clone(),\n+                        &placeholder_map,\n+                        snapshot,\n                     )\n                 })\n             });\n@@ -1740,7 +1746,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 let result = self.match_projection(\n                     obligation,\n                     bound,\n-                    skol_trait_predicate.trait_ref.clone(),\n+                    placeholder_trait_predicate.trait_ref.clone(),\n+                    &placeholder_map,\n+                    snapshot,\n                 );\n \n                 assert!(result);\n@@ -1753,13 +1761,17 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         trait_bound: ty::PolyTraitRef<'tcx>,\n-        skol_trait_ref: ty::TraitRef<'tcx>,\n+        placeholder_trait_ref: ty::TraitRef<'tcx>,\n+        placeholder_map: &PlaceholderMap<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> bool {\n-        debug_assert!(!skol_trait_ref.has_escaping_bound_vars());\n+        debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .sup(ty::Binder::dummy(skol_trait_ref), trait_bound)\n+            .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)\n             .is_ok()\n+            &&\n+            self.infcx.leak_check(false, placeholder_map, snapshot).is_ok()\n     }\n \n     /// Given an obligation like `<SomeTrait for T>`, search the obligations that the caller\n@@ -1960,8 +1972,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),\n             |impl_def_id| {\n-                self.infcx.probe(|_| {\n-                    if let Ok(_substs) = self.match_impl(impl_def_id, obligation)\n+                self.infcx.probe(|snapshot| {\n+                    if let Ok(_substs) = self.match_impl(impl_def_id, obligation, snapshot)\n                     {\n                         candidates.vec.push(ImplCandidate(impl_def_id));\n                     }\n@@ -2758,9 +2770,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     }\n \n     fn confirm_projection_candidate(&mut self, obligation: &TraitObligation<'tcx>) {\n-        self.infcx.in_snapshot(|_| {\n+        self.infcx.in_snapshot(|snapshot| {\n             let result =\n-                self.match_projection_obligation_against_definition_bounds(obligation);\n+                self.match_projection_obligation_against_definition_bounds(\n+                    obligation,\n+                    snapshot,\n+                );\n             assert!(result);\n         })\n     }\n@@ -2912,8 +2927,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         // First, create the substitutions by matching the impl again,\n         // this time not in a probe.\n-        self.infcx.in_snapshot(|_| {\n-            let substs = self.rematch_impl(impl_def_id, obligation);\n+        self.infcx.in_snapshot(|snapshot| {\n+            let substs = self.rematch_impl(impl_def_id, obligation, snapshot);\n             debug!(\"confirm_impl_candidate: substs={:?}\", substs);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n             self.vtable_impl(\n@@ -3300,9 +3315,27 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     tcx.mk_existential_predicates(iter)\n                 });\n                 let source_trait = tcx.mk_dynamic(existential_predicates, r_b);\n+\n+                // Require that the traits involved in this upcast are **equal**;\n+                // only the **lifetime bound** is changed.\n+                //\n+                // FIXME: This condition is arguably too strong -- it\n+                // would suffice for the source trait to be a\n+                // *subtype* of the target trait. In particular\n+                // changing from something like `for<'a, 'b> Foo<'a,\n+                // 'b>` to `for<'a> Foo<'a, 'a>` should be\n+                // permitted. And, indeed, in the in commit\n+                // 904a0bde93f0348f69914ee90b1f8b6e4e0d7cbc, this\n+                // condition was loosened. However, when the leak check was added\n+                // back, using subtype here actually guies the coercion code in\n+                // such a way that it accepts `old-lub-glb-object.rs`. This is probably\n+                // a good thing, but I've modified this to `.eq` because I want\n+                // to continue rejecting that test (as we have done for quite some time)\n+                // before we are firmly comfortable with what our behavior\n+                // should be there. -nikomatsakis\n                 let InferOk { obligations, .. } = self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(target, source_trait)\n+                    .eq(target, source_trait) // FIXME -- see below\n                     .map_err(|_| Unimplemented)?;\n                 nested.extend(obligations);\n \n@@ -3504,8 +3537,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> Normalized<'tcx, &'tcx Substs<'tcx>> {\n-        match self.match_impl(impl_def_id, obligation) {\n+        match self.match_impl(impl_def_id, obligation, snapshot) {\n             Ok(substs) => substs,\n             Err(()) => {\n                 bug!(\n@@ -3521,6 +3555,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> Result<Normalized<'tcx, &'tcx Substs<'tcx>>, ()> {\n         let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n \n@@ -3531,7 +3566,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             return Err(());\n         }\n \n-        let (skol_obligation, _) = self.infcx()\n+        let (skol_obligation, placeholder_map) = self.infcx()\n             .replace_bound_vars_with_placeholders(&obligation.predicate);\n         let skol_obligation_trait_ref = skol_obligation.trait_ref;\n \n@@ -3563,6 +3598,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);\n \n+        if let Err(e) = self.infcx.leak_check(false, &placeholder_map, snapshot) {\n+            debug!(\"match_impl: failed leak check due to `{}`\", e);\n+            return Err(());\n+        }\n+\n         debug!(\"match_impl: success impl_substs={:?}\", impl_substs);\n         Ok(Normalized {\n             value: impl_substs,"}, {"sha": "f58e5e4fb69f6a52f78a0b3248c6375b13924181", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,5 +1,5 @@\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, Region, Ty, TyCtxt};\n+use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n@@ -27,6 +27,8 @@ pub enum TypeError<'tcx> {\n     ArgCount,\n \n     RegionsDoesNotOutlive(Region<'tcx>, Region<'tcx>),\n+    RegionsInsufficientlyPolymorphic(BoundRegion, Region<'tcx>),\n+    RegionsOverlyPolymorphic(BoundRegion, Region<'tcx>),\n     RegionsPlaceholderMismatch,\n \n     Sorts(ExpectedFound<Ty<'tcx>>),\n@@ -101,6 +103,18 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             RegionsDoesNotOutlive(..) => {\n                 write!(f, \"lifetime mismatch\")\n             }\n+            RegionsInsufficientlyPolymorphic(br, _) => {\n+                write!(f,\n+                       \"expected bound lifetime parameter{}{}, found concrete lifetime\",\n+                       if br.is_named() { \" \" } else { \"\" },\n+                       br)\n+            }\n+            RegionsOverlyPolymorphic(br, _) => {\n+                write!(f,\n+                       \"expected concrete lifetime, found bound lifetime parameter{}{}\",\n+                       if br.is_named() { \" \" } else { \"\" },\n+                       br)\n+            }\n             RegionsPlaceholderMismatch => {\n                 write!(f, \"one type is more general than the other\")\n             }"}, {"sha": "f9173836cc627080f37d67b5444e33cc53bdf80b", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -434,6 +434,12 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             RegionsDoesNotOutlive(a, b) => {\n                 return tcx.lift(&(a, b)).map(|(a, b)| RegionsDoesNotOutlive(a, b))\n             }\n+            RegionsInsufficientlyPolymorphic(a, b) => {\n+                return tcx.lift(&b).map(|b| RegionsInsufficientlyPolymorphic(a, b))\n+            }\n+            RegionsOverlyPolymorphic(a, b) => {\n+                return tcx.lift(&b).map(|b| RegionsOverlyPolymorphic(a, b))\n+            }\n             RegionsPlaceholderMismatch => RegionsPlaceholderMismatch,\n             IntMismatch(x) => IntMismatch(x),\n             FloatMismatch(x) => FloatMismatch(x),\n@@ -1021,6 +1027,8 @@ EnumTypeFoldableImpl! {\n         (ty::error::TypeError::FixedArraySize)(x),\n         (ty::error::TypeError::ArgCount),\n         (ty::error::TypeError::RegionsDoesNotOutlive)(a, b),\n+        (ty::error::TypeError::RegionsInsufficientlyPolymorphic)(a, b),\n+        (ty::error::TypeError::RegionsOverlyPolymorphic)(a, b),\n         (ty::error::TypeError::RegionsPlaceholderMismatch),\n         (ty::error::TypeError::IntMismatch)(x),\n         (ty::error::TypeError::FloatMismatch)(x),"}, {"sha": "2e2a124db9a5d28cbd1278d0c63d4d478409664e", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,15 +1,26 @@\n fn main() {\n     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n }\n \n // Basic"}, {"sha": "378f352cb92281a9ea1817ff61d0235aa6a404c2", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 175, "deletions": 21, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -7,151 +7,305 @@ LL |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n    |\n note: required by `f1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:16:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n    |\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n+   |\n+LL |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), &()) -> _`\n+   |\n+note: required by `f1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n+   |\n+LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n LL |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n    |\n note: required by `f2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:17:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n    |\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n+LL |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&'a (), &()) -> _`\n+   |\n+note: required by `f2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n+   |\n+LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n+   |\n LL |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n    |\n note: required by `f3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:18:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n    |\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n+   |\n+LL |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), &()) -> _`\n+   |\n+note: required by `f3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n+   |\n+LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n    |\n note: required by `f4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:19:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n    |\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n+   |\n+LL |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), &'r ()) -> _`\n+   |\n+note: required by `f4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n+   |\n+LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n    |\n note: required by `f5`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:20:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:31:1\n    |\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n+   |\n+LL |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&'r (), &'r ()) -> _`\n+   |\n+note: required by `f5`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:31:1\n+   |\n+LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n    |\n note: required by `g1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:23:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n    |\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n+   |\n+LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n+   |\n+note: required by `g1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n+   |\n+LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n LL |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n    |\n note: required by `g2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:24:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n    |\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n+   |\n+LL |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n+   |\n+note: required by `g2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n+   |\n+LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n    |\n note: required by `g3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:25:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n    |\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n+   |\n+LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n+   |\n+note: required by `g3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n+   |\n+LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n LL |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n    |\n note: required by `g4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:26:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:37:1\n+   |\n+LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n+   |\n+LL |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n+   |\n+note: required by `g4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:37:1\n    |\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n note: required by `h1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n    |\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n+   |\n+LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+   |\n+note: required by `h1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n+   |\n+LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n note: required by `h2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n+   |\n+LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n+   |\n+LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     |\n+   |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+   |\n+note: required by `h2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n    |\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 22 previous errors\n \n For more information about this error, try `rustc --explain E0631`."}, {"sha": "e6afa3f71c2f047192663b71ac67fa6b58e3110e", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -89,12 +89,14 @@ pub fn call_bar() {\n \n pub fn call_tuple_one() {\n     tuple_one::<Tuple>();\n-    //~^ ERROR not general enough\n+    //~^ ERROR not satisfied\n+    //~| ERROR type mismatch\n }\n \n pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n-    //~^ ERROR not general enough\n+    //~^ ERROR not satisfied\n+    //~| ERROR type mismatch\n }\n \n pub fn call_tuple_three() {\n@@ -103,7 +105,7 @@ pub fn call_tuple_three() {\n \n pub fn call_tuple_four() {\n     tuple_four::<Tuple>();\n-    //~^ ERROR not general enough\n+    //~^ ERROR not satisfied\n }\n \n fn main() { }"}, {"sha": "3721b69898876f4dfe85ab988c3f121f97656e42", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 76, "deletions": 19, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -34,36 +34,93 @@ LL | |     // ok for UintStruct, but not IntStruct\n LL | | }\n    | |_^\n \n-error: implementation of `TheTrait` is not general enough\n+error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n-   = note: Due to a where-clause on `tuple_one`,\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+note: required by `tuple_one`\n+  --> $DIR/associated-types-eq-hr.rs:56:1\n+   |\n+LL | / fn tuple_one<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick first\n+LL | | }\n+   | |_^\n \n-error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:96:5\n+error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n+   |\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+   |\n+note: required by `tuple_one`\n+  --> $DIR/associated-types-eq-hr.rs:56:1\n+   |\n+LL | / fn tuple_one<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick first\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n+  --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+note: required by `tuple_two`\n+  --> $DIR/associated-types-eq-hr.rs:62:1\n    |\n-   = note: Due to a where-clause on `tuple_two`,\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+LL | / fn tuple_two<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick second\n+LL | | }\n+   | |_^\n+\n+error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n+  --> $DIR/associated-types-eq-hr.rs:97:5\n+   |\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+   |\n+note: required by `tuple_two`\n+  --> $DIR/associated-types-eq-hr.rs:62:1\n+   |\n+LL | / fn tuple_two<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick second\n+LL | | }\n+   | |_^\n \n-error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:105:5\n+error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n+  --> $DIR/associated-types-eq-hr.rs:107:5\n    |\n LL |     tuple_four::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+note: required by `tuple_four`\n+  --> $DIR/associated-types-eq-hr.rs:74:1\n    |\n-   = note: Due to a where-clause on `tuple_four`,\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+LL | / fn tuple_four<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n+LL | | }\n+   | |_^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors occurred: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "cc69e849fe1443c3cc374d30b0b3fe5ecb738b1d", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,17 @@\n-error[E0308]: mismatched types\n+error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^ one type is more general than the other\n+   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n    |\n-   = note: expected type `&'a ()`\n-              found type `&()`\n+note: required by `foo`\n+  --> $DIR/higher-ranked-projection.rs:14:1\n+   |\n+LL | / fn foo<U, T>(_t: T)\n+LL | |     where for<'a> &'a T: Mirror<Image=U>\n+LL | | {}\n+   | |__^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "165e5213e0d344d78c8fe22f92a21964cd6236a8", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -3,7 +3,7 @@ error: compilation successful\n    |\n LL | / fn main() { //[good]~ ERROR compilation successful\n LL | |     foo(());\n-LL | |     //[bad]~^ ERROR mismatched types\n+LL | |     //[bad]~^ ERROR type mismatch\n LL | | }\n    | |_^\n "}, {"sha": "a2ea6d8f206b6ceb5a37e36641f3d2705a55aff4", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -23,5 +23,5 @@ fn foo<U, T>(_t: T)\n #[rustc_error]\n fn main() { //[good]~ ERROR compilation successful\n     foo(());\n-    //[bad]~^ ERROR mismatched types\n+    //[bad]~^ ERROR type mismatch\n }"}, {"sha": "a4e43da91baf8d805275a5913d807202a9014c40", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -28,14 +28,14 @@ fn expect_free_supply_bound() {\n     // Here, we are given a function whose region is bound at closure level,\n     // but we expect one bound in the argument. Error results.\n     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-    //~^ ERROR mismatched types\n+    //~^ ERROR type mismatch\n }\n \n fn expect_bound_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, we are given a `fn(&u32)` but we expect a `fn(&'x\n     // u32)`. In principle, this could be ok, but we demand equality.\n     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-    //~^ ERROR mismatched types\n+    //~^ ERROR type mismatch\n }\n \n fn expect_bound_supply_free_from_closure() {\n@@ -44,7 +44,7 @@ fn expect_bound_supply_free_from_closure() {\n     // the argument level.\n     type Foo<'a> = fn(&'a u32);\n     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-    //~^ ERROR mismatched types\n+    //~^ ERROR type mismatch\n     });\n }\n "}, {"sha": "ab35aeff697b7aa6fb848e3a0886e76cdc2034f3", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -36,33 +36,58 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the b\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:30:52\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |                                                    ^^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n    |\n-   = note: expected type `fn(&u32)`\n-              found type `for<'r> fn(&'r u32)`\n+note: required by `with_closure_expecting_fn_with_free_region`\n+  --> $DIR/expect-fn-supply-fn.rs:1:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n \n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:37:53\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |                                                     ^^^^^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n    |\n-   = note: expected type `for<'r> fn(&'r u32)`\n-              found type `fn(&'x u32)`\n+note: required by `with_closure_expecting_fn_with_bound_region`\n+  --> $DIR/expect-fn-supply-fn.rs:6:1\n+   |\n+LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+LL | |     where F: FnOnce(fn(&u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n \n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:46:53\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |                                                     ^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |\n+note: required by `with_closure_expecting_fn_with_bound_region`\n+  --> $DIR/expect-fn-supply-fn.rs:6:1\n    |\n-   = note: expected type `for<'r> fn(&'r u32)`\n-              found type `fn(&u32)`\n+LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+LL | |     where F: FnOnce(fn(&u32), &i32)\n+LL | | {\n+LL | | }\n+   | |_^\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors occurred: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "db9f9f7665374ce3f0fe00f2dcad8690311fe356", "filename": "src/test/ui/coherence/coherence-subtyping.old.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/633d75ac17fa1a1bdaf5923895e6d5b7f3040c92/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/633d75ac17fa1a1bdaf5923895e6d5b7f3040c92/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr?ref=633d75ac17fa1a1bdaf5923895e6d5b7f3040c92", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n-  --> $DIR/coherence-subtyping.rs:15:1\n-   |\n-LL | impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n-   | --------------------------------------------------------- first implementation here\n-...\n-LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n-   |\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "db9f9f7665374ce3f0fe00f2dcad8690311fe356", "filename": "src/test/ui/coherence/coherence-subtyping.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/633d75ac17fa1a1bdaf5923895e6d5b7f3040c92/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/633d75ac17fa1a1bdaf5923895e6d5b7f3040c92/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr?ref=633d75ac17fa1a1bdaf5923895e6d5b7f3040c92", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n-  --> $DIR/coherence-subtyping.rs:15:1\n-   |\n-LL | impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n-   | --------------------------------------------------------- first implementation here\n-...\n-LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n-   |\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "e74067578069e2ab5745856e7d8c23c7092d7d44", "filename": "src/test/ui/coherence/coherence-subtyping.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,7 +1,11 @@\n // Test that two distinct impls which match subtypes of one another\n // yield coherence errors (or not) depending on the variance.\n+//\n+// Note: This scenario is currently accepted, but as part of the\n+// universe transition (#56105) may eventually become an error.\n \n // revisions: old re\n+// compile-pass\n \n #![cfg_attr(re, feature(re_rebalance_coherence))]\n \n@@ -13,8 +17,6 @@ impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n }\n \n impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n-    //[old]~^ ERROR\n-    //[re]~^^ ERROR\n }\n \n fn main() { }"}, {"sha": "8e2b0b8c6004582f39189427e900633b295a231a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ one type is more general than the other\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n ...\n LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n LL | |                                             for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }"}, {"sha": "dbb501813907659e29a780777f4523b9602a0318", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,14 +1,16 @@\n-error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n+LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n+   | |__________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n+              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5fcb63e17bf31092633487f81a40a6c54359b214", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n+LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "5fcb63e17bf31092633487f81a40a6c54359b214", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n+LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "db9892b48a6f7989c7b6e7add257b5a80cbcd225", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ one type is more general than the other\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n ...\n LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | |                              fn(&'x u32)) }"}, {"sha": "e9fb73411bd397e325f37870dc5049fdbc06a68a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,14 +1,16 @@\n-error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n+LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n+   | |______________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n+              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d0e80faa68e8b8806eea0c009615bafb189eab9a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,14 +1,16 @@\n-error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n+LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n+   | |______________________________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n+              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5fcb63e17bf31092633487f81a40a6c54359b214", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n+LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "3605ecf4f86675b1b000454e8c909a14d5822178", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,14 +1,16 @@\n-error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n+LL | |                                             for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n+   | |______________________________________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected type `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n+              found type `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "fae6e9b5c89ca4c76883ace564de4bb464e41471", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ one type is more general than the other\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n ...\n LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | |                                         for<'a>    fn(Inv<'a>, Inv<'a>)) }"}, {"sha": "5fcb63e17bf31092633487f81a40a6c54359b214", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n+LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "5fcb63e17bf31092633487f81a40a6c54359b214", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-...  |\n-LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n+LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "2f7c1e6fd8c0d0f6af1de1ac0ba90a102a7f0fce", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -42,6 +42,10 @@ macro_rules! check {\n             //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n             //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR\n             //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR\n+            //[bound_a_b_vs_bound_a]~^^^^^^ ERROR mismatched types\n+            //[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR\n+            //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^ ERROR\n+            //[bound_co_a_b_vs_bound_co_a]~^^^^^^^^^ ERROR\n         }\n     }\n }\n@@ -99,8 +103,4 @@ fn main() {\n //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n-//[bound_a_b_vs_bound_a]~^^^^^^ ERROR compilation successful\n-//[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR compilation successful\n-//[bound_co_a_b_vs_bound_co_a]~^^^^^^^^ ERROR compilation successful\n-//[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n }"}, {"sha": "50e1af8f14231937fd75fa14179cca5b5bdd81b8", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,20 @@\n-error: implementation of `Foo` is not general enough\n+error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n   --> $DIR/hrtb-conflate-regions.rs:28:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n    |\n-   = note: Due to a where-clause on `want_foo2`,\n-   = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = help: the following implementations were found:\n+             <SomeStruct as Foo<(&'a isize, &'a isize)>>\n+note: required by `want_foo2`\n+  --> $DIR/hrtb-conflate-regions.rs:8:1\n+   |\n+LL | / fn want_foo2<T>()\n+LL | |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n+LL | | {\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8e8892552b701a5a9f1045526b022d20b064c124", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-exists-forall-fn.rs:17:34\n    |\n LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR mismatched types\n-   |                                  ^^^^^ one type is more general than the other\n+   |                                  ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n    |\n    = note: expected type `for<'b> fn(&'b u32)`\n               found type `fn(&u32)`"}, {"sha": "4c1d4d28a09b01eace9d5efbd5a2596ea8632f14", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,9 +1,7 @@\n-// Test a `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n+// Test a case where variance and higher-ranked types interact in surprising ways.\n //\n // In particular, we test this pattern in trait solving, where it is not connected\n // to any part of the source code.\n-//\n-// compile-pass\n \n trait Trait<T> {}\n \n@@ -30,6 +28,9 @@ fn main() {\n     //     - `?a: ?b` -- solveable if `?b` is also inferred to `'empty`\n     // - So the subtyping check succeeds, somewhat surprisingly.\n     //   This is because we can use `'empty`.\n+    //\n+    // NB. *However*, the reinstated leak-check gives an error here.\n \n     foo::<()>();\n+    //~^ ERROR not satisfied\n }"}, {"sha": "7f2ca037f0f49282fc9ee91f6e29ff14b6d5d405", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+   |\n+LL |     foo::<()>();\n+   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<fn(&'a u32)>>\n+note: required by `foo`\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:8:1\n+   |\n+LL | / fn foo<T>()\n+LL | | where\n+LL | |     T: Trait<for<'b> fn(&'b u32)>,\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "95b57d6c5bb5ed2998209f67667575d0ff262c6a", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,9 +1,7 @@\n-// Test a `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n+// Test a case where variance and higher-ranked types interact in surprising ways.\n //\n // In particular, we test this pattern in trait solving, where it is not connected\n // to any part of the source code.\n-//\n-// compile-pass\n \n trait Trait<T> {}\n \n@@ -32,6 +30,9 @@ fn main() {\n     //         - `?b: ?a` -- solveable if `?b` is inferred to `'static`\n     // - So the subtyping check succeeds, somewhat surprisingly.\n     //   This is because we can use `'static`.\n+    //\n+    // NB. *However*, the reinstated leak-check gives an error here.\n \n     foo::<()>();\n+    //~^ ERROR not satisfied\n }"}, {"sha": "cd5982e7588a7e0f4a7dd93dba65a3e40a35c17b", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `(): Trait<for<'b> fn(fn(&'b u32))>` is not satisfied\n+  --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:5\n+   |\n+LL |     foo::<()>();\n+   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<fn(fn(&'a u32))>>\n+note: required by `foo`\n+  --> $DIR/hrtb-exists-forall-trait-covariant.rs:8:1\n+   |\n+LL | / fn foo<T>()\n+LL | | where\n+LL | |     T: Trait<for<'b> fn(fn(&'b u32))>,\n+LL | | {\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "827a68beee8bd67e6f356c6a5e39dbfca494ce40", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     //     yielding `fn(&!b u32)`, in a fresh universe U1\n     //   - So we get `?a = !b` but the universe U0 assigned to `?a` cannot name `!b`.\n \n-    foo::<()>(); //~ ERROR not general enough\n+    foo::<()>(); //~ ERROR not satisfied\n }"}, {"sha": "f56b81759fedeaf7e6cd35b3bd8bd138575c6a4f", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,21 @@\n-error: implementation of `Trait` is not general enough\n+error[E0277]: the trait bound `(): Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not satisfied\n   --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n    |\n-LL |     foo::<()>(); //~ ERROR not general enough\n-   |     ^^^^^^^^^\n+LL |     foo::<()>(); //~ ERROR not satisfied\n+   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n    |\n-   = note: Due to a where-clause on `foo`,\n-   = note: `()` must implement `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>`\n-   = note: but `()` actually implements `Trait<fn(std::cell::Cell<&'0 u32>)>`, for some specific lifetime `'0`\n+   = help: the following implementations were found:\n+             <() as Trait<fn(std::cell::Cell<&'a u32>)>>\n+note: required by `foo`\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:10:1\n+   |\n+LL | / fn foo<T>()\n+LL | | where\n+LL | |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n+LL | | {\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "77c1789852e523184811ecbeef5e7a0c23466ec9", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,19 @@\n-error[E0308]: mismatched types\n+error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:5\n    |\n LL |     want_bar_for_any_ccx(b); //~ ERROR\n-   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n    |\n-   = note: expected type `for<'ccx> Bar<'ccx>`\n-              found type `Bar<'static>`\n+   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n+note: required by `want_bar_for_any_ccx`\n+  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:31:1\n+   |\n+LL | / fn want_bar_for_any_ccx<B>(b: &B)\n+LL | |     where B : for<'ccx> Bar<'ccx>\n+LL | | {\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "48ebe5017aa62df306ff1efa806a4a39cf689726", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -15,7 +15,7 @@ fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n     where F : Foo<'x>\n {\n     want_foo_for_some_tcx(f);\n-    want_foo_for_any_tcx(f); //~ ERROR E0308\n+    want_foo_for_any_tcx(f); //~ ERROR not satisfied\n }\n \n fn want_foo_for_any_tcx<F>(f: &F)\n@@ -32,7 +32,7 @@ fn want_bar_for_some_ccx<'x,B>(b: &B)\n     want_foo_for_any_tcx(b);\n \n     want_bar_for_some_ccx(b);\n-    want_bar_for_any_ccx(b); //~ ERROR E0308\n+    want_bar_for_any_ccx(b); //~ ERROR not satisfied\n }\n \n fn want_bar_for_any_ccx<B>(b: &B)"}, {"sha": "5914cb3eaa4948c91a993b59642395a99b3a8914", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,21 +1,40 @@\n-error[E0308]: mismatched types\n+error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:5\n    |\n-LL |     want_foo_for_any_tcx(f); //~ ERROR E0308\n-   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+LL |     want_foo_for_any_tcx(f); //~ ERROR not satisfied\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n    |\n-   = note: expected type `for<'tcx> Foo<'tcx>`\n-              found type `Foo<'x>`\n+   = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n+note: required by `want_foo_for_any_tcx`\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:21:1\n+   |\n+LL | / fn want_foo_for_any_tcx<F>(f: &F)\n+LL | |     where F : for<'tcx> Foo<'tcx>\n+LL | | {\n+LL | |     want_foo_for_some_tcx(f);\n+LL | |     want_foo_for_any_tcx(f);\n+LL | | }\n+   | |_^\n \n-error[E0308]: mismatched types\n+error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:5\n    |\n-LL |     want_bar_for_any_ccx(b); //~ ERROR E0308\n-   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+LL |     want_bar_for_any_ccx(b); //~ ERROR not satisfied\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |\n+   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n+note: required by `want_bar_for_any_ccx`\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:38:1\n    |\n-   = note: expected type `for<'ccx> Bar<'ccx>`\n-              found type `Bar<'x>`\n+LL | / fn want_bar_for_any_ccx<B>(b: &B)\n+LL | |     where B : for<'ccx> Bar<'ccx>\n+LL | | {\n+LL | |     want_foo_for_some_tcx(b);\n+...  |\n+LL | |     want_bar_for_any_ccx(b);\n+LL | | }\n+   | |_^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fe2bc1f22250440b4f9700e068b258669cd0a51e", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,22 +1,37 @@\n-error: implementation of `Foo` is not general enough\n+error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n LL |     want_hrtb::<StaticInt>() //~ ERROR\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n    |\n-   = note: Due to a where-clause on `want_hrtb`,\n-   = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`\n-   = note: but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n+   = help: the following implementations were found:\n+             <StaticInt as Foo<&'static isize>>\n+note: required by `want_hrtb`\n+  --> $DIR/hrtb-just-for-static.rs:8:1\n+   |\n+LL | / fn want_hrtb<T>()\n+LL | |     where T : for<'a> Foo<&'a isize>\n+LL | | {\n+LL | | }\n+   | |_^\n \n-error: implementation of `Foo` is not general enough\n+error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n   --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n LL |     want_hrtb::<&'a u32>() //~ ERROR\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n+   |\n+   = help: the following implementations were found:\n+             <&'a u32 as Foo<&'a isize>>\n+note: required by `want_hrtb`\n+  --> $DIR/hrtb-just-for-static.rs:8:1\n    |\n-   = note: Due to a where-clause on `want_hrtb`,\n-   = note: `Foo<&'0 isize>` would have to be implemented for the type `&'a u32`, for any lifetime `'0`\n-   = note: but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n+LL | / fn want_hrtb<T>()\n+LL | |     where T : for<'a> Foo<&'a isize>\n+LL | | {\n+LL | | }\n+   | |_^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2c8590554580719201b873c12e6a9afdbeb89d39", "filename": "src/test/ui/hrtb/issue-46989.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,42 @@\n+// Regression test for #46989:\n+//\n+// In the move to universes, this test started passing.\n+// It is not necessarily WRONG to do so, but it was a bit\n+// surprising. The reason that it passed is that when we were\n+// asked to prove that\n+//\n+//     for<'a> fn(&'a i32): Foo\n+//\n+// we were able to use the impl below to prove\n+//\n+//     fn(&'empty i32): Foo\n+//\n+// and then we were able to prove that\n+//\n+//     fn(&'empty i32) = for<'a> fn(&'a i32)\n+//\n+// This last fact is somewhat surprising, but essentially \"falls out\"\n+// from handling variance correctly. In particular, consider the subtyping\n+// relations. First:\n+//\n+//     fn(&'empty i32) <: for<'a> fn(&'a i32)\n+//\n+// This holds because -- intuitively -- a fn that takes a reference but doesn't use\n+// it can be given a reference with any lifetime. Similarly, the opposite direction:\n+//\n+//     for<'a> fn(&'a i32) <: fn(&'empty i32)\n+//\n+// holds because 'a can be instantiated to 'empty.\n+\n+trait Foo {\n+\n+}\n+\n+impl<A> Foo for fn(A) { }\n+\n+fn assert_foo<T: Foo>() {}\n+\n+fn main() {\n+    assert_foo::<fn(&i32)>();\n+    //~^ ERROR the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n+}"}, {"sha": "b308291d5c0eb81043c904ec6d46ed815d795b3b", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n+  --> $DIR/issue-46989.rs:40:5\n+   |\n+LL |     assert_foo::<fn(&i32)>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n+   |\n+   = help: the following implementations were found:\n+             <fn(A) as Foo>\n+note: required by `assert_foo`\n+  --> $DIR/issue-46989.rs:37:1\n+   |\n+LL | fn assert_foo<T: Foo>() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4bcaef3616bd599f6812b7fef5000a422c1a282d", "filename": "src/test/ui/hrtb/issue-57639.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,29 @@\n+// Regression test for #57639:\n+//\n+// In the move to universes, this test stopped working. The problem\n+// was that when the trait solver was asked to prove `for<'a> T::Item:\n+// Foo<'a>` as part of WF checking, it wound up \"eagerly committing\"\n+// to the where clause, which says that `T::Item: Foo<'a>`, but it\n+// should instead have been using the bound found in the trait\n+// declaration. Pre-universe, this used to work out ok because we got\n+// \"eager errors\" due to the leak check.\n+//\n+// See [this comment on GitHub][c] for more details.\n+//\n+// run-pass\n+//\n+// [c]: https://github.com/rust-lang/rust/issues/57639#issuecomment-455685861\n+\n+trait Foo<'a> {}\n+\n+trait Bar {\n+    type Item: for<'a> Foo<'a>;\n+}\n+\n+fn foo<'a, T>(_: T)\n+where\n+    T: Bar,\n+    T::Item: Foo<'a>,\n+{}\n+\n+fn main() { }"}, {"sha": "229e50576787970f13cbc023969597e10bc2cfbd", "filename": "src/test/ui/hrtb/issue-58451.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for #58451:\n+//\n+// Error reporting here encountered an ICE in the shift to universes.\n+\n+fn f<I>(i: I)\n+where\n+    I: IntoIterator,\n+    I::Item: for<'a> Into<&'a ()>,\n+{}\n+\n+fn main() {\n+    f(&[f()]); //~ ERROR this function takes 1 parameter\n+}"}, {"sha": "79c24855dc96c66652c48e7bdf8042ac9d816c62", "filename": "src/test/ui/hrtb/issue-58451.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,16 @@\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/issue-58451.rs:12:9\n+   |\n+LL | / fn f<I>(i: I)\n+LL | | where\n+LL | |     I: IntoIterator,\n+LL | |     I::Item: for<'a> Into<&'a ()>,\n+LL | | {}\n+   | |__- defined here\n+...\n+LL |       f(&[f()]); //~ ERROR this function takes 1 parameter\n+   |           ^^^ expected 1 parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "ce0c44c147563f3fdb42321f646888eb11f91fa2", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-40000.rs:6:9\n    |\n LL |     foo(bar); //~ ERROR E0308\n-   |         ^^^ one type is more general than the other\n+   |         ^^^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `dyn for<'r> std::ops::Fn(&'r i32)`\n-              found type `dyn std::ops::Fn(&i32)`\n+   = note: expected type `std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r i32) + 'static)>`\n+              found type `std::boxed::Box<dyn std::ops::Fn(_)>`\n \n error: aborting due to previous error\n "}, {"sha": "1fa417fe98ab77b944604f5123b2e9e64049371a", "filename": "src/test/ui/issues/issue-57362-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -17,7 +17,7 @@ impl<T> Trait for fn(&T) {\n \n fn f() {\n     let a: fn(_) = |_: &u8| {};\n-    a.f(); //~ ERROR not general enough\n+    a.f(); //~ ERROR no method named `f`\n }\n \n fn main() {}"}, {"sha": "b21b35849b172b06c5acb0e4559fe7beb1a11a11", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,11 +1,14 @@\n-error: implementation of `Trait` is not general enough\n+error[E0599]: no method named `f` found for type `fn(&u8)` in the current scope\n   --> $DIR/issue-57362-1.rs:20:7\n    |\n-LL |     a.f(); //~ ERROR not general enough\n+LL |     a.f(); //~ ERROR no method named `f`\n    |       ^\n    |\n-   = note: `Trait` would have to be implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`\n-   = note: but `Trait` is actually implemented for the type `for<'r> fn(&'r u8)`\n+   = note: a is a function, perhaps you wish to call it\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `f`, perhaps you need to implement it:\n+           candidate #1: `Trait`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "870d7f28ba95302e5d5deb9e248873935a1ad089", "filename": "src/test/ui/issues/issue-57362-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -19,7 +19,7 @@ impl<'a> X for fn(&'a ()) {\n }\n \n fn g() {\n-    let x = <fn (&())>::make_g(); //~ ERROR not general enough\n+    let x = <fn (&())>::make_g(); //~ ERROR no function or associated item\n }\n \n fn main() {}"}, {"sha": "b8211691f7be6e2d88cc68d047d4010efe0749b1", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,11 +1,15 @@\n-error: implementation of `X` is not general enough\n-  --> $DIR/issue-57362-2.rs:22:13\n+error[E0599]: no function or associated item named `make_g` found for type `for<'r> fn(&'r ())` in the current scope\n+  --> $DIR/issue-57362-2.rs:22:25\n    |\n-LL |     let x = <fn (&())>::make_g(); //~ ERROR not general enough\n-   |             ^^^^^^^^^^^^^^^^^^\n+LL |     let x = <fn (&())>::make_g(); //~ ERROR no function or associated item\n+   |             ------------^^^^^^\n+   |             |\n+   |             function or associated item not found in `for<'r> fn(&'r ())`\n    |\n-   = note: `X` would have to be implemented for the type `for<'r> fn(&'r ())`\n-   = note: but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `make_g`, perhaps you need to implement it:\n+           candidate #1: `X`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "6bf1fd41d77bea8cf764b550a2539308cd9399d9", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -4,15 +4,16 @@\n // longer get an error, because we recognize these two types as\n // equivalent!\n //\n-// compile-pass\n+// Whoops -- now that we reinstituted the leak-check, we get an error\n+// again.\n \n fn foo(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n     let z = match 22 {\n         0 => x,\n-        _ => y,\n+        _ => y, //~ ERROR match arms have incompatible types\n     };\n }\n "}, {"sha": "8f228ea4cad418448364652f56f2d55edc1f6217", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/old-lub-glb-hr.rs:16:14\n+   |\n+LL |       let z = match 22 {\n+   |  _____________-\n+LL | |         0 => x,\n+   | |              - this is found to be of type `for<'r, 's> fn(&'r u8, &'s u8)`\n+LL | |         _ => y, //~ ERROR match arms have incompatible types\n+   | |              ^ expected bound lifetime parameter, found concrete lifetime\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n+              found type `for<'a> fn(&'a u8, &'a u8)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "dcd604a5157e26b39d35cfa9ea4541cafeae79bc", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -7,9 +7,9 @@ fn foo(\n     x: &for<'a, 'b> Foo<&'a u8, &'b u8>,\n     y: &for<'a> Foo<&'a u8, &'a u8>,\n ) {\n-    let z = match 22 { //~ ERROR E0308\n+    let z = match 22 {\n         0 => x,\n-        _ => y,\n+        _ => y, //~ ERROR match arms have incompatible types\n     };\n }\n "}, {"sha": "056f9131dd21cc7076ce8e9d6e903c06561b617a", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,15 +1,17 @@\n-error[E0308]: mismatched types\n-  --> $DIR/old-lub-glb-object.rs:10:13\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/old-lub-glb-object.rs:12:14\n    |\n-LL |       let z = match 22 { //~ ERROR E0308\n-   |  _____________^\n+LL |       let z = match 22 {\n+   |  _____________-\n LL | |         0 => x,\n-LL | |         _ => y,\n+   | |              - this is found to be of type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+LL | |         _ => y, //~ ERROR match arms have incompatible types\n+   | |              ^ expected bound lifetime parameter 'a, found concrete lifetime\n LL | |     };\n-   | |_____^ one type is more general than the other\n+   | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n-              found type `dyn for<'a> Foo<&'a u8, &'a u8>`\n+   = note: expected type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found type `&dyn for<'a> Foo<&'a u8, &'a u8>`\n \n error: aborting due to previous error\n "}, {"sha": "521bd3695dfe5316763e698bd27d199fa1d5c79a", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -7,6 +7,6 @@ fn main() {\n \n fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n-    baz(f); //~ ERROR mismatched types\n-     //~| ERROR mismatched types\n+    baz(f); //~ ERROR type mismatch\n+     //~| ERROR type mismatch\n }"}, {"sha": "5dd6887005e837b07595f3d661bbce23bfaef9d5", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -22,25 +22,34 @@ LL |     a.iter().map(|_: (u16, u16)| 45); //~ ERROR type mismatch\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n \n-error[E0308]: mismatched types\n+error[E0631]: type mismatch in function arguments\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n-LL |     baz(f); //~ ERROR mismatched types\n-   |     ^^^ one type is more general than the other\n+LL |     baz(f); //~ ERROR type mismatch\n+   |     ^^^\n+   |     |\n+   |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n+   |     found signature of `fn(*mut &'a u32) -> _`\n    |\n-   = note: expected type `for<'r> std::ops::Fn<(*mut &'r u32,)>`\n-              found type `std::ops::Fn<(*mut &'a u32,)>`\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:8:1\n+   |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n+error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n-LL |     baz(f); //~ ERROR mismatched types\n-   |     ^^^ one type is more general than the other\n+LL |     baz(f); //~ ERROR type mismatch\n+   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+   |\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:8:1\n    |\n-   = note: expected type `std::ops::FnOnce<(*mut &u32,)>`\n-              found type `std::ops::FnOnce<(*mut &'a u32,)>`\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0308, E0631.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors occurred: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "40a4641fe719602f3991dc7a49478f3d5dfafc54", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -5,5 +5,6 @@ impl<T: Fn(&())> Foo for T {}\n fn baz<T: Foo>(_: T) {}\n \n fn main() {\n-    baz(|_| ()); //~ ERROR E0308\n+    baz(|_| ()); //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n }"}, {"sha": "e55047e96c29748a4818f51518a47626577472c2", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,32 @@\n-error[E0308]: mismatched types\n+error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.rs:8:9: 8:15] as std::ops::FnOnce<(&'r (),)>>::Output == ()`\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n-LL |     baz(|_| ()); //~ ERROR E0308\n-   |     ^^^ one type is more general than the other\n+LL |     baz(|_| ()); //~ ERROR type mismatch\n+   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n-   = note: expected type `for<'r> std::ops::Fn<(&'r (),)>`\n-              found type `std::ops::Fn<(&(),)>`\n+   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:5:1\n+   |\n+LL | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-mismatch.rs:8:5\n+   |\n+LL |     baz(|_| ()); //~ ERROR type mismatch\n+   |     ^^^ ------ found signature of `fn(_) -> _`\n+   |     |\n+   |     expected signature of `for<'r> fn(&'r ()) -> _`\n+   |\n+   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:5:1\n+   |\n+LL | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors occurred: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "9edfebcd494711b64581172668177b8321c5da6e", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -7,4 +7,5 @@ fn main() {\n     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n     //~^ ERROR no method named `count`\n     //~| ERROR type mismatch in closure arguments\n+    //~| ERROR type mismatch in closure arguments\n }"}, {"sha": "c5c67e6bd9bd97fd51fa3d997c37f4a1def2e671", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -16,7 +16,15 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                |\n    |                                expected signature of `for<'r> fn(&'r &str) -> _`\n \n-error: aborting due to 2 previous errors\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/issue-36053-2.rs:7:32\n+   |\n+LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n+   |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`\n+   |                                |\n+   |                                expected signature of `fn(&&str) -> _`\n+\n+error: aborting due to 3 previous errors\n \n Some errors occurred: E0599, E0631.\n For more information about an error, try `rustc --explain E0599`."}, {"sha": "2dd0c9796e2584eaa12fb5a23b90a0e05d859d4e", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -37,15 +37,15 @@ fn baz(x: &S) -> &S {\n fn supply_F() {\n     want_F(foo);\n \n-    want_F(bar);\n+    want_F(bar); //~ ERROR mismatched types\n \n     want_F(baz);\n }\n \n fn supply_G() {\n     want_G(foo);\n     want_G(bar);\n-    want_G(baz); //~ ERROR\n+    want_G(baz); //~ ERROR mismatched types\n }\n \n pub fn main() {"}, {"sha": "66e6a615b33bc996904cbaf839d19916570dacab", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:40:12\n+   |\n+LL |     want_F(bar); //~ ERROR mismatched types\n+   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n+   |\n+   = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n+              found type `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+\n error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n    |\n-LL |     want_G(baz); //~ ERROR\n-   |            ^^^ one type is more general than the other\n+LL |     want_G(baz); //~ ERROR mismatched types\n+   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n    = note: expected type `for<'cx> fn(&'cx S) -> &'static S`\n-              found type `for<'r> fn(&'r S) -> &'r S`\n+              found type `for<'r> fn(&'r S) -> &'r S {baz}`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "5c8b3d3ba6922b46b62050603314b22653744907", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -20,10 +20,10 @@ error[E0308]: mismatched types\n   --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n-   |                                           ^ one type is more general than the other\n+   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n    |\n    = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n+              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f36885f7aeb990e78833abef65944a1e59e9f32d", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -31,10 +31,10 @@ error[E0308]: mismatched types\n   --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0308\n-   |                                                        ^ one type is more general than the other\n+   |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n    |\n    = note: expected type `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n+              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fa2cc37d05b2b917b060b7271a78ab6573f34068", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -5,8 +5,6 @@\n // *ANY* lifetime and returns a reference with the 'static lifetime.\n // This can safely be considered to be an instance of `F` because all\n // lifetimes are sublifetimes of 'static.\n-//\n-// compile-pass\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n@@ -40,7 +38,7 @@ fn baz(x: &S) -> &S {\n fn supply_F() {\n     want_F(foo);\n \n-    want_F(bar);\n+    want_F(bar); //~ ERROR mismatched types\n \n     want_F(baz);\n }"}, {"sha": "42a5a7c806e0843866325f3863c6fc0c267c4aa0", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/regions-fn-subtyping-return-static.rs:41:12\n+   |\n+LL |     want_F(bar); //~ ERROR mismatched types\n+   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n+   |\n+   = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n+              found type `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "99d85e9e4b5a6466e1fcc1011d092362513436ba", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -20,10 +20,10 @@ error[E0308]: mismatched types\n   --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0308\n-   |                                           ^ one type is more general than the other\n+   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n    |\n    = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n+              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a6e26614a6a50bd6122e64110f3da370b924d8cd", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -11,11 +11,13 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n fn a() {\n     let x = call_it(&square, 22);\n     //~^ ERROR E0277\n+    //~| ERROR expected\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n     //~^ ERROR E0277\n+    //~| ERROR expected\n }\n \n fn c() {"}, {"sha": "ca0298283661f8d15bb860e937e9cb3f48eeae16", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -11,8 +11,21 @@ note: required by `call_it`\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:13\n+   |\n+LL |     let x = call_it(&square, 22);\n+   |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+note: required by `call_it`\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:7:1\n+   |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:17:13\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:13\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -25,18 +38,31 @@ LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:22:13\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:13\n+   |\n+LL |     let y = call_it_mut(&mut square, 22);\n+   |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+note: required by `call_it_mut`\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:8:1\n+   |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:24:13\n    |\n LL |     let z = call_it_once(square, 22);\n    |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n-   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n note: required by `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:1\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "dd3b1afc39f3114fed39a0992589ec2eeb0ae045", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -11,11 +11,13 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n fn a() {\n     let x = call_it(&square, 22);\n     //~^ ERROR E0277\n+    //~| ERROR expected\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n     //~^ ERROR E0277\n+    //~| ERROR expected\n }\n \n fn c() {"}, {"sha": "0abc58aeebfe5f3ff66c2dd3c75ba11ab04d249b", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -11,8 +11,21 @@ note: required by `call_it`\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+  --> $DIR/unboxed-closures-wrong-abi.rs:12:13\n+   |\n+LL |     let x = call_it(&square, 22);\n+   |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+note: required by `call_it`\n+  --> $DIR/unboxed-closures-wrong-abi.rs:7:1\n+   |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:17:13\n+  --> $DIR/unboxed-closures-wrong-abi.rs:18:13\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -25,18 +38,31 @@ LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:22:13\n+  --> $DIR/unboxed-closures-wrong-abi.rs:18:13\n+   |\n+LL |     let y = call_it_mut(&mut square, 22);\n+   |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+note: required by `call_it_mut`\n+  --> $DIR/unboxed-closures-wrong-abi.rs:8:1\n+   |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+  --> $DIR/unboxed-closures-wrong-abi.rs:24:13\n    |\n LL |     let z = call_it_once(square, 22);\n    |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n-   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by `call_it_once`\n   --> $DIR/unboxed-closures-wrong-abi.rs:9:1\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c689d79266187ccb9e82c36b64b4eed07f7f3591", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -12,11 +12,13 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n fn a() {\n     let x = call_it(&square, 22);\n     //~^ ERROR E0277\n+    //~| ERROR expected\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n     //~^ ERROR E0277\n+    //~| ERROR expected\n }\n \n fn c() {"}, {"sha": "19b87ad171a519eba0b90cd05bd4f0344ec467c6", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -11,8 +11,21 @@ note: required by `call_it`\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:13\n+   |\n+LL |     let x = call_it(&square, 22);\n+   |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+note: required by `call_it`\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:8:1\n+   |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:18:13\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:13\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -25,18 +38,31 @@ LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:23:13\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:13\n+   |\n+LL |     let y = call_it_mut(&mut square, 22);\n+   |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+note: required by `call_it_mut`\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:9:1\n+   |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:25:13\n    |\n LL |     let z = call_it_once(square, 22);\n    |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n-   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n note: required by `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:1\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "31174fd4cf16373b5201e1d91f785350d42bff34", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -18,5 +18,5 @@ fn foo<T>(x: &T)\n {}\n \n fn main() {\n-    foo(&X); //~ ERROR implementation of `Bar` is not general enough\n+    foo(&X); //~ ERROR trait bound\n }"}, {"sha": "bbcb61a856d8dda8104b3081aa75a6aac98dde2e", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a1d0defdf34f017ca5aeebfe85924c1ac028c81/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=8a1d0defdf34f017ca5aeebfe85924c1ac028c81", "patch": "@@ -1,12 +1,19 @@\n-error: implementation of `Bar` is not general enough\n+error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n-LL |     foo(&X); //~ ERROR implementation of `Bar` is not general enough\n-   |     ^^^\n+LL |     foo(&X); //~ ERROR trait bound\n+   |     ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n    |\n-   = note: Due to a where-clause on `foo`,\n-   = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`\n-   = note: but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n+   = help: the following implementations were found:\n+             <&'static u32 as Bar>\n+note: required by `foo`\n+  --> $DIR/where-for-self-2.rs:16:1\n+   |\n+LL | / fn foo<T>(x: &T)\n+LL | |     where for<'a> &'a T: Bar\n+LL | | {}\n+   | |__^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}]}