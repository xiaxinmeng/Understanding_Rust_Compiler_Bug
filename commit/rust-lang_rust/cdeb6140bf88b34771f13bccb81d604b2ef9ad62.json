{"sha": "cdeb6140bf88b34771f13bccb81d604b2ef9ad62", "node_id": "C_kwDOAAsO6NoAKGNkZWI2MTQwYmY4OGIzNDc3MWYxM2JjY2I4MWQ2MDRiMmVmOWFkNjI", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-08T16:05:34Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-08T16:05:34Z"}, "message": "Account for macros in `get_missing_assoc_items`", "tree": {"sha": "a1547a10aef9376ae9b37c2134ce8d1c6b38c79c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1547a10aef9376ae9b37c2134ce8d1c6b38c79c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdeb6140bf88b34771f13bccb81d604b2ef9ad62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdeb6140bf88b34771f13bccb81d604b2ef9ad62", "html_url": "https://github.com/rust-lang/rust/commit/cdeb6140bf88b34771f13bccb81d604b2ef9ad62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdeb6140bf88b34771f13bccb81d604b2ef9ad62/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847c552ab3d257a45fee6ef2c1737de52c081d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/847c552ab3d257a45fee6ef2c1737de52c081d11", "html_url": "https://github.com/rust-lang/rust/commit/847c552ab3d257a45fee6ef2c1737de52c081d11"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "0fbfd8699214bd63376f16edace9394e3ef291e8", "filename": "crates/ide_db/src/traits.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cdeb6140bf88b34771f13bccb81d604b2ef9ad62/crates%2Fide_db%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeb6140bf88b34771f13bccb81d604b2ef9ad62/crates%2Fide_db%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits.rs?ref=cdeb6140bf88b34771f13bccb81d604b2ef9ad62", "patch": "@@ -3,10 +3,7 @@\n use crate::RootDatabase;\n use hir::Semantics;\n use rustc_hash::FxHashSet;\n-use syntax::{\n-    ast::{self, HasName},\n-    AstNode,\n-};\n+use syntax::{ast, AstNode};\n \n /// Given the `impl` block, attempts to find the trait this `impl` corresponds to.\n pub fn resolve_target_trait(\n@@ -28,32 +25,28 @@ pub fn get_missing_assoc_items(\n     sema: &Semantics<RootDatabase>,\n     impl_def: &ast::Impl,\n ) -> Vec<hir::AssocItem> {\n+    let imp = match sema.to_def(impl_def) {\n+        Some(it) => it,\n+        None => return vec![],\n+    };\n+\n     // Names must be unique between constants and functions. However, type aliases\n     // may share the same name as a function or constant.\n     let mut impl_fns_consts = FxHashSet::default();\n     let mut impl_type = FxHashSet::default();\n \n-    if let Some(item_list) = impl_def.assoc_item_list() {\n-        for item in item_list.assoc_items() {\n-            match item {\n-                ast::AssocItem::Fn(f) => {\n-                    if let Some(n) = f.name() {\n-                        impl_fns_consts.insert(n.syntax().to_string());\n-                    }\n-                }\n-\n-                ast::AssocItem::TypeAlias(t) => {\n-                    if let Some(n) = t.name() {\n-                        impl_type.insert(n.syntax().to_string());\n-                    }\n-                }\n-\n-                ast::AssocItem::Const(c) => {\n-                    if let Some(n) = c.name() {\n-                        impl_fns_consts.insert(n.syntax().to_string());\n-                    }\n+    for item in imp.items(sema.db) {\n+        match item {\n+            hir::AssocItem::Function(it) => {\n+                impl_fns_consts.insert(it.name(sema.db).to_string());\n+            }\n+            hir::AssocItem::Const(it) => {\n+                if let Some(name) = it.name(sema.db) {\n+                    impl_fns_consts.insert(name.to_string());\n                 }\n-                ast::AssocItem::MacroCall(_) => (),\n+            }\n+            hir::AssocItem::TypeAlias(it) => {\n+                impl_type.insert(it.name(sema.db).to_string());\n             }\n         }\n     }\n@@ -219,5 +212,22 @@ impl Foo {\n }\"#,\n             expect![[r#\"\"#]],\n         );\n+\n+        check_missing_assoc(\n+            r#\"\n+trait Tr {\n+    fn required();\n+}\n+macro_rules! m {\n+    () => { fn required() {} };\n+}\n+impl Tr for () {\n+    m!();\n+    $0\n+}\n+\n+            \"#,\n+            expect![[r#\"\"#]],\n+        );\n     }\n }"}]}