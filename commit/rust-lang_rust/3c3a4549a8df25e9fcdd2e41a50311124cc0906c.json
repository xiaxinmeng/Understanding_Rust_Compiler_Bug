{"sha": "3c3a4549a8df25e9fcdd2e41a50311124cc0906c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjM2E0NTQ5YThkZjI1ZTlmY2RkMmU0MWE1MDMxMTEyNGNjMDkwNmM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-07T15:55:12Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-07T15:55:12Z"}, "message": "Fix tests with inclusive ranges", "tree": {"sha": "6ffbe4ac24ad97c23c703c7369ed0f3402d4e1bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ffbe4ac24ad97c23c703c7369ed0f3402d4e1bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c3a4549a8df25e9fcdd2e41a50311124cc0906c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3a4549a8df25e9fcdd2e41a50311124cc0906c", "html_url": "https://github.com/rust-lang/rust/commit/3c3a4549a8df25e9fcdd2e41a50311124cc0906c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c3a4549a8df25e9fcdd2e41a50311124cc0906c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b135efa73b4d92f8ff8e6ed5d39a15d1c7a6c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b135efa73b4d92f8ff8e6ed5d39a15d1c7a6c86", "html_url": "https://github.com/rust-lang/rust/commit/7b135efa73b4d92f8ff8e6ed5d39a15d1c7a6c86"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "e41402ef85a797082ecda712a1daef1c36f37576", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c3a4549a8df25e9fcdd2e41a50311124cc0906c/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3a4549a8df25e9fcdd2e41a50311124cc0906c/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=3c3a4549a8df25e9fcdd2e41a50311124cc0906c", "patch": "@@ -10,6 +10,7 @@ use rustc_front::hir::*;\n use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use std::borrow::Cow;\n use std::collections::HashMap;\n+use syntax::ast;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro,\n             span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then,\n@@ -417,7 +418,7 @@ fn is_len_call(expr: &Expr, var: &Name) -> bool {\n \n fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     // if this for loop is iterating over a two-sided range...\n-    if let Some(UnsugaredRange { start: Some(ref start), end: Some(ref end), .. }) = unsugar_range(&arg) {\n+    if let Some(UnsugaredRange { start: Some(ref start), end: Some(ref end), limits }) = unsugar_range(&arg) {\n         // ...and both sides are compile-time constant integers...\n         if let Ok(start_idx) = eval_const_expr_partial(&cx.tcx, start, ExprTypeChecked, None) {\n             if let Ok(end_idx) = eval_const_expr_partial(&cx.tcx, end, ExprTypeChecked, None) {\n@@ -450,7 +451,7 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                                                                over this range in reverse\",\n                                                               format!(\"({}..{}).rev()` \", end_snippet, start_snippet));\n                                        });\n-                } else if eq {\n+                } else if eq && limits != ast::RangeLimits::Closed {\n                     // if they are equal, it's also problematic - this loop\n                     // will never run.\n                     span_lint(cx,"}, {"sha": "0853ae83cd7d7202ce18427230309bb3f2bf5742", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3c3a4549a8df25e9fcdd2e41a50311124cc0906c/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3a4549a8df25e9fcdd2e41a50311124cc0906c/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=3c3a4549a8df25e9fcdd2e41a50311124cc0906c", "patch": "@@ -1,4 +1,4 @@\n-#![feature(plugin, step_by)]\n+#![feature(plugin, step_by, inclusive_range_syntax)]\n #![plugin(clippy)]\n \n use std::collections::*;\n@@ -118,11 +118,21 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 0...MAX_LEN {\n+        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(MAX_LEN)`\n+        println!(\"{}\", vec[i]);\n+    }\n+\n     for i in 5..10 {\n         //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(10).skip(5)`\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 5...10 {\n+        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(10).skip(5)`\n+        println!(\"{}\", vec[i]);\n+    }\n+\n     for i in 5..vec.len() {\n         //~^ ERROR `i` is used to index `vec`. Consider using `for (i, item) in vec.iter().enumerate().skip(5)`\n         println!(\"{} {}\", vec[i], i);\n@@ -140,6 +150,13 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n+    for i in 10...0 {\n+        //~^ERROR this range is empty so this for loop will never run\n+        //~|HELP consider\n+        //~|SUGGESTION (0..10).rev()\n+        println!(\"{}\", i);\n+    }\n+\n     for i in MAX_LEN..0 { //~ERROR this range is empty so this for loop will never run\n         //~|HELP consider\n         //~|SUGGESTION (0..MAX_LEN).rev()\n@@ -150,6 +167,10 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n+    for i in 5...5 { // not an error, this is the range with only one element \u201c5\u201d\n+        println!(\"{}\", i);\n+    }\n+\n     for i in 0..10 { // not an error, the start index is less than the end index\n         println!(\"{}\", i);\n     }"}]}