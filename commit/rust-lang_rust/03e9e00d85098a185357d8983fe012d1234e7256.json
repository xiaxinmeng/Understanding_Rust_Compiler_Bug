{"sha": "03e9e00d85098a185357d8983fe012d1234e7256", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZTllMDBkODUwOThhMTg1MzU3ZDg5ODNmZTAxMmQxMjM0ZTcyNTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-24T12:22:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-24T12:22:53Z"}, "message": "Rollup merge of #39845 - JDemler:master, r=steveklabnik\n\nAdd Documentation for Custom Attributes and Error Reporting in Procedural Macros\n\nThis fixes #39821 .\n\nI'm not sure if the process of how to access custom attributes should be documented as well.\nBut I feel, that this should rather be documented in `syn`", "tree": {"sha": "a9607f51393dbd1994eb656c401f2e37649d0bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9607f51393dbd1994eb656c401f2e37649d0bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e9e00d85098a185357d8983fe012d1234e7256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e9e00d85098a185357d8983fe012d1234e7256", "html_url": "https://github.com/rust-lang/rust/commit/03e9e00d85098a185357d8983fe012d1234e7256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e9e00d85098a185357d8983fe012d1234e7256/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c07aa1420143fe2ba1116f54dbb330088503a3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c07aa1420143fe2ba1116f54dbb330088503a3d6", "html_url": "https://github.com/rust-lang/rust/commit/c07aa1420143fe2ba1116f54dbb330088503a3d6"}, {"sha": "198208be0e818d99e42281568a2eec305175c6c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/198208be0e818d99e42281568a2eec305175c6c9", "html_url": "https://github.com/rust-lang/rust/commit/198208be0e818d99e42281568a2eec305175c6c9"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "2f53e9f1bdf46e71c13edcd754d531e9bf3f08c4", "filename": "src/doc/book/src/procedural-macros.md", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/03e9e00d85098a185357d8983fe012d1234e7256/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/03e9e00d85098a185357d8983fe012d1234e7256/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=03e9e00d85098a185357d8983fe012d1234e7256", "patch": "@@ -211,3 +211,76 @@ Hello, World! My name is Waffles\n ```\n \n We've done it!\n+\n+## Custom Attributes\n+\n+In some cases it might make sense to allow users some kind of configuration.\n+For example, the user might want to overwrite the name that is printed in the `hello_world()` method.\n+\n+This can be achieved with custom attributes:\n+\n+```rust,ignore\n+#[derive(HelloWorld)]\n+#[HelloWorldName = \"the best Pancakes\"]\n+struct Pancakes;\n+\n+fn main() {\n+    Pancakes::hello_world();\n+}\n+```\n+\n+If we try to compile this though, the compiler will respond with an error:\n+\n+```bash\n+error: The attribute `HelloWorldName` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+```\n+\n+The compiler needs to know that we're handling this attribute and to not respond with an error.\n+This is done in the `hello-world-derive` crate by adding `attributes` to the `proc_macro_derive` attribute:\n+\n+```rust,ignore\n+#[proc_macro_derive(HelloWorld, attributes(HelloWorldName))]\n+pub fn hello_world(input: TokenStream) -> TokenStream \n+```\n+\n+Multiple attributes can be specified that way.\n+\n+## Raising Errors\n+\n+Let's assume that we do not want to accept enums as input to our custom derive method.\n+\n+This condition can be easily checked with the help of `syn`. \n+But how do we tell the user, that we do not accept enums?\n+The idiomatic way to report errors in procedural macros is to panic:\n+\n+```rust,ignore\n+fn impl_hello_world(ast: &syn::MacroInput) -> quote::Tokens {\n+    let name = &ast.ident;\n+    // Check if derive(HelloWorld) was specified for a struct\n+    if let syn::Body::Struct(_) = ast.body {\n+        // Yes, this is a struct\n+        quote! {\n+            impl HelloWorld for #name {\n+                fn hello_world() {\n+                    println!(\"Hello, World! My name is {}\", stringify!(#name));\n+                }\n+            }\n+        }\n+    } else {\n+        //Nope. This is an Enum. We cannot handle these!\n+       panic!(\"#[derive(HelloWorld)] is only defined for structs, not for enums!\");\n+    }\n+}\n+```\n+\n+If a user now tries to derive `HelloWorld` from an enum they will be greeted with following, hopefully helpful, error:\n+\n+```bash\n+error: custom derive attribute panicked\n+  --> src/main.rs\n+   |\n+   | #[derive(HelloWorld)]\n+   |          ^^^^^^^^^^\n+   |\n+   = help: message: #[derive(HelloWorld)] is only defined for structs, not for enums!\n+```"}]}