{"sha": "12b810063dc87bc985e8aab8d0fa2179add2610f", "node_id": "C_kwDOAAsO6NoAKDEyYjgxMDA2M2RjODdiYzk4NWU4YWFiOGQwZmEyMTc5YWRkMjYxMGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-08T06:25:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T06:25:09Z"}, "message": "Rollup merge of #101498 - petrochenkov:visparam, r=cjgillot\n\nrustc: Parameterize `ty::Visibility` over used ID\n\nIt allows using `LocalDefId` instead of `DefId` when possible, and also encode cheaper `Visibility<DefIndex>` into metadata.", "tree": {"sha": "8ee6fd5e03e2d2913a9c70baa1c4f7d395e78d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ee6fd5e03e2d2913a9c70baa1c4f7d395e78d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b810063dc87bc985e8aab8d0fa2179add2610f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGYrFCRBK7hj4Ov3rIwAA2bMIAJgc/jOFDL7UUtYL9Q8OmOtT\nbYPcu0efQqUjW660W9sVzRtY8i5asl9AC4kKle0bKirAnCkKjuPWoeeyJsfXMmf+\nyuzTwt5M4hqqwui/T4lVc+UWH1gqBDEDyKJmcRUC6RKefo8hT6efFISyVHJhT3c9\nN9RDYUYMud1aCSvwNT5krI5iEc5rJxOa8dZcrui8BmY0IyJ6EJs/hFxYMWFLjp4u\nfZrnuuZWgPb1hTusBg+Z8qdUIZ2PztZ/RpWF9NbQhgni5LHKXBnzzljKGNUzQ390\nkh9fK+mJR/Do6SjnaItwienj625IgIuMgcxRgEm9Pr59gJGWereYTpAzVMy92rY=\n=U30Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ee6fd5e03e2d2913a9c70baa1c4f7d395e78d3e\nparent 1c3559676265f2c320f4e361fece080b0f464f97\nparent d8d3b83e3ae6ade8498862d8c110c302abf859d9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662618309 +0530\ncommitter GitHub <noreply@github.com> 1662618309 +0530\n\nRollup merge of #101498 - petrochenkov:visparam, r=cjgillot\n\nrustc: Parameterize `ty::Visibility` over used ID\n\nIt allows using `LocalDefId` instead of `DefId` when possible, and also encode cheaper `Visibility<DefIndex>` into metadata.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b810063dc87bc985e8aab8d0fa2179add2610f", "html_url": "https://github.com/rust-lang/rust/commit/12b810063dc87bc985e8aab8d0fa2179add2610f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b810063dc87bc985e8aab8d0fa2179add2610f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3559676265f2c320f4e361fece080b0f464f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3559676265f2c320f4e361fece080b0f464f97", "html_url": "https://github.com/rust-lang/rust/commit/1c3559676265f2c320f4e361fece080b0f464f97"}, {"sha": "d8d3b83e3ae6ade8498862d8c110c302abf859d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d3b83e3ae6ade8498862d8c110c302abf859d9", "html_url": "https://github.com/rust-lang/rust/commit/d8d3b83e3ae6ade8498862d8c110c302abf859d9"}], "stats": {"total": 297, "additions": 170, "deletions": 127}, "files": [{"sha": "562246f4e8a1b239db23ab7af534d752cca14ba6", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -911,8 +911,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.generics_of.get(self, item_id).unwrap().decode((self, sess))\n     }\n \n-    fn get_visibility(self, id: DefIndex) -> ty::Visibility {\n-        self.root.tables.visibility.get(self, id).unwrap().decode(self)\n+    fn get_visibility(self, id: DefIndex) -> ty::Visibility<DefId> {\n+        self.root\n+            .tables\n+            .visibility\n+            .get(self, id)\n+            .unwrap()\n+            .decode(self)\n+            .map_id(|index| self.local_def_id(index))\n     }\n \n     fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {\n@@ -1182,7 +1188,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .map(move |index| respan(self.get_span(index, sess), self.item_name(index)))\n     }\n \n-    fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {\n+    fn get_struct_field_visibilities(\n+        self,\n+        id: DefIndex,\n+    ) -> impl Iterator<Item = Visibility<DefId>> + 'a {\n         self.root\n             .tables\n             .children"}, {"sha": "dede1b2122a3cc06f62b8efb4b76f9f78f6b9419", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -210,7 +210,6 @@ provide! { tcx, def_id, other, cdata,\n     lookup_const_stability => { table }\n     lookup_default_body_stability => { table }\n     lookup_deprecation_entry => { table }\n-    visibility => { table }\n     unused_generic_params => { table }\n     opt_def_kind => { table_direct }\n     impl_parent => { table }\n@@ -225,6 +224,7 @@ provide! { tcx, def_id, other, cdata,\n     generator_kind => { table }\n     trait_def => { table }\n \n+    visibility => { cdata.get_visibility(def_id.index) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {\n         let _ = cdata;\n@@ -485,15 +485,15 @@ impl CStore {\n     pub fn struct_field_visibilities_untracked(\n         &self,\n         def: DefId,\n-    ) -> impl Iterator<Item = Visibility> + '_ {\n+    ) -> impl Iterator<Item = Visibility<DefId>> + '_ {\n         self.get_crate_data(def.krate).get_struct_field_visibilities(def.index)\n     }\n \n     pub fn ctor_def_id_and_kind_untracked(&self, def: DefId) -> Option<(DefId, CtorKind)> {\n         self.get_crate_data(def.krate).get_ctor_def_id_and_kind(def.index)\n     }\n \n-    pub fn visibility_untracked(&self, def: DefId) -> Visibility {\n+    pub fn visibility_untracked(&self, def: DefId) -> Visibility<DefId> {\n         self.get_crate_data(def.krate).get_visibility(def.index)\n     }\n "}, {"sha": "b807663b10fd05fd0642d059e5eebb841fab9a61", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1138,7 +1138,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.codegen_fn_attrs[def_id] <- self.tcx.codegen_fn_attrs(def_id));\n             }\n             if should_encode_visibility(def_kind) {\n-                record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n+                let vis =\n+                    self.tcx.local_visibility(local_id).map_id(|def_id| def_id.local_def_index);\n+                record!(self.tables.visibility[def_id] <- vis);\n             }\n             if should_encode_stability(def_kind) {\n                 self.encode_stability(def_id);\n@@ -1727,7 +1729,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             self.tables.opt_def_kind.set(LOCAL_CRATE.as_def_id().index, DefKind::Mod);\n             record!(self.tables.def_span[LOCAL_CRATE.as_def_id()] <- tcx.def_span(LOCAL_CRATE.as_def_id()));\n             self.encode_attrs(LOCAL_CRATE.as_def_id().expect_local());\n-            record!(self.tables.visibility[LOCAL_CRATE.as_def_id()] <- tcx.visibility(LOCAL_CRATE.as_def_id()));\n+            let vis = tcx.local_visibility(CRATE_DEF_ID).map_id(|def_id| def_id.local_def_index);\n+            record!(self.tables.visibility[LOCAL_CRATE.as_def_id()] <- vis);\n             if let Some(stability) = stability {\n                 record!(self.tables.lookup_stability[LOCAL_CRATE.as_def_id()] <- stability);\n             }"}, {"sha": "748b3afec37c7b0661c7798b7f84a8945c013645", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -338,7 +338,7 @@ define_tables! {\n     children: Table<DefIndex, LazyArray<DefIndex>>,\n \n     opt_def_kind: Table<DefIndex, DefKind>,\n-    visibility: Table<DefIndex, LazyValue<ty::Visibility>>,\n+    visibility: Table<DefIndex, LazyValue<ty::Visibility<DefIndex>>>,\n     def_span: Table<DefIndex, LazyValue<Span>>,\n     def_ident_span: Table<DefIndex, LazyValue<Span>>,\n     lookup_stability: Table<DefIndex, LazyValue<attr::Stability>>,"}, {"sha": "5ff014c7815a9c0ba52aaaffa49d29d0ffdce603", "filename": "compiler/rustc_middle/src/metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -2,6 +2,7 @@ use crate::ty;\n \n use rustc_hir::def::Res;\n use rustc_macros::HashStable;\n+use rustc_span::def_id::DefId;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n@@ -18,7 +19,7 @@ pub struct ModChild {\n     /// Local variables cannot be exported, so this `Res` doesn't need the ID parameter.\n     pub res: Res<!>,\n     /// Visibility of the item.\n-    pub vis: ty::Visibility,\n+    pub vis: ty::Visibility<DefId>,\n     /// Span of the item.\n     pub span: Span,\n     /// A proper `macro_rules` item (not a reexport)."}, {"sha": "4478b45cf1437e833d4faa8e4a775f5b2932439e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1607,7 +1607,7 @@ rustc_queries! {\n         desc { \"looking up late bound vars\" }\n     }\n \n-    query visibility(def_id: DefId) -> ty::Visibility {\n+    query visibility(def_id: DefId) -> ty::Visibility<DefId> {\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }"}, {"sha": "55ee5bd2f810d0999641b9e490e27c780cdab700", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -42,7 +42,7 @@ impl AssocItem {\n     }\n \n     #[inline]\n-    pub fn visibility(&self, tcx: TyCtxt<'_>) -> Visibility {\n+    pub fn visibility(&self, tcx: TyCtxt<'_>) -> Visibility<DefId> {\n         tcx.visibility(self.def_id)\n     }\n "}, {"sha": "c2e5decfc786ed2d8af6a9ac74df8cb58cfa746d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -22,6 +22,7 @@ use crate::ty::{\n     FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List,\n     ParamConst, ParamTy, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy, Region,\n     RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n+    Visibility,\n };\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -1728,6 +1729,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             .chain(self.crates(()).iter().copied())\n             .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())\n     }\n+\n+    #[inline]\n+    pub fn local_visibility(self, def_id: LocalDefId) -> Visibility {\n+        self.visibility(def_id.to_def_id()).expect_local()\n+    }\n }\n \n /// A trait implemented for all `X<'a>` types that can be safely and"}, {"sha": "37136ff2ef5d324170e01e7848c4c6d3ef723a3d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -263,11 +263,11 @@ impl fmt::Display for ImplPolarity {\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, Encodable, Decodable, HashStable)]\n-pub enum Visibility {\n+pub enum Visibility<Id = LocalDefId> {\n     /// Visible everywhere (including in other crates).\n     Public,\n     /// Visible only in the given crate-local module.\n-    Restricted(DefId),\n+    Restricted(Id),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n@@ -358,28 +358,45 @@ impl<'tcx> DefIdTree for TyCtxt<'tcx> {\n     }\n }\n \n-impl Visibility {\n-    /// Returns `true` if an item with this visibility is accessible from the given block.\n-    pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {\n-        let restriction = match self {\n-            // Public items are visible everywhere.\n-            Visibility::Public => return true,\n-            // Restricted items are visible in an arbitrary local module.\n-            Visibility::Restricted(other) if other.krate != module.krate => return false,\n-            Visibility::Restricted(module) => module,\n-        };\n+impl<Id> Visibility<Id> {\n+    pub fn is_public(self) -> bool {\n+        matches!(self, Visibility::Public)\n+    }\n+\n+    pub fn map_id<OutId>(self, f: impl FnOnce(Id) -> OutId) -> Visibility<OutId> {\n+        match self {\n+            Visibility::Public => Visibility::Public,\n+            Visibility::Restricted(id) => Visibility::Restricted(f(id)),\n+        }\n+    }\n+}\n+\n+impl<Id: Into<DefId>> Visibility<Id> {\n+    pub fn to_def_id(self) -> Visibility<DefId> {\n+        self.map_id(Into::into)\n+    }\n \n-        tree.is_descendant_of(module, restriction)\n+    /// Returns `true` if an item with this visibility is accessible from the given module.\n+    pub fn is_accessible_from(self, module: impl Into<DefId>, tree: impl DefIdTree) -> bool {\n+        match self {\n+            // Public items are visible everywhere.\n+            Visibility::Public => true,\n+            Visibility::Restricted(id) => tree.is_descendant_of(module.into(), id.into()),\n+        }\n     }\n \n     /// Returns `true` if this visibility is at least as accessible as the given visibility\n-    pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {\n-        let vis_restriction = match vis {\n-            Visibility::Public => return self == Visibility::Public,\n-            Visibility::Restricted(module) => module,\n-        };\n+    pub fn is_at_least(self, vis: Visibility<impl Into<DefId>>, tree: impl DefIdTree) -> bool {\n+        match vis {\n+            Visibility::Public => self.is_public(),\n+            Visibility::Restricted(id) => self.is_accessible_from(id, tree),\n+        }\n+    }\n+}\n \n-        self.is_accessible_from(vis_restriction, tree)\n+impl Visibility<DefId> {\n+    pub fn expect_local(self) -> Visibility {\n+        self.map_id(|id| id.expect_local())\n     }\n \n     // Returns `true` if this item is visible anywhere in the local crate.\n@@ -389,10 +406,6 @@ impl Visibility {\n             Visibility::Restricted(def_id) => def_id.is_local(),\n         }\n     }\n-\n-    pub fn is_public(self) -> bool {\n-        matches!(self, Visibility::Public)\n-    }\n }\n \n /// The crate variances map is computed during typeck and contains the\n@@ -1861,7 +1874,7 @@ pub enum VariantDiscr {\n pub struct FieldDef {\n     pub did: DefId,\n     pub name: Symbol,\n-    pub vis: Visibility,\n+    pub vis: Visibility<DefId>,\n }\n \n impl PartialEq for FieldDef {"}, {"sha": "9c8dc30e2db3fa0c55723b19576a2feaf74c32f2", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1,4 +1,4 @@\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_index::vec::{Idx, IndexVec};\n \n use crate::middle::exported_symbols::ExportedSymbol;\n@@ -60,7 +60,7 @@ trivially_parameterized_over_tcx! {\n     ty::ImplPolarity,\n     ty::ReprOptions,\n     ty::TraitDef,\n-    ty::Visibility,\n+    ty::Visibility<DefIndex>,\n     ty::adjustment::CoerceUnsizedInfo,\n     ty::fast_reject::SimplifiedTypeGen<DefId>,\n     rustc_ast::Attribute,"}, {"sha": "b2966f0d21801319b72f022890c1ee507e771180", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1,6 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(associated_type_defaults)]\n #![feature(control_flow_enum)]\n+#![feature(let_else)]\n #![feature(rustc_private)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n@@ -334,15 +335,17 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n         _kind: &str,\n         _descr: &dyn fmt::Display,\n     ) -> ControlFlow<Self::BreakTy> {\n-        self.min = VL::new_min(self, def_id);\n+        if let Some(def_id) = def_id.as_local() {\n+            self.min = VL::new_min(self, def_id);\n+        }\n         ControlFlow::CONTINUE\n     }\n }\n \n trait VisibilityLike: Sized {\n     const MAX: Self;\n     const SHALLOW: bool = false;\n-    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self;\n \n     // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to\n     // associated types for which we can't determine visibility precisely.\n@@ -357,8 +360,8 @@ trait VisibilityLike: Sized {\n }\n impl VisibilityLike for ty::Visibility {\n     const MAX: Self = ty::Visibility::Public;\n-    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n-        min(find.tcx.visibility(def_id), find.min, find.tcx)\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self {\n+        min(find.tcx.local_visibility(def_id), find.min, find.tcx)\n     }\n }\n impl VisibilityLike for Option<AccessLevel> {\n@@ -373,15 +376,8 @@ impl VisibilityLike for Option<AccessLevel> {\n     // both \"shallow\" version of its self type and \"shallow\" version of its trait if it exists\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n-    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n-        cmp::min(\n-            if let Some(def_id) = def_id.as_local() {\n-                find.access_levels.map.get(&def_id).copied()\n-            } else {\n-                Self::MAX\n-            },\n-            find.min,\n-        )\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self {\n+        cmp::min(find.access_levels.map.get(&def_id).copied(), find.min)\n     }\n }\n \n@@ -511,15 +507,15 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         let module = self.tcx.hir().get_module(module_def_id).0;\n         for item_id in module.item_ids {\n             let def_kind = self.tcx.def_kind(item_id.def_id);\n-            let vis = self.tcx.visibility(item_id.def_id);\n+            let vis = self.tcx.local_visibility(item_id.def_id);\n             self.update_macro_reachable_def(item_id.def_id, def_kind, vis, defining_mod);\n         }\n         if let Some(exports) = self.tcx.module_reexports(module_def_id) {\n             for export in exports {\n-                if export.vis.is_accessible_from(defining_mod.to_def_id(), self.tcx) {\n+                if export.vis.is_accessible_from(defining_mod, self.tcx) {\n                     if let Res::Def(def_kind, def_id) = export.res {\n                         if let Some(def_id) = def_id.as_local() {\n-                            let vis = self.tcx.visibility(def_id.to_def_id());\n+                            let vis = self.tcx.local_visibility(def_id);\n                             self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod);\n                         }\n                     }\n@@ -542,7 +538,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         match def_kind {\n             // No type privacy, so can be directly marked as reachable.\n             DefKind::Const | DefKind::Static(_) | DefKind::TraitAlias | DefKind::TyAlias => {\n-                if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n+                if vis.is_accessible_from(module, self.tcx) {\n                     self.update(def_id, level);\n                 }\n             }\n@@ -554,7 +550,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             DefKind::Macro(_) => {\n                 let item = self.tcx.hir().expect_item(def_id);\n                 if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }, _) = item.kind {\n-                    if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n+                    if vis.is_accessible_from(module, self.tcx) {\n                         self.update(def_id, level);\n                     }\n                 }\n@@ -565,7 +561,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             // hygiene these don't need to be marked reachable. The contents of\n             // the module, however may be reachable.\n             DefKind::Mod => {\n-                if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n+                if vis.is_accessible_from(module, self.tcx) {\n                     self.update_macro_reachable(def_id, module);\n                 }\n             }\n@@ -579,8 +575,8 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n                     {\n                         for field in struct_def.fields() {\n                             let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                            let field_vis = self.tcx.visibility(def_id);\n-                            if field_vis.is_accessible_from(module.to_def_id(), self.tcx) {\n+                            let field_vis = self.tcx.local_visibility(def_id);\n+                            if field_vis.is_accessible_from(module, self.tcx) {\n                                 self.reach(def_id, level).ty();\n                             }\n                         }\n@@ -654,7 +650,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::Impl(ref impl_) => {\n                 for impl_item_ref in impl_.items {\n                     if impl_.of_trait.is_some()\n-                        || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public\n+                        || self.tcx.visibility(impl_item_ref.id.def_id).is_public()\n                     {\n                         self.update(impl_item_ref.id.def_id, item_level);\n                     }\n@@ -682,7 +678,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n-                    if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {\n+                    if self.tcx.visibility(foreign_item.id.def_id).is_public() {\n                         self.update(foreign_item.id.def_id, item_level);\n                     }\n                 }\n@@ -1117,7 +1113,7 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n     }\n \n     fn item_is_accessible(&self, did: DefId) -> bool {\n-        self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)\n+        self.tcx.visibility(did).is_accessible_from(self.current_item, self.tcx)\n     }\n \n     // Take node-id of an expression or pattern and check its type for privacy.\n@@ -1609,8 +1605,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     let mut found_pub_static = false;\n                     for impl_item_ref in impl_.items {\n                         if self.access_levels.is_reachable(impl_item_ref.id.def_id)\n-                            || self.tcx.visibility(impl_item_ref.id.def_id)\n-                                == ty::Visibility::Public\n+                            || self.tcx.visibility(impl_item_ref.id.def_id).is_public()\n                         {\n                             let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                             match impl_item_ref.kind {\n@@ -1780,17 +1775,17 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n             );\n         }\n \n-        let hir_id = match def_id.as_local() {\n-            Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),\n-            None => return false,\n+        let Some(local_def_id) = def_id.as_local() else {\n+            return false;\n         };\n \n-        let vis = self.tcx.visibility(def_id);\n+        let vis = self.tcx.local_visibility(local_def_id);\n         if !vis.is_at_least(self.required_visibility, self.tcx) {\n+            let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n             let vis_descr = match vis {\n                 ty::Visibility::Public => \"public\",\n                 ty::Visibility::Restricted(vis_def_id) => {\n-                    if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {\n+                    if vis_def_id == self.tcx.parent_module(hir_id) {\n                         \"private\"\n                     } else if vis_def_id.is_top_level_module() {\n                         \"crate-private\"\n@@ -1906,7 +1901,7 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n \n     pub fn check_item(&mut self, id: ItemId) {\n         let tcx = self.tcx;\n-        let item_visibility = tcx.visibility(id.def_id);\n+        let item_visibility = tcx.local_visibility(id.def_id);\n         let def_kind = tcx.def_kind(id.def_id);\n \n         match def_kind {\n@@ -1957,7 +1952,7 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                 let item = tcx.hir().item(id);\n                 if let hir::ItemKind::ForeignMod { items, .. } = item.kind {\n                     for foreign_item in items {\n-                        let vis = tcx.visibility(foreign_item.id.def_id);\n+                        let vis = tcx.local_visibility(foreign_item.id.def_id);\n                         self.check(foreign_item.id.def_id, vis).generics().predicates().ty();\n                     }\n                 }\n@@ -1972,7 +1967,7 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n \n                     for field in struct_def.fields() {\n                         let def_id = tcx.hir().local_def_id(field.hir_id);\n-                        let field_visibility = tcx.visibility(def_id);\n+                        let field_visibility = tcx.local_visibility(def_id);\n                         self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();\n                     }\n                 }\n@@ -1992,7 +1987,7 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                     }\n                     for impl_item_ref in impl_.items {\n                         let impl_item_vis = if impl_.of_trait.is_none() {\n-                            min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)\n+                            min(tcx.local_visibility(impl_item_ref.id.def_id), impl_vis, tcx)\n                         } else {\n                             impl_vis\n                         };\n@@ -2019,8 +2014,11 @@ pub fn provide(providers: &mut Providers) {\n     };\n }\n \n-fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n-    let def_id = def_id.expect_local();\n+fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility<DefId> {\n+    local_visibility(tcx, def_id.expect_local()).to_def_id()\n+}\n+\n+fn local_visibility(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Visibility {\n     match tcx.resolutions(()).visibilities.get(&def_id) {\n         Some(vis) => *vis,\n         None => {\n@@ -2037,7 +2035,7 @@ fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n                 | Node::Item(hir::Item {\n                     kind: hir::ItemKind::Use(_, hir::UseKind::ListStem) | hir::ItemKind::OpaqueTy(..),\n                     ..\n-                }) => ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id()),\n+                }) => ty::Visibility::Restricted(tcx.parent_module(hir_id)),\n                 // Visibilities of trait impl items are inherited from their traits\n                 // and are not filled in resolve.\n                 Node::ImplItem(impl_item) => {\n@@ -2050,7 +2048,7 @@ fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n                                 tcx.sess.delay_span_bug(tr.path.span, \"trait without a def-id\");\n                                 ty::Visibility::Public\n                             },\n-                            |def_id| tcx.visibility(def_id),\n+                            |def_id| tcx.visibility(def_id).expect_local(),\n                         ),\n                         _ => span_bug!(impl_item.span, \"the parent is not a trait impl\"),\n                     }"}, {"sha": "9cb735b36856c6aa09fa4d562683b42af7a36a42", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -39,24 +39,26 @@ use std::ptr;\n \n type Res = def::Res<NodeId>;\n \n-impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, LocalExpnId) {\n+impl<'a, Id: Into<DefId>> ToNameBinding<'a>\n+    for (Module<'a>, ty::Visibility<Id>, Span, LocalExpnId)\n+{\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Module(self.0),\n             ambiguity: None,\n-            vis: self.1,\n+            vis: self.1.to_def_id(),\n             span: self.2,\n             expansion: self.3,\n         })\n     }\n }\n \n-impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId) {\n+impl<'a, Id: Into<DefId>> ToNameBinding<'a> for (Res, ty::Visibility<Id>, Span, LocalExpnId) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Res(self.0, false),\n             ambiguity: None,\n-            vis: self.1,\n+            vis: self.1.to_def_id(),\n             span: self.2,\n             expansion: self.3,\n         })\n@@ -70,7 +72,7 @@ impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId, IsMacroE\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Res(self.0, true),\n             ambiguity: None,\n-            vis: self.1,\n+            vis: self.1.to_def_id(),\n             span: self.2,\n             expansion: self.3,\n         })\n@@ -260,7 +262,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         self.r.visibilities[&def_id.expect_local()]\n                     }\n                     // Otherwise, the visibility is restricted to the nearest parent `mod` item.\n-                    _ => ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),\n+                    _ => ty::Visibility::Restricted(\n+                        self.parent_scope.module.nearest_parent_mod().expect_local(),\n+                    ),\n                 })\n             }\n             ast::VisibilityKind::Restricted { ref path, id, .. } => {\n@@ -311,7 +315,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             } else {\n                                 let vis = ty::Visibility::Restricted(res.def_id());\n                                 if self.r.is_accessible_from(vis, parent_scope.module) {\n-                                    Ok(vis)\n+                                    Ok(vis.expect_local())\n                                 } else {\n                                     Err(VisResolutionError::AncestorOnly(path.span))\n                                 }\n@@ -649,7 +653,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         true,\n                         // The whole `use` item\n                         item,\n-                        ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),\n+                        ty::Visibility::Restricted(\n+                            self.parent_scope.module.nearest_parent_mod().expect_local(),\n+                        ),\n                         root_span,\n                     );\n                 }\n@@ -765,10 +771,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 if let Some(ctor_node_id) = vdata.ctor_id() {\n                     // If the structure is marked as non_exhaustive then lower the visibility\n                     // to within the crate.\n-                    let mut ctor_vis = if vis == ty::Visibility::Public\n+                    let mut ctor_vis = if vis.is_public()\n                         && self.r.session.contains_name(&item.attrs, sym::non_exhaustive)\n                     {\n-                        ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n+                        ty::Visibility::Restricted(CRATE_DEF_ID)\n                     } else {\n                         vis\n                     };\n@@ -785,7 +791,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         if ctor_vis.is_at_least(field_vis, &*self.r) {\n                             ctor_vis = field_vis;\n                         }\n-                        ret_fields.push(field_vis);\n+                        ret_fields.push(field_vis.to_def_id());\n                     }\n                     let ctor_def_id = self.r.local_def_id(ctor_node_id);\n                     let ctor_res = Res::Def(\n@@ -795,7 +801,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, sp, expansion));\n                     self.r.visibilities.insert(ctor_def_id, ctor_vis);\n \n-                    self.r.struct_constructors.insert(def_id, (ctor_res, ctor_vis, ret_fields));\n+                    self.r\n+                        .struct_constructors\n+                        .insert(def_id, (ctor_res, ctor_vis.to_def_id(), ret_fields));\n                 }\n             }\n \n@@ -867,8 +875,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n         .map(|module| {\n             let used = self.process_macro_use_imports(item, module);\n-            let binding =\n-                (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n+            let vis = ty::Visibility::<LocalDefId>::Public;\n+            let binding = (module, vis, sp, expansion).to_name_binding(self.r.arenas);\n             (used, Some(ModuleOrUniformRoot::Module(module)), binding)\n         })\n         .unwrap_or((true, None, self.r.dummy_binding));\n@@ -1117,7 +1125,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 root_span: span,\n                 span,\n                 module_path: Vec::new(),\n-                vis: Cell::new(Some(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()))),\n+                vis: Cell::new(Some(ty::Visibility::Restricted(CRATE_DEF_ID))),\n                 used: Cell::new(false),\n             })\n         };\n@@ -1263,7 +1271,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             let vis = if is_macro_export {\n                 ty::Visibility::Public\n             } else {\n-                ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n+                ty::Visibility::Restricted(CRATE_DEF_ID)\n             };\n             let binding = (res, vis, span, expansion).to_name_binding(self.r.arenas);\n             self.r.set_binding_parent_module(binding, parent_scope.module);\n@@ -1294,7 +1302,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 }\n                 _ => self.resolve_visibility(&item.vis),\n             };\n-            if vis != ty::Visibility::Public {\n+            if !vis.is_public() {\n                 self.insert_unused_macro(ident, def_id, item.id, &rule_spans);\n             }\n             self.r.define(module, ident, MacroNS, (res, vis, span, expansion));\n@@ -1507,10 +1515,10 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         self.r.visibilities.insert(def_id, vis);\n \n         // If the variant is marked as non_exhaustive then lower the visibility to within the crate.\n-        let ctor_vis = if vis == ty::Visibility::Public\n+        let ctor_vis = if vis.is_public()\n             && self.r.session.contains_name(&variant.attrs, sym::non_exhaustive)\n         {\n-            ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n+            ty::Visibility::Restricted(CRATE_DEF_ID)\n         } else {\n             vis\n         };"}, {"sha": "2287aa1eb2567691517b93d569b4a2934dacde84", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::bug;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK;\n use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext};\n use rustc_span::symbol::{kw, Ident};\n@@ -26,6 +27,8 @@ use Determinacy::*;\n use Namespace::*;\n use RibKind::*;\n \n+type Visibility = ty::Visibility<LocalDefId>;\n+\n impl<'a> Resolver<'a> {\n     /// A generic scope visitor.\n     /// Visits scopes in order to resolve some identifier in them or perform other actions.\n@@ -424,8 +427,7 @@ impl<'a> Resolver<'a> {\n                 let ident = Ident::new(orig_ident.name, orig_ident.span.with_ctxt(ctxt));\n                 let ok = |res, span, arenas| {\n                     Ok((\n-                        (res, ty::Visibility::Public, span, LocalExpnId::ROOT)\n-                            .to_name_binding(arenas),\n+                        (res, Visibility::Public, span, LocalExpnId::ROOT).to_name_binding(arenas),\n                         Flags::empty(),\n                     ))\n                 };\n@@ -438,7 +440,7 @@ impl<'a> Resolver<'a> {\n                         {\n                             let binding = (\n                                 Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n-                                ty::Visibility::Public,\n+                                Visibility::Public,\n                                 attr.span,\n                                 expn_id,\n                             )\n@@ -841,9 +843,8 @@ impl<'a> Resolver<'a> {\n                 if ns == TypeNS {\n                     if ident.name == kw::Crate || ident.name == kw::DollarCrate {\n                         let module = self.resolve_crate_root(ident);\n-                        let binding =\n-                            (module, ty::Visibility::Public, module.span, LocalExpnId::ROOT)\n-                                .to_name_binding(self.arenas);\n+                        let binding = (module, Visibility::Public, module.span, LocalExpnId::ROOT)\n+                            .to_name_binding(self.arenas);\n                         return Ok(binding);\n                     } else if ident.name == kw::Super || ident.name == kw::SelfLower {\n                         // FIXME: Implement these with renaming requirements so that e.g."}, {"sha": "c133c272bac275e48625704d76255cbfc414c824", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -214,7 +214,7 @@ impl<'a> Resolver<'a> {\n         binding: &'a NameBinding<'a>,\n         import: &'a Import<'a>,\n     ) -> &'a NameBinding<'a> {\n-        let import_vis = import.expect_vis();\n+        let import_vis = import.expect_vis().to_def_id();\n         let vis = if binding.vis.is_at_least(import_vis, self)\n             || pub_use_of_private_extern_crate_hack(import, binding)\n         {\n@@ -227,7 +227,7 @@ impl<'a> Resolver<'a> {\n             if vis == import_vis\n                 || max_vis.get().map_or(true, |max_vis| vis.is_at_least(max_vis, self))\n             {\n-                max_vis.set(Some(vis))\n+                max_vis.set(Some(vis.expect_local()))\n             }\n         }\n "}, {"sha": "f7b7313d1049d2271a6930aa1863e4752c605d7c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -648,7 +648,7 @@ pub struct NameBinding<'a> {\n     ambiguity: Option<(&'a NameBinding<'a>, AmbiguityKind)>,\n     expansion: LocalExpnId,\n     span: Span,\n-    vis: ty::Visibility,\n+    vis: ty::Visibility<DefId>,\n }\n \n pub trait ToNameBinding<'a> {\n@@ -1012,7 +1012,7 @@ pub struct Resolver<'a> {\n     /// Table for mapping struct IDs into struct constructor IDs,\n     /// it's not used during normal resolution, only for better error reporting.\n     /// Also includes of list of each fields visibility\n-    struct_constructors: DefIdMap<(Res, ty::Visibility, Vec<ty::Visibility>)>,\n+    struct_constructors: DefIdMap<(Res, ty::Visibility<DefId>, Vec<ty::Visibility<DefId>>)>,\n \n     /// Features enabled for this crate.\n     active_features: FxHashSet<Symbol>,\n@@ -1808,7 +1808,11 @@ impl<'a> Resolver<'a> {\n         self.pat_span_map.insert(node, span);\n     }\n \n-    fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {\n+    fn is_accessible_from(\n+        &self,\n+        vis: ty::Visibility<impl Into<DefId>>,\n+        module: Module<'a>,\n+    ) -> bool {\n         vis.is_accessible_from(module.nearest_parent_mod(), self)\n     }\n \n@@ -1862,10 +1866,8 @@ impl<'a> Resolver<'a> {\n                     self.crate_loader.maybe_process_path_extern(ident.name)?\n                 };\n                 let crate_root = self.expect_module(crate_id.as_def_id());\n-                Some(\n-                    (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)\n-                        .to_name_binding(self.arenas),\n-                )\n+                let vis = ty::Visibility::<LocalDefId>::Public;\n+                Some((crate_root, vis, DUMMY_SP, LocalExpnId::ROOT).to_name_binding(self.arenas))\n             }\n         })\n     }"}, {"sha": "ceb6b6c68b0551cae87f27896980089a095ac310", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -305,6 +305,12 @@ impl DefId {\n     }\n }\n \n+impl From<LocalDefId> for DefId {\n+    fn from(local: LocalDefId) -> DefId {\n+        local.to_def_id()\n+    }\n+}\n+\n impl<E: Encoder> Encodable<E> for DefId {\n     default fn encode(&self, s: &mut E) {\n         self.krate.encode(s);"}, {"sha": "efdb1ace1399294c498313512c5ec1f0a554f68a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1895,9 +1895,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         // FIXME(compiler-errors): This could be generalized, both to\n                         // be more granular, and probably look past other `#[fundamental]`\n                         // types, too.\n-                        self.tcx\n-                            .visibility(def.did())\n-                            .is_accessible_from(body_id.owner.to_def_id(), self.tcx)\n+                        self.tcx.visibility(def.did()).is_accessible_from(body_id.owner, self.tcx)\n                     } else {\n                         true\n                     }"}, {"sha": "e1d55ff82cbadf12320e977c2152934f32302092", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -375,7 +375,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     let field_is_local = sole_field.did.is_local();\n                     let field_is_accessible =\n-                        sole_field.vis.is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx)\n+                        sole_field.vis.is_accessible_from(expr.hir_id.owner, self.tcx)\n                         // Skip suggestions for unstable public fields (for example `Pin::pointer`)\n                         && matches!(self.tcx.eval_stability(sole_field.did, None, expr.span, None), EvalResult::Allow | EvalResult::Unmarked);\n "}, {"sha": "0e6a8ef8265b2c15e8e2dbb965ad18ad87e243ab", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1729,9 +1729,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let private_fields: Vec<&ty::FieldDef> = variant\n                 .fields\n                 .iter()\n-                .filter(|field| {\n-                    !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n-                })\n+                .filter(|field| !field.vis.is_accessible_from(tcx.parent_module(expr_id), tcx))\n                 .collect();\n \n             if !private_fields.is_empty() {\n@@ -2343,7 +2341,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let ty::Adt(def, _) = output_ty.kind() && !def.is_enum() {\n                 def.non_enum_variant().fields.iter().any(|field| {\n                     field.ident(self.tcx) == ident\n-                        && field.vis.is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx)\n+                        && field.vis.is_accessible_from(expr.hir_id.owner, self.tcx)\n                 })\n             } else if let ty::Tuple(tys) = output_ty.kind()\n                 && let Ok(idx) = ident.as_str().parse::<usize>()"}, {"sha": "8065b848ad6f88c6399a5c6f0f569b032223dca3", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1161,7 +1161,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => None,\n         });\n         if let Some((field, field_ty)) = field_receiver {\n-            let scope = tcx.parent_module(self.body_id).to_def_id();\n+            let scope = tcx.parent_module(self.body_id);\n             let is_accessible = field.vis.is_accessible_from(scope, tcx);\n \n             if is_accessible {"}, {"sha": "9fb915a056ab654b9be3f2241f3611bcd6c1a2cc", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1397,7 +1397,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .iter()\n                 .copied()\n                 .filter(|(field, _)| {\n-                    field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n+                    field.vis.is_accessible_from(tcx.parent_module(pat.hir_id), tcx)\n                         && !matches!(\n                             tcx.eval_stability(field.did, None, DUMMY_SP, None),\n                             EvalResult::Deny { .. }"}, {"sha": "c2baea839f6384eef1dc8e754a068ed2bf985db4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -1777,7 +1777,7 @@ fn is_field_vis_inherited(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-pub(crate) fn clean_visibility(vis: ty::Visibility) -> Visibility {\n+pub(crate) fn clean_visibility(vis: ty::Visibility<DefId>) -> Visibility {\n     match vis {\n         ty::Visibility::Public => Visibility::Public,\n         ty::Visibility::Restricted(module) => Visibility::Restricted(module),\n@@ -2111,8 +2111,8 @@ fn clean_use_statement<'tcx>(\n     // `pub(super)` or higher. If the current module is the top level\n     // module, there isn't really a parent module, which makes the results\n     // meaningless. In this case, we make sure the answer is `false`.\n-    let is_visible_from_parent_mod = visibility.is_accessible_from(parent_mod.to_def_id(), cx.tcx)\n-        && !current_mod.is_top_level_module();\n+    let is_visible_from_parent_mod =\n+        visibility.is_accessible_from(parent_mod, cx.tcx) && !current_mod.is_top_level_module();\n \n     if pub_underscore {\n         if let Some(ref inline) = inline_attr {"}, {"sha": "4e68d6810e29b0101aca9f22d8c454f5bdc65c38", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -142,7 +142,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 if adt.is_struct();\n                 let variant = adt.non_enum_variant();\n                 if adt.did().is_local() || !variant.is_field_list_non_exhaustive();\n-                let module_did = cx.tcx.parent_module(stmt.hir_id).to_def_id();\n+                let module_did = cx.tcx.parent_module(stmt.hir_id);\n                 if variant\n                     .fields\n                     .iter()"}, {"sha": "23c86482b46cb1186f9221d7c11f49c51cfea29d", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b810063dc87bc985e8aab8d0fa2179add2610f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b810063dc87bc985e8aab8d0fa2179add2610f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=12b810063dc87bc985e8aab8d0fa2179add2610f", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::{\n     self, Binder, BoundConstness, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef,\n-    Ty, TyCtxt, Visibility,\n+    Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -464,7 +464,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     if_chain! {\n         if let ty::Adt(adt, substs) = ty.kind();\n-        if cx.tcx.visibility(adt.did()) == Visibility::Public;\n+        if cx.tcx.visibility(adt.did()).is_public();\n         if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n         if let Some(def_id) = trait_ref.trait_def_id();\n         if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);"}]}