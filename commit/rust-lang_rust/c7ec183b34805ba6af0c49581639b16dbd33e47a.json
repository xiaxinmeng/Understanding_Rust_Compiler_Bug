{"sha": "c7ec183b34805ba6af0c49581639b16dbd33e47a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZWMxODNiMzQ4MDViYTZhZjBjNDk1ODE2MzliMTZkYmQzM2U0N2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-26T19:11:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-26T19:11:40Z"}, "message": "libsyntax: Fix pretty printing of tuple structs. Attempt to put out fire. rs=rustbot", "tree": {"sha": "ada5b09e9f0fa69f560053a8314f3f8125af65b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada5b09e9f0fa69f560053a8314f3f8125af65b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7ec183b34805ba6af0c49581639b16dbd33e47a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ec183b34805ba6af0c49581639b16dbd33e47a", "html_url": "https://github.com/rust-lang/rust/commit/c7ec183b34805ba6af0c49581639b16dbd33e47a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7ec183b34805ba6af0c49581639b16dbd33e47a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c851d2a1bc7683d0eb662ac1fcf6aecfe90cce4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c851d2a1bc7683d0eb662ac1fcf6aecfe90cce4f", "html_url": "https://github.com/rust-lang/rust/commit/c851d2a1bc7683d0eb662ac1fcf6aecfe90cce4f"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "82db3aaa4b3a2d7bd770f2d81f5ec358ac57864f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 51, "deletions": 26, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c7ec183b34805ba6af0c49581639b16dbd33e47a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ec183b34805ba6af0c49581639b16dbd33e47a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c7ec183b34805ba6af0c49581639b16dbd33e47a", "patch": "@@ -672,36 +672,61 @@ fn print_struct(s: ps, struct_def: @ast::struct_def, tps: ~[ast::ty_param],\n         commasep(s, inconsistent, struct_def.traits, |s, p|\n             print_path(s, p.path, false));\n     }\n-    bopen(s);\n-    hardbreak_if_not_bol(s);\n-    do struct_def.dtor.iter |dtor| {\n-      hardbreak_if_not_bol(s);\n-      maybe_print_comment(s, dtor.span.lo);\n-      print_outer_attributes(s, dtor.node.attrs);\n-      head(s, ~\"drop\");\n-      print_block(s, dtor.node.body);\n-    }\n-    for struct_def.fields.each |field| {\n-        match field.node.kind {\n-            ast::unnamed_field => {} // We don't print here.\n-            ast::named_field(ident, mutability, visibility) => {\n-                hardbreak_if_not_bol(s);\n-                maybe_print_comment(s, field.span.lo);\n-                print_visibility(s, visibility);\n-                if mutability == ast::class_mutable {\n-                    word_nbsp(s, ~\"mut\");\n+    if ast_util::struct_def_is_tuple_like(struct_def) {\n+        popen(s);\n+        let mut first = true;\n+        for struct_def.fields.each |field| {\n+            if first {\n+                first = false;\n+            } else {\n+                word_space(s, ~\",\");\n+            }\n+\n+            match field.node.kind {\n+                ast::named_field(*) => fail ~\"unexpected named field\",\n+                ast::unnamed_field => {\n+                    maybe_print_comment(s, field.span.lo);\n+                    print_type(s, field.node.ty);\n                 }\n-                print_ident(s, ident);\n-                word_nbsp(s, ~\":\");\n-                print_type(s, field.node.ty);\n-                word(s.s, ~\",\");\n             }\n         }\n+        pclose(s);\n+        word(s.s, ~\";\");\n+        end(s); // close the outer-box\n+    } else {\n+        bopen(s);\n+        hardbreak_if_not_bol(s);\n+        do struct_def.dtor.iter |dtor| {\n+          hardbreak_if_not_bol(s);\n+          maybe_print_comment(s, dtor.span.lo);\n+          print_outer_attributes(s, dtor.node.attrs);\n+          head(s, ~\"drop\");\n+          print_block(s, dtor.node.body);\n+        }\n+\n+        for struct_def.fields.each |field| {\n+            match field.node.kind {\n+                ast::unnamed_field => fail ~\"unexpected unnamed field\",\n+                ast::named_field(ident, mutability, visibility) => {\n+                    hardbreak_if_not_bol(s);\n+                    maybe_print_comment(s, field.span.lo);\n+                    print_visibility(s, visibility);\n+                    if mutability == ast::class_mutable {\n+                        word_nbsp(s, ~\"mut\");\n+                    }\n+                    print_ident(s, ident);\n+                    word_nbsp(s, ~\":\");\n+                    print_type(s, field.node.ty);\n+                    word(s.s, ~\",\");\n+                }\n+            }\n+        }\n+\n+        for struct_def.methods.each |method| {\n+            print_method(s, *method);\n+        }\n+        bclose(s, span);\n     }\n-    for struct_def.methods.each |method| {\n-        print_method(s, *method);\n-    }\n-    bclose(s, span);\n }\n \n /// This doesn't deserve to be called \"pretty\" printing, but it should be"}]}