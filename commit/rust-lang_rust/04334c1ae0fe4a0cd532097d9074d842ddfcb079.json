{"sha": "04334c1ae0fe4a0cd532097d9074d842ddfcb079", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzM0YzFhZTBmZTRhMGNkNTMyMDk3ZDkwNzRkODQyZGRmY2IwNzk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T04:55:14Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:52Z"}, "message": "librustc: convert LangItemsCollector::item_refs to take @~str as a key", "tree": {"sha": "3ede67bbcdaca615946b11f51b5c1c7a80301c55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ede67bbcdaca615946b11f51b5c1c7a80301c55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04334c1ae0fe4a0cd532097d9074d842ddfcb079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04334c1ae0fe4a0cd532097d9074d842ddfcb079", "html_url": "https://github.com/rust-lang/rust/commit/04334c1ae0fe4a0cd532097d9074d842ddfcb079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04334c1ae0fe4a0cd532097d9074d842ddfcb079/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95f21f7be609b6ba82729268bc08ac6b9ad3076", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95f21f7be609b6ba82729268bc08ac6b9ad3076", "html_url": "https://github.com/rust-lang/rust/commit/e95f21f7be609b6ba82729268bc08ac6b9ad3076"}], "stats": {"total": 91, "additions": 45, "deletions": 46}, "files": [{"sha": "983ee2ca141df6b497586920c938eaf06c03967b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 45, "deletions": 46, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/04334c1ae0fe4a0cd532097d9074d842ddfcb079/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04334c1ae0fe4a0cd532097d9074d842ddfcb079/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=04334c1ae0fe4a0cd532097d9074d842ddfcb079", "patch": "@@ -256,45 +256,46 @@ fn LanguageItemCollector(crate: @crate,\n                       -> LanguageItemCollector/&r {\n     let item_refs = HashMap();\n \n-    item_refs.insert(~\"const\", ConstTraitLangItem as uint);\n-    item_refs.insert(~\"copy\", CopyTraitLangItem as uint);\n-    item_refs.insert(~\"owned\", OwnedTraitLangItem as uint);\n-    item_refs.insert(~\"durable\", DurableTraitLangItem as uint);\n-\n-    item_refs.insert(~\"drop\", DropTraitLangItem as uint);\n-\n-    item_refs.insert(~\"add\", AddTraitLangItem as uint);\n-    item_refs.insert(~\"sub\", SubTraitLangItem as uint);\n-    item_refs.insert(~\"mul\", MulTraitLangItem as uint);\n-    item_refs.insert(~\"div\", DivTraitLangItem as uint);\n-    item_refs.insert(~\"modulo\", ModuloTraitLangItem as uint);\n-    item_refs.insert(~\"neg\", NegTraitLangItem as uint);\n-    item_refs.insert(~\"not\", NotTraitLangItem as uint);\n-    item_refs.insert(~\"bitxor\", BitXorTraitLangItem as uint);\n-    item_refs.insert(~\"bitand\", BitAndTraitLangItem as uint);\n-    item_refs.insert(~\"bitor\", BitOrTraitLangItem as uint);\n-    item_refs.insert(~\"shl\", ShlTraitLangItem as uint);\n-    item_refs.insert(~\"shr\", ShrTraitLangItem as uint);\n-    item_refs.insert(~\"index\", IndexTraitLangItem as uint);\n-\n-    item_refs.insert(~\"eq\", EqTraitLangItem as uint);\n-    item_refs.insert(~\"ord\", OrdTraitLangItem as uint);\n-\n-    item_refs.insert(~\"str_eq\", StrEqFnLangItem as uint);\n-    item_refs.insert(~\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n-    item_refs.insert(~\"annihilate\", AnnihilateFnLangItem as uint);\n-    item_refs.insert(~\"log_type\", LogTypeFnLangItem as uint);\n-    item_refs.insert(~\"fail_\", FailFnLangItem as uint);\n-    item_refs.insert(~\"fail_bounds_check\", FailBoundsCheckFnLangItem as uint);\n-    item_refs.insert(~\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n-    item_refs.insert(~\"exchange_free\", ExchangeFreeFnLangItem as uint);\n-    item_refs.insert(~\"malloc\", MallocFnLangItem as uint);\n-    item_refs.insert(~\"free\", FreeFnLangItem as uint);\n-    item_refs.insert(~\"borrow_as_imm\", BorrowAsImmFnLangItem as uint);\n-    item_refs.insert(~\"return_to_mut\", ReturnToMutFnLangItem as uint);\n-    item_refs.insert(~\"check_not_borrowed\",\n+    item_refs.insert(@~\"const\", ConstTraitLangItem as uint);\n+    item_refs.insert(@~\"copy\", CopyTraitLangItem as uint);\n+    item_refs.insert(@~\"owned\", OwnedTraitLangItem as uint);\n+    item_refs.insert(@~\"durable\", DurableTraitLangItem as uint);\n+\n+    item_refs.insert(@~\"drop\", DropTraitLangItem as uint);\n+\n+    item_refs.insert(@~\"add\", AddTraitLangItem as uint);\n+    item_refs.insert(@~\"sub\", SubTraitLangItem as uint);\n+    item_refs.insert(@~\"mul\", MulTraitLangItem as uint);\n+    item_refs.insert(@~\"div\", DivTraitLangItem as uint);\n+    item_refs.insert(@~\"modulo\", ModuloTraitLangItem as uint);\n+    item_refs.insert(@~\"neg\", NegTraitLangItem as uint);\n+    item_refs.insert(@~\"not\", NotTraitLangItem as uint);\n+    item_refs.insert(@~\"bitxor\", BitXorTraitLangItem as uint);\n+    item_refs.insert(@~\"bitand\", BitAndTraitLangItem as uint);\n+    item_refs.insert(@~\"bitor\", BitOrTraitLangItem as uint);\n+    item_refs.insert(@~\"shl\", ShlTraitLangItem as uint);\n+    item_refs.insert(@~\"shr\", ShrTraitLangItem as uint);\n+    item_refs.insert(@~\"index\", IndexTraitLangItem as uint);\n+\n+    item_refs.insert(@~\"eq\", EqTraitLangItem as uint);\n+    item_refs.insert(@~\"ord\", OrdTraitLangItem as uint);\n+\n+    item_refs.insert(@~\"str_eq\", StrEqFnLangItem as uint);\n+    item_refs.insert(@~\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n+    item_refs.insert(@~\"annihilate\", AnnihilateFnLangItem as uint);\n+    item_refs.insert(@~\"log_type\", LogTypeFnLangItem as uint);\n+    item_refs.insert(@~\"fail_\", FailFnLangItem as uint);\n+    item_refs.insert(@~\"fail_bounds_check\",\n+                     FailBoundsCheckFnLangItem as uint);\n+    item_refs.insert(@~\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n+    item_refs.insert(@~\"exchange_free\", ExchangeFreeFnLangItem as uint);\n+    item_refs.insert(@~\"malloc\", MallocFnLangItem as uint);\n+    item_refs.insert(@~\"free\", FreeFnLangItem as uint);\n+    item_refs.insert(@~\"borrow_as_imm\", BorrowAsImmFnLangItem as uint);\n+    item_refs.insert(@~\"return_to_mut\", ReturnToMutFnLangItem as uint);\n+    item_refs.insert(@~\"check_not_borrowed\",\n                      CheckNotBorrowedFnLangItem as uint);\n-    item_refs.insert(~\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n+    item_refs.insert(@~\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n \n     LanguageItemCollector {\n         crate: crate,\n@@ -310,19 +311,17 @@ struct LanguageItemCollector {\n     crate: @crate,\n     session: Session,\n \n-    item_refs: HashMap<~str,uint>,\n+    item_refs: HashMap<@~str, uint>,\n }\n \n impl LanguageItemCollector {\n     fn match_and_collect_meta_item(item_def_id: def_id,\n                                    meta_item: meta_item) {\n         match meta_item.node {\n-            meta_name_value(ref key, literal) => {\n+            meta_name_value(key, literal) => {\n                 match literal.node {\n                     lit_str(value) => {\n-                        self.match_and_collect_item(item_def_id,\n-                                                    (/*bad*/copy **key),\n-                                                    /*bad*/copy *value);\n+                        self.match_and_collect_item(item_def_id, key, value);\n                     }\n                     _ => {} // Skip.\n                 }\n@@ -347,8 +346,8 @@ impl LanguageItemCollector {\n         self.items.items[item_index] = Some(item_def_id);\n     }\n \n-    fn match_and_collect_item(item_def_id: def_id, key: ~str, value: ~str) {\n-        if key != ~\"lang\" {\n+    fn match_and_collect_item(item_def_id: def_id, key: @~str, value: @~str) {\n+        if *key != ~\"lang\" {\n             return;    // Didn't match.\n         }\n \n@@ -394,7 +393,7 @@ impl LanguageItemCollector {\n         for self.item_refs.each |&key, &item_ref| {\n             match self.items.items[item_ref] {\n                 None => {\n-                    self.session.err(fmt!(\"no item found for `%s`\", key));\n+                    self.session.err(fmt!(\"no item found for `%s`\", *key));\n                 }\n                 Some(_) => {\n                     // OK."}]}