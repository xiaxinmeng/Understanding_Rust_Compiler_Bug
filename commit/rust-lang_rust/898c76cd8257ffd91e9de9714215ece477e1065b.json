{"sha": "898c76cd8257ffd91e9de9714215ece477e1065b", "node_id": "C_kwDOAAsO6NoAKDg5OGM3NmNkODI1N2ZmZDkxZTlkZTk3MTQyMTVlY2U0NzdlMTA2NWI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-21T15:02:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-21T15:02:15Z"}, "message": "Make error messages great again (and fix clippy and add test)", "tree": {"sha": "9e2b9f466810d6976982c601e2440a49013687ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2b9f466810d6976982c601e2440a49013687ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898c76cd8257ffd91e9de9714215ece477e1065b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898c76cd8257ffd91e9de9714215ece477e1065b", "html_url": "https://github.com/rust-lang/rust/commit/898c76cd8257ffd91e9de9714215ece477e1065b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898c76cd8257ffd91e9de9714215ece477e1065b/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "url": "https://api.github.com/repos/rust-lang/rust/commits/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "html_url": "https://github.com/rust-lang/rust/commit/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f"}], "stats": {"total": 112, "additions": 69, "deletions": 43}, "files": [{"sha": "bf48f11e7d988e89b710e7fe4a798dfc1fe2d6e6", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -366,7 +366,7 @@ fn typeck_with_fallback<'tcx>(\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n+        let mut fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n                 <dyn AstConv<'_>>::ty_of_fn(&fcx, id, header.unsafety, header.abi, decl, None, None)\n@@ -459,7 +459,11 @@ fn typeck_with_fallback<'tcx>(\n \n         // Closure and generator analysis may run after fallback\n         // because they don't constrain other type variables.\n+        // Closure analysis only runs on closures. Therefore they only need to fulfill non-const predicates (as of now)\n+        let prev_constness = fcx.param_env.constness();\n+        fcx.param_env = fcx.param_env.without_const();\n         fcx.closure_analyze(body);\n+        fcx.param_env = fcx.param_env.with_constness(prev_constness);\n         assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n         // Before the generator analysis, temporary scopes shall be marked to provide more\n         // precise information on types to be captured."}, {"sha": "806540e1775e83b499932d16ebbd1fcf8725aab1", "filename": "src/test/ui/const-generics/issue-93647.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -1,6 +1,6 @@\n struct X<const N: usize = {\n     (||1usize)()\n-    //~^ ERROR the trait bound\n+    //~^ ERROR cannot call non-const closure\n }>;\n \n fn main() {}"}, {"sha": "e2048ecd60f6d6e6974e136925de0f9f3ba09cfc", "filename": "src/test/ui/const-generics/issue-93647.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -1,17 +1,12 @@\n-error[E0277]: the trait bound `[closure@$DIR/issue-93647.rs:2:6: 2:8]: Fn<()>` is not satisfied\n-  --> $DIR/issue-93647.rs:2:5\n-   |\n-LL |     (||1usize)()\n-   |     ^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-93647.rs:2:6: 2:8]`\n-   |\n-   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-93647.rs:2:6: 2:8]`\n-note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-93647.rs:2:6: 2:8]`, but that implementation is not `const`\n+error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-93647.rs:2:5\n    |\n LL |     (||1usize)()\n    |     ^^^^^^^^^^^^\n-   = note: wrap the `[closure@$DIR/issue-93647.rs:2:6: 2:8]` in a closure with no arguments: `|| { /* code */ }`\n+   |\n+   = note: closures need an RFC before allowed to be called in constants\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "f8131c9f3b717107d5d2530b29490d79adfdc163", "filename": "src/test/ui/consts/issue-28113.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -2,7 +2,7 @@\n \n const X: u8 =\n     || -> u8 { 5 }()\n-    //~^ ERROR the trait bound\n+    //~^ ERROR cannot call non-const closure\n ;\n \n fn main() {}"}, {"sha": "7ad1f752eb085fd56dececf014f75d64e81fc0fe", "filename": "src/test/ui/consts/issue-28113.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -1,17 +1,12 @@\n-error[E0277]: the trait bound `[closure@$DIR/issue-28113.rs:4:5: 4:13]: Fn<()>` is not satisfied\n-  --> $DIR/issue-28113.rs:4:5\n-   |\n-LL |     || -> u8 { 5 }()\n-   |     ^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-28113.rs:4:5: 4:13]`\n-   |\n-   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-28113.rs:4:5: 4:13]`\n-note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-28113.rs:4:5: 4:13]`, but that implementation is not `const`\n+error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-28113.rs:4:5\n    |\n LL |     || -> u8 { 5 }()\n    |     ^^^^^^^^^^^^^^^^\n-   = note: wrap the `[closure@$DIR/issue-28113.rs:4:5: 4:13]` in a closure with no arguments: `|| { /* code */ }`\n+   |\n+   = note: closures need an RFC before allowed to be called in constants\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "fd02d2154805c08acd517e0f1520262095b5cf0e", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -1,8 +1,11 @@\n const fn foo() { (||{})() }\n-//~^ ERROR the trait bound\n+//~^ ERROR cannot call non-const closure\n+//~| ERROR erroneous constant\n+//~| WARN this was previously accepted\n \n const fn bad(input: fn()) {\n     input()\n+    //~^ ERROR function pointer calls are not allowed\n }\n \n fn main() {"}, {"sha": "73a0f8ec0d04f9d90abcef63f4f6227416d60d0a", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -1,17 +1,39 @@\n-error[E0277]: the trait bound `[closure@$DIR/issue-56164.rs:1:19: 1:21]: Fn<()>` is not satisfied\n+error[E0015]: cannot call non-const closure in constant functions\n   --> $DIR/issue-56164.rs:1:18\n    |\n LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-56164.rs:1:19: 1:21]`\n+   |                  ^^^^^^^^\n+   |\n+   = note: closures need an RFC before allowed to be called in constant functions\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: function pointer calls are not allowed in constant functions\n+  --> $DIR/issue-56164.rs:7:5\n    |\n-   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-56164.rs:1:19: 1:21]`\n-note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-56164.rs:1:19: 1:21]`, but that implementation is not `const`\n+LL |     input()\n+   |     ^^^^^^^\n+\n+error: erroneous constant used\n   --> $DIR/issue-56164.rs:1:18\n    |\n LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^^^\n-   = note: wrap the `[closure@$DIR/issue-56164.rs:1:19: 1:21]` in a closure with no arguments: `|| { /* code */ }`\n+   |                  ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0015`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/issue-56164.rs:1:18\n+   |\n+LL | const fn foo() { (||{})() }\n+   |                  ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "37958e7919d64890ddfd2df5d5c9e1ec8949d513", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -3,7 +3,7 @@\n // in the length part of an array.\n \n struct Bug {\n-    a: [(); (|| { 0 })()] //~ ERROR the trait bound\n+    a: [(); (|| { 0 })()] //~ ERROR cannot call non-const closure\n }\n \n fn main() {}"}, {"sha": "74fbbc680f7e413ad6f6a07fdc759260e554e253", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -1,17 +1,12 @@\n-error[E0277]: the trait bound `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]: Fn<()>` is not satisfied\n-  --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n-   |\n-LL |     a: [(); (|| { 0 })()]\n-   |             ^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`\n-   |\n-   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`\n-note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`, but that implementation is not `const`\n+error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n    |\n LL |     a: [(); (|| { 0 })()]\n    |             ^^^^^^^^^^^^\n-   = note: wrap the `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]` in a closure with no arguments: `|| { /* code */ }`\n+   |\n+   = note: closures need an RFC before allowed to be called in constants\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "a851136009c46319e4d1e7a54d50abf282ac6c84", "filename": "src/test/ui/rfc-2632-const-trait-impl/nested-closure.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c76cd8257ffd91e9de9714215ece477e1065b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs?ref=898c76cd8257ffd91e9de9714215ece477e1065b", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(const_trait_impl, once_cell)]\n+\n+use std::sync::LazyLock;\n+\n+static EXTERN_FLAGS: LazyLock<String> = LazyLock::new(|| {\n+    let x = || String::new();\n+    x()\n+});\n+\n+fn main() {}"}]}