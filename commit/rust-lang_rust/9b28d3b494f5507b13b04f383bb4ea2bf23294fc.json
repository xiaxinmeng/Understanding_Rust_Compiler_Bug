{"sha": "9b28d3b494f5507b13b04f383bb4ea2bf23294fc", "node_id": "C_kwDOAAsO6NoAKDliMjhkM2I0OTRmNTUwN2IxM2IwNGYzODNiYjRlYTJiZjIzMjk0ZmM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-02T10:09:22Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-02T10:21:02Z"}, "message": "try to evaluate in from_opt_const_arg_anon_const", "tree": {"sha": "a7438e63c5821c035446625d0c5b7aa81f8f82af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7438e63c5821c035446625d0c5b7aa81f8f82af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b28d3b494f5507b13b04f383bb4ea2bf23294fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b28d3b494f5507b13b04f383bb4ea2bf23294fc", "html_url": "https://github.com/rust-lang/rust/commit/9b28d3b494f5507b13b04f383bb4ea2bf23294fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b28d3b494f5507b13b04f383bb4ea2bf23294fc/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0e05f04266c5725b11677e5c74d33f930e76207", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e05f04266c5725b11677e5c74d33f930e76207", "html_url": "https://github.com/rust-lang/rust/commit/d0e05f04266c5725b11677e5c74d33f930e76207"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "9b39c61719c88caf37a65b85e584560c7de64d53", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9b28d3b494f5507b13b04f383bb4ea2bf23294fc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28d3b494f5507b13b04f383bb4ea2bf23294fc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9b28d3b494f5507b13b04f383bb4ea2bf23294fc", "patch": "@@ -9,7 +9,7 @@ use crate::ty::adjustment::PointerCast;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n+use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n \n@@ -2901,14 +2901,19 @@ impl<'tcx> ConstantKind<'tcx> {\n \n     /// Literals are converted to `ConstantKindVal`, const generic parameters are eagerly\n     /// converted to a constant, everything else becomes `Unevaluated`.\n-    pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Self {\n-        Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id))\n+    pub fn from_anon_const(\n+        tcx: TyCtxt<'tcx>,\n+        def_id: LocalDefId,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Self {\n+        Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id), param_env)\n     }\n \n     #[instrument(skip(tcx), level = \"debug\")]\n     fn from_opt_const_arg_anon_const(\n         tcx: TyCtxt<'tcx>,\n         def: ty::WithOptConstParam<LocalDefId>,\n+        param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n         let body_id = match tcx.hir().get_by_def_id(def.did) {\n             hir::Node::AnonConst(ac) => ac.body,\n@@ -2921,11 +2926,72 @@ impl<'tcx> ConstantKind<'tcx> {\n         let expr = &tcx.hir().body(body_id).value;\n         debug!(?expr);\n \n+        // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n+        // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n+        let expr = match &expr.kind {\n+            hir::ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() => {\n+                block.expr.as_ref().unwrap()\n+            }\n+            _ => expr,\n+        };\n+\n         let ty = tcx.type_of(def.def_id_for_type_of());\n \n-        match Self::try_eval_lit_or_param(tcx, ty, expr) {\n-            Some(v) => v,\n-            None => {\n+        // FIXME(const_generics): We currently have to special case parameters because `min_const_generics`\n+        // does not provide the parents generics to anonymous constants. We still allow generic const\n+        // parameters by themselves however, e.g. `N`.  These constants would cause an ICE if we were to\n+        // ever try to substitute the generic parameters in their bodies.\n+        //\n+        // While this doesn't happen as these constants are always used as `ty::ConstKind::Param`, it does\n+        // cause issues if we were to remove that special-case and try to evaluate the constant instead.\n+        use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n+        match expr.kind {\n+            ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n+                // Find the name and index of the const parameter by indexing the generics of\n+                // the parent item and construct a `ParamConst`.\n+                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+                let item_id = tcx.hir().get_parent_node(hir_id);\n+                let item_def_id = tcx.hir().local_def_id(item_id);\n+                let generics = tcx.generics_of(item_def_id.to_def_id());\n+                let index = generics.param_def_id_to_index[&def_id];\n+                let name = tcx.hir().name(hir_id);\n+                let ty_const = tcx.mk_const(ty::ConstS {\n+                    val: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n+                    ty,\n+                });\n+\n+                return Self::Ty(ty_const);\n+            }\n+            _ => {}\n+        }\n+\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n+        let parent_substs = if let Some(parent_hir_id) = tcx.hir().find_parent_node(hir_id) {\n+            if let Some(parent_did) = tcx.hir().opt_local_def_id(parent_hir_id) {\n+                InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n+            } else {\n+                tcx.mk_substs(Vec::<GenericArg<'tcx>>::new().into_iter())\n+            }\n+        } else {\n+            tcx.mk_substs(Vec::<GenericArg<'tcx>>::new().into_iter())\n+        };\n+        debug!(?parent_substs);\n+\n+        let did = def.did.to_def_id();\n+        let child_substs = InternalSubsts::identity_for_item(tcx, did);\n+        let substs = tcx.mk_substs(parent_substs.into_iter().chain(child_substs.into_iter()));\n+        debug!(?substs);\n+\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n+        let span = tcx.hir().span(hir_id);\n+        let uneval = ty::Unevaluated::new(def.to_global(), substs);\n+        debug!(?span, ?param_env);\n+\n+        match tcx.const_eval_resolve(param_env, uneval, Some(span)) {\n+            Ok(val) => Self::Val(val, ty),\n+            Err(_) => {\n+                // Error was handled in `const_eval_resolve`. Here we just create a\n+                // new unevaluated const and error hard later in codegen\n                 let ty_const = tcx.mk_const(ty::ConstS {\n                     val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: def.to_global(),\n@@ -2934,6 +3000,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                     }),\n                     ty,\n                 });\n+\n                 Self::Ty(ty_const)\n             }\n         }"}, {"sha": "7ef33011234fc4ff87cd426682c0b660e7769ef7", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b28d3b494f5507b13b04f383bb4ea2bf23294fc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28d3b494f5507b13b04f383bb4ea2bf23294fc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=9b28d3b494f5507b13b04f383bb4ea2bf23294fc", "patch": "@@ -491,8 +491,11 @@ impl<'tcx> Cx<'tcx> {\n                             hir::InlineAsmOperand::Const { ref anon_const } => {\n                                 let anon_const_def_id =\n                                     self.tcx.hir().local_def_id(anon_const.hir_id);\n-                                let value =\n-                                    mir::ConstantKind::from_anon_const(self.tcx, anon_const_def_id);\n+                                let value = mir::ConstantKind::from_anon_const(\n+                                    self.tcx,\n+                                    anon_const_def_id,\n+                                    self.param_env,\n+                                );\n                                 let span = self.tcx.hir().span(anon_const.hir_id);\n \n                                 InlineAsmOperand::Const { value, span }"}]}