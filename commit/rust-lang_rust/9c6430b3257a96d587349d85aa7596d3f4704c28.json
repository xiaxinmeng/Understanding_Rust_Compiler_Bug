{"sha": "9c6430b3257a96d587349d85aa7596d3f4704c28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNjQzMGIzMjU3YTk2ZDU4NzM0OWQ4NWFhNzU5NmQzZjQ3MDRjMjg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-17T21:58:48Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-05-25T05:47:25Z"}, "message": "Refactor out `ast::MacroDef`.", "tree": {"sha": "5272a2c2e50ea53bd9766c889748a9a3e84d9276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5272a2c2e50ea53bd9766c889748a9a3e84d9276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c6430b3257a96d587349d85aa7596d3f4704c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6430b3257a96d587349d85aa7596d3f4704c28", "html_url": "https://github.com/rust-lang/rust/commit/9c6430b3257a96d587349d85aa7596d3f4704c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c6430b3257a96d587349d85aa7596d3f4704c28/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf747fcbf716a8afced9d23aa15bb47d93805209", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf747fcbf716a8afced9d23aa15bb47d93805209", "html_url": "https://github.com/rust-lang/rust/commit/cf747fcbf716a8afced9d23aa15bb47d93805209"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "77bcde22ef72d4a001f90d0c77c749ebd0431f98", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -1505,7 +1505,7 @@ impl<'a> LoweringContext<'a> {\n         if let ItemKind::MacroDef(ref tts) = i.node {\n             if i.attrs.iter().any(|attr| attr.path == \"macro_export\") {\n                 self.exported_macros.push(hir::MacroDef {\n-                    name: name, attrs: attrs, id: i.id, span: i.span, body: tts.clone().into(),\n+                    name: name, attrs: attrs, id: i.id, span: i.span, body: tts.stream(),\n                 });\n             }\n             return None;"}, {"sha": "a265a84114a34525f7be2e07e1593451cecca6ef", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -49,7 +49,6 @@ use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n-use syntax::tokenstream::ThinTokenStream;\n \n /// Information about the registered lints.\n ///\n@@ -1127,7 +1126,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         run_lints!(self, check_attribute, early_passes, attr);\n     }\n \n-    fn visit_mac_def(&mut self, _mac: &'a ThinTokenStream, id: ast::NodeId) {\n+    fn visit_mac_def(&mut self, _mac: &'a ast::MacroDef, id: ast::NodeId) {\n         let lints = self.sess.lints.borrow_mut().take(id);\n         for early_lint in lints {\n             self.early_lint(&early_lint);"}, {"sha": "06472ed7fd1429960990c1fea50fc35389505090", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -386,7 +386,9 @@ impl CrateStore for cstore::CStore {\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),\n-            node: ast::ItemKind::MacroDef(body.into()),\n+            node: ast::ItemKind::MacroDef(ast::MacroDef {\n+                tokens: body.into(),\n+            }),\n             vis: ast::Visibility::Inherited,\n         })\n     }"}, {"sha": "39ebe490d0eb28a064821bde1f20c3e37b638db2", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -16,7 +16,6 @@ use std::mem;\n use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::tokenstream::TokenStream;\n use syntax_pos::Span;\n \n use rustc::hir::map as hir_map;\n@@ -214,8 +213,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         LoadedMacro::ProcMacro(..) => continue,\n                     };\n \n-                    let matchers = if let ast::ItemKind::MacroDef(ref tokens) = def.node {\n-                        let tts: Vec<_> = TokenStream::from(tokens.clone()).into_trees().collect();\n+                    let matchers = if let ast::ItemKind::MacroDef(ref def) = def.node {\n+                        let tts: Vec<_> = def.stream().into_trees().collect();\n                         tts.chunks(4).map(|arm| arm[0].span()).collect()\n                     } else {\n                         unreachable!()"}, {"sha": "6a30072c835aa27548b14b1588c460cdddc949b1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -1019,6 +1019,17 @@ impl Mac_ {\n     }\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct MacroDef {\n+    pub tokens: ThinTokenStream,\n+}\n+\n+impl MacroDef {\n+    pub fn stream(&self) -> TokenStream {\n+        self.tokens.clone().into()\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`\n@@ -1863,7 +1874,7 @@ pub enum ItemKind {\n     Mac(Mac),\n \n     /// A macro definition.\n-    MacroDef(ThinTokenStream),\n+    MacroDef(MacroDef),\n }\n \n impl ItemKind {"}, {"sha": "7ac3990def4c17ba027642c71857ab668b54c1c2", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -189,7 +189,7 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n \n     // Parse the macro_rules! invocation\n     let body = match def.node {\n-        ast::ItemKind::MacroDef(ref body) => body.clone().into(),\n+        ast::ItemKind::MacroDef(ref body) => body.stream(),\n         _ => unreachable!(),\n     };\n     let argument_map = match parse(sess, body, &argument_gram, None, true) {"}, {"sha": "9aeb9ecca5a59171434449cbfc43f18a1943ca60", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -189,6 +189,10 @@ pub trait Folder : Sized {\n         // fold::noop_fold_mac(_mac, self)\n     }\n \n+    fn fold_macro_def(&mut self, def: MacroDef) -> MacroDef {\n+        noop_fold_macro_def(def, self)\n+    }\n+\n     fn fold_lifetime(&mut self, l: Lifetime) -> Lifetime {\n         noop_fold_lifetime(l, self)\n     }\n@@ -515,6 +519,12 @@ pub fn noop_fold_mac<T: Folder>(Spanned {node, span}: Mac, fld: &mut T) -> Mac {\n     }\n }\n \n+pub fn noop_fold_macro_def<T: Folder>(def: MacroDef, fld: &mut T) -> MacroDef {\n+    MacroDef {\n+        tokens: fld.fold_tts(def.tokens.into()).into(),\n+    }\n+}\n+\n pub fn noop_fold_meta_list_item<T: Folder>(li: NestedMetaItem, fld: &mut T)\n     -> NestedMetaItem {\n     Spanned {\n@@ -919,7 +929,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             items.move_flat_map(|item| folder.fold_trait_item(item)),\n         ),\n         ItemKind::Mac(m) => ItemKind::Mac(folder.fold_mac(m)),\n-        ItemKind::MacroDef(tts) => ItemKind::MacroDef(folder.fold_tts(tts.into()).into()),\n+        ItemKind::MacroDef(def) => ItemKind::MacroDef(folder.fold_macro_def(def)),\n     }\n }\n "}, {"sha": "3c9ad8ca9c04a5289637bf2d341e2b3abd7d0c98", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -3781,7 +3781,9 @@ impl<'a> Parser<'a> {\n         }\n \n         let span = lo.to(self.prev_span);\n-        let kind = ItemKind::MacroDef(tts);\n+        let kind = ItemKind::MacroDef(ast::MacroDef {\n+            tokens: tts,\n+        });\n         Ok(Some(self.mk_item(span, id, kind, Visibility::Inherited, attrs.to_owned())))\n     }\n "}, {"sha": "6c5bf56070e163016330ffbd11179353b68579c0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -1392,7 +1392,7 @@ impl<'a> State<'a> {\n                 self.print_ident(item.ident)?;\n                 self.cbox(INDENT_UNIT)?;\n                 self.popen()?;\n-                self.print_tts(tts.clone().into())?;\n+                self.print_tts(tts.stream())?;\n                 self.pclose()?;\n                 word(&mut self.s, \";\")?;\n                 self.end()?;"}, {"sha": "d29d2497afe1ac22b2f824d7484618a9cb1805b8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6430b3257a96d587349d85aa7596d3f4704c28/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9c6430b3257a96d587349d85aa7596d3f4704c28", "patch": "@@ -27,7 +27,6 @@ use abi::Abi;\n use ast::*;\n use syntax_pos::Span;\n use codemap::Spanned;\n-use tokenstream::ThinTokenStream;\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n@@ -113,7 +112,7 @@ pub trait Visitor<'ast>: Sized {\n         // definition in your trait impl:\n         // visit::walk_mac(self, _mac)\n     }\n-    fn visit_mac_def(&mut self, _mac: &'ast ThinTokenStream, _id: NodeId) {\n+    fn visit_mac_def(&mut self, _mac: &'ast MacroDef, _id: NodeId) {\n         // Nothing to do\n     }\n     fn visit_path(&mut self, path: &'ast Path, _id: NodeId) {"}]}