{"sha": "2b5e592b7af431d227b9aeb905118706beef3270", "node_id": "C_kwDOAAsO6NoAKDJiNWU1OTJiN2FmNDMxZDIyN2I5YWViOTA1MTE4NzA2YmVlZjMyNzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-24T02:50:29Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-24T02:50:29Z"}, "message": "Fix iterator implementation, add some inlines", "tree": {"sha": "d1a44b214595a6d3cfa3880811ad89a3266c6b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a44b214595a6d3cfa3880811ad89a3266c6b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5e592b7af431d227b9aeb905118706beef3270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5e592b7af431d227b9aeb905118706beef3270", "html_url": "https://github.com/rust-lang/rust/commit/2b5e592b7af431d227b9aeb905118706beef3270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5e592b7af431d227b9aeb905118706beef3270/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e5816f1bf051d922e8c46fa6e2414664cc3a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e5816f1bf051d922e8c46fa6e2414664cc3a22", "html_url": "https://github.com/rust-lang/rust/commit/14e5816f1bf051d922e8c46fa6e2414664cc3a22"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "5e4c1284e241e9fd7131d46deaa98e6ce0836742", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e592b7af431d227b9aeb905118706beef3270/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e592b7af431d227b9aeb905118706beef3270/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=2b5e592b7af431d227b9aeb905118706beef3270", "patch": "@@ -10,6 +10,7 @@\n #![feature(macro_metavar_expr)]\n #![feature(min_specialization)]\n #![feature(slice_as_chunks)]\n+#![feature(trusted_len)]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "72b7c08f04bc2e33c7b3633ceb7be712875d13e5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e592b7af431d227b9aeb905118706beef3270/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e592b7af431d227b9aeb905118706beef3270/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2b5e592b7af431d227b9aeb905118706beef3270", "patch": "@@ -38,6 +38,7 @@ use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n \n use proc_macro::bridge::client::ProcMacro;\n use std::io;\n+use std::iter::TrustedLen;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::path::Path;\n@@ -277,17 +278,25 @@ struct DecodeIterator<'a, 'tcx, T> {\n impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Iterator for DecodeIterator<'a, 'tcx, T> {\n     type Item = T;\n \n+    #[inline(always)]\n     fn next(&mut self) -> Option<Self::Item> {\n         self.elem_counter.next().map(|_| T::decode(&mut self.dcx))\n     }\n+\n+    #[inline(always)]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.elem_counter.size_hint()\n+    }\n }\n \n impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> ExactSizeIterator\n     for DecodeIterator<'a, 'tcx, T>\n {\n-    fn len(&self) -> usize {\n-        self.elem_counter.len()\n-    }\n+}\n+\n+unsafe impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> TrustedLen\n+    for DecodeIterator<'a, 'tcx, T>\n+{\n }\n \n impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> LazyArray<T> {\n@@ -321,6 +330,7 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         self.cdata().map_encoded_cnum_to_current(cnum)\n     }\n \n+    #[inline]\n     fn read_lazy_offset_then<T>(&mut self, f: impl Fn(NonZeroUsize) -> T) -> T {\n         let distance = self.read_usize();\n         let position = match self.lazy_state {"}, {"sha": "e3581a7607fb82dae0c4f2299a74bf8b4c93c616", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e592b7af431d227b9aeb905118706beef3270/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e592b7af431d227b9aeb905118706beef3270/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2b5e592b7af431d227b9aeb905118706beef3270", "patch": "@@ -32,24 +32,28 @@ trait ProcessQueryValue<'tcx, T> {\n }\n \n impl<T> ProcessQueryValue<'_, Option<T>> for Option<T> {\n+    #[inline(always)]\n     fn process_decoded(self, _tcx: TyCtxt<'_>, _err: impl Fn() -> !) -> Option<T> {\n         self\n     }\n }\n \n impl<T> ProcessQueryValue<'_, T> for Option<T> {\n+    #[inline(always)]\n     fn process_decoded(self, _tcx: TyCtxt<'_>, err: impl Fn() -> !) -> T {\n         if let Some(value) = self { value } else { err() }\n     }\n }\n \n impl<'tcx, T: ArenaAllocatable<'tcx>> ProcessQueryValue<'tcx, &'tcx T> for Option<T> {\n+    #[inline(always)]\n     fn process_decoded(self, tcx: TyCtxt<'tcx>, err: impl Fn() -> !) -> &'tcx T {\n         if let Some(value) = self { tcx.arena.alloc(value) } else { err() }\n     }\n }\n \n impl<T, E> ProcessQueryValue<'_, Result<Option<T>, E>> for Option<T> {\n+    #[inline(always)]\n     fn process_decoded(self, _tcx: TyCtxt<'_>, _err: impl Fn() -> !) -> Result<Option<T>, E> {\n         Ok(self)\n     }\n@@ -58,12 +62,14 @@ impl<T, E> ProcessQueryValue<'_, Result<Option<T>, E>> for Option<T> {\n impl<'a, 'tcx, T: Copy + Decodable<DecodeContext<'a, 'tcx>>> ProcessQueryValue<'tcx, &'tcx [T]>\n     for Option<DecodeIterator<'a, 'tcx, T>>\n {\n+    #[inline(always)]\n     fn process_decoded(self, tcx: TyCtxt<'tcx>, _err: impl Fn() -> !) -> &'tcx [T] {\n         if let Some(iter) = self { tcx.arena.alloc_from_iter(iter) } else { &[] }\n     }\n }\n \n impl ProcessQueryValue<'_, Option<DeprecationEntry>> for Option<Deprecation> {\n+    #[inline(always)]\n     fn process_decoded(self, _tcx: TyCtxt<'_>, _err: impl Fn() -> !) -> Option<DeprecationEntry> {\n         self.map(DeprecationEntry::external)\n     }"}]}