{"sha": "cf22d749eb9717e1e5befa727db5a9f7c47e8f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjJkNzQ5ZWI5NzE3ZTFlNWJlZmE3MjdkYjVhOWY3YzQ3ZThmNDg=", "commit": {"author": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2013-04-09T03:08:10Z"}, "committer": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2013-04-10T16:45:53Z"}, "message": "Add debug info for bare_fn type", "tree": {"sha": "46810380abf668b66649f51bbcd5cefc9ddfd151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46810380abf668b66649f51bbcd5cefc9ddfd151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf22d749eb9717e1e5befa727db5a9f7c47e8f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf22d749eb9717e1e5befa727db5a9f7c47e8f48", "html_url": "https://github.com/rust-lang/rust/commit/cf22d749eb9717e1e5befa727db5a9f7c47e8f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf22d749eb9717e1e5befa727db5a9f7c47e8f48/comments", "author": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917d5ab34eabab8e2f39e1c0815d67b583e3d422", "url": "https://api.github.com/repos/rust-lang/rust/commits/917d5ab34eabab8e2f39e1c0815d67b583e3d422", "html_url": "https://github.com/rust-lang/rust/commit/917d5ab34eabab8e2f39e1c0815d67b583e3d422"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "c573529fbc23c4a5279e7ef8494bf33c20771d5d", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf22d749eb9717e1e5befa727db5a9f7c47e8f48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf22d749eb9717e1e5befa727db5a9f7c47e8f48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=cf22d749eb9717e1e5befa727db5a9f7c47e8f48", "patch": "@@ -420,7 +420,8 @@ fn create_pointer_type(cx: @CrateContext, t: ty::t, span: span,\n     let fname = filename_from_span(cx, span);\n     let file_node = create_file(cx, fname);\n     //let cu_node = create_compile_unit(cx, fname);\n-    let llnode = create_derived_type(tg, file_node.node, ~\"\", 0, size * 8,\n+    let name = ty_to_str(cx.tcx, t);\n+    let llnode = create_derived_type(tg, file_node.node, name, 0, size * 8,\n                                      align * 8, 0, pointee.node);\n     let mdval = @Metadata {\n         node: llnode,\n@@ -714,6 +715,26 @@ fn create_vec_slice(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t, span: span)\n     return mdval;\n }\n \n+fn create_fn_ty(cx: @CrateContext, fn_ty: ty::t, inputs: ~[ty::t], output: ty::t,\n+                span: span) -> @Metadata<TyDescMetadata> {\n+    let fname = filename_from_span(cx, span);\n+    let file_node = create_file(cx, fname);\n+    let (vp, _, _) = voidptr();\n+    let output_md = create_ty(cx, output, span);\n+    let output_ptr_md = create_pointer_type(cx, output, span, output_md);\n+    let inputs_vals = do inputs.map |arg| { create_ty(cx, *arg, span).node };\n+    let members = ~[output_ptr_md.node, vp] + inputs_vals;\n+    let llnode = create_composite_type(SubroutineTag, ~\"\", file_node.node,\n+                                       0, 0, 0, 0, None, Some(members));\n+    let mdval = @Metadata {\n+        node: llnode,\n+        data: TyDescMetadata {\n+            hash: ty::type_id(fn_ty)\n+        }\n+    };\n+    return mdval;\n+}\n+\n fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n     -> @Metadata<TyDescMetadata> {\n     debug!(\"create_ty: %?\", ty::get(t));\n@@ -772,8 +793,10 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n         ty::ty_rptr(ref _region, ref _mt) => {\n             cx.sess.span_bug(span, ~\"debuginfo for rptr NYI\")\n         },\n-        ty::ty_bare_fn(ref _barefnty) => {\n-            cx.sess.span_bug(span, ~\"debuginfo for bare_fn NYI\")\n+        ty::ty_bare_fn(ref barefnty) => {\n+            let inputs = do barefnty.sig.inputs.map |a| { a.ty };\n+            let output = barefnty.sig.output;\n+            create_fn_ty(cx, t, inputs, output, span)\n         },\n         ty::ty_closure(ref _closurety) => {\n             cx.sess.span_bug(span, ~\"debuginfo for closure NYI\")"}]}