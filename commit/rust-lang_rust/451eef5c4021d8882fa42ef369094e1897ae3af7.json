{"sha": "451eef5c4021d8882fa42ef369094e1897ae3af7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MWVlZjVjNDAyMWQ4ODgyZmE0MmVmMzY5MDk0ZTE4OTdhZTNhZjc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-08T23:35:22Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:47Z"}, "message": "librustc_back: use unboxed closures", "tree": {"sha": "4569e0cf42bf52851785fb46abaadc421f2da54f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4569e0cf42bf52851785fb46abaadc421f2da54f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451eef5c4021d8882fa42ef369094e1897ae3af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451eef5c4021d8882fa42ef369094e1897ae3af7", "html_url": "https://github.com/rust-lang/rust/commit/451eef5c4021d8882fa42ef369094e1897ae3af7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451eef5c4021d8882fa42ef369094e1897ae3af7/comments", "author": null, "committer": null, "parents": [{"sha": "d3d707c88397d8356f5181be600166ded3390907", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d707c88397d8356f5181be600166ded3390907", "html_url": "https://github.com/rust-lang/rust/commit/d3d707c88397d8356f5181be600166ded3390907"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "3a4510703166c84a835b983ceaf0746b86c5ee95", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=451eef5c4021d8882fa42ef369094e1897ae3af7", "patch": "@@ -279,8 +279,9 @@ impl<'a> ArchiveBuilder<'a> {\n         self.archive\n     }\n \n-    fn add_archive(&mut self, archive: &Path, name: &str,\n-                   skip: |&str| -> bool) -> io::IoResult<()> {\n+    fn add_archive<F>(&mut self, archive: &Path, name: &str, mut skip: F) -> io::IoResult<()> where\n+        F: FnMut(&str) -> bool,\n+    {\n         let loc = TempDir::new(\"rsar\").unwrap();\n \n         // First, extract the contents of the archive to a temporary directory."}, {"sha": "cb547df7d9cd83a9cc8a710eb586730431d2e899", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=451eef5c4021d8882fa42ef369094e1897ae3af7", "patch": "@@ -31,6 +31,7 @@\n \n #![allow(unknown_features)]\n #![feature(globs, phase, macro_rules, slicing_syntax)]\n+#![feature(unboxed_closures)]\n \n #[phase(plugin, link)]\n extern crate log;"}, {"sha": "1f8549098d949f044c4768d295b5baa3eb5eaeb4", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=451eef5c4021d8882fa42ef369094e1897ae3af7", "patch": "@@ -14,17 +14,22 @@ use std::os;\n use std::io::IoError;\n use syntax::ast;\n \n-pub struct RPathConfig<'a> {\n+pub struct RPathConfig<F, G> where\n+    F: FnOnce() -> Path,\n+    G: FnMut(&Path) -> Result<Path, IoError>,\n+{\n     pub used_crates: Vec<(ast::CrateNum, Option<Path>)>,\n     pub out_filename: Path,\n     pub is_like_osx: bool,\n     pub has_rpath: bool,\n-    pub get_install_prefix_lib_path: ||:'a -> Path,\n-    pub realpath: |&Path|:'a -> Result<Path, IoError>\n+    pub get_install_prefix_lib_path: F,\n+    pub realpath: G,\n }\n \n-pub fn get_rpath_flags(config: RPathConfig) -> Vec<String> {\n-\n+pub fn get_rpath_flags<F, G>(config: RPathConfig<F, G>) -> Vec<String> where\n+    F: FnOnce() -> Path,\n+    G: FnMut(&Path) -> Result<Path, IoError>,\n+{\n     // No rpath on windows\n     if !config.has_rpath {\n         return Vec::new();\n@@ -52,8 +57,10 @@ fn rpaths_to_flags(rpaths: &[String]) -> Vec<String> {\n     return ret;\n }\n \n-fn get_rpaths(mut config: RPathConfig,\n-              libs: &[Path]) -> Vec<String> {\n+fn get_rpaths<F, G>(mut config: RPathConfig<F, G>, libs: &[Path]) -> Vec<String> where\n+    F: FnOnce() -> Path,\n+    G: FnMut(&Path) -> Result<Path, IoError>,\n+{\n     debug!(\"output: {}\", config.out_filename.display());\n     debug!(\"libs:\");\n     for libpath in libs.iter() {\n@@ -86,13 +93,18 @@ fn get_rpaths(mut config: RPathConfig,\n     return rpaths;\n }\n \n-fn get_rpaths_relative_to_output(config: &mut RPathConfig,\n-                                 libs: &[Path]) -> Vec<String> {\n+fn get_rpaths_relative_to_output<F, G>(config: &mut RPathConfig<F, G>,\n+                                       libs: &[Path]) -> Vec<String> where\n+    F: FnOnce() -> Path,\n+    G: FnMut(&Path) -> Result<Path, IoError>,\n+{\n     libs.iter().map(|a| get_rpath_relative_to_output(config, a)).collect()\n }\n \n-fn get_rpath_relative_to_output(config: &mut RPathConfig,\n-                                lib: &Path) -> String {\n+fn get_rpath_relative_to_output<F, G>(config: &mut RPathConfig<F, G>, lib: &Path) -> String where\n+    F: FnOnce() -> Path,\n+    G: FnMut(&Path) -> Result<Path, IoError>,\n+{\n     use std::os;\n \n     // Mac doesn't appear to support $ORIGIN\n@@ -114,7 +126,10 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig,\n             relative.as_str().expect(\"non-utf8 component in path\"))\n }\n \n-fn get_install_prefix_rpath(config: RPathConfig) -> String {\n+fn get_install_prefix_rpath<F, G>(config: RPathConfig<F, G>) -> String where\n+    F: FnOnce() -> Path,\n+    G: FnMut(&Path) -> Result<Path, IoError>,\n+{\n     let path = (config.get_install_prefix_lib_path)();\n     let path = os::make_absolute(&path).unwrap();\n     // FIXME (#9639): This needs to handle non-utf8 paths"}, {"sha": "1587104ca49d16443664352c8fc3c5677d76e4ab", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451eef5c4021d8882fa42ef369094e1897ae3af7/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=451eef5c4021d8882fa42ef369094e1897ae3af7", "patch": "@@ -82,7 +82,8 @@ fn add_bytes_to_bits<T: Int + ToBits>(bits: T, bytes: T) -> T {\n trait FixedBuffer {\n     /// Input a vector of bytes. If the buffer becomes full, process it with the provided\n     /// function and then clear the buffer.\n-    fn input(&mut self, input: &[u8], func: |&[u8]|);\n+    fn input<F>(&mut self, input: &[u8], func: F) where\n+        F: FnMut(&[u8]);\n \n     /// Reset the buffer.\n     fn reset(&mut self);\n@@ -125,7 +126,9 @@ impl FixedBuffer64 {\n }\n \n impl FixedBuffer for FixedBuffer64 {\n-    fn input(&mut self, input: &[u8], func: |&[u8]|) {\n+    fn input<F>(&mut self, input: &[u8], mut func: F) where\n+        F: FnMut(&[u8]),\n+    {\n         let mut i = 0;\n \n         let size = self.size();\n@@ -201,11 +204,11 @@ trait StandardPadding {\n     /// guaranteed to have exactly rem remaining bytes when it returns. If there are not at least\n     /// rem bytes available, the buffer will be zero padded, processed, cleared, and then filled\n     /// with zeros again until only rem bytes are remaining.\n-    fn standard_padding(&mut self, rem: uint, func: |&[u8]|);\n+    fn standard_padding<F>(&mut self, rem: uint, func: F) where F: FnMut(&[u8]);\n }\n \n impl <T: FixedBuffer> StandardPadding for T {\n-    fn standard_padding(&mut self, rem: uint, func: |&[u8]|) {\n+    fn standard_padding<F>(&mut self, rem: uint, mut func: F) where F: FnMut(&[u8]) {\n         let size = self.size();\n \n         self.next(1)[0] = 128;"}]}