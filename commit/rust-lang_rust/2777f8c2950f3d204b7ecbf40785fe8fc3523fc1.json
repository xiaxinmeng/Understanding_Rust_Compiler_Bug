{"sha": "2777f8c2950f3d204b7ecbf40785fe8fc3523fc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzdmOGMyOTUwZjNkMjA0YjdlY2JmNDA3ODVmZThmYzM1MjNmYzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-17T17:02:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-17T17:02:28Z"}, "message": "Merge #5423\n\n5423: Correctly resolve assoc. types in path bindings r=matklad a=jonas-schievink\n\nPreviously invoking goto def on `impl Iterator<Item<|> = ()>` would go to `Iterator`, not `Item`. This fixes that.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "86399ce1b6a1a7c190e2817cf942f021ee0af581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86399ce1b6a1a7c190e2817cf942f021ee0af581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEdmkCRBK7hj4Ov3rIwAAdHIIAJjvs17sPfn16936MMDX1cty\nbIZtOEm5G2VK9hFZJumE8+yrcqsXxIfiT5ED9Qxa7G3l47TZjIT3/T2X/oVAQLkv\nwjh7FvEpKPu4PgqX4HNKZFEKdSqPmVActu0ZT5WnBXbXrN0vUQP+OHGUK/dT6cRY\nxO8yz3cZQUG6Z7otWGbYyajLa4z//8G9I0K6S9fp4MzyMN42RMCDpFxjW9EL3g0q\nA9AfaHs6JVTM6++GcWzcDQG8qctC7NgQDqV/xlxv6SE+muxp1DddO2+phjpqRiWd\n8rg3HbXdJjiAsl4vL8baXPuPkE/a+xXty7LgRyWhVCQwCkru53NuE21QfJmllmk=\n=8B2s\n-----END PGP SIGNATURE-----\n", "payload": "tree 86399ce1b6a1a7c190e2817cf942f021ee0af581\nparent de8c5fc09bdc94dde72ac24c19c8b80a438f0101\nparent cab360fe3105264f483c4f2b1a33f3d9010e3436\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595005348 +0000\ncommitter GitHub <noreply@github.com> 1595005348 +0000\n\nMerge #5423\n\n5423: Correctly resolve assoc. types in path bindings r=matklad a=jonas-schievink\n\nPreviously invoking goto def on `impl Iterator<Item<|> = ()>` would go to `Iterator`, not `Item`. This fixes that.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1", "html_url": "https://github.com/rust-lang/rust/commit/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8c5fc09bdc94dde72ac24c19c8b80a438f0101", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8c5fc09bdc94dde72ac24c19c8b80a438f0101", "html_url": "https://github.com/rust-lang/rust/commit/de8c5fc09bdc94dde72ac24c19c8b80a438f0101"}, {"sha": "cab360fe3105264f483c4f2b1a33f3d9010e3436", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab360fe3105264f483c4f2b1a33f3d9010e3436", "html_url": "https://github.com/rust-lang/rust/commit/cab360fe3105264f483c4f2b1a33f3d9010e3436"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "4e3f428fae78d8f0384b2879543f24c49e8ea4e2", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=2777f8c2950f3d204b7ecbf40785fe8fc3523fc1", "patch": "@@ -881,6 +881,86 @@ pub mod module {\n     macro_rules! _mac { () => { () } }\n     pub use crate::_mac as mac;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_assoc_ty_in_path() {\n+        check(\n+            r#\"\n+trait Iterator {\n+    type Item;\n+       //^^^^\n+}\n+\n+fn f() -> impl Iterator<Item<|> = u8> {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_assoc_ty_in_path_multiple() {\n+        check(\n+            r#\"\n+trait Iterator {\n+    type A;\n+       //^\n+    type B;\n+}\n+\n+fn f() -> impl Iterator<A<|> = u8, B = ()> {}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+trait Iterator {\n+    type A;\n+    type B;\n+       //^\n+}\n+\n+fn f() -> impl Iterator<A = u8, B<|> = ()> {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_assoc_ty_ufcs() {\n+        check(\n+            r#\"\n+trait Iterator {\n+    type Item;\n+       //^^^^\n+}\n+\n+fn g() -> <() as Iterator<Item<|> = ()>>::Item {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_assoc_ty_ufcs_multiple() {\n+        check(\n+            r#\"\n+trait Iterator {\n+    type A;\n+       //^\n+    type B;\n+}\n+\n+fn g() -> <() as Iterator<A<|> = (), B = u8>>::B {}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+trait Iterator {\n+    type A;\n+    type B;\n+       //^\n+}\n+\n+fn g() -> <() as Iterator<A = (), B<|> = u8>>::A {}\n \"#,\n         );\n     }"}, {"sha": "e06b189a00a24892dd6bf3275872f597351deafc", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2777f8c2950f3d204b7ecbf40785fe8fc3523fc1/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=2777f8c2950f3d204b7ecbf40785fe8fc3523fc1", "patch": "@@ -254,6 +254,28 @@ pub fn classify_name_ref(\n         }\n     }\n \n+    if ast::AssocTypeArg::cast(parent.clone()).is_some() {\n+        // `Trait<Assoc = Ty>`\n+        //        ^^^^^\n+        let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n+        let resolved = sema.resolve_path(&path)?;\n+        if let PathResolution::Def(ModuleDef::Trait(tr)) = resolved {\n+            if let Some(ty) = tr\n+                .items(sema.db)\n+                .iter()\n+                .filter_map(|assoc| match assoc {\n+                    hir::AssocItem::TypeAlias(it) => Some(*it),\n+                    _ => None,\n+                })\n+                .find(|alias| alias.name(sema.db).to_string() == **name_ref.text())\n+            {\n+                return Some(NameRefClass::Definition(Definition::ModuleDef(\n+                    ModuleDef::TypeAlias(ty),\n+                )));\n+            }\n+        }\n+    }\n+\n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n         if let Some(path) = macro_call.path() {\n             if path.qualifier().is_none() {"}]}