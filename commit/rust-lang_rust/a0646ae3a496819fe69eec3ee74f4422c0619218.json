{"sha": "a0646ae3a496819fe69eec3ee74f4422c0619218", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNjQ2YWUzYTQ5NjgxOWZlNjllZWMzZWU3NGY0NDIyYzA2MTkyMTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-11T01:20:07Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:48Z"}, "message": "libsyntax: De-`@str` `to_source`", "tree": {"sha": "cabb5d727ae8ed585d4d6c80361f8488d9956083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cabb5d727ae8ed585d4d6c80361f8488d9956083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0646ae3a496819fe69eec3ee74f4422c0619218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0646ae3a496819fe69eec3ee74f4422c0619218", "html_url": "https://github.com/rust-lang/rust/commit/a0646ae3a496819fe69eec3ee74f4422c0619218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0646ae3a496819fe69eec3ee74f4422c0619218/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e52b85d5a6f6e3aaa2f15d7c1e907d0ce8589ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e52b85d5a6f6e3aaa2f15d7c1e907d0ce8589ee", "html_url": "https://github.com/rust-lang/rust/commit/8e52b85d5a6f6e3aaa2f15d7c1e907d0ce8589ee"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "71879fc2f1e6fe139aecea96306223274fab4d0c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a0646ae3a496819fe69eec3ee74f4422c0619218/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0646ae3a496819fe69eec3ee74f4422c0619218/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=a0646ae3a496819fe69eec3ee74f4422c0619218", "patch": "@@ -66,133 +66,134 @@ pub mod rt {\n \n     pub trait ToSource {\n         // Takes a thing and generates a string containing rust code for it.\n-        fn to_source(&self) -> @str;\n+        fn to_source(&self) -> ~str;\n     }\n \n     impl ToSource for ast::Ident {\n-        fn to_source(&self) -> @str {\n-            ident_to_str(self)\n+        fn to_source(&self) -> ~str {\n+            let this = get_ident(self.name);\n+            this.get().to_owned()\n         }\n     }\n \n     impl ToSource for @ast::Item {\n-        fn to_source(&self) -> @str {\n-            pprust::item_to_str(*self, get_ident_interner()).to_managed()\n+        fn to_source(&self) -> ~str {\n+            pprust::item_to_str(*self, get_ident_interner())\n         }\n     }\n \n     impl<'a> ToSource for &'a [@ast::Item] {\n-        fn to_source(&self) -> @str {\n-            self.map(|i| i.to_source()).connect(\"\\n\\n\").to_managed()\n+        fn to_source(&self) -> ~str {\n+            self.map(|i| i.to_source()).connect(\"\\n\\n\")\n         }\n     }\n \n     impl ToSource for ast::Ty {\n-        fn to_source(&self) -> @str {\n-            pprust::ty_to_str(self, get_ident_interner()).to_managed()\n+        fn to_source(&self) -> ~str {\n+            pprust::ty_to_str(self, get_ident_interner())\n         }\n     }\n \n     impl<'a> ToSource for &'a [ast::Ty] {\n-        fn to_source(&self) -> @str {\n-            self.map(|i| i.to_source()).connect(\", \").to_managed()\n+        fn to_source(&self) -> ~str {\n+            self.map(|i| i.to_source()).connect(\", \")\n         }\n     }\n \n     impl ToSource for Generics {\n-        fn to_source(&self) -> @str {\n-            pprust::generics_to_str(self, get_ident_interner()).to_managed()\n+        fn to_source(&self) -> ~str {\n+            pprust::generics_to_str(self, get_ident_interner())\n         }\n     }\n \n     impl ToSource for @ast::Expr {\n-        fn to_source(&self) -> @str {\n-            pprust::expr_to_str(*self, get_ident_interner()).to_managed()\n+        fn to_source(&self) -> ~str {\n+            pprust::expr_to_str(*self, get_ident_interner())\n         }\n     }\n \n     impl ToSource for ast::Block {\n-        fn to_source(&self) -> @str {\n-            pprust::block_to_str(self, get_ident_interner()).to_managed()\n+        fn to_source(&self) -> ~str {\n+            pprust::block_to_str(self, get_ident_interner())\n         }\n     }\n \n     impl<'a> ToSource for &'a str {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitStr(\n                     token::intern_and_get_ident(*self), ast::CookedStr));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for int {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitInt(*self as i64, ast::TyI));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for i8 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitInt(*self as i64, ast::TyI8));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for i16 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitInt(*self as i64, ast::TyI16));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n \n     impl ToSource for i32 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitInt(*self as i64, ast::TyI32));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for i64 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitInt(*self as i64, ast::TyI64));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for uint {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitUint(*self as u64, ast::TyU));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for u8 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitUint(*self as u64, ast::TyU8));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for u16 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitUint(*self as u64, ast::TyU16));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for u32 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitUint(*self as u64, ast::TyU32));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n     impl ToSource for u64 {\n-        fn to_source(&self) -> @str {\n+        fn to_source(&self) -> ~str {\n             let lit = dummy_spanned(ast::LitUint(*self as u64, ast::TyU64));\n-            pprust::lit_to_str(&lit).to_managed()\n+            pprust::lit_to_str(&lit)\n         }\n     }\n \n@@ -202,7 +203,7 @@ pub mod rt {\n         ($t:ty) => (\n             impl ToTokens for $t {\n                 fn to_tokens(&self, cx: &ExtCtxt) -> ~[TokenTree] {\n-                    cx.parse_tts(self.to_source())\n+                    cx.parse_tts(self.to_source().to_managed())\n                 }\n             }\n         )\n@@ -212,7 +213,7 @@ pub mod rt {\n         ($t:ty) => (\n             impl<'a> ToTokens for $t {\n                 fn to_tokens(&self, cx: &ExtCtxt) -> ~[TokenTree] {\n-                    cx.parse_tts(self.to_source())\n+                    cx.parse_tts(self.to_source().to_managed())\n                 }\n             }\n         )"}]}