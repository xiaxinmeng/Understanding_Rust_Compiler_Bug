{"sha": "02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZDMxYjdkMWFhMTQ3YzFiNTRjODkxYzk0YmI5NzdjYzY3OWIyYzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T22:28:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` the additional library search paths", "tree": {"sha": "456d4ba385ae8e15dd562904980371ce00b88e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456d4ba385ae8e15dd562904980371ce00b88e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "html_url": "https://github.com/rust-lang/rust/commit/02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe2ad0ff86639a100c164d020a474e232c97318", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe2ad0ff86639a100c164d020a474e232c97318", "html_url": "https://github.com/rust-lang/rust/commit/abe2ad0ff86639a100c164d020a474e232c97318"}], "stats": {"total": 81, "additions": 53, "deletions": 28}, "files": [{"sha": "07457b1db27ccdb7f35128f9a7e8d0d778a6da68", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -187,7 +187,11 @@ impl Archive {\n \n         let mut rustpath = filesearch::rust_path();\n         rustpath.push(self.sess.filesearch.get_target_lib_path());\n-        let path = self.sess.opts.addl_lib_search_paths.iter();\n+        let addl_lib_search_paths = self.sess\n+                                        .opts\n+                                        .addl_lib_search_paths\n+                                        .borrow();\n+        let path = addl_lib_search_paths.get().iter();\n         for path in path.chain(rustpath.iter()) {\n             debug!(\"looking for {} inside {}\", name, path.display());\n             let test = path.join(oslibname.as_slice());"}, {"sha": "f85d1f1d8259318c19c51e8ee1650cae6cc995f2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -1109,7 +1109,8 @@ fn link_args(sess: Session,\n // in the current crate. Upstream crates with native library dependencies\n // may have their native library pulled in above.\n fn add_local_native_libraries(args: &mut ~[~str], sess: Session) {\n-    for path in sess.opts.addl_lib_search_paths.iter() {\n+    let addl_lib_search_paths = sess.opts.addl_lib_search_paths.borrow();\n+    for path in addl_lib_search_paths.get().iter() {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         args.push(\"-L\" + path.as_str().unwrap().to_owned());\n     }"}, {"sha": "761a96550a8bc37ab63138a7dc653982c3093c76", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -822,7 +822,7 @@ pub fn build_session_options(binary: @str,\n         lint_opts: lint_opts,\n         save_temps: save_temps,\n         output_type: output_type,\n-        addl_lib_search_paths: @mut addl_lib_search_paths,\n+        addl_lib_search_paths: @RefCell::new(addl_lib_search_paths),\n         ar: ar,\n         linker: linker,\n         linker_args: linker_args,"}, {"sha": "20ad6ce6a663bd2ce1389495488402ba3edceae5", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -148,9 +148,9 @@ pub struct options {\n     lint_opts: ~[(lint::lint, lint::level)],\n     save_temps: bool,\n     output_type: back::link::output_type,\n-    addl_lib_search_paths: @mut HashSet<Path>, // This is mutable for rustpkg, which\n-                                               // updates search paths based on the\n-                                               // parsed code\n+    // This is mutable for rustpkg, which updates search paths based on the\n+    // parsed code.\n+    addl_lib_search_paths: @RefCell<HashSet<Path>>,\n     ar: Option<~str>,\n     linker: Option<~str>,\n     linker_args: ~[~str],\n@@ -385,7 +385,7 @@ pub fn basic_options() -> @options {\n         lint_opts: ~[],\n         save_temps: false,\n         output_type: link::output_type_exe,\n-        addl_lib_search_paths: @mut HashSet::new(),\n+        addl_lib_search_paths: @RefCell::new(HashSet::new()),\n         ar: None,\n         linker: None,\n         linker_args: ~[],"}, {"sha": "692cc12ec6f5df13627eec46d28cd69ca1b4a9ca", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use std::cell::RefCell;\n use std::option;\n use std::os;\n use std::io;\n@@ -42,11 +42,11 @@ pub trait FileSearch {\n \n pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n                      target_triple: &str,\n-                     addl_lib_search_paths: @mut HashSet<Path>)\n+                     addl_lib_search_paths: @RefCell<HashSet<Path>>)\n                   -> @FileSearch {\n     struct FileSearchImpl {\n         sysroot: @Path,\n-        addl_lib_search_paths: @mut HashSet<Path>,\n+        addl_lib_search_paths: @RefCell<HashSet<Path>>,\n         target_triple: ~str\n     }\n     impl FileSearch for FileSearchImpl {\n@@ -56,9 +56,10 @@ pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n             let mut visited_dirs = HashSet::new();\n             let mut found = false;\n \n+            let addl_lib_search_paths = self.addl_lib_search_paths.borrow();\n             debug!(\"filesearch: searching additional lib search paths [{:?}]\",\n-                   self.addl_lib_search_paths.len());\n-            for path in self.addl_lib_search_paths.iter() {\n+                   addl_lib_search_paths.get().len());\n+            for path in addl_lib_search_paths.get().iter() {\n                 match f(path) {\n                     FileMatches => found = true,\n                     FileDoesntMatch => ()"}, {"sha": "18891d38d38ecfbf205710dbfc4b2667b6e8a219", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -17,6 +17,7 @@ use syntax::diagnostic;\n use syntax::parse;\n use syntax;\n \n+use std::cell::RefCell;\n use std::os;\n use std::local_data;\n use std::hashmap::{HashSet};\n@@ -50,7 +51,7 @@ fn get_ast_and_resolve(cpath: &Path,\n     let sessopts = @driver::session::options {\n         binary: @\"rustdoc\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n-        addl_lib_search_paths: @mut libs,\n+        addl_lib_search_paths: @RefCell::new(libs),\n         outputs: ~[driver::session::OutputDylib],\n         .. (*rustc::driver::session::basic_options()).clone()\n     };"}, {"sha": "7450abf34158befea7393a605c7629435a30b690", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::cell::RefCell;\n use std::hashmap::HashSet;\n use std::local_data;\n use std::os;\n@@ -34,7 +35,7 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n     let parsesess = parse::new_parse_sess(None);\n     let input = driver::file_input(Path::new(input));\n     let libs = matches.opt_strs(\"L\").map(|s| Path::new(s.as_slice()));\n-    let libs = @mut libs.move_iter().collect();\n+    let libs = @RefCell::new(libs.move_iter().collect());\n \n     let sessopts = @session::options {\n         binary: @\"rustdoc\",\n@@ -99,7 +100,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n     let sessopts = @session::options {\n         binary: @\"rustdoctest\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n-        addl_lib_search_paths: @mut libs,\n+        addl_lib_search_paths: @RefCell::new(libs),\n         outputs: ~[session::OutputExecutable],\n         debugging_opts: session::prefer_dynamic,\n         .. (*session::basic_options()).clone()\n@@ -159,7 +160,7 @@ fn maketest(s: &str, cratename: &str) -> @str {\n pub struct Collector {\n     priv tests: ~[test::TestDescAndFn],\n     priv names: ~[~str],\n-    priv libs: @mut HashSet<Path>,\n+    priv libs: @RefCell<HashSet<Path>>,\n     priv cnt: uint,\n     priv cratename: ~str,\n }\n@@ -169,7 +170,8 @@ impl Collector {\n         let test = test.to_owned();\n         let name = format!(\"{}_{}\", self.names.connect(\"::\"), self.cnt);\n         self.cnt += 1;\n-        let libs = (*self.libs).clone();\n+        let libs = self.libs.borrow();\n+        let libs = (*libs.get()).clone();\n         let cratename = self.cratename.to_owned();\n         self.tests.push(test::TestDescAndFn {\n             desc: test::TestDesc {"}, {"sha": "eb7dbe4e4a8a73fb6c5f595c538dba78734d6c44", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d31b7d1aa147c1b54c891c94bb977cc679b2c8/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=02d31b7d1aa147c1b54c891c94bb977cc679b2c8", "patch": "@@ -10,6 +10,7 @@\n \n #[allow(dead_code)];\n \n+use std::cell::RefCell;\n use std::libc;\n use std::os;\n use std::io;\n@@ -244,7 +245,8 @@ pub fn compile_input(context: &BuildContext,\n         optimize: opt,\n         test: what == Test || what == Bench,\n         maybe_sysroot: Some(sysroot_to_use),\n-        addl_lib_search_paths: @mut context.additional_library_paths(),\n+        addl_lib_search_paths:\n+            @RefCell::new(context.additional_library_paths()),\n         output_type: output_type,\n         .. (*driver::build_session_options(binary,\n                                            &matches,\n@@ -254,15 +256,20 @@ pub fn compile_input(context: &BuildContext,\n \n     debug!(\"Created options...\");\n \n-    let addl_lib_search_paths = @mut options.addl_lib_search_paths;\n+    let addl_lib_search_paths = @RefCell::new(options.addl_lib_search_paths);\n     // Make sure all the library directories actually exist, since the linker will complain\n     // otherwise\n-    for p in addl_lib_search_paths.iter() {\n-        if p.exists() {\n-            assert!(p.is_dir())\n-        }\n-        else {\n-            fs::mkdir_recursive(p, io::UserRWX);\n+    {\n+        let mut addl_lib_search_paths = addl_lib_search_paths.borrow_mut();\n+        let addl_lib_search_paths = addl_lib_search_paths.get();\n+        let mut addl_lib_search_paths = addl_lib_search_paths.borrow_mut();\n+        for p in addl_lib_search_paths.get().iter() {\n+            if p.exists() {\n+                assert!(p.is_dir())\n+            }\n+            else {\n+                fs::mkdir_recursive(p, io::UserRWX);\n+            }\n         }\n     }\n \n@@ -285,9 +292,15 @@ pub fn compile_input(context: &BuildContext,\n     find_and_install_dependencies(context, pkg_id, in_file, sess, exec, &crate, deps,\n                                   |p| {\n                                       debug!(\"a dependency: {}\", p.display());\n+                                      let mut addl_lib_search_paths =\n+                                        addl_lib_search_paths.borrow_mut();\n+                                      let addl_lib_search_paths =\n+                                        addl_lib_search_paths.get();\n+                                      let mut addl_lib_search_paths =\n+                                        addl_lib_search_paths.borrow_mut();\n                                       // Pass the directory containing a dependency\n                                       // as an additional lib search path\n-                                      addl_lib_search_paths.insert(p);\n+                                      addl_lib_search_paths.get().insert(p);\n                                   });\n \n     // Inject the pkgid attribute so we get the right package name and version\n@@ -376,8 +389,11 @@ pub fn compile_crate_from_input(input: &Path,\n            outputs.obj_filename.display(),\n            sess.opts.output_type);\n     debug!(\"additional libraries:\");\n-    for lib in sess.opts.addl_lib_search_paths.iter() {\n-        debug!(\"an additional library: {}\", lib.display());\n+    {\n+        let addl_lib_search_paths = sess.opts.addl_lib_search_paths.borrow();\n+        for lib in addl_lib_search_paths.get().iter() {\n+            debug!(\"an additional library: {}\", lib.display());\n+        }\n     }\n     let analysis = driver::phase_3_run_analysis_passes(sess, &crate);\n     if driver::stop_after_phase_3(sess) { return None; }"}]}