{"sha": "fd8e284a206a35e4247a04f909a0960d89331ab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGUyODRhMjA2YTM1ZTQyNDdhMDRmOTA5YTA5NjBkODkzMzFhYjA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-10T23:30:34Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:32Z"}, "message": "Rename param_counts to own_counts", "tree": {"sha": "48e3c4f2b8ccb2969b1712ecc6b43512721914e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e3c4f2b8ccb2969b1712ecc6b43512721914e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8e284a206a35e4247a04f909a0960d89331ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8e284a206a35e4247a04f909a0960d89331ab0", "html_url": "https://github.com/rust-lang/rust/commit/fd8e284a206a35e4247a04f909a0960d89331ab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8e284a206a35e4247a04f909a0960d89331ab0/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365c8c3704fd65fa2dcb112c19eabec44696fea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/365c8c3704fd65fa2dcb112c19eabec44696fea1", "html_url": "https://github.com/rust-lang/rust/commit/365c8c3704fd65fa2dcb112c19eabec44696fea1"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "be9c5d2d334ae442d6bb78f8913316ef63f924bb", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -1461,7 +1461,7 @@ impl<'a> LoweringContext<'a> {\n                         assert!(!def_id.is_local());\n                         let item_generics =\n                             self.cstore.item_generics_cloned_untracked(def_id, self.sess);\n-                        let n = item_generics.param_counts().lifetimes;\n+                        let n = item_generics.own_counts().lifetimes;\n                         self.type_def_lifetime_params.insert(def_id, n);\n                         n\n                     });"}, {"sha": "6c67c10dc69cf490dd3120bb064e5cc90ea5def4", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         // We can't monomorphize things like `fn foo<A>(...)`.\n-        if self.generics_of(method.def_id).param_counts().types != 0 {\n+        if self.generics_of(method.def_id).own_counts().types != 0 {\n             return Some(MethodViolationCode::Generic);\n         }\n "}, {"sha": "fc085cbd4f84455151ce75063cfbc926257d190a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -794,23 +794,23 @@ impl<'a, 'gcx, 'tcx> Generics {\n         self.parent_count + self.params.len()\n     }\n \n-    pub fn param_counts(&self) -> GenericParamCount {\n+    pub fn own_counts(&self) -> GenericParamCount {\n         // We could cache this as a property of `GenericParamCount`, but\n         // the aim is to refactor this away entirely eventually and the\n         // presence of this method will be a constant reminder.\n-        let mut param_counts = GenericParamCount {\n+        let mut own_counts = GenericParamCount {\n             lifetimes: 0,\n             types: 0,\n         };\n \n         for param in self.params.iter() {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => param_counts.lifetimes += 1,\n-                GenericParamDefKind::Type(_) => param_counts.types += 1,\n+                GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n+                GenericParamDefKind::Type(_) => own_counts.types += 1,\n             };\n         }\n \n-        param_counts\n+        own_counts\n     }\n \n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {"}, {"sha": "7044404e655b9a887678d02600d794f0f2de3709", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -257,7 +257,7 @@ impl PrintContext {\n         let verbose = self.is_verbose;\n         let mut num_supplied_defaults = 0;\n         let mut has_self = false;\n-        let mut param_counts = GenericParamCount {\n+        let mut own_counts = GenericParamCount {\n             lifetimes: 0,\n             types: 0,\n         };\n@@ -306,17 +306,17 @@ impl PrintContext {\n                 }\n             }\n             let mut generics = tcx.generics_of(item_def_id);\n-            let child_param_counts = generics.param_counts();\n+            let child_own_counts = generics.own_counts();\n             let mut path_def_id = did;\n             has_self = generics.has_self;\n \n             let mut child_types = 0;\n             if let Some(def_id) = generics.parent {\n                 // Methods.\n                 assert!(is_value_path);\n-                child_types = child_param_counts.types;\n+                child_types = child_own_counts.types;\n                 generics = tcx.generics_of(def_id);\n-                param_counts = generics.param_counts();\n+                own_counts = generics.own_counts();\n \n                 if has_self {\n                     print!(f, self, write(\"<\"), print_display(substs.type_at(0)), write(\" as \"))?;\n@@ -331,7 +331,7 @@ impl PrintContext {\n                     assert_eq!(has_self, false);\n                 } else {\n                     // Types and traits.\n-                    param_counts = child_param_counts;\n+                    own_counts = child_own_counts;\n                 }\n             }\n \n@@ -415,10 +415,10 @@ impl PrintContext {\n             Ok(())\n         };\n \n-        print_regions(f, \"<\", 0, param_counts.lifetimes)?;\n+        print_regions(f, \"<\", 0, own_counts.lifetimes)?;\n \n         let tps = substs.types()\n-                        .take(param_counts.types - num_supplied_defaults)\n+                        .take(own_counts.types - num_supplied_defaults)\n                         .skip(has_self as usize);\n \n         for ty in tps {\n@@ -450,10 +450,10 @@ impl PrintContext {\n                 write!(f, \"::{}\", item_name)?;\n             }\n \n-            print_regions(f, \"::<\", param_counts.lifetimes, usize::MAX)?;\n+            print_regions(f, \"::<\", own_counts.lifetimes, usize::MAX)?;\n \n             // FIXME: consider being smart with defaults here too\n-            for ty in substs.types().skip(param_counts.types) {\n+            for ty in substs.types().skip(own_counts.types) {\n                 start_or_continue(f, \"::<\", \", \")?;\n                 ty.print_display(f, self)?;\n             }"}, {"sha": "f8f6bec33a2ab26865e24e81062e38632edf0068", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -1108,7 +1108,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    if tcx.generics_of(method.def_id).param_counts().types != 0 {\n+                    if tcx.generics_of(method.def_id).own_counts().types != 0 {\n                         continue;\n                     }\n "}, {"sha": "fc3764e4f49a5bbb8391ab4604b655c93340f9a5", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -357,7 +357,7 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n \n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n-    let message = if tcx.generics_of(def_id).param_counts().types != 0 {\n+    let message = if tcx.generics_of(def_id).own_counts().types != 0 {\n         format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n                  type parameters (error E0133)\")\n     } else {"}, {"sha": "50d76d817905711b64ead6c592ff876a73578ba4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -208,9 +208,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // region with the current anon region binding (in other words,\n         // whatever & would get replaced with).\n         let decl_generics = tcx.generics_of(def_id);\n-        let param_counts = decl_generics.param_counts();\n+        let own_counts = decl_generics.own_counts();\n         let num_types_provided = parameters.types.len();\n-        let expected_num_region_params = param_counts.lifetimes;\n+        let expected_num_region_params = own_counts.lifetimes;\n         let supplied_num_region_params = parameters.lifetimes.len();\n         if expected_num_region_params != supplied_num_region_params {\n             report_lifetime_number_error(tcx, span,\n@@ -223,7 +223,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         // Check the number of type parameters supplied by the user.\n         let own_self = self_ty.is_some() as usize;\n-        let ty_param_defs = param_counts.types - own_self;\n+        let ty_param_defs = own_counts.types - own_self;\n         if !infer_types || num_types_provided > ty_param_defs {\n             let type_params_without_defaults = {\n                 let mut count = 0;\n@@ -279,7 +279,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 _ => unreachable!()\n             };\n \n-            let i = i - (param_counts.lifetimes + own_self);\n+            let i = i - (own_counts.lifetimes + own_self);\n             if i < num_types_provided {\n                 // A provided type parameter.\n                 self.ast_ty_to_ty(&parameters.types[i])"}, {"sha": "ba950f90d0a02db5fa5bef9c87761ed0a139c673", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -357,8 +357,8 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 trait_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n     let span = tcx.sess.codemap().def_span(span);\n-    let trait_params = trait_generics.param_counts().lifetimes;\n-    let impl_params = impl_generics.param_counts().lifetimes;\n+    let trait_params = trait_generics.own_counts().lifetimes;\n+    let impl_params = impl_generics.own_counts().lifetimes;\n \n     debug!(\"check_region_bounds_on_impl_method: \\\n             trait_generics={:?} \\\n@@ -574,8 +574,8 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         -> Result<(), ErrorReported> {\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    let num_impl_m_type_params = impl_m_generics.param_counts().types;\n-    let num_trait_m_type_params = trait_m_generics.param_counts().types;\n+    let num_impl_m_type_params = impl_m_generics.own_counts().types;\n+    let num_trait_m_type_params = trait_m_generics.own_counts().types;\n     if num_impl_m_type_params != num_trait_m_type_params {\n         let impl_m_node_id = tcx.hir.as_local_node_id(impl_m.def_id).unwrap();\n         let impl_m_item = tcx.hir.expect_impl_item(impl_m_node_id);"}, {"sha": "97e4a35ea4762a449220ad77c9fbd8521d53031b", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -45,7 +45,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let i_n_tps = tcx.generics_of(def_id).param_counts().types;\n+    let i_n_tps = tcx.generics_of(def_id).own_counts().types;\n     if i_n_tps != n_tps {\n         let span = match it.node {\n             hir::ForeignItemFn(_, _, ref generics) => generics.span,\n@@ -346,7 +346,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let def_id = tcx.hir.local_def_id(it.id);\n-    let i_n_tps = tcx.generics_of(def_id).param_counts().types;\n+    let i_n_tps = tcx.generics_of(def_id).own_counts().types;\n     let name = it.name.as_str();\n \n     let (n_tps, inputs, output) = match &*name {"}, {"sha": "9928ef549ff70a686b92d311fcb3db5b6c618741", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // parameters from the type and those from the method.\n         assert_eq!(method_generics.parent_count, parent_substs.len());\n         let provided = &segment.parameters;\n-        let param_counts = method_generics.param_counts();\n+        let own_counts = method_generics.own_counts();\n         Substs::for_item(self.tcx, pick.item.def_id, |def, _| {\n             let i = def.index as usize;\n             if i < parent_substs.len() {\n@@ -334,7 +334,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             } else if let Some(ast_ty)\n                 = provided.as_ref().and_then(|p| {\n                     let idx =\n-                        i - parent_substs.len() - param_counts.lifetimes;\n+                        i - parent_substs.len() - own_counts.lifetimes;\n                     p.types.get(idx)\n                 })\n             {"}, {"sha": "2ff760726d253ac990d3873d4e38f1baa69f23e1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8e284a206a35e4247a04f909a0960d89331ab0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fd8e284a206a35e4247a04f909a0960d89331ab0", "patch": "@@ -1239,7 +1239,7 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n         } else {\n             for item in &m.items {\n                 let generics = tcx.generics_of(tcx.hir.local_def_id(item.id));\n-                if generics.params.len() - generics.param_counts().lifetimes != 0 {\n+                if generics.params.len() - generics.own_counts().lifetimes != 0 {\n                     let mut err = struct_span_err!(tcx.sess, item.span, E0044,\n                         \"foreign items may not have type parameters\");\n                     err.span_label(item.span, \"can't have type parameters\");\n@@ -4799,7 +4799,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             // Skip over the lifetimes in the same segment.\n             if let Some((_, generics)) = segment {\n-                i -= generics.param_counts().lifetimes;\n+                i -= generics.own_counts().lifetimes;\n             }\n \n             let has_default = match def.kind {\n@@ -4925,10 +4925,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Check provided parameters.\n         let (ty_req_len, accepted, lt_req_len) =\n             segment.map_or((0, 0, 0), |(_, generics)| {\n-                let param_counts = generics.param_counts();\n+                let own_counts = generics.own_counts();\n \n                 let own_self = (generics.parent.is_none() && generics.has_self) as usize;\n-                let type_params = param_counts.types - own_self;\n+                let type_params = own_counts.types - own_self;\n                 let type_params_without_defaults = {\n                     let mut count = 0;\n                     for param in generics.params.iter() {\n@@ -4943,7 +4943,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let type_params_barring_defaults =\n                     type_params_without_defaults - own_self;\n \n-                (type_params_barring_defaults, type_params, param_counts.lifetimes)\n+                (type_params_barring_defaults, type_params, own_counts.lifetimes)\n             });\n \n         if types.len() > accepted {"}]}