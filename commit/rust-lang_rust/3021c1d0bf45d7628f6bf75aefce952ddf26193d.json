{"sha": "3021c1d0bf45d7628f6bf75aefce952ddf26193d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjFjMWQwYmY0NWQ3NjI4ZjZiZjc1YWVmY2U5NTJkZGYyNjE5M2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-13T23:03:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T16:41:44Z"}, "message": "rustc: Attach an mpsc channel to TyCtxt\n\nThis commit attaches a channel to the LLVM workers to the `TyCtxt` which will\nlater be used during the codegen query to actually send work to LLVM workers.\nOtherwise this commit is just plumbing this channel throughout the compiler to\nensure it reaches the right consumers.", "tree": {"sha": "3a23d166545487c59bfb63fcd89c148aa67e13ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a23d166545487c59bfb63fcd89c148aa67e13ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3021c1d0bf45d7628f6bf75aefce952ddf26193d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3021c1d0bf45d7628f6bf75aefce952ddf26193d", "html_url": "https://github.com/rust-lang/rust/commit/3021c1d0bf45d7628f6bf75aefce952ddf26193d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3021c1d0bf45d7628f6bf75aefce952ddf26193d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "html_url": "https://github.com/rust-lang/rust/commit/2eada5870615fafa1f40c4ce93f5f5adaf030cdf"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "e932c9728db3e0734bb58b25e69d96dabe034aaa", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3021c1d0bf45d7628f6bf75aefce952ddf26193d", "patch": "@@ -64,6 +64,7 @@ use std::mem;\n use std::ops::Deref;\n use std::iter;\n use std::rc::Rc;\n+use std::sync::mpsc;\n use syntax::abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n@@ -901,6 +902,14 @@ pub struct GlobalCtxt<'tcx> {\n     /// error reporting, and so is lazily initialized and generally\n     /// shouldn't taint the common path (hence the RefCell).\n     pub all_traits: RefCell<Option<Vec<DefId>>>,\n+\n+    /// A general purpose channel to throw data out the back towards LLVM worker\n+    /// threads.\n+    ///\n+    /// This is intended to only get used during the trans phase of the compiler\n+    /// when satisfying the query for a particular codegen unit. Internally in\n+    /// the query it'll send data along this channel to get processed later.\n+    pub tx_to_llvm_workers: mpsc::Sender<Box<Any + Send>>,\n }\n \n impl<'tcx> GlobalCtxt<'tcx> {\n@@ -1025,6 +1034,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   named_region_map: resolve_lifetime::NamedRegionMap,\n                                   hir: hir_map::Map<'tcx>,\n                                   crate_name: &str,\n+                                  tx: mpsc::Sender<Box<Any + Send>>,\n                                   f: F) -> R\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'tcx>) -> R\n     {\n@@ -1145,6 +1155,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             derive_macros: RefCell::new(NodeMap()),\n             stability_interner: RefCell::new(FxHashSet()),\n             all_traits: RefCell::new(None),\n+            tx_to_llvm_workers: tx,\n        }, f)\n     }\n "}, {"sha": "0adcfa79039d663784282f66f093a94e1d20608f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3021c1d0bf45d7628f6bf75aefce952ddf26193d", "patch": "@@ -46,13 +46,15 @@ use super::Compilation;\n \n use serialize::json;\n \n+use std::any::Any;\n use std::env;\n use std::ffi::{OsString, OsStr};\n use std::fs;\n use std::io::{self, Write};\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n+use std::sync::mpsc;\n use syntax::{ast, diagnostics, visit};\n use syntax::attr;\n use syntax::ext::base::ExtCtxt;\n@@ -214,7 +216,7 @@ pub fn compile_input(sess: &Session,\n                                     &arena,\n                                     &arenas,\n                                     &crate_name,\n-                                    |tcx, analysis, incremental_hashes_map, result| {\n+                                    |tcx, analysis, incremental_hashes_map, rx, result| {\n             {\n                 // Eventually, we will want to track plugins.\n                 let _ignore = tcx.dep_graph.in_ignore();\n@@ -242,7 +244,9 @@ pub fn compile_input(sess: &Session,\n                 tcx.print_debug_stats();\n             }\n \n-            let trans = phase_4_translate_to_llvm(tcx, incremental_hashes_map,\n+            let trans = phase_4_translate_to_llvm(tcx,\n+                                                  incremental_hashes_map,\n+                                                  rx,\n                                                   &outputs);\n \n             if log_enabled!(::log::LogLevel::Info) {\n@@ -914,6 +918,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     where F: for<'a> FnOnce(TyCtxt<'a, 'tcx, 'tcx>,\n                             ty::CrateAnalysis,\n                             IncrementalHashesMap,\n+                            mpsc::Receiver<Box<Any + Send>>,\n                             CompileResult) -> R\n {\n     macro_rules! try_with_f {\n@@ -1028,6 +1033,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::CriticalCallEdges);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::dump_mir::Marker(\"PreTrans\"));\n \n+    let (tx, rx) = mpsc::channel();\n+\n     TyCtxt::create_and_enter(sess,\n                              cstore,\n                              local_providers,\n@@ -1039,6 +1046,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                              named_region_map,\n                              hir_map,\n                              name,\n+                             tx,\n                              |tcx| {\n         let incremental_hashes_map =\n             time(time_passes,\n@@ -1109,14 +1117,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n         time(time_passes, \"lint checking\", || lint::check_crate(tcx));\n \n-        return Ok(f(tcx, analysis, incremental_hashes_map, tcx.sess.compile_status()));\n+        return Ok(f(tcx, analysis, incremental_hashes_map, rx, tcx.sess.compile_status()));\n     })\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            incremental_hashes_map: IncrementalHashesMap,\n+                                           rx: mpsc::Receiver<Box<Any + Send>>,\n                                            output_filenames: &OutputFilenames)\n                                            -> write::OngoingCrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n@@ -1126,9 +1135,9 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n          || ::rustc::middle::dependency_format::calculate(tcx));\n \n     let translation =\n-        time(time_passes,\n-             \"translation\",\n-             move || trans::trans_crate(tcx, incremental_hashes_map, output_filenames));\n+        time(time_passes, \"translation\", move || {\n+            trans::trans_crate(tcx, incremental_hashes_map, rx, output_filenames)\n+        });\n \n     if tcx.sess.profile_queries() {\n         profile::dump(\"profile_queries\".to_string())"}, {"sha": "2535583cc6fbbff1d5bfede2783a51001e6ca64f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=3021c1d0bf45d7628f6bf75aefce952ddf26193d", "patch": "@@ -39,6 +39,7 @@ use context::{is_pie_binary, get_reloc_model};\n use jobserver::{Client, Acquired};\n use rustc_demangle;\n \n+use std::any::Any;\n use std::ffi::CString;\n use std::fmt;\n use std::fs;\n@@ -348,7 +349,7 @@ pub struct CodegenContext {\n     // compiling incrementally\n     pub incr_comp_session_dir: Option<PathBuf>,\n     // Channel back to the main control thread to send messages to\n-    coordinator_send: Sender<Message>,\n+    coordinator_send: Sender<Box<Any + Send>>,\n     // A reference to the TimeGraph so we can register timings. None means that\n     // measuring is disabled.\n     time_graph: Option<TimeGraph>,\n@@ -674,7 +675,8 @@ pub fn start_async_translation(tcx: TyCtxt,\n                                crate_output: &OutputFilenames,\n                                time_graph: Option<TimeGraph>,\n                                link: LinkMeta,\n-                               metadata: EncodedMetadata)\n+                               metadata: EncodedMetadata,\n+                               coordinator_receive: Receiver<Box<Any + Send>>)\n                                -> OngoingCrateTranslation {\n     let sess = tcx.sess;\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n@@ -798,13 +800,12 @@ pub fn start_async_translation(tcx: TyCtxt,\n \n     let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n     let (trans_worker_send, trans_worker_receive) = channel();\n-    let (coordinator_send, coordinator_receive) = channel();\n \n     let coordinator_thread = start_executing_work(sess,\n                                                   &crate_info,\n                                                   shared_emitter,\n                                                   trans_worker_send,\n-                                                  coordinator_send.clone(),\n+                                                  tcx.tx_to_llvm_workers.clone(),\n                                                   coordinator_receive,\n                                                   client,\n                                                   time_graph.clone(),\n@@ -824,7 +825,7 @@ pub fn start_async_translation(tcx: TyCtxt,\n \n         time_graph,\n         output_filenames: crate_output.clone(),\n-        coordinator_send,\n+        coordinator_send: tcx.tx_to_llvm_workers.clone(),\n         trans_worker_receive,\n         shared_emitter_main,\n         future: coordinator_thread\n@@ -1138,8 +1139,8 @@ fn start_executing_work(sess: &Session,\n                         crate_info: &CrateInfo,\n                         shared_emitter: SharedEmitter,\n                         trans_worker_send: Sender<Message>,\n-                        coordinator_send: Sender<Message>,\n-                        coordinator_receive: Receiver<Message>,\n+                        coordinator_send: Sender<Box<Any + Send>>,\n+                        coordinator_receive: Receiver<Box<Any + Send>>,\n                         jobserver: Client,\n                         time_graph: Option<TimeGraph>,\n                         exported_symbols: Arc<ExportedSymbols>)\n@@ -1156,7 +1157,7 @@ fn start_executing_work(sess: &Session,\n     // tokens on `rx` above which will get managed in the main loop below.\n     let coordinator_send2 = coordinator_send.clone();\n     let helper = jobserver.into_helper_thread(move |token| {\n-        drop(coordinator_send2.send(Message::Token(token)));\n+        drop(coordinator_send2.send(Box::new(Message::Token(token))));\n     }).expect(\"failed to spawn helper thread\");\n \n     let mut each_linked_rlib_for_lto = Vec::new();\n@@ -1430,7 +1431,8 @@ fn start_executing_work(sess: &Session,\n             // Relinquish accidentally acquired extra tokens\n             tokens.truncate(running);\n \n-            match coordinator_receive.recv().unwrap() {\n+            let msg = coordinator_receive.recv().unwrap();\n+            match *msg.downcast::<Message>().ok().unwrap() {\n                 // Save the token locally and the next turn of the loop will use\n                 // this to spawn a new unit of work, or it may get dropped\n                 // immediately if we have no more work to spawn.\n@@ -1588,7 +1590,7 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n         // Set up a destructor which will fire off a message that we're done as\n         // we exit.\n         struct Bomb {\n-            coordinator_send: Sender<Message>,\n+            coordinator_send: Sender<Box<Any + Send>>,\n             result: Option<CompiledModule>,\n             worker_id: usize,\n         }\n@@ -1599,10 +1601,10 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n                     None => Err(())\n                 };\n \n-                drop(self.coordinator_send.send(Message::Done {\n+                drop(self.coordinator_send.send(Box::new(Message::Done {\n                     result,\n                     worker_id: self.worker_id,\n-                }));\n+                })));\n             }\n         }\n \n@@ -1845,7 +1847,7 @@ pub struct OngoingCrateTranslation {\n     allocator_module_config: ModuleConfig,\n \n     time_graph: Option<TimeGraph>,\n-    coordinator_send: Sender<Message>,\n+    coordinator_send: Sender<Box<Any + Send>>,\n     trans_worker_receive: Receiver<Message>,\n     shared_emitter_main: SharedEmitterMain,\n     future: thread::JoinHandle<CompiledModules>,\n@@ -1931,11 +1933,11 @@ impl OngoingCrateTranslation {\n                                              module_config,\n                                              self.output_filenames.clone());\n \n-        drop(self.coordinator_send.send(Message::TranslationDone {\n+        drop(self.coordinator_send.send(Box::new(Message::TranslationDone {\n             llvm_work_item,\n             cost,\n             is_last\n-        }));\n+        })));\n     }\n \n     pub fn submit_pre_translated_module_to_llvm(&self,"}, {"sha": "1b802f74201328d1399b85207879f44162809941", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021c1d0bf45d7628f6bf75aefce952ddf26193d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3021c1d0bf45d7628f6bf75aefce952ddf26193d", "patch": "@@ -79,11 +79,13 @@ use rustc::util::nodemap::{NodeSet, FxHashMap, FxHashSet, DefIdSet};\n use CrateInfo;\n \n use libc::c_uint;\n+use std::any::Any;\n use std::ffi::{CStr, CString};\n use std::str;\n use std::sync::Arc;\n use std::time::{Instant, Duration};\n use std::i32;\n+use std::sync::mpsc;\n use syntax_pos::Span;\n use syntax::attr;\n use rustc::hir;\n@@ -933,6 +935,7 @@ pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n \n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              incremental_hashes_map: IncrementalHashesMap,\n+                             rx: mpsc::Receiver<Box<Any + Send>>,\n                              output_filenames: &OutputFilenames)\n                              -> OngoingCrateTranslation {\n     check_for_rustc_errors_attr(tcx);\n@@ -974,7 +977,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             output_filenames,\n             time_graph.clone(),\n             link_meta,\n-            metadata);\n+            metadata,\n+            rx);\n \n         ongoing_translation.submit_pre_translated_module_to_llvm(tcx.sess, metadata_module, true);\n \n@@ -1001,7 +1005,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         output_filenames,\n         time_graph.clone(),\n         link_meta,\n-        metadata);\n+        metadata,\n+        rx);\n \n     // Translate an allocator shim, if any\n     //"}]}