{"sha": "b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTMyNmFiMDMzZTQxOTg2ZDRhNWM4Yjk2Y2U0ZjQwZjNiMzhlMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-21T17:32:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-21T17:32:57Z"}, "message": "Auto merge of #76680 - Julian-Wollersberger:nongeneric_ensure_sufficient_stack, r=jyn514\n\nMake `ensure_sufficient_stack()` non-generic, using cargo-llvm-lines\n\nInspired by [this blog post](https://blog.mozilla.org/nnethercote/2020/08/05/how-to-speed-up-the-rust-compiler-some-more-in-2020/) from `@nnethercote,` I used [cargo-llvm-lines](https://github.com/dtolnay/cargo-llvm-lines/) on the rust compiler itself, to improve it's compile time. This PR contains only one low-hanging fruit, but I also want to share some measurements.\n\nThe function `ensure_sufficient_stack()` was monomorphized 1500 times, and with it the `stacker` and `psm` crates, for a total of 1.5% of all llvm IR lines. With some trickery I convert the generic closure into a dynamic one, and thus all that code is only monomorphized once.\n\n# Measurements\nGetting these numbers took some fiddling with CLI flags and I [modified](https://github.com/Julian-Wollersberger/cargo-llvm-lines/blob/master/src/main.rs#L115) cargo-llvm-lines to read from a folder instead of invoking cargo. Commands I used:\n```\n./x.py clean\nRUSTFLAGS=\"--emit=llvm-ir -C link-args=-fuse-ld=lld -Z self-profile=profile\" CARGOFLAGS_BOOTSTRAP=\"-Ztimings\" RUSTC_BOOTSTRAP=1 ./x.py build -i --stage 1 library/std\n\n# Then manually copy all .ll files into a folder I hardcoded in cargo-llvm-lines in main.rs#L115\ncd ../cargo-llvm-lines\ncargo run llvm-lines\n```\n\nThe result is this list (see [first 500 lines](https://github.com/Julian-Wollersberger/cargo-llvm-lines/blob/master/llvm-lines-rustc-before.txt) ), before the change:\n```\n  Lines            Copies        Function name\n  -----            ------        -------------\n  16894211 (100%)  58417 (100%)  (TOTAL)\n   2223855 (13.2%)   502 (0.9%)  rustc_query_system::query::plumbing::get_query_impl::{{closure}}\n   1331918 (7.9%)   1287 (2.2%)  hashbrown::raw::RawTable<T>::reserve_rehash\n    774434 (4.6%)  12043 (20.6%) core::ptr::drop_in_place\n    294170 (1.7%)    499 (0.9%)  rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl\n    245410 (1.5%)   1552 (2.7%)  psm::on_stack::with_on_stack\n    210311 (1.2%)      1 (0.0%)  rustc_target::spec::load_specific\n    200962 (1.2%)    513 (0.9%)  rustc_query_system::query::plumbing::get_query_impl\n    190704 (1.1%)      1 (0.0%)  rustc_middle::ty::query::<impl rustc_middle::ty::context::TyCtxt>::alloc_self_profile_query_strings\n    180272 (1.1%)    468 (0.8%)  rustc_query_system::query::plumbing::load_from_disk_and_cache_in_memory\n    177396 (1.1%)    114 (0.2%)  rustc_query_system::query::plumbing::force_query_impl\n    161134 (1.0%)    445 (0.8%)  rustc_query_system::dep_graph::graph::DepGraph<K>::with_anon_task\n    141551 (0.8%)    186 (0.3%)  rustc_query_system::query::plumbing::incremental_verify_ich\n    110191 (0.7%)      7 (0.0%)  rustc_middle::ty::context::_DERIVE_rustc_serialize_Decodable_D_FOR_TypeckResults::<impl rustc_serialize::serialize::Decodable<__D> for rustc_middle::ty::context::TypeckResults>::decode::{{closure}}\n    108590 (0.6%)    420 (0.7%)  core::ops::function::FnOnce::call_once\n     88488 (0.5%)     21 (0.0%)  rustc_query_system::dep_graph::graph::DepGraph<K>::try_mark_previous_green\n     86368 (0.5%)      1 (0.0%)  rustc_middle::ty::query::stats::query_stats\n     85654 (0.5%)   3973 (6.8%)  <&T as core::fmt::Debug>::fmt\n     84475 (0.5%)      1 (0.0%)  rustc_middle::ty::query::Queries::try_collect_active_jobs\n     81220 (0.5%)    862 (1.5%)  <hashbrown::raw::RawIterHash<T> as core::iter::traits::iterator::Iterator>::next\n     77636 (0.5%)     54 (0.1%)  core::slice::sort::recurse\n     66484 (0.4%)    461 (0.8%)  <hashbrown::raw::RawIter<T> as core::iter::traits::iterator::Iterator>::next\n```\n\nAll `.ll` files together had 4.4GB. After my change they had 4.2GB. So a few percent less code LLVM has to process. Hurray!\nSadly, I couldn't measure an actual wall-time improvement. Watching YouTube while compiling added to much noise...\n\nHere is the top of the list after the change:\n```\n  16460866 (100%)  58341 (100%)  (TOTAL)\n   1903085 (11.6%)   504 (0.9%)  rustc_query_system::query::plumbing::get_query_impl::{{closure}}\n   1331918 (8.1%)   1287 (2.2%)  hashbrown::raw::RawTable<T>::reserve_rehash\n    777796 (4.7%)  12031 (20.6%) core::ptr::drop_in_place\n    551462 (3.4%)   1519 (2.6%)  rustc_data_structures::stack::ensure_sufficient_stack::{{closure}}\n```\nNote that the total was reduced by 430 000 lines and `psm::on_stack::with_on_stack` has disappeared. Instead `rustc_data_structures::stack::ensure_sufficient_stack::{{closure}}` appeared. I'm confused about that one, but it seems to consist of inlined calls to `rustc_query_system::*` stuff.\n\nFurther note the other two big culprits in this list: `rustc_query_system` and `hashbrown`. These two are monomorphized many times, the query system summing to more than 20% of all lines, not even counting code that's probably inlined elsewhere.\nAssuming compile times scale linearly with llvm-lines, that means a possible 20% compile time reduction.\n\nReducing eg. `get_query_impl` would probably need a major refactoring of the qery system though. _Everything_ in there is generic over multiple types, has associated types and passes generic Self arguments by value. Which means you can't simply make things `dyn`.\n\n---------------------------------------\nThis PR is a small step to make rustc compile faster and thus make contributing to rustc less painful. Nonetheless I love Rust and I find the work around rustc fascinating :)", "tree": {"sha": "1eb032949b4fb132114b41594d22d715d457f240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eb032949b4fb132114b41594d22d715d457f240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "html_url": "https://github.com/rust-lang/rust/commit/b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01326ab033e41986d4a5c8b96ce4f40f3b38e30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff9b0b29a8898c839d46f3c66526710afed68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff9b0b29a8898c839d46f3c66526710afed68a", "html_url": "https://github.com/rust-lang/rust/commit/4eff9b0b29a8898c839d46f3c66526710afed68a"}, {"sha": "53aaa1e532657390edfbe046a3f18d95e9543424", "url": "https://api.github.com/repos/rust-lang/rust/commits/53aaa1e532657390edfbe046a3f18d95e9543424", "html_url": "https://github.com/rust-lang/rust/commit/53aaa1e532657390edfbe046a3f18d95e9543424"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "9dc6ef4608a4b9415929fb81abfb64f510aa64f6", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b01326ab033e41986d4a5c8b96ce4f40f3b38e30/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b01326ab033e41986d4a5c8b96ce4f40f3b38e30/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "patch": "@@ -4468,9 +4468,9 @@ checksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n \n [[package]]\n name = \"stacker\"\n-version = \"0.1.11\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a92bc346006ae78c539d6ab2cf1a1532bc657b8339c464877a990ec82073c66f\"\n+checksum = \"21ccb4c06ec57bc82d0f610f1a2963d7648700e43a6f513e564b9c89f7991786\"\n dependencies = [\n  \"cc\",\n  \"cfg-if\","}, {"sha": "bf75fc96f1fab9cd11f59f61ce9d7383635f0b70", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b01326ab033e41986d4a5c8b96ce4f40f3b38e30/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b01326ab033e41986d4a5c8b96ce4f40f3b38e30/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "patch": "@@ -26,7 +26,7 @@ rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\"\n measureme = \"0.7.1\"\n libc = \"0.2\"\n-stacker = \"0.1.11\"\n+stacker = \"0.1.12\"\n tempfile = \"3.0.5\"\n \n [dependencies.parking_lot]"}]}