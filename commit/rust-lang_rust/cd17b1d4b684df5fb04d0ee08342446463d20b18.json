{"sha": "cd17b1d4b684df5fb04d0ee08342446463d20b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTdiMWQ0YjY4NGRmNWZiMDRkMGVlMDgzNDI0NDY0NjNkMjBiMTg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:05:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:05:12Z"}, "message": "Rollup merge of #56211 - petrochenkov:fwd, r=petrochenkov\n\n[master] Forward-ports from beta\n\nhttps://github.com/rust-lang/rust/pull/56206 + one commit from https://github.com/rust-lang/rust/pull/55884 that was accidentally missing in https://github.com/rust-lang/rust/pull/56042 due to an off-by-one mistake in commit ranges\n\nr? @ghost", "tree": {"sha": "dc2e1499910466e79efee5f35d7e60fd578d4d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc2e1499910466e79efee5f35d7e60fd578d4d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd17b1d4b684df5fb04d0ee08342446463d20b18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sg5CRBK7hj4Ov3rIwAAdHIIAF5cU2DiUOE9xH+m0rQoECua\nVHLsYMPgHSEf5OQZaO+R8dYA/KwC7S2JEn3XtnYHEYEMKnRbbkCu3aB750Gk9W/R\nWPXX27sgtLnzGfJYPgWzi6KJnHzgRkSpP/HeTw2DbxiZL1khrmGgVGWxcX3gD0I4\n1pdnh6tjkc6bRTV6Jn557CiaAh62IaNhQKZbvIn3LB9qyw35OqIr2pMe404MZ6IG\nhNAiC/KnXtOYRA2Hl7FwueZS9SRtO9DVlk8JD9qAm0N8MQC01NlwyoVXJs1J1yEz\nYHsLMwIF2K+XkShfvuW4rk8iwCD/EXgjCapUn6d2fH/Dir5Xj5KjHb3mo/XhhjM=\n=Q7Ou\n-----END PGP SIGNATURE-----\n", "payload": "tree dc2e1499910466e79efee5f35d7e60fd578d4d1b\nparent baf45d6d9001baeb7dfded52a6695266a8d631d0\nparent fe548e311a8f3a2e193989dc959841874738423f\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161912 +0100\ncommitter GitHub <noreply@github.com> 1543161912 +0100\n\nRollup merge of #56211 - petrochenkov:fwd, r=petrochenkov\n\n[master] Forward-ports from beta\n\nhttps://github.com/rust-lang/rust/pull/56206 + one commit from https://github.com/rust-lang/rust/pull/55884 that was accidentally missing in https://github.com/rust-lang/rust/pull/56042 due to an off-by-one mistake in commit ranges\n\nr? @ghost\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd17b1d4b684df5fb04d0ee08342446463d20b18", "html_url": "https://github.com/rust-lang/rust/commit/cd17b1d4b684df5fb04d0ee08342446463d20b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd17b1d4b684df5fb04d0ee08342446463d20b18/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf45d6d9001baeb7dfded52a6695266a8d631d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf45d6d9001baeb7dfded52a6695266a8d631d0", "html_url": "https://github.com/rust-lang/rust/commit/baf45d6d9001baeb7dfded52a6695266a8d631d0"}, {"sha": "fe548e311a8f3a2e193989dc959841874738423f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe548e311a8f3a2e193989dc959841874738423f", "html_url": "https://github.com/rust-lang/rust/commit/fe548e311a8f3a2e193989dc959841874738423f"}], "stats": {"total": 164, "additions": 129, "deletions": 35}, "files": [{"sha": "443b1ccdef836f6828030678cc4b6e5ab4a4da21", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -4710,7 +4710,18 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 ty::Visibility::Restricted(self.current_module.normal_ancestor_id)\n             }\n             ast::VisibilityKind::Restricted { ref path, id, .. } => {\n-                // Visibilities are resolved as global by default, add starting root segment.\n+                // For visibilities we are not ready to provide correct implementation of \"uniform\n+                // paths\" right now, so on 2018 edition we only allow module-relative paths for now.\n+                let first_ident = path.segments[0].ident;\n+                if self.session.rust_2018() && !first_ident.is_path_segment_keyword() {\n+                    let msg = \"relative paths are not supported in visibilities on 2018 edition\";\n+                    self.session.struct_span_err(first_ident.span, msg)\n+                                .span_suggestion(path.span, \"try\", format!(\"crate::{}\", path))\n+                                .emit();\n+                    return ty::Visibility::Public;\n+                }\n+                // On 2015 visibilities are resolved as crate-relative by default,\n+                // add starting root segment if necessary.\n                 let segments = path.make_root().iter().chain(path.segments.iter())\n                     .map(|seg| Segment { ident: seg.ident, id: Some(seg.id) })\n                     .collect::<Vec<_>>();\n@@ -4988,10 +4999,10 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 err.span_suggestion_with_applicability(\n                     binding.span,\n                     &rename_msg,\n-                    match (&directive.subclass, snippet.as_ref()) {\n-                        (ImportDirectiveSubclass::SingleImport { .. }, \"self\") =>\n+                    match directive.subclass {\n+                        ImportDirectiveSubclass::SingleImport { type_ns_only: true, .. } =>\n                             format!(\"self as {}\", suggested_name),\n-                        (ImportDirectiveSubclass::SingleImport { source, .. }, _) =>\n+                        ImportDirectiveSubclass::SingleImport { source, .. } =>\n                             format!(\n                                 \"{} as {}{}\",\n                                 &snippet[..((source.span.hi().0 - binding.span.lo().0) as usize)],\n@@ -5002,13 +5013,13 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                     \"\"\n                                 }\n                             ),\n-                        (ImportDirectiveSubclass::ExternCrate { source, target, .. }, _) =>\n+                        ImportDirectiveSubclass::ExternCrate { source, target, .. } =>\n                             format!(\n                                 \"extern crate {} as {};\",\n                                 source.unwrap_or(target.name),\n                                 suggested_name,\n                             ),\n-                        (_, _) => unreachable!(),\n+                        _ => unreachable!(),\n                     },\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "52e3e54b9f93181090918414b7bb8c3052263cd6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -864,7 +864,8 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             }\n             PathResult::NonModule(path_res) if path_res.base_def() == Def::Err => {\n                 // The error was already reported earlier.\n-                assert!(directive.imported_module.get().is_none());\n+                assert!(!self.ambiguity_errors.is_empty() ||\n+                        directive.imported_module.get().is_none());\n                 return None;\n             }\n             PathResult::Indeterminate | PathResult::NonModule(..) => unreachable!(),"}, {"sha": "8e0797582970d9c0aa427c33a87c798517b6e02d", "filename": "src/test/ui/imports/auxiliary/issue-56125.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fissue-56125.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fissue-56125.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fissue-56125.rs?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -1,3 +1,5 @@\n+pub mod issue_56125 {}\n+\n pub mod last_segment {\n     pub mod issue_56125 {}\n }"}, {"sha": "843b52f18435e5ec95ec1676bdf55444ce8ec584", "filename": "src/test/ui/imports/issue-56125.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -2,11 +2,24 @@\n // compile-flags:--extern issue_56125\n // aux-build:issue-56125.rs\n \n-use issue_56125::last_segment::*;\n-//~^ ERROR `issue_56125` is ambiguous\n-//~| ERROR unresolved import `issue_56125::last_segment`\n-use issue_56125::non_last_segment::non_last_segment::*;\n-//~^ ERROR `issue_56125` is ambiguous\n-//~| ERROR failed to resolve: could not find `non_last_segment` in `issue_56125`\n+#![feature(uniform_paths)]\n+\n+mod m1 {\n+    use issue_56125::last_segment::*;\n+    //~^ ERROR `issue_56125` is ambiguous\n+    //~| ERROR unresolved import `issue_56125::last_segment`\n+}\n+\n+mod m2 {\n+    use issue_56125::non_last_segment::non_last_segment::*;\n+    //~^ ERROR `issue_56125` is ambiguous\n+    //~| ERROR failed to resolve: could not find `non_last_segment` in `issue_56125`\n+}\n+\n+mod m3 {\n+    mod empty {}\n+    use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n+    use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n+}\n \n fn main() {}"}, {"sha": "b1292ef8f783e35c4b2048e53ad3f80a938a5cbc", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -1,46 +1,67 @@\n error[E0433]: failed to resolve: could not find `non_last_segment` in `issue_56125`\n-  --> $DIR/issue-56125.rs:8:18\n+  --> $DIR/issue-56125.rs:14:22\n    |\n-LL | use issue_56125::non_last_segment::non_last_segment::*;\n-   |                  ^^^^^^^^^^^^^^^^ could not find `non_last_segment` in `issue_56125`\n+LL |     use issue_56125::non_last_segment::non_last_segment::*;\n+   |                      ^^^^^^^^^^^^^^^^ could not find `non_last_segment` in `issue_56125`\n \n error[E0432]: unresolved import `issue_56125::last_segment`\n-  --> $DIR/issue-56125.rs:5:18\n+  --> $DIR/issue-56125.rs:8:22\n    |\n-LL | use issue_56125::last_segment::*;\n-   |                  ^^^^^^^^^^^^ could not find `last_segment` in `issue_56125`\n+LL |     use issue_56125::last_segment::*;\n+   |                      ^^^^^^^^^^^^ could not find `last_segment` in `issue_56125`\n+\n+error[E0432]: unresolved import `empty::issue_56125`\n+  --> $DIR/issue-56125.rs:21:9\n+   |\n+LL |     use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n+   |         ^^^^^^^^^^^^^^^^^^ no `issue_56125` in `m3::empty`\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:5:5\n+  --> $DIR/issue-56125.rs:8:9\n    |\n-LL | use issue_56125::last_segment::*;\n-   |     ^^^^^^^^^^^ ambiguous name\n+LL |     use issue_56125::last_segment::*;\n+   |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:5:5\n+  --> $DIR/issue-56125.rs:8:9\n    |\n-LL | use issue_56125::last_segment::*;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     use issue_56125::last_segment::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:8:5\n+  --> $DIR/issue-56125.rs:14:9\n    |\n-LL | use issue_56125::non_last_segment::non_last_segment::*;\n-   |     ^^^^^^^^^^^ ambiguous name\n+LL |     use issue_56125::non_last_segment::non_last_segment::*;\n+   |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:5:5\n+  --> $DIR/issue-56125.rs:14:9\n    |\n-LL | use issue_56125::last_segment::*;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     use issue_56125::non_last_segment::non_last_segment::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n-error: aborting due to 4 previous errors\n+error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n+  --> $DIR/issue-56125.rs:22:9\n+   |\n+LL |     use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n+   |         ^^^^^^^^^^^ ambiguous name\n+   |\n+   = note: `issue_56125` could refer to an extern crate passed with `--extern`\n+   = help: use `::issue_56125` to refer to this extern crate unambiguously\n+note: `issue_56125` could also refer to the unresolved item imported here\n+  --> $DIR/issue-56125.rs:21:9\n+   |\n+LL |     use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n+   |         ^^^^^^^^^^^^^^^^^^\n+   = help: use `self::issue_56125` to refer to this unresolved item unambiguously\n+\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0432, E0433, E0659.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "eb5fb458d827919f0016e29d788834d911935eb7", "filename": "src/test/ui/issues/issue-45829/import-self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -19,4 +19,7 @@ use foo as self;\n \n use foo::self;\n \n+use foo::A;\n+use foo::{self as A};\n+\n fn main() {}"}, {"sha": "55e51952a8804712297657372a70d84efd41546d", "filename": "src/test/ui/issues/issue-45829/import-self.stderr", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -25,7 +25,21 @@ help: you can use `as` to change the binding name of the import\n LL | use foo::{self as other_foo};\n    |           ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0252]: the name `A` is defined multiple times\n+  --> $DIR/import-self.rs:23:11\n+   |\n+LL | use foo::A;\n+   |     ------ previous import of the type `A` here\n+LL | use foo::{self as A};\n+   |           ^^^^^^^^^ `A` reimported here\n+   |\n+   = note: `A` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | use foo::{self as OtherA};\n+   |           ^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0255, E0429.\n-For more information about an error, try `rustc --explain E0255`.\n+Some errors occurred: E0252, E0255, E0429.\n+For more information about an error, try `rustc --explain E0252`."}, {"sha": "69b7c1e4d4f3cd4c0ddbbc680be8899bfa1cf4c3", "filename": "src/test/ui/privacy/restricted/relative-2018.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.rs?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+\n+mod m {\n+    pub(in crate) struct S1; // OK\n+    pub(in super) struct S2; // OK\n+    pub(in self) struct S3; // OK\n+    pub(in ::core) struct S4;\n+    //~^ ERROR visibilities can only be restricted to ancestor modules\n+    pub(in a::b) struct S5;\n+    //~^ ERROR relative paths are not supported in visibilities on 2018 edition\n+}\n+\n+fn main() {}"}, {"sha": "61effc463e98fc76d415a3812b15220fbefb90d1", "filename": "src/test/ui/privacy/restricted/relative-2018.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd17b1d4b684df5fb04d0ee08342446463d20b18/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.stderr?ref=cd17b1d4b684df5fb04d0ee08342446463d20b18", "patch": "@@ -0,0 +1,16 @@\n+error: visibilities can only be restricted to ancestor modules\n+  --> $DIR/relative-2018.rs:7:12\n+   |\n+LL |     pub(in ::core) struct S4;\n+   |            ^^^^^^\n+\n+error: relative paths are not supported in visibilities on 2018 edition\n+  --> $DIR/relative-2018.rs:9:12\n+   |\n+LL |     pub(in a::b) struct S5;\n+   |            ^---\n+   |            |\n+   |            help: try: `crate::a::b`\n+\n+error: aborting due to 2 previous errors\n+"}]}