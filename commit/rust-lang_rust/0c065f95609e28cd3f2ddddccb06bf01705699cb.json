{"sha": "0c065f95609e28cd3f2ddddccb06bf01705699cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDY1Zjk1NjA5ZTI4Y2QzZjJkZGRkY2NiMDZiZjAxNzA1Njk5Y2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-29T21:52:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-29T21:52:59Z"}, "message": "Merge pull request #1089 from bjorn3/custom_driver\n\nAdd custom rustc driver that uses cg_clif", "tree": {"sha": "b1c384ce7005780ef57917d5251d886046c2e876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c384ce7005780ef57917d5251d886046c2e876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c065f95609e28cd3f2ddddccb06bf01705699cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfc6y7CRBK7hj4Ov3rIwAAdHIIAIOEbe/5YGQc4Wmhh9gW7cA6\nCLJ14QeAECesPXpFMMXAT2JHe7CrmvNY2tUXsmxPYeicLEQrlIUoMj9lh54PU34Z\nteJFD/SmiQj/UWWYhqk/FPRW/2GvkjM/HEjwIqfU4mrXomWamp/LKgB7ju+VD7Qk\nAE0soPIhR386oHQSVAeMxGtoX+/alcYBFZgz3XlNOJZIK/6wtAJf8G/sUWnuMmPN\nkB+DYdLzGo+Xk1IJd3wnyx9DBf/n4sydF/0hkwdm0zPZIN2fzVnrZIOmzhT1YJIH\nr1c//CLbvFzcFf2JtczwXO7KuiCzZ0V6bQ9jO5zF9wtK6kviD1DE0kIrMiaYVdQ=\n=YmP6\n-----END PGP SIGNATURE-----\n", "payload": "tree b1c384ce7005780ef57917d5251d886046c2e876\nparent c046ad017f022b7e0308ab3665044860cb6412d5\nparent 9a513be11a2a828cffeb6f5a76f6ad528e2d3626\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1601416379 +0200\ncommitter GitHub <noreply@github.com> 1601416379 +0200\n\nMerge pull request #1089 from bjorn3/custom_driver\n\nAdd custom rustc driver that uses cg_clif"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c065f95609e28cd3f2ddddccb06bf01705699cb", "html_url": "https://github.com/rust-lang/rust/commit/0c065f95609e28cd3f2ddddccb06bf01705699cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c065f95609e28cd3f2ddddccb06bf01705699cb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c046ad017f022b7e0308ab3665044860cb6412d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c046ad017f022b7e0308ab3665044860cb6412d5", "html_url": "https://github.com/rust-lang/rust/commit/c046ad017f022b7e0308ab3665044860cb6412d5"}, {"sha": "9a513be11a2a828cffeb6f5a76f6ad528e2d3626", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a513be11a2a828cffeb6f5a76f6ad528e2d3626", "html_url": "https://github.com/rust-lang/rust/commit/9a513be11a2a828cffeb6f5a76f6ad528e2d3626"}], "stats": {"total": 241, "additions": 191, "deletions": 50}, "files": [{"sha": "680ff877656b0fe5279188328d09439173159d84", "filename": "Readme.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -36,7 +36,24 @@ If you compiled cg_clif in debug mode (aka you didn't pass `--release` to `./tes\n > You should prefer using the Cargo method.\n \n ```bash\n-$ rustc +$(cat $cg_clif_dir/rust-toolchain) -Cpanic=abort -Zcodegen-backend=$cg_clif_dir/target/release/librustc_codegen_cranelift.so --sysroot $cg_clif_dir/build_sysroot/sysroot my_crate.rs\n+$ $cg_clif_dir/target/release/cg_clif my_crate.rs\n+```\n+\n+### Jit mode\n+\n+In jit mode cg_clif will immediately execute your code without creating an executable file.\n+\n+> This requires all dependencies to be available as dynamic library.\n+> The jit mode will probably need cargo integration to make this possible.\n+\n+```bash\n+$ $cg_clif_dir/cargo.sh jit\n+```\n+\n+or\n+\n+```bash\n+$ $cg_clif_dir/target/release/cg_clif --jit my_crate.rs\n ```\n \n ### Shell\n@@ -45,7 +62,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | CG_CLIF_JIT=1 rustc -Zcodegen-backend=$cg_clif_dir/target/release/librustc_codegen_cranelift.so --sysroot $cg_clif_dir/build_sysroot/sysroot - -Cprefer-dynamic\n+    echo \"$@\" | $cg_clif_dir/target/release/cg_clif - --jit\n }\n \n function jit() {"}, {"sha": "2f09453e0f7e87b10b5ce04ba6a3aa19774ab075", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -14,8 +14,13 @@ popd >/dev/null\n rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n rm -r sysroot/ 2>/dev/null || true\n \n+# Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n+# build scripts are still compiled using cg_llvm.\n+export RUSTC=rustc\n+export RUSTFLAGS=$RUSTFLAGS\" -Ztrim-diagnostic-paths=no -Zcodegen-backend=$(pwd)/../target/\"$CHANNEL\"/librustc_codegen_cranelift.\"$dylib_ext\" --sysroot $(pwd)/sysroot\"\n+\n # Build libs\n-export RUSTFLAGS=\"$RUSTFLAGS -Z force-unstable-if-unmarked\"\n+export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\"\n if [[ \"$1\" == \"--release\" ]]; then\n     sysroot_channel='release'\n     # FIXME Enable incremental again once rust-lang/rust#74946 is fixed"}, {"sha": "cebc3e67363a885c7ea223acb8236686e42ef5c8", "filename": "cargo.sh", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/cargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/cargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo.sh?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -12,12 +12,11 @@ TOOLCHAIN=$(cat rust-toolchain)\n \n popd >/dev/null\n \n-if [[ $(rustc -V) != $(rustc +${TOOLCHAIN} -V) ]]; then\n-    echo \"rustc_codegen_cranelift is build for $(rustc +${TOOLCHAIN} -V) but the default rustc version is $(rustc -V).\"\n-    echo \"Using $(rustc +${TOOLCHAIN} -V).\"\n-fi\n-\n cmd=$1\n shift\n \n+if [[ \"$cmd\" = \"jit\" ]]; then\n+cargo +${TOOLCHAIN} rustc $@ -- --jit\n+else\n cargo +${TOOLCHAIN} $cmd $@\n+fi"}, {"sha": "07b75622a58ef2dac71189a7e1063bbc7ba5d9b3", "filename": "docs/env_vars.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/docs%2Fenv_vars.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/docs%2Fenv_vars.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fenv_vars.md?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -1,8 +1,6 @@\n # List of env vars recognized by cg_clif\n \n <dl>\n-    <dt>CG_CLIF_JIT</dt>\n-    <dd>Enable JIT mode to immediately run a program instead of writing an executable file.</dd>\n     <dt>CG_CLIF_JIT_ARGS</dt>\n     <dd>When JIT mode is enable pass these arguments to the program.</dd>\n     <dt>CG_CLIF_INCR_CACHE_DISABLED</dt>"}, {"sha": "acd048893e9489f0871587f49fd42914eef2870b", "filename": "scripts/config.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/scripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/scripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fconfig.sh?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -32,15 +32,18 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n    fi\n fi\n \n-export RUSTFLAGS=$linker' -Ztrim-diagnostic-paths=no -Cpanic=abort -Cdebuginfo=2 -Zpanic-abort-tests -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n-export RUSTDOCFLAGS=$RUSTFLAGS\n+export RUSTC=$(pwd)/\"target/\"$CHANNEL\"/cg_clif\"\n+export RUSTFLAGS=$linker\n+export RUSTDOCFLAGS=$linker' -Ztrim-diagnostic-paths=no -Cpanic=abort -Zpanic-abort-tests '\\\n+'-Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n \n # FIXME remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then\n    export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n fi\n \n-export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/$TARGET_TRIPLE/lib\"\n+export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib:\\\n+$(pwd)/target/\"$CHANNEL\":$(rustc --print sysroot)/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n \n export CG_CLIF_DISPLAY_CG_TIME=1"}, {"sha": "c70c3ec47f31fac0fe6a4cd07b6f21edd811a824", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -5,7 +5,7 @@ CHANNEL=\"release\"\n pushd $(dirname \"$0\")/../\n source scripts/config.sh\n popd\n-CG_CLIF_JIT=1 PROFILE=$1 OUTPUT=$2 exec rustc $RUSTFLAGS $0 --crate-type bin -Cprefer-dynamic\n+PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS --jit $0\n #*/\n \n //! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse"}, {"sha": "f29e269c01ffcdc921f1ef5935075bcb6fc3f482", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -10,10 +10,14 @@ use crate::prelude::*;\n pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n     libc::PTHREAD_MUTEX_INITIALIZER;\n \n-pub(crate) fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut FunctionBuilder<'_>) {\n-    if std::env::var(\"CG_CLIF_JIT\").is_ok() {\n+pub(crate) fn init_global_lock(\n+    module: &mut Module<impl Backend>,\n+    bcx: &mut FunctionBuilder<'_>,\n+    use_jit: bool,\n+) {\n+    if use_jit {\n         // When using JIT, dylibs won't find the __cg_clif_global_atomic_mutex data object defined here,\n-        // so instead define it in the cg_clif dylib.\n+        // so instead we define it in the cg_clif dylib.\n \n         return;\n     }\n@@ -80,7 +84,7 @@ pub(crate) fn init_global_lock_constructor(\n         let block = bcx.create_block();\n         bcx.switch_to_block(block);\n \n-        crate::atomic_shim::init_global_lock(module, &mut bcx);\n+        crate::atomic_shim::init_global_lock(module, &mut bcx, false);\n \n         bcx.ins().return_(&[]);\n         bcx.seal_all_blocks();"}, {"sha": "8a39e9b0590ed49a0080dadcfa25d9f517e16068", "filename": "src/bin/cg_clif.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -0,0 +1,94 @@\n+#![feature(rustc_private)]\n+\n+extern crate rustc_data_structures;\n+extern crate rustc_driver;\n+extern crate rustc_interface;\n+extern crate rustc_session;\n+extern crate rustc_target;\n+\n+use rustc_data_structures::profiling::print_time_passes_entry;\n+use rustc_interface::interface;\n+use rustc_session::config::ErrorOutputType;\n+use rustc_session::early_error;\n+use rustc_target::spec::PanicStrategy;\n+\n+#[derive(Default)]\n+pub struct TimePassesCallbacks {\n+    time_passes: bool,\n+}\n+\n+impl rustc_driver::Callbacks for TimePassesCallbacks {\n+    fn config(&mut self, config: &mut interface::Config) {\n+        // If a --prints=... option has been given, we don't print the \"total\"\n+        // time because it will mess up the --prints output. See #64339.\n+        self.time_passes = config.opts.prints.is_empty()\n+            && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n+\n+        // FIXME workaround for an ICE\n+        config.opts.debugging_opts.trim_diagnostic_paths = false;\n+\n+        config.opts.cg.panic = Some(PanicStrategy::Abort);\n+        config.opts.debugging_opts.panic_abort_tests = true;\n+        config.opts.maybe_sysroot = Some(\n+            std::env::current_exe()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .join(\"build_sysroot\")\n+                .join(\"sysroot\"),\n+        );\n+    }\n+}\n+\n+fn main() {\n+    let start = std::time::Instant::now();\n+    rustc_driver::init_rustc_env_logger();\n+    let mut callbacks = TimePassesCallbacks::default();\n+    rustc_driver::install_ice_hook();\n+    let exit_code = rustc_driver::catch_with_exit_code(|| {\n+        let mut use_jit = false;\n+\n+        let mut args = std::env::args_os()\n+            .enumerate()\n+            .map(|(i, arg)| {\n+                arg.into_string().unwrap_or_else(|arg| {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n+                    )\n+                })\n+            })\n+            .filter(|arg| {\n+                if arg == \"--jit\" {\n+                    use_jit = true;\n+                    false\n+                } else {\n+                    true\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+        if use_jit {\n+            args.push(\"-Cprefer-dynamic\".to_string());\n+        }\n+        rustc_driver::run_compiler(\n+            &args,\n+            &mut callbacks,\n+            None,\n+            None,\n+            Some(Box::new(move |_| {\n+                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n+                    config: rustc_codegen_cranelift::BackendConfig {\n+                        use_jit,\n+                    }\n+                })\n+            })),\n+        )\n+    });\n+    // The extra `\\t` is necessary to align this label with the others.\n+    print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());\n+    std::process::exit(exit_code)\n+}"}, {"sha": "fc01398c40d9eb385a94bb66de674432f2d459fd", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -150,7 +150,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     super::codegen_mono_items(&mut cx, mono_items);\n     let (mut module, global_asm, debug, mut unwind_context) =\n         tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context, false);\n \n     let codegen_result = emit_module(\n         tcx,"}, {"sha": "5a899afb97ca4bd7fbe511a330556b15d92c41d6", "filename": "src/driver/jit.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -11,21 +11,23 @@ use crate::prelude::*;\n pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n-    // Rustc opens us without the RTLD_GLOBAL flag, so __cg_clif_global_atomic_mutex will not be\n-    // exported. We fix this by opening ourself again as global.\n-    // FIXME remove once atomic_shim is gone\n-    let cg_dylib = std::ffi::OsString::from(\n-        &tcx.sess\n-            .opts\n-            .debugging_opts\n-            .codegen_backend\n-            .as_ref()\n-            .unwrap(),\n-    );\n-    std::mem::forget(\n-        libloading::os::unix::Library::open(Some(cg_dylib), libc::RTLD_NOW | libc::RTLD_GLOBAL)\n-            .unwrap(),\n-    );\n+    #[cfg(unix)]\n+    unsafe {\n+        // When not using our custom driver rustc will open us without the RTLD_GLOBAL flag, so\n+        // __cg_clif_global_atomic_mutex will not be exported. We fix this by opening ourself again\n+        // as global.\n+        // FIXME remove once atomic_shim is gone\n+\n+        let mut dl_info: libc::Dl_info = std::mem::zeroed();\n+        assert_ne!(\n+            libc::dladdr(run_jit as *const libc::c_void, &mut dl_info),\n+            0\n+        );\n+        assert_ne!(\n+            libc::dlopen(dl_info.dli_fname, libc::RTLD_NOW | libc::RTLD_GLOBAL),\n+            std::ptr::null_mut(),\n+        );\n+    }\n \n     let imported_symbols = load_imported_symbols_for_jit(tcx);\n \n@@ -74,7 +76,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     if !global_asm.is_empty() {\n         tcx.sess.fatal(\"Global asm is not supported in JIT mode\");\n     }\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context, true);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n \n     jit_module.finalize_definitions();\n@@ -85,7 +87,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n \n-    println!(\"Rustc codegen cranelift will JIT run the executable, because the CG_CLIF_JIT env var is set\");\n+    println!(\"Rustc codegen cranelift will JIT run the executable, because --jit was passed\");\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_main) };"}, {"sha": "881221c010541bd520469b7b6f0df7885fdea269", "filename": "src/driver/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -16,15 +16,19 @@ pub(crate) fn codegen_crate(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n+    config: crate::BackendConfig,\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n-    if std::env::var(\"CG_CLIF_JIT\").is_ok()\n-        && tcx\n+    if config.use_jit {\n+        let is_executable = tcx\n             .sess\n             .crate_types()\n-            .contains(&rustc_session::config::CrateType::Executable)\n-    {\n+            .contains(&rustc_session::config::CrateType::Executable);\n+        if !is_executable {\n+            tcx.sess.fatal(\"can't jit non-executable crate\");\n+        }\n+\n         #[cfg(feature = \"jit\")]\n         let _: ! = jit::run_jit(tcx);\n "}, {"sha": "52845b11da0e548e08dafe3a570761b307db7257", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -181,7 +181,14 @@ impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n     }\n }\n \n-struct CraneliftCodegenBackend;\n+#[derive(Copy, Clone, Debug)]\n+pub struct BackendConfig {\n+    pub use_jit: bool,\n+}\n+\n+pub struct CraneliftCodegenBackend {\n+    pub config: BackendConfig,\n+}\n \n impl CodegenBackend for CraneliftCodegenBackend {\n     fn init(&self, sess: &Session) {\n@@ -223,7 +230,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        let res = driver::codegen_crate(tcx, metadata, need_metadata_module);\n+        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, self.config);\n \n         rustc_symbol_mangling::test::report_symbol_names(tcx);\n \n@@ -345,5 +352,9 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n-    Box::new(CraneliftCodegenBackend)\n+    Box::new(CraneliftCodegenBackend {\n+        config: BackendConfig {\n+            use_jit: false,\n+        }\n+    })\n }"}, {"sha": "c4b21dcecd333b74db57f04f777805426797e9bc", "filename": "src/main_shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -9,6 +9,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     tcx: TyCtxt<'_>,\n     module: &mut Module<impl Backend + 'static>,\n     unwind_context: &mut UnwindContext<'_>,\n+    use_jit: bool,\n ) {\n     let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, entry_ty)) => (\n@@ -32,6 +33,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         unwind_context,\n         main_def_id,\n         use_start_lang_item,\n+        use_jit,\n     );\n \n     fn create_entry_fn(\n@@ -40,6 +42,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         unwind_context: &mut UnwindContext<'_>,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n+        use_jit: bool,\n     ) {\n         let main_ret_ty = tcx.fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -83,7 +86,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             let arg_argc = bcx.append_block_param(block, m.target_config().pointer_type());\n             let arg_argv = bcx.append_block_param(block, m.target_config().pointer_type());\n \n-            crate::atomic_shim::init_global_lock(m, &mut bcx);\n+            crate::atomic_shim::init_global_lock(m, &mut bcx, use_jit);\n \n             let main_func_ref = m.declare_func_in_func(main_func_id, &mut bcx.func);\n "}, {"sha": "0d2b5c6a392b2822a5ac05ddaa6cacb98c5bea1a", "filename": "test.sh", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c065f95609e28cd3f2ddddccb06bf01705699cb/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c065f95609e28cd3f2ddddccb06bf01705699cb/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=0c065f95609e28cd3f2ddddccb06bf01705699cb", "patch": "@@ -2,18 +2,19 @@\n set -e\n \n # Build cg_clif\n+export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n if [[ \"$1\" == \"--release\" ]]; then\n     export CHANNEL='release'\n-    cargo rustc --release -- -Zrun_dsymutil=no\n+    cargo build --release\n else\n     export CHANNEL='debug'\n-    cargo rustc -- -Zrun_dsymutil=no\n+    cargo build --bin cg_clif\n fi\n \n # Config\n source scripts/config.sh\n export CG_CLIF_INCR_CACHE_DISABLED=1\n-RUSTC=\"rustc $RUSTFLAGS -L crate=target/out --out-dir target/out\"\n+RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n # Cleanup\n rm -r target/out || true\n@@ -28,7 +29,7 @@ $RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n \n if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n     echo \"[JIT] mini_core_hello_world\"\n-    CG_CLIF_JIT=1 CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --crate-type bin -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+    CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n else\n     echo \"[JIT] mini_core_hello_world (skipped)\"\n fi\n@@ -51,7 +52,7 @@ $RUN_WRAPPER ./target/out/alloc_example\n \n if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n     echo \"[JIT] std_example\"\n-    CG_CLIF_JIT=1 $RUSTC --crate-type bin -Cprefer-dynamic example/std_example.rs --target $HOST_TRIPLE\n+    $RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n else\n     echo \"[JIT] std_example (skipped)\"\n fi\n@@ -86,7 +87,7 @@ pushd simple-raytracer\n if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n     echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n     hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n-    \"RUSTFLAGS='' cargo build\" \\\n+    \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n     \"../cargo.sh build\"\n \n     echo \"[BENCH RUN] ebobby/simple-raytracer\""}]}