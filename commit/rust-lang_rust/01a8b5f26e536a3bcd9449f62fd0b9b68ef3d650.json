{"sha": "01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYThiNWYyNmU1MzZhM2JjZDk0NDlmNjJmZDBiOWI2OGVmM2Q2NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T06:43:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T06:43:40Z"}, "message": "Auto merge of #69290 - wesleywiser:speed_up_ctfe_stress_4, r=RalfJung\n\nCheck `RUSTC_CTFE_BACKTRACE` much less by generating fewer errors\n\nBefore this change, `get_size_and_align()`  calls `get_fn_alloc()` *a\nlot* in CTFE heavy code. This previously returned an `Error` which would\ncheck if `RUSTC_CTFE_BACKTRACE` was set on construction. Doing this\nturned out to be a performance hotspot as @nnethercote discovered in\n#68792.\n\nThis is an alternate take on that PR which resolves the performance\nissue by generating *many* fewer errors. Previously, `ctfe-stress-4`\nwould generate over 5,000,000 errors each of which would check for the\npresence of the environment variable. With these changes, that number is\nreduced to 30.\n\nr? @RalfJung", "tree": {"sha": "f0a6ed6876169822d95d6d69a8757f1bde3997be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0a6ed6876169822d95d6d69a8757f1bde3997be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "html_url": "https://github.com/rust-lang/rust/commit/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2851e59a52673e0242532035047009c6e121c95a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2851e59a52673e0242532035047009c6e121c95a", "html_url": "https://github.com/rust-lang/rust/commit/2851e59a52673e0242532035047009c6e121c95a"}, {"sha": "9f3bc82fe40fd38fadfd24b7968548929abc9d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3bc82fe40fd38fadfd24b7968548929abc9d4c", "html_url": "https://github.com/rust-lang/rust/commit/9f3bc82fe40fd38fadfd24b7968548929abc9d4c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "1df389d9c8beeeb645f991cc5af6f03ba60a2483", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "patch": "@@ -560,7 +560,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // # Function pointers\n         // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n-        if let Ok(_) = self.get_fn_alloc(id) {\n+        if let Some(_) = self.get_fn_alloc(id) {\n             return if let AllocCheck::Dereferenceable = liveness {\n                 // The caller requested no function pointers.\n                 throw_unsup!(DerefFunctionPointer)\n@@ -602,14 +602,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n-    fn get_fn_alloc(&self, id: AllocId) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {\n+    fn get_fn_alloc(&self, id: AllocId) -> Option<FnVal<'tcx, M::ExtraFnVal>> {\n         trace!(\"reading fn ptr: {}\", id);\n         if let Some(extra) = self.extra_fn_ptr_map.get(&id) {\n-            Ok(FnVal::Other(*extra))\n+            Some(FnVal::Other(*extra))\n         } else {\n             match self.tcx.alloc_map.lock().get(id) {\n-                Some(GlobalAlloc::Function(instance)) => Ok(FnVal::Instance(instance)),\n-                _ => throw_unsup!(ExecuteMemory),\n+                Some(GlobalAlloc::Function(instance)) => Some(FnVal::Instance(instance)),\n+                _ => None,\n             }\n         }\n     }\n@@ -622,7 +622,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         if ptr.offset.bytes() != 0 {\n             throw_unsup!(InvalidFunctionPointer)\n         }\n-        self.get_fn_alloc(ptr.alloc_id)\n+        self.get_fn_alloc(ptr.alloc_id).ok_or_else(|| err_unsup!(ExecuteMemory).into())\n     }\n \n     pub fn mark_immutable(&mut self, id: AllocId) -> InterpResult<'tcx> {"}]}