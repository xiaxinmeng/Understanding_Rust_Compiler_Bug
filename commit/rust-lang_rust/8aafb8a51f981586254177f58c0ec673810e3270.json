{"sha": "8aafb8a51f981586254177f58c0ec673810e3270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYWZiOGE1MWY5ODE1ODYyNTQxNzdmNThjMGVjNjczODEwZTMyNzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-25T05:45:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-25T05:45:30Z"}, "message": "Rollup merge of #70349 - Centril:hir-outa-rustc, r=Zoxc\n\nmove `hir_id_validation` to `rustc_passes` + simplify `hir::map` code\n\nr? @Zoxc", "tree": {"sha": "bcff7e8fcf72f3c33a75fae7c5ec26d7db9cd4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcff7e8fcf72f3c33a75fae7c5ec26d7db9cd4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aafb8a51f981586254177f58c0ec673810e3270", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeu/6CRBK7hj4Ov3rIwAAdHIIAHI6rRrDSieolkQuk8dV2KPC\nIBdRM8orPRevbUBE1W2alAl4lGJG7ruj3bjZxv5gOnV1FYSpIASoo5355rMiY2ac\nfHoD3cZwqZWUXUBl2EqDc0WZJdhZ3CZ1AfqMwyZctpgQYKpIgdnqflju8j9YgPMq\nIk/jhRtHtYCVqVTkCmZRWGK0nL+q8LE5XsId0AQBqjGLMFCY8I6dtDjgODFwrQPh\nfXaf6V6MLeS0bFAGT0oi76hBL+NuGx8ObXqEenh4UIXNPImqTXS2RlSizlVEt/aO\ncs6H93YOqVoGTgDi5LGHWfBVOnyf4B/mYj+TGJCL4LK4glEovrvPSP0OUxHB9P4=\n=F/aT\n-----END PGP SIGNATURE-----\n", "payload": "tree bcff7e8fcf72f3c33a75fae7c5ec26d7db9cd4c0\nparent d03c02a58907b27358563e2e7a9dc7e70bf2fc31\nparent 12e4f9f69a4b2afcf1ebdfce2a36f88b0de54c92\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585115130 +0100\ncommitter GitHub <noreply@github.com> 1585115130 +0100\n\nRollup merge of #70349 - Centril:hir-outa-rustc, r=Zoxc\n\nmove `hir_id_validation` to `rustc_passes` + simplify `hir::map` code\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aafb8a51f981586254177f58c0ec673810e3270", "html_url": "https://github.com/rust-lang/rust/commit/8aafb8a51f981586254177f58c0ec673810e3270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aafb8a51f981586254177f58c0ec673810e3270/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03c02a58907b27358563e2e7a9dc7e70bf2fc31", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03c02a58907b27358563e2e7a9dc7e70bf2fc31", "html_url": "https://github.com/rust-lang/rust/commit/d03c02a58907b27358563e2e7a9dc7e70bf2fc31"}, {"sha": "12e4f9f69a4b2afcf1ebdfce2a36f88b0de54c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e4f9f69a4b2afcf1ebdfce2a36f88b0de54c92", "html_url": "https://github.com/rust-lang/rust/commit/12e4f9f69a4b2afcf1ebdfce2a36f88b0de54c92"}], "stats": {"total": 215, "additions": 77, "deletions": 138}, "files": [{"sha": "e95e39bd309bbc21dde04387f88f9470390e752a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 73, "deletions": 135, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8aafb8a51f981586254177f58c0ec673810e3270", "patch": "@@ -23,8 +23,6 @@ use rustc_target::spec::abi::Abi;\n \n pub mod blocks;\n mod collector;\n-mod hir_id_validator;\n-pub use hir_id_validator::check_crate;\n \n /// Represents an entry and its parent `HirId`.\n #[derive(Copy, Clone, Debug)]\n@@ -44,79 +42,42 @@ impl<'hir> Entry<'hir> {\n \n fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n     match node {\n-        Node::Item(ref item) => match item.kind {\n-            ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n-            _ => None,\n-        },\n-\n-        Node::TraitItem(ref item) => match item.kind {\n-            TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n-            _ => None,\n-        },\n-\n-        Node::ImplItem(ref item) => match item.kind {\n-            ImplItemKind::Fn(ref sig, _) => Some(&sig.decl),\n-            _ => None,\n-        },\n-\n-        Node::Expr(ref expr) => match expr.kind {\n-            ExprKind::Closure(_, ref fn_decl, ..) => Some(fn_decl),\n-            _ => None,\n-        },\n-\n+        Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n+        | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n+        | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),\n+        Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. }) => Some(fn_decl),\n         _ => None,\n     }\n }\n \n fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n     match &node {\n-        Node::Item(item) => match &item.kind {\n-            ItemKind::Fn(sig, _, _) => Some(sig),\n-            _ => None,\n-        },\n-\n-        Node::TraitItem(item) => match &item.kind {\n-            TraitItemKind::Fn(sig, _) => Some(sig),\n-            _ => None,\n-        },\n-\n-        Node::ImplItem(item) => match &item.kind {\n-            ImplItemKind::Fn(sig, _) => Some(sig),\n-            _ => None,\n-        },\n-\n+        Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n+        | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n+        | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),\n         _ => None,\n     }\n }\n \n fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n     match node {\n-        Node::Item(item) => match item.kind {\n-            ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body) => {\n-                Some(body)\n-            }\n-            _ => None,\n-        },\n-\n-        Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)) => {\n-                Some(body)\n-            }\n-            _ => None,\n-        },\n-\n-        Node::ImplItem(item) => match item.kind {\n-            ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body) => Some(body),\n-            _ => None,\n-        },\n+        Node::Item(Item {\n+            kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),\n+            ..\n+        })\n+        | Node::TraitItem(TraitItem {\n+            kind:\n+                TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),\n+            ..\n+        })\n+        | Node::ImplItem(ImplItem {\n+            kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),\n+            ..\n+        })\n+        | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),\n \n         Node::AnonConst(constant) => Some(constant.body),\n \n-        Node::Expr(expr) => match expr.kind {\n-            ExprKind::Closure(.., body, _, _) => Some(body),\n-            _ => None,\n-        },\n-\n         _ => None,\n     }\n }\n@@ -520,20 +481,21 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics<'hir>> {\n-        self.get_if_local(id).and_then(|node| match node {\n-            Node::ImplItem(ref impl_item) => Some(&impl_item.generics),\n-            Node::TraitItem(ref trait_item) => Some(&trait_item.generics),\n-            Node::Item(ref item) => match item.kind {\n-                ItemKind::Fn(_, ref generics, _)\n-                | ItemKind::TyAlias(_, ref generics)\n-                | ItemKind::Enum(_, ref generics)\n-                | ItemKind::Struct(_, ref generics)\n-                | ItemKind::Union(_, ref generics)\n-                | ItemKind::Trait(_, _, ref generics, ..)\n-                | ItemKind::TraitAlias(ref generics, _)\n-                | ItemKind::Impl { ref generics, .. } => Some(generics),\n-                _ => None,\n-            },\n+        self.get_if_local(id).and_then(|node| match &node {\n+            Node::ImplItem(impl_item) => Some(&impl_item.generics),\n+            Node::TraitItem(trait_item) => Some(&trait_item.generics),\n+            Node::Item(Item {\n+                kind:\n+                    ItemKind::Fn(_, generics, _)\n+                    | ItemKind::TyAlias(_, generics)\n+                    | ItemKind::Enum(_, generics)\n+                    | ItemKind::Struct(_, generics)\n+                    | ItemKind::Union(_, generics)\n+                    | ItemKind::Trait(_, _, generics, ..)\n+                    | ItemKind::TraitAlias(generics, _)\n+                    | ItemKind::Impl { generics, .. },\n+                ..\n+            }) => Some(generics),\n             _ => None,\n         })\n     }\n@@ -573,11 +535,12 @@ impl<'hir> Map<'hir> {\n             _ => return false,\n         }\n         match self.find(self.get_parent_node(id)) {\n-            Some(Node::Item(_)) | Some(Node::TraitItem(_)) | Some(Node::ImplItem(_)) => true,\n-            Some(Node::Expr(e)) => match e.kind {\n-                ExprKind::Closure(..) => true,\n-                _ => false,\n-            },\n+            Some(\n+                Node::Item(_)\n+                | Node::TraitItem(_)\n+                | Node::ImplItem(_)\n+                | Node::Expr(Expr { kind: ExprKind::Closure(..), .. }),\n+            ) => true,\n             _ => false,\n         }\n     }\n@@ -644,12 +607,8 @@ impl<'hir> Map<'hir> {\n             if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {\n                 match next_node {\n                     Node::Block(Block { expr: None, .. }) => return None,\n-                    Node::Block(Block { expr: Some(expr), .. }) => {\n-                        if hir_id != expr.hir_id {\n-                            // The current node is not the tail expression of its parent.\n-                            return None;\n-                        }\n-                    }\n+                    // The current node is not the tail expression of its parent.\n+                    Node::Block(Block { expr: Some(e), .. }) if hir_id != e.hir_id => return None,\n                     _ => {}\n                 }\n             }\n@@ -659,14 +618,11 @@ impl<'hir> Map<'hir> {\n                 | Node::TraitItem(_)\n                 | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })\n                 | Node::ImplItem(_) => return Some(hir_id),\n-                Node::Expr(ref expr) => {\n-                    match expr.kind {\n-                        // Ignore `return`s on the first iteration\n-                        ExprKind::Loop(..) | ExprKind::Ret(..) => return None,\n-                        _ => {}\n-                    }\n+                // Ignore `return`s on the first iteration\n+                Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })\n+                | Node::Local(_) => {\n+                    return None;\n                 }\n-                Node::Local(_) => return None,\n                 _ => {}\n             }\n         }\n@@ -710,17 +666,12 @@ impl<'hir> Map<'hir> {\n     pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&'hir Expr<'hir>> {\n         for (_, node) in self.parent_iter(hir_id) {\n             match node {\n-                Node::Item(_) | Node::ForeignItem(_) | Node::TraitItem(_) | Node::ImplItem(_) => {\n-                    break;\n-                }\n-                Node::Expr(expr) => match expr.kind {\n-                    ExprKind::Match(_, _, _) => return Some(expr),\n-                    _ => {}\n-                },\n-                Node::Stmt(stmt) => match stmt.kind {\n-                    StmtKind::Local(_) => break,\n-                    _ => {}\n-                },\n+                Node::Item(_)\n+                | Node::ForeignItem(_)\n+                | Node::TraitItem(_)\n+                | Node::ImplItem(_)\n+                | Node::Stmt(Stmt { kind: StmtKind::Local(_), .. }) => break,\n+                Node::Expr(expr @ Expr { kind: ExprKind::Match(..), .. }) => return Some(expr),\n                 _ => {}\n             }\n         }\n@@ -730,32 +681,22 @@ impl<'hir> Map<'hir> {\n     /// Returns the nearest enclosing scope. A scope is roughly an item or block.\n     pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {\n         for (hir_id, node) in self.parent_iter(hir_id) {\n-            if match node {\n-                Node::Item(i) => match i.kind {\n+            if let Node::Item(Item {\n+                kind:\n                     ItemKind::Fn(..)\n                     | ItemKind::Mod(..)\n                     | ItemKind::Enum(..)\n                     | ItemKind::Struct(..)\n                     | ItemKind::Union(..)\n                     | ItemKind::Trait(..)\n-                    | ItemKind::Impl { .. } => true,\n-                    _ => false,\n-                },\n-                Node::ForeignItem(fi) => match fi.kind {\n-                    ForeignItemKind::Fn(..) => true,\n-                    _ => false,\n-                },\n-                Node::TraitItem(ti) => match ti.kind {\n-                    TraitItemKind::Fn(..) => true,\n-                    _ => false,\n-                },\n-                Node::ImplItem(ii) => match ii.kind {\n-                    ImplItemKind::Fn(..) => true,\n-                    _ => false,\n-                },\n-                Node::Block(_) => true,\n-                _ => false,\n-            } {\n+                    | ItemKind::Impl { .. },\n+                ..\n+            })\n+            | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(..), .. })\n+            | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(..), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(..), .. })\n+            | Node::Block(_) = node\n+            {\n                 return Some(hir_id);\n             }\n         }\n@@ -771,11 +712,11 @@ impl<'hir> Map<'hir> {\n                 return CRATE_HIR_ID;\n             }\n             match self.get(scope) {\n-                Node::Item(i) => match i.kind {\n-                    ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }) => {}\n-                    _ => break,\n-                },\n-                Node::Block(_) => {}\n+                Node::Item(Item {\n+                    kind: ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }),\n+                    ..\n+                })\n+                | Node::Block(_) => {}\n                 _ => break,\n             }\n         }\n@@ -823,14 +764,11 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData<'hir> {\n         match self.find(id) {\n-            Some(Node::Item(i)) => match i.kind {\n-                ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n-                    struct_def\n-                }\n-                _ => bug!(\"struct ID bound to non-struct {}\", self.node_to_string(id)),\n-            },\n+            Some(\n+                Node::Ctor(vd)\n+                | Node::Item(Item { kind: ItemKind::Struct(vd, _) | ItemKind::Union(vd, _), .. }),\n+            ) => vd,\n             Some(Node::Variant(variant)) => &variant.data,\n-            Some(Node::Ctor(data)) => data,\n             _ => bug!(\"expected struct or variant, found {}\", self.node_to_string(id)),\n         }\n     }"}, {"sha": "f927e6574f68ca0ab3a5710df14ce3432fd2ee16", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=8aafb8a51f981586254177f58c0ec673810e3270", "patch": "@@ -776,7 +776,7 @@ pub fn create_global_ctxt<'tcx>(\n fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n-    rustc::hir::map::check_crate(tcx);\n+    rustc_passes::hir_id_validator::check_crate(tcx);\n \n     let sess = tcx.sess;\n     let mut entry_point = None;"}, {"sha": "a78e45eebbed422d676b65a508dedf72f5a78829", "filename": "src/librustc_passes/hir_id_validator.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc_passes%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc_passes%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_id_validator.rs?ref=8aafb8a51f981586254177f58c0ec673810e3270", "patch": "@@ -1,5 +1,5 @@\n-use crate::hir::map::Map;\n-use crate::ty::TyCtxt;\n+use rustc::hir::map::Map;\n+use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;", "previous_filename": "src/librustc/hir/map/hir_id_validator.rs"}, {"sha": "ab978edb8c3de4f02015f4a0709490bd3aaa855e", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aafb8a51f981586254177f58c0ec673810e3270/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=8aafb8a51f981586254177f58c0ec673810e3270", "patch": "@@ -21,6 +21,7 @@ mod check_const;\n pub mod dead;\n mod diagnostic_items;\n pub mod entry;\n+pub mod hir_id_validator;\n pub mod hir_stats;\n mod intrinsicck;\n mod lang_items;"}]}