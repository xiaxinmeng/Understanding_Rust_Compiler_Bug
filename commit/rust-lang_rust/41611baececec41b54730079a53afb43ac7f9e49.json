{"sha": "41611baececec41b54730079a53afb43ac7f9e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNjExYmFlY2VjZWM0MWI1NDczMDA3OWE1M2FmYjQzYWM3ZjllNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-04T22:09:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-04T22:09:52Z"}, "message": "Auto merge of #30661 - michaelwoerister:trans_fn_attrs, r=nrc\n\nSo far `librustc::trans::base::trans_fn()` and `trans_closure()` have been passed the list of attributes on the function being translated *only* if the function was local and non-generic. For generic functions, functions inlined from other crates, functions with foreign ABI and for closures, only an empty list of attributes was ever passed to `trans_fn()`.\nThis led to the case that generic functions marked with `#[rustc_mir]` where not actually translated via MIR but via the legacy translation path.\n\nThis PR makes function/closure attributes always be passed to `trans_fn()` and disables the one test where this makes a difference.\n\nIf there is an actual reason why attributes were not passed along in these cases, let me know.\n\ncc @rust-lang/compiler\ncc @luqmana regarding the test case", "tree": {"sha": "90aee9af7c5feb7d777b2f16a55274f797f4f733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90aee9af7c5feb7d777b2f16a55274f797f4f733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41611baececec41b54730079a53afb43ac7f9e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41611baececec41b54730079a53afb43ac7f9e49", "html_url": "https://github.com/rust-lang/rust/commit/41611baececec41b54730079a53afb43ac7f9e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41611baececec41b54730079a53afb43ac7f9e49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "badc23b6ad47c6b6d401a3ea1dc5163bdcd86cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/badc23b6ad47c6b6d401a3ea1dc5163bdcd86cd7", "html_url": "https://github.com/rust-lang/rust/commit/badc23b6ad47c6b6d401a3ea1dc5163bdcd86cd7"}, {"sha": "ff93fc81925a93cb1434e6c3a8537f10402827e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff93fc81925a93cb1434e6c3a8537f10402827e7", "html_url": "https://github.com/rust-lang/rust/commit/ff93fc81925a93cb1434e6c3a8537f10402827e7"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "ea9ca8f37b173ee1f7e31a4309bc258701c4a7ac", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -31,6 +31,7 @@ use session::config::FullDebugInfo;\n \n use syntax::abi::RustCall;\n use syntax::ast;\n+use syntax::attr::{ThinAttributes, ThinAttributesExt};\n \n use rustc_front::hir;\n \n@@ -176,7 +177,8 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n                                     body: &hir::Block,\n                                     id: ast::NodeId,\n                                     closure_def_id: DefId, // (*)\n-                                    closure_substs: &'tcx ty::ClosureSubsts<'tcx>)\n+                                    closure_substs: &'tcx ty::ClosureSubsts<'tcx>,\n+                                    closure_expr_attrs: &ThinAttributes)\n                                     -> Option<Block<'a, 'tcx>>\n {\n     // (*) Note that in the case of inlined functions, the `closure_def_id` will be the\n@@ -218,7 +220,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n                   llfn,\n                   param_substs,\n                   id,\n-                  &[],\n+                  closure_expr_attrs.as_attr_slice(),\n                   sig.output,\n                   function_type.abi,\n                   ClosureEnv::Closure(closure_def_id, &freevars));"}, {"sha": "3ea358a8f4cd345b80b97ec429ce04c692bd9c57", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -986,8 +986,13 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         hir::ExprClosure(_, ref decl, ref body) => {\n             match ety.sty {\n                 ty::TyClosure(def_id, ref substs) => {\n-                    closure::trans_closure_expr(closure::Dest::Ignore(cx), decl,\n-                                                body, e.id, def_id, substs);\n+                    closure::trans_closure_expr(closure::Dest::Ignore(cx),\n+                                                decl,\n+                                                body,\n+                                                e.id,\n+                                                def_id,\n+                                                substs,\n+                                                &e.attrs);\n                 }\n                 _ =>\n                     cx.sess().span_bug("}, {"sha": "fb6f2190207ee3c8e33efe303b558371152800ba", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -1196,7 +1196,13 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                         &format!(\"closure expr without closure type: {:?}\", t)),\n             };\n \n-            closure::trans_closure_expr(dest, decl, body, expr.id, def_id, substs).unwrap_or(bcx)\n+            closure::trans_closure_expr(dest,\n+                                        decl,\n+                                        body,\n+                                        expr.id,\n+                                        def_id,\n+                                        substs,\n+                                        &expr.attrs).unwrap_or(bcx)\n         }\n         hir::ExprCall(ref f, ref args) => {\n             if bcx.tcx().is_method_call(expr.id) {"}, {"sha": "01fd36867fffb3a35c943da05ff341e6a325a5b8", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -640,7 +640,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         let llfn = declare::define_internal_rust_fn(ccx, &ps, t);\n         attributes::from_fn_attrs(ccx, attrs, llfn);\n-        base::trans_fn(ccx, decl, body, llfn, param_substs, id, &[]);\n+        base::trans_fn(ccx, decl, body, llfn, param_substs, id, attrs);\n         llfn\n     }\n "}, {"sha": "5968daf349f08dfcc70e571b5a28961d5a6f9854", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -165,7 +165,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n                              llfn,\n                              empty_substs,\n                              impl_item.id,\n-                             &[]);\n+                             &impl_item.attrs);\n                     // See linkage comments on items.\n                     if ccx.sess().opts.cg.codegen_units == 1 {\n                         SetLinkage(llfn, InternalLinkage);"}, {"sha": "7a1cbf206074ddf123be9f0d88268dee7c9fe158", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -74,8 +74,13 @@ pub fn trans_impl(ccx: &CrateContext,\n                     for (ref ccx, is_origin) in ccx.maybe_iter(trans_everywhere) {\n                         let llfn = get_item_val(ccx, impl_item.id);\n                         let empty_substs = tcx.mk_substs(Substs::trans_empty());\n-                        trans_fn(ccx, &sig.decl, body, llfn,\n-                                 empty_substs, impl_item.id, &[]);\n+                        trans_fn(ccx,\n+                                 &sig.decl,\n+                                 body,\n+                                 llfn,\n+                                 empty_substs,\n+                                 impl_item.id,\n+                                 &impl_item.attrs);\n                         update_linkage(ccx,\n                                        llfn,\n                                        Some(impl_item.id),"}, {"sha": "80a86bac26b9afc892044161f19400fff48d8a83", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -185,7 +185,13 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                               ccx, &**decl, &**body, &[], d, psubsts, fn_node_id,\n                               Some(&hash[..]));\n                       } else {\n-                          trans_fn(ccx, &**decl, &**body, d, psubsts, fn_node_id, &[]);\n+                          trans_fn(ccx,\n+                                   &**decl,\n+                                   &**body,\n+                                   d,\n+                                   psubsts,\n+                                   fn_node_id,\n+                                   &i.attrs);\n                       }\n                   }\n \n@@ -216,7 +222,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                  d,\n                                  psubsts,\n                                  impl_item.id,\n-                                 &[]);\n+                                 &impl_item.attrs);\n                     }\n                     d\n                 }\n@@ -232,8 +238,13 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     let d = mk_lldecl(abi::Rust);\n                     let needs_body = setup_lldecl(d, &trait_item.attrs);\n                     if needs_body {\n-                        trans_fn(ccx, &sig.decl, body, d,\n-                                 psubsts, trait_item.id, &[]);\n+                        trans_fn(ccx,\n+                                 &sig.decl,\n+                                 body,\n+                                 d,\n+                                 psubsts,\n+                                 trait_item.id,\n+                                 &trait_item.attrs);\n                     }\n                     d\n                 }"}, {"sha": "cf3d3d0720bcc4a6e7e157d569cf071818ab7ff4", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41611baececec41b54730079a53afb43ac7f9e49/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41611baececec41b54730079a53afb43ac7f9e49/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=41611baececec41b54730079a53afb43ac7f9e49", "patch": "@@ -58,11 +58,16 @@ fn test5(x: &Bar, a: isize) -> isize {\n     x.extension_method(a)\n }\n \n-#[rustc_mir]\n-fn test6<T: Bar>(x: &T, a: isize) -> isize {\n-    // Test calling extension method on generic callee\n-    x.extension_method(a)\n-}\n+// FIXME #30661: Although this function has the #[rustc_mir] attribute it never\n+//               was translated via the MIR implementation because attributes\n+//               where not passed along to trans::base::trans_fn() for generic\n+//               functions.\n+//               Uncomment this test once the thing it tests is fixed.\n+// #[rustc_mir]\n+// fn test6<T: Bar>(x: &T, a: isize) -> isize {\n+//     // Test calling extension method on generic callee\n+//     x.extension_method(a)\n+// }\n \n trait One<T = Self> {\n     fn one() -> T;\n@@ -94,7 +99,8 @@ fn main() {\n     assert_eq!(test3(&Foo, 42), 42);\n     assert_eq!(test4(&Foo, 970), 970);\n     assert_eq!(test5(&Foo, 8576), 8576);\n-    assert_eq!(test6(&Foo, 12367), 12367);\n+    // see definition of test6() above\n+    // assert_eq!(test6(&Foo, 12367), 12367);\n     assert_eq!(test7(), 1);\n     assert_eq!(test8(), 2);\n }"}]}