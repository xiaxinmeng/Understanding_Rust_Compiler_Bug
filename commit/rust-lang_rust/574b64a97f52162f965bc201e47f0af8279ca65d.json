{"sha": "574b64a97f52162f965bc201e47f0af8279ca65d", "node_id": "C_kwDOAAsO6NoAKDU3NGI2NGE5N2Y1MjE2MmY5NjViYzIwMWU0N2YwYWY4Mjc5Y2E2NWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-31T20:10:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-31T20:10:02Z"}, "message": "Auto merge of #106282 - Ezrashaw:merge-e0465, r=estebank\n\nrefactor: merge error code `E0465` into `E0464`\n\n`E0465` is an undocumented and untested error code that is functionally identical to `E0464`. This PR merges `E0465` into `E0464`, thus documenting and testing another error code (#61137).\n\nr? `@GuillaumeGomez` (not sure if you want to review this but it's relevant to my other PRs that you have reviewed)", "tree": {"sha": "d463d1644ad28e2de82aae6c0e8c0ba0bcbd2fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d463d1644ad28e2de82aae6c0e8c0ba0bcbd2fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/574b64a97f52162f965bc201e47f0af8279ca65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/574b64a97f52162f965bc201e47f0af8279ca65d", "html_url": "https://github.com/rust-lang/rust/commit/574b64a97f52162f965bc201e47f0af8279ca65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/574b64a97f52162f965bc201e47f0af8279ca65d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd01a163c1cff9461ddd85e7b3c2c0109657658f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd01a163c1cff9461ddd85e7b3c2c0109657658f", "html_url": "https://github.com/rust-lang/rust/commit/dd01a163c1cff9461ddd85e7b3c2c0109657658f"}, {"sha": "24b39ece2f308aee31baf1548d24bbfbe7bf07fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b39ece2f308aee31baf1548d24bbfbe7bf07fe", "html_url": "https://github.com/rust-lang/rust/commit/24b39ece2f308aee31baf1548d24bbfbe7bf07fe"}], "stats": {"total": 145, "additions": 59, "deletions": 86}, "files": [{"sha": "3fba2cf57494deb0dd74572e90d59578424b5305", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -598,7 +598,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0421, // merged into 531\n //  E0427, // merged into 530\n //  E0456, // plugin `..` is not available for triple `..`\n-    E0465, // multiple .. candidates for `..` found\n+//  E0465, // removed: merged with E0464\n //  E0467, // removed\n //  E0470, // removed\n //  E0471, // constant evaluation error (in pattern)"}, {"sha": "b42b228bde9fa3329e04e6c2125049a22c598054", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -196,11 +196,7 @@ metadata_extern_location_not_file =\n     extern location for {$crate_name} is not a file: {$location}\n \n metadata_multiple_candidates =\n-    multiple {$flavor} candidates for `{$crate_name}` found\n-\n-metadata_multiple_matching_crates =\n-    multiple matching crates for `{$crate_name}`\n-    .note = candidates:{$candidates}\n+    multiple candidates for `{$flavor}` dependency `{$crate_name}` found\n \n metadata_symbol_conflicts_current =\n     the current crate is indistinguishable from one of its dependencies: it has the same crate-name `{$crate_name}` and was compiled with the same `-C metadata` arguments. This will result in symbol conflicts between the two."}, {"sha": "1e08e95c01f844136f8ca0cee6e1312e133a73a6", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -486,25 +486,15 @@ impl IntoDiagnostic<'_> for MultipleCandidates {\n         let mut diag = handler.struct_err(rustc_errors::fluent::metadata_multiple_candidates);\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"flavor\", self.flavor);\n-        diag.code(error_code!(E0465));\n+        diag.code(error_code!(E0464));\n         diag.set_span(self.span);\n         for (i, candidate) in self.candidates.iter().enumerate() {\n-            diag.span_note(self.span, &format!(\"candidate #{}: {}\", i + 1, candidate.display()));\n+            diag.note(&format!(\"candidate #{}: {}\", i + 1, candidate.display()));\n         }\n         diag\n     }\n }\n \n-#[derive(Diagnostic)]\n-#[diag(metadata_multiple_matching_crates, code = \"E0464\")]\n-#[note]\n-pub struct MultipleMatchingCrates {\n-    #[primary_span]\n-    pub span: Span,\n-    pub crate_name: Symbol,\n-    pub candidates: String,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(metadata_symbol_conflicts_current, code = \"E0519\")]\n pub struct SymbolConflictsCurrent {"}, {"sha": "92dc5bd41cbab45ae3ac84031c10d63b2f0b01c9", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -216,9 +216,8 @@ use crate::creader::Library;\n use crate::errors::{\n     CannotFindCrate, CrateLocationUnknownType, DlError, ExternLocationNotExist,\n     ExternLocationNotFile, FoundStaticlib, IncompatibleRustc, InvalidMetadataFiles,\n-    LibFilenameForm, MultipleCandidates, MultipleMatchingCrates, NewerCrateVersion,\n-    NoCrateWithTriple, NoDylibPlugin, NonAsciiName, StableCrateIdCollision, SymbolConflictsCurrent,\n-    SymbolConflictsOthers,\n+    LibFilenameForm, MultipleCandidates, NewerCrateVersion, NoCrateWithTriple, NoDylibPlugin,\n+    NonAsciiName, StableCrateIdCollision, SymbolConflictsCurrent, SymbolConflictsOthers,\n };\n use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n@@ -240,7 +239,6 @@ use rustc_target::spec::{Target, TargetTriple};\n \n use snap::read::FrameDecoder;\n use std::borrow::Cow;\n-use std::fmt::Write as _;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt, fs};\n@@ -482,7 +480,22 @@ impl<'a> CrateLocator<'a> {\n         match libraries.len() {\n             0 => Ok(None),\n             1 => Ok(Some(libraries.into_iter().next().unwrap().1)),\n-            _ => Err(CrateError::MultipleMatchingCrates(self.crate_name, libraries)),\n+            _ => {\n+                let mut libraries: Vec<_> = libraries.into_values().collect();\n+\n+                libraries.sort_by_cached_key(|lib| lib.source.paths().next().unwrap().clone());\n+                let candidates = libraries\n+                    .iter()\n+                    .map(|lib| lib.source.paths().next().unwrap().clone())\n+                    .collect::<Vec<_>>();\n+\n+                Err(CrateError::MultipleCandidates(\n+                    self.crate_name,\n+                    // these are the same for all candidates\n+                    get_flavor_from_path(candidates.first().unwrap()),\n+                    candidates,\n+                ))\n+            }\n         }\n     }\n \n@@ -882,17 +895,22 @@ pub fn list_file_metadata(\n     metadata_loader: &dyn MetadataLoader,\n     out: &mut dyn Write,\n ) -> IoResult<()> {\n+    let flavor = get_flavor_from_path(path);\n+    match get_metadata_section(target, flavor, path, metadata_loader) {\n+        Ok(metadata) => metadata.list_crate_metadata(out),\n+        Err(msg) => write!(out, \"{}\\n\", msg),\n+    }\n+}\n+\n+fn get_flavor_from_path(path: &Path) -> CrateFlavor {\n     let filename = path.file_name().unwrap().to_str().unwrap();\n-    let flavor = if filename.ends_with(\".rlib\") {\n+\n+    if filename.ends_with(\".rlib\") {\n         CrateFlavor::Rlib\n     } else if filename.ends_with(\".rmeta\") {\n         CrateFlavor::Rmeta\n     } else {\n         CrateFlavor::Dylib\n-    };\n-    match get_metadata_section(target, flavor, path, metadata_loader) {\n-        Ok(metadata) => metadata.list_crate_metadata(out),\n-        Err(msg) => write!(out, \"{}\\n\", msg),\n     }\n }\n \n@@ -931,7 +949,6 @@ pub(crate) enum CrateError {\n     ExternLocationNotExist(Symbol, PathBuf),\n     ExternLocationNotFile(Symbol, PathBuf),\n     MultipleCandidates(Symbol, CrateFlavor, Vec<PathBuf>),\n-    MultipleMatchingCrates(Symbol, FxHashMap<Svh, Library>),\n     SymbolConflictsCurrent(Symbol),\n     SymbolConflictsOthers(Symbol),\n     StableCrateIdCollision(Symbol, Symbol),\n@@ -972,37 +989,7 @@ impl CrateError {\n                 sess.emit_err(ExternLocationNotFile { span, crate_name, location: &loc });\n             }\n             CrateError::MultipleCandidates(crate_name, flavor, candidates) => {\n-                sess.emit_err(MultipleCandidates { span, flavor: flavor, crate_name, candidates });\n-            }\n-            CrateError::MultipleMatchingCrates(crate_name, libraries) => {\n-                let mut libraries: Vec<_> = libraries.into_values().collect();\n-                // Make ordering of candidates deterministic.\n-                // This has to `clone()` to work around lifetime restrictions with `sort_by_key()`.\n-                // `sort_by()` could be used instead, but this is in the error path,\n-                // so the performance shouldn't matter.\n-                libraries.sort_by_cached_key(|lib| lib.source.paths().next().unwrap().clone());\n-                let candidates = libraries\n-                    .iter()\n-                    .map(|lib| {\n-                        let crate_name = lib.metadata.get_root().name();\n-                        let crate_name = crate_name.as_str();\n-                        let mut paths = lib.source.paths();\n-\n-                        // This `unwrap()` should be okay because there has to be at least one\n-                        // source file. `CrateSource`'s docs confirm that too.\n-                        let mut s = format!(\n-                            \"\\ncrate `{}`: {}\",\n-                            crate_name,\n-                            paths.next().unwrap().display()\n-                        );\n-                        let padding = 8 + crate_name.len();\n-                        for path in paths {\n-                            write!(s, \"\\n{:>padding$}\", path.display(), padding = padding).unwrap();\n-                        }\n-                        s\n-                    })\n-                    .collect::<String>();\n-                sess.emit_err(MultipleMatchingCrates { span, crate_name, candidates });\n+                sess.emit_err(MultipleCandidates { span, crate_name, flavor, candidates });\n             }\n             CrateError::SymbolConflictsCurrent(root_name) => {\n                 sess.emit_err(SymbolConflictsCurrent { span, crate_name: root_name });"}, {"sha": "bd9c8483ec29ed171d7625d4bb7c654a51470738", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve1-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-1.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,4 +1,5 @@\n // compile-flags:-C extra-filename=-1\n+// no-prefer-dynamic\n #![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "bd0f08f45b633ce778d9136ce622a64664b4863a", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve1-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-2.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,4 +1,5 @@\n // compile-flags:-C extra-filename=-2\n+// no-prefer-dynamic\n #![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "1226c2fbb461eee92efa1ada48802562eed83ff1", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve1-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-3.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,4 +1,5 @@\n // compile-flags:-C extra-filename=-3\n+// no-prefer-dynamic\n #![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "f5477f244dd8f033f8d2123bfa87bace9687b8a2", "filename": "src/test/ui/crate-loading/crateresolve1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -9,7 +9,6 @@\n // NOTE: This test is duplicated at `src/test/ui/error-codes/E0464.rs`.\n \n extern crate crateresolve1;\n-//~^ ERROR multiple matching crates for `crateresolve1`\n+//~^ ERROR multiple candidates for `rlib` dependency `crateresolve1` found\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "7b840b52628f1a413d1ff894f818db14159e1263", "filename": "src/test/ui/crate-loading/crateresolve1.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.stderr?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,13 +1,12 @@\n-error[E0464]: multiple matching crates for `crateresolve1`\n+error[E0464]: multiple candidates for `rlib` dependency `crateresolve1` found\n   --> $DIR/crateresolve1.rs:11:1\n    |\n LL | extern crate crateresolve1;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: candidates:\n-           crate `crateresolve1`: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-1.somelib\n-           crate `crateresolve1`: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-2.somelib\n-           crate `crateresolve1`: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-3.somelib\n+   = note: candidate #1: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-1.somelib\n+   = note: candidate #2: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-2.somelib\n+   = note: candidate #3: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-3.somelib\n \n error: aborting due to previous error\n "}, {"sha": "0774c0dfd329dff8da64d810935f913362bb8791", "filename": "src/test/ui/crate-loading/crateresolve2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -8,7 +8,6 @@\n // normalize-stderr-test: \"\\\\\\?\\\\\" -> \"\"\n \n extern crate crateresolve2;\n-//~^ ERROR multiple matching crates for `crateresolve2`\n+//~^ ERROR multiple candidates for `rmeta` dependency `crateresolve2` found\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "a36f4f02265b7db3ffdce980b6846786d16d8e17", "filename": "src/test/ui/crate-loading/crateresolve2.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,13 +1,12 @@\n-error[E0464]: multiple matching crates for `crateresolve2`\n+error[E0464]: multiple candidates for `rmeta` dependency `crateresolve2` found\n   --> $DIR/crateresolve2.rs:10:1\n    |\n LL | extern crate crateresolve2;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: candidates:\n-           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-1.rmeta\n-           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-2.rmeta\n-           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-3.rmeta\n+   = note: candidate #1: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-1.rmeta\n+   = note: candidate #2: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-2.rmeta\n+   = note: candidate #3: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-3.rmeta\n \n error: aborting due to previous error\n "}, {"sha": "554f1ce72d9e87964bdaa5ddb617ff056fe86b28", "filename": "src/test/ui/error-codes/E0464.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2FE0464.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2FE0464.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0464.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -9,7 +9,6 @@\n // NOTE: This test is duplicated from `src/test/ui/crate-loading/crateresolve1.rs`.\n \n extern crate crateresolve1;\n-//~^ ERROR multiple matching crates for `crateresolve1`\n+//~^ ERROR multiple candidates for `rlib` dependency `crateresolve1` found\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "574270f94a672a023e38527c455575bfebef2978", "filename": "src/test/ui/error-codes/E0464.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2FE0464.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2FE0464.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0464.stderr?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,13 +1,12 @@\n-error[E0464]: multiple matching crates for `crateresolve1`\n+error[E0464]: multiple candidates for `rlib` dependency `crateresolve1` found\n   --> $DIR/E0464.rs:11:1\n    |\n LL | extern crate crateresolve1;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: candidates:\n-           crate `crateresolve1`: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-1.somelib\n-           crate `crateresolve1`: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-2.somelib\n-           crate `crateresolve1`: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-3.somelib\n+   = note: candidate #1: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-1.somelib\n+   = note: candidate #2: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-2.somelib\n+   = note: candidate #3: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-3.somelib\n \n error: aborting due to previous error\n "}, {"sha": "bd9c8483ec29ed171d7625d4bb7c654a51470738", "filename": "src/test/ui/error-codes/auxiliary/crateresolve1-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-1.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,4 +1,5 @@\n // compile-flags:-C extra-filename=-1\n+// no-prefer-dynamic\n #![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "bd0f08f45b633ce778d9136ce622a64664b4863a", "filename": "src/test/ui/error-codes/auxiliary/crateresolve1-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-2.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,4 +1,5 @@\n // compile-flags:-C extra-filename=-2\n+// no-prefer-dynamic\n #![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "1226c2fbb461eee92efa1ada48802562eed83ff1", "filename": "src/test/ui/error-codes/auxiliary/crateresolve1-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-3.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -1,4 +1,5 @@\n // compile-flags:-C extra-filename=-3\n+// no-prefer-dynamic\n #![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n "}, {"sha": "3f060e437aca7ac72a0c3404da445637c81afad6", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b64a97f52162f965bc201e47f0af8279ca65d/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=574b64a97f52162f965bc201e47f0af8279ca65d", "patch": "@@ -11,8 +11,8 @@ use regex::Regex;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0313\", \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\",\n-    \"E0729\", \"E0789\",\n+    \"E0313\", \"E0461\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0789\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}