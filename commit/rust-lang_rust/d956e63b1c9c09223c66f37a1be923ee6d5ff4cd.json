{"sha": "d956e63b1c9c09223c66f37a1be923ee6d5ff4cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTZlNjNiMWM5YzA5MjIzYzY2ZjM3YTFiZTkyM2VlNmQ1ZmY0Y2Q=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-08T07:02:04Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-08T07:02:04Z"}, "message": "Reverted for-loop, it messes up type inference", "tree": {"sha": "6e5e6137dc852333a5bb8c36d5cf172ded7d75b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5e6137dc852333a5bb8c36d5cf172ded7d75b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d956e63b1c9c09223c66f37a1be923ee6d5ff4cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d956e63b1c9c09223c66f37a1be923ee6d5ff4cd", "html_url": "https://github.com/rust-lang/rust/commit/d956e63b1c9c09223c66f37a1be923ee6d5ff4cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d956e63b1c9c09223c66f37a1be923ee6d5ff4cd/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c87c3530cd85bdaebc528302258b2a83685f87b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c87c3530cd85bdaebc528302258b2a83685f87b", "html_url": "https://github.com/rust-lang/rust/commit/1c87c3530cd85bdaebc528302258b2a83685f87b"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "c1ba1260f67e120fdd058c04f6fbf68fc0f13b4a", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d956e63b1c9c09223c66f37a1be923ee6d5ff4cd/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d956e63b1c9c09223c66f37a1be923ee6d5ff4cd/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=d956e63b1c9c09223c66f37a1be923ee6d5ff4cd", "patch": "@@ -168,7 +168,8 @@ impl Stats for [f64] {\n             let mut j = 0;\n             // This inner loop applies `hi`/`lo` summation to each\n             // partial so that the list of partial sums remains exact.\n-            for mut y in &mut partials {\n+            for i in 0..partials.len() {\n+                let mut y: f64 = partials[i];\n                 if x.abs() < y.abs() {\n                     mem::swap(&mut x, &mut y);\n                 }"}]}