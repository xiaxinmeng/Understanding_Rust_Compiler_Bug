{"sha": "cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNmVmODBmYTRiMDRhZDgyNDcwOTFjMTliMmMzODBjN2ZjNTMwNmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-12T03:44:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-12T03:44:44Z"}, "message": "Rollup merge of #23275 - aochagavia:constants, r=eddyb\n\n Fixes #23260\n\nr? @eddyb", "tree": {"sha": "76dee933ea471c59e338c5c8263215e560a65620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76dee933ea471c59e338c5c8263215e560a65620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "html_url": "https://github.com/rust-lang/rust/commit/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e5640a6e189004c81417902a94242074acf530", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e5640a6e189004c81417902a94242074acf530", "html_url": "https://github.com/rust-lang/rust/commit/e4e5640a6e189004c81417902a94242074acf530"}, {"sha": "a83db812385f9bf281078c7c8ede44f6863f2966", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83db812385f9bf281078c7c8ede44f6863f2966", "html_url": "https://github.com/rust-lang/rust/commit/a83db812385f9bf281078c7c8ede44f6863f2966"}], "stats": {"total": 129, "additions": 90, "deletions": 39}, "files": [{"sha": "96433729a9b96ff675d29d4d7f8183b3a380cf4c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 57, "deletions": 24, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "patch": "@@ -17,7 +17,7 @@ use metadata::csearch;\n use middle::{astencode, def};\n use middle::pat_util::def_to_path;\n use middle::ty::{self, Ty};\n-use middle::astconv_util::{ast_ty_to_prim_ty};\n+use middle::astconv_util::ast_ty_to_prim_ty;\n \n use syntax::ast::{self, Expr};\n use syntax::codemap::Span;\n@@ -132,16 +132,16 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n     }\n }\n \n-// FIXME (#33): this doesn't handle big integer/float literals correctly\n-// (nor does the rest of our literal handling).\n #[derive(Clone, PartialEq)]\n pub enum const_val {\n     const_float(f64),\n     const_int(i64),\n     const_uint(u64),\n     const_str(InternedString),\n-    const_binary(Rc<Vec<u8> >),\n-    const_bool(bool)\n+    const_binary(Rc<Vec<u8>>),\n+    const_bool(bool),\n+    Struct(ast::NodeId),\n+    Tuple(ast::NodeId)\n }\n \n pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<ast::Pat> {\n@@ -226,9 +226,13 @@ pub enum ErrKind {\n     NegateOnString,\n     NegateOnBoolean,\n     NegateOnBinary,\n+    NegateOnStruct,\n+    NegateOnTuple,\n     NotOnFloat,\n     NotOnString,\n     NotOnBinary,\n+    NotOnStruct,\n+    NotOnTuple,\n \n     AddiWithOverflow(i64, i64),\n     SubiWithOverflow(i64, i64),\n@@ -242,7 +246,8 @@ pub enum ErrKind {\n     ModuloWithOverflow,\n     MissingStructField,\n     NonConstPath,\n-    NonConstStruct,\n+    ExpectedConstTuple,\n+    ExpectedConstStruct,\n     TupleIndexOutOfBounds,\n \n     MiscBinaryOp,\n@@ -262,9 +267,13 @@ impl ConstEvalErr {\n             NegateOnString => \"negate on string\".into_cow(),\n             NegateOnBoolean => \"negate on boolean\".into_cow(),\n             NegateOnBinary => \"negate on binary literal\".into_cow(),\n+            NegateOnStruct => \"negate on struct\".into_cow(),\n+            NegateOnTuple => \"negate on tuple\".into_cow(),\n             NotOnFloat => \"not on float or string\".into_cow(),\n             NotOnString => \"not on float or string\".into_cow(),\n             NotOnBinary => \"not on binary literal\".into_cow(),\n+            NotOnStruct => \"not on struct\".into_cow(),\n+            NotOnTuple => \"not on tuple\".into_cow(),\n \n             AddiWithOverflow(..) => \"attempted to add with overflow\".into_cow(),\n             SubiWithOverflow(..) => \"attempted to sub with overflow\".into_cow(),\n@@ -278,7 +287,8 @@ impl ConstEvalErr {\n             ModuloWithOverflow   => \"attempted remainder with overflow\".into_cow(),\n             MissingStructField  => \"nonexistent struct field\".into_cow(),\n             NonConstPath        => \"non-constant path in constant expr\".into_cow(),\n-            NonConstStruct      => \"non-constant struct in constant expr\".into_cow(),\n+            ExpectedConstTuple => \"expected constant tuple\".into_cow(),\n+            ExpectedConstStruct => \"expected constant struct\".into_cow(),\n             TupleIndexOutOfBounds => \"tuple index out of bounds\".into_cow(),\n \n             MiscBinaryOp => \"bad operands for binary\".into_cow(),\n@@ -341,6 +351,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           const_str(_) => signal!(e, NegateOnString),\n           const_bool(_) => signal!(e, NegateOnBoolean),\n           const_binary(_) => signal!(e, NegateOnBinary),\n+          const_val::Tuple(_) => signal!(e, NegateOnTuple),\n+          const_val::Struct(..) => signal!(e, NegateOnStruct),\n         }\n       }\n       ast::ExprUnary(ast::UnNot, ref inner) => {\n@@ -351,6 +363,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           const_str(_) => signal!(e, NotOnString),\n           const_float(_) => signal!(e, NotOnFloat),\n           const_binary(_) => signal!(e, NotOnBinary),\n+          const_val::Tuple(_) => signal!(e, NotOnTuple),\n+          const_val::Struct(..) => signal!(e, NotOnStruct),\n         }\n       }\n       ast::ExprBinary(op, ref a, ref b) => {\n@@ -540,33 +554,52 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             None => const_int(0)\n         }\n       }\n+      ast::ExprTup(_) => {\n+        const_val::Tuple(e.id)\n+      }\n+      ast::ExprStruct(..) => {\n+        const_val::Struct(e.id)\n+      }\n       ast::ExprTupField(ref base, index) => {\n-        // Get the base tuple if it is constant\n-        if let Some(&ast::ExprTup(ref fields)) = lookup_const(tcx, &**base).map(|s| &s.node) {\n-            // Check that the given index is within bounds and evaluate its value\n-            if fields.len() > index.node {\n-                return eval_const_expr_partial(tcx, &*fields[index.node], None);\n+        if let Ok(c) = eval_const_expr_partial(tcx, base, None) {\n+            if let const_val::Tuple(tup_id) = c {\n+                if let ast::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n+                    if index.node < fields.len() {\n+                        return eval_const_expr_partial(tcx, &fields[index.node], None)\n+                    } else {\n+                        signal!(e, TupleIndexOutOfBounds);\n+                    }\n+                } else {\n+                    unreachable!()\n+                }\n             } else {\n-                signal!(e, TupleIndexOutOfBounds);\n+                signal!(base, ExpectedConstTuple);\n             }\n+        } else {\n+            signal!(base, NonConstPath)\n         }\n-\n-        signal!(e, NonConstStruct);\n       }\n       ast::ExprField(ref base, field_name) => {\n         // Get the base expression if it is a struct and it is constant\n-        if let Some(&ast::ExprStruct(_, ref fields, _)) = lookup_const(tcx, &**base)\n-                                                            .map(|s| &s.node) {\n-            // Check that the given field exists and evaluate it\n-            if let Some(f) = fields.iter().find(|f|\n-                                           f.ident.node.as_str() == field_name.node.as_str()) {\n-                return eval_const_expr_partial(tcx, &*f.expr, None);\n+        if let Ok(c) = eval_const_expr_partial(tcx, base, None) {\n+            if let const_val::Struct(struct_id) = c {\n+                if let ast::ExprStruct(_, ref fields, _) = tcx.map.expect_expr(struct_id).node {\n+                    // Check that the given field exists and evaluate it\n+                    if let Some(f) = fields.iter().find(|f| f.ident.node.as_str()\n+                                                         == field_name.node.as_str()) {\n+                        return eval_const_expr_partial(tcx, &*f.expr, None)\n+                    } else {\n+                        signal!(e, MissingStructField);\n+                    }\n+                } else {\n+                    unreachable!()\n+                }\n             } else {\n-                signal!(e, MissingStructField);\n+                signal!(base, ExpectedConstStruct);\n             }\n+        } else {\n+            signal!(base, NonConstPath);\n         }\n-\n-        signal!(e, NonConstStruct);\n       }\n       _ => signal!(e, MiscCatchAll)\n     };"}, {"sha": "a871602b86519f47d6ab3520fb7b09aa042b59d6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "patch": "@@ -5853,16 +5853,13 @@ pub fn eval_repeat_count(tcx: &ctxt, count_expr: &ast::Expr) -> uint {\n             let found = match val {\n                 const_eval::const_uint(count) => return count as uint,\n                 const_eval::const_int(count) if count >= 0 => return count as uint,\n-                const_eval::const_int(_) =>\n-                    \"negative integer\",\n-                const_eval::const_float(_) =>\n-                    \"float\",\n-                const_eval::const_str(_) =>\n-                    \"string\",\n-                const_eval::const_bool(_) =>\n-                    \"boolean\",\n-                const_eval::const_binary(_) =>\n-                    \"binary array\"\n+                const_eval::const_int(_) => \"negative integer\",\n+                const_eval::const_float(_) => \"float\",\n+                const_eval::const_str(_) => \"string\",\n+                const_eval::const_bool(_) => \"boolean\",\n+                const_eval::const_binary(_) => \"binary array\",\n+                const_eval::Struct(..) => \"struct\",\n+                const_eval::Tuple(_) => \"tuple\"\n             };\n             span_err!(tcx.sess, count_expr.span, E0306,\n                 \"expected positive integer for repeat count, found {}\","}, {"sha": "121581412202cdc882e168f51372689d7803408e", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "patch": "@@ -19,7 +19,7 @@ fn main() {\n //~| found `()`\n //~| expected usize\n //~| found ()\n-//~| ERROR expected constant integer for repeat count, found non-constant expression\n+//~| ERROR expected positive integer for repeat count, found tuple\n     let c = [0; true];\n     //~^ ERROR mismatched types\n     //~| expected `usize`"}, {"sha": "35e053110dfc7ec2be2e5c9fb83fffa2d29dccf0", "filename": "src/test/run-pass/issue-19244.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6ef80fa4b04ad8247091c19b2c380c7fc5306a/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19244.rs?ref=cc6ef80fa4b04ad8247091c19b2c380c7fc5306a", "patch": "@@ -8,14 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct MyStruct { field: uint }\n+struct MyStruct { field: usize }\n+struct Nested { nested: MyStruct }\n+struct Mix2 { nested: ((usize,),) }\n+\n const STRUCT: MyStruct = MyStruct { field: 42 };\n-const TUP: (uint,) = (43,);\n+const TUP: (usize,) = (43,);\n+const NESTED_S: Nested = Nested { nested: MyStruct { field: 5 } };\n+const NESTED_T: ((usize,),) = ((4,),);\n+const MIX_1: ((Nested,),) = ((Nested { nested: MyStruct { field: 3 } },),);\n+const MIX_2: Mix2 = Mix2 { nested: ((2,),) };\n+const INSTANT_1: usize = (MyStruct { field: 1 }).field;\n+const INSTANT_2: usize = (0,).0;\n \n fn main() {\n     let a = [0; STRUCT.field];\n     let b = [0; TUP.0];\n+    let c = [0; NESTED_S.nested.field];\n+    let d = [0; (NESTED_T.0).0];\n+    let e = [0; (MIX_1.0).0.nested.field];\n+    let f = [0; (MIX_2.nested.0).0];\n+    let g = [0; INSTANT_1];\n+    let h = [0; INSTANT_2];\n \n-    assert!(a.len() == 42);\n-    assert!(b.len() == 43);\n+    assert_eq!(a.len(), 42);\n+    assert_eq!(b.len(), 43);\n+    assert_eq!(c.len(), 5);\n+    assert_eq!(d.len(), 4);\n+    assert_eq!(e.len(), 3);\n+    assert_eq!(f.len(), 2);\n+    assert_eq!(g.len(), 1);\n+    assert_eq!(h.len(), 0);\n }"}]}