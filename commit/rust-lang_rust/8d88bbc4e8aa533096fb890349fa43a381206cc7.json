{"sha": "8d88bbc4e8aa533096fb890349fa43a381206cc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODhiYmM0ZThhYTUzMzA5NmZiODkwMzQ5ZmE0M2EzODEyMDZjYzc=", "commit": {"author": {"name": "Curtis McEnroe", "email": "programble@gmail.com", "date": "2016-12-30T18:50:11Z"}, "committer": {"name": "Curtis McEnroe", "email": "programble@gmail.com", "date": "2016-12-30T18:55:38Z"}, "message": "Add links to methods on all slice iterator struct docs", "tree": {"sha": "3be3a5feaf1642e71348ef63e41d23b48ad3a6bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3be3a5feaf1642e71348ef63e41d23b48ad3a6bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d88bbc4e8aa533096fb890349fa43a381206cc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYZq2/AAoJEM6i+Xrc/Nd8xaEP/1Nx4bgC12HcWFbAmgRHv2op\nNjSxWp+6Bq1Y64RZZS9ugi2fpPrn7TrYf5byMoRXUIXvq6/5FaMjA7dEiJAZl3F1\nwrK7YMj0joHucJnPwkkipVHIjdzvvU5YUYwFf0vRihwP7gwzWnQxTCH0bM/rYWlT\nVCSZLS0CiwQ4SfrOeSKslbtWy1Peqs9M1X2LWu4eQDHDfMHP2xyKKX5TXj/hdPvK\nTLGIGyiuSwlpEb55dtuWjcuy823OcAXH3zkMhw03pOH851G92aEGvvSpAl9tSYLG\nYszrmxbnYxEWzjkAf7YzzdZU1eDYAIWN4NHA7CYKVxvgdpQpYWh1z7ZzosQwVIRn\n9GkpIcd2fUmgLd+8KZbqyukXiy23LtCTvPnP46WeRO8tbiU2vJ4Ov+PYHlPVXh+C\nqRDCbk0+8a4aGAhgFNFVMYtgwscwVf/jrV0XbIUV/avTD82zxIwj/oXIs1U9Sk7C\nFLup4g2nRaSSQr/qr3LkhFRANwbNwERx2pDd+VlPOziqCaAdnv6B93WBbQ2VziH6\nSgoD4tJ0Eqesaumf64+VMlj4vt7ihQrL/zAk30oAA0gvkgbccPjKh1hf3q3oPIRL\nzu3aHJiSe3X1ON13yhbyS7zY2M7YChOvYfHS/p2jtfu9sI/PzT5ijHtKcB2I4NcC\nKBGfMWPmdVb2T3DFcMoC\n=Wr+7\n-----END PGP SIGNATURE-----", "payload": "tree 3be3a5feaf1642e71348ef63e41d23b48ad3a6bd\nparent 7f2d2afa9196ba6314a29e58d5324dbd9923c75e\nauthor Curtis McEnroe <programble@gmail.com> 1483123811 -0500\ncommitter Curtis McEnroe <programble@gmail.com> 1483124138 -0500\n\nAdd links to methods on all slice iterator struct docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d88bbc4e8aa533096fb890349fa43a381206cc7", "html_url": "https://github.com/rust-lang/rust/commit/8d88bbc4e8aa533096fb890349fa43a381206cc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d88bbc4e8aa533096fb890349fa43a381206cc7/comments", "author": {"login": "causal-agent", "id": 166462, "node_id": "MDQ6VXNlcjE2NjQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/166462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/causal-agent", "html_url": "https://github.com/causal-agent", "followers_url": "https://api.github.com/users/causal-agent/followers", "following_url": "https://api.github.com/users/causal-agent/following{/other_user}", "gists_url": "https://api.github.com/users/causal-agent/gists{/gist_id}", "starred_url": "https://api.github.com/users/causal-agent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/causal-agent/subscriptions", "organizations_url": "https://api.github.com/users/causal-agent/orgs", "repos_url": "https://api.github.com/users/causal-agent/repos", "events_url": "https://api.github.com/users/causal-agent/events{/privacy}", "received_events_url": "https://api.github.com/users/causal-agent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "causal-agent", "id": 166462, "node_id": "MDQ6VXNlcjE2NjQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/166462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/causal-agent", "html_url": "https://github.com/causal-agent", "followers_url": "https://api.github.com/users/causal-agent/followers", "following_url": "https://api.github.com/users/causal-agent/following{/other_user}", "gists_url": "https://api.github.com/users/causal-agent/gists{/gist_id}", "starred_url": "https://api.github.com/users/causal-agent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/causal-agent/subscriptions", "organizations_url": "https://api.github.com/users/causal-agent/orgs", "repos_url": "https://api.github.com/users/causal-agent/repos", "events_url": "https://api.github.com/users/causal-agent/events{/privacy}", "received_events_url": "https://api.github.com/users/causal-agent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2d2afa9196ba6314a29e58d5324dbd9923c75e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2d2afa9196ba6314a29e58d5324dbd9923c75e", "html_url": "https://github.com/rust-lang/rust/commit/7f2d2afa9196ba6314a29e58d5324dbd9923c75e"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "4d4c5129e602d54c42048705c3b44017dda7d687", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8d88bbc4e8aa533096fb890349fa43a381206cc7/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d88bbc4e8aa533096fb890349fa43a381206cc7/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=8d88bbc4e8aa533096fb890349fa43a381206cc7", "patch": "@@ -1301,6 +1301,11 @@ trait SplitIter: DoubleEndedIterator {\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function.\n+///\n+/// This struct is created by the [`split`] method on [slices].\n+///\n+/// [`split`]: ../../std/primitive.slice.html#method.split\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     v: &'a [T],\n@@ -1387,6 +1392,11 @@ impl<'a, T, P> FusedIterator for Split<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n+///\n+/// This struct is created by the [`split_mut`] method on [slices].\n+///\n+/// [`split_mut`]: ../../std/primitive.slice.html#method.split_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     v: &'a mut [T],\n@@ -1512,6 +1522,11 @@ impl<T, I: SplitIter<Item=T>> Iterator for GenericSplitN<I> {\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, limited to a given number of splits.\n+///\n+/// This struct is created by the [`splitn`] method on [slices].\n+///\n+/// [`splitn`]: ../../std/primitive.slice.html#method.splitn\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n@@ -1529,6 +1544,11 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitN<'a, T, P> where P: FnMut(&\n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n+///\n+/// This struct is created by the [`rsplitn`] method on [slices].\n+///\n+/// [`rsplitn`]: ../../std/primitive.slice.html#method.rsplitn\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n@@ -1545,6 +1565,11 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitN<'a, T, P> where P: FnMut(\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, limited to a given number of splits.\n+///\n+/// This struct is created by the [`splitn_mut`] method on [slices].\n+///\n+/// [`splitn_mut`]: ../../std/primitive.slice.html#method.splitn_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n@@ -1562,6 +1587,11 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitNMut<'a, T, P> where P: FnMu\n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n+///\n+/// This struct is created by the [`rsplitn_mut`] method on [slices].\n+///\n+/// [`rsplitn_mut`]: ../../std/primitive.slice.html#method.rsplitn_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n@@ -1607,6 +1637,11 @@ forward_iterator! { SplitNMut: T, &'a mut [T] }\n forward_iterator! { RSplitNMut: T, &'a mut [T] }\n \n /// An iterator over overlapping subslices of length `size`.\n+///\n+/// This struct is created by the [`windows`] method on [slices].\n+///\n+/// [`windows`]: ../../std/primitive.slice.html#method.windows\n+/// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Windows<'a, T:'a> {\n@@ -1704,6 +1739,11 @@ impl<'a, T> FusedIterator for Windows<'a, T> {}\n ///\n /// When the slice len is not evenly divided by the chunk size, the last slice\n /// of the iteration will be the remainder.\n+///\n+/// This struct is created by the [`chunks`] method on [slices].\n+///\n+/// [`chunks`]: ../../std/primitive.slice.html#method.chunks\n+/// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chunks<'a, T:'a> {\n@@ -1808,6 +1848,11 @@ impl<'a, T> FusedIterator for Chunks<'a, T> {}\n /// An iterator over a slice in (non-overlapping) mutable chunks (`size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n+///\n+/// This struct is created by the [`chunks_mut`] method on [slices].\n+///\n+/// [`chunks_mut`]: ../../std/primitive.slice.html#method.chunks_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ChunksMut<'a, T:'a> {"}]}