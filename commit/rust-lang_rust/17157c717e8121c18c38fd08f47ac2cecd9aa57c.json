{"sha": "17157c717e8121c18c38fd08f47ac2cecd9aa57c", "node_id": "C_kwDOAAsO6NoAKDE3MTU3YzcxN2U4MTIxYzE4YzM4ZmQwOGY0N2FjMmNlY2Q5YWE1N2M", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-09T16:26:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-09T16:26:28Z"}, "message": "Rollup merge of #95808 - petrochenkov:fragspec, r=nnethercote\n\nexpand: Remove `ParseSess::missing_fragment_specifiers`\n\nIt was used for deduplicating some errors for legacy code which are mostly deduplicated even without that, but at cost of global mutable state, which is not a good tradeoff.\n\ncc https://github.com/rust-lang/rust/pull/95747#issuecomment-1091619403\nr? ``@nnethercote``", "tree": {"sha": "e92a54ae727d10a077f896f2ab3fdbd79545333d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e92a54ae727d10a077f896f2ab3fdbd79545333d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17157c717e8121c18c38fd08f47ac2cecd9aa57c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUbO0CRBK7hj4Ov3rIwAAA9QIAJYl+R8Xx//y4jo6xGN/7IR0\nwd8MqA/4VRfwrODZAxPViWZCtY4FO7QsSlaF/ov3QMn+d1KFAUmS3775xFMwZJso\n+ZsVaEDutdpkWxHlfWZovW2sSS9YBJlbpdSzag8TZkj+uOakoOoMaofjkEvGmIxF\nCDyqgAO8eCtwFzeQFy4mnoUVuKaamic1SrEBkgjOXDXwqggGgSlZUTWJed/AtG+B\nnhParv0e6YhJBdRrWML3Eiew67wRxL/tQemBCFiPZgl9uhWFc8tneIBHUkncnhRA\nZw+4BwWNYi4kKBjj82jMPA5zWKM5unClo0dBL35U0VR7D1d9zli61LC5EvEe1m8=\n=vZLw\n-----END PGP SIGNATURE-----\n", "payload": "tree e92a54ae727d10a077f896f2ab3fdbd79545333d\nparent 50929460419d5235c17e61773b18376f41a88a04\nparent 379ae12a1dfc26ba58607be7f83a3e7f24550a84\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649521588 +0200\ncommitter GitHub <noreply@github.com> 1649521588 +0200\n\nRollup merge of #95808 - petrochenkov:fragspec, r=nnethercote\n\nexpand: Remove `ParseSess::missing_fragment_specifiers`\n\nIt was used for deduplicating some errors for legacy code which are mostly deduplicated even without that, but at cost of global mutable state, which is not a good tradeoff.\n\ncc https://github.com/rust-lang/rust/pull/95747#issuecomment-1091619403\nr? ``@nnethercote``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17157c717e8121c18c38fd08f47ac2cecd9aa57c", "html_url": "https://github.com/rust-lang/rust/commit/17157c717e8121c18c38fd08f47ac2cecd9aa57c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17157c717e8121c18c38fd08f47ac2cecd9aa57c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50929460419d5235c17e61773b18376f41a88a04", "url": "https://api.github.com/repos/rust-lang/rust/commits/50929460419d5235c17e61773b18376f41a88a04", "html_url": "https://github.com/rust-lang/rust/commit/50929460419d5235c17e61773b18376f41a88a04"}, {"sha": "379ae12a1dfc26ba58607be7f83a3e7f24550a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/379ae12a1dfc26ba58607be7f83a3e7f24550a84", "html_url": "https://github.com/rust-lang/rust/commit/379ae12a1dfc26ba58607be7f83a3e7f24550a84"}], "stats": {"total": 184, "additions": 137, "deletions": 47}, "files": [{"sha": "4298475767e6f7bd03deb95a948cea660fbf5a0c", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -110,7 +110,7 @@ use rustc_ast::token::{DelimToken, Token, TokenKind};\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::MultiSpan;\n-use rustc_session::lint::builtin::META_VARIABLE_MISUSE;\n+use rustc_session::lint::builtin::{META_VARIABLE_MISUSE, MISSING_FRAGMENT_SPECIFIER};\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::kw;\n use rustc_span::{symbol::MacroRulesNormalizedIdent, Span};\n@@ -261,7 +261,18 @@ fn check_binders(\n             }\n         }\n         // Similarly, this can only happen when checking a toplevel macro.\n-        TokenTree::MetaVarDecl(span, name, _kind) => {\n+        TokenTree::MetaVarDecl(span, name, kind) => {\n+            if kind.is_none() && node_id != DUMMY_NODE_ID {\n+                // FIXME: Report this as a hard error eventually and remove equivalent errors from\n+                // `parse_tt_inner` and `nameize`. Until then the error may be reported twice, once\n+                // as a hard error and then once as a buffered lint.\n+                sess.buffer_lint(\n+                    MISSING_FRAGMENT_SPECIFIER,\n+                    span,\n+                    node_id,\n+                    &format!(\"missing fragment specifier\"),\n+                );\n+            }\n             if !macros.is_empty() {\n                 sess.span_diagnostic.span_bug(span, \"unexpected MetaVarDecl in nested lhs\");\n             }"}, {"sha": "ce243b4a672726f6b42b63e6e42f595649234c46", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -411,7 +411,6 @@ impl TtParser {\n     /// track of through the mps generated.\n     fn parse_tt_inner(\n         &mut self,\n-        sess: &ParseSess,\n         matcher: &[MatcherLoc],\n         token: &Token,\n     ) -> Option<NamedParseResult> {\n@@ -519,11 +518,9 @@ impl TtParser {\n                             self.bb_mps.push(mp);\n                         }\n                     } else {\n+                        // E.g. `$e` instead of `$e:expr`, reported as a hard error if actually used.\n                         // Both this check and the one in `nameize` are necessary, surprisingly.\n-                        if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {\n-                            // E.g. `$e` instead of `$e:expr`.\n-                            return Some(Error(span, \"missing fragment specifier\".to_string()));\n-                        }\n+                        return Some(Error(span, \"missing fragment specifier\".to_string()));\n                     }\n                 }\n                 MatcherLoc::Eof => {\n@@ -549,7 +546,7 @@ impl TtParser {\n                     // Need to take ownership of the matches from within the `Lrc`.\n                     Lrc::make_mut(&mut eof_mp.matches);\n                     let matches = Lrc::try_unwrap(eof_mp.matches).unwrap().into_iter();\n-                    self.nameize(sess, matcher, matches)\n+                    self.nameize(matcher, matches)\n                 }\n                 EofMatcherPositions::Multiple => {\n                     Error(token.span, \"ambiguity: multiple successful parses\".to_string())\n@@ -587,7 +584,7 @@ impl TtParser {\n \n             // Process `cur_mps` until either we have finished the input or we need to get some\n             // parsing from the black-box parser done.\n-            if let Some(res) = self.parse_tt_inner(&parser.sess, matcher, &parser.token) {\n+            if let Some(res) = self.parse_tt_inner(matcher, &parser.token) {\n                 return res;\n             }\n \n@@ -694,7 +691,6 @@ impl TtParser {\n \n     fn nameize<I: Iterator<Item = NamedMatch>>(\n         &self,\n-        sess: &ParseSess,\n         matcher: &[MatcherLoc],\n         mut res: I,\n     ) -> NamedParseResult {\n@@ -711,11 +707,9 @@ impl TtParser {\n                         }\n                     };\n                 } else {\n+                    // E.g. `$e` instead of `$e:expr`, reported as a hard error if actually used.\n                     // Both this check and the one in `parse_tt_inner` are necessary, surprisingly.\n-                    if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {\n-                        // E.g. `$e` instead of `$e:expr`.\n-                        return Error(span, \"missing fragment specifier\".to_string());\n-                    }\n+                    return Error(span, \"missing fragment specifier\".to_string());\n                 }\n             }\n         }"}, {"sha": "024299fbd9c01f353eca515ae8e6823518ac8fe6", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -2,8 +2,7 @@ use crate::mbe::macro_parser::count_metavar_decls;\n use crate::mbe::{Delimited, KleeneOp, KleeneToken, MetaVarExpr, SequenceRepetition, TokenTree};\n \n use rustc_ast::token::{self, Token};\n-use rustc_ast::tokenstream;\n-use rustc_ast::{NodeId, DUMMY_NODE_ID};\n+use rustc_ast::{tokenstream, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_feature::Features;\n use rustc_session::parse::{feature_err, ParseSess};\n@@ -104,10 +103,7 @@ pub(super) fn parse(\n                     }\n                     tree => tree.as_ref().map_or(start_sp, tokenstream::TokenTree::span),\n                 };\n-                if node_id != DUMMY_NODE_ID {\n-                    // Macros loaded from other crates have dummy node ids.\n-                    sess.missing_fragment_specifiers.borrow_mut().insert(span, node_id);\n-                }\n+\n                 result.push(TokenTree::MetaVarDecl(span, ident, None));\n             }\n "}, {"sha": "2a01b677e33bf7e47cd4ec5e4b1a4c387bbe0666", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -30,7 +30,6 @@ use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_serialize::json;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn};\n-use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -349,23 +348,8 @@ pub fn configure_and_expand(\n             ecx.check_unused_macros();\n         });\n \n-        let mut missing_fragment_specifiers: Vec<_> = ecx\n-            .sess\n-            .parse_sess\n-            .missing_fragment_specifiers\n-            .borrow()\n-            .iter()\n-            .map(|(span, node_id)| (*span, *node_id))\n-            .collect();\n-        missing_fragment_specifiers.sort_unstable_by_key(|(span, _)| *span);\n-\n         let recursion_limit_hit = ecx.reduced_recursion_limit.is_some();\n \n-        for (span, node_id) in missing_fragment_specifiers {\n-            let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n-            let msg = \"missing fragment specifier\";\n-            resolver.lint_buffer().buffer_lint(lint, node_id, span, msg);\n-        }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }"}, {"sha": "1fa180b320cd8d11b3f11e0a8b740fe63116e39b", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -140,7 +140,6 @@ pub struct ParseSess {\n     pub config: CrateConfig,\n     pub check_config: CrateCheckConfig,\n     pub edition: Edition,\n-    pub missing_fragment_specifiers: Lock<FxHashMap<Span, NodeId>>,\n     /// Places where raw identifiers were used. This is used to avoid complaining about idents\n     /// clashing with keywords in new editions.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n@@ -195,7 +194,6 @@ impl ParseSess {\n             config: FxHashSet::default(),\n             check_config: CrateCheckConfig::default(),\n             edition: ExpnId::root().expn_data().edition,\n-            missing_fragment_specifiers: Default::default(),\n             raw_identifier_spans: Lock::new(Vec::new()),\n             bad_unicode_identifiers: Lock::new(Default::default()),\n             source_map,"}, {"sha": "5d9eb55fee0366a96842811bffe0999338d7c129", "filename": "src/test/ui/macros/macro-match-nonterminal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -2,6 +2,8 @@ macro_rules! test {\n     ($a, $b) => {\n         //~^ ERROR missing fragment\n         //~| ERROR missing fragment\n+        //~| ERROR missing fragment\n+        //~| WARN this was previously accepted\n         //~| WARN this was previously accepted\n         ()\n     };"}, {"sha": "48b9bc6ff6ae08000c62785285369b9c9e880bed", "filename": "src/test/ui/macros/macro-match-nonterminal.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -4,15 +4,24 @@ error: missing fragment specifier\n LL |     ($a, $b) => {\n    |        ^\n \n+error: missing fragment specifier\n+  --> $DIR/macro-match-nonterminal.rs:2:8\n+   |\n+LL |     ($a, $b) => {\n+   |        ^\n+   |\n+   = note: `#[deny(missing_fragment_specifier)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n+\n error: missing fragment specifier\n   --> $DIR/macro-match-nonterminal.rs:2:10\n    |\n LL |     ($a, $b) => {\n    |          ^^\n    |\n-   = note: `#[deny(missing_fragment_specifier)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "c1e6ba7464772144eb9e43aa61772619e4a5b429", "filename": "src/test/ui/macros/macro-missing-fragment-deduplication.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment-deduplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment-deduplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment-deduplication.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n+\n+macro_rules! m {\n+    ($name) => {}\n+    //~^ ERROR missing fragment\n+    //~| ERROR missing fragment\n+    //~| WARN this was previously accepted\n+}\n+\n+fn main() {\n+    m!();\n+    m!();\n+    m!();\n+    m!();\n+}"}, {"sha": "7622ca054c8ab5bfd12aebfbad97449adf28dfa8", "filename": "src/test/ui/macros/macro-missing-fragment-deduplication.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment-deduplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment-deduplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment-deduplication.stderr?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -0,0 +1,18 @@\n+error: missing fragment specifier\n+  --> $DIR/macro-missing-fragment-deduplication.rs:4:6\n+   |\n+LL |     ($name) => {}\n+   |      ^^^^^\n+\n+error: missing fragment specifier\n+  --> $DIR/macro-missing-fragment-deduplication.rs:4:6\n+   |\n+LL |     ($name) => {}\n+   |      ^^^^^\n+   |\n+   = note: `#[deny(missing_fragment_specifier)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "210c85ebbf2f336b53b75778fcb4be84817009d5", "filename": "src/test/ui/macros/macro-missing-fragment.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -1,7 +1,26 @@\n-macro_rules! m {\n-    ( $( any_token $field_rust_type )* ) => {}; //~ ERROR missing fragment\n+#![warn(missing_fragment_specifier)]\n+\n+macro_rules! used_arm {\n+    ( $( any_token $field_rust_type )* ) => {};\n+    //~^ ERROR missing fragment\n+    //~| WARN missing fragment\n+    //~| WARN this was previously accepted\n+}\n+\n+macro_rules! used_macro_unused_arm {\n+    () => {};\n+    ( $name ) => {};\n+    //~^ WARN missing fragment\n+    //~| WARN this was previously accepted\n+}\n+\n+macro_rules! unused_macro {\n+    ( $name ) => {};\n+    //~^ WARN missing fragment\n+    //~| WARN this was previously accepted\n }\n \n fn main() {\n-    m!();\n+    used_arm!();\n+    used_macro_unused_arm!();\n }"}, {"sha": "1bf6f04ec7f14843124c6c0d32c3cc247f64cf08", "filename": "src/test/ui/macros/macro-missing-fragment.stderr", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-missing-fragment.stderr?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -1,8 +1,40 @@\n error: missing fragment specifier\n-  --> $DIR/macro-missing-fragment.rs:2:20\n+  --> $DIR/macro-missing-fragment.rs:4:20\n    |\n LL |     ( $( any_token $field_rust_type )* ) => {};\n    |                    ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+warning: missing fragment specifier\n+  --> $DIR/macro-missing-fragment.rs:4:20\n+   |\n+LL |     ( $( any_token $field_rust_type )* ) => {};\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/macro-missing-fragment.rs:1:9\n+   |\n+LL | #![warn(missing_fragment_specifier)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n+\n+warning: missing fragment specifier\n+  --> $DIR/macro-missing-fragment.rs:12:7\n+   |\n+LL |     ( $name ) => {};\n+   |       ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n+\n+warning: missing fragment specifier\n+  --> $DIR/macro-missing-fragment.rs:18:7\n+   |\n+LL |     ( $name ) => {};\n+   |       ^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n+\n+error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "069d181e96267a5ccd32c5e129d68bb3d930f76f", "filename": "src/test/ui/parser/macro/issue-33569.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -1,6 +1,8 @@\n macro_rules! foo {\n     { $+ } => { //~ ERROR expected identifier, found `+`\n                 //~^ ERROR missing fragment specifier\n+                //~| ERROR missing fragment specifier\n+                //~| WARN this was previously accepted\n         $(x)(y) //~ ERROR expected one of: `*`, `+`, or `?`\n     }\n }"}, {"sha": "39d49fd03f1bf41b7a8836f0dbe0dff72b0373b7", "filename": "src/test/ui/parser/macro/issue-33569.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17157c717e8121c18c38fd08f47ac2cecd9aa57c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr?ref=17157c717e8121c18c38fd08f47ac2cecd9aa57c", "patch": "@@ -5,7 +5,7 @@ LL |     { $+ } => {\n    |        ^\n \n error: expected one of: `*`, `+`, or `?`\n-  --> $DIR/issue-33569.rs:4:13\n+  --> $DIR/issue-33569.rs:6:13\n    |\n LL |         $(x)(y)\n    |             ^^^\n@@ -16,5 +16,15 @@ error: missing fragment specifier\n LL |     { $+ } => {\n    |        ^\n \n-error: aborting due to 3 previous errors\n+error: missing fragment specifier\n+  --> $DIR/issue-33569.rs:2:8\n+   |\n+LL |     { $+ } => {\n+   |        ^\n+   |\n+   = note: `#[deny(missing_fragment_specifier)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n+\n+error: aborting due to 4 previous errors\n "}]}