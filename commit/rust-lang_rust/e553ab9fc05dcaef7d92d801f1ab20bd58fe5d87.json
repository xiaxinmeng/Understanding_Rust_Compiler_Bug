{"sha": "e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTNhYjlmYzA1ZGNhZWY3ZDkyZDgwMWYxYWIyMGJkNThmZTVkODc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-07T20:15:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-07T20:15:38Z"}, "message": "Simplify type-mismatch messages.", "tree": {"sha": "ec7aae820fb7cbf6873af8dceef177872097601e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec7aae820fb7cbf6873af8dceef177872097601e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87", "html_url": "https://github.com/rust-lang/rust/commit/e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa5ef4cfb64d900a659f2e4380c8f2c8718f3826", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5ef4cfb64d900a659f2e4380c8f2c8718f3826", "html_url": "https://github.com/rust-lang/rust/commit/fa5ef4cfb64d900a659f2e4380c8f2c8718f3826"}], "stats": {"total": 163, "additions": 158, "deletions": 5}, "files": [{"sha": "d2d01f0a6b8bb7f0e615af0c00dbee47050a4c99", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 158, "deletions": 5, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=e553ab9fc05dcaef7d92d801f1ab20bd58fe5d87", "patch": "@@ -23,7 +23,7 @@ type fn_ctx = {\n   mutable fnctx_just_saw_ret: bool\n }\n \n-exception Type_error of string * Ast.ty\n+exception Type_error of string * string\n \n let log cx =\n   Session.log\n@@ -37,7 +37,159 @@ let iflog cx thunk =\n   else ()\n ;;\n \n-let type_error expected actual = raise (Type_error (expected, actual))\n+let head_only ty =\n+  match ty with\n+\n+      Ast.TY_tup _ -> \"tup(...)\"\n+    | Ast.TY_rec _ -> \"rec(...)\"\n+\n+    | Ast.TY_fn _ -> \"fn (...) -> ...\"\n+\n+    | Ast.TY_vec _ -> \"vec[...]\"\n+    | Ast.TY_chan _ -> \"chan[...]\"\n+    | Ast.TY_port _ -> \"port[...]\"\n+\n+    | Ast.TY_obj _ -> \"obj { ... }\"\n+    | Ast.TY_box _ -> \"@(...)\"\n+    | Ast.TY_mutable _ -> \"(mutable ...)\"\n+    | Ast.TY_constrained _ -> \"(... : <constrained>)\"\n+\n+    | _ -> Printf.sprintf \"%a\" Ast.sprintf_ty ty\n+;;\n+\n+\n+let rec rec_diff\n+    (a:Ast.ty_rec) (b:Ast.ty_rec)\n+    (abuf:Buffer.t) (bbuf:Buffer.t)\n+    : unit =\n+\n+  Buffer.add_string abuf \"rec(\";\n+  Buffer.add_string bbuf \"rec(\";\n+\n+  let rec append_first_diff buf a b i =\n+    let alen = Array.length a in\n+    let blen = Array.length b in\n+      if i >= alen\n+      then\n+        Buffer.add_string buf \"...)\"\n+      else\n+        if i >= blen\n+        then\n+          Printf.bprintf buf\n+            \"... <%d elements>)\" (blen - i)\n+        else\n+          let (alab, aty) = a.(i) in\n+          let (blab, bty) = b.(i) in\n+            if alab <> blab\n+            then\n+              Printf.bprintf buf \"... <ty> %s ...)\" alab\n+            else\n+              if aty <> bty\n+              then\n+                let (a,_) = summarize_difference aty bty in\n+                  Printf.bprintf buf \"... %s %s ...)\" a alab\n+              else\n+                append_first_diff buf a b (i+1)\n+  in\n+    append_first_diff abuf a b 0;\n+    append_first_diff bbuf b a 0;\n+    Buffer.add_string abuf \")\";\n+    Buffer.add_string bbuf \")\";\n+\n+\n+and tup_diff\n+    (a:Ast.ty_tup) (b:Ast.ty_tup)\n+    (abuf:Buffer.t) (bbuf:Buffer.t)\n+    : unit =\n+\n+  Buffer.add_string abuf \"tup(\";\n+  Buffer.add_string bbuf \"tup(\";\n+\n+  let rec append_first_diff buf a b i =\n+    let alen = Array.length a in\n+    let blen = Array.length b in\n+      if i >= alen\n+      then\n+        Buffer.add_string buf \"...)\"\n+      else\n+        if i >= blen\n+        then\n+          Printf.bprintf buf\n+            \"... <%d elements>)\" (blen - i)\n+        else\n+          let (aty) = a.(i) in\n+          let (bty) = b.(i) in\n+            if aty <> bty\n+            then\n+              let (a,_) = summarize_difference aty bty in\n+                Printf.bprintf buf \"... %s ...)\" a\n+            else\n+              append_first_diff buf a b (i+1)\n+  in\n+    append_first_diff abuf a b 0;\n+    append_first_diff bbuf b a 0;\n+    Buffer.add_string abuf \")\";\n+    Buffer.add_string bbuf \")\";\n+\n+\n+and summarize_difference (expected:Ast.ty) (actual:Ast.ty)\n+    : (string * string) =\n+  if expected = actual\n+  then (\"_\", \"_\")\n+  else\n+    begin\n+      let ebuf = Buffer.create 10 in\n+      let abuf = Buffer.create 10 in\n+\n+      let p s =\n+        Buffer.add_string ebuf s;\n+        Buffer.add_string abuf s\n+      in\n+\n+      let sub e a =\n+        let (e, a) = summarize_difference e a in\n+          Printf.bprintf ebuf \"%s\" e;\n+          Printf.bprintf abuf \"%s\" a;\n+      in\n+\n+        begin\n+          match expected, actual with\n+              (Ast.TY_tup etys,  Ast.TY_tup atys) ->\n+                tup_diff etys atys ebuf abuf\n+\n+            | (Ast.TY_rec eelts, Ast.TY_rec aelts) ->\n+                rec_diff eelts aelts ebuf abuf\n+\n+            | (Ast.TY_vec e, Ast.TY_vec a) ->\n+                p \"vec[\"; sub e a; p \"]\";\n+\n+            | (Ast.TY_chan e, Ast.TY_port a) ->\n+                p \"chan[\"; sub e a; p \"]\";\n+\n+            | (Ast.TY_port e, Ast.TY_port a) ->\n+                p \"port[\"; sub e a; p \"]\";\n+\n+            | (Ast.TY_box e, Ast.TY_box a) ->\n+                p \"@\"; sub e a;\n+\n+            | (Ast.TY_mutable e, Ast.TY_mutable a) ->\n+                p \"mutable \"; sub e a;\n+\n+            | (e, a) ->\n+                Buffer.add_string ebuf (head_only e);\n+                Buffer.add_string abuf (head_only a)\n+        end;\n+        (Buffer.contents ebuf, Buffer.contents abuf)\n+    end\n+;;\n+\n+let type_error_full expected actual =\n+  raise (Type_error (expected, actual))\n+;;\n+\n+let type_error expected actual =\n+  type_error_full expected (head_only actual)\n+;;\n \n (* We explicitly curry [cx] like this to avoid threading it through all the\n  * inner functions. *)\n@@ -101,7 +253,8 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   let demand (expected:Ast.ty) (actual:Ast.ty) : unit =\n     let expected, actual = fundamental_ty expected, fundamental_ty actual in\n     if expected <> actual then\n-      type_error (Printf.sprintf \"%a\" Ast.sprintf_ty expected) actual\n+      let (e,a) = summarize_difference expected actual in\n+        type_error_full e a\n   in\n   let demand_integer (actual:Ast.ty) : unit =\n     if not (is_integer (fundamental_ty actual)) then\n@@ -982,9 +1135,9 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       with Type_error (expected, actual) ->\n         Common.err\n           (Some stmt.Common.id)\n-          \"mismatched types: expected %s but found %a\"\n+          \"mismatched types: expected %s but found %s\"\n           expected\n-          Ast.sprintf_ty actual\n+          actual\n     in\n     check_stmt'\n   in"}]}