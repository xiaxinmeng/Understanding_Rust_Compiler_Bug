{"sha": "f06e8e157cc86538eacb76a65073787b0e46c396", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNmU4ZTE1N2NjODY1MzhlYWNiNzZhNjUwNzM3ODdiMGU0NmMzOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T18:16:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T18:16:43Z"}, "message": "Auto merge of #74687 - estebank:bracketless-turbofish, r=matthewjasper\n\nDetect turbofish missing surrounding angle brackets\n\nFix #74065.", "tree": {"sha": "4de463d2a0462ff402fc61c688c2a4b50cbd1aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de463d2a0462ff402fc61c688c2a4b50cbd1aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f06e8e157cc86538eacb76a65073787b0e46c396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f06e8e157cc86538eacb76a65073787b0e46c396", "html_url": "https://github.com/rust-lang/rust/commit/f06e8e157cc86538eacb76a65073787b0e46c396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f06e8e157cc86538eacb76a65073787b0e46c396/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "html_url": "https://github.com/rust-lang/rust/commit/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b"}, {"sha": "d090e5ed3327a24c17754be7e224b5f2345aa622", "url": "https://api.github.com/repos/rust-lang/rust/commits/d090e5ed3327a24c17754be7e224b5f2345aa622", "html_url": "https://github.com/rust-lang/rust/commit/d090e5ed3327a24c17754be7e224b5f2345aa622"}], "stats": {"total": 118, "additions": 114, "deletions": 4}, "files": [{"sha": "609a0c961e97113b9fb09feec0dfccd113446c26", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=f06e8e157cc86538eacb76a65073787b0e46c396", "patch": "@@ -1,8 +1,10 @@\n use super::ty::AllowPlus;\n use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType, TokenType};\n \n-use rustc_ast::ast::{self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Item, Param};\n-use rustc_ast::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n+use rustc_ast::ast::{\n+    self, AngleBracketedArgs, AttrVec, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind,\n+    Item, ItemKind, Mutability, Param, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n+};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Lit, LitKind, TokenKind};\n use rustc_ast::util::parser::AssocOp;\n@@ -488,6 +490,57 @@ impl<'a> Parser<'a> {\n         false\n     }\n \n+    /// Check if a method call with an intended turbofish has been written without surrounding\n+    /// angle brackets.\n+    pub(super) fn check_turbofish_missing_angle_brackets(&mut self, segment: &mut PathSegment) {\n+        if token::ModSep == self.token.kind && segment.args.is_none() {\n+            let snapshot = self.clone();\n+            self.bump();\n+            let lo = self.token.span;\n+            match self.parse_angle_args() {\n+                Ok(args) => {\n+                    let span = lo.to(self.prev_token.span);\n+                    // Detect trailing `>` like in `x.collect::Vec<_>>()`.\n+                    let mut trailing_span = self.prev_token.span.shrink_to_hi();\n+                    while self.token.kind == token::BinOp(token::Shr)\n+                        || self.token.kind == token::Gt\n+                    {\n+                        trailing_span = trailing_span.to(self.token.span);\n+                        self.bump();\n+                    }\n+                    if self.token.kind == token::OpenDelim(token::Paren) {\n+                        // Recover from bad turbofish: `foo.collect::Vec<_>()`.\n+                        let args = AngleBracketedArgs { args, span }.into();\n+                        segment.args = args;\n+\n+                        self.struct_span_err(\n+                            span,\n+                            \"generic parameters without surrounding angle brackets\",\n+                        )\n+                        .multipart_suggestion(\n+                            \"surround the type parameters with angle brackets\",\n+                            vec![\n+                                (span.shrink_to_lo(), \"<\".to_string()),\n+                                (trailing_span, \">\".to_string()),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .emit();\n+                    } else {\n+                        // This doesn't look like an invalid turbofish, can't recover parse state.\n+                        *self = snapshot;\n+                    }\n+                }\n+                Err(mut err) => {\n+                    // We could't parse generic parameters, unlikely to be a turbofish. Rely on\n+                    // generic parse error instead.\n+                    err.cancel();\n+                    *self = snapshot;\n+                }\n+            }\n+        }\n+    }\n+\n     /// Check to see if a pair of chained operators looks like an attempt at chained comparison,\n     /// e.g. `1 < x <= 3`. If so, suggest either splitting the comparison into two, or\n     /// parenthesising the leftmost comparison."}, {"sha": "d06b172bc148496829d1f0649093a12488a6ac24", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f06e8e157cc86538eacb76a65073787b0e46c396", "patch": "@@ -909,8 +909,9 @@ impl<'a> Parser<'a> {\n         }\n \n         let fn_span_lo = self.token.span;\n-        let segment = self.parse_path_segment(PathStyle::Expr)?;\n+        let mut segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(token::Paren)]);\n+        self.check_turbofish_missing_angle_brackets(&mut segment);\n \n         if self.check(&token::OpenDelim(token::Paren)) {\n             // Method call `expr.f()`"}, {"sha": "3dcefd362574b420ad082504393edee34b8875f0", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=f06e8e157cc86538eacb76a65073787b0e46c396", "patch": "@@ -387,7 +387,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of generic arguments / associated item constraints,\n     /// possibly including trailing comma.\n-    fn parse_angle_args(&mut self) -> PResult<'a, Vec<AngleBracketedArg>> {\n+    pub(super) fn parse_angle_args(&mut self) -> PResult<'a, Vec<AngleBracketedArg>> {\n         let mut args = Vec::new();\n         while let Some(arg) = self.parse_angle_arg()? {\n             args.push(arg);"}, {"sha": "333dce390461c9359b2bd7a6cc83735dbc301be9", "filename": "src/test/ui/suggestions/recover-missing-turbofish-surrounding-angle-braket.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs?ref=f06e8e157cc86538eacb76a65073787b0e46c396", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n+}"}, {"sha": "981f95749d3ba7c66ea45a91b6ef89a9a30fd037", "filename": "src/test/ui/suggestions/recover-missing-turbofish-surrounding-angle-braket.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f06e8e157cc86538eacb76a65073787b0e46c396/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr?ref=f06e8e157cc86538eacb76a65073787b0e46c396", "patch": "@@ -0,0 +1,46 @@\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:2:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:4:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:6:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:8:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: aborting due to 4 previous errors\n+"}]}