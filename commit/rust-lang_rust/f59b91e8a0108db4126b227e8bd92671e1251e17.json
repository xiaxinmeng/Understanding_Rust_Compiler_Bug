{"sha": "f59b91e8a0108db4126b227e8bd92671e1251e17", "node_id": "C_kwDOAAsO6NoAKGY1OWI5MWU4YTAxMDhkYjQxMjZiMjI3ZThiZDkyNjcxZTEyNTFlMTc", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-15T23:23:31Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:43Z"}, "message": "reduce duplicated argument logic", "tree": {"sha": "97b460c656c3a6178ef9eb57c5c232bade4c35d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b460c656c3a6178ef9eb57c5c232bade4c35d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f59b91e8a0108db4126b227e8bd92671e1251e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f59b91e8a0108db4126b227e8bd92671e1251e17", "html_url": "https://github.com/rust-lang/rust/commit/f59b91e8a0108db4126b227e8bd92671e1251e17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f59b91e8a0108db4126b227e8bd92671e1251e17/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd271ffe28055c7a8a764ada1b508aa5a7bd1453", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd271ffe28055c7a8a764ada1b508aa5a7bd1453", "html_url": "https://github.com/rust-lang/rust/commit/fd271ffe28055c7a8a764ada1b508aa5a7bd1453"}], "stats": {"total": 104, "additions": 40, "deletions": 64}, "files": [{"sha": "2b7018bc9c3009c654cc06d453b671a95ed115b8", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 40, "deletions": 64, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f59b91e8a0108db4126b227e8bd92671e1251e17/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59b91e8a0108db4126b227e8bd92671e1251e17/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=f59b91e8a0108db4126b227e8bd92671e1251e17", "patch": "@@ -104,6 +104,10 @@ fn recurse_build<'tcx>(\n ) -> Result<ty::Const<'tcx>, ErrorGuaranteed> {\n     use thir::ExprKind;\n     let node = &body.exprs[node];\n+\n+    let maybe_supported_error = |a| maybe_supported_error(tcx, a, root_span);\n+    let error = |a| error(tcx, a, root_span);\n+\n     Ok(match &node.kind {\n         // I dont know if handling of these 3 is correct\n         &ExprKind::Scope { value, .. } => recurse_build(tcx, body, value, root_span)?,\n@@ -167,11 +171,7 @@ fn recurse_build<'tcx>(\n             if let thir::Block { stmts: box [], expr: Some(e), .. } = &body.blocks[*block] {\n                 recurse_build(tcx, body, *e, root_span)?\n             } else {\n-                maybe_supported_error(\n-                    tcx,\n-                    GenericConstantTooComplexSub::BlockNotSupported(node.span),\n-                    root_span,\n-                )?\n+                maybe_supported_error(GenericConstantTooComplexSub::BlockNotSupported(node.span))?\n             }\n         }\n         // `ExprKind::Use` happens when a `hir::ExprKind::Cast` is a\n@@ -194,98 +194,74 @@ fn recurse_build<'tcx>(\n             if let ExprKind::Deref { arg } = arg_node.kind {\n                 recurse_build(tcx, body, arg, root_span)?\n             } else {\n-                maybe_supported_error(\n-                    tcx,\n-                    GenericConstantTooComplexSub::BorrowNotSupported(node.span),\n-                    root_span,\n-                )?\n+                maybe_supported_error(GenericConstantTooComplexSub::BorrowNotSupported(node.span))?\n             }\n         }\n         // FIXME(generic_const_exprs): We may want to support these.\n         ExprKind::AddressOf { .. } | ExprKind::Deref { .. } => maybe_supported_error(\n-            tcx,\n             GenericConstantTooComplexSub::AddressAndDerefNotSupported(node.span),\n-            root_span,\n-        )?,\n-        ExprKind::Repeat { .. } | ExprKind::Array { .. } => maybe_supported_error(\n-            tcx,\n-            GenericConstantTooComplexSub::ArrayNotSupported(node.span),\n-            root_span,\n-        )?,\n-        ExprKind::NeverToAny { .. } => maybe_supported_error(\n-            tcx,\n-            GenericConstantTooComplexSub::NeverToAnyNotSupported(node.span),\n-            root_span,\n-        )?,\n-        ExprKind::Tuple { .. } => maybe_supported_error(\n-            tcx,\n-            GenericConstantTooComplexSub::TupleNotSupported(node.span),\n-            root_span,\n-        )?,\n-        ExprKind::Index { .. } => maybe_supported_error(\n-            tcx,\n-            GenericConstantTooComplexSub::IndexNotSupported(node.span),\n-            root_span,\n-        )?,\n-        ExprKind::Field { .. } => maybe_supported_error(\n-            tcx,\n-            GenericConstantTooComplexSub::FieldNotSupported(node.span),\n-            root_span,\n-        )?,\n-        ExprKind::ConstBlock { .. } => maybe_supported_error(\n-            tcx,\n-            GenericConstantTooComplexSub::ConstBlockNotSupported(node.span),\n-            root_span,\n-        )?,\n-        ExprKind::Adt(_) => maybe_supported_error(\n-            tcx,\n-            GenericConstantTooComplexSub::AdtNotSupported(node.span),\n-            root_span,\n         )?,\n+        ExprKind::Repeat { .. } | ExprKind::Array { .. } => {\n+            maybe_supported_error(GenericConstantTooComplexSub::ArrayNotSupported(node.span))?\n+        }\n+        ExprKind::NeverToAny { .. } => {\n+            maybe_supported_error(GenericConstantTooComplexSub::NeverToAnyNotSupported(node.span))?\n+        }\n+        ExprKind::Tuple { .. } => {\n+            maybe_supported_error(GenericConstantTooComplexSub::TupleNotSupported(node.span))?\n+        }\n+        ExprKind::Index { .. } => {\n+            maybe_supported_error(GenericConstantTooComplexSub::IndexNotSupported(node.span))?\n+        }\n+        ExprKind::Field { .. } => {\n+            maybe_supported_error(GenericConstantTooComplexSub::FieldNotSupported(node.span))?\n+        }\n+        ExprKind::ConstBlock { .. } => {\n+            maybe_supported_error(GenericConstantTooComplexSub::ConstBlockNotSupported(node.span))?\n+        }\n+        ExprKind::Adt(_) => {\n+            maybe_supported_error(GenericConstantTooComplexSub::AdtNotSupported(node.span))?\n+        }\n         // dont know if this is correct\n         ExprKind::Pointer { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::PointerNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::PointerNotSupported(node.span))?\n         }\n         ExprKind::Yield { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::YieldNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::YieldNotSupported(node.span))?\n         }\n         ExprKind::Continue { .. } | ExprKind::Break { .. } | ExprKind::Loop { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::LoopNotSupported(node.span), root_span)?\n-        }\n-        ExprKind::Box { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::BoxNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::LoopNotSupported(node.span))?\n         }\n+        ExprKind::Box { .. } => error(GenericConstantTooComplexSub::BoxNotSupported(node.span))?,\n \n         ExprKind::Unary { .. } => unreachable!(),\n         // we handle valid unary/binary ops above\n         ExprKind::Binary { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::BinaryNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::BinaryNotSupported(node.span))?\n         }\n         ExprKind::LogicalOp { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::LogicalOpNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::LogicalOpNotSupported(node.span))?\n         }\n         ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::AssignNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::AssignNotSupported(node.span))?\n+        }\n+        ExprKind::Closure { .. } | ExprKind::Return { .. } => {\n+            error(GenericConstantTooComplexSub::ClosureAndReturnNotSupported(node.span))?\n         }\n-        ExprKind::Closure { .. } | ExprKind::Return { .. } => error(\n-            tcx,\n-            GenericConstantTooComplexSub::ClosureAndReturnNotSupported(node.span),\n-            root_span,\n-        )?,\n         // let expressions imply control flow\n         ExprKind::Match { .. } | ExprKind::If { .. } | ExprKind::Let { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::ControlFlowNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::ControlFlowNotSupported(node.span))?\n         }\n         ExprKind::InlineAsm { .. } => {\n-            error(tcx, GenericConstantTooComplexSub::InlineAsmNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::InlineAsmNotSupported(node.span))?\n         }\n \n         // we dont permit let stmts so `VarRef` and `UpvarRef` cant happen\n         ExprKind::VarRef { .. }\n         | ExprKind::UpvarRef { .. }\n         | ExprKind::StaticRef { .. }\n         | ExprKind::ThreadLocalRef(_) => {\n-            error(tcx, GenericConstantTooComplexSub::OperationNotSupported(node.span), root_span)?\n+            error(GenericConstantTooComplexSub::OperationNotSupported(node.span))?\n         }\n     })\n }"}]}