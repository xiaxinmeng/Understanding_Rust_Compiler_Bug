{"sha": "564fa0146e09c1cd9745a1f2f19de92b4b6573fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NGZhMDE0NmUwOWMxY2Q5NzQ1YTFmMmYxOWRlOTJiNGI2NTczZmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-01T19:33:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-01T19:33:53Z"}, "message": "Merge #9450\n\n9450: internal: Add ModuleOrItem guess to import granularity guessing r=Veykril a=Veykril\n\nI think this should be the last fix needed for this(\ud83e\udd1e)\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d8ac263971f0cd5362cb79179030a786826a8e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8ac263971f0cd5362cb79179030a786826a8e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564fa0146e09c1cd9745a1f2f19de92b4b6573fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3hihCRBK7hj4Ov3rIwAA7T8IAIno3dj3Y/N+jc22RPYfz6/1\nImDwA3Se8YXPRLLgxbR8L2s8zf6sNlgGSEE0DpkmVyzXIH39bYeNolHPD7rCRv+v\n8D9sns1A/XETdQw20Llu9n1qWYvNiVPSO9NSO2AFeW0Rkn5kZJsZL54qwk8/vye/\n7VHls+Oy9dbZ6xEYsE72p4bKKl3XTW0qY0TY1d7Cj/xj91XHsKWTOt0WMXycYab1\nE1F60vd1XpBxDGDwjl7o4LSSYjbuTJ5DQApUd7EpDNF2AR/wA/TU+RL0T0PAqokf\npXBnO/ybHrG8T8gSoJGyO2Ck/p/45t7TCA1iu/dP5+4T36CgORMhhO4GKwTRaG0=\n=QsJW\n-----END PGP SIGNATURE-----\n", "payload": "tree d8ac263971f0cd5362cb79179030a786826a8e66\nparent 738dd6ed9fc50128f22712d872fc39a19483a4ce\nparent 7c8ef301cabbbd74eba5342b7c5bb3a880869428\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625168033 +0000\ncommitter GitHub <noreply@github.com> 1625168033 +0000\n\nMerge #9450\n\n9450: internal: Add ModuleOrItem guess to import granularity guessing r=Veykril a=Veykril\n\nI think this should be the last fix needed for this(\ud83e\udd1e)\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564fa0146e09c1cd9745a1f2f19de92b4b6573fa", "html_url": "https://github.com/rust-lang/rust/commit/564fa0146e09c1cd9745a1f2f19de92b4b6573fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564fa0146e09c1cd9745a1f2f19de92b4b6573fa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "738dd6ed9fc50128f22712d872fc39a19483a4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/738dd6ed9fc50128f22712d872fc39a19483a4ce", "html_url": "https://github.com/rust-lang/rust/commit/738dd6ed9fc50128f22712d872fc39a19483a4ce"}, {"sha": "7c8ef301cabbbd74eba5342b7c5bb3a880869428", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8ef301cabbbd74eba5342b7c5bb3a880869428", "html_url": "https://github.com/rust-lang/rust/commit/7c8ef301cabbbd74eba5342b7c5bb3a880869428"}], "stats": {"total": 266, "additions": 141, "deletions": 125}, "files": [{"sha": "5c6bb986b91c74dff4b0c97024cc48dfc9337b30", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 116, "deletions": 117, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/564fa0146e09c1cd9745a1f2f19de92b4b6573fa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564fa0146e09c1cd9745a1f2f19de92b4b6573fa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=564fa0146e09c1cd9745a1f2f19de92b4b6573fa", "patch": "@@ -10,7 +10,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, TextRange};\n \n // Assist: merge_match_arms\n //\n-// Merges identical match arms.\n+// Merges the current match arm with the following if their bodies are identical.\n //\n // ```\n // enum Action { Move { distance: u32 }, Stop }\n@@ -44,14 +44,11 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     // We check if the following match arms match this one. We could, but don't,\n     // compare to the previous match arm as well.\n     let arms_to_merge = successors(Some(current_arm), |it| neighbor(it, Direction::Next))\n-        .take_while(|arm| {\n-            if arm.guard().is_some() {\n-                return false;\n-            }\n-            match arm.expr() {\n-                Some(expr) => expr.syntax().text() == current_expr.syntax().text(),\n-                None => false,\n+        .take_while(|arm| match arm.expr() {\n+            Some(expr) if arm.guard().is_none() => {\n+                expr.syntax().text() == current_expr.syntax().text()\n             }\n+            _ => false,\n         })\n         .collect::<Vec<_>>();\n \n@@ -77,10 +74,12 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             let arm = format!(\"{} => {}\", pats, current_expr.syntax().text());\n \n-            let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n-            let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n+            if let [first, .., last] = &*arms_to_merge {\n+                let start = first.syntax().text_range().start();\n+                let end = last.syntax().text_range().end();\n \n-            edit.replace(TextRange::new(start, end), arm);\n+                edit.replace(TextRange::new(start, end), arm);\n+            }\n         },\n     )\n }\n@@ -100,30 +99,30 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A => { 1i32$0 }\n-                    X::B => { 1i32 }\n-                    X::C => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A => { 1i32$0 }\n+        X::B => { 1i32 }\n+        X::C => { 2i32 }\n+    }\n+}\n+\"#,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A | X::B => { 1i32 }\n-                    X::C => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A | X::B => { 1i32 }\n+        X::C => { 2i32 }\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -132,30 +131,30 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A | X::B => {$0 1i32 },\n-                    X::C | X::D => { 1i32 },\n-                    X::E => { 2i32 },\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A | X::B => {$0 1i32 },\n+        X::C | X::D => { 1i32 },\n+        X::E => { 2i32 },\n+    }\n+}\n+\"#,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A | X::B | X::C | X::D => { 1i32 },\n-                    X::E => { 2i32 },\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A | X::B | X::C | X::D => { 1i32 },\n+        X::E => { 2i32 },\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -164,30 +163,30 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A => { 1i32 },\n-                    X::B => { 2i$032 },\n-                    _ => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A => { 1i32 },\n+        X::B => { 2i$032 },\n+        _ => { 2i32 }\n+    }\n+}\n+\"#,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A => { 1i32 },\n-                    _ => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A => { 1i32 },\n+        _ => { 2i32 }\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -196,29 +195,29 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                match X::A {\n-                    X::A$0 => 92,\n-                    X::B => 92,\n-                    X::C => 92,\n-                    X::D => 62,\n-                    _ => panic!(),\n-                }\n-            }\n-            \"#,\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    match X::A {\n+        X::A$0 => 92,\n+        X::B => 92,\n+        X::C => 92,\n+        X::D => 62,\n+        _ => panic!(),\n+    }\n+}\n+\"#,\n             r#\"\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                match X::A {\n-                    X::A | X::B | X::C => 92,\n-                    X::D => 62,\n-                    _ => panic!(),\n-                }\n-            }\n-            \"#,\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    match X::A {\n+        X::A | X::B | X::C => 92,\n+        X::D => 62,\n+        _ => panic!(),\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -227,22 +226,22 @@ mod tests {\n         check_assist_not_applicable(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X {\n-                A(i32),\n-                B,\n-                C\n-            }\n+#[derive(Debug)]\n+enum X {\n+    A(i32),\n+    B,\n+    C\n+}\n \n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A(a) if a > 5 => { $01i32 },\n-                    X::B => { 1i32 },\n-                    X::C => { 2i32 }\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A(a) if a > 5 => { $01i32 },\n+        X::B => { 1i32 },\n+        X::C => { 2i32 }\n+    }\n+}\n+\"#,\n         );\n     }\n }"}, {"sha": "226b9f8e9cbe2c0e233b137f0c68d3a9091486f2", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/564fa0146e09c1cd9745a1f2f19de92b4b6573fa/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564fa0146e09c1cd9745a1f2f19de92b4b6573fa/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=564fa0146e09c1cd9745a1f2f19de92b4b6573fa", "patch": "@@ -145,14 +145,18 @@ impl ImportScope {\n                             let prefix_c = prev_prefix.qualifiers().count();\n                             let curr_c = curr_path.qualifiers().count() - prefix_c;\n                             let prev_c = prev_path.qualifiers().count() - prefix_c;\n-                            if curr_c <= 1 || prev_c <= 1 {\n-                                // Same prefix but no use tree lists so this has to be of item style.\n-                                break ImportGranularityGuess::Item; // this overwrites CrateOrModule, technically the file doesn't adhere to anything here.\n+                            if curr_c == 1 && prev_c == 1 {\n+                                // Same prefix, only differing in the last segment and no use tree lists so this has to be of item style.\n+                                break ImportGranularityGuess::Item;\n+                            } else {\n+                                // Same prefix and no use tree list but differs in more than one segment at the end. This might be module style still.\n+                                res = ImportGranularityGuess::ModuleOrItem;\n                             }\n+                        } else {\n+                            // Same prefix with item tree lists, has to be module style as it\n+                            // can't be crate style since the trees wouldn't share a prefix then.\n+                            break ImportGranularityGuess::Module;\n                         }\n-                        // Same prefix with item tree lists, has to be module style as it\n-                        // can't be crate style since the trees wouldn't share a prefix then.\n-                        break ImportGranularityGuess::Module;\n                     }\n                 }\n             }\n@@ -168,6 +172,7 @@ enum ImportGranularityGuess {\n     Unknown,\n     Item,\n     Module,\n+    ModuleOrItem,\n     Crate,\n     CrateOrModule,\n }\n@@ -186,6 +191,7 @@ pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfi\n             ImportGranularityGuess::Unknown => mb,\n             ImportGranularityGuess::Item => None,\n             ImportGranularityGuess::Module => Some(MergeBehavior::Module),\n+            ImportGranularityGuess::ModuleOrItem => mb.and(Some(MergeBehavior::Module)),\n             ImportGranularityGuess::Crate => Some(MergeBehavior::Crate),\n             ImportGranularityGuess::CrateOrModule => mb.or(Some(MergeBehavior::Crate)),\n         };"}, {"sha": "2e0153a180d5c4688c253910fddc54a90a0418e6", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/564fa0146e09c1cd9745a1f2f19de92b4b6573fa/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564fa0146e09c1cd9745a1f2f19de92b4b6573fa/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=564fa0146e09c1cd9745a1f2f19de92b4b6573fa", "patch": "@@ -743,12 +743,23 @@ use foo::bar::qux;\n \",\n         ImportGranularityGuess::Item,\n     );\n+}\n+\n+#[test]\n+fn guess_module_or_item() {\n     check_guess(\n         r\"\n use foo::bar::Bar;\n-use foo::baz;\n+use foo::qux;\n \",\n-        ImportGranularityGuess::Item,\n+        ImportGranularityGuess::ModuleOrItem,\n+    );\n+    check_guess(\n+        r\"\n+use foo::bar::Bar;\n+use foo::bar;\n+\",\n+        ImportGranularityGuess::ModuleOrItem,\n     );\n }\n "}]}