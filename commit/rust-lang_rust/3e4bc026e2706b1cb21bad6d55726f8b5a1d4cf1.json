{"sha": "3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNGJjMDI2ZTI3MDZiMWNiMjFiYWQ2ZDU1NzI2ZjhiNWExZDRjZjE=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-07T20:40:28Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-07T20:40:28Z"}, "message": "Apply suggestions from PR review", "tree": {"sha": "2021e525e0b9ab6468472cceb49a9ac580f23335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2021e525e0b9ab6468472cceb49a9ac580f23335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "html_url": "https://github.com/rust-lang/rust/commit/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac348b30849ec472564a81797b7e9ae42985460", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac348b30849ec472564a81797b7e9ae42985460", "html_url": "https://github.com/rust-lang/rust/commit/4ac348b30849ec472564a81797b7e9ae42985460"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "cb72a24058234dcafce74496cc8431f2391f67db", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::paths::{FUTURE_CORE, FUTURE_FROM_GENERATOR, FUTURE_STD};\n-use crate::utils::{match_function_call, match_path, snippet_block, snippet_opt, span_lint_and_then};\n+use crate::utils::paths::FUTURE_FROM_GENERATOR;\n+use crate::utils::{match_function_call, snippet_block, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ManualAsyncFn {\n                     cx,\n                     MANUAL_ASYNC_FN,\n                     header_span,\n-                    \"this function can be simplified using async syntax\",\n+                    \"this function can be simplified using the `async fn` syntax\",\n                     |diag| {\n                         if_chain! {\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n@@ -104,8 +104,7 @@ fn future_trait_ref<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &'tcx Ty<'tcx>) -> Opt\n         if let ItemKind::OpaqueTy(opaque) = &item.kind;\n         if opaque.bounds.len() == 1;\n         if let GenericBound::Trait(poly, _) = &opaque.bounds[0];\n-        let path = poly.trait_ref.path;\n-        if match_path(&path, &FUTURE_CORE) || match_path(&path, &FUTURE_STD);\n+        if poly.trait_ref.trait_def_id() == cx.tcx.lang_items().future_trait();\n         then {\n             return Some(&poly.trait_ref);\n         }"}, {"sha": "b3ad2ad9d9987e73205b42299003e146a7c80bd6", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "patch": "@@ -42,9 +42,7 @@ pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n-pub const FUTURE_CORE: [&str; 3] = [\"core\", \"future\", \"Future\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n-pub const FUTURE_STD: [&str; 3] = [\"std\", \"future\", \"Future\"];\n pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];"}, {"sha": "6bb1032a17299108a9a2603662e5b25531e7114f", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "patch": "@@ -29,7 +29,19 @@ async fn already_async() -> impl Future<Output = i32> {\n \n struct S {}\n impl S {\n-    async fn inh_fut() -> i32 { 42 }\n+    async fn inh_fut() -> i32 {\n+        // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+        let a = 42;\n+        let b = 21;\n+        if a < b {\n+            let c = 21;\n+            let d = 42;\n+            if c < d {\n+                let _ = 42;\n+            }\n+        }\n+        42\n+    }\n \n     async fn meth_fut(&self) -> i32 { 42 }\n "}, {"sha": "d50c919188be13c4ff4111fa17e604771453da13", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "patch": "@@ -36,7 +36,19 @@ async fn already_async() -> impl Future<Output = i32> {\n struct S {}\n impl S {\n     fn inh_fut() -> impl Future<Output = i32> {\n-        async { 42 }\n+        async {\n+            // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+            let a = 42;\n+            let b = 21;\n+            if a < b {\n+                let c = 21;\n+                let d = 42;\n+                if c < d {\n+                    let _ = 42;\n+                }\n+            }\n+            42\n+        }\n     }\n \n     fn meth_fut(&self) -> impl Future<Output = i32> {"}, {"sha": "f278ee41aa335607a9f26dd265ddb16bcc9206d7", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=3e4bc026e2706b1cb21bad6d55726f8b5a1d4cf1", "patch": "@@ -1,4 +1,4 @@\n-error: this function can be simplified using async syntax\n+error: this function can be simplified using the `async fn` syntax\n   --> $DIR/manual_async_fn.rs:8:1\n    |\n LL | fn fut() -> impl Future<Output = i32> {\n@@ -14,7 +14,7 @@ help: move the body of the async block to the enclosing function\n LL | fn fut() -> impl Future<Output = i32> { 42 }\n    |                                       ^^^^^^\n \n-error: this function can be simplified using async syntax\n+error: this function can be simplified using the `async fn` syntax\n   --> $DIR/manual_async_fn.rs:12:1\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {\n@@ -29,7 +29,7 @@ help: move the body of the async block to the enclosing function\n LL | fn empty_fut() -> impl Future<Output = ()> {}\n    |                                            ^^\n \n-error: this function can be simplified using async syntax\n+error: this function can be simplified using the `async fn` syntax\n   --> $DIR/manual_async_fn.rs:16:1\n    |\n LL | fn core_fut() -> impl core::future::Future<Output = i32> {\n@@ -44,7 +44,7 @@ help: move the body of the async block to the enclosing function\n LL | fn core_fut() -> impl core::future::Future<Output = i32> { 42 }\n    |                                                          ^^^^^^\n \n-error: this function can be simplified using async syntax\n+error: this function can be simplified using the `async fn` syntax\n   --> $DIR/manual_async_fn.rs:38:5\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n@@ -56,11 +56,16 @@ LL |     async fn inh_fut() -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n help: move the body of the async block to the enclosing function\n    |\n-LL |     fn inh_fut() -> impl Future<Output = i32> { 42 }\n-   |                                               ^^^^^^\n+LL |     fn inh_fut() -> impl Future<Output = i32> {\n+LL |         // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+LL |         let a = 42;\n+LL |         let b = 21;\n+LL |         if a < b {\n+LL |             let c = 21;\n+ ...\n \n-error: this function can be simplified using async syntax\n-  --> $DIR/manual_async_fn.rs:42:5\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:54:5\n    |\n LL |     fn meth_fut(&self) -> impl Future<Output = i32> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -74,8 +79,8 @@ help: move the body of the async block to the enclosing function\n LL |     fn meth_fut(&self) -> impl Future<Output = i32> { 42 }\n    |                                                     ^^^^^^\n \n-error: this function can be simplified using async syntax\n-  --> $DIR/manual_async_fn.rs:46:5\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:58:5\n    |\n LL |     fn empty_fut(&self) -> impl Future<Output = ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}