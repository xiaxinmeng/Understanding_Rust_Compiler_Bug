{"sha": "d798e00337e72d5036a5c3cfd463c6ebb30d83d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OThlMDAzMzdlNzJkNTAzNmE1YzNjZmQ0NjNjNmViYjMwZDgzZDI=", "commit": {"author": {"name": "kud1ing", "email": "github@kudling.de", "date": "2013-09-26T05:51:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-26T13:15:42Z"}, "message": "Enclose code in documentation in backticks", "tree": {"sha": "ddfcda1cf60aef55be5a94c430023811b0877385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddfcda1cf60aef55be5a94c430023811b0877385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d798e00337e72d5036a5c3cfd463c6ebb30d83d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d798e00337e72d5036a5c3cfd463c6ebb30d83d2", "html_url": "https://github.com/rust-lang/rust/commit/d798e00337e72d5036a5c3cfd463c6ebb30d83d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d798e00337e72d5036a5c3cfd463c6ebb30d83d2/comments", "author": null, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930f7790fbad87f1ddf26a34b089622bc8a742c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/930f7790fbad87f1ddf26a34b089622bc8a742c8", "html_url": "https://github.com/rust-lang/rust/commit/930f7790fbad87f1ddf26a34b089622bc8a742c8"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e6ac1deeb62995d30edd70d1b42d940eda969f84", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d798e00337e72d5036a5c3cfd463c6ebb30d83d2/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d798e00337e72d5036a5c3cfd463c6ebb30d83d2/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=d798e00337e72d5036a5c3cfd463c6ebb30d83d2", "patch": "@@ -10,11 +10,11 @@\n \n //! Simple getopt alternative.\n //!\n-//! Construct a vector of options, either by using reqopt, optopt, and optflag\n-//! or by building them from components yourself, and pass them to getopts,\n-//! along with a vector of actual arguments (not including argv[0]). You'll\n+//! Construct a vector of options, either by using `reqopt`, `optopt`, and `optflag`\n+//! or by building them from components yourself, and pass them to `getopts`,\n+//! along with a vector of actual arguments (not including `argv[0]`). You'll\n //! either get a failure code back, or a match. You'll have to verify whether\n-//! the amount of 'free' arguments in the match is what you expect. Use opt_*\n+//! the amount of 'free' arguments in the match is what you expect. Use `opt_*`\n //! accessors to get argument values out of the matches object.\n //!\n //! Single-character options are expected to appear on the command line with a\n@@ -27,7 +27,7 @@\n //!\n //! The following example shows simple command line parsing for an application\n //! that requires an input file to be specified, accepts an optional output\n-//! file name following -o, and accepts both -h and --help as optional flags.\n+//! file name following `-o`, and accepts both `-h` and `--help` as optional flags.\n //!\n //! ~~~{.rust}\n //! exter mod extra;"}]}