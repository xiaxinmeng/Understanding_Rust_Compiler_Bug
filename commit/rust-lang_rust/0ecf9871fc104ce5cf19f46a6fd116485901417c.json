{"sha": "0ecf9871fc104ce5cf19f46a6fd116485901417c", "node_id": "C_kwDOAAsO6NoAKDBlY2Y5ODcxZmMxMDRjZTVjZjE5ZjQ2YTZmZDExNjQ4NTkwMTQxN2M", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-11-09T04:01:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-09T04:01:05Z"}, "message": "Merge pull request #181 from rust-lang/rotate_lanes\n\nrotate_{left,right} -> rotate_lanes_{left,right}", "tree": {"sha": "d6e5e15d9d243723d0c577694266104f14aee4e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e5e15d9d243723d0c577694266104f14aee4e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ecf9871fc104ce5cf19f46a6fd116485901417c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhifKBCRBK7hj4Ov3rIwAAQGYIAD/diFwic13FlFiUSew8GuGZ\nnYVrG6LoA0lDYYC4KLrw6yz6CBA/kW7y4UTGg1voLqd0BOliBRRueQYLIBstnVYv\n6WhYZvHq6zqk7yZB/6+26LwxJnenQa4h1w0Ya1PERnoaQSvz6tyvmUcaBI8F5yYW\nWdMDLZucB8xZOFZVrSbSZzxG8GrrZ2zqdgerlAihGmYtIHAJxMgxrfDBeFjBG84F\nOQ518V2HbuxDS7HcNYJiG6YTNRNP902JQ0ngO/C3j/MQer8WhxDRGARyjRYgTVIY\n7c/7vXOE0OYD7yKpwdMr2iZ7dpf10suPOeSO4VNu5i+rVsgvsN/NnJKWBqbtZtw=\n=bgb2\n-----END PGP SIGNATURE-----\n", "payload": "tree d6e5e15d9d243723d0c577694266104f14aee4e3\nparent d2e87281fcffbf26635c03a1060ca3fc18dcf418\nparent 4e00aa68c718427a9dfd8e934529ad4615b1ab7c\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1636430465 -0500\ncommitter GitHub <noreply@github.com> 1636430465 -0500\n\nMerge pull request #181 from rust-lang/rotate_lanes\n\nrotate_{left,right} -> rotate_lanes_{left,right}"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ecf9871fc104ce5cf19f46a6fd116485901417c", "html_url": "https://github.com/rust-lang/rust/commit/0ecf9871fc104ce5cf19f46a6fd116485901417c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ecf9871fc104ce5cf19f46a6fd116485901417c/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e87281fcffbf26635c03a1060ca3fc18dcf418", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e87281fcffbf26635c03a1060ca3fc18dcf418", "html_url": "https://github.com/rust-lang/rust/commit/d2e87281fcffbf26635c03a1060ca3fc18dcf418"}, {"sha": "4e00aa68c718427a9dfd8e934529ad4615b1ab7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e00aa68c718427a9dfd8e934529ad4615b1ab7c", "html_url": "https://github.com/rust-lang/rust/commit/4e00aa68c718427a9dfd8e934529ad4615b1ab7c"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "c51a566deb59dc50bbebcb1e4547b7a97bd17a6b", "filename": "crates/core_simd/examples/matrix_inversion.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0ecf9871fc104ce5cf19f46a6fd116485901417c/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecf9871fc104ce5cf19f46a6fd116485901417c/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs?ref=0ecf9871fc104ce5cf19f46a6fd116485901417c", "patch": "@@ -180,58 +180,58 @@ pub fn simd_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n     let row2 = simd_swizzle!(tmp, row3, SHUFFLE02);\n     let row3 = simd_swizzle!(row3, tmp, SHUFFLE13);\n \n-    let tmp = (row2 * row3).reverse().rotate_right::<2>();\n+    let tmp = (row2 * row3).reverse().rotate_lanes_right::<2>();\n     let minor0 = row1 * tmp;\n     let minor1 = row0 * tmp;\n-    let tmp = tmp.rotate_right::<2>();\n+    let tmp = tmp.rotate_lanes_right::<2>();\n     let minor0 = (row1 * tmp) - minor0;\n     let minor1 = (row0 * tmp) - minor1;\n-    let minor1 = minor1.rotate_right::<2>();\n+    let minor1 = minor1.rotate_lanes_right::<2>();\n \n-    let tmp = (row1 * row2).reverse().rotate_right::<2>();\n+    let tmp = (row1 * row2).reverse().rotate_lanes_right::<2>();\n     let minor0 = (row3 * tmp) + minor0;\n     let minor3 = row0 * tmp;\n-    let tmp = tmp.rotate_right::<2>();\n+    let tmp = tmp.rotate_lanes_right::<2>();\n \n     let minor0 = minor0 - row3 * tmp;\n     let minor3 = row0 * tmp - minor3;\n-    let minor3 = minor3.rotate_right::<2>();\n+    let minor3 = minor3.rotate_lanes_right::<2>();\n \n-    let tmp = (row3 * row1.rotate_right::<2>())\n+    let tmp = (row3 * row1.rotate_lanes_right::<2>())\n         .reverse()\n-        .rotate_right::<2>();\n-    let row2 = row2.rotate_right::<2>();\n+        .rotate_lanes_right::<2>();\n+    let row2 = row2.rotate_lanes_right::<2>();\n     let minor0 = row2 * tmp + minor0;\n     let minor2 = row0 * tmp;\n-    let tmp = tmp.rotate_right::<2>();\n+    let tmp = tmp.rotate_lanes_right::<2>();\n     let minor0 = minor0 - row2 * tmp;\n     let minor2 = row0 * tmp - minor2;\n-    let minor2 = minor2.rotate_right::<2>();\n+    let minor2 = minor2.rotate_lanes_right::<2>();\n \n-    let tmp = (row0 * row1).reverse().rotate_right::<2>();\n+    let tmp = (row0 * row1).reverse().rotate_lanes_right::<2>();\n     let minor2 = minor2 + row3 * tmp;\n     let minor3 = row2 * tmp - minor3;\n-    let tmp = tmp.rotate_right::<2>();\n+    let tmp = tmp.rotate_lanes_right::<2>();\n     let minor2 = row3 * tmp - minor2;\n     let minor3 = minor3 - row2 * tmp;\n \n-    let tmp = (row0 * row3).reverse().rotate_right::<2>();\n+    let tmp = (row0 * row3).reverse().rotate_lanes_right::<2>();\n     let minor1 = minor1 - row2 * tmp;\n     let minor2 = row1 * tmp + minor2;\n-    let tmp = tmp.rotate_right::<2>();\n+    let tmp = tmp.rotate_lanes_right::<2>();\n     let minor1 = row2 * tmp + minor1;\n     let minor2 = minor2 - row1 * tmp;\n \n-    let tmp = (row0 * row2).reverse().rotate_right::<2>();\n+    let tmp = (row0 * row2).reverse().rotate_lanes_right::<2>();\n     let minor1 = row3 * tmp + minor1;\n     let minor3 = minor3 - row1 * tmp;\n-    let tmp = tmp.rotate_right::<2>();\n+    let tmp = tmp.rotate_lanes_right::<2>();\n     let minor1 = minor1 - row3 * tmp;\n     let minor3 = row1 * tmp + minor3;\n \n     let det = row0 * minor0;\n-    let det = det.rotate_right::<2>() + det;\n-    let det = det.reverse().rotate_right::<2>() + det;\n+    let det = det.rotate_lanes_right::<2>() + det;\n+    let det = det.reverse().rotate_lanes_right::<2>() + det;\n \n     if det.horizontal_sum() == 0. {\n         return None;"}, {"sha": "62cda68f0a94921c91f44c1d370e5092c286c3e2", "filename": "crates/core_simd/src/swizzle.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ecf9871fc104ce5cf19f46a6fd116485901417c/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecf9871fc104ce5cf19f46a6fd116485901417c/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs?ref=0ecf9871fc104ce5cf19f46a6fd116485901417c", "patch": "@@ -203,10 +203,10 @@ where\n     }\n \n     /// Rotates the vector such that the first `OFFSET` elements of the slice move to the end\n-    /// while the last `LANES - OFFSET` elements move to the front. After calling `rotate_left`, the\n-    /// element previously in lane `OFFSET` will become the first element in the slice.\n+    /// while the last `LANES - OFFSET` elements move to the front. After calling `rotate_lanes_left`,\n+    /// the element previously in lane `OFFSET` will become the first element in the slice.\n     #[inline]\n-    pub fn rotate_left<const OFFSET: usize>(self) -> Self {\n+    pub fn rotate_lanes_left<const OFFSET: usize>(self) -> Self {\n         const fn rotate_index<const OFFSET: usize, const LANES: usize>() -> [usize; LANES] {\n             let offset = OFFSET % LANES;\n             let mut index = [0; LANES];\n@@ -228,10 +228,10 @@ where\n     }\n \n     /// Rotates the vector such that the first `LANES - OFFSET` elements of the vector move to\n-    /// the end while the last `OFFSET` elements move to the front. After calling `rotate_right`, the\n-    /// element previously at index `LANES - OFFSET` will become the first element in the slice.\n+    /// the end while the last `OFFSET` elements move to the front. After calling `rotate_lanes_right`,\n+    /// the element previously at index `LANES - OFFSET` will become the first element in the slice.\n     #[inline]\n-    pub fn rotate_right<const OFFSET: usize>(self) -> Self {\n+    pub fn rotate_lanes_right<const OFFSET: usize>(self) -> Self {\n         const fn rotate_index<const OFFSET: usize, const LANES: usize>() -> [usize; LANES] {\n             let offset = LANES - OFFSET % LANES;\n             let mut index = [0; LANES];"}, {"sha": "51c63611aba6b9fe0b381006c8c1a44b7b4e65fe", "filename": "crates/core_simd/tests/swizzle.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0ecf9871fc104ce5cf19f46a6fd116485901417c/crates%2Fcore_simd%2Ftests%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecf9871fc104ce5cf19f46a6fd116485901417c/crates%2Fcore_simd%2Ftests%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fswizzle.rs?ref=0ecf9871fc104ce5cf19f46a6fd116485901417c", "patch": "@@ -34,18 +34,18 @@ fn reverse() {\n #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n fn rotate() {\n     let a = Simd::from_array([1, 2, 3, 4]);\n-    assert_eq!(a.rotate_left::<0>().to_array(), [1, 2, 3, 4]);\n-    assert_eq!(a.rotate_left::<1>().to_array(), [2, 3, 4, 1]);\n-    assert_eq!(a.rotate_left::<2>().to_array(), [3, 4, 1, 2]);\n-    assert_eq!(a.rotate_left::<3>().to_array(), [4, 1, 2, 3]);\n-    assert_eq!(a.rotate_left::<4>().to_array(), [1, 2, 3, 4]);\n-    assert_eq!(a.rotate_left::<5>().to_array(), [2, 3, 4, 1]);\n-    assert_eq!(a.rotate_right::<0>().to_array(), [1, 2, 3, 4]);\n-    assert_eq!(a.rotate_right::<1>().to_array(), [4, 1, 2, 3]);\n-    assert_eq!(a.rotate_right::<2>().to_array(), [3, 4, 1, 2]);\n-    assert_eq!(a.rotate_right::<3>().to_array(), [2, 3, 4, 1]);\n-    assert_eq!(a.rotate_right::<4>().to_array(), [1, 2, 3, 4]);\n-    assert_eq!(a.rotate_right::<5>().to_array(), [4, 1, 2, 3]);\n+    assert_eq!(a.rotate_lanes_left::<0>().to_array(), [1, 2, 3, 4]);\n+    assert_eq!(a.rotate_lanes_left::<1>().to_array(), [2, 3, 4, 1]);\n+    assert_eq!(a.rotate_lanes_left::<2>().to_array(), [3, 4, 1, 2]);\n+    assert_eq!(a.rotate_lanes_left::<3>().to_array(), [4, 1, 2, 3]);\n+    assert_eq!(a.rotate_lanes_left::<4>().to_array(), [1, 2, 3, 4]);\n+    assert_eq!(a.rotate_lanes_left::<5>().to_array(), [2, 3, 4, 1]);\n+    assert_eq!(a.rotate_lanes_right::<0>().to_array(), [1, 2, 3, 4]);\n+    assert_eq!(a.rotate_lanes_right::<1>().to_array(), [4, 1, 2, 3]);\n+    assert_eq!(a.rotate_lanes_right::<2>().to_array(), [3, 4, 1, 2]);\n+    assert_eq!(a.rotate_lanes_right::<3>().to_array(), [2, 3, 4, 1]);\n+    assert_eq!(a.rotate_lanes_right::<4>().to_array(), [1, 2, 3, 4]);\n+    assert_eq!(a.rotate_lanes_right::<5>().to_array(), [4, 1, 2, 3]);\n }\n \n #[test]"}]}