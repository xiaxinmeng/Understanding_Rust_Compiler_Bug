{"sha": "a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMWRjOGUzYjE1M2FjMzA3M2Y5ZmIxNGQ4ZTUyM2EzNTBmZTEwZjI=", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2019-05-22T13:49:43Z"}, "committer": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2019-05-22T14:24:28Z"}, "message": "Allow null-pointer-optimized enums in FFI if their underlying representation is FFI safe\n\nThis allows types like Option<NonZeroU8> to be used in FFI without triggering the improper_ctypes lint. This works by changing the is_repr_nullable_ptr function to consider an enum E to be FFI-safe if:\n\n- E has no explicit #[repr(...)].\n- It only has two variants.\n- One of those variants is empty (meaning it has no fields).\n- The other variant has only one field.\n- That field is one of the following:\n  - &T\n  - &mut T\n  - extern \"C\" fn\n  - core::num::NonZero*\n  - core::ptr::NonNull<T>\n  - #[repr(transparent)] struct wrapper around one of the types in this list.\n- The size of E and its field are both known and are both the same size (implying E is participating in the nonnull optimization).", "tree": {"sha": "b167a1dabb4ded350807e1245a9b99dfd5019938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b167a1dabb4ded350807e1245a9b99dfd5019938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "html_url": "https://github.com/rust-lang/rust/commit/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ff5d388f8c004ca248adb635f1cc84d347eda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff5d388f8c004ca248adb635f1cc84d347eda0", "html_url": "https://github.com/rust-lang/rust/commit/37ff5d388f8c004ca248adb635f1cc84d347eda0"}], "stats": {"total": 205, "additions": 156, "deletions": 49}, "files": [{"sha": "932c0eaa4c7b1ede320ad45c12243fb25f68f27e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -50,6 +50,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n                 #[rustc_layout_scalar_valid_range_start(1)]\n+                #[cfg_attr(not(stage0), rustc_nonnull_optimization_guaranteed)]\n                 pub struct $Ty($Int);\n             }\n "}, {"sha": "4bb4d3ee46660796840a2e89ba73d03eb37be558", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -2938,6 +2938,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[repr(transparent)]\n #[rustc_layout_scalar_valid_range_start(1)]\n+#[cfg_attr(not(stage0), rustc_nonnull_optimization_guaranteed)]\n pub struct NonNull<T: ?Sized> {\n     pointer: *const T,\n }"}, {"sha": "ac18e131c4a3d7aafcf62cb5a1dd0e6b02d6546f", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 70, "deletions": 38, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -1,10 +1,11 @@\n #![allow(non_snake_case)]\n \n use rustc::hir::{ExprKind, Node};\n+use crate::hir::def_id::DefId;\n use rustc::hir::lowering::is_range_literal;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n-use rustc::ty::layout::{self, IntegerExt, LayoutOf, VariantIdx};\n+use rustc::ty::layout::{self, IntegerExt, LayoutOf, VariantIdx, SizeSkeleton};\n use rustc::{lint, util};\n use rustc_data_structures::indexed_vec::Idx;\n use util::nodemap::FxHashSet;\n@@ -14,11 +15,11 @@ use lint::{LintPass, LateLintPass};\n use std::cmp;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n-use syntax::{ast, attr};\n+use syntax::{ast, attr, source_map};\n use syntax::errors::Applicability;\n+use syntax::symbol::sym;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::Span;\n-use syntax::source_map;\n \n use rustc::hir;\n \n@@ -522,42 +523,79 @@ enum FfiResult<'tcx> {\n     },\n }\n \n+fn is_zst<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, did: DefId, ty: Ty<'tcx>) -> bool {\n+    tcx.layout_of(tcx.param_env(did).and(ty)).map(|layout| layout.is_zst()).unwrap_or(false)\n+}\n+\n+fn ty_is_known_nonnull<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    match ty.sty {\n+        ty::FnPtr(_) => true,\n+        ty::Ref(..) => true,\n+        ty::Adt(field_def, substs) if field_def.repr.transparent() && field_def.is_struct() => {\n+            for field in &field_def.non_enum_variant().fields {\n+                let field_ty = tcx.normalize_erasing_regions(\n+                    ParamEnv::reveal_all(),\n+                    field.ty(tcx, substs),\n+                );\n+                if is_zst(tcx, field.did, field_ty) {\n+                    continue;\n+                }\n+\n+                let attrs = tcx.get_attrs(field_def.did);\n+                if attrs.iter().any(|a| a.check_name(sym::rustc_nonnull_optimization_guaranteed)) ||\n+                    ty_is_known_nonnull(tcx, field_ty) {\n+                    return true;\n+                }\n+            }\n+\n+            false\n+        }\n+        _ => false,\n+    }\n+}\n+\n /// Check if this enum can be safely exported based on the\n /// \"nullable pointer optimization\". Currently restricted\n-/// to function pointers and references, but could be\n-/// expanded to cover NonZero raw pointers and newtypes.\n+/// to function pointers, references, core::num::NonZero*,\n+/// core::ptr::NonNull, and #[repr(transparent)] newtypes.\n /// FIXME: This duplicates code in codegen.\n fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                  def: &'tcx ty::AdtDef,\n+                                  ty: Ty<'tcx>,\n+                                  ty_def: &'tcx ty::AdtDef,\n                                   substs: SubstsRef<'tcx>)\n                                   -> bool {\n-    if def.variants.len() == 2 {\n-        let data_idx;\n+    if ty_def.variants.len() != 2 {\n+        return false;\n+    }\n \n-        let zero = VariantIdx::new(0);\n-        let one = VariantIdx::new(1);\n+    let get_variant_fields = |index| &ty_def.variants[VariantIdx::new(index)].fields;\n+    let variant_fields = [get_variant_fields(0), get_variant_fields(1)];\n+    let fields = if variant_fields[0].is_empty() {\n+        &variant_fields[1]\n+    } else if variant_fields[1].is_empty() {\n+        &variant_fields[0]\n+    } else {\n+        return false;\n+    };\n \n-        if def.variants[zero].fields.is_empty() {\n-            data_idx = one;\n-        } else if def.variants[one].fields.is_empty() {\n-            data_idx = zero;\n-        } else {\n-            return false;\n-        }\n+    if fields.len() != 1 {\n+        return false;\n+    }\n \n-        if def.variants[data_idx].fields.len() == 1 {\n-            match def.variants[data_idx].fields[0].ty(tcx, substs).sty {\n-                ty::FnPtr(_) => {\n-                    return true;\n-                }\n-                ty::Ref(..) => {\n-                    return true;\n-                }\n-                _ => {}\n-            }\n-        }\n+    let field_ty = fields[0].ty(tcx, substs);\n+    if !ty_is_known_nonnull(tcx, field_ty) {\n+        return false;\n     }\n-    false\n+\n+    // At this point, the field's type is known to be nonnull and the parent enum is Option-like.\n+    // If the computed size for the field and the enum are different, the nonnull optimization isn't\n+    // being applied (and we've got a problem somewhere).\n+    let compute_size_skeleton = |t| SizeSkeleton::compute(t, tcx, ParamEnv::reveal_all()).unwrap();\n+    if !compute_size_skeleton(ty).same_size(compute_size_skeleton(field_ty)) {\n+        bug!(\"improper_ctypes: Option nonnull optimization not applied?\");\n+    }\n+\n+    true\n }\n \n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n@@ -612,14 +650,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             );\n                             // repr(transparent) types are allowed to have arbitrary ZSTs, not just\n                             // PhantomData -- skip checking all ZST fields\n-                            if def.repr.transparent() {\n-                                let is_zst = cx\n-                                    .layout_of(cx.param_env(field.did).and(field_ty))\n-                                    .map(|layout| layout.is_zst())\n-                                    .unwrap_or(false);\n-                                if is_zst {\n-                                    continue;\n-                                }\n+                            if def.repr.transparent() && is_zst(cx, field.did, field_ty) {\n+                                continue;\n                             }\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n@@ -682,7 +714,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // discriminant.\n                         if !def.repr.c() && def.repr.int.is_none() {\n                             // Special-case types like `Option<extern fn()>`.\n-                            if !is_repr_nullable_ptr(cx, def, substs) {\n+                            if !is_repr_nullable_ptr(cx, ty, def, substs) {\n                                 return FfiUnsafe {\n                                     ty: ty,\n                                     reason: \"enum has no representation hint\","}, {"sha": "b27f5b1495cb8207cd37e5373c1f6642d8cc1927", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -1134,6 +1134,13 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             is just used to enable niche optimizations in libcore \\\n             and will never be stable\",\n         cfg_fn!(rustc_attrs))),\n+    (sym::rustc_nonnull_optimization_guaranteed, Whitelisted, template!(Word),\n+    Gated(Stability::Unstable,\n+        sym::rustc_attrs,\n+        \"the `#[rustc_nonnull_optimization_guaranteed]` attribute \\\n+            is just used to enable niche optimizations in libcore \\\n+            and will never be stable\",\n+        cfg_fn!(rustc_attrs))),\n     (sym::rustc_regions, Normal, template!(Word), Gated(Stability::Unstable,\n                                     sym::rustc_attrs,\n                                     \"the `#[rustc_regions]` attribute \\"}, {"sha": "b59244283d7392981940ae57dd7742f8c44726b7", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -491,6 +491,7 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_mir,\n+        rustc_nonnull_optimization_guaranteed,\n         rustc_object_lifetime_default,\n         rustc_on_unimplemented,\n         rustc_outlives,"}, {"sha": "9f5c92349e06f25bb9e77e1c50426002d7e590a2", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -4,5 +4,6 @@\n \n #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+#[rustc_nonnull_optimization_guaranteed] //~ ERROR the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable niche optimizations in libcore and will never be stable\n \n fn main() {}"}, {"sha": "ed98484e13c4a53813a0d204f33dd866b2dc3d90", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -16,6 +16,15 @@ LL | #[rustc_error]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0658]: the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable niche optimizations in libcore and will never be stable\n+  --> $DIR/feature-gate-rustc-attrs-1.rs:7:1\n+   |\n+LL | #[rustc_nonnull_optimization_guaranteed]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "d3e11d2f7ed6478ef826d3f72dec65f0746396ce", "filename": "src/test/ui/lint/lint-ctypes-enum.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -1,6 +1,8 @@\n #![deny(improper_ctypes)]\n #![allow(dead_code)]\n \n+use std::num;\n+\n enum Z { }\n enum U { A }\n enum B { C, D }\n@@ -15,14 +17,39 @@ enum U8 { A, B, C }\n #[repr(isize)]\n enum Isize { A, B, C }\n \n+#[repr(transparent)]\n+struct Transparent<T>(T, std::marker::PhantomData<Z>);\n+\n+struct Rust<T>(T);\n+\n extern {\n    fn zf(x: Z);\n    fn uf(x: U); //~ ERROR enum has no representation hint\n    fn bf(x: B); //~ ERROR enum has no representation hint\n    fn tf(x: T); //~ ERROR enum has no representation hint\n-   fn reprc(x: ReprC);\n-   fn u8(x: U8);\n-   fn isize(x: Isize);\n+   fn repr_c(x: ReprC);\n+   fn repr_u8(x: U8);\n+   fn repr_isize(x: Isize);\n+   fn option_ref(x: Option<&'static u8>);\n+   fn option_fn(x: Option<extern \"C\" fn()>);\n+   fn nonnull(x: Option<std::ptr::NonNull<u8>>);\n+   fn nonzero_u8(x: Option<num::NonZeroU8>);\n+   fn nonzero_u16(x: Option<num::NonZeroU16>);\n+   fn nonzero_u32(x: Option<num::NonZeroU32>);\n+   fn nonzero_u64(x: Option<num::NonZeroU64>);\n+   fn nonzero_u128(x: Option<num::NonZeroU128>);\n+   //~^ ERROR 128-bit integers don't currently have a known stable ABI\n+   fn nonzero_usize(x: Option<num::NonZeroUsize>);\n+   fn nonzero_i8(x: Option<num::NonZeroI8>);\n+   fn nonzero_i16(x: Option<num::NonZeroI16>);\n+   fn nonzero_i32(x: Option<num::NonZeroI32>);\n+   fn nonzero_i64(x: Option<num::NonZeroI64>);\n+   fn nonzero_i128(x: Option<num::NonZeroI128>);\n+   //~^ ERROR 128-bit integers don't currently have a known stable ABI\n+   fn nonzero_isize(x: Option<num::NonZeroIsize>);\n+   fn repr_transparent(x: Option<Transparent<num::NonZeroU8>>);\n+   fn repr_rust(x: Option<Rust<num::NonZeroU8>>); //~ ERROR enum has no representation hint\n+   fn no_result(x: Result<(), num::NonZeroI32>); //~ ERROR enum has no representation hint\n }\n \n pub fn main() { }"}, {"sha": "6b807f48aaa82576ff092c38d8e555889404cdc1", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31dc8e3b153ac3073f9fb14d8e523a350fe10f2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=a31dc8e3b153ac3073f9fb14d8e523a350fe10f2", "patch": "@@ -1,5 +1,5 @@\n error: `extern` block uses type `U` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:20:13\n+  --> $DIR/lint-ctypes-enum.rs:27:13\n    |\n LL |    fn uf(x: U);\n    |             ^\n@@ -11,36 +11,64 @@ LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = help: consider adding a #[repr(...)] attribute to this enum\n note: type defined here\n-  --> $DIR/lint-ctypes-enum.rs:5:1\n+  --> $DIR/lint-ctypes-enum.rs:7:1\n    |\n LL | enum U { A }\n    | ^^^^^^^^^^^^\n \n error: `extern` block uses type `B` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:21:13\n+  --> $DIR/lint-ctypes-enum.rs:28:13\n    |\n LL |    fn bf(x: B);\n    |             ^\n    |\n    = help: consider adding a #[repr(...)] attribute to this enum\n note: type defined here\n-  --> $DIR/lint-ctypes-enum.rs:6:1\n+  --> $DIR/lint-ctypes-enum.rs:8:1\n    |\n LL | enum B { C, D }\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `T` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:22:13\n+  --> $DIR/lint-ctypes-enum.rs:29:13\n    |\n LL |    fn tf(x: T);\n    |             ^\n    |\n    = help: consider adding a #[repr(...)] attribute to this enum\n note: type defined here\n-  --> $DIR/lint-ctypes-enum.rs:7:1\n+  --> $DIR/lint-ctypes-enum.rs:9:1\n    |\n LL | enum T { E, F, G }\n    | ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n+  --> $DIR/lint-ctypes-enum.rs:40:23\n+   |\n+LL |    fn nonzero_u128(x: Option<num::NonZeroU128>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n+  --> $DIR/lint-ctypes-enum.rs:47:23\n+   |\n+LL |    fn nonzero_i128(x: Option<num::NonZeroI128>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `std::option::Option<Rust<std::num::NonZeroU8>>` which is not FFI-safe: enum has no representation hint\n+  --> $DIR/lint-ctypes-enum.rs:51:20\n+   |\n+LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(...)] attribute to this enum\n+\n+error: `extern` block uses type `std::result::Result<(), std::num::NonZeroI32>` which is not FFI-safe: enum has no representation hint\n+  --> $DIR/lint-ctypes-enum.rs:52:20\n+   |\n+LL |    fn no_result(x: Result<(), num::NonZeroI32>);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(...)] attribute to this enum\n+\n+error: aborting due to 7 previous errors\n "}]}