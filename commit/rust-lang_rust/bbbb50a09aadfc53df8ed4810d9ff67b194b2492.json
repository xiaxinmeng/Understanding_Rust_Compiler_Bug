{"sha": "bbbb50a09aadfc53df8ed4810d9ff67b194b2492", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYmI1MGEwOWFhZGZjNTNkZjhlZDQ4MTBkOWZmNjdiMTk0YjI0OTI=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-26T03:22:25Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-26T03:24:18Z"}, "message": "set mask for statx correctly", "tree": {"sha": "541c3c6895f91fc3051419ccc64cef25c49f37a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541c3c6895f91fc3051419ccc64cef25c49f37a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbbb50a09aadfc53df8ed4810d9ff67b194b2492", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXgQn5RgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClCufAD/XSgVrIULWkuXPuEI4X01DwY7\nUCCkfSsZtc1Dl4w+5zgA/2fjf5DOvvRD5eeMeRBKKIDWJRbk+HM8VU3L8KZ9j/IM\n=tKkl\n-----END PGP SIGNATURE-----", "payload": "tree 541c3c6895f91fc3051419ccc64cef25c49f37a6\nparent 1bc362908440792123d8b8022f6e09a7401389f2\nauthor Christian Poveda <git@christianpoveda.xyz> 1577330545 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577330658 -0500\n\nset mask for statx correctly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbb50a09aadfc53df8ed4810d9ff67b194b2492", "html_url": "https://github.com/rust-lang/rust/commit/bbbb50a09aadfc53df8ed4810d9ff67b194b2492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbbb50a09aadfc53df8ed4810d9ff67b194b2492/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc362908440792123d8b8022f6e09a7401389f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc362908440792123d8b8022f6e09a7401389f2", "html_url": "https://github.com/rust-lang/rust/commit/1bc362908440792123d8b8022f6e09a7401389f2"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "3084d977de82aac26d5c2d5ebb568d65812dba4c", "filename": "src/shims/fs.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bbbb50a09aadfc53df8ed4810d9ff67b194b2492/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbb50a09aadfc53df8ed4810d9ff67b194b2492/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=bbbb50a09aadfc53df8ed4810d9ff67b194b2492", "patch": "@@ -277,17 +277,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let buf = this.deref_operand(buf_op)?;\n \n-        let stats = match FileStatus::new(this, path, false)? {\n-            Some(stats) => stats,\n+        let status = match FileStatus::new(this, path, false)? {\n+            Some(status) => status,\n             None => return Ok(-1),\n         };\n \n         // FIXME: use Scalar::to_u16\n-        let mode: u16 = stats.mode.to_bits(Size::from_bits(16))? as u16;\n+        let mode: u16 = status.mode.to_bits(Size::from_bits(16))? as u16;\n \n-        let (access_sec, access_nsec) = stats.accessed.unwrap_or((0, 0));\n-        let (created_sec, created_nsec) = stats.created.unwrap_or((0, 0));\n-        let (modified_sec, modified_nsec) = stats.modified.unwrap_or((0, 0));\n+        let (access_sec, access_nsec) = status.accessed.unwrap_or((0, 0));\n+        let (created_sec, created_nsec) = status.created.unwrap_or((0, 0));\n+        let (modified_sec, modified_nsec) = status.modified.unwrap_or((0, 0));\n \n         let dev_t_layout = this.libc_ty_layout(\"dev_t\")?;\n         let mode_t_layout = this.libc_ty_layout(\"mode_t\")?;\n@@ -326,7 +326,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n             immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n             immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n-            immty_from_uint_checked(stats.size, off_t_layout)?, // st_size\n+            immty_from_uint_checked(status.size, off_t_layout)?, // st_size\n             immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n             immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n             immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n@@ -413,41 +413,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // symbolic links.\n         let is_symlink = flags & this.eval_libc(\"AT_SYMLINK_NOFOLLOW\")?.to_i32()? != 0;\n \n-        let stats = match FileStatus::new(this, path, is_symlink)? {\n-            Some(stats) => stats,\n+        let status = match FileStatus::new(this, path, is_symlink)? {\n+            Some(status) => status,\n             None => return Ok(-1),\n         };\n \n         // The `mode` field specifies the type of the file and the permissions over the file for\n         // the owner, its group and other users. Given that we can only provide the file type\n         // without using platform specific methods, we only set the bits corresponding to the file\n         // type. This should be an `__u16` but `libc` provides its values as `u32`.\n-        let mode: u16 = stats\n+        let mode: u16 = status\n             .mode\n             .to_u32()?\n             .try_into()\n             .unwrap_or_else(|_| bug!(\"libc contains bad value for constant\"));\n \n-        let (access_sec, access_nsec) = if let Some(tup) = stats.accessed {\n-            tup\n-        } else {\n+        let (access_sec, access_nsec) = status.accessed.map(|tup| {\n             mask |= this.eval_libc(\"STATX_ATIME\")?.to_u32()?;\n-            (0, 0)\n-        };\n+            InterpResult::Ok(tup)\n+        }).unwrap_or(Ok((0, 0)))?;\n \n-        let (created_sec, created_nsec) = if let Some(tup) = stats.created {\n-            tup\n-        } else {\n+        let (created_sec, created_nsec) = status.created.map(|tup| {\n             mask |= this.eval_libc(\"STATX_BTIME\")?.to_u32()?;\n-            (0, 0)\n-        };\n+            InterpResult::Ok(tup)\n+        }).unwrap_or(Ok((0, 0)))?;\n \n-        let (modified_sec, modified_nsec) = if let Some(tup) = stats.modified {\n-            tup\n-        } else {\n+        let (modified_sec, modified_nsec) = status.modified.map(|tup| {\n             mask |= this.eval_libc(\"STATX_MTIME\")?.to_u32()?;\n-            (0, 0)\n-        };\n+            InterpResult::Ok(tup)\n+        }).unwrap_or(Ok((0, 0)))?;\n \n         let __u32_layout = this.libc_ty_layout(\"__u32\")?;\n         let __u64_layout = this.libc_ty_layout(\"__u64\")?;\n@@ -465,7 +459,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             immty_from_uint_checked(mode, __u16_layout)?, // stx_mode\n             immty_from_uint_checked(0u128, __u16_layout)?, // statx padding\n             immty_from_uint_checked(0u128, __u64_layout)?, // stx_ino\n-            immty_from_uint_checked(stats.size, __u64_layout)?, // stx_size\n+            immty_from_uint_checked(status.size, __u64_layout)?, // stx_size\n             immty_from_uint_checked(0u128, __u64_layout)?, // stx_blocks\n             immty_from_uint_checked(0u128, __u64_layout)?, // stx_attributes\n             immty_from_uint_checked(access_sec, __u64_layout)?, // stx_atime.tv_sec\n@@ -521,7 +515,11 @@ struct FileStatus {\n }\n \n impl FileStatus {\n-    fn new<'tcx, 'mir>(ecx: &mut MiriEvalContext<'mir, 'tcx>, path: PathBuf, is_symlink: bool) -> InterpResult<'tcx, Option<FileStatus>> {\n+    fn new<'tcx, 'mir>(\n+        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        path: PathBuf,\n+        is_symlink: bool\n+    ) -> InterpResult<'tcx, Option<FileStatus>> {\n         let metadata = if is_symlink {\n             // FIXME: metadata for symlinks need testing.\n             std::fs::symlink_metadata(path)"}]}