{"sha": "f394bb57bb800be024e95e624d96bc698e04dde3", "node_id": "C_kwDOAAsO6NoAKGYzOTRiYjU3YmI4MDBiZTAyNGU5NWU2MjRkOTZiYzY5OGUwNGRkZTM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-25T16:49:39Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-29T13:19:50Z"}, "message": "Always use const param envs for const eval.\n\nNothing else makes sense, and there is no \"danger\" in doing so, as it only does something if there are const bounds, which are unstable. This used to happen implicitly via the inferctxt before, which was much more fragile.", "tree": {"sha": "e0f59b65e0a77e941740afb421ce145f656878f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f59b65e0a77e941740afb421ce145f656878f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f394bb57bb800be024e95e624d96bc698e04dde3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmGk03YACgkQbQF6ltjm\nwvkmpw//X5U0eT4uv9H4ncDKO52YS8xhXv+VjBR5qanXzFaKxqxigowTb+mspPQm\nnEVgr30HkfdnTiJi/dsd0p8edZQo+BBgV1Gs5yZ5AZrE/scga/2QuwPgAT7CY1Ps\nNVGFSQ7LHZ7jvb5xhqBdlXe+W8aKfnTxnhe2yD2HewpGogU0sUva34yDZMbGz6JV\n5RnFfmdPjNTEWyclCKuoVVnUr7Zx3zHBfeq4FBYL3o3t/o0MkyTa9wNsSThn7sr0\nXAgXFrADIghH5jMZcW+bdDKMF/5vyZ8Vq+mNTcuwJ8UFF49WHJzwlV2Wgd3GN7F5\naXoDu03eoJRlRpRoUYzEHHdQQ+ZDXGzqjGvCQH+63fUugZ8BeMsRI0CIXGDuAOgE\n+GUEM9/xU9qs0BkbJH+8H/plW6v2zoWgFjmbJXysiYLHp6NJEMdFd7v0EbdLd4Mh\nJ3OX3kkL/ZXcesrHMTAG/eQgHAnYS+v78aOoS+Lolwry471GpwiqPIHf1V/MQxhT\noaQjksOp+R6nqnrWC9NAuHL6AcoLpitq3VsRjKu+2V59+Vx8a6ufi+TCG6yzTGrz\nNthMcBHriA+qiFu2kBEmRhbjKZsoZI7eKp+H6t/+Enj3nTKfwsC0QxmuLAbTDuxV\nl3otpeBJt9e8QmrWWOmD04+oFurDzzZTOEBQ0k1bKepDEN+oWG8=\n=VCgZ\n-----END PGP SIGNATURE-----", "payload": "tree e0f59b65e0a77e941740afb421ce145f656878f9\nparent a9a79f657c4a6b86483f3c1165e6f0ebbf77c927\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1635180579 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1638191990 +0800\n\nAlways use const param envs for const eval.\n\nNothing else makes sense, and there is no \"danger\" in doing so, as it only does something if there are const bounds, which are unstable. This used to happen implicitly via the inferctxt before, which was much more fragile.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f394bb57bb800be024e95e624d96bc698e04dde3", "html_url": "https://github.com/rust-lang/rust/commit/f394bb57bb800be024e95e624d96bc698e04dde3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f394bb57bb800be024e95e624d96bc698e04dde3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a79f657c4a6b86483f3c1165e6f0ebbf77c927", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a79f657c4a6b86483f3c1165e6f0ebbf77c927", "html_url": "https://github.com/rust-lang/rust/commit/a9a79f657c4a6b86483f3c1165e6f0ebbf77c927"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "c5412affafe231797d1d3579f367a679c702dc5b", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=f394bb57bb800be024e95e624d96bc698e04dde3", "patch": "@@ -7,6 +7,7 @@ use crate::interpret::{\n };\n \n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -215,6 +216,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n+    assert!(key.param_env.constness() == hir::Constness::Const);\n     // see comment in eval_to_allocation_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n@@ -249,6 +251,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToAllocationRawResult<'tcx> {\n+    assert!(key.param_env.constness() == hir::Constness::Const);\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of\n     // reporting the same error twice here. To resolve this, we check whether we can evaluate the\n     // constant in the more restrictive `Reveal::UserFacing`, which most likely already was"}, {"sha": "6206deb2115334d5fbd863b742bc46db29349f2c", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=f394bb57bb800be024e95e624d96bc698e04dde3", "patch": "@@ -918,6 +918,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             self.param_env\n         };\n+        let param_env = param_env.with_const();\n         let val = self.tcx.eval_to_allocation_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }"}, {"sha": "1446c84a39768b9b35f400ab6dc99215397efce4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f394bb57bb800be024e95e624d96bc698e04dde3", "patch": "@@ -3248,6 +3248,7 @@ impl<'hir> Node<'hir> {\n             Node::Item(Item { kind: ItemKind::Const(..), .. })\n             | Node::Item(Item { kind: ItemKind::Static(..), .. })\n             | Node::TraitItem(TraitItem { kind: TraitItemKind::Const(..), .. })\n+            | Node::AnonConst(_)\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Const(..), .. }) => Constness::Const,\n \n             _ => Constness::NotConst,"}, {"sha": "f9831855633151ad1cf368d865dee4d2252900a8", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=f394bb57bb800be024e95e624d96bc698e04dde3", "patch": "@@ -64,6 +64,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         cid: GlobalId<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n+        let param_env = param_env.with_const();\n         // Const-eval shouldn't depend on lifetimes at all, so we can erase them, which should\n         // improve caching of queries.\n         let inputs = self.erase_regions(param_env.and(cid));\n@@ -92,6 +93,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         gid: GlobalId<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n+        let param_env = param_env.with_const();\n         trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n         let raw_const = self.eval_to_allocation_raw(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())"}, {"sha": "896e56026188f0a572bfe96f8082056fca20e598", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f394bb57bb800be024e95e624d96bc698e04dde3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f394bb57bb800be024e95e624d96bc698e04dde3", "patch": "@@ -1323,6 +1323,11 @@ impl<'tcx> ParamEnv<'tcx> {\n         self\n     }\n \n+    pub fn with_const(mut self) -> Self {\n+        self.packed.set_tag(ParamTag { constness: hir::Constness::Const, ..self.packed.tag() });\n+        self\n+    }\n+\n     /// Returns a new parameter environment with the same clauses, but\n     /// which \"reveals\" the true results of projections in all cases\n     /// (even for associated types that are specializable). This is"}]}