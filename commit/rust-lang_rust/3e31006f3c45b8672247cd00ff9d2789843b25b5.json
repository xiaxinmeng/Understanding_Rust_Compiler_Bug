{"sha": "3e31006f3c45b8672247cd00ff9d2789843b25b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzEwMDZmM2M0NWI4NjcyMjQ3Y2QwMGZmOWQyNzg5ODQzYjI1YjU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-31T17:29:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T17:29:28Z"}, "message": "Rollup merge of #69458 - Luro02:master, r=GuillaumeGomez,ollie27\n\nimprove folder name for persistent doc tests\n\nThis fixes #69411, by using the entire path as folder name and storing already visited paths in a HashMap + appending a number to the file name for duplicates.", "tree": {"sha": "88177bab700a3acaa083922742533734d62df74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88177bab700a3acaa083922742533734d62df74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e31006f3c45b8672247cd00ff9d2789843b25b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeg334CRBK7hj4Ov3rIwAAdHIIADFMw4fMTLkMgEhgciXxGTAJ\nj+UoMzgBLXmWrri9JQOzFBzo9iaFDdod1/Cnskg0AfVyW66WVYOqV79dzUQ+yFSo\n2NZmDLoLFFd8vQmGzBPzzyhk8Rvh1bi8aBQJz0Tg45qdTZzqKrmwmbaFWtYwfpcc\nDS/C6Z5Eeo54qVKZbxSyDKXwvCJRFMeAqPl/I0xEd+fqbG1f3y5qJsF9QvnUAVli\noZKHLn6FaMyXXNtyGYQFDFqAyXr2fGtBOzBR+snSlVb6+pJYlf0F8nqezArxYfbJ\n/UvqnYzN1DCg519ON52eNlvitw4GhEx5zyfKH6JeH2AEWvqrPux/2Vlgl9jj208=\n=cV6B\n-----END PGP SIGNATURE-----\n", "payload": "tree 88177bab700a3acaa083922742533734d62df74e\nparent f62cfa76c50108de48065fa3485b017ce9296b36\nparent 2e40ac79615bd21d6f3c5c579e922aecc11ef84e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585675768 +0200\ncommitter GitHub <noreply@github.com> 1585675768 +0200\n\nRollup merge of #69458 - Luro02:master, r=GuillaumeGomez,ollie27\n\nimprove folder name for persistent doc tests\n\nThis fixes #69411, by using the entire path as folder name and storing already visited paths in a HashMap + appending a number to the file name for duplicates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e31006f3c45b8672247cd00ff9d2789843b25b5", "html_url": "https://github.com/rust-lang/rust/commit/3e31006f3c45b8672247cd00ff9d2789843b25b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e31006f3c45b8672247cd00ff9d2789843b25b5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62cfa76c50108de48065fa3485b017ce9296b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62cfa76c50108de48065fa3485b017ce9296b36", "html_url": "https://github.com/rust-lang/rust/commit/f62cfa76c50108de48065fa3485b017ce9296b36"}, {"sha": "2e40ac79615bd21d6f3c5c579e922aecc11ef84e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e40ac79615bd21d6f3c5c579e922aecc11ef84e", "html_url": "https://github.com/rust-lang/rust/commit/2e40ac79615bd21d6f3c5c579e922aecc11ef84e"}], "stats": {"total": 103, "additions": 63, "deletions": 40}, "files": [{"sha": "f9e9a07914d692efc378f74b41ae61f5a73bde8d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 63, "deletions": 40, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3e31006f3c45b8672247cd00ff9d2789843b25b5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e31006f3c45b8672247cd00ff9d2789843b25b5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3e31006f3c45b8672247cd00ff9d2789843b25b5", "patch": "@@ -13,6 +13,7 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, FileName, Pos, Span, DUMMY_SP};\n use rustc_target::spec::TargetTriple;\n+use std::collections::HashMap;\n use std::env;\n use std::io::{self, Write};\n use std::panic;\n@@ -190,10 +191,23 @@ enum TestFailure {\n     UnexpectedRunPass,\n }\n \n+enum DirState {\n+    Temp(tempfile::TempDir),\n+    Perm(PathBuf),\n+}\n+\n+impl DirState {\n+    fn path(&self) -> &std::path::Path {\n+        match self {\n+            DirState::Temp(t) => t.path(),\n+            DirState::Perm(p) => p.as_path(),\n+        }\n+    }\n+}\n+\n fn run_test(\n     test: &str,\n     cratename: &str,\n-    filename: &FileName,\n     line: usize,\n     options: Options,\n     should_panic: bool,\n@@ -206,47 +220,11 @@ fn run_test(\n     mut error_codes: Vec<String>,\n     opts: &TestOptions,\n     edition: Edition,\n+    outdir: DirState,\n+    path: PathBuf,\n ) -> Result<(), TestFailure> {\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts, edition);\n \n-    // FIXME(#44940): if doctests ever support path remapping, then this filename\n-    // needs to be the result of `SourceMap::span_to_unmapped_path`.\n-    let path = match filename {\n-        FileName::Real(path) => path.clone(),\n-        _ => PathBuf::from(r\"doctest.rs\"),\n-    };\n-\n-    enum DirState {\n-        Temp(tempfile::TempDir),\n-        Perm(PathBuf),\n-    }\n-\n-    impl DirState {\n-        fn path(&self) -> &std::path::Path {\n-            match self {\n-                DirState::Temp(t) => t.path(),\n-                DirState::Perm(p) => p.as_path(),\n-            }\n-        }\n-    }\n-\n-    let outdir = if let Some(mut path) = options.persist_doctests {\n-        path.push(format!(\n-            \"{}_{}\",\n-            filename.to_string().rsplit('/').next().unwrap().replace(\".\", \"_\"),\n-            line\n-        ));\n-        std::fs::create_dir_all(&path).expect(\"Couldn't create directory for doctest executables\");\n-\n-        DirState::Perm(path)\n-    } else {\n-        DirState::Temp(\n-            TempFileBuilder::new()\n-                .prefix(\"rustdoctest\")\n-                .tempdir()\n-                .expect(\"rustdoc needs a tempdir\"),\n-        )\n-    };\n     let output_file = outdir.path().join(\"rust_out\");\n \n     let rustc_binary = options\n@@ -639,6 +617,7 @@ pub struct Collector {\n     position: Span,\n     source_map: Option<Lrc<SourceMap>>,\n     filename: Option<PathBuf>,\n+    visited_tests: HashMap<(String, usize), usize>,\n }\n \n impl Collector {\n@@ -662,6 +641,7 @@ impl Collector {\n             position: DUMMY_SP,\n             source_map,\n             filename,\n+            visited_tests: HashMap::new(),\n         }\n     }\n \n@@ -705,6 +685,48 @@ impl Tester for Collector {\n         let target = self.options.target.clone();\n         let target_str = target.to_string();\n \n+        // FIXME(#44940): if doctests ever support path remapping, then this filename\n+        // needs to be the result of `SourceMap::span_to_unmapped_path`.\n+        let path = match &filename {\n+            FileName::Real(path) => path.clone(),\n+            _ => PathBuf::from(r\"doctest.rs\"),\n+        };\n+\n+        let outdir = if let Some(mut path) = options.persist_doctests.clone() {\n+            // For example `module/file.rs` would become `module_file_rs`\n+            let folder_name = filename\n+                .to_string()\n+                .chars()\n+                .map(|c| if c == '/' || c == '.' { '_' } else { c })\n+                .collect::<String>();\n+\n+            path.push(format!(\n+                \"{name}_{line}_{number}\",\n+                name = folder_name,\n+                number = {\n+                    // Increases the current test number, if this file already\n+                    // exists or it creates a new entry with a test number of 0.\n+                    self.visited_tests\n+                        .entry((folder_name.clone(), line))\n+                        .and_modify(|v| *v += 1)\n+                        .or_insert(0)\n+                },\n+                line = line,\n+            ));\n+\n+            std::fs::create_dir_all(&path)\n+                .expect(\"Couldn't create directory for doctest executables\");\n+\n+            DirState::Perm(path)\n+        } else {\n+            DirState::Temp(\n+                TempFileBuilder::new()\n+                    .prefix(\"rustdoctest\")\n+                    .tempdir()\n+                    .expect(\"rustdoc needs a tempdir\"),\n+            )\n+        };\n+\n         debug!(\"creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -723,7 +745,6 @@ impl Tester for Collector {\n                 let res = run_test(\n                     &test,\n                     &cratename,\n-                    &filename,\n                     line,\n                     options,\n                     config.should_panic,\n@@ -736,6 +757,8 @@ impl Tester for Collector {\n                     config.error_codes,\n                     &opts,\n                     edition,\n+                    outdir,\n+                    path,\n                 );\n \n                 if let Err(err) = res {"}]}