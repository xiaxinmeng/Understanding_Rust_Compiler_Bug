{"sha": "af5a37e8440c503b5bb89ec94199f036d772b9e8", "node_id": "C_kwDOAAsO6NoAKGFmNWEzN2U4NDQwYzUwM2I1YmI4OWVjOTQxOTlmMDM2ZDc3MmI5ZTg", "commit": {"author": {"name": "Edward Shen", "email": "code@eddie.sh", "date": "2023-02-05T01:09:19Z"}, "committer": {"name": "Edward Shen", "email": "xes@meta.com", "date": "2023-02-06T19:26:36Z"}, "message": "Modify existing bounds if they exist", "tree": {"sha": "dd5dfbb46941c1027d7be39a6db81e716ae13122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd5dfbb46941c1027d7be39a6db81e716ae13122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af5a37e8440c503b5bb89ec94199f036d772b9e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFBBAABCAArFiEEPdMXsaq/0+dqJ5ht1qKsVZZ2DukFAmPhVG4NHHhlc0BtZXRh\nLmNvbQAKCRDWoqxVlnYO6c1JB/4rIS6r83IzL65chALTq9uo6u0Cfszcb16NU6nk\n7Y21J99fXcsREsapp7/bij1rljZx0WC0d34VtT4b3pHdhUGzHcboEYXyZ2oywfjS\nLKfqtfZfpEGkOlspU0+aBVvfXGxUMX+6Geh/C64z/41cDsgRDA+fxSu+I0UKt6+j\nXISSD5wLrOJu1Kp/N1twg65kQ0kci9Z8n+yUJSIP0uCwwCknprSdgbA63LzaiwRt\nLSW5Qc5uS24r2Eate4ayxrRzscP+WAjUfR7SQ0usFJBTkOKms4ELDDAQpVeXfcdD\nO1PyrFw00HE5D8w3zJLgrtaixwlOBx0NJlsoiRMX2UUUlA2I\n=430Z\n-----END PGP SIGNATURE-----", "payload": "tree dd5dfbb46941c1027d7be39a6db81e716ae13122\nparent 044a28a4091f2e1a5883f7fa990223f8b200a2cd\nauthor Edward Shen <code@eddie.sh> 1675559359 -0800\ncommitter Edward Shen <xes@meta.com> 1675711596 -0800\n\nModify existing bounds if they exist\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af5a37e8440c503b5bb89ec94199f036d772b9e8", "html_url": "https://github.com/rust-lang/rust/commit/af5a37e8440c503b5bb89ec94199f036d772b9e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af5a37e8440c503b5bb89ec94199f036d772b9e8/comments", "author": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044a28a4091f2e1a5883f7fa990223f8b200a2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/044a28a4091f2e1a5883f7fa990223f8b200a2cd", "html_url": "https://github.com/rust-lang/rust/commit/044a28a4091f2e1a5883f7fa990223f8b200a2cd"}], "stats": {"total": 229, "additions": 186, "deletions": 43}, "files": [{"sha": "7b07c2a463371d531fa5ee6c3569492cacd2cd49", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -803,6 +803,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 predicates\n                     .iter()\n                     .map(|(param, constraint)| (param.name.as_str(), &**constraint, None)),\n+                None,\n             );\n         }\n     }"}, {"sha": "3e416b89ca6ea5a417821cc3468ef09eb4155b57", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -136,6 +136,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                             &param_ty.name.as_str(),\n                             &constraint,\n                             None,\n+                            None,\n                         );\n                     }\n                 }"}, {"sha": "8c2423e3ca0d1f78f9c8847a73171c6fe7b1a207", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -176,6 +176,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 bounds.iter().map(|(param, constraint, def_id)| {\n                     (param.as_str(), constraint.as_str(), *def_id)\n                 }),\n+                None,\n             );\n             err.emit();\n         }"}, {"sha": "6942f4ad6a534f6b76b0073eea180fb00dba4f36", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -1385,6 +1385,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     generics,\n                     diag,\n                     vec![(param.name.as_str(), \"Clone\", Some(clone_trait_did))].into_iter(),\n+                    None,\n                 );\n             } else {\n                 self.suggest_derive(diag, &[(trait_ref.to_predicate(self.tcx), None, None)]);"}, {"sha": "984e8cf6a0eb909f872fb50574b53c586847a349", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 66, "deletions": 29, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -77,49 +77,86 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     (ty::Param(p), ty::Alias(ty::Projection, proj)) | (ty::Alias(ty::Projection, proj), ty::Param(p))\n                         if tcx.def_kind(proj.def_id) != DefKind::ImplTraitPlaceholder =>\n                     {\n-                        let generics = tcx.generics_of(body_owner_def_id);\n-                        let p_span = tcx.def_span(generics.type_param(p, tcx).def_id);\n+                        let p_def_id = tcx\n+                            .generics_of(body_owner_def_id)\n+                            .type_param(p, tcx)\n+                            .def_id;\n+                        let p_span = tcx.def_span(p_def_id);\n                         if !sp.contains(p_span) {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                         let hir = tcx.hir();\n                         let mut note = true;\n-                        if let Some(generics) = generics\n-                            .type_param(p, tcx)\n-                            .def_id\n+                        let parent = p_def_id\n                             .as_local()\n-                            .map(|id| hir.local_def_id_to_hir_id(id))\n-                            .and_then(|id| tcx.hir().find_parent(id))\n-                            .as_ref()\n-                            .and_then(|node| node.generics())\n+                            .and_then(|id| {\n+                                let local_id = hir.local_def_id_to_hir_id(id);\n+                                let generics = tcx.hir().find_parent(local_id)?.generics()?;\n+                                Some((id, generics))\n+                            });\n+                        if let Some((local_id, generics)) = parent\n                         {\n                             // Synthesize the associated type restriction `Add<Output = Expected>`.\n                             // FIXME: extract this logic for use in other diagnostics.\n                             let (trait_ref, assoc_substs) = proj.trait_ref_and_own_substs(tcx);\n-                            let path =\n-                                tcx.def_path_str_with_substs(trait_ref.def_id, trait_ref.substs);\n                             let item_name = tcx.item_name(proj.def_id);\n                             let item_args = self.format_generic_args(assoc_substs);\n \n-                            let path = if path.ends_with('>') {\n-                                format!(\n-                                    \"{}, {}{} = {}>\",\n-                                    &path[..path.len() - 1],\n-                                    item_name,\n-                                    item_args,\n-                                    p\n-                                )\n+                            // Here, we try to see if there's an existing\n+                            // trait implementation that matches the one that\n+                            // we're suggesting to restrict. If so, find the\n+                            // \"end\", whether it be at the end of the trait\n+                            // or the end of the generic arguments.\n+                            let mut matching_span = None;\n+                            let mut matched_end_of_args = false;\n+                            for bound in generics.bounds_for_param(local_id) {\n+                                let potential_spans = bound\n+                                    .bounds\n+                                    .iter()\n+                                    .find_map(|bound| {\n+                                        let bound_trait_path = bound.trait_ref()?.path;\n+                                        let def_id = bound_trait_path.res.opt_def_id()?;\n+                                        let generic_args = bound_trait_path.segments.iter().last().map(|path| path.args());\n+                                        (def_id == trait_ref.def_id).then_some((bound_trait_path.span, generic_args))\n+                                    });\n+\n+                                if let Some((end_of_trait, end_of_args)) = potential_spans {\n+                                    let args_span = end_of_args.and_then(|args| args.span());\n+                                    matched_end_of_args = args_span.is_some();\n+                                    matching_span = args_span\n+                                        .or_else(|| Some(end_of_trait))\n+                                        .map(|span| span.shrink_to_hi());\n+                                    break;\n+                                }\n+                            }\n+\n+                            if matched_end_of_args {\n+                                // Append suggestion to the end of our args\n+                                let path = format!(\", {}{} = {}\",item_name, item_args, p);\n+                                note = !suggest_constraining_type_param(\n+                                    tcx,\n+                                    generics,\n+                                    diag,\n+                                    &format!(\"{}\", proj.self_ty()),\n+                                    &path,\n+                                    None,\n+                                    matching_span,\n+                                );\n                             } else {\n-                                format!(\"{}<{}{} = {}>\", path, item_name, item_args, p)\n-                            };\n-                            note = !suggest_constraining_type_param(\n-                                tcx,\n-                                generics,\n-                                diag,\n-                                &format!(\"{}\", proj.self_ty()),\n-                                &path,\n-                                None,\n-                            );\n+                                // Suggest adding a bound to an existing trait\n+                                // or if the trait doesn't exist, add the trait\n+                                // and the suggested bounds.\n+                                let path = format!(\"<{}{} = {}>\", item_name, item_args, p);\n+                                note = !suggest_constraining_type_param(\n+                                    tcx,\n+                                    generics,\n+                                    diag,\n+                                    &format!(\"{}\", proj.self_ty()),\n+                                    &path,\n+                                    None,\n+                                    matching_span,\n+                                );\n+                            }\n                         }\n                         if note {\n                             diag.note(\"you might be missing a type parameter or trait bound\");"}, {"sha": "0a30ae9d0aa78522c461b8a6dff9c81d7e0b28e9", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -193,19 +193,24 @@ fn suggest_removing_unsized_bound(\n }\n \n /// Suggest restricting a type param with a new bound.\n+///\n+/// If `span_to_replace` is provided, then that span will be replaced with the\n+/// `constraint`. If one wasn't provided, then the full bound will be suggested.\n pub fn suggest_constraining_type_param(\n     tcx: TyCtxt<'_>,\n     generics: &hir::Generics<'_>,\n     err: &mut Diagnostic,\n     param_name: &str,\n     constraint: &str,\n     def_id: Option<DefId>,\n+    span_to_replace: Option<Span>,\n ) -> bool {\n     suggest_constraining_type_params(\n         tcx,\n         generics,\n         err,\n         [(param_name, constraint, def_id)].into_iter(),\n+        span_to_replace,\n     )\n }\n \n@@ -215,6 +220,7 @@ pub fn suggest_constraining_type_params<'a>(\n     generics: &hir::Generics<'_>,\n     err: &mut Diagnostic,\n     param_names_and_constraints: impl Iterator<Item = (&'a str, &'a str, Option<DefId>)>,\n+    span_to_replace: Option<Span>,\n ) -> bool {\n     let mut grouped = FxHashMap::default();\n     param_names_and_constraints.for_each(|(param_name, constraint, def_id)| {\n@@ -253,7 +259,9 @@ pub fn suggest_constraining_type_params<'a>(\n         let mut suggest_restrict = |span, bound_list_non_empty| {\n             suggestions.push((\n                 span,\n-                if bound_list_non_empty {\n+                if span_to_replace.is_some() {\n+                    constraint.clone()\n+                } else if bound_list_non_empty {\n                     format!(\" + {}\", constraint)\n                 } else {\n                     format!(\" {}\", constraint)\n@@ -262,6 +270,11 @@ pub fn suggest_constraining_type_params<'a>(\n             ))\n         };\n \n+        if let Some(span) = span_to_replace {\n+            suggest_restrict(span, true);\n+            continue;\n+        }\n+\n         // When the type parameter has been provided bounds\n         //\n         //    Message:"}, {"sha": "91da690a00056d58fc9fcfec0746d832c01de720", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -679,6 +679,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         &param_name,\n                         &constraint,\n                         Some(trait_pred.def_id()),\n+                        None,\n                     ) {\n                         return;\n                     }\n@@ -1087,6 +1088,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     param.name.as_str(),\n                     \"Clone\",\n                     Some(clone_trait),\n+                    None,\n                 );\n             }\n             err.span_suggestion_verbose("}, {"sha": "2281d9419b461e03853b2b3b03e348501cb1271e", "filename": "tests/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -16,8 +16,8 @@ LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n    |                                                                ^^^^^^^^^^ required by this bound in `UnsafeCopy`\n help: consider further restricting this bound\n    |\n-LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<'_, T> for T {\n-   |                                +++++++++++++++++++\n+LL | impl<T: Copy + std::ops::Deref<Target = T>> UnsafeCopy<'_, T> for T {\n+   |                               ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f0212e985a92cdd95e411b4fcc777ff8a6e859dc", "filename": "tests/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -15,8 +15,8 @@ LL |     type Item<'a>: std::ops::Deref<Target = T>;\n    |                                    ^^^^^^^^^^ required by this bound in `UnsafeCopy::Item`\n help: consider further restricting this bound\n    |\n-LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<T> for T {\n-   |                                +++++++++++++++++++\n+LL | impl<T: Copy + std::ops::Deref<Target = T>> UnsafeCopy<T> for T {\n+   |                               ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "054adbffbeafb66317e041b162ed5520584b4c3a", "filename": "tests/ui/generic-associated-types/missing-bounds.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -4,7 +4,7 @@ use std::ops::Add;\n \n struct A<B>(B);\n \n-impl<B> Add for A<B> where B: Add + Add<Output = B> {\n+impl<B> Add for A<B> where B: Add<Output = B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n@@ -14,7 +14,7 @@ impl<B> Add for A<B> where B: Add + Add<Output = B> {\n \n struct C<B>(B);\n \n-impl<B: Add + Add<Output = B>> Add for C<B> {\n+impl<B: Add<Output = B>> Add for C<B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n@@ -34,7 +34,7 @@ impl<B: std::ops::Add<Output = B>> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add + Add<Output = B>> Add for E<B> where B: Add<Output = B> {\n+impl<B: Add<Output = B>> Add for E<B> where B: Add<Output = B> {\n     //~^ ERROR equality constraints are not yet supported in `where` clauses\n     type Output = Self;\n "}, {"sha": "535edec575a7d715f1e061740db25993337a3ac4", "filename": "tests/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -37,8 +37,8 @@ LL | struct A<B>(B);\n    |        ^\n help: consider further restricting this bound\n    |\n-LL | impl<B> Add for A<B> where B: Add + Add<Output = B> {\n-   |                                   +++++++++++++++++\n+LL | impl<B> Add for A<B> where B: Add<Output = B> {\n+   |                                  ++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:21:14\n@@ -60,8 +60,8 @@ LL | struct C<B>(B);\n    |        ^\n help: consider further restricting this bound\n    |\n-LL | impl<B: Add + Add<Output = B>> Add for C<B> {\n-   |             +++++++++++++++++\n+LL | impl<B: Add<Output = B>> Add for C<B> {\n+   |            ++++++++++++\n \n error[E0369]: cannot add `B` to `B`\n   --> $DIR/missing-bounds.rs:31:21\n@@ -96,8 +96,8 @@ LL | struct E<B>(B);\n    |        ^\n help: consider further restricting this bound\n    |\n-LL | impl<B: Add + Add<Output = B>> Add for E<B> where <B as Add>::Output = B {\n-   |             +++++++++++++++++\n+LL | impl<B: Add<Output = B>> Add for E<B> where <B as Add>::Output = B {\n+   |            ++++++++++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "07712ce0de684ae624bf3e527754e234eeb2c58b", "filename": "tests/ui/suggestions/restrict-existing-type-bounds.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.rs?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -0,0 +1,30 @@\n+pub trait TryAdd<Rhs = Self> {\n+    type Error;\n+    type Output;\n+\n+    fn try_add(self, rhs: Rhs) -> Result<Self::Output, Self::Error>;\n+}\n+\n+impl<T: TryAdd> TryAdd for Option<T> {\n+    type Error = <T as TryAdd>::Error;\n+    type Output = Option<<T as TryAdd>::Output>;\n+\n+    fn try_add(self, rhs: Self) -> Result<Self::Output, Self::Error> {\n+        Ok(self) //~ ERROR mismatched types\n+    }\n+}\n+\n+struct Other<A>(A);\n+\n+struct X;\n+\n+impl<T: TryAdd<Error = X>> TryAdd for Other<T> {\n+    type Error = <T as TryAdd>::Error;\n+    type Output = Other<<T as TryAdd>::Output>;\n+\n+    fn try_add(self, rhs: Self) -> Result<Self::Output, Self::Error> {\n+        Ok(self) //~ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "14a244b790a6380d51eb4f486540d66c08247063", "filename": "tests/ui/suggestions/restrict-existing-type-bounds.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af5a37e8440c503b5bb89ec94199f036d772b9e8/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.stderr?ref=af5a37e8440c503b5bb89ec94199f036d772b9e8", "patch": "@@ -0,0 +1,57 @@\n+error[E0308]: mismatched types\n+  --> $DIR/restrict-existing-type-bounds.rs:13:12\n+   |\n+LL | impl<T: TryAdd> TryAdd for Option<T> {\n+   |      - this type parameter\n+...\n+LL |         Ok(self)\n+   |         -- ^^^^ expected `Option<<T as TryAdd>::Output>`, found `Option<T>`\n+   |         |\n+   |         arguments to this enum variant are incorrect\n+   |\n+   = note: expected enum `Option<<T as TryAdd>::Output>`\n+              found enum `Option<T>`\n+help: the type constructed contains `Option<T>` due to the type of the argument passed\n+  --> $DIR/restrict-existing-type-bounds.rs:13:9\n+   |\n+LL |         Ok(self)\n+   |         ^^^----^\n+   |            |\n+   |            this argument influences the type of `Ok`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: TryAdd<Output = T>> TryAdd for Option<T> {\n+   |               ++++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/restrict-existing-type-bounds.rs:26:12\n+   |\n+LL | impl<T: TryAdd<Error = X>> TryAdd for Other<T> {\n+   |      - this type parameter\n+...\n+LL |         Ok(self)\n+   |         -- ^^^^ expected `Other<<T as TryAdd>::Output>`, found `Other<T>`\n+   |         |\n+   |         arguments to this enum variant are incorrect\n+   |\n+   = note: expected struct `Other<<T as TryAdd>::Output>`\n+              found struct `Other<T>`\n+help: the type constructed contains `Other<T>` due to the type of the argument passed\n+  --> $DIR/restrict-existing-type-bounds.rs:26:9\n+   |\n+LL |         Ok(self)\n+   |         ^^^----^\n+   |            |\n+   |            this argument influences the type of `Ok`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: TryAdd<Error = X, Output = T>> TryAdd for Other<T> {\n+   |                         ++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}