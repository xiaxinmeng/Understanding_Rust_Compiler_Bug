{"sha": "0a6992f5bfb6a2e879d23ff015ae27e2534095aa", "node_id": "C_kwDOAAsO6NoAKDBhNjk5MmY1YmZiNmEyZTg3OWQyM2ZmMDE1YWUyN2UyNTM0MDk1YWE", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-24T00:15:19Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-24T02:11:48Z"}, "message": "impl deref.rs<&Self> for Simd<T, _>\n\nInstead of implementing each \"deref\" pattern for every single scalar,\nwe can use type parameters for Simd operating on &Self.\nWe can use a macro, but keep it cleaner and more explicit.", "tree": {"sha": "9ca4cca94234cffc5d5abf34a2f66ad3581d7c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca4cca94234cffc5d5abf34a2f66ad3581d7c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6992f5bfb6a2e879d23ff015ae27e2534095aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6992f5bfb6a2e879d23ff015ae27e2534095aa", "html_url": "https://github.com/rust-lang/rust/commit/0a6992f5bfb6a2e879d23ff015ae27e2534095aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6992f5bfb6a2e879d23ff015ae27e2534095aa/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8d6b6844602f80af79cd96401339ec594d472d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d6b6844602f80af79cd96401339ec594d472d8", "html_url": "https://github.com/rust-lang/rust/commit/b8d6b6844602f80af79cd96401339ec594d472d8"}], "stats": {"total": 132, "additions": 76, "deletions": 56}, "files": [{"sha": "f5683ebb2c097a1dccc0606b511c13d9b4e7c62a", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0a6992f5bfb6a2e879d23ff015ae27e2534095aa/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6992f5bfb6a2e879d23ff015ae27e2534095aa/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=0a6992f5bfb6a2e879d23ff015ae27e2534095aa", "patch": "@@ -1,5 +1,11 @@\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use core::ops::{Add, Mul};\n+use core::ops::{BitAnd, BitOr, BitXor};\n+use core::ops::{Div, Rem, Sub};\n+use core::ops::{Shl, Shr};\n+\n+mod deref;\n \n impl<I, T, const LANES: usize> core::ops::Index<I> for Simd<T, LANES>\n where\n@@ -57,42 +63,6 @@ macro_rules! impl_ref_ops {\n             $(#[$attrs])*\n             fn $fn($self_tok, $rhs_arg: $rhs_arg_ty) -> Self::Output $body\n         }\n-\n-        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type\n-        where\n-            LaneCount<$lanes2>: SupportedLaneCount,\n-        {\n-            type Output = <$type as core::ops::$trait<$rhs>>::Output;\n-\n-            $(#[$attrs])*\n-            fn $fn($self_tok, $rhs_arg: &$rhs) -> Self::Output {\n-                core::ops::$trait::$fn($self_tok, *$rhs_arg)\n-            }\n-        }\n-\n-        impl<const $lanes: usize> core::ops::$trait<$rhs> for &'_ $type\n-        where\n-            LaneCount<$lanes2>: SupportedLaneCount,\n-        {\n-            type Output = <$type as core::ops::$trait<$rhs>>::Output;\n-\n-            $(#[$attrs])*\n-            fn $fn($self_tok, $rhs_arg: $rhs) -> Self::Output {\n-                core::ops::$trait::$fn(*$self_tok, $rhs_arg)\n-            }\n-        }\n-\n-        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for &'_ $type\n-        where\n-            LaneCount<$lanes2>: SupportedLaneCount,\n-        {\n-            type Output = <$type as core::ops::$trait<$rhs>>::Output;\n-\n-            $(#[$attrs])*\n-            fn $fn($self_tok, $rhs_arg: &$rhs) -> Self::Output {\n-                core::ops::$trait::$fn(*$self_tok, *$rhs_arg)\n-            }\n-        }\n     };\n \n     // binary assignment op\n@@ -112,16 +82,6 @@ macro_rules! impl_ref_ops {\n             $(#[$attrs])*\n             fn $fn(&mut $self_tok, $rhs_arg: $rhs_arg_ty) $body\n         }\n-\n-        impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type\n-        where\n-            LaneCount<$lanes2>: SupportedLaneCount,\n-        {\n-            $(#[$attrs])*\n-            fn $fn(&mut $self_tok, $rhs_arg: &$rhs_arg_ty) {\n-                core::ops::$trait::$fn($self_tok, *$rhs_arg)\n-            }\n-        }\n     };\n \n     // unary op\n@@ -141,16 +101,6 @@ macro_rules! impl_ref_ops {\n             type Output = $output;\n             fn $fn($self_tok) -> Self::Output $body\n         }\n-\n-        impl<const $lanes: usize> core::ops::$trait for &'_ $type\n-        where\n-            LaneCount<$lanes2>: SupportedLaneCount,\n-        {\n-            type Output = <$type as core::ops::$trait>::Output;\n-            fn $fn($self_tok) -> Self::Output {\n-                core::ops::$trait::$fn(*$self_tok)\n-            }\n-        }\n     }\n }\n "}, {"sha": "1138b9494f6051b79c90ea95105d8f75c11ec436", "filename": "crates/core_simd/src/ops/deref.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0a6992f5bfb6a2e879d23ff015ae27e2534095aa/crates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6992f5bfb6a2e879d23ff015ae27e2534095aa/crates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs?ref=0a6992f5bfb6a2e879d23ff015ae27e2534095aa", "patch": "@@ -0,0 +1,70 @@\n+//! This module hacks in \"implicit deref\" for Simd's operators.\n+//! Ideally, Rust would take care of this itself,\n+//! and method calls usually handle the LHS implicitly.\n+//! So, we'll manually deref the RHS.\n+use super::*;\n+\n+macro_rules! deref_ops {\n+    ($(impl<T, const LANES: usize> $trait:ident<&Self> for Simd<T, LANES> {\n+            fn $call:ident(rhs: &Self)\n+        })*) => {\n+        $(impl<T, const LANES: usize> $trait<&Self> for Simd<T, LANES>\n+        where\n+            Self: $trait<Self, Output = Self>,\n+            T: SimdElement,\n+            LaneCount<LANES>: SupportedLaneCount,\n+        {\n+            type Output = Self;\n+\n+            #[inline]\n+            #[must_use = \"operator returns a new vector without mutating the inputs\"]\n+            fn $call(self, rhs: &Self) -> Self::Output {\n+                self.$call(*rhs)\n+            }\n+        })*\n+    }\n+}\n+\n+deref_ops! {\n+    // Arithmetic\n+    impl<T, const LANES: usize> Add<&Self> for Simd<T, LANES> {\n+        fn add(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> Mul<&Self> for Simd<T, LANES> {\n+        fn mul(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> Sub<&Self> for Simd<T, LANES> {\n+        fn sub(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> Div<&Self> for Simd<T, LANES> {\n+        fn div(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> Rem<&Self> for Simd<T, LANES> {\n+        fn rem(rhs: &Self)\n+    }\n+\n+    // Bitops\n+    impl<T, const LANES: usize> BitAnd<&Self> for Simd<T, LANES> {\n+        fn bitand(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> BitOr<&Self> for Simd<T, LANES> {\n+        fn bitor(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> BitXor<&Self> for Simd<T, LANES> {\n+        fn bitxor(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> Shl<&Self> for Simd<T, LANES> {\n+        fn shl(rhs: &Self)\n+    }\n+\n+    impl<T, const LANES: usize> Shr<&Self> for Simd<T, LANES> {\n+        fn shr(rhs: &Self)\n+    }\n+}"}]}