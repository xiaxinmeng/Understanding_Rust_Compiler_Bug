{"sha": "f99b775de77ff7e138a3eca3d739f80bd797028f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OWI3NzVkZTc3ZmY3ZTEzOGEzZWNhM2Q3MzlmODBiZDc5NzAyOGY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-29T21:40:29Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-29T21:40:29Z"}, "message": "Rename is_dummy to has_braces", "tree": {"sha": "6cd61b44b975b3fe60fb7d40ce5916eb690bc9a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd61b44b975b3fe60fb7d40ce5916eb690bc9a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99b775de77ff7e138a3eca3d739f80bd797028f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99b775de77ff7e138a3eca3d739f80bd797028f", "html_url": "https://github.com/rust-lang/rust/commit/f99b775de77ff7e138a3eca3d739f80bd797028f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99b775de77ff7e138a3eca3d739f80bd797028f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1323abf93f28b0847fe05663c3fb774b8c707b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/1323abf93f28b0847fe05663c3fb774b8c707b60", "html_url": "https://github.com/rust-lang/rust/commit/1323abf93f28b0847fe05663c3fb774b8c707b60"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1ea7982ba66fed7c8805019df45ec2e884a949a9", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99b775de77ff7e138a3eca3d739f80bd797028f/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99b775de77ff7e138a3eca3d739f80bd797028f/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=f99b775de77ff7e138a3eca3d739f80bd797028f", "patch": "@@ -131,7 +131,7 @@ fn rewrite_closure_with_block(\n         rules: ast::BlockCheckMode::Default,\n         span: body.span,\n     };\n-    let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, shape, true)?;\n+    let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, shape, false)?;\n     Some(format!(\"{} {}\", prefix, block))\n }\n "}, {"sha": "d1303d952768152cd10072bc59c5b8cf254990e0", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f99b775de77ff7e138a3eca3d739f80bd797028f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99b775de77ff7e138a3eca3d739f80bd797028f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f99b775de77ff7e138a3eca3d739f80bd797028f", "patch": "@@ -116,7 +116,7 @@ pub fn format_expr(\n                         rw\n                     } else {\n                         let prefix = block_prefix(context, block, shape)?;\n-                        rewrite_block_with_visitor(context, &prefix, block, shape, false)\n+                        rewrite_block_with_visitor(context, &prefix, block, shape, true)\n                     }\n                 }\n                 ExprType::SubExpression => block.rewrite(context, shape),\n@@ -603,7 +603,7 @@ pub fn rewrite_block_with_visitor(\n     prefix: &str,\n     block: &ast::Block,\n     shape: Shape,\n-    is_dummy: bool,\n+    has_braces: bool,\n ) -> Option<String> {\n     if let rw @ Some(_) = rewrite_empty_block(context, block, shape) {\n         return rw;\n@@ -621,7 +621,7 @@ pub fn rewrite_block_with_visitor(\n         ast::BlockCheckMode::Default => visitor.last_pos = block.span.lo(),\n     }\n \n-    visitor.visit_block(block, None, is_dummy);\n+    visitor.visit_block(block, None, has_braces);\n     Some(format!(\"{}{}\", prefix, visitor.buffer))\n }\n \n@@ -636,7 +636,7 @@ impl Rewrite for ast::Block {\n         let prefix = block_prefix(context, self, shape)?;\n         let shape = shape.offset_left(last_line_width(&prefix))?;\n \n-        let result = rewrite_block_with_visitor(context, &prefix, self, shape, false);\n+        let result = rewrite_block_with_visitor(context, &prefix, self, shape, true);\n         if let Some(ref result_str) = result {\n             if result_str.lines().count() <= 3 {\n                 if let rw @ Some(_) = rewrite_single_line_block(context, &prefix, self, shape) {\n@@ -1067,7 +1067,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         let mut block_context = context.clone();\n         block_context.is_if_else_block = self.else_block.is_some();\n         let block_str =\n-            rewrite_block_with_visitor(&block_context, \"\", self.block, block_shape, false)?;\n+            rewrite_block_with_visitor(&block_context, \"\", self.block, block_shape, true)?;\n \n         let mut result = format!(\"{}{}\", cond_str, block_str);\n "}, {"sha": "85a8fb38f077dac8233c7e00aaa93e5d9232f1ca", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f99b775de77ff7e138a3eca3d739f80bd797028f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99b775de77ff7e138a3eca3d739f80bd797028f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=f99b775de77ff7e138a3eca3d739f80bd797028f", "patch": "@@ -94,7 +94,7 @@ impl<'a> FmtVisitor<'a> {\n         &mut self,\n         b: &ast::Block,\n         inner_attrs: Option<&[ast::Attribute]>,\n-        is_dummy: bool,\n+        has_braces: bool,\n     ) {\n         debug!(\n             \"visit_block: {:?} {:?}\",\n@@ -103,7 +103,7 @@ impl<'a> FmtVisitor<'a> {\n         );\n \n         // Check if this block has braces.\n-        let brace_compensation = BytePos(if is_dummy { 0 } else { 1 });\n+        let brace_compensation = BytePos(if has_braces { 1 } else { 0 });\n \n         self.last_pos = self.last_pos + brace_compensation;\n         self.block_indent = self.block_indent.block_indent(self.config);\n@@ -275,7 +275,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         self.last_pos = source!(self, block.span).lo();\n-        self.visit_block(block, inner_attrs, false)\n+        self.visit_block(block, inner_attrs, true)\n     }\n \n     pub fn visit_item(&mut self, item: &ast::Item) {"}]}