{"sha": "435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "node_id": "C_kwDOAAsO6NoAKDQzNWE4YWQ4NmM3YTMzYmQ3ZmZiOTFjNTkwMzk5NDM0MDhkM2I2YWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T13:33:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T13:33:20Z"}, "message": "Auto merge of #10802 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "da9d573b1e48276078c6bf3e54d561bf26494c99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da9d573b1e48276078c6bf3e54d561bf26494c99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "html_url": "https://github.com/rust-lang/rust/commit/435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "url": "https://api.github.com/repos/rust-lang/rust/commits/28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "html_url": "https://github.com/rust-lang/rust/commit/28dddc72579c379f3cfe8ec0bbd008ed1a506a24"}, {"sha": "2e95a4fd4c78e9145ff8ed07e7ded566d53b8e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e95a4fd4c78e9145ff8ed07e7ded566d53b8e91", "html_url": "https://github.com/rust-lang/rust/commit/2e95a4fd4c78e9145ff8ed07e7ded566d53b8e91"}], "stats": {"total": 1006, "additions": 151, "deletions": 855}, "files": [{"sha": "423eee47742e00d9057d341befe1f0c730a8a605", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -134,12 +134,8 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::doc::NEEDLESS_DOCTEST_MAIN_INFO,\n     crate::doc::UNNECESSARY_SAFETY_DOC_INFO,\n     crate::double_parens::DOUBLE_PARENS_INFO,\n-    crate::drop_forget_ref::DROP_COPY_INFO,\n     crate::drop_forget_ref::DROP_NON_DROP_INFO,\n-    crate::drop_forget_ref::DROP_REF_INFO,\n-    crate::drop_forget_ref::FORGET_COPY_INFO,\n     crate::drop_forget_ref::FORGET_NON_DROP_INFO,\n-    crate::drop_forget_ref::FORGET_REF_INFO,\n     crate::drop_forget_ref::UNDROPPED_MANUALLY_DROPS_INFO,\n     crate::duplicate_mod::DUPLICATE_MOD_INFO,\n     crate::else_if_without_else::ELSE_IF_WITHOUT_ELSE_INFO,"}, {"sha": "b27ffe73ffda442d153333d8a92bcd5b1e91de1f", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -1424,6 +1424,7 @@ fn ty_auto_deref_stability<'tcx>(\n                 continue;\n             },\n             ty::Param(_) => TyPosition::new_deref_stable_for_result(precedence, ty),\n+            ty::Alias(ty::Inherent, _) => unreachable!(\"inherent projection should have been normalized away above\"),\n             ty::Alias(ty::Projection, _) if ty.has_non_region_param() => {\n                 TyPosition::new_deref_stable_for_result(precedence, ty)\n             },"}, {"sha": "b2f7d026cc8b24a00cea5c932b21beae676bc919", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 5, "deletions": 112, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -7,102 +7,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::drop` with a reference\n-    /// instead of an owned value.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `drop` on a reference will only drop the\n-    /// reference itself, which is a no-op. It will not call the `drop` method (from\n-    /// the `Drop` trait implementation) on the underlying referenced value, which\n-    /// is likely what was intended.\n-    ///\n-    /// ### Example\n-    /// ```ignore\n-    /// let mut lock_guard = mutex.lock();\n-    /// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex\n-    /// // still locked\n-    /// operation_that_requires_mutex_to_be_unlocked();\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DROP_REF,\n-    correctness,\n-    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::forget` with a reference\n-    /// instead of an owned value.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `forget` on a reference will only forget the\n-    /// reference itself, which is a no-op. It will not forget the underlying\n-    /// referenced\n-    /// value, which is likely what was intended.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x = Box::new(1);\n-    /// std::mem::forget(&x) // Should have been forget(x), x will still be dropped\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub FORGET_REF,\n-    correctness,\n-    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::drop` with a value\n-    /// that derives the Copy trait\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `std::mem::drop` [does nothing for types that\n-    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n-    /// value will be copied and moved into the function on invocation.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x: i32 = 42; // i32 implements Copy\n-    /// std::mem::drop(x) // A copy of x is passed to the function, leaving the\n-    ///                   // original unaffected\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DROP_COPY,\n-    correctness,\n-    \"calls to `std::mem::drop` with a value that implements Copy\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::forget` with a value that\n-    /// derives the Copy trait\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `std::mem::forget` [does nothing for types that\n-    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n-    /// value will be copied and moved into the function on invocation.\n-    ///\n-    /// An alternative, but also valid, explanation is that Copy types do not\n-    /// implement\n-    /// the Drop trait, which means they have no destructors. Without a destructor,\n-    /// there\n-    /// is nothing for `std::mem::forget` to ignore.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x: i32 = 42; // i32 implements Copy\n-    /// std::mem::forget(x) // A copy of x is passed to the function, leaving the\n-    ///                     // original unaffected\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub FORGET_COPY,\n-    correctness,\n-    \"calls to `std::mem::forget` with a value that implements Copy\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `std::mem::drop` with a value that does not implement `Drop`.\n@@ -172,24 +76,12 @@ declare_clippy_lint! {\n     \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n }\n \n-const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n-                                Dropping a reference does nothing\";\n-const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n-                                  Forgetting a reference does nothing\";\n-const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements `Copy`. \\\n-                                 Dropping a copy leaves the original intact\";\n-const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n-                                   Forgetting a copy leaves the original intact\";\n const DROP_NON_DROP_SUMMARY: &str = \"call to `std::mem::drop` with a value that does not implement `Drop`. \\\n                                  Dropping such a type only extends its contained lifetimes\";\n const FORGET_NON_DROP_SUMMARY: &str = \"call to `std::mem::forget` with a value that does not implement `Drop`. \\\n                                    Forgetting such a type is the same as dropping it\";\n \n declare_lint_pass!(DropForgetRef => [\n-    DROP_REF,\n-    FORGET_REF,\n-    DROP_COPY,\n-    FORGET_COPY,\n     DROP_NON_DROP,\n     FORGET_NON_DROP,\n     UNDROPPED_MANUALLY_DROPS\n@@ -206,10 +98,11 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => (DROP_REF, DROP_REF_SUMMARY),\n-                sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n-                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n-                sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),\n+                // early return for uplifted lints: drop_ref, drop_copy, forget_ref, forget_copy\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n+                sym::mem_forget if arg_ty.is_ref() => return,\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,\n+                sym::mem_forget if is_copy => return,\n                 sym::mem_drop if is_type_lang_item(cx, arg_ty, LangItem::ManuallyDrop) => {\n                     span_lint_and_help(\n                         cx,"}, {"sha": "b442a4ac5f611065c4c8e8f227fb9559d2bd5d43", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -392,7 +392,7 @@ pub fn read_conf(sess: &Session, path: &io::Result<(Option<PathBuf>, Vec<String>\n     conf\n }\n \n-#[derive(Default)] //~ ERROR no such field\n+#[derive(Default)]\n struct RegistrationGroups {\n     all: Vec<LintId>,\n     cargo: Vec<LintId>,"}, {"sha": "ae8262ace96874a4254e145fdca4cc95fdb139b7", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -282,7 +282,7 @@ impl<'a> NormalizedPat<'a> {\n                 // TODO: Handle negative integers. They're currently treated as a wild match.\n                 ExprKind::Lit(lit) => match lit.node {\n                     LitKind::Str(sym, _) => Self::LitStr(sym),\n-                    LitKind::ByteStr(ref bytes, _) => Self::LitBytes(bytes),\n+                    LitKind::ByteStr(ref bytes, _) | LitKind::CStr(ref bytes, _) => Self::LitBytes(bytes),\n                     LitKind::Byte(val) => Self::LitInt(val.into()),\n                     LitKind::Char(val) => Self::LitInt(val.into()),\n                     LitKind::Int(val, _) => Self::LitInt(val),"}, {"sha": "e81e09da42547a5be77f0d6841d5e7887cdd73b2", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -344,10 +344,11 @@ fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expecte\n     let Some(id) = cx.typeck_results().qpath_res(path, pat.hir_id).opt_def_id() else { return false };\n \n     match expected_item {\n-        Item::Lang(expected_lang_item) => {\n-            let expected_id = cx.tcx.lang_items().require(expected_lang_item).unwrap();\n-            cx.tcx.parent(id) == expected_id\n-        },\n+        Item::Lang(expected_lang_item) => cx\n+            .tcx\n+            .lang_items()\n+            .get(expected_lang_item)\n+            .map_or(false, |expected_id| cx.tcx.parent(id) == expected_id),\n         Item::Diag(expected_ty, expected_variant) => {\n             let ty = cx.typeck_results().pat_ty(pat);\n "}, {"sha": "67b7d3691dc02df12ce70157704edc49d262cf1b", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -385,6 +385,9 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n+                    // FIXME: the `subst_identity()` below seems incorrect, since we eventually\n+                    // call `tcx.try_subst_and_normalize_erasing_regions` further down\n+                    // (i.e., we are explicitly not in the identity context).\n                     let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n                     if let Some(arg_index) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == expr.hir_id)\n                         && let Some(param_ty) = fn_sig.inputs().get(arg_index)\n@@ -435,7 +438,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         let output_ty = fn_sig.output();\n                         if output_ty.contains(*param_ty) {\n                             if let Ok(new_ty)  = cx.tcx.try_subst_and_normalize_erasing_regions(\n-                                new_subst, cx.param_env, output_ty) {\n+                                new_subst, cx.param_env, EarlyBinder(output_ty)) {\n                                 expr = parent_expr;\n                                 ty = new_ty;\n                                 continue;"}, {"sha": "a2c3465cde4a3c4344f6db8e647f97745b0245cd", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -33,9 +33,13 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n+    (\"clippy::drop_copy\", \"drop_copy\"),\n+    (\"clippy::drop_ref\", \"drop_ref\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n+    (\"clippy::forget_copy\", \"forget_copy\"),\n+    (\"clippy::forget_ref\", \"forget_ref\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "2f2e84fa35a12ce8f7dad577678e6bfdd504fefe", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use clippy_utils::visitors::is_expr_unsafe;\n use clippy_utils::{get_parent_node, match_libc_symbol};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Block, BlockCheckMode, Expr, ExprKind, Node, UnsafeSource};\n+use rustc_hir::{Block, BlockCheckMode, Expr, ExprKind, LangItem, Node, UnsafeSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for StrlenOnCStrings {\n                 let val_name = snippet_with_context(cx, self_arg.span, ctxt, \"..\", &mut app).0;\n                 let method_name = if is_type_diagnostic_item(cx, ty, sym::cstring_type) {\n                     \"as_bytes\"\n-                } else if is_type_diagnostic_item(cx, ty, sym::CStr) {\n+                } else if is_type_lang_item(cx, ty, LangItem::CStr) {\n                     \"to_bytes\"\n                 } else {\n                     return;"}, {"sha": "3c2bf5abab2b5783d2685cc7000b5ce4402d541e", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -304,6 +304,11 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"ByteStr(ref {vec})\");\n                 chain!(self, \"let [{:?}] = **{vec}\", vec.value);\n             },\n+            LitKind::CStr(ref vec, _) => {\n+                bind!(self, vec);\n+                kind!(\"CStr(ref {vec})\");\n+                chain!(self, \"let [{:?}] = **{vec}\", vec.value);\n+            },\n             LitKind::Str(s, _) => {\n                 bind!(self, s);\n                 kind!(\"Str({s}, _)\");"}, {"sha": "fb772644c0d64f4483cdf2da094fd959f550c4fe", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -213,7 +213,7 @@ pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s, _) => Constant::Binary(Lrc::clone(s)),\n+        LitKind::ByteStr(ref s, _) | LitKind::CStr(ref s, _) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {"}, {"sha": "bc7fb711ed8b8f8ee63c995f52c49dde2ecf8318", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-05-05\"\n+channel = \"nightly-2023-05-20\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "59bf447a7cd0758c9961b1cc826b4d4498dc487b", "filename": "src/driver.rs", "status": "modified", "additions": 9, "deletions": 61, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -11,7 +11,6 @@\n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n extern crate rustc_driver;\n-extern crate rustc_errors;\n extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_span;\n@@ -20,13 +19,10 @@ use rustc_interface::interface;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Symbol;\n \n-use std::borrow::Cow;\n use std::env;\n use std::ops::Deref;\n-use std::panic;\n use std::path::Path;\n use std::process::exit;\n-use std::sync::LazyLock;\n \n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n /// true, then return it. The parameter is assumed to be either `--arg=value` or `--arg value`.\n@@ -198,66 +194,18 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n \n-type PanicCallback = dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static;\n-static ICE_HOOK: LazyLock<Box<PanicCallback>> = LazyLock::new(|| {\n-    let hook = panic::take_hook();\n-    panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n-    hook\n-});\n-\n-fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n-    // Invoke our ICE handler, which prints the actual panic message and optionally a backtrace\n-    (*ICE_HOOK)(info);\n-\n-    // Separate the output with an empty line\n-    eprintln!();\n-\n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n-    let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n-        rustc_errors::ColorConfig::Auto,\n-        None,\n-        None,\n-        fallback_bundle,\n-        false,\n-        false,\n-        None,\n-        false,\n-        false,\n-        rustc_errors::TerminalUrl::No,\n-    ));\n-    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n-\n-    // a .span_bug or .bug call has already printed what\n-    // it wants to print.\n-    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n-        let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n-        handler.emit_diagnostic(&mut d);\n-    }\n-\n-    let version_info = rustc_tools_util::get_version_info!();\n-\n-    let xs: Vec<Cow<'static, str>> = vec![\n-        \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-        format!(\"we would appreciate a bug report: {bug_report_url}\").into(),\n-        format!(\"Clippy version: {version_info}\").into(),\n-    ];\n-\n-    for note in &xs {\n-        handler.note_without_error(note.as_ref());\n-    }\n-\n-    // If backtraces are enabled, also print the query stack\n-    let backtrace = env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n-\n-    let num_frames = if backtrace { None } else { Some(2) };\n-\n-    interface::try_print_query_stack(&handler, num_frames);\n-}\n-\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n-    LazyLock::force(&ICE_HOOK);\n+\n+    rustc_driver::install_ice_hook(BUG_REPORT_URL, |handler| {\n+        // FIXME: this macro calls unwrap internally but is called in a panicking context!  It's not\n+        // as simple as moving the call from the hook to main, because `install_ice_hook` doesn't\n+        // accept a generic closure.\n+        let version_info = rustc_tools_util::get_version_info!();\n+        handler.note_without_error(format!(\"Clippy version: {version_info}\"));\n+    });\n+\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n         let has_sysroot_arg = arg_value(&orig_args, \"--sysroot\", |_| true).is_some();"}, {"sha": "99ce7028390943396480e23b7a7439625bd76524", "filename": "tests/ui-internal/custom_ice_message.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -3,6 +3,7 @@\n //@normalize-stderr-test: \"produce_ice.rs:\\d*:\\d*\" -> \"produce_ice.rs\"\n //@normalize-stderr-test: \"', .*clippy_lints\" -> \"', clippy_lints\"\n //@normalize-stderr-test: \"'rustc'\" -> \"'<unnamed>'\"\n+//@normalize-stderr-test: \"running on .*\" -> \"running on <target>\"\n //@normalize-stderr-test: \"(?ms)query stack during panic:\\n.*end of query stack\\n\" -> \"\"\n \n #![deny(clippy::internal)]"}, {"sha": "0fc385cd6935aa7a5fdedf85cab2e87f24f908d0", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -1,12 +1,14 @@\n thread '<unnamed>' panicked at 'Would you like some help with that?', clippy_lints/src/utils/internal_lints/produce_ice.rs\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n-error: internal compiler error: unexpected panic\n-\n-note: the compiler unexpectedly panicked. this is a bug.\n+error: the compiler unexpectedly panicked. this is a bug.\n \n note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy/issues/new\n \n+note: rustc 1.71.0-nightly (521f4dae1 2023-05-19) running on <target>\n+\n+note: compiler flags: -C prefer-dynamic -Z ui-testing\n+\n note: Clippy version: foo\n \n thread panicked while panicking. aborting."}, {"sha": "840902b5323e771aa9468e6e86a36b35e46737e9", "filename": "tests/ui/box_default.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n-#![allow(unused, clippy::default_constructed_unit_structs)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "3618486a4732e531f0f34d38cad76800feef531b", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n-#![allow(unused, clippy::default_constructed_unit_structs)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "51a3b0d972e683d42fef81b1482729c3d5ff7cf9", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -30,19 +30,11 @@ error: sub-expression diverges\n LL |             3 => true || diverge(),\n    |                          ^^^^^^^^^\n \n-error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:36:30\n-   |\n-LL |                 _ => true || panic!(\"boo\"),\n-   |                              ^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: sub-expression diverges\n   --> $DIR/diverging_sub_expression.rs:38:26\n    |\n LL |             _ => true || break,\n    |                          ^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "a7276dd59f4343d2e345a7c4ea54e6ce3d2b6172", "filename": "tests/ui/drop_forget_copy.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "patch": "@@ -1,86 +0,0 @@\n-#![warn(clippy::drop_copy, clippy::forget_copy)]\n-#![allow(clippy::toplevel_ref_arg, clippy::drop_ref, clippy::forget_ref, unused_mut)]\n-\n-use std::mem::{drop, forget};\n-use std::vec::Vec;\n-\n-#[derive(Copy, Clone)]\n-struct SomeStruct;\n-\n-struct AnotherStruct {\n-    x: u8,\n-    y: u8,\n-    z: Vec<u8>,\n-}\n-\n-impl Clone for AnotherStruct {\n-    fn clone(&self) -> AnotherStruct {\n-        AnotherStruct {\n-            x: self.x,\n-            y: self.y,\n-            z: self.z.clone(),\n-        }\n-    }\n-}\n-\n-fn main() {\n-    let s1 = SomeStruct {};\n-    let s2 = s1;\n-    let s3 = &s1;\n-    let mut s4 = s1;\n-    let ref s5 = s1;\n-\n-    drop(s1);\n-    drop(s2);\n-    drop(s3);\n-    drop(s4);\n-    drop(s5);\n-\n-    forget(s1);\n-    forget(s2);\n-    forget(s3);\n-    forget(s4);\n-    forget(s5);\n-\n-    let a1 = AnotherStruct {\n-        x: 255,\n-        y: 0,\n-        z: vec![1, 2, 3],\n-    };\n-    let a2 = &a1;\n-    let mut a3 = a1.clone();\n-    let ref a4 = a1;\n-    let a5 = a1.clone();\n-\n-    drop(a2);\n-    drop(a3);\n-    drop(a4);\n-    drop(a5);\n-\n-    forget(a2);\n-    let a3 = &a1;\n-    forget(a3);\n-    forget(a4);\n-    let a5 = a1.clone();\n-    forget(a5);\n-}\n-\n-#[allow(unused)]\n-#[allow(clippy::unit_cmp)]\n-fn issue9482(x: u8) {\n-    fn println_and<T>(t: T) -> T {\n-        println!(\"foo\");\n-        t\n-    }\n-\n-    match x {\n-        0 => drop(println_and(12)), // Don't lint (copy type), we only care about side-effects\n-        1 => drop(println_and(String::new())), // Don't lint (no copy type), we only care about side-effects\n-        2 => {\n-            drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-        },\n-        3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-        4 => drop(2),                           // Lint, not a fn/method call\n-        _ => (),\n-    }\n-}"}, {"sha": "90bef1c3c439f76d334e209619d160b5ac0e8ad5", "filename": "tests/ui/drop_forget_copy.stderr", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "patch": "@@ -1,112 +0,0 @@\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:33:5\n-   |\n-LL |     drop(s1);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:33:10\n-   |\n-LL |     drop(s1);\n-   |          ^^\n-   = note: `-D clippy::drop-copy` implied by `-D warnings`\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:34:5\n-   |\n-LL |     drop(s2);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:34:10\n-   |\n-LL |     drop(s2);\n-   |          ^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:36:5\n-   |\n-LL |     drop(s4);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:36:10\n-   |\n-LL |     drop(s4);\n-   |          ^^\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:39:5\n-   |\n-LL |     forget(s1);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:39:12\n-   |\n-LL |     forget(s1);\n-   |            ^^\n-   = note: `-D clippy::forget-copy` implied by `-D warnings`\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:40:5\n-   |\n-LL |     forget(s2);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:40:12\n-   |\n-LL |     forget(s2);\n-   |            ^^\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:42:5\n-   |\n-LL |     forget(s4);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:42:12\n-   |\n-LL |     forget(s4);\n-   |            ^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:80:13\n-   |\n-LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:80:18\n-   |\n-LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |                  ^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:82:14\n-   |\n-LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:82:19\n-   |\n-LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |                   ^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:83:14\n-   |\n-LL |         4 => drop(2),                           // Lint, not a fn/method call\n-   |              ^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:83:19\n-   |\n-LL |         4 => drop(2),                           // Lint, not a fn/method call\n-   |                   ^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "10044e65f1156bc484ea3de731ed05c0fc97d902", "filename": "tests/ui/drop_ref.rs", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "patch": "@@ -1,97 +0,0 @@\n-#![warn(clippy::drop_ref)]\n-#![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::map_err_ignore)]\n-#![allow(clippy::unnecessary_wraps, clippy::drop_non_drop)]\n-\n-use std::mem::drop;\n-\n-struct SomeStruct;\n-\n-fn main() {\n-    drop(&SomeStruct);\n-\n-    let mut owned1 = SomeStruct;\n-    drop(&owned1);\n-    drop(&&owned1);\n-    drop(&mut owned1);\n-    drop(owned1); //OK\n-\n-    let reference1 = &SomeStruct;\n-    drop(reference1);\n-\n-    let reference2 = &mut SomeStruct;\n-    drop(reference2);\n-\n-    let ref reference3 = SomeStruct;\n-    drop(reference3);\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn_drop<T>(val: T) {\n-    drop(&val);\n-    drop(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn drop<T>(_val: T) {}\n-    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::drop(&SomeStruct);\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct Error;\n-fn produce_half_owl_error() -> Result<(), Error> {\n-    Ok(())\n-}\n-\n-fn produce_half_owl_ok() -> Result<bool, ()> {\n-    Ok(true)\n-}\n-\n-#[allow(dead_code)]\n-fn test_owl_result() -> Result<(), ()> {\n-    produce_half_owl_error().map_err(|_| ())?;\n-    produce_half_owl_ok().map(|_| ())?;\n-    // the following should not be linted,\n-    // we should not force users to use toilet closures\n-    // to produce owl results when drop is more convenient\n-    produce_half_owl_error().map_err(drop)?;\n-    produce_half_owl_ok().map_err(drop)?;\n-    Ok(())\n-}\n-\n-#[allow(dead_code)]\n-fn test_owl_result_2() -> Result<u8, ()> {\n-    produce_half_owl_error().map_err(|_| ())?;\n-    produce_half_owl_ok().map(|_| ())?;\n-    // the following should not be linted,\n-    // we should not force users to use toilet closures\n-    // to produce owl results when drop is more convenient\n-    produce_half_owl_error().map_err(drop)?;\n-    produce_half_owl_ok().map(drop)?;\n-    Ok(1)\n-}\n-\n-#[allow(unused)]\n-#[allow(clippy::unit_cmp)]\n-fn issue10122(x: u8) {\n-    // This is a function which returns a reference and has a side-effect, which means\n-    // that calling drop() on the function is considered an idiomatic way of achieving the side-effect\n-    // in a match arm.\n-    fn println_and<T>(t: &T) -> &T {\n-        println!(\"foo\");\n-        t\n-    }\n-\n-    match x {\n-        0 => drop(println_and(&12)), // Don't lint (copy type), we only care about side-effects\n-        1 => drop(println_and(&String::new())), // Don't lint (no copy type), we only care about side-effects\n-        2 => {\n-            drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-        },\n-        3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-        4 => drop(&2),                           // Lint, not a fn/method call\n-        _ => (),\n-    }\n-}"}, {"sha": "293b9f6de832dc5ca5f2f3d5a1eefb67d79f3195", "filename": "tests/ui/drop_ref.stderr", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "patch": "@@ -1,147 +0,0 @@\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:11:5\n-   |\n-LL |     drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:11:10\n-   |\n-LL |     drop(&SomeStruct);\n-   |          ^^^^^^^^^^^\n-   = note: `-D clippy::drop-ref` implied by `-D warnings`\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:14:5\n-   |\n-LL |     drop(&owned1);\n-   |     ^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n-   |\n-LL |     drop(&owned1);\n-   |          ^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:15:5\n-   |\n-LL |     drop(&&owned1);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:15:10\n-   |\n-LL |     drop(&&owned1);\n-   |          ^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:16:5\n-   |\n-LL |     drop(&mut owned1);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:16:10\n-   |\n-LL |     drop(&mut owned1);\n-   |          ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:20:5\n-   |\n-LL |     drop(reference1);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:20:10\n-   |\n-LL |     drop(reference1);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:23:5\n-   |\n-LL |     drop(reference2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:23:10\n-   |\n-LL |     drop(reference2);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:26:5\n-   |\n-LL |     drop(reference3);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:26:10\n-   |\n-LL |     drop(reference3);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:31:5\n-   |\n-LL |     drop(&val);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:31:10\n-   |\n-LL |     drop(&val);\n-   |          ^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:39:5\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:39:20\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |                    ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:91:13\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:91:18\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |                  ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:93:14\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:93:19\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |                   ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:94:14\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |              ^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:94:19\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |                   ^^\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "031b415f56ff6d643554a033f3f06ee6d72b7e78", "filename": "tests/ui/forget_ref.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.rs?ref=28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "patch": "@@ -1,50 +0,0 @@\n-#![warn(clippy::forget_ref)]\n-#![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::unnecessary_wraps, clippy::forget_non_drop)]\n-#![allow(clippy::borrow_deref_ref)]\n-\n-use std::mem::forget;\n-\n-struct SomeStruct;\n-\n-fn main() {\n-    forget(&SomeStruct);\n-\n-    let mut owned = SomeStruct;\n-    forget(&owned);\n-    forget(&&owned);\n-    forget(&mut owned);\n-    forget(owned); //OK\n-\n-    let reference1 = &SomeStruct;\n-    forget(&*reference1);\n-\n-    let reference2 = &mut SomeStruct;\n-    forget(reference2);\n-\n-    let ref reference3 = SomeStruct;\n-    forget(reference3);\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn_forget<T>(val: T) {\n-    forget(&val);\n-    forget(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn forget<T>(_val: T) {}\n-    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::forget(&SomeStruct);\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct Error;\n-fn produce_half_owl_error() -> Result<(), Error> {\n-    Ok(())\n-}\n-\n-fn produce_half_owl_ok() -> Result<bool, ()> {\n-    Ok(true)\n-}"}, {"sha": "011cdefc665f886bc3b6857301f91370d4e2bba8", "filename": "tests/ui/forget_ref.stderr", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dddc72579c379f3cfe8ec0bbd008ed1a506a24/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=28dddc72579c379f3cfe8ec0bbd008ed1a506a24", "patch": "@@ -1,111 +0,0 @@\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:11:5\n-   |\n-LL |     forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:11:12\n-   |\n-LL |     forget(&SomeStruct);\n-   |            ^^^^^^^^^^^\n-   = note: `-D clippy::forget-ref` implied by `-D warnings`\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:14:5\n-   |\n-LL |     forget(&owned);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n-   |\n-LL |     forget(&owned);\n-   |            ^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:15:5\n-   |\n-LL |     forget(&&owned);\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:15:12\n-   |\n-LL |     forget(&&owned);\n-   |            ^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:16:5\n-   |\n-LL |     forget(&mut owned);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:16:12\n-   |\n-LL |     forget(&mut owned);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:20:5\n-   |\n-LL |     forget(&*reference1);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:20:12\n-   |\n-LL |     forget(&*reference1);\n-   |            ^^^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:23:5\n-   |\n-LL |     forget(reference2);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:23:12\n-   |\n-LL |     forget(reference2);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:26:5\n-   |\n-LL |     forget(reference3);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:26:12\n-   |\n-LL |     forget(reference3);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:31:5\n-   |\n-LL |     forget(&val);\n-   |     ^^^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:31:12\n-   |\n-LL |     forget(&val);\n-   |            ^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:39:5\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:39:22\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |                      ^^^^^^^^^^^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "b65e6c7261a57b3ed339abe49f97f8854b649c60", "filename": "tests/ui/issue-111399.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fissue-111399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fissue-111399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue-111399.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -0,0 +1,13 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Check that rustc doesn't crash on the trait bound `Self::Ty: std::marker::Freeze`.\n+\n+pub struct Struct;\n+\n+impl Struct {\n+    pub type Ty = usize;\n+    pub const CT: Self::Ty = 42;\n+}\n+\n+fn main() {}"}, {"sha": "5137448a6d4babcbc7ec7c3391d885700c3d52bd", "filename": "tests/ui/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -5,7 +5,7 @@ use std::mem as memstuff;\n use std::mem::forget as forgetSomething;\n \n #[warn(clippy::mem_forget)]\n-#[allow(clippy::forget_copy)]\n+#[allow(forget_copy)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "f28153e56b0fe732a4354352d73a2ae9c2241655", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n-#![allow(clippy::drop_copy)]\n+#![allow(drop_copy)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n extern crate proc_macros;"}, {"sha": "bba8a6a4d4a7ad00205d5138dd97d39eb24b5fe4", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -30,7 +30,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n+#![allow(forget_copy)]\n+#![allow(forget_ref)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -72,9 +76,13 @@\n #![warn(clippy::invisible_characters)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n+#![warn(drop_copy)]\n+#![warn(drop_ref)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n+#![warn(forget_copy)]\n+#![warn(forget_ref)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "7bd100c4fc235b79cbaa4d9710e02e29f973213f", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -30,7 +30,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n+#![allow(forget_copy)]\n+#![allow(forget_ref)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -72,9 +76,13 @@\n #![warn(clippy::zero_width_space)]\n #![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n+#![warn(clippy::drop_copy)]\n+#![warn(clippy::drop_ref)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]\n #![warn(clippy::for_loops_over_fallibles)]\n+#![warn(clippy::forget_copy)]\n+#![warn(clippy::forget_ref)]\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]"}, {"sha": "cdd3bf93d347e2bd05a643fc29bd00d27b03c684", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 69, "deletions": 45, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -1,268 +1,292 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::integer_arithmetic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n+error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n+  --> $DIR/rename.rs:79:9\n+   |\n+LL | #![warn(clippy::drop_copy)]\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n+\n+error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n+  --> $DIR/rename.rs:80:9\n+   |\n+LL | #![warn(clippy::drop_ref)]\n+   |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n+\n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n+error: lint `clippy::forget_copy` has been renamed to `forget_copy`\n+  --> $DIR/rename.rs:84:9\n+   |\n+LL | #![warn(clippy::forget_copy)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_copy`\n+\n+error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n+  --> $DIR/rename.rs:85:9\n+   |\n+LL | #![warn(clippy::forget_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n+\n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 48 previous errors\n "}, {"sha": "49c0e4dc7eb101b2a5b1d8bf8329ea5d917b8c8c", "filename": "tests/ui/unknown_clippy_lints.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Funknown_clippy_lints.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Funknown_clippy_lints.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_clippy_lints.fixed?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -10,7 +10,7 @@\n #[warn(clippy::unnecessary_cast)]\n #[warn(clippy::useless_transmute)]\n // Shouldn't suggest rustc lint name(`dead_code`)\n-#[warn(clippy::drop_copy)]\n+#[warn(clippy::eq_op)]\n // Shouldn't suggest removed/deprecated clippy lint name(`unused_collect`)\n #[warn(clippy::unused_self)]\n // Shouldn't suggest renamed clippy lint name(`const_static_lifetime`)"}, {"sha": "584c428932fee8ead45dfc41e240fde385290519", "filename": "tests/ui/unknown_clippy_lints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/435a8ad86c7a33bd7ffb91c59039943408d3b6aa/tests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_clippy_lints.stderr?ref=435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "patch": "@@ -34,7 +34,7 @@ error: unknown lint: `clippy::dead_cod`\n   --> $DIR/unknown_clippy_lints.rs:13:8\n    |\n LL | #[warn(clippy::dead_cod)]\n-   |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::drop_copy`\n+   |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::eq_op`\n \n error: unknown lint: `clippy::unused_colle`\n   --> $DIR/unknown_clippy_lints.rs:15:8"}]}