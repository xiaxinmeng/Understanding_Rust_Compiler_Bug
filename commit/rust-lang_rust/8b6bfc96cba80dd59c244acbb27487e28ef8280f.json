{"sha": "8b6bfc96cba80dd59c244acbb27487e28ef8280f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNmJmYzk2Y2JhODBkZDU5YzI0NGFjYmIyNzQ4N2UyOGVmODI4MGY=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-24T21:24:09Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-24T22:06:56Z"}, "message": "Const kind checking. The rules are almost certainly incomplete and unsound...", "tree": {"sha": "a0492d11b8bdb079b8b4718f41d731023d8e3c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0492d11b8bdb079b8b4718f41d731023d8e3c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6bfc96cba80dd59c244acbb27487e28ef8280f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6bfc96cba80dd59c244acbb27487e28ef8280f", "html_url": "https://github.com/rust-lang/rust/commit/8b6bfc96cba80dd59c244acbb27487e28ef8280f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6bfc96cba80dd59c244acbb27487e28ef8280f/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d993df74c39d7c0938194485d7c41ba94ed419ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d993df74c39d7c0938194485d7c41ba94ed419ec", "html_url": "https://github.com/rust-lang/rust/commit/d993df74c39d7c0938194485d7c41ba94ed419ec"}], "stats": {"total": 144, "additions": 110, "deletions": 34}, "files": [{"sha": "e6facc2f7fd4b453413957ff5f3864901d6fe72e", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=8b6bfc96cba80dd59c244acbb27487e28ef8280f", "patch": "@@ -1,7 +1,8 @@\n import syntax::{visit, ast_util};\n import syntax::ast::*;\n import syntax::codemap::span;\n-import ty::{kind, kind_sendable, kind_copyable, kind_noncopyable };\n+import ty::{kind, kind_sendable, kind_copyable, kind_noncopyable, kind_const,\n+           operators};\n import driver::session::session;\n import std::map::hashmap;\n import util::ppaux::{ty_to_str, tys_to_str};\n@@ -24,12 +25,17 @@ import freevars::freevar_entry;\n // types.\n \n fn kind_to_str(k: kind) -> str {\n-    alt (ty::kind_can_be_copied(k), ty::kind_can_be_sent(k)) {\n-      (false, false) { \"noncopyable\" }\n-      (false, true)  { \"sendable\" }\n-      (true,  false) { \"copyable\" }\n-      (true,  true)  { \"copy-sendable\" }\n+    let mut kinds = [];\n+    if ty::kind_lteq(k, kind_const()) {\n+        kinds += [\"const\"];\n     }\n+    if ty::kind_can_be_copied(k) {\n+        kinds += [\"copy\"];\n+    }\n+    if ty::kind_can_be_sent(k) {\n+        kinds += [\"send\"];\n+    }\n+    str::connect(kinds, \" \")\n }\n \n type rval_map = std::map::hashmap<node_id, ()>;\n@@ -320,10 +326,11 @@ fn check_bounds(cx: ctx, sp: span, ty: ty::t, bounds: ty::param_bounds) {\n     let kind = ty::type_kind(cx.tcx, ty);\n     let p_kind = ty::param_bounds_to_kind(bounds);\n     if !ty::kind_lteq(p_kind, kind) {\n-        cx.tcx.sess.span_err(sp, \"instantiating a \" +\n-                             kind_to_str(p_kind) +\n-                             \" type parameter with a \"\n-                             + kind_to_str(kind) + \" type\");\n+        cx.tcx.sess.span_err(\n+            sp, \"instantiating a type parameter with an incompatible type \" +\n+            \"(needs `\" + kind_to_str(p_kind) +\n+            \"`, got `\" + kind_to_str(kind) +\n+            \"`, missing `\" + kind_to_str(p_kind - kind) + \"`)\");\n     }\n }\n "}, {"sha": "25780dcd29f71f30307127dd9a34d2e00dfa4d1a", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 68, "deletions": 17, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=8b6bfc96cba80dd59c244acbb27487e28ef8280f", "patch": "@@ -110,8 +110,9 @@ export ty_var_id;\n export ty_to_def_id;\n export ty_fn_args;\n export type_constr;\n-export kind, kind_sendable, kind_copyable, kind_noncopyable;\n+export kind, kind_sendable, kind_copyable, kind_noncopyable, kind_const;\n export kind_can_be_copied, kind_can_be_sent, proto_kind, kind_lteq, type_kind;\n+export operators;\n export type_err, terr_vstore_kind;\n export type_err_to_str;\n export type_needs_drop;\n@@ -431,7 +432,8 @@ fn param_bounds_to_kind(bounds: param_bounds) -> kind {\n             kind = raise_kind(kind, kind_copyable());\n           }\n           bound_send { kind = raise_kind(kind, kind_send_only()); }\n-          _ {}\n+          bound_const { kind = raise_kind(kind, kind_const()); }\n+          bound_iface(_) {}\n         }\n     }\n     kind\n@@ -1266,8 +1268,9 @@ fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n \n enum kind { kind_(u32) }\n \n-const KIND_MASK_COPY : u32 = 0b00000000000000000000000000000001u32;\n-const KIND_MASK_SEND : u32 = 0b00000000000000000000000000000010u32;\n+const KIND_MASK_COPY  : u32 = 0b00000000000000000000000000000001u32;\n+const KIND_MASK_SEND  : u32 = 0b00000000000000000000000000000010u32;\n+const KIND_MASK_CONST : u32 = 0b00000000000000000000000000000100u32;\n \n fn kind_noncopyable() -> kind {\n     kind_(0u32)\n@@ -1285,10 +1288,37 @@ fn kind_send_only() -> kind {\n     kind_(KIND_MASK_SEND)\n }\n \n+fn kind_const() -> kind {\n+    kind_(KIND_MASK_CONST)\n+}\n+\n fn kind_top() -> kind {\n     kind_(0xffffffffu32)\n }\n \n+fn remove_const(k: kind, tm: mt) -> kind {\n+    if tm.mutbl == ast::m_mutbl {\n+        k - kind_const()\n+    }\n+    else {\n+        k\n+    }\n+}\n+\n+impl operators for kind {\n+    fn &(other: kind) -> kind {\n+        lower_kind(self, other)\n+    }\n+\n+    fn |(other: kind) -> kind {\n+        raise_kind(self, other)\n+    }\n+\n+    fn -(other: kind) -> kind {\n+        kind_(*self & !*other)\n+    }\n+}\n+\n // Using these query functons is preferable to direct comparison or matching\n // against the kind constants, as we may modify the kind hierarchy in the\n // future.\n@@ -1306,7 +1336,7 @@ fn proto_kind(p: proto) -> kind {\n       ast::proto_block { kind_noncopyable() }\n       ast::proto_box { kind_copyable() }\n       ast::proto_uniq { kind_sendable() }\n-      ast::proto_bare { kind_sendable() }\n+      ast::proto_bare { kind_sendable() | kind_const() }\n     }\n }\n \n@@ -1345,7 +1375,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n     let result = alt get(ty).struct {\n       // Scalar and unique types are sendable\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_ptr(_) | ty_str { kind_sendable() }\n+      ty_ptr(_) | ty_str { kind_sendable() | kind_const() }\n       ty_type { kind_copyable() }\n       ty_fn(f) { proto_kind(f.proto) }\n \n@@ -1356,38 +1386,58 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n \n       // Those with refcounts raise noncopyable to copyable,\n       // lower sendable to copyable. Therefore just set result to copyable.\n-      ty_box(_) | ty_iface(_, _) | ty_opaque_box { kind_copyable() }\n+      ty_box(tm) {\n+        if tm.mutbl == ast::m_mutbl {\n+            kind_copyable()\n+        }\n+        else {\n+            let k = type_kind(cx, tm.ty);\n+            if kind_lteq(kind_const(), k) {\n+                kind_copyable() | kind_const()\n+            }\n+            else { kind_copyable() }\n+        }\n+      }\n+      ty_iface(_, _) | ty_opaque_box { kind_copyable() }\n       ty_rptr(_, _) { kind_copyable() }\n \n       // Unique boxes and vecs have the kind of their contained type.\n-      ty_vec(tm) | ty_uniq(tm) { type_kind(cx, tm.ty) }\n+      ty_vec(tm) | ty_uniq(tm) { remove_const(type_kind(cx, tm.ty), tm) }\n \n       // Slice and refcounted evecs are copyable; uniques and interiors\n       // depend on the their contained type.\n-      ty_evec(_, vstore_box) |\n-      ty_evec(_, vstore_slice(_)) { kind_copyable() }\n+      ty_evec(tm, vstore_box) |\n+      ty_evec(tm, vstore_slice(_)) {\n+        if kind_lteq(kind_const(), type_kind(cx, tm.ty)) {\n+            kind_copyable() | kind_const()\n+        }\n+        else {\n+            kind_const()\n+        }\n+      }\n       ty_evec(tm, vstore_uniq) |\n-      ty_evec(tm, vstore_fixed(_)) { type_kind(cx, tm.ty)  }\n+      ty_evec(tm, vstore_fixed(_)) { remove_const(type_kind(cx, tm.ty), tm) }\n \n       // All estrs are copyable; uniques and interiors are sendable.\n       ty_estr(vstore_box) |\n-      ty_estr(vstore_slice(_)) { kind_copyable() }\n+      ty_estr(vstore_slice(_)) { kind_copyable() | kind_const() }\n       ty_estr(vstore_uniq) |\n-      ty_estr(vstore_fixed(_)) { kind_sendable()  }\n+      ty_estr(vstore_fixed(_)) { kind_sendable() | kind_const() }\n \n       // Records lower to the lowest of their members.\n       ty_rec(flds) {\n-        let mut lowest = kind_sendable();\n+        let mut lowest = kind_top();\n         for flds.each {|f|\n             lowest = lower_kind(lowest, type_kind(cx, f.mt.ty));\n+            lowest = remove_const(lowest, f.mt);\n         }\n         lowest\n       }\n       // FIXME: (tjc) there are rules about when classes are copyable/\n       // sendable, but I'm just treating them like records (#1726)\n       ty_class(did, substs) {\n           // also factor out this code, copied from the records case\n-          let mut lowest = kind_sendable();\n+          let mut lowest = kind_top();\n           let flds = class_items_as_fields(cx, did, substs);\n           for flds.each {|f|\n             lowest = lower_kind(lowest, type_kind(cx, f.mt.ty));\n@@ -1396,13 +1446,13 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       }\n       // Tuples lower to the lowest of their members.\n       ty_tup(tys) {\n-        let mut lowest = kind_sendable();\n+        let mut lowest = kind_top();\n         for tys.each {|ty| lowest = lower_kind(lowest, type_kind(cx, ty)); }\n         lowest\n       }\n       // Enums lower to the lowest of their variants.\n       ty_enum(did, substs) {\n-        let mut lowest = kind_sendable();\n+        let mut lowest = kind_top();\n         let variants = enum_variants(cx, did);\n         if vec::len(*variants) == 0u {\n             lowest = kind_noncopyable();\n@@ -1423,6 +1473,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n           param_bounds_to_kind(cx.ty_param_bounds.get(did.node))\n       }\n       ty_constr(t, _) { type_kind(cx, t) }\n+      // FIXME: is self ever const?\n       ty_self { kind_noncopyable() }\n \n       ty_var(_) { cx.sess.bug(\"Asked to compute kind of a type variable\"); }"}, {"sha": "55b259daf1e8109f1b14a9eee993e7e2005f9d91", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=8b6bfc96cba80dd59c244acbb27487e28ef8280f", "patch": "@@ -1,6 +1,5 @@\n-// error-pattern:instantiating a copyable type parameter with a noncopyable\n fn foo<T>() {\n-    1u.bar::<T>();\n+    1u.bar::<T>(); //! ERROR: missing `copy`\n }\n \n impl methods for uint {"}, {"sha": "193fdb4a16bb3d88eae93c7c0dbb1013b4c66d79", "filename": "src/test/compile-fail/non-const.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=8b6bfc96cba80dd59c244acbb27487e28ef8280f", "patch": "@@ -0,0 +1,19 @@\n+// Test that various non const things are rejected.\n+\n+fn foo<T: const>(_x: T) { }\n+\n+resource r(_x: int) {}\n+\n+fn main() {\n+    foo({f: 3});\n+    foo({mut f: 3}); //! ERROR missing `const`\n+    foo([1]);\n+    foo([mut 1]); //! ERROR missing `const`\n+    foo(~1);\n+    foo(~mut 1); //! ERROR missing `const`\n+    foo(@1);\n+    foo(@mut 1); //! ERROR missing `const`\n+    foo(r(1)); //! ERROR missing `const`\n+    foo(\"123\");\n+    foo({f: {mut f: 1}}); //! ERROR missing `const`\n+}"}, {"sha": "9373ae70230b869fe0c26fa78e6108d893efacae", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=8b6bfc96cba80dd59c244acbb27487e28ef8280f", "patch": "@@ -1,9 +1,7 @@\n-// error-pattern: instantiating a sendable type parameter with a copyable type\n-\n-fn f<T: send>(i: T) {\n+fn f<T: send>(_i: T) {\n }\n \n fn main() {\n     let i = ~@100;\n-    f(i);\n-}\n\\ No newline at end of file\n+    f(i); //! ERROR missing `send`\n+}"}, {"sha": "ac532ea0569ecd61a506221f704ce79c7d8af2fc", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6bfc96cba80dd59c244acbb27487e28ef8280f/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=8b6bfc96cba80dd59c244acbb27487e28ef8280f", "patch": "@@ -10,4 +10,6 @@ fn main() {\n     foo([1, 2, 3]);\n     foo({field: 42});\n     foo((1, 2u));\n+    foo(@1);\n+    foo(~1);\n }"}]}