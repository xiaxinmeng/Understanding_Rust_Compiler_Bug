{"sha": "a59479bd37583b93941aa3dda2576a833cd83917", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OTQ3OWJkMzc1ODNiOTM5NDFhYTNkZGEyNTc2YTgzM2NkODM5MTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-20T11:18:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-20T11:18:40Z"}, "message": "Add clif ir comments for stack2reg opt", "tree": {"sha": "c845dd059dce735fe30ae59812cfe385de84c52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c845dd059dce735fe30ae59812cfe385de84c52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59479bd37583b93941aa3dda2576a833cd83917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59479bd37583b93941aa3dda2576a833cd83917", "html_url": "https://github.com/rust-lang/rust/commit/a59479bd37583b93941aa3dda2576a833cd83917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59479bd37583b93941aa3dda2576a833cd83917/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02d85dd59091076e3a973ea9f6533ab1fa0a68f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/02d85dd59091076e3a973ea9f6533ab1fa0a68f2", "html_url": "https://github.com/rust-lang/rust/commit/02d85dd59091076e3a973ea9f6533ab1fa0a68f2"}], "stats": {"total": 120, "additions": 61, "deletions": 59}, "files": [{"sha": "5f7939a1ca76e1eba03925b921e3434583ae2f72", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=a59479bd37583b93941aa3dda2576a833cd83917", "patch": "@@ -200,7 +200,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n             .declare_func_in_func(func_id, &mut self.bcx.func);\n \n         #[cfg(debug_assertions)]\n-        self.add_entity_comment(func_ref, format!(\"{:?}\", inst));\n+        self.add_comment(func_ref, format!(\"{:?}\", inst));\n \n         func_ref\n     }"}, {"sha": "e6953b97a5d2b36f1a09f1bac6ad8efde0cce7fe", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a59479bd37583b93941aa3dda2576a833cd83917", "patch": "@@ -52,7 +52,7 @@ fn codegen_static_ref<'tcx>(\n     let data_id = data_id_for_static(fx.tcx, fx.module, def_id, linkage);\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n-    fx.add_entity_comment(local_data_id, format!(\"{:?}\", def_id));\n+    fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n     cplace_for_dataid(fx, layout, local_data_id)\n }\n \n@@ -114,7 +114,7 @@ pub fn trans_const_value<'tcx>(\n                             let data_id = data_id_for_alloc_id(fx.module, ptr.alloc_id, alloc.align);\n                             let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n-                            fx.add_entity_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n+                            fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n                             fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                         }\n                         Some(GlobalAlloc::Function(instance)) => {\n@@ -128,7 +128,7 @@ pub fn trans_const_value<'tcx>(\n                             let data_id = data_id_for_static(fx.tcx, fx.module, def_id, linkage);\n                             let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n-                            fx.add_entity_comment(local_data_id, format!(\"{:?}\", def_id));\n+                            fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n                             fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                         }\n                         None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n@@ -200,7 +200,7 @@ fn trans_const_place<'tcx>(\n     let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n-    fx.add_entity_comment(local_data_id, format!(\"{:?}\", alloc_id));\n+    fx.add_comment(local_data_id, format!(\"{:?}\", alloc_id));\n     cplace_for_dataid(fx, fx.layout_of(const_.ty), local_data_id)\n }\n "}, {"sha": "f6d02e999e1b24d60a4977528175b5832d0a9e78", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59479bd37583b93941aa3dda2576a833cd83917/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59479bd37583b93941aa3dda2576a833cd83917/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=a59479bd37583b93941aa3dda2576a833cd83917", "patch": "@@ -16,7 +16,7 @@ pub fn optimize_function<'tcx>(\n     if tcx.sess.opts.optimize == rustc_session::config::OptLevel::No {\n         return; // FIXME classify optimizations over opt levels\n     }\n-    self::stack2reg::optimize_function(ctx, clif_comments, instance);\n+    self::stack2reg::optimize_function(ctx, clif_comments);\n     #[cfg(debug_assertions)]\n     crate::pretty_clif::write_clif_file(tcx, \"stack2reg\", instance, &ctx.func, &*clif_comments, None);\n     crate::base::verify_func(tcx, &*clif_comments, &ctx.func);"}, {"sha": "757e608d73390751da18197533231138354c1f05", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a59479bd37583b93941aa3dda2576a833cd83917/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59479bd37583b93941aa3dda2576a833cd83917/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=a59479bd37583b93941aa3dda2576a833cd83917", "patch": "@@ -10,6 +10,7 @@\n //! being loaded by a `stack_load`.\n \n use std::collections::{BTreeMap, HashSet};\n+use std::fmt;\n use std::ops::Not;\n \n use cranelift_codegen::cursor::{Cursor, FuncCursor};\n@@ -19,9 +20,15 @@ use cranelift_codegen::ir::immediates::Offset32;\n use crate::prelude::*;\n \n /// Workaround for `StackSlot` not implementing `Ord`.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct OrdStackSlot(StackSlot);\n \n+impl fmt::Debug for OrdStackSlot {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{:?}\", self.0)\n+    }\n+}\n+\n impl PartialOrd for OrdStackSlot {\n     fn partial_cmp(&self, rhs: &Self) -> Option<std::cmp::Ordering> {\n         self.0.as_u32().partial_cmp(&rhs.0.as_u32())\n@@ -153,10 +160,9 @@ impl<'a> OptimizeContext<'a> {\n     }\n }\n \n-pub(super) fn optimize_function<T: std::fmt::Debug>(\n+pub(super) fn optimize_function(\n     ctx: &mut Context,\n-    _clif_comments: &mut crate::pretty_clif::CommentWriter,\n-    name: T,\n+    clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n     combine_stack_addr_with_load_store(&mut ctx.func);\n \n@@ -167,7 +173,9 @@ pub(super) fn optimize_function<T: std::fmt::Debug>(\n     remove_unused_stack_addr_and_stack_load(&mut opt_ctx);\n \n     #[cfg(debug_assertions)] {\n-        println!(\"stack slot usage: {:?}\", opt_ctx.stack_slot_usage_map);\n+        for (&OrdStackSlot(stack_slot), usage) in &opt_ctx.stack_slot_usage_map {\n+            clif_comments.add_comment(stack_slot, format!(\"used by: {:?}\", usage));\n+        }\n     }\n \n     for (stack_slot, users) in opt_ctx.stack_slot_usage_map.iter_mut() {\n@@ -182,28 +190,26 @@ pub(super) fn optimize_function<T: std::fmt::Debug>(\n \n             #[cfg(debug_assertions)]\n             for &store in &potential_stores {\n-                println!(\n+                clif_comments.add_comment(load, format!(\n                     \"Potential store -> load forwarding {} -> {} ({:?}, {:?})\",\n                     opt_ctx.ctx.func.dfg.display_inst(store, None),\n                     opt_ctx.ctx.func.dfg.display_inst(load, None),\n                     spatial_overlap(&opt_ctx.ctx.func, store, load),\n                     temporal_order(&opt_ctx.ctx, store, load),\n-                );\n+                ));\n             }\n \n             match *potential_stores {\n                 [] => {\n-                    #[cfg(debug_assertions)] {\n-                        println!(\"[{:?}] [BUG?] Reading uninitialized memory\", name);\n-                    }\n+                    #[cfg(debug_assertions)]\n+                    clif_comments.add_comment(load, format!(\"[BUG?] Reading uninitialized memory\"));\n                 }\n                 [store] if spatial_overlap(&opt_ctx.ctx.func, store, load) == SpatialOverlap::Full && temporal_order(&opt_ctx.ctx, store, load) == TemporalOrder::DefinitivelyBefore => {\n                     // Only one store could have been the origin of the value.\n                     let stored_value = opt_ctx.ctx.func.dfg.inst_args(store)[0];\n \n-                    #[cfg(debug_assertions)] {\n-                        println!(\"Store to load forward {} -> {}\", store, load);\n-                    }\n+                    #[cfg(debug_assertions)]\n+                    clif_comments.add_comment(load, format!(\"Store to load forward {} -> {}\", store, load));\n \n                     users.change_load_to_alias(&mut opt_ctx.ctx.func, load, stored_value);\n                 }\n@@ -216,22 +222,22 @@ pub(super) fn optimize_function<T: std::fmt::Debug>(\n \n             #[cfg(debug_assertions)]\n             for &load in &potential_loads {\n-                println!(\n+                clif_comments.add_comment(store, format!(\n                     \"Potential load from store {} <- {} ({:?}, {:?})\",\n                     opt_ctx.ctx.func.dfg.display_inst(load, None),\n                     opt_ctx.ctx.func.dfg.display_inst(store, None),\n                     spatial_overlap(&opt_ctx.ctx.func, store, load),\n                     temporal_order(&opt_ctx.ctx, store, load),\n-                );\n+                ));\n             }\n \n             if potential_loads.is_empty() {\n                 // Never loaded; can safely remove all stores and the stack slot.\n                 // FIXME also remove stores when there is always a next store before a load.\n \n-                #[cfg(debug_assertions)] {\n-                    println!(\"[{:?}] Remove dead stack store {} of {}\", name, opt_ctx.ctx.func.dfg.display_inst(store, None), stack_slot.0);\n-                }\n+                #[cfg(debug_assertions)]\n+                clif_comments.add_comment(store, format!(\"Remove dead stack store {} of {}\", opt_ctx.ctx.func.dfg.display_inst(store, None), stack_slot.0));\n+\n                 users.remove_dead_store(&mut opt_ctx.ctx.func, store);\n             }\n         }\n@@ -240,10 +246,6 @@ pub(super) fn optimize_function<T: std::fmt::Debug>(\n             opt_ctx.ctx.func.stack_slots[stack_slot.0].size = 0;\n         }\n     }\n-\n-    #[cfg(debug_assertions)] {\n-        println!();\n-    }\n }\n \n fn combine_stack_addr_with_load_store(func: &mut Function) {"}, {"sha": "a2872af53f99c9beb0db63fb15412102e520ee13", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=a59479bd37583b93941aa3dda2576a833cd83917", "patch": "@@ -69,7 +69,6 @@ use crate::prelude::*;\n pub struct CommentWriter {\n     global_comments: Vec<String>,\n     entity_comments: HashMap<AnyEntity, String>,\n-    inst_comments: HashMap<Inst, String>,\n }\n \n impl CommentWriter {\n@@ -94,7 +93,30 @@ impl CommentWriter {\n         CommentWriter {\n             global_comments,\n             entity_comments: HashMap::new(),\n-            inst_comments: HashMap::new(),\n+        }\n+    }\n+}\n+\n+#[cfg(debug_assertions)]\n+impl CommentWriter {\n+    pub fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n+        self.global_comments.push(comment.into());\n+    }\n+\n+    pub fn add_comment<'s, S: Into<Cow<'s, str>>, E: Into<AnyEntity>>(\n+        &mut self,\n+        entity: E,\n+        comment: S,\n+    ) {\n+        use std::collections::hash_map::Entry;\n+        match self.entity_comments.entry(entity.into()) {\n+            Entry::Occupied(mut occ) => {\n+                occ.get_mut().push('\\n');\n+                occ.get_mut().push_str(comment.into().as_ref());\n+            }\n+            Entry::Vacant(vac) => {\n+                vac.insert(comment.into().into_owned());\n+            }\n         }\n     }\n }\n@@ -157,7 +179,7 @@ impl FuncWriter for &'_ CommentWriter {\n         indent: usize,\n     ) -> fmt::Result {\n         PlainWriter.write_instruction(w, func, aliases, isa, inst, indent)?;\n-        if let Some(comment) = self.inst_comments.get(&inst) {\n+        if let Some(comment) = self.entity_comments.get(&inst.into()) {\n             writeln!(w, \"; {}\", comment.replace('\\n', \"\\n; \"))?;\n         }\n         Ok(())\n@@ -167,37 +189,15 @@ impl FuncWriter for &'_ CommentWriter {\n #[cfg(debug_assertions)]\n impl<'a, 'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     pub fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n-        self.clif_comments.global_comments.push(comment.into());\n+        self.clif_comments.add_global_comment(comment);\n     }\n \n-    pub fn add_entity_comment<'s, S: Into<Cow<'s, str>>, E: Into<AnyEntity>>(\n+    pub fn add_comment<'s, S: Into<Cow<'s, str>>, E: Into<AnyEntity>>(\n         &mut self,\n         entity: E,\n         comment: S,\n     ) {\n-        use std::collections::hash_map::Entry;\n-        match self.clif_comments.entity_comments.entry(entity.into()) {\n-            Entry::Occupied(mut occ) => {\n-                occ.get_mut().push('\\n');\n-                occ.get_mut().push_str(comment.into().as_ref());\n-            }\n-            Entry::Vacant(vac) => {\n-                vac.insert(comment.into().into_owned());\n-            }\n-        }\n-    }\n-\n-    pub fn add_comment<'s, S: Into<Cow<'s, str>>>(&mut self, inst: Inst, comment: S) {\n-        use std::collections::hash_map::Entry;\n-        match self.clif_comments.inst_comments.entry(inst) {\n-            Entry::Occupied(mut occ) => {\n-                occ.get_mut().push('\\n');\n-                occ.get_mut().push_str(comment.into().as_ref());\n-            }\n-            Entry::Vacant(vac) => {\n-                vac.insert(comment.into().into_owned());\n-            }\n-        }\n+       self.clif_comments.add_comment(entity, comment);\n     }\n }\n "}, {"sha": "c13260424ff7b78c6b27367b8d12f3bfb2bd8c38", "filename": "src/trap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a59479bd37583b93941aa3dda2576a833cd83917/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59479bd37583b93941aa3dda2576a833cd83917/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=a59479bd37583b93941aa3dda2576a833cd83917", "patch": "@@ -19,7 +19,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n     let puts = fx.module.declare_func_in_func(puts, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     {\n-        fx.add_entity_comment(puts, \"puts\");\n+        fx.add_comment(puts, \"puts\");\n     }\n \n     let symbol_name = fx.tcx.symbol_name(fx.instance);\n@@ -46,7 +46,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n     let local_msg_id = fx.module.declare_data_in_func(msg_id, fx.bcx.func);\n     #[cfg(debug_assertions)]\n     {\n-        fx.add_entity_comment(local_msg_id, msg);\n+        fx.add_comment(local_msg_id, msg);\n     }\n     let msg_ptr = fx.bcx.ins().global_value(pointer_ty(fx.tcx), local_msg_id);\n     fx.bcx.ins().call(puts, &[msg_ptr]);"}, {"sha": "64d585e8a993e1103b55225a5ca7e2b78ad85fa0", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59479bd37583b93941aa3dda2576a833cd83917/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=a59479bd37583b93941aa3dda2576a833cd83917", "patch": "@@ -381,7 +381,7 @@ impl<'tcx> CPlace<'tcx> {\n             };\n             fx.add_comment(\n                 fx.bcx.func.layout.last_inst(cur_block).unwrap(),\n-                format!(\"write_cvalue: {:?} <- {:?}\",self, from),\n+                format!(\"write_cvalue: {:?}: {:?} <- {:?}: {:?}\", self.inner(), self.layout().ty, from.0, from.layout().ty),\n             );\n         }\n "}]}