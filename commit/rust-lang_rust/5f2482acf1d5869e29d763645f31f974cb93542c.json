{"sha": "5f2482acf1d5869e29d763645f31f974cb93542c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMjQ4MmFjZjFkNTg2OWUyOWQ3NjM2NDVmMzFmOTc0Y2I5MzU0MmM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-12T03:24:18Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-12T03:24:18Z"}, "message": "Rollup merge of #25272 - nham:copy_long_diag, r=alexcrichton\n\nAdds long diagnostic messages for:\r\n\r\n - E0184\r\n - E0204\r\n - E0205\r\n - E0206\r\n - E0243\r\n - E0244\r\n - E0249\r\n - E0250\r\n\r\nThis PR also adds some comments to the error codes in `librustc_typeck/diagnostics.rs`.\r\n\r\ncc #24407", "tree": {"sha": "e438063f872b4e9f7bdffece725eafcb02709fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e438063f872b4e9f7bdffece725eafcb02709fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2482acf1d5869e29d763645f31f974cb93542c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2482acf1d5869e29d763645f31f974cb93542c", "html_url": "https://github.com/rust-lang/rust/commit/5f2482acf1d5869e29d763645f31f974cb93542c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2482acf1d5869e29d763645f31f974cb93542c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b527156bdb8ccb41421e2243272043e0cdb746", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b527156bdb8ccb41421e2243272043e0cdb746", "html_url": "https://github.com/rust-lang/rust/commit/30b527156bdb8ccb41421e2243272043e0cdb746"}, {"sha": "3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "html_url": "https://github.com/rust-lang/rust/commit/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca"}], "stats": {"total": 172, "additions": 152, "deletions": 20}, "files": [{"sha": "54ec1aace92112fe16a1109126004b15fdbacdc6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f2482acf1d5869e29d763645f31f974cb93542c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2482acf1d5869e29d763645f31f974cb93542c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5f2482acf1d5869e29d763645f31f974cb93542c", "patch": "@@ -1603,7 +1603,8 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                                         Some(i as usize)),\n                         _ => {\n                             span_err!(tcx.sess, ast_ty.span, E0249,\n-                                      \"expected constant expr for array length\");\n+                                      \"expected constant integer expression \\\n+                                       for array length\");\n                             this.tcx().types.err\n                         }\n                     }"}, {"sha": "ea872d1014425e9b6f0e31deef6f8d8a16d7f35d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 150, "deletions": 19, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/5f2482acf1d5869e29d763645f31f974cb93542c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2482acf1d5869e29d763645f31f974cb93542c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5f2482acf1d5869e29d763645f31f974cb93542c", "patch": "@@ -150,6 +150,148 @@ attribute. Such a function must have the following type signature:\n ```\n fn(isize, *const *const u8) -> isize\n ```\n+\"##,\n+\n+E0184: r##\"\n+Explicitly implementing both Drop and Copy for a type is currently disallowed.\n+This feature can make some sense in theory, but the current implementation is\n+incorrect and can lead to memory unsafety (see [issue #20126][iss20126]), so\n+it has been disabled for now.\n+\n+[iss20126]: https://github.com/rust-lang/rust/issues/20126\n+\"##,\n+\n+E0204: r##\"\n+An attempt to implement the `Copy` trait for a struct failed because one of the\n+fields does not implement `Copy`. To fix this, you must implement `Copy` for the\n+mentioned field. Note that this may not be possible, as in the example of\n+\n+```\n+struct Foo {\n+    foo : Vec<u32>,\n+}\n+\n+impl Copy for Foo { }\n+```\n+\n+This fails because `Vec<T>` does not implement `Copy` for any `T`.\n+\n+Here's another example that will fail:\n+\n+```\n+#[derive(Copy)]\n+struct Foo<'a> {\n+    ty: &'a mut bool,\n+}\n+```\n+\n+This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n+differs from the behavior for `&T`, which is `Copy` when `T` is `Copy`).\n+\"##,\n+\n+E0205: r##\"\n+An attempt to implement the `Copy` trait for an enum failed because one of the\n+variants does not implement `Copy`. To fix this, you must implement `Copy` for\n+the mentioned variant. Note that this may not be possible, as in the example of\n+\n+```\n+enum Foo {\n+    Bar(Vec<u32>),\n+    Baz,\n+}\n+\n+impl Copy for Foo { }\n+```\n+\n+This fails because `Vec<T>` does not implement `Copy` for any `T`.\n+\n+Here's another example that will fail:\n+\n+```\n+#[derive(Copy)]\n+enum Foo<'a> {\n+    Bar(&'a mut bool),\n+    Baz\n+}\n+```\n+\n+This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n+differs from the behavior for `&T`, which is `Copy` when `T` is `Copy`).\n+\"##,\n+\n+E0206: r##\"\n+You can only implement `Copy` for a struct or enum. Both of the following\n+examples will fail, because neither `i32` (primitive type) nor `&'static Bar`\n+(reference to `Bar`) is a struct or enum:\n+\n+```\n+type Foo = i32;\n+impl Copy for Foo { } // error\n+\n+#[derive(Copy, Clone)]\n+struct Bar;\n+impl Copy for &'static Bar { } // error\n+```\n+\"##,\n+\n+E0243: r##\"\n+This error indicates that not enough type parameters were found in a type or\n+trait.\n+\n+For example, the `Foo` struct below is defined to be generic in `T`, but the\n+type parameter is missing in the definition of `Bar`:\n+\n+```\n+struct Foo<T> { x: T }\n+\n+struct Bar { x: Foo }\n+```\n+\"##,\n+\n+E0244: r##\"\n+This error indicates that too many type parameters were found in a type or\n+trait.\n+\n+For example, the `Foo` struct below has no type parameters, but is supplied\n+with two in the definition of `Bar`:\n+\n+```\n+struct Foo { x: bool }\n+\n+struct Bar<S, T> { x: Foo<S, T> }\n+```\n+\"##,\n+\n+E0249: r##\"\n+This error indicates a constant expression for the array length was found, but\n+it was not an integer (signed or unsigned) expression.\n+\n+Some examples of code that produces this error are:\n+\n+```\n+const A: [u32; \"hello\"] = []; // error\n+const B: [u32; true] = []; // error\n+const C: [u32; 0.0] = []; // error\n+\"##,\n+\n+E0250: r##\"\n+This means there was an error while evaluating the expression for the length of\n+a fixed-size array type.\n+\n+Some examples of code that produces this error are:\n+\n+```\n+// divide by zero in the length expression\n+const A: [u32; 1/0] = [];\n+\n+// Rust currently will not evaluate the function `foo` at compile time\n+fn foo() -> usize { 12 }\n+const B: [u32; foo()] = [];\n+\n+// it is an error to try to add `u8` and `f64`\n+use std::{f64, u8};\n+const C: [u32; u8::MAX + f64::EPSILON] = [];\n+```\n \"##\n \n }\n@@ -164,18 +306,18 @@ register_diagnostics! {\n     E0030,\n     E0031,\n     E0033,\n-    E0034,\n-    E0035,\n-    E0036,\n-    E0038,\n+    E0034, // multiple applicable methods in scope\n+    E0035, // does not take type parameters\n+    E0036, // incorrect number of type parameters given for this method\n+    E0038, // cannot convert to a trait object because trait is not object-safe\n     E0040, // explicit use of destructor method\n-    E0044,\n-    E0045,\n+    E0044, // foreign items may not have type parameters\n+    E0045, // variadic function must have C calling convention\n     E0049,\n     E0050,\n     E0053,\n-    E0055,\n-    E0057,\n+    E0055, // method has an incompatible type for trait\n+    E0057, // method has an incompatible type for trait\n     E0059,\n     E0060,\n     E0061,\n@@ -232,7 +374,6 @@ register_diagnostics! {\n     E0178,\n     E0182,\n     E0183,\n-    E0184,\n     E0185,\n     E0186,\n     E0187, // can't infer the kind of the closure\n@@ -254,12 +395,6 @@ register_diagnostics! {\n     E0202, // associated items are not allowed in inherent impls\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported\n-    E0204, // trait `Copy` may not be implemented for this type; field\n-           // does not implement `Copy`\n-    E0205, // trait `Copy` may not be implemented for this type; variant\n-           // does not implement `copy`\n-    E0206, // trait `Copy` may not be implemented for this type; type is\n-           // not a structure or enumeration\n     E0207, // type parameter is not constrained by the impl trait, self type, or predicate\n     E0208,\n     E0209, // builtin traits can only be implemented on structs or enums\n@@ -296,14 +431,10 @@ register_diagnostics! {\n     E0240,\n     E0241,\n     E0242, // internal error looking up a definition\n-    E0243, // wrong number of type arguments\n-    E0244, // wrong number of type arguments\n     E0245, // not a trait\n     E0246, // illegal recursive type\n     E0247, // found module name used as a type\n     E0248, // found value name used as a type\n-    E0249, // expected constant expr for array length\n-    E0250, // expected constant expr for array length\n     E0318, // can't create default impls for traits outside their crates\n     E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck"}]}