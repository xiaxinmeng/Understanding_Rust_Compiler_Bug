{"sha": "1fac38088609747627b07807945224cf1ea642ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYWMzODA4ODYwOTc0NzYyN2IwNzgwNzk0NTIyNGNmMWVhNjQyY2E=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-20T10:11:11Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-20T12:16:16Z"}, "message": "partially HirIdify lints", "tree": {"sha": "3ed461d9d06e42d86b5f5c4139bbb3d8a3946a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed461d9d06e42d86b5f5c4139bbb3d8a3946a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fac38088609747627b07807945224cf1ea642ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fac38088609747627b07807945224cf1ea642ca", "html_url": "https://github.com/rust-lang/rust/commit/1fac38088609747627b07807945224cf1ea642ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fac38088609747627b07807945224cf1ea642ca/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "html_url": "https://github.com/rust-lang/rust/commit/d61b25419bec5a3e839fdb16f720cfb12e52ddf1"}], "stats": {"total": 95, "additions": 52, "deletions": 43}, "files": [{"sha": "a2559c774011302d59bdd470bc62cbddc4ff3a19", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -7,7 +7,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Applicability;\n-use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n+use syntax::ast::{LitKind, DUMMY_NODE_ID};\n use syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n \n /// **What it does:** Checks for boolean expressions that can be written more\n@@ -72,7 +72,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n         _: &'tcx FnDecl,\n         body: &'tcx Body,\n         _: Span,\n-        _: NodeId,\n+        _: HirId,\n     ) {\n         NonminimalBoolVisitor { cx }.visit_body(body)\n     }"}, {"sha": "da86734cac1e9481669b637644e998bd14c5a83e", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -6,7 +6,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::{Attribute, NodeId};\n+use syntax::ast::Attribute;\n use syntax::source_map::Span;\n \n use crate::utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n@@ -123,9 +123,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CyclomaticComplexity {\n         _: &'tcx FnDecl,\n         body: &'tcx Body,\n         span: Span,\n-        node_id: NodeId,\n+        hir_id: HirId,\n     ) {\n-        let def_id = cx.tcx.hir().local_def_id(node_id);\n+        let def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n         if !cx.tcx.has_attr(def_id, \"test\") {\n             self.check(cx, body, span);\n         }"}, {"sha": "35fef9e3af4e1dfd31afcb849d1b1b1abb4b2c5a", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -5,7 +5,6 @@ use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::NodeId;\n use syntax::source_map::Span;\n \n /// **What it does:** Checks for `use Enum::*`.\n@@ -39,7 +38,7 @@ impl LintPass for EnumGlobUse {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n-    fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod, _: Span, _: NodeId) {\n+    fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod, _: Span, _: HirId) {\n         // only check top level `use` statements\n         for item in &m.item_ids {\n             self.lint_item(cx, cx.tcx.hir().expect_item(item.id));"}, {"sha": "a39ee6d18eeaf869cc2545af0417c299457a4f3e", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -66,11 +66,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         _: &'tcx FnDecl,\n         body: &'tcx Body,\n         _: Span,\n-        node_id: NodeId,\n+        hir_id: HirId,\n     ) {\n         // If the method is an impl for a trait, don't warn\n-        let parent_id = cx.tcx.hir().get_parent(node_id);\n-        let parent_node = cx.tcx.hir().find(parent_id);\n+        let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n+        let parent_node = cx.tcx.hir().find_by_hir_id(parent_id);\n \n         if let Some(Node::Item(item)) = parent_node {\n             if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.node {\n@@ -84,7 +84,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             too_large_for_stack: self.too_large_for_stack,\n         };\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(node_id);\n+        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n         let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n         ExprUseVisitor::new(&mut v, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).consume_body(body);\n "}, {"sha": "7ea01ad5ec95034122f58fcdd45859276fe37adc", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -112,9 +112,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         decl: &'tcx hir::FnDecl,\n         body: &'tcx hir::Body,\n         span: Span,\n-        nodeid: ast::NodeId,\n+        hir_id: hir::HirId,\n     ) {\n-        let is_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(nodeid)) {\n+        let is_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_hir_id(\n+            cx.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+        {\n             matches!(item.node, hir::ItemKind::Impl(_, _, _, _, Some(_), _, _))\n         } else {\n             false\n@@ -146,6 +148,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             }\n         }\n \n+        let nodeid = cx.tcx.hir().hir_to_node_id(hir_id);\n         self.check_raw_ptr(cx, unsafety, decl, body, nodeid);\n         self.check_line_number(cx, span);\n     }"}, {"sha": "8bbcce2098477afc906a1a57e23d4349130adfd9", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::{in_macro, is_expn_of, snippet_opt, span_lint_and_then};\n-use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl, MatchSource};\n+use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, MatchSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n-use syntax::{ast::NodeId, source_map::Span};\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for missing return statements at the end of a block.\n ///\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         _: &'tcx FnDecl,\n         body: &'tcx Body,\n         span: Span,\n-        _: NodeId,\n+        _: HirId,\n     ) {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n         let mir = cx.tcx.optimized_mir(def_id);"}, {"sha": "d045eaefbdb9164db6e302af7e92898c849c3004", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -1,5 +1,4 @@\n use crate::consts::{constant, Constant};\n-use crate::reexport::*;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_item_name, get_parent_expr, implements_trait, in_constant, in_macro, is_integer_literal, iter_input_pats,\n@@ -256,7 +255,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         decl: &'tcx FnDecl,\n         body: &'tcx Body,\n         _: Span,\n-        _: NodeId,\n+        _: HirId,\n     ) {\n         if let FnKind::Closure(_) = k {\n             // Does not apply to closures"}, {"sha": "00a3de0632f8dd5da059ef181bd700c4e61f6764", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -1,11 +1,10 @@\n use crate::utils::{is_entrypoint_fn, span_lint};\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n-use rustc::hir::{Body, Constness, FnDecl};\n+use rustc::hir::{Body, Constness, FnDecl, HirId};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n-use syntax::ast::NodeId;\n use syntax_pos::Span;\n \n /// **What it does:**\n@@ -79,9 +78,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n         _: &FnDecl,\n         _: &Body,\n         span: Span,\n-        node_id: NodeId,\n+        hir_id: HirId,\n     ) {\n-        let def_id = cx.tcx.hir().local_def_id(node_id);\n+        let def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n \n         if is_entrypoint_fn(cx, def_id) {\n             return;"}, {"sha": "d77d95a9fffeaf18ca46fd909d79c9d9a4af265c", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         decl: &'tcx FnDecl,\n         body: &'tcx Body,\n         span: Span,\n-        node_id: NodeId,\n+        hir_id: HirId,\n     ) {\n         if in_macro(span) {\n             return;\n@@ -103,7 +103,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(node_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_by_hir_id(\n+            cx.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+        {\n             if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n                 ItemKind::Trait(..))\n             {\n@@ -122,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(node_id);\n+        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.to_vec())\n             .filter(|p| !p.is_global())"}, {"sha": "0fd10d7796c586d059d5754661869f1fc9831b6f", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -5,7 +5,7 @@ use crate::utils::{\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir::intravisit::FnKind;\n-use rustc::hir::{def_id, Body, FnDecl};\n+use rustc::hir::{def_id, Body, FnDecl, HirId};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::mir::{\n     self, traversal,\n@@ -17,7 +17,6 @@ use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use std::convert::TryFrom;\n use syntax::{\n-    ast::NodeId,\n     source_map::{BytePos, Span},\n };\n \n@@ -88,7 +87,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         _: &'tcx FnDecl,\n         body: &'tcx Body,\n         _: Span,\n-        _: NodeId,\n+        _: HirId,\n     ) {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n         let mir = cx.tcx.optimized_mir(def_id);"}, {"sha": "40e76c2c089be56a6e2df5dde3ffd5279b38140c", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         decl: &'tcx FnDecl,\n         body: &'tcx Body,\n         _: Span,\n-        _: NodeId,\n+        _: HirId,\n     ) {\n         if in_external_macro(cx.sess(), body.value.span) {\n             return;"}, {"sha": "5174af9f7f42b0f648641fa0ead353c90adae310", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -13,7 +13,6 @@ use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::NodeId;\n use syntax_pos::Span;\n \n /// **What it does:** Checks for functions taking arguments by reference, where\n@@ -165,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         decl: &'tcx FnDecl,\n         _body: &'tcx Body,\n         span: Span,\n-        node_id: NodeId,\n+        hir_id: HirId,\n     ) {\n         if in_macro(span) {\n             return;\n@@ -187,15 +186,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(node_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_by_hir_id(\n+            cx.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+        {\n             if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n                 ItemKind::Trait(..))\n             {\n                 return;\n             }\n         }\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(node_id);\n+        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);"}, {"sha": "ff1eb459128935adc3642733f52c2bb57a8e87ce", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -1,7 +1,6 @@\n #![allow(clippy::default_hash_types)]\n \n use crate::consts::{constant, Constant};\n-use crate::reexport::*;\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n@@ -175,9 +174,19 @@ impl LintPass for TypePass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n-    fn check_fn(&mut self, cx: &LateContext<'_, '_>, _: FnKind<'_>, decl: &FnDecl, _: &Body, _: Span, id: NodeId) {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_, '_>,\n+        _: FnKind<'_>,\n+        decl: &FnDecl,\n+        _: &Body,\n+        _: Span,\n+        id: HirId,\n+    ) {\n         // skip trait implementations, see #605\n-        if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent(id)) {\n+        if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_hir_id(\n+            cx.tcx.hir().get_parent_item(id))\n+        {\n             if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.node {\n                 return;\n             }\n@@ -1336,7 +1345,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n         decl: &'tcx FnDecl,\n         _: &'tcx Body,\n         _: Span,\n-        _: NodeId,\n+        _: HirId,\n     ) {\n         self.check_fndecl(cx, decl);\n     }"}, {"sha": "57aa8810df025daed3fcd658c4895db48c7053d4", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visit\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast;\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n \n@@ -53,7 +52,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n         decl: &'tcx hir::FnDecl,\n         body: &'tcx hir::Body,\n         span: Span,\n-        fn_id: ast::NodeId,\n+        fn_id: hir::HirId,\n     ) {\n         if in_macro(span) {\n             return;"}, {"sha": "c2288aed2d6bd48cdb141b5344fcafb9774b63d7", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -5,7 +5,6 @@ use rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n-use syntax::ast::NodeId;\n use syntax::source_map::Span;\n \n /// **What it does:** Checks for calls of `unwrap[_err]()` that cannot fail.\n@@ -198,7 +197,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         decl: &'tcx FnDecl,\n         body: &'tcx Body,\n         span: Span,\n-        fn_id: NodeId,\n+        fn_id: HirId,\n     ) {\n         if in_macro(span) {\n             return;"}, {"sha": "6cb57a4bcf19523422a402d09345c34567f54aeb", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fac38088609747627b07807945224cf1ea642ca/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=1fac38088609747627b07807945224cf1ea642ca", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::{BindingAnnotation, Expr, ExprKind, Pat, PatKind, QPath, Stmt, S\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n+use syntax::ast::{Attribute, LitKind};\n \n /// **What it does:** Generates clippy code that detects the offending pattern\n ///\n@@ -103,7 +103,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         prelude();\n-        PrintVisitor::new(\"var\").visit_variant(var, generics, DUMMY_NODE_ID);\n+        PrintVisitor::new(\"var\").visit_variant(var, generics, hir::DUMMY_HIR_ID);\n         done();\n     }\n "}]}