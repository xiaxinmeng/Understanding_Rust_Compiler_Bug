{"sha": "727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "node_id": "C_kwDOAAsO6NoAKDcyN2ExZmQxOTQ1Njg1ZjIxZDRkMmIxZDg2ZGJmNjQyOTM3MmYzZWY", "commit": {"author": {"name": "Roy Wellington \u2163", "email": "cactus_hugged@yahoo.com", "date": "2023-01-21T23:21:43Z"}, "committer": {"name": "Roy Wellington \u2163", "email": "cactus_hugged@yahoo.com", "date": "2023-01-30T07:36:52Z"}, "message": "Keep all theme-updating logic together\n\nPrior to this PR, if the page is restored from the browser bfcache\u00b9, we\ncall `switchToSavedTheme`. But `switchToSavedTheme` never looks at the\n`use-system-theme` preference. Further, if it can't find a saved theme,\nit will fall back to the default of \"light\".\n\nFor a user with cookies disabled\u00b2 whose preferred color scheme is dark,\nthis means the theme will wobble back and forth between dark and light.\nThe sequence that occurs is,\n\n1. The page is loaded. During a page load, we consult\n   `use-system-theme`: as cookies are disabled, this preference is\n   unset. The default is true.\n\n   Because the default is true, we look at the preferred color scheme:\n   for our example user, that's \"dark\". **The page theme is set to\n   dark.** We'll attempt to store these preferences in localStorage, but\n   fail due to cookies being disabled.\n\n2. The user navigates through the docs. Subsequent page loads happen,\n   and the same process in step 1 recurs. Previous pages are\n   (potentially) put into the bfcache.\n\n3. The user navigates backwards/forwards, causing a page in bfcache to\n   be pulled out of cache. The `pageShow` event handler is triggered.\n   However, this calls `switchToSavedTheme`: this doesn't consider the\n   system theme, as noted above. Instead, it only looks for a saved\n   theme. However, with cookies disabled, there is none. It defaults to\n   light. **The page theme is set to light!** The user wonders why the\n   dark theme is lost.\n\nThere are effectively two functions trying to determine and apply the\ncorrect theme: `updateSystemTheme` and `switchToSavedTheme`. Thus, we\nmerge them into just one: `updateTheme`. This function contains all the\nlogic for determining the correct theme, and is called in all\ncircumstances where we need to set the theme:\n\n* The initial page load\n* If the browser preferred color scheme (i.e., light/dark mode) is\n  changed\n* If the page is restored from bfcache\n* If the user updates the theme preferences (i.e., in `settings.js`)\n\nFixes #94250.\n\n\u00b9bfcache: https://web.dev/bfcache/ The bfcache is used to sleep a page,\nif the user navigates away from it, and to restore it from cache if the\nuser returns to it.\n\n\u00b2Note that the browser preference that enables/disables cookies really\ncontrols many forms of storage. The same preference thus also affects\nlocalStorage. (This is so a normal browser user doesn't need to\nunderstand the distinction between \"cookies\" and \"localStorage\".)", "tree": {"sha": "0aeb4fb2c97b436ef18c571c29927cde4f43381f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aeb4fb2c97b436ef18c571c29927cde4f43381f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "html_url": "https://github.com/rust-lang/rust/commit/727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/727a1fd1945685f21d4d2b1d86dbf6429372f3ef/comments", "author": {"login": "thanatos", "id": 90853, "node_id": "MDQ6VXNlcjkwODUz", "avatar_url": "https://avatars.githubusercontent.com/u/90853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanatos", "html_url": "https://github.com/thanatos", "followers_url": "https://api.github.com/users/thanatos/followers", "following_url": "https://api.github.com/users/thanatos/following{/other_user}", "gists_url": "https://api.github.com/users/thanatos/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanatos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanatos/subscriptions", "organizations_url": "https://api.github.com/users/thanatos/orgs", "repos_url": "https://api.github.com/users/thanatos/repos", "events_url": "https://api.github.com/users/thanatos/events{/privacy}", "received_events_url": "https://api.github.com/users/thanatos/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thanatos", "id": 90853, "node_id": "MDQ6VXNlcjkwODUz", "avatar_url": "https://avatars.githubusercontent.com/u/90853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanatos", "html_url": "https://github.com/thanatos", "followers_url": "https://api.github.com/users/thanatos/followers", "following_url": "https://api.github.com/users/thanatos/following{/other_user}", "gists_url": "https://api.github.com/users/thanatos/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanatos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanatos/subscriptions", "organizations_url": "https://api.github.com/users/thanatos/orgs", "repos_url": "https://api.github.com/users/thanatos/repos", "events_url": "https://api.github.com/users/thanatos/events{/privacy}", "received_events_url": "https://api.github.com/users/thanatos/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa214c3b11f6444c268b4ca7d93219df3dc020a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa214c3b11f6444c268b4ca7d93219df3dc020a5", "html_url": "https://github.com/rust-lang/rust/commit/fa214c3b11f6444c268b4ca7d93219df3dc020a5"}], "stats": {"total": 100, "additions": 54, "deletions": 46}, "files": [{"sha": "d51cce37d64628790684ed3ccb9c48c66d9c2f3e", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/727a1fd1945685f21d4d2b1d86dbf6429372f3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/727a1fd1945685f21d4d2b1d86dbf6429372f3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "patch": "@@ -1,5 +1,5 @@\n // Local js definitions:\n-/* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme */\n+/* global getSettingValue, getVirtualKey, updateLocalStorage, updateTheme */\n /* global addClass, removeClass, onEach, onEachLazy, blurHandler, elemIsInParent */\n /* global MAIN_ID, getVar, getSettingsButton */\n \n@@ -19,7 +19,7 @@\n             case \"theme\":\n             case \"preferred-dark-theme\":\n             case \"preferred-light-theme\":\n-                updateSystemTheme();\n+                updateTheme();\n                 updateLightAndDark();\n                 break;\n             case \"line-numbers\":"}, {"sha": "8836d1b2e464bca1dd00c35ad9bd240ddbf72152", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 52, "deletions": 44, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/727a1fd1945685f21d4d2b1d86dbf6429372f3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/727a1fd1945685f21d4d2b1d86dbf6429372f3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "patch": "@@ -153,63 +153,74 @@ function switchTheme(styleElem, mainStyleElem, newThemeName, saveTheme) {\n     }\n }\n \n-const updateSystemTheme = (function() {\n-    if (!window.matchMedia) {\n-        // fallback to the CSS computed value\n-        return () => {\n-            const cssTheme = getComputedStyle(document.documentElement)\n-                .getPropertyValue(\"content\");\n-\n-            switchTheme(\n-                window.currentTheme,\n-                window.mainTheme,\n-                JSON.parse(cssTheme) || \"light\",\n-                true\n-            );\n+const updateTheme = (function() {\n+    /**\n+     * Update the current theme to match whatever the current combination of\n+     * * the preference for using the system theme\n+     *   (if this is the case, the value of preferred-light-theme, if the\n+     *   system theme is light, otherwise if dark, the value of\n+     *   preferred-dark-theme.)\n+     * * the preferred theme\n+     * \u2026 dictates that it should be.\n+     */\n+    function updateTheme() {\n+        const use = (theme, saveTheme) => {\n+            switchTheme(window.currentTheme, window.mainTheme, theme, saveTheme);\n         };\n-    }\n \n-    // only listen to (prefers-color-scheme: dark) because light is the default\n-    const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n-\n-    function handlePreferenceChange(mql) {\n-        const use = theme => {\n-            switchTheme(window.currentTheme, window.mainTheme, theme, true);\n-        };\n         // maybe the user has disabled the setting in the meantime!\n         if (getSettingValue(\"use-system-theme\") !== \"false\") {\n             const lightTheme = getSettingValue(\"preferred-light-theme\") || \"light\";\n             const darkTheme = getSettingValue(\"preferred-dark-theme\") || \"dark\";\n \n-            if (mql.matches) {\n-                use(darkTheme);\n+            if (isDarkMode()) {\n+                use(darkTheme, true);\n             } else {\n                 // prefers a light theme, or has no preference\n-                use(lightTheme);\n+                use(lightTheme, true);\n             }\n             // note: we save the theme so that it doesn't suddenly change when\n             // the user disables \"use-system-theme\" and reloads the page or\n             // navigates to another page\n         } else {\n-            use(getSettingValue(\"theme\"));\n+            use(getSettingValue(\"theme\"), false);\n         }\n     }\n \n-    mql.addListener(handlePreferenceChange);\n+    // This is always updated below to a function () => bool.\n+    let isDarkMode;\n \n-    return () => {\n-        handlePreferenceChange(mql);\n-    };\n-})();\n+    // Determine the function for isDarkMode, and if we have\n+    // `window.matchMedia`, set up an event listener on the preferred color\n+    // scheme.\n+    //\n+    // Otherwise, fall back to the prefers-color-scheme value CSS captured in\n+    // the \"content\" property.\n+    if (window.matchMedia) {\n+        // only listen to (prefers-color-scheme: dark) because light is the default\n+        const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n \n-function switchToSavedTheme() {\n-    switchTheme(\n-        window.currentTheme,\n-        window.mainTheme,\n-        getSettingValue(\"theme\") || \"light\",\n-        false\n-    );\n-}\n+        isDarkMode = () => mql.matches;\n+\n+        if (mql.addEventListener) {\n+            mql.addEventListener(\"change\", updateTheme);\n+        } else {\n+            // This is deprecated, see:\n+            // https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener\n+            mql.addListener(updateTheme);\n+        }\n+    } else {\n+        // fallback to the CSS computed value\n+        const cssContent = getComputedStyle(document.documentElement)\n+            .getPropertyValue(\"content\");\n+        // (Note: the double-quotes come from that this is a CSS value, which\n+        // might be a length, string, etc.)\n+        const cssColorScheme = cssContent || \"\\\"light\\\"\";\n+        isDarkMode = () => (cssColorScheme === \"\\\"dark\\\"\");\n+    }\n+\n+    return updateTheme;\n+})();\n \n if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n     // update the preferred dark theme if the user is already using a dark theme\n@@ -219,13 +230,10 @@ if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n         && darkThemes.indexOf(localStoredTheme) >= 0) {\n         updateLocalStorage(\"preferred-dark-theme\", localStoredTheme);\n     }\n-\n-    // call the function to initialize the theme at least once!\n-    updateSystemTheme();\n-} else {\n-    switchToSavedTheme();\n }\n \n+updateTheme();\n+\n if (getSettingValue(\"source-sidebar-show\") === \"true\") {\n     // At this point in page load, `document.body` is not available yet.\n     // Set a class on the `<html>` element instead.\n@@ -243,6 +251,6 @@ if (getSettingValue(\"source-sidebar-show\") === \"true\") {\n // specifically when talking to a remote website with no caching.\n window.addEventListener(\"pageshow\", ev => {\n     if (ev.persisted) {\n-        setTimeout(switchToSavedTheme, 0);\n+        setTimeout(updateTheme, 0);\n     }\n });"}]}