{"sha": "95a6262df18d8eb474efab273717dee25e79738e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YTYyNjJkZjE4ZDhlYjQ3NGVmYWIyNzM3MTdkZWUyNWU3OTczOGU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-23T02:36:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-11T23:36:15Z"}, "message": "Replace `FileSearch::for_each_lib_search_path` with `search_paths`.\n\nReturning an iterator leads to nicer code all around.", "tree": {"sha": "b3d91f4d3ab815e5395affd38c45dde90e4d8aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3d91f4d3ab815e5395affd38c45dde90e4d8aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a6262df18d8eb474efab273717dee25e79738e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a6262df18d8eb474efab273717dee25e79738e", "html_url": "https://github.com/rust-lang/rust/commit/95a6262df18d8eb474efab273717dee25e79738e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a6262df18d8eb474efab273717dee25e79738e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bfe32cc9301d404c98d896efbabe8f04361d5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bfe32cc9301d404c98d896efbabe8f04361d5bf", "html_url": "https://github.com/rust-lang/rust/commit/2bfe32cc9301d404c98d896efbabe8f04361d5bf"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "c204556d517a818717458504633c9fc68f6e2c75", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/95a6262df18d8eb474efab273717dee25e79738e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a6262df18d8eb474efab273717dee25e79738e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=95a6262df18d8eb474efab273717dee25e79738e", "patch": "@@ -29,23 +29,19 @@ pub enum FileMatch {\n // A module for searching for libraries\n \n pub struct FileSearch<'a> {\n-    pub sysroot: &'a Path,\n-    pub triple: &'a str,\n-    pub search_paths: &'a [SearchPath],\n-    pub tlib_path: &'a SearchPath,\n-    pub kind: PathKind,\n+    sysroot: &'a Path,\n+    triple: &'a str,\n+    search_paths: &'a [SearchPath],\n+    tlib_path: &'a SearchPath,\n+    kind: PathKind,\n }\n \n impl<'a> FileSearch<'a> {\n-    pub fn for_each_lib_search_path<F>(&self, mut f: F) where\n-        F: FnMut(&SearchPath)\n-    {\n-        let iter = self.search_paths.iter().filter(|sp| sp.kind.matches(self.kind));\n-        for search_path in iter {\n-            f(search_path);\n-        }\n-\n-        f(self.tlib_path);\n+    pub fn search_paths(&self) -> impl Iterator<Item = &'a SearchPath> {\n+        let kind = self.kind;\n+        self.search_paths.iter()\n+            .filter(move |sp| sp.kind.matches(kind))\n+            .chain(std::iter::once(self.tlib_path))\n     }\n \n     pub fn get_lib_path(&self) -> PathBuf {\n@@ -55,7 +51,7 @@ impl<'a> FileSearch<'a> {\n     pub fn search<F>(&self, mut pick: F)\n         where F: FnMut(&Path, PathKind) -> FileMatch\n     {\n-        self.for_each_lib_search_path(|search_path| {\n+        for search_path in self.search_paths() {\n             debug!(\"searching {}\", search_path.dir.display());\n             fn is_rlib(p: &Path) -> bool {\n                 p.extension() == Some(\"rlib\".as_ref())\n@@ -78,7 +74,7 @@ impl<'a> FileSearch<'a> {\n                     }\n                 }\n             }\n-        });\n+        }\n     }\n \n     pub fn new(sysroot: &'a Path,\n@@ -97,13 +93,11 @@ impl<'a> FileSearch<'a> {\n         }\n     }\n \n-    // Returns a list of directories where target-specific dylibs might be located.\n-    pub fn get_dylib_search_paths(&self) -> Vec<PathBuf> {\n-        let mut paths = Vec::new();\n-        self.for_each_lib_search_path(|search_path| {\n-            paths.push(search_path.dir.to_path_buf());\n-        });\n-        paths\n+    // Returns just the directories within the search paths.\n+    pub fn search_path_dirs(&self) -> Vec<PathBuf> {\n+        self.search_paths()\n+            .map(|sp| sp.dir.to_path_buf())\n+            .collect()\n     }\n \n     // Returns a list of directories where target-specific tool binaries are located."}, {"sha": "f1c0464f5f25bad9bc697b874df316543d671597", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95a6262df18d8eb474efab273717dee25e79738e/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a6262df18d8eb474efab273717dee25e79738e/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=95a6262df18d8eb474efab273717dee25e79738e", "patch": "@@ -212,12 +212,7 @@ fn link_binary_output(sess: &Session,\n }\n \n fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {\n-    let mut search = Vec::new();\n-    sess.target_filesearch(PathKind::Native).for_each_lib_search_path(|search_path| {\n-        search.push(search_path.dir.to_path_buf());\n-    });\n-\n-    search\n+    sess.target_filesearch(PathKind::Native).search_path_dirs()\n }\n \n fn archive_config<'a>(sess: &'a Session,\n@@ -1067,12 +1062,13 @@ fn link_args(cmd: &mut dyn Linker,\n fn add_local_native_libraries(cmd: &mut dyn Linker,\n                               sess: &Session,\n                               codegen_results: &CodegenResults) {\n-    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|search_path| {\n+    let filesearch = sess.target_filesearch(PathKind::All);\n+    for search_path in filesearch.search_paths() {\n         match search_path.kind {\n             PathKind::Framework => { cmd.framework_path(&search_path.dir); }\n             _ => { cmd.include_path(&fix_windows_verbatim_for_gcc(&search_path.dir)); }\n         }\n-    });\n+    }\n \n     let relevant_libs = codegen_results.crate_info.used_libraries.iter().filter(|l| {\n         relevant_lib(sess, l)"}, {"sha": "b26d81b9c6729ab931da8e6769dd5742b6b401af", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95a6262df18d8eb474efab273717dee25e79738e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a6262df18d8eb474efab273717dee25e79738e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=95a6262df18d8eb474efab273717dee25e79738e", "patch": "@@ -975,7 +975,7 @@ where\n         let mut old_path = OsString::new();\n         if cfg!(windows) {\n             old_path = env::var_os(\"PATH\").unwrap_or(old_path);\n-            let mut new_path = sess.host_filesearch(PathKind::All).get_dylib_search_paths();\n+            let mut new_path = sess.host_filesearch(PathKind::All).search_path_dirs();\n             for path in env::split_paths(&old_path) {\n                 if !new_path.contains(&path) {\n                     new_path.push(path);"}]}