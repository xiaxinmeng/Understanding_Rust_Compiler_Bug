{"sha": "8e37208040a456d4e481472f69b3b584655ee90f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMzcyMDgwNDBhNDU2ZDRlNDgxNDcyZjY5YjNiNTg0NjU1ZWU5MGY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-27T11:23:29Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-27T11:23:29Z"}, "message": "Merge #244\n\n244: Switch to id-arena r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d7c7674e657443a104cc06a24c1254e8396ca286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7c7674e657443a104cc06a24c1254e8396ca286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e37208040a456d4e481472f69b3b584655ee90f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e37208040a456d4e481472f69b3b584655ee90f", "html_url": "https://github.com/rust-lang/rust/commit/8e37208040a456d4e481472f69b3b584655ee90f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e37208040a456d4e481472f69b3b584655ee90f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7adbea9c425847ee7193d3eaba2bef5ba4f0d4bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7adbea9c425847ee7193d3eaba2bef5ba4f0d4bd", "html_url": "https://github.com/rust-lang/rust/commit/7adbea9c425847ee7193d3eaba2bef5ba4f0d4bd"}, {"sha": "ed023929d5f3a53a3989371452291176d3ce543c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed023929d5f3a53a3989371452291176d3ce543c", "html_url": "https://github.com/rust-lang/rust/commit/ed023929d5f3a53a3989371452291176d3ce543c"}], "stats": {"total": 76, "additions": 27, "deletions": 49}, "files": [{"sha": "b4d466fb63dc10baa7db135fa74f9a274efb6644", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e37208040a456d4e481472f69b3b584655ee90f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8e37208040a456d4e481472f69b3b584655ee90f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8e37208040a456d4e481472f69b3b584655ee90f", "patch": "@@ -350,6 +350,11 @@ name = \"humansize\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"id-arena\"\n+version = \"1.0.2\"\n+source = \"git+https://github.com/fitzgen/id-arena/?rev=43ecd67#43ecd67d81f707dfdc1b0d067b96c17f7a7ef9b8\"\n+\n [[package]]\n name = \"idna\"\n version = \"0.1.5\"\n@@ -599,6 +604,7 @@ name = \"ra_analysis\"\n version = \"0.1.0\"\n dependencies = [\n  \"fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"id-arena 1.0.2 (git+https://github.com/fitzgen/id-arena/?rev=43ecd67)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_editor 0.1.0\",\n@@ -1301,6 +1307,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n \"checksum heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea04fa3ead4e05e51a7c806fc07271fdbde4e246a6c6d1efd52e72230b771b82\"\n \"checksum humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e\"\n+\"checksum id-arena 1.0.2 (git+https://github.com/fitzgen/id-arena/?rev=43ecd67)\" = \"<none>\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum im 12.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9c7f9bb8aee47fc16d535a705f7867a9fc83bb822e5e1043bb98e77ffeed3c\"\n \"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\""}, {"sha": "5dae458575aa34cdafd0d7d1713d10e75e86f69c", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=8e37208040a456d4e481472f69b3b584655ee90f", "patch": "@@ -12,6 +12,7 @@ fst = \"0.3.1\"\n salsa = \"0.8.0\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.6.4\"\n+id-arena = { git = \"https://github.com/fitzgen/id-arena/\", rev = \"43ecd67\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "a752ec0c11b44e8005d11478d62bc28de5071a82", "filename": "crates/ra_analysis/src/arena.rs", "status": "modified", "additions": 13, "deletions": 43, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Farena.rs?ref=8e37208040a456d4e481472f69b3b584655ee90f", "patch": "@@ -4,7 +4,6 @@\n \n use std::{\n     fmt,\n-    ops::{Index, IndexMut},\n     hash::{Hash, Hasher},\n     marker::PhantomData,\n };\n@@ -41,56 +40,27 @@ impl<T> Hash for Id<T> {\n }\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct Arena<T> {\n-    data: Vec<T>,\n+pub(crate) struct ArenaBehavior<T> {\n+    _ty: PhantomData<T>,\n }\n \n-impl<T> Default for Arena<T> {\n-    fn default() -> Arena<T> {\n-        Arena { data: Vec::new() }\n+impl<T> id_arena::ArenaBehavior for ArenaBehavior<T> {\n+    type Id = Id<T>;\n+    fn new_arena_id() -> usize {\n+        0\n     }\n-}\n-\n-impl<T> Arena<T> {\n-    pub(crate) fn push(&mut self, value: T) -> Id<T> {\n-        let id = self.data.len() as u32;\n-        self.data.push(value);\n+    fn new_id(_arena_id: usize, index: usize) -> Id<T> {\n         Id {\n-            idx: id as u32,\n+            idx: index as u32,\n             _ty: PhantomData,\n         }\n     }\n-\n-    pub(crate) fn keys<'a>(&'a self) -> impl Iterator<Item = Id<T>> + 'a {\n-        (0..(self.data.len() as u32)).into_iter().map(|idx| Id {\n-            idx,\n-            _ty: PhantomData,\n-        })\n-    }\n-\n-    pub(crate) fn items<'a>(&'a self) -> impl Iterator<Item = (Id<T>, &T)> + 'a {\n-        self.data.iter().enumerate().map(|(idx, item)| {\n-            let idx = idx as u32;\n-            (\n-                Id {\n-                    idx,\n-                    _ty: PhantomData,\n-                },\n-                item,\n-            )\n-        })\n+    fn index(id: Id<T>) -> usize {\n+        id.idx as usize\n     }\n-}\n-\n-impl<T> Index<Id<T>> for Arena<T> {\n-    type Output = T;\n-    fn index(&self, id: Id<T>) -> &T {\n-        &self.data[id.idx as usize]\n+    fn arena_id(_id: Id<T>) -> usize {\n+        0\n     }\n }\n \n-impl<T> IndexMut<Id<T>> for Arena<T> {\n-    fn index_mut(&mut self, id: Id<T>) -> &mut T {\n-        &mut self.data[id.idx as usize]\n-    }\n-}\n+pub(crate) type Arena<T> = id_arena::Arena<T, ArenaBehavior<T>>;"}, {"sha": "5307a0a8e1b78b627a9c058ac41f0e33e8e28f08", "filename": "crates/ra_analysis/src/descriptors/function/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs?ref=8e37208040a456d4e481472f69b3b584655ee90f", "patch": "@@ -58,13 +58,13 @@ impl FnScopes {\n         })\n     }\n     fn root_scope(&mut self) -> ScopeId {\n-        self.scopes.push(ScopeData {\n+        self.scopes.alloc(ScopeData {\n             parent: None,\n             entries: vec![],\n         })\n     }\n     fn new_scope(&mut self, parent: ScopeId) -> ScopeId {\n-        self.scopes.push(ScopeData {\n+        self.scopes.alloc(ScopeData {\n             parent: Some(parent),\n             entries: vec![],\n         })"}, {"sha": "a6eaec178cd8166f34423a4785b118db9ad2e705", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e37208040a456d4e481472f69b3b584655ee90f/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=8e37208040a456d4e481472f69b3b584655ee90f", "patch": "@@ -166,12 +166,12 @@ pub(crate) struct ModuleTree {\n \n impl ModuleTree {\n     fn modules<'a>(&'a self) -> impl Iterator<Item = ModuleId> + 'a {\n-        self.mods.keys()\n+        self.mods.iter().map(|(id, _)| id)\n     }\n \n     fn modules_for_source(&self, source: ModuleSource) -> Vec<ModuleId> {\n         self.mods\n-            .items()\n+            .iter()\n             .filter(|(_idx, it)| it.source == source)\n             .map(|(idx, _)| idx)\n             .collect()\n@@ -333,11 +333,11 @@ struct LinkData {\n \n impl ModuleTree {\n     fn push_mod(&mut self, data: ModuleData) -> ModuleId {\n-        self.mods.push(data)\n+        self.mods.alloc(data)\n     }\n     fn push_link(&mut self, data: LinkData) -> LinkId {\n         let owner = data.owner;\n-        let id = self.links.push(data);\n+        let id = self.links.alloc(data);\n         self.mods[owner].children.push(id);\n         id\n     }"}]}