{"sha": "1a6d029b075c2006f6a49c5ca4a062bc2a713cd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmQwMjliMDc1YzIwMDZmNmE0OWM1Y2E0YTA2MmJjMmE3MTNjZDU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-22T00:56:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-22T00:58:49Z"}, "message": "Emit a better error message for unbound type parameters in nested functions\n\nThis code was causing a bounds check failure:\n\nfn hd[U](&vec[U] v) -> U {\n  fn hd1(&vec[U] w) -> U {\n    ret w.(0);\n  }\n  ret hd1(v);\n}\n\nbecause in hd1, U was being treated as if it referred to a type\nparameter of hd1, rather than referring to the lexically enclosing binding\nfor U that's part of hd.\n\nI'm actually not sure whether this is a legit program or not. But I wanted\nto get rid of the bounds check error, so I assumed that program shouldn't\ncompile and made it a proper error message.", "tree": {"sha": "22e1bc98a012a05c100d927ba92d291527f67b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22e1bc98a012a05c100d927ba92d291527f67b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5", "html_url": "https://github.com/rust-lang/rust/commit/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd8ff46477caa89814bd5322619707873441c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd8ff46477caa89814bd5322619707873441c55", "html_url": "https://github.com/rust-lang/rust/commit/efd8ff46477caa89814bd5322619707873441c55"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "a519ac33bd73aaf77e6d06d1221a377960f9beb2", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1a6d029b075c2006f6a49c5ca4a062bc2a713cd5", "patch": "@@ -2580,18 +2580,23 @@ fn type_err_to_str(&ty::type_err err) -> str {\n \n // Converts type parameters in a type to type variables and returns the\n // resulting type along with a list of type variable IDs.\n-fn bind_params_in_type(&ctxt cx, fn() -> int  next_ty_var, t typ,\n+fn bind_params_in_type(&span sp, &ctxt cx, fn() -> int  next_ty_var, t typ,\n                        uint ty_param_count) -> tup(vec[int], t) {\n     let vec[int] param_var_ids = [];\n     auto i = 0u;\n     while (i < ty_param_count) { param_var_ids += [next_ty_var()]; i += 1u; }\n-    fn binder(ctxt cx, vec[int] param_var_ids, fn() -> int  next_ty_var,\n-              uint index) -> t {\n-        ret mk_var(cx, param_var_ids.(index));\n+    fn binder(span sp, ctxt cx, vec[int] param_var_ids,\n+              fn() -> int next_ty_var, uint index) -> t {\n+        if (index < vec::len(param_var_ids)) {\n+            ret mk_var(cx, param_var_ids.(index));\n+        }\n+        else {\n+            cx.sess.span_fatal(sp, \"Unbound type parameter in callee's type\");\n+        }\n     }\n     auto new_typ =\n-        fold_ty(cx, fm_param(bind binder(cx, param_var_ids, next_ty_var, _)),\n-                typ);\n+        fold_ty(cx, fm_param(bind binder(sp, cx, param_var_ids,\n+                                         next_ty_var, _)), typ);\n     ret tup(param_var_ids, new_typ);\n }\n "}, {"sha": "1ad5bb693a7e9b239bd80d7b810c4618d5c96dfd", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1a6d029b075c2006f6a49c5ca4a062bc2a713cd5", "patch": "@@ -132,7 +132,7 @@ fn instantiate_path(&@fn_ctxt fcx, &ast::path pth, &ty_param_count_and_ty tpt,\n                     &span sp) -> ty_param_substs_opt_and_ty {\n     auto ty_param_count = tpt._0;\n     auto bind_result =\n-        bind_params_in_type(fcx.ccx.tcx, bind next_ty_var_id(fcx), tpt._1,\n+        bind_params_in_type(sp, fcx.ccx.tcx, bind next_ty_var_id(fcx), tpt._1,\n                             ty_param_count);\n     auto ty_param_vars = bind_result._0;\n     auto t = bind_result._1;"}, {"sha": "e4fed7f07ec86c82461d8b77023bd6537acf4aa0", "filename": "src/test/compile-fail/nested-ty-params.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d029b075c2006f6a49c5ca4a062bc2a713cd5/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs?ref=1a6d029b075c2006f6a49c5ca4a062bc2a713cd5", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:Unbound type parameter in callee\n+/* I'm actually not sure whether this should compile.\n+   But having a nice error message seems better than\n+   a bounds check failure (which is what was happening\n+   before.) */\n+fn hd[U](&vec[U] v) -> U {\n+  fn hd1(&vec[U] w) -> U {\n+    ret w.(0);\n+  }\n+  ret hd1(v);\n+}"}]}