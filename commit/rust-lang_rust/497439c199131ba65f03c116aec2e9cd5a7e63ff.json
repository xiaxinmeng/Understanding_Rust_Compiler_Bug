{"sha": "497439c199131ba65f03c116aec2e9cd5a7e63ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzQzOWMxOTkxMzFiYTY1ZjAzYzExNmFlYzJlOWNkNWE3ZTYzZmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-21T22:13:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-21T22:13:49Z"}, "message": "take a bit more space for new_unchecked examples", "tree": {"sha": "5d3b34e65b8b6c85a1b5b1c38e27f6356343ceb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d3b34e65b8b6c85a1b5b1c38e27f6356343ceb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497439c199131ba65f03c116aec2e9cd5a7e63ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497439c199131ba65f03c116aec2e9cd5a7e63ff", "html_url": "https://github.com/rust-lang/rust/commit/497439c199131ba65f03c116aec2e9cd5a7e63ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497439c199131ba65f03c116aec2e9cd5a7e63ff/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "811af4289cf58d8ac5a501ade19058d2a86fc170", "url": "https://api.github.com/repos/rust-lang/rust/commits/811af4289cf58d8ac5a501ade19058d2a86fc170", "html_url": "https://github.com/rust-lang/rust/commit/811af4289cf58d8ac5a501ade19058d2a86fc170"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "f9f20dcea9e2ea86f5493232a28062ed6e0742dc", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/497439c199131ba65f03c116aec2e9cd5a7e63ff/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497439c199131ba65f03c116aec2e9cd5a7e63ff/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=497439c199131ba65f03c116aec2e9cd5a7e63ff", "patch": "@@ -380,10 +380,13 @@ impl<P: Deref> Pin<P> {\n     /// use std::pin::Pin;\n     ///\n     /// fn move_pinned_ref<T>(mut a: T, mut b: T) {\n-    ///     unsafe { let p = Pin::new_unchecked(&mut a); } // should mean `a` can never move again\n+    ///     unsafe {\n+    ///         let p: Pin<&mut T> = Pin::new_unchecked(&mut a);\n+    ///         // This should mean the pointee `a` can never move again.\n+    ///     }\n     ///     mem::swap(&mut a, &mut b);\n     ///     // The address of `a` changed to `b`'s stack slot, so `a` got moved even\n-    ///     // though we have previously pinned it!\n+    ///     // though we have previously pinned it! We have violated the pinning API contract.\n     /// }\n     /// ```\n     /// A value, once pinned, must remain pinned forever (unless its type implements `Unpin`).\n@@ -396,12 +399,15 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// fn move_pinned_rc<T>(mut x: Rc<T>) {\n     ///     let pinned = unsafe { Pin::new_unchecked(x.clone()) };\n-    ///     { let p: Pin<&T> = pinned.as_ref(); } // should mean the pointee can never move again\n+    ///     {\n+    ///         let p: Pin<&T> = pinned.as_ref();\n+    ///         // This should mean the pointee can never move again.\n+    ///     }\n     ///     drop(pinned);\n     ///     let content = Rc::get_mut(&mut x).unwrap();\n     ///     // Now, if `x` was the only reference, we have a mutable reference to\n     ///     // data that we pinned above, which we could use to move it as we have\n-    ///     // seen in the previous example.\n+    ///     // seen in the previous example. We have violated the pinning API contract.\n     ///  }\n     ///  ```\n     ///"}]}