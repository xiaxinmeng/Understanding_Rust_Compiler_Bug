{"sha": "d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGVjNDcwMWE1ZTVlNmZiNGY2NmM4MzhiOTY0NmJjMWMxZjcxMWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-07T00:48:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-07T02:52:21Z"}, "message": "rustc: Preserve reachable extern fns with LTO\n\nAll rust functions are internal implementation details with respect to the ABI\nexposed by crates, but extern fns are public components of the ABI and shouldn't\nbe stripped. This commit serializes reachable extern fns to metadata, so when\nLTO is performed all of their symbols are not stripped.\n\nCloses #14500", "tree": {"sha": "d45e6aa93223abfa66b32b8dd98f57a346e5cb55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d45e6aa93223abfa66b32b8dd98f57a346e5cb55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "html_url": "https://github.com/rust-lang/rust/commit/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb12e7ab743e4a0118a3de53a437a70cf332e5b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb12e7ab743e4a0118a3de53a437a70cf332e5b1", "html_url": "https://github.com/rust-lang/rust/commit/cb12e7ab743e4a0118a3de53a437a70cf332e5b1"}], "stats": {"total": 142, "additions": 128, "deletions": 14}, "files": [{"sha": "6287683c1a1416313d15822ed2085d2b40ec3fc3", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -209,6 +209,9 @@ pub static tag_dylib_dependency_formats: uint = 0x67;\n pub static tag_method_argument_names: uint = 0x8e;\n pub static tag_method_argument_name: uint = 0x8f;\n \n+pub static tag_reachable_extern_fns: uint = 0x90;\n+pub static tag_reachable_extern_fn_id: uint = 0x91;\n+\n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n     pub crateid: CrateId,"}, {"sha": "c7ad74dce571c5fcae73c6900728d68fa3fe0fd0", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -314,3 +314,10 @@ pub fn get_method_arg_names(cstore: &cstore::CStore, did: ast::DefId)\n     let cdata = cstore.get_crate_data(did.krate);\n     decoder::get_method_arg_names(&*cdata, did.node)\n }\n+\n+pub fn get_reachable_extern_fns(cstore: &cstore::CStore, cnum: ast::CrateNum)\n+    -> Vec<ast::DefId>\n+{\n+    let cdata = cstore.get_crate_data(cnum);\n+    decoder::get_reachable_extern_fns(&*cdata)\n+}"}, {"sha": "c67b5bf1a60076363268a27db47f53d0e7a2df31", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -1325,3 +1325,17 @@ pub fn get_method_arg_names(cdata: Cmd, id: ast::NodeId) -> Vec<String> {\n     }\n     return ret;\n }\n+\n+pub fn get_reachable_extern_fns(cdata: Cmd) -> Vec<ast::DefId> {\n+    let mut ret = Vec::new();\n+    let items = reader::get_doc(ebml::Doc::new(cdata.data()),\n+                                tag_reachable_extern_fns);\n+    reader::tagged_docs(items, tag_reachable_extern_fn_id, |doc| {\n+        ret.push(ast::DefId {\n+            krate: cdata.cnum,\n+            node: reader::doc_as_u32(doc),\n+        });\n+        true\n+    });\n+    return ret;\n+}"}, {"sha": "37cb75e4697b30cff2dc253d672077d074ff6302", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -75,6 +75,7 @@ pub struct EncodeParams<'a> {\n     pub link_meta: &'a LinkMeta,\n     pub cstore: &'a cstore::CStore,\n     pub encode_inlined_item: EncodeInlinedItem<'a>,\n+    pub reachable: &'a NodeSet,\n }\n \n pub struct EncodeContext<'a> {\n@@ -87,6 +88,7 @@ pub struct EncodeContext<'a> {\n     pub cstore: &'a cstore::CStore,\n     pub encode_inlined_item: RefCell<EncodeInlinedItem<'a>>,\n     pub type_abbrevs: tyencode::abbrev_map,\n+    pub reachable: &'a NodeSet,\n }\n \n fn encode_name(ebml_w: &mut Encoder, name: Name) {\n@@ -1702,6 +1704,26 @@ fn encode_misc_info(ecx: &EncodeContext,\n     ebml_w.end_tag();\n }\n \n+fn encode_reachable_extern_fns(ecx: &EncodeContext, ebml_w: &mut Encoder) {\n+    ebml_w.start_tag(tag_reachable_extern_fns);\n+\n+    for id in ecx.reachable.iter() {\n+        match ecx.tcx.map.find(*id) {\n+            Some(ast_map::NodeItem(i)) => {\n+                match i.node {\n+                    ast::ItemFn(_, _, abi, _, _) if abi != abi::Rust => {\n+                        ebml_w.wr_tagged_u32(tag_reachable_extern_fn_id, *id);\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    ebml_w.end_tag();\n+}\n+\n fn encode_crate_dep(ebml_w: &mut Encoder,\n                     dep: decoder::CrateDep) {\n     ebml_w.start_tag(tag_crate_dep);\n@@ -1801,6 +1823,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n         encode_inlined_item,\n         link_meta,\n         non_inlineable_statics,\n+        reachable,\n         ..\n     } = parms;\n     let ecx = EncodeContext {\n@@ -1813,6 +1836,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n         cstore: cstore,\n         encode_inlined_item: RefCell::new(encode_inlined_item),\n         type_abbrevs: RefCell::new(HashMap::new()),\n+        reachable: reachable,\n      };\n \n     let mut ebml_w = writer::Encoder::new(wr);\n@@ -1864,6 +1888,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     // Encode miscellaneous info.\n     i = ebml_w.writer.tell().unwrap();\n     encode_misc_info(&ecx, krate, &mut ebml_w);\n+    encode_reachable_extern_fns(&ecx, &mut ebml_w);\n     stats.misc_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode and index the items."}, {"sha": "09f5d2a350769b79bf82024591c588ae200b7989", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -2238,6 +2238,7 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::EncodeI\n             link_meta: &cx.link_meta,\n             cstore: &cx.sess().cstore,\n             encode_inlined_item: ie,\n+            reachable: &cx.reachable,\n         }\n }\n \n@@ -2374,6 +2375,16 @@ pub fn trans_crate(krate: ast::Crate,\n         ccx.item_symbols.borrow().find(id).map(|s| s.to_string())\n     }).collect();\n \n+    // For the purposes of LTO, we add to the reachable set all of the upstream\n+    // reachable extern fns. These functions are all part of the public ABI of\n+    // the final product, so LTO needs to preserve them.\n+    ccx.sess().cstore.iter_crate_data(|cnum, _| {\n+        let syms = csearch::get_reachable_extern_fns(&ccx.sess().cstore, cnum);\n+        reachable.extend(syms.move_iter().map(|did| {\n+            csearch::get_symbol(&ccx.sess().cstore, did)\n+        }));\n+    });\n+\n     // Make sure that some other crucial symbols are not eliminated from the\n     // module. This includes the main function, the crate map (used for debug\n     // log settings and I/O), and finally the curious rust_stack_exhausted"}, {"sha": "c1087b0f55ecf21c892542deb5100a2e985cab46", "filename": "src/test/run-make/issue-14500/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# Test to make sure that reachable extern fns are always available in final\n+# productcs, including when LTO is used. In this test, the `foo` crate has a\n+# reahable symbol, and is a dependency of the `bar` crate. When the `bar` crate\n+# is compiled with LTO, it shouldn't strip the symbol from `foo`, and that's the\n+# only way that `foo.c` will successfully compile.\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type=rlib\n+\t$(RUSTC) bar.rs --crate-type=staticlib -Zlto -L. -o $(TMPDIR)/libbar.a\n+\t$(CC) foo.c -lbar -o $(call RUN_BINFILE,foo) $(EXTRACFLAGS)\n+\t$(call RUN,foo)\n+"}, {"sha": "4b4916fe96d636eaf83d1bb07d9852b6ece1cebf", "filename": "src/test/run-make/issue-14500/bar.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Fbar.rs?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;"}, {"sha": "25098ac479d060005fde9a089da28da719a8dfa6", "filename": "src/test/run-make/issue-14500/foo.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern void foo();\n+\n+int main() {\n+    foo();\n+    return 0;\n+}"}, {"sha": "ceca907403f91d0431821a52d20a7bd03a257b0f", "filename": "src/test/run-make/issue-14500/foo.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern fn foo() {}"}, {"sha": "9b44c3e582a71da13db68407fedadaaf5435796c", "filename": "src/test/run-make/lto-smoke-c/Makefile", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -1,23 +1,10 @@\n -include ../tools.mk\n \n-ifdef IS_WINDOWS\n-\tEXTRAFLAGS :=\n-else\n-ifeq ($(shell uname),Darwin)\n-else\n-ifeq ($(shell uname),FreeBSD)\n-\tEXTRAFLAGS := -lm -lpthread -lgcc_s\n-else\n-\tEXTRAFLAGS := -lm -lrt -ldl -lpthread\n-endif\n-endif\n-endif\n-\n # Apparently older versions of GCC segfault if -g is passed...\n CC := $(CC:-g=)\n \n all:\n \t$(RUSTC) foo.rs -Z lto\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) -lstdc++\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRACFLAGS) -lstdc++\n \t$(call RUN,bar)"}, {"sha": "c9c4c455e4f805025f44b0af09b028dc1cd62663", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=d4dec4701a5e5e6fb4f66c838b9646bc1c1f711b", "patch": "@@ -53,6 +53,20 @@ RPATH_LINK_SEARCH = -Wl,-rpath-link=$(1)\n endif\n endif\n \n+# Extra flags needed to compile a working executable with the standard library\n+ifdef IS_WINDOWS\n+\tEXTRACFLAGS :=\n+else\n+ifeq ($(shell uname),Darwin)\n+else\n+ifeq ($(shell uname),FreeBSD)\n+\tEXTRACFLAGS := -lm -lpthread -lgcc_s\n+else\n+\tEXTRACFLAGS := -lm -lrt -ldl -lpthread\n+endif\n+endif\n+endif\n+\n REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))\n "}]}