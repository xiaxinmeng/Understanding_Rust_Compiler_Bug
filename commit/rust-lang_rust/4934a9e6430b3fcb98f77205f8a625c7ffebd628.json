{"sha": "4934a9e6430b3fcb98f77205f8a625c7ffebd628", "node_id": "C_kwDOAAsO6NoAKDQ5MzRhOWU2NDMwYjNmY2I5OGY3NzIwNWY4YTYyNWM3ZmZlYmQ2Mjg", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-05-03T02:07:47Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-05-03T02:07:47Z"}, "message": "Tweak wording", "tree": {"sha": "ab443e88b33dbc08a833687049cf89ff886cd415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab443e88b33dbc08a833687049cf89ff886cd415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4934a9e6430b3fcb98f77205f8a625c7ffebd628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4934a9e6430b3fcb98f77205f8a625c7ffebd628", "html_url": "https://github.com/rust-lang/rust/commit/4934a9e6430b3fcb98f77205f8a625c7ffebd628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4934a9e6430b3fcb98f77205f8a625c7ffebd628/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57967269e9946945dedd360e8e8654f5dd76ebd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/57967269e9946945dedd360e8e8654f5dd76ebd1", "html_url": "https://github.com/rust-lang/rust/commit/57967269e9946945dedd360e8e8654f5dd76ebd1"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "5d80f49626a0476ad92a4daa2bb8b8aeec32fea1", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -2484,15 +2484,14 @@ fn show_candidates(\n             (\"one of these\", \"items\", String::new())\n         };\n \n-        let tail = if path.len() > 1 { \"...\" } else { \"\" };\n         let instead = if let Instead::Yes = instead { \" instead\" } else { \"\" };\n         let mut msg = if let IsPattern::Yes = is_pattern {\n             format!(\n-                \"if you meant to match on {}{}{}, use the full path in the pattern{}\",\n-                kind, instead, name, tail\n+                \"if you meant to match on {}{}{}, use the full path in the pattern\",\n+                kind, instead, name\n             )\n         } else {\n-            format!(\"consider importing {} {}{}{}\", determiner, kind, instead, tail)\n+            format!(\"consider importing {} {}{}\", determiner, kind, instead)\n         };\n \n         for note in accessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n@@ -2523,7 +2522,7 @@ fn show_candidates(\n             if let [first, .., last] = &path[..] {\n                 err.span_suggestion_verbose(\n                     first.ident.span.until(last.ident.span),\n-                    \"...and refer to it directly\",\n+                    &format!(\"if you import `{}`, refer to it directly\", last.ident),\n                     String::new(),\n                     Applicability::Unspecified,\n                 );"}, {"sha": "91073d3698d911887442f5f9425cbc4cda640e88", "filename": "src/test/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -4,11 +4,11 @@ error[E0425]: cannot find function `bar` in module `a`\n LL |     a::bar();\n    |        ^^^ not found in `a`\n    |\n-help: consider importing this function...\n+help: consider importing this function\n    |\n LL | use b::bar;\n    |\n-help: ...and refer to it directly\n+help: if you import `bar`, refer to it directly\n    |\n LL -     a::bar();\n LL +     bar();"}, {"sha": "037a858d7e1012fdc56b94613bcc61121c87995a", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -12,13 +12,13 @@ help: a tuple struct with a similar name exists\n    |\n LL |     check(m1::TS);\n    |               ~~\n-help: consider importing one of these items instead...\n+help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n LL | use xm2::S;\n    |\n-help: ...and refer to it directly\n+help: if you import `S`, refer to it directly\n    |\n LL -     check(m1::S);\n LL +     check(S);\n@@ -40,13 +40,13 @@ help: a tuple struct with a similar name exists\n    |\n LL |     check(xm1::TS);\n    |                ~~\n-help: consider importing one of these items instead...\n+help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n LL | use xm2::S;\n    |\n-help: ...and refer to it directly\n+help: if you import `S`, refer to it directly\n    |\n LL -     check(xm1::S);\n LL +     check(S);\n@@ -71,13 +71,13 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(m7::TV);\n    |               ~~\n-help: consider importing one of these items instead...\n+help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |\n LL | use xm8::V;\n    |\n-help: ...and refer to it directly\n+help: if you import `V`, refer to it directly\n    |\n LL -     check(m7::V);\n LL +     check(V);\n@@ -104,13 +104,13 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(xm7::TV);\n    |                ~~\n-help: consider importing one of these items instead...\n+help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |\n LL | use xm8::V;\n    |\n-help: ...and refer to it directly\n+help: if you import `V`, refer to it directly\n    |\n LL -     check(xm7::V);\n LL +     check(V);"}, {"sha": "c5434c72b382b6a3c289874e115555c6506af22d", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -10,11 +10,11 @@ error[E0425]: cannot find function `hi_str` in module `circular_modules_main`\n LL |     println!(\"{}\", circular_modules_main::hi_str());\n    |                                           ^^^^^^ not found in `circular_modules_main`\n    |\n-help: consider importing this function...\n+help: consider importing this function\n    |\n LL | use hi_str;\n    |\n-help: ...and refer to it directly\n+help: if you import `hi_str`, refer to it directly\n    |\n LL -     println!(\"{}\", circular_modules_main::hi_str());\n LL +     println!(\"{}\", hi_str());"}, {"sha": "1d26a2c005872524a875f4441063b510a4165e42", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -4,11 +4,11 @@ error[E0425]: cannot find value `A` in crate `namespaced_enums`\n LL |     let _ = namespaced_enums::A;\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: consider importing this unit variant...\n+help: consider importing this unit variant\n    |\n LL | use namespaced_enums::Foo::A;\n    |\n-help: ...and refer to it directly\n+help: if you import `A`, refer to it directly\n    |\n LL -     let _ = namespaced_enums::A;\n LL +     let _ = A;\n@@ -20,11 +20,11 @@ error[E0425]: cannot find function, tuple struct or tuple variant `B` in crate `\n LL |     let _ = namespaced_enums::B(10);\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: consider importing this tuple variant...\n+help: consider importing this tuple variant\n    |\n LL | use namespaced_enums::Foo::B;\n    |\n-help: ...and refer to it directly\n+help: if you import `B`, refer to it directly\n    |\n LL -     let _ = namespaced_enums::B(10);\n LL +     let _ = B(10);\n@@ -36,11 +36,11 @@ error[E0422]: cannot find struct, variant or union type `C` in crate `namespaced\n LL |     let _ = namespaced_enums::C { a: 10 };\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: consider importing this variant...\n+help: consider importing this variant\n    |\n LL | use namespaced_enums::Foo::C;\n    |\n-help: ...and refer to it directly\n+help: if you import `C`, refer to it directly\n    |\n LL -     let _ = namespaced_enums::C { a: 10 };\n LL +     let _ = C { a: 10 };"}, {"sha": "4cc035cb11e2034e9e0d178b1ac23d3e721c595b", "filename": "src/test/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -4,13 +4,13 @@ error[E0425]: cannot find value `LOG10_2` in module `std::f64`\n LL |     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n    |                                                ^^^^^^^ not found in `std::f64`\n    |\n-help: consider importing one of these items...\n+help: consider importing one of these items\n    |\n LL | use std::f32::consts::LOG10_2;\n    |\n LL | use std::f64::consts::LOG10_2;\n    |\n-help: ...and refer to it directly\n+help: if you import `LOG10_2`, refer to it directly\n    |\n LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;"}, {"sha": "338a5423aa472a58d602f924aace44b62d4f13fd", "filename": "src/test/ui/resolve/missing-in-namespace.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -4,11 +4,11 @@ error[E0433]: failed to resolve: could not find `hahmap` in `std`\n LL |     let _map = std::hahmap::HashMap::new();\n    |                             ^^^^^^^ not found in `std::hahmap`\n    |\n-help: consider importing this struct...\n+help: consider importing this struct\n    |\n LL | use std::collections::HashMap;\n    |\n-help: ...and refer to it directly\n+help: if you import `HashMap`, refer to it directly\n    |\n LL -     let _map = std::hahmap::HashMap::new();\n LL +     let _map = HashMap::new();"}, {"sha": "ed89170fd8a75519ea4c3117ecbff87ae0bec5ff", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -99,13 +99,13 @@ help: a function with a similar name exists\n    |\n LL |     let _: E = m::f;\n    |                   ~\n-help: consider importing one of these items instead...\n+help: consider importing one of these items instead\n    |\n LL | use std::f32::consts::E;\n    |\n LL | use std::f64::consts::E;\n    |\n-help: ...and refer to it directly\n+help: if you import `E`, refer to it directly\n    |\n LL -     let _: E = m::E;\n LL +     let _: E = E;"}, {"sha": "fcbc28475f99880799cbfaafa5f04174374886f9", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -10,11 +10,11 @@ error[E0412]: cannot find type `u8` in the crate root\n LL |     let _: ::u8;\n    |              ^^ not found in the crate root\n    |\n-help: consider importing this builtin type...\n+help: consider importing this builtin type\n    |\n LL | use std::primitive::u8;\n    |\n-help: ...and refer to it directly\n+help: if you import `u8`, refer to it directly\n    |\n LL -     let _: ::u8;\n LL +     let _: u8;"}, {"sha": "a8b275f98034a80751f3aac5f78a40240b2a76d3", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4934a9e6430b3fcb98f77205f8a625c7ffebd628/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr?ref=4934a9e6430b3fcb98f77205f8a625c7ffebd628", "patch": "@@ -4,11 +4,11 @@ error[E0405]: cannot find trait `Trait` in `A`\n LL |     pub struct A<H: A::Trait>(pub H);\n    |                        ^^^^^ not found in `A`\n    |\n-help: consider importing this trait...\n+help: consider importing this trait\n    |\n LL |     use A::Trait;\n    |\n-help: ...and refer to it directly\n+help: if you import `Trait`, refer to it directly\n    |\n LL -     pub struct A<H: A::Trait>(pub H);\n LL +     pub struct A<H: Trait>(pub H);"}]}