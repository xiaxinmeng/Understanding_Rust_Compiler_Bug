{"sha": "43bad44ff01dd5035b961b366e65f705241b428d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYmFkNDRmZjAxZGQ1MDM1Yjk2MWIzNjZlNjVmNzA1MjQxYjQyOGQ=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-05-27T21:36:45Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-04T03:49:33Z"}, "message": "Reestablish feature gate for RangeFrom in slices", "tree": {"sha": "502fd4b70c3a71c2102b7cfda8d9a10c1ed9b0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/502fd4b70c3a71c2102b7cfda8d9a10c1ed9b0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43bad44ff01dd5035b961b366e65f705241b428d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43bad44ff01dd5035b961b366e65f705241b428d", "html_url": "https://github.com/rust-lang/rust/commit/43bad44ff01dd5035b961b366e65f705241b428d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43bad44ff01dd5035b961b366e65f705241b428d/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d9dd69a7724986f1b80cf9462323b48d4e2529", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d9dd69a7724986f1b80cf9462323b48d4e2529", "html_url": "https://github.com/rust-lang/rust/commit/45d9dd69a7724986f1b80cf9462323b48d4e2529"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "4316996e4f0ed417e708e9b5a97ec831b4f104bd", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43bad44ff01dd5035b961b366e65f705241b428d/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bad44ff01dd5035b961b366e65f705241b428d/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=43bad44ff01dd5035b961b366e65f705241b428d", "patch": "@@ -540,6 +540,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n+            PatKind::Slice(pats) => {\n+                for pat in pats {\n+                    let inner_pat = match &pat.kind {\n+                        PatKind::Ident(.., Some(pat)) => pat,\n+                        _ => pat,\n+                    };\n+                    if let PatKind::Range(Some(_), None, Spanned { .. }) = inner_pat.kind {\n+                        gate_feature_post!(\n+                            &self,\n+                            half_open_range_patterns,\n+                            pat.span,\n+                            \"`X..` patterns in slices are experimental\"\n+                        );\n+                    }\n+                }\n+            }\n             PatKind::Box(..) => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "2884a27349fbb11273e5652ab06c3d97a2eb3e66", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem0.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.rs?ref=43bad44ff01dd5035b961b366e65f705241b428d", "patch": "@@ -0,0 +1,16 @@\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {\n+    let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n+    let [a, b, c, rest @ ..] = xs;\n+    // Consider the following example:\n+    assert!(a == 13 && b == 1 && c == 5 && rest.len() == 5);\n+\n+    // What if we wanted to pull this apart without individually binding a, b, and c?\n+    let [first_three @ ..3, rest @ 2..] = xs;\n+    //~^ pattern requires 2 elements but array has 8\n+    // This is somewhat unintuitive and makes slice patterns exceedingly verbose.\n+    // We want to stabilize half-open RangeFrom (`X..`) patterns\n+    // but without banning us from using them for a more efficient slice pattern syntax.\n+}"}, {"sha": "ec3472a50368410d8b1561ff47604edb0fd5dcdc", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem0.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.stderr?ref=43bad44ff01dd5035b961b366e65f705241b428d", "patch": "@@ -0,0 +1,9 @@\n+error[E0527]: pattern requires 2 elements but array has 8\n+  --> $DIR/slice_pattern_syntax_problem0.rs:11:9\n+   |\n+LL |     let [first_three @ ..3, rest @ 2..] = xs;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 8 elements\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0527`."}, {"sha": "9e289b591d6e9f4bbf12e140fdb148e289b429ef", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs?ref=43bad44ff01dd5035b961b366e65f705241b428d", "patch": "@@ -0,0 +1,9 @@\n+// Instead of allowing the previous case, maintain the feature gate for slice patterns for now.\n+fn main() {\n+    let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n+    let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+    //~^ `X..` patterns in slices are experimental\n+    //~| half-open range patterns are unstable\n+    //~| exclusive range pattern syntax is experimental\n+    //~| exclusive range pattern syntax is experimental\n+}"}, {"sha": "eadaf877670693c038d209990a71066a5acc4e75", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem1.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr?ref=43bad44ff01dd5035b961b366e65f705241b428d", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:23\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |                       ^^^\n+   |\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: `X..` patterns in slices are experimental\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:10\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |          ^^^^^^^\n+   |\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:23\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |                       ^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:32\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |                                ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6e7df30949127062c8fb177a8cfd7bef301fd730", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bad44ff01dd5035b961b366e65f705241b428d/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem2.rs?ref=43bad44ff01dd5035b961b366e65f705241b428d", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+\n+fn main() {\n+    let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n+    if let [3..=14, ..] = xs {\n+        /* this variant must pass for now, unfortunately.\n+         * This test is included here to help inform a future plan for these.\n+         */\n+    };\n+}"}]}