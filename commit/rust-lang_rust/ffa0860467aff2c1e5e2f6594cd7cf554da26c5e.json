{"sha": "ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTA4NjA0NjdhZmYyYzFlNWUyZjY1OTRjZDdjZjU1NGRhMjZjNWU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-16T16:36:41Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:28Z"}, "message": "Track fn type and lifetime parameters in TyFnDef.", "tree": {"sha": "d13a015c72e9d89513b1f4c34cf17d615b4f0f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13a015c72e9d89513b1f4c34cf17d615b4f0f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "html_url": "https://github.com/rust-lang/rust/commit/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b423a0f9ef488ca4cd9ff620a44566bb441eb21f", "html_url": "https://github.com/rust-lang/rust/commit/b423a0f9ef488ca4cd9ff620a44566bb441eb21f"}], "stats": {"total": 246, "additions": 130, "deletions": 116}, "files": [{"sha": "e6821cf639eca2d8058d0a81b82e71f45a503eb9", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -44,7 +44,7 @@ enum RootUnsafeContext {\n \n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::TyFnDef(_, ref f) |\n+        ty::TyFnDef(_, _, ref f) |\n         ty::TyFnPtr(ref f) => f.unsafety == hir::Unsafety::Unsafe,\n         _ => false,\n     }"}, {"sha": "fd857513e5b560c0f9e1f69fa4c16e4feae38880", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -53,7 +53,7 @@ struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         let intrinsic = match self.tcx.lookup_item_type(def_id).ty.sty {\n-            ty::TyFnDef(_, ref bfty) => bfty.abi == RustIntrinsic,\n+            ty::TyFnDef(_, _, ref bfty) => bfty.abi == RustIntrinsic,\n             _ => return false\n         };\n         intrinsic && self.tcx.item_name(def_id).as_str() == \"transmute\"\n@@ -238,7 +238,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 Def::Fn(did) if self.def_id_is_transmute(did) => {\n                     let typ = self.tcx.node_id_to_type(expr.id);\n                     match typ.sty {\n-                        ty::TyFnDef(_, ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n+                        ty::TyFnDef(_, _, ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n                             if let ty::FnConverging(to) = bare_fn_ty.sig.0.output {\n                                 let from = bare_fn_ty.sig.0.inputs[0];\n                                 self.check_transmute(expr.span, from, to, expr.id);"}, {"sha": "fbaf5a1306b84b61cf44e5172624a22c4f624445", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -1286,7 +1286,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // provide an impl, but only for suitable `fn` pointers\n-            ty::TyFnDef(_, &ty::BareFnTy {\n+            ty::TyFnDef(_, _, &ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {"}, {"sha": "e4c293a74e896ceb890b0092069676e4e1316897", "filename": "src/librustc/middle/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 match *adjustment {\n                     AdjustReifyFnPointer => {\n                         match self.sty {\n-                            ty::TyFnDef(_, b) => {\n+                            ty::TyFnDef(_, _, b) => {\n                                 cx.mk_ty(ty::TyFnPtr(b))\n                             }\n                             _ => {"}, {"sha": "61a7f49f45d4e7fd267db5be9e68a57633dfac3e", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -41,7 +41,6 @@ use std::borrow::Borrow;\n use std::cell::{Cell, RefCell, Ref};\n use std::hash::{Hash, Hasher};\n use std::rc::Rc;\n-use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::parse::token::special_idents;\n@@ -946,30 +945,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn mk_fn_def(&self, def_id: DefId,\n+                     substs: &'tcx Substs<'tcx>,\n                      fty: BareFnTy<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(TyFnDef(def_id, self.mk_bare_fn(fty)))\n+        self.mk_ty(TyFnDef(def_id, substs, self.mk_bare_fn(fty)))\n     }\n \n     pub fn mk_fn_ptr(&self, fty: BareFnTy<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(TyFnPtr(self.mk_bare_fn(fty)))\n     }\n \n-    pub fn mk_ctor_fn(&self,\n-                      def_id: DefId,\n-                      input_tys: &[Ty<'tcx>],\n-                      output: Ty<'tcx>) -> Ty<'tcx> {\n-        let input_args = input_tys.iter().cloned().collect();\n-        self.mk_fn_def(def_id, BareFnTy {\n-            unsafety: hir::Unsafety::Normal,\n-            abi: Abi::Rust,\n-            sig: ty::Binder(ty::FnSig {\n-                inputs: input_args,\n-                output: ty::FnConverging(output),\n-                variadic: false\n-            })\n-        })\n-    }\n-\n     pub fn mk_trait(&self,\n                     principal: ty::PolyTraitRef<'tcx>,\n                     bounds: ExistentialBounds<'tcx>)"}, {"sha": "fc4db22a8a62f7a00a4aa02ada2273cebfd68666", "filename": "src/librustc/middle/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -83,7 +83,7 @@ pub fn simplify_type(tcx: &TyCtxt,\n         ty::TyTuple(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n-        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n+        ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }\n         ty::TyProjection(_) | ty::TyParam(_) => {"}, {"sha": "c491bd6ca5e99d6dad0d4812ef34b0c042aa5708", "filename": "src/librustc/middle/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -134,7 +134,12 @@ impl FlagComputation {\n                 self.add_tys(&ts[..]);\n             }\n \n-            &ty::TyFnDef(_, ref f) | &ty::TyFnPtr(ref f) => {\n+            &ty::TyFnDef(_, substs, ref f) => {\n+                self.add_substs(substs);\n+                self.add_fn_sig(&f.sig);\n+            }\n+\n+            &ty::TyFnPtr(ref f) => {\n                 self.add_fn_sig(&f.sig);\n             }\n         }"}, {"sha": "c85d0a1a90d5adfdf938c9c5337dba9aeb99707f", "filename": "src/librustc/middle/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -568,11 +568,13 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n             }\n         }\n \n-        (&ty::TyFnDef(a_def_id, a_fty), &ty::TyFnDef(b_def_id, b_fty))\n+        (&ty::TyFnDef(a_def_id, a_substs, a_fty),\n+         &ty::TyFnDef(b_def_id, b_substs, b_fty))\n             if a_def_id == b_def_id =>\n         {\n+            let substs = try!(relate_substs(relation, None, a_substs, b_substs));\n             let fty = try!(relation.relate(a_fty, b_fty));\n-            Ok(tcx.mk_fn_def(a_def_id, fty))\n+            Ok(tcx.mk_fn_def(a_def_id, tcx.mk_substs(substs), fty))\n         }\n \n         (&ty::TyFnPtr(a_fty), &ty::TyFnPtr(b_fty)) =>"}, {"sha": "3fe9e02a90d42e3a3286860eb017db9d7b4a97de", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -282,9 +282,12 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             }\n             ty::TyTrait(ref trait_ty) => ty::TyTrait(trait_ty.fold_with(folder)),\n             ty::TyTuple(ref ts) => ty::TyTuple(ts.fold_with(folder)),\n-            ty::TyFnDef(def_id, ref f) => {\n+            ty::TyFnDef(def_id, substs, ref f) => {\n+                let substs = substs.fold_with(folder);\n                 let bfn = f.fold_with(folder);\n-                ty::TyFnDef(def_id, folder.tcx().mk_bare_fn(bfn))\n+                ty::TyFnDef(def_id,\n+                            folder.tcx().mk_substs(substs),\n+                            folder.tcx().mk_bare_fn(bfn))\n             }\n             ty::TyFnPtr(ref f) => {\n                 let bfn = f.fold_with(folder);\n@@ -322,7 +325,10 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyEnum(_tid, ref substs) => substs.visit_with(visitor),\n             ty::TyTrait(ref trait_ty) => trait_ty.visit_with(visitor),\n             ty::TyTuple(ref ts) => ts.visit_with(visitor),\n-            ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => f.visit_with(visitor),\n+            ty::TyFnDef(_, substs, ref f) => {\n+                substs.visit_with(visitor) || f.visit_with(visitor)\n+            }\n+            ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),\n             ty::TyStruct(_did, ref substs) => substs.visit_with(visitor),\n             ty::TyClosure(_did, ref substs) => substs.visit_with(visitor),"}, {"sha": "2d7b7dc6e9b58b7662ac6b50fa6dc3e8f6b469f4", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -129,9 +129,7 @@ pub enum TypeVariants<'tcx> {\n \n     /// The anonymous type of a function declaration/definition. Each\n     /// function has a unique type.\n-    /// FIXME: Does this need to include substitutions?\n-    /// `g::<i32>` and `g::<u32>` should have different types.\n-    TyFnDef(DefId, &'tcx BareFnTy<'tcx>),\n+    TyFnDef(DefId, &'tcx Substs<'tcx>, &'tcx BareFnTy<'tcx>),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n     /// FIXME: This is currently also used to represent the callee of a method;\n@@ -1142,15 +1140,15 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn fn_sig(&self) -> &'tcx PolyFnSig<'tcx> {\n         match self.sty {\n-            TyFnDef(_, ref f) | TyFnPtr(ref f) => &f.sig,\n+            TyFnDef(_, _, ref f) | TyFnPtr(ref f) => &f.sig,\n             _ => panic!(\"Ty::fn_sig() called on non-fn type: {:?}\", self)\n         }\n     }\n \n     /// Returns the ABI of the given function.\n     pub fn fn_abi(&self) -> abi::Abi {\n         match self.sty {\n-            TyFnDef(_, ref f) | TyFnPtr(ref f) => f.abi,\n+            TyFnDef(_, _, ref f) | TyFnPtr(ref f) => f.abi,\n             _ => panic!(\"Ty::fn_abi() called on non-fn type\"),\n         }\n     }"}, {"sha": "b9dd0a6af06a2bb1961470096e0f98287654eecc", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -514,13 +514,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                         region(state, *r);\n                         mt(state, m);\n                     }\n-                    TyFnDef(def_id, ref b) => {\n+                    TyFnDef(def_id, _, _) => {\n                         byte!(14);\n                         hash!(def_id);\n-                        hash!(b.unsafety);\n-                        hash!(b.abi);\n-                        fn_sig(state, &b.sig);\n-                        return false;\n                     }\n                     TyFnPtr(ref b) => {\n                         byte!(15);"}, {"sha": "b6d93ecf78b888fea8e8793cd02852c470030690", "filename": "src/librustc/middle/ty/walk.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -98,7 +98,11 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n         ty::TyTuple(ref ts) => {\n             push_reversed(stack, ts);\n         }\n-        ty::TyFnDef(_, ref ft) | ty::TyFnPtr(ref ft) => {\n+        ty::TyFnDef(_, substs, ref ft) => {\n+            push_reversed(stack, substs.types.as_slice());\n+            push_sig_subtypes(stack, &ft.sig);\n+        }\n+        ty::TyFnPtr(ref ft) => {\n             push_sig_subtypes(stack, &ft.sig);\n         }\n     }"}, {"sha": "2b5674ed116a428de72ec7eba473f74761a5dc9f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -812,7 +812,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 }\n                 write!(f, \")\")\n             }\n-            TyFnDef(def_id, ref bare_fn) => {\n+            TyFnDef(def_id, substs, ref bare_fn) => {\n                 if bare_fn.unsafety == hir::Unsafety::Unsafe {\n                     try!(write!(f, \"unsafe \"));\n                 }"}, {"sha": "0c906f8eb546c2fd68da66c513d8d9532a37b708", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -1065,7 +1065,7 @@ impl LateLintPass for MutableTransmutes {\n                 }\n                 let typ = cx.tcx.node_id_to_type(expr.id);\n                 match typ.sty {\n-                    ty::TyFnDef(_, ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n+                    ty::TyFnDef(_, _, ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n                         if let ty::FnConverging(to) = bare_fn.sig.0.output {\n                             let from = bare_fn.sig.0.inputs[0];\n                             return Some((&from.sty, &to.sty));\n@@ -1079,7 +1079,7 @@ impl LateLintPass for MutableTransmutes {\n \n         fn def_id_is_transmute(cx: &LateContext, def_id: DefId) -> bool {\n             match cx.tcx.lookup_item_type(def_id).ty.sty {\n-                ty::TyFnDef(_, ref bfty) if bfty.abi == RustIntrinsic => (),\n+                ty::TyFnDef(_, _, ref bfty) if bfty.abi == RustIntrinsic => (),\n                 _ => return false\n             }\n             cx.tcx.with_path(def_id, |path| match path.last() {"}, {"sha": "72bf9633c3e7a5a33f651eda42add1df8158ddd5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -472,7 +472,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                    variant.name,\n                    ctor_ty);\n             let field_tys = match ctor_ty.sty {\n-                ty::TyFnDef(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+                ty::TyFnDef(_, _, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n                     ref inputs, ..\n                 }), ..}) => {\n                     // tuple-struct constructors don't have escaping regions\n@@ -988,7 +988,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n             let predicates = doc_predicates(item_doc, tcx, cdata, tag_method_ty_generics);\n             let ity = tcx.lookup_item_type(def_id).ty;\n             let fty = match ity.sty {\n-                ty::TyFnDef(_, fty) => fty.clone(),\n+                ty::TyFnDef(_, _, fty) => fty.clone(),\n                 _ => tcx.sess.bug(&format!(\n                     \"the type {:?} of the method {:?} is not a function?\",\n                     ity, name))\n@@ -1582,7 +1582,7 @@ pub fn is_extern_item(cdata: Cmd, id: DefIndex, tcx: &TyCtxt) -> bool {\n             let ty::TypeScheme { generics, ty } = get_type(cdata, id, tcx);\n             let no_generics = generics.types.is_empty();\n             match ty.sty {\n-                ty::TyFnDef(_, fn_ty) | ty::TyFnPtr(fn_ty)\n+                ty::TyFnDef(_, _, fn_ty) | ty::TyFnPtr(fn_ty)\n                     if fn_ty.abi != Abi::Rust => return no_generics,\n                 _ => no_generics,\n             }"}, {"sha": "e9b23eb0458560e0ca378a33b47558b7fd6a4f4a", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -380,7 +380,8 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             }\n             'F' => {\n                 let def_id = self.parse_def();\n-                return tcx.mk_fn_def(def_id, self.parse_bare_fn_ty());\n+                let substs = self.tcx.mk_substs(self.parse_substs());\n+                return tcx.mk_fn_def(def_id, substs, self.parse_bare_fn_ty());\n             }\n             'G' => {\n                 return tcx.mk_fn_ptr(self.parse_bare_fn_ty());"}, {"sha": "a6601e591ab67ecc720097fa4db103a7ade8989c", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -135,9 +135,10 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n         ty::TyStr => {\n             write!(w, \"v\");\n         }\n-        ty::TyFnDef(def_id, f) => {\n+        ty::TyFnDef(def_id, substs, f) => {\n             write!(w, \"F\");\n             write!(w, \"{}|\", (cx.ds)(def_id));\n+            enc_substs(w, cx, substs);\n             enc_bare_fn_ty(w, cx, f);\n         }\n         ty::TyFnPtr(f) => {"}, {"sha": "a7f4a53b022e1f3b33c972397b7252899b70abfe", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -239,7 +239,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n             ExprKind::Call { ty, fun, args } => {\n                 let diverges = match ty.sty {\n-                    ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n+                    ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n                         f.sig.0.output.diverges()\n                     }\n                     _ => false"}, {"sha": "ac732828f0ec7fb96040b7a0dc0244c540e63e19", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     let method = method_callee(cx, self, ty::MethodCall::expr(self.id));\n \n                     let sig = match method.ty.sty {\n-                        ty::TyFnDef(_, fn_ty) => &fn_ty.sig,\n+                        ty::TyFnDef(_, _, fn_ty) => &fn_ty.sig,\n                         _ => cx.tcx.sess.span_bug(self.span, \"type of method is not an fn\")\n                     };\n "}, {"sha": "e021300f1b3978b61f87d6ee679e17c4df0de08a", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -421,7 +421,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 let func_ty = mir.operand_ty(tcx, func);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n                 let func_ty = match func_ty.sty {\n-                    ty::TyFnDef(_, func_ty) | ty::TyFnPtr(func_ty) => func_ty,\n+                    ty::TyFnDef(_, _, func_ty) | ty::TyFnPtr(func_ty) => func_ty,\n                     _ => {\n                         span_mirbug!(self, term, \"call to non-function {:?}\", func_ty);\n                         return;"}, {"sha": "2acae3fa01ddcdf178f070ea1035438ccfc451a3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -857,7 +857,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 if let Def::Struct(..) = self.tcx.resolve_expr(expr) {\n                     let expr_ty = self.tcx.expr_ty(expr);\n                     let def = match expr_ty.sty {\n-                        ty::TyFnDef(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+                        ty::TyFnDef(_, _, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n                             output: ty::FnConverging(ty), ..\n                         }), ..}) => ty,\n                         _ => expr_ty"}, {"sha": "009d43e813ebc26cc3e8cc7ff70d9b92b07f283b", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -131,7 +131,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n \n     let function_type;\n     let (fn_sig, abi, env_ty) = match fn_type.sty {\n-        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => (&f.sig, f.abi, None),\n+        ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => (&f.sig, f.abi, None),\n         ty::TyClosure(closure_did, ref substs) => {\n             let infcx = infer::normalizing_infer_ctxt(ccx.tcx(), &ccx.tcx().tables);\n             function_type = infcx.closure_type(closure_did, substs);"}, {"sha": "02f6ff8bab91efbed20889e34b60798057ffd1db", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -906,7 +906,7 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      -> ValueRef {\n     let name = ccx.sess().cstore.item_symbol(did);\n     match t.sty {\n-        ty::TyFnDef(_, ref fn_ty) => {\n+        ty::TyFnDef(_, _, ref fn_ty) => {\n             match ccx.sess().target.target.adjust_abi(fn_ty.abi) {\n                 Abi::Rust | Abi::RustCall => {\n                     get_extern_rust_fn(ccx, t, &name[..], did)\n@@ -2610,7 +2610,7 @@ fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                          node_id: ast::NodeId,\n                          node_type: Ty<'tcx>)\n                          -> ValueRef {\n-    if let ty::TyFnDef(_, ref f) = node_type.sty {\n+    if let ty::TyFnDef(_, _, ref f) = node_type.sty {\n         if f.abi != Abi::Rust && f.abi != Abi::RustCall {\n             ccx.sess().span_bug(sp,\n                                 &format!(\"only the `{}` or `{}` calling conventions are valid \\\n@@ -2915,7 +2915,7 @@ fn register_method(ccx: &CrateContext,\n \n     let sym = exported_name(ccx, id, mty, &attrs);\n \n-    if let ty::TyFnDef(_, ref f) = mty.sty {\n+    if let ty::TyFnDef(_, _, ref f) = mty.sty {\n         let llfn = if f.abi == Abi::Rust || f.abi == Abi::RustCall {\n             register_fn(ccx, span, sym, id, mty)\n         } else {"}, {"sha": "af51cc9141788319e981677359c83e23f2530f47", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -157,8 +157,8 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                 }\n             }\n             Def::Fn(did) if match expr_ty.sty {\n-                ty::TyFnDef(_, ref f) => f.abi == Abi::RustIntrinsic ||\n-                                         f.abi == Abi::PlatformIntrinsic,\n+                ty::TyFnDef(_, _, ref f) => f.abi == Abi::RustIntrinsic ||\n+                                            f.abi == Abi::PlatformIntrinsic,\n                 _ => false\n             } => {\n                 let substs = common::node_id_substs(bcx.ccx(),\n@@ -290,13 +290,13 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n \n     // Construct the \"tuply\" version of `bare_fn_ty`. It takes two arguments: `self`,\n     // which is the fn pointer, and `args`, which is the arguments tuple.\n-    let (opt_def_id, sig) =\n+    let (opt_def_id_and_substs, sig) =\n         match bare_fn_ty.sty {\n-            ty::TyFnDef(def_id,\n+            ty::TyFnDef(def_id, substs,\n                         &ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n                                         abi: Abi::Rust,\n                                         ref sig }) => {\n-                (Some(def_id), sig)\n+                (Some((def_id, substs)), sig)\n             }\n             ty::TyFnPtr(&ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n                                         abi: Abi::Rust,\n@@ -322,8 +322,8 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n             variadic: false\n         })\n     };\n-    let tuple_fn_ty = match opt_def_id {\n-        Some(def_id) => tcx.mk_fn_def(def_id, bare_tuple_fn),\n+    let tuple_fn_ty = match opt_def_id_and_substs {\n+        Some((def_id, substs)) => tcx.mk_fn_def(def_id, substs, bare_tuple_fn),\n         None => tcx.mk_fn_ptr(bare_tuple_fn),\n     };\n     debug!(\"tuple_fn_ty: {:?}\", tuple_fn_ty);\n@@ -615,7 +615,7 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     let mut bcx = callee.bcx;\n \n     let (abi, ret_ty) = match callee.ty.sty {\n-        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n+        ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n             let sig = bcx.tcx().erase_late_bound_regions(&f.sig);\n             let sig = infer::normalize_associated_type(bcx.tcx(), &sig);\n             (f.abi, sig.output)"}, {"sha": "4bd150605c9ef3318a8b5c558a190178861ce832", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                               def_id: DefId)\n                                               -> bool {\n             if !match ccx.tcx().lookup_item_type(def_id).ty.sty {\n-                ty::TyFnDef(def_id, _) => {\n+                ty::TyFnDef(def_id, _, _) => {\n                     // Some constructors also have type TyFnDef but they are\n                     // always instantiated inline and don't result in\n                     // translation item. Same for FFI functions.\n@@ -1291,7 +1291,7 @@ pub fn push_unique_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                              &trait_data.bounds.projection_bounds,\n                              output);\n         },\n-        ty::TyFnDef(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+        ty::TyFnDef(_, _, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n         ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");"}, {"sha": "f489f1f62ac608842e61fd955d39a2283890e266", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -1277,7 +1277,7 @@ pub fn inlined_variant_def<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     debug!(\"inlined_variant_def: ctor_ty={:?} inlined_vid={:?}\", ctor_ty,\n            inlined_vid);\n     let adt_def = match ctor_ty.sty {\n-        ty::TyFnDef(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+        ty::TyFnDef(_, _, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n             output: ty::FnConverging(ty), ..\n         }), ..}) => ty,\n         _ => ctor_ty"}, {"sha": "0cd1f4e7fbf3e184dda828212ac17ec4bf06d19a", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -253,7 +253,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                        principal.substs,\n                                        &mut unique_type_id);\n             },\n-            ty::TyFnDef(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+            ty::TyFnDef(_, _, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n             ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n                 if unsafety == hir::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n@@ -766,7 +766,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::TyFnDef(_, ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n+        ty::TyFnDef(_, _, ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n             let fn_metadata = subroutine_type_metadata(cx,\n                                                        unique_type_id,\n                                                        &barefnty.sig,"}, {"sha": "15275a46e9b7773e2e122bbf70d2f9a047666df9", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -430,7 +430,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let fn_type = monomorphize::apply_param_substs(cx.tcx(), param_substs, &fn_type);\n \n         let (sig, abi) = match fn_type.sty {\n-            ty::TyFnDef(_, ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n+            ty::TyFnDef(_, _, ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n                 let sig = cx.tcx().erase_late_bound_regions(&barefnty.sig);\n                 let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n                 (sig, barefnty.abi)"}, {"sha": "cc9067677b25b3cc3370d390b20c3c2be85e8c04", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -101,7 +101,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, principal.def_id, false, output);\n             push_type_params(cx, principal.substs, output);\n         },\n-        ty::TyFnDef(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+        ty::TyFnDef(_, _, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n         ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");"}, {"sha": "38e456c068829ee6b9add7189ec8cebbfbd3e8db", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -106,7 +106,7 @@ pub fn declare_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n \n     let function_type; // placeholder so that the memory ownership works out ok\n     let (sig, abi, env) = match fn_type.sty {\n-        ty::TyFnDef(_, f) |\n+        ty::TyFnDef(_, _, f) |\n         ty::TyFnPtr(f) => {\n             (&f.sig, f.abi, None)\n         }"}, {"sha": "cace98a230f61a00c406b13c3e4f94d989abd597", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -262,7 +262,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            ccx.tn().val_to_string(llretptr));\n \n     let (fn_abi, fn_sig) = match callee_ty.sty {\n-        ty::TyFnDef(_, ref fn_ty) |\n+        ty::TyFnDef(_, _, ref fn_ty) |\n         ty::TyFnPtr(ref fn_ty) => (fn_ty.abi, &fn_ty.sig),\n         _ => ccx.sess().bug(\"trans_native_call called on non-function type\")\n     };\n@@ -502,7 +502,7 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &hir::ForeignMod) {\n                 abi => {\n                     let ty = ccx.tcx().node_id_to_type(foreign_item.id);\n                     match ty.sty {\n-                        ty::TyFnDef(_, bft) |\n+                        ty::TyFnDef(_, _, bft) |\n                         ty::TyFnPtr(bft) => gate_simd_ffi(ccx.tcx(), &decl, bft),\n                         _ => ccx.tcx().sess.span_bug(foreign_item.span,\n                                                      \"foreign fn's sty isn't a bare_fn_ty?\")\n@@ -554,7 +554,7 @@ pub fn decl_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let tys = foreign_types_for_fn_ty(ccx, t);\n     let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n     let cconv = match t.sty {\n-        ty::TyFnDef(_, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => {\n+        ty::TyFnDef(_, _, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => {\n             llvm_calling_convention(ccx, fn_ty.abi)\n         }\n         _ => panic!(\"expected bare fn in decl_rust_fn_with_foreign_abi\")\n@@ -576,7 +576,7 @@ pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n     let t = ccx.tcx().node_id_to_type(node_id);\n     let cconv = match t.sty {\n-        ty::TyFnDef(_, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => {\n+        ty::TyFnDef(_, _, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => {\n             llvm_calling_convention(ccx, fn_ty.abi)\n         }\n         _ => panic!(\"expected bare fn in register_rust_fn_with_foreign_abi\")\n@@ -636,7 +636,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Compute the type that the function would have if it were just a\n         // normal Rust function. This will be the type of the wrappee fn.\n         match t.sty {\n-            ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f)=> {\n+            ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f)=> {\n                 assert!(f.abi != Abi::Rust);\n                 assert!(f.abi != Abi::RustIntrinsic);\n                 assert!(f.abi != Abi::PlatformIntrinsic);\n@@ -959,7 +959,7 @@ fn foreign_signature<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n fn foreign_types_for_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      ty: Ty<'tcx>) -> ForeignTypes<'tcx> {\n     let fn_sig = match ty.sty {\n-        ty::TyFnDef(_, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => &fn_ty.sig,\n+        ty::TyFnDef(_, _, ref fn_ty) | ty::TyFnPtr(ref fn_ty) => &fn_ty.sig,\n         _ => ccx.sess().bug(\"foreign_types_for_fn_ty called on non-function type\")\n     };\n     let fn_sig = ccx.tcx().erase_late_bound_regions(fn_sig);"}, {"sha": "f0ed06f876ecfe034060d846613e09ab59fbc562", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -259,7 +259,7 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         traits::VtableObject(ref data) => {\n             let idx = traits::get_vtable_index_of_object_method(bcx.tcx(), data, method_id);\n             if let Some(self_expr) = self_expr {\n-                if let ty::TyFnDef(_, ref fty) = monomorphize_type(bcx, method_ty).sty {\n+                if let ty::TyFnDef(_, _, ref fty) = monomorphize_type(bcx, method_ty).sty {\n                     let ty = opaque_method_ty(bcx.tcx(), fty);\n                     return trans_trait_callee(bcx, ty, idx, self_expr, arg_cleanup_scope);\n                 }"}, {"sha": "db93b77c47d9c2ed47ad6e6dd45f4ec82798d99c", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -38,7 +38,7 @@ enum AbiStyle {\n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     fn abi_style(&self, fn_ty: Ty<'tcx>) -> AbiStyle {\n         match fn_ty.sty {\n-            ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n+            ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n                 // We do not translate intrinsics here (they shouldn\u2019t be functions)\n                 assert!(f.abi != Abi::RustIntrinsic && f.abi != Abi::PlatformIntrinsic);\n "}, {"sha": "708aa9bdc9a8428321ddba6a18a57d7a78b10c77", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -153,7 +153,7 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n // Given a function type and a count of ty params, construct an llvm type\n pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>) -> Type {\n     match fty.sty {\n-        ty::TyFnDef(_, ref f) | ty::TyFnPtr(ref f) => {\n+        ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n             if f.abi == Abi::Rust || f.abi == Abi::RustCall {"}, {"sha": "fde2283d6e2694b9c75267bb5f6aafe0e54120e2", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -225,7 +225,7 @@ fn confirm_builtin_call<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     let error_fn_sig;\n \n     let fn_sig = match callee_ty.sty {\n-        ty::TyFnDef(_, &ty::BareFnTy {ref sig, ..}) |\n+        ty::TyFnDef(_, _, &ty::BareFnTy {ref sig, ..}) |\n         ty::TyFnPtr(&ty::BareFnTy {ref sig, ..}) => {\n             sig\n         }"}, {"sha": "f9bffa7391df3c17cb31c7406ac24c8f171e9fac", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -141,7 +141,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n \n         match a.sty {\n-            ty::TyFnDef(_, a_f) => {\n+            ty::TyFnDef(_, _, a_f) => {\n                 // Function items are coercible to any closure\n                 // type; function pointers are not (that would\n                 // require double indirection)."}, {"sha": "a05329bc4a4029b5636e69476453eb24dc5ac11c", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -13,7 +13,7 @@\n \n use astconv::AstConv;\n use intrinsics;\n-use middle::subst;\n+use middle::subst::{self, Substs};\n use middle::ty::FnSig;\n use middle::ty::{self, Ty, TyCtxt};\n use middle::ty::fold::TypeFolder;\n@@ -34,7 +34,12 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: &TyCtxt<'tcx>, it: &hir::ForeignItem,\n                                    inputs: Vec<ty::Ty<'tcx>>,\n                                    output: ty::FnOutput<'tcx>) {\n     let def_id = tcx.map.local_def_id(it.id);\n-    let fty = tcx.mk_fn_def(def_id, ty::BareFnTy {\n+    let i_ty = tcx.lookup_item_type(def_id);\n+\n+    let mut substs = Substs::empty();\n+    substs.types = i_ty.generics.types.map(|def| tcx.mk_param_from_def(def));\n+\n+    let fty = tcx.mk_fn_def(def_id, tcx.mk_substs(substs), ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n         abi: abi,\n         sig: ty::Binder(FnSig {\n@@ -43,7 +48,6 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: &TyCtxt<'tcx>, it: &hir::ForeignItem,\n             variadic: false,\n         }),\n     });\n-    let i_ty = tcx.lookup_item_type(def_id);\n     let i_n_tps = i_ty.generics.types.len(subst::FnSpace);\n     if i_n_tps != n_tps {\n         span_err!(tcx.sess, it.span, E0094,"}, {"sha": "95687c34bd1a67fcb06610ae837578f92bd9b8ed", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -434,7 +434,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            param_env: ty::ParameterEnvironment<'a, 'tcx>)\n {\n     match raw_fty.sty {\n-        ty::TyFnDef(_, ref fn_ty) => {\n+        ty::TyFnDef(_, _, ref fn_ty) => {\n             let tables = RefCell::new(ty::Tables::empty());\n             let inh = Inherited::new(ccx.tcx, &tables, param_env);\n "}, {"sha": "a8ada8061317e2b229825df7ac27c67d5f9ddf9e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -255,7 +255,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             let type_scheme = fcx.tcx().lookup_item_type(fcx.tcx().map.local_def_id(item.id));\n             let item_ty = fcx.instantiate_type_scheme(item.span, free_substs, &type_scheme.ty);\n             let bare_fn_ty = match item_ty.sty {\n-                ty::TyFnDef(_, ref bare_fn_ty) => bare_fn_ty,\n+                ty::TyFnDef(_, _, ref bare_fn_ty) => bare_fn_ty,\n                 _ => {\n                     this.tcx().sess.span_bug(item.span, \"Fn item without fn type\");\n                 }"}, {"sha": "3ce03e245785a55a7a50ffdcb7cc9852765f75b6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -543,6 +543,8 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                               sig, untransformed_rcvr_ty);\n \n     let def_id = ccx.tcx.map.local_def_id(id);\n+    let substs = ccx.tcx.mk_substs(mk_item_substs(ccx, &ty_generics));\n+\n     let ty_method = ty::Method::new(name,\n                                     ty_generics,\n                                     ty_generic_predicates,\n@@ -552,7 +554,7 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     def_id,\n                                     container);\n \n-    let fty = ccx.tcx.mk_fn_def(def_id, ty_method.fty.clone());\n+    let fty = ccx.tcx.mk_fn_def(def_id, substs, ty_method.fty.clone());\n     debug!(\"method {} (id {}) has type {:?}\",\n             name, id, fty);\n     ccx.tcx.register_item_type(def_id, TypeScheme {\n@@ -714,17 +716,13 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             tcx.register_item_type(def_id,\n                                    TypeScheme { generics: ty_generics.clone(),\n                                                 ty: selfty });\n-            if let &Some(ref ast_trait_ref) = opt_trait_ref {\n-                tcx.impl_trait_refs.borrow_mut().insert(\n-                    def_id,\n-                    Some(astconv::instantiate_mono_trait_ref(&ccx.icx(&ty_predicates),\n-                                                             &ExplicitRscope,\n-                                                             ast_trait_ref,\n-                                                             Some(selfty)))\n-                        );\n-            } else {\n-                tcx.impl_trait_refs.borrow_mut().insert(def_id, None);\n-            }\n+            let trait_ref = opt_trait_ref.as_ref().map(|ast_trait_ref| {\n+                astconv::instantiate_mono_trait_ref(&ccx.icx(&ty_predicates),\n+                                                    &ExplicitRscope,\n+                                                    ast_trait_ref,\n+                                                    Some(selfty))\n+            });\n+            tcx.impl_trait_refs.borrow_mut().insert(def_id, trait_ref);\n \n             enforce_impl_params_are_constrained(tcx, generics, &mut ty_predicates, def_id);\n             tcx.predicates.borrow_mut().insert(def_id, ty_predicates.clone());\n@@ -901,7 +899,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             }\n \n             if !struct_def.is_struct() {\n-                convert_variant_ctor(tcx, struct_def.id(), variant, scheme, predicates);\n+                convert_variant_ctor(ccx, struct_def.id(), variant, scheme, predicates);\n             }\n         },\n         hir::ItemTy(_, ref generics) => {\n@@ -919,11 +917,12 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n     }\n }\n \n-fn convert_variant_ctor<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n+fn convert_variant_ctor<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   ctor_id: ast::NodeId,\n                                   variant: ty::VariantDef<'tcx>,\n                                   scheme: ty::TypeScheme<'tcx>,\n                                   predicates: ty::GenericPredicates<'tcx>) {\n+    let tcx = ccx.tcx;\n     let ctor_ty = match variant.kind() {\n         VariantKind::Unit | VariantKind::Struct => scheme.ty,\n         VariantKind::Tuple => {\n@@ -932,9 +931,17 @@ fn convert_variant_ctor<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n                 .iter()\n                 .map(|field| field.unsubst_ty())\n                 .collect();\n-            tcx.mk_ctor_fn(tcx.map.local_def_id(ctor_id),\n-                           &inputs[..],\n-                           scheme.ty)\n+            let def_id = tcx.map.local_def_id(ctor_id);\n+            let substs = tcx.mk_substs(mk_item_substs(ccx, &scheme.generics));\n+            tcx.mk_fn_def(def_id, substs, ty::BareFnTy {\n+                unsafety: hir::Unsafety::Normal,\n+                abi: abi::Abi::Rust,\n+                sig: ty::Binder(ty::FnSig {\n+                    inputs: inputs,\n+                    output: ty::FnConverging(scheme.ty),\n+                    variadic: false\n+                })\n+            })\n         }\n     };\n     write_ty_to_tcx(tcx, ctor_id, ctor_ty);\n@@ -960,7 +967,7 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         // Convert the ctor, if any. This also registers the variant as\n         // an item.\n         convert_variant_ctor(\n-            ccx.tcx,\n+            ccx,\n             variant.node.data.id(),\n             ty_variant,\n             scheme.clone(),\n@@ -1435,7 +1442,9 @@ fn compute_type_scheme_of_item<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         hir::ItemFn(ref decl, unsafety, _, abi, ref generics, _) => {\n             let ty_generics = ty_generics_for_fn(ccx, generics, &ty::Generics::empty());\n             let tofd = astconv::ty_of_bare_fn(&ccx.icx(generics), unsafety, abi, &decl);\n-            let ty = tcx.mk_fn_def(ccx.tcx.map.local_def_id(it.id), tofd);\n+            let def_id = ccx.tcx.map.local_def_id(it.id);\n+            let substs = tcx.mk_substs(mk_item_substs(ccx, &ty_generics));\n+            let ty = tcx.mk_fn_def(def_id, substs, tofd);\n             ty::TypeScheme { ty: ty, generics: ty_generics }\n         }\n         hir::ItemTy(ref t, ref generics) => {\n@@ -2142,7 +2151,8 @@ fn compute_type_scheme_of_foreign_fn_decl<'a, 'tcx>(\n             ty::FnDiverging\n     };\n \n-    let t_fn = ccx.tcx.mk_fn_def(id, ty::BareFnTy {\n+    let substs = ccx.tcx.mk_substs(mk_item_substs(ccx, &ty_generics));\n+    let t_fn = ccx.tcx.mk_fn_def(id, substs, ty::BareFnTy {\n         abi: abi,\n         unsafety: hir::Unsafety::Unsafe,\n         sig: ty::Binder(ty::FnSig {inputs: input_tys,"}, {"sha": "035f8c60500228effcd27706afd5acbf75c19d02", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -103,7 +103,7 @@ use dep_graph::DepNode;\n use front::map as hir_map;\n use middle::def::Def;\n use middle::infer::{self, TypeOrigin};\n-use middle::subst;\n+use middle::subst::Substs;\n use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use session::{config, CompileResult};\n use util::common::time;\n@@ -128,7 +128,7 @@ pub mod coherence;\n pub mod variance;\n \n pub struct TypeAndSubsts<'tcx> {\n-    pub substs: subst::Substs<'tcx>,\n+    pub substs: Substs<'tcx>,\n     pub ty: Ty<'tcx>,\n }\n \n@@ -236,7 +236,8 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n             let main_def_id = tcx.map.local_def_id(main_id);\n-            let se_ty = tcx.mk_fn_def(main_def_id, ty::BareFnTy {\n+            let substs = tcx.mk_substs(Substs::empty());\n+            let se_ty = tcx.mk_fn_def(main_def_id, substs, ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -282,7 +283,9 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n \n-            let se_ty = tcx.mk_fn_def(ccx.tcx.map.local_def_id(start_id), ty::BareFnTy {\n+            let start_def_id = ccx.tcx.map.local_def_id(start_id);\n+            let substs = tcx.mk_substs(Substs::empty());\n+            let se_ty = tcx.mk_fn_def(start_def_id, substs, ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {"}, {"sha": "aecc588c3e286c3bebdf3a2615341a942b08a590", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -429,7 +429,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyFnDef(_, &ty::BareFnTy { ref sig, .. }) |\n+            ty::TyFnDef(_, _, &ty::BareFnTy { ref sig, .. }) |\n             ty::TyFnPtr(&ty::BareFnTy { ref sig, .. }) => {\n                 self.add_constraints_from_sig(generics, sig, variance);\n             }"}, {"sha": "c14e4af810310ea58ab3066f2c35cac3fabb4f74", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -164,7 +164,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &TyCtxt,\n fn build_external_function(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::Function {\n     let t = tcx.lookup_item_type(did);\n     let (decl, style, abi) = match t.ty.sty {\n-        ty::TyFnDef(_, ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n+        ty::TyFnDef(_, _, ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n         _ => panic!(\"bad function\"),\n     };\n "}, {"sha": "5921093bcac1e52be86b5dc3303e9bf491f6415e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "patch": "@@ -1663,7 +1663,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 mutability: mt.mutbl.clean(cx),\n                 type_: box mt.ty.clean(cx),\n             },\n-            ty::TyFnDef(_, ref fty) |\n+            ty::TyFnDef(_, _, ref fty) |\n             ty::TyFnPtr(ref fty) => BareFunction(box BareFunctionDecl {\n                 unsafety: fty.unsafety,\n                 generics: Generics {"}]}