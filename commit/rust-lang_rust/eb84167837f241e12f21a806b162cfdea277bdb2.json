{"sha": "eb84167837f241e12f21a806b162cfdea277bdb2", "node_id": "C_kwDOAAsO6NoAKGViODQxNjc4MzdmMjQxZTEyZjIxYTgwNmIxNjJjZmRlYTI3N2JkYjI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T03:33:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-23T20:32:24Z"}, "message": "Rename many interner functions.\n\n(This is a large commit. The changes to\n`compiler/rustc_middle/src/ty/context.rs` are the most important ones.)\n\nThe current naming scheme is a mess, with a mix of `_intern_`, `intern_`\nand `mk_` prefixes, with little consistency. In particular, in many\ncases it's easy to use an iterator interner when a (preferable) slice\ninterner is available.\n\nThe guiding principles of the new naming system:\n- No `_intern_` prefixes.\n- The `intern_` prefix is for internal operations.\n- The `mk_` prefix is for external operations.\n- For cases where there is a slice interner and an iterator interner,\n  the former is `mk_foo` and the latter is `mk_foo_from_iter`.\n\nAlso, `slice_interners!` and `direct_interners!` can now be `pub` or\nnon-`pub`, which helps enforce the internal/external operations\ndivision.\n\nIt's not perfect, but I think it's a clear improvement.\n\nThe following lists show everything that was renamed.\n\nslice_interners\n- const_list\n  - mk_const_list -> mk_const_list_from_iter\n  - intern_const_list -> mk_const_list\n- substs\n  - mk_substs -> mk_substs_from_iter\n  - intern_substs -> mk_substs\n  - check_substs -> check_and_mk_substs (this is a weird one)\n- canonical_var_infos\n  - intern_canonical_var_infos -> mk_canonical_var_infos\n- poly_existential_predicates\n  - mk_poly_existential_predicates -> mk_poly_existential_predicates_from_iter\n  - intern_poly_existential_predicates -> mk_poly_existential_predicates\n  - _intern_poly_existential_predicates -> intern_poly_existential_predicates\n- predicates\n  - mk_predicates -> mk_predicates_from_iter\n  - intern_predicates -> mk_predicates\n  - _intern_predicates -> intern_predicates\n- projs\n  - intern_projs -> mk_projs\n- place_elems\n  - mk_place_elems -> mk_place_elems_from_iter\n  - intern_place_elems -> mk_place_elems\n- bound_variable_kinds\n  - mk_bound_variable_kinds -> mk_bound_variable_kinds_from_iter\n  - intern_bound_variable_kinds -> mk_bound_variable_kinds\n\ndirect_interners\n- region\n  - intern_region (unchanged)\n- const\n  - mk_const_internal -> intern_const\n- const_allocation\n  - intern_const_alloc -> mk_const_alloc\n- layout\n  - intern_layout -> mk_layout\n- adt_def\n  - intern_adt_def -> mk_adt_def_from_data (unusual case, hard to avoid)\n  - alloc_adt_def(!) -> mk_adt_def\n- external_constraints\n  - intern_external_constraints -> mk_external_constraints\n\nOther\n- type_list\n  - mk_type_list -> mk_type_list_from_iter\n  - intern_type_list -> mk_type_list\n- tup\n  - mk_tup -> mk_tup_from_iter\n  - intern_tup -> mk_tup", "tree": {"sha": "c9a055100450c58162918539252187b026f71faf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a055100450c58162918539252187b026f71faf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb84167837f241e12f21a806b162cfdea277bdb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb84167837f241e12f21a806b162cfdea277bdb2", "html_url": "https://github.com/rust-lang/rust/commit/eb84167837f241e12f21a806b162cfdea277bdb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb84167837f241e12f21a806b162cfdea277bdb2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31fc31dd49705701fc68f9f9cbd512218df2f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31fc31dd49705701fc68f9f9cbd512218df2f83", "html_url": "https://github.com/rust-lang/rust/commit/f31fc31dd49705701fc68f9f9cbd512218df2f83"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "74396a66f54e09fde1659036f52e8fa17b9c4953", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=eb84167837f241e12f21a806b162cfdea277bdb2", "patch": "@@ -405,9 +405,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     let extra_args = &args[fn_sig.inputs().skip_binder().len()..];\n-    let extra_args = fx\n-        .tcx\n-        .mk_type_list(extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))));\n+    let extra_args = fx.tcx.mk_type_list_from_iter(\n+        extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))),\n+    );\n     let fn_abi = if let Some(instance) = instance {\n         RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, extra_args)\n     } else {"}, {"sha": "40bfe70771c1907aa58b3cc8e4cce2d566915ac8", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=eb84167837f241e12f21a806b162cfdea277bdb2", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n                 }\n             } else {\n-                let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+                let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n                 let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n                 let lhs = lhs.load_scalar(fx);\n                 let rhs = rhs.load_scalar(fx);\n@@ -78,7 +78,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n-            let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+            let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n             let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n                 let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);"}, {"sha": "e5c4b244a1afd8f6f4dc4096b10fe3221013c54a", "filename": "src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=eb84167837f241e12f21a806b162cfdea277bdb2", "patch": "@@ -191,7 +191,7 @@ fn llvm_add_sub<'tcx>(\n     // carry0 | carry1 -> carry or borrow respectively\n     let cb_out = fx.bcx.ins().bor(cb0, cb1);\n \n-    let layout = fx.layout_of(fx.tcx.intern_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n+    let layout = fx.layout_of(fx.tcx.mk_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n     let val = CValue::by_val_pair(cb_out, c, layout);\n     ret.write_cvalue(fx, val);\n }"}, {"sha": "be908df83e8f59a1d85e57fd7ef4f273d2d90a9d", "filename": "src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=eb84167837f241e12f21a806b162cfdea277bdb2", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     report.def_id,\n-                    tcx.intern_substs(&[GenericArg::from(main_ret_ty)]),\n+                    tcx.mk_substs(&[GenericArg::from(main_ret_ty)]),\n                 )\n                 .unwrap()\n                 .unwrap()\n@@ -146,7 +146,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     start_def_id,\n-                    tcx.intern_substs(&[main_ret_ty.into()]),\n+                    tcx.mk_substs(&[main_ret_ty.into()]),\n                 )\n                 .unwrap()\n                 .unwrap()"}, {"sha": "c058ece96d8e3465fdb16e70060b4b7f9563f77f", "filename": "src/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb84167837f241e12f21a806b162cfdea277bdb2/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=eb84167837f241e12f21a806b162cfdea277bdb2", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n \n-    let out_layout = fx.layout_of(fx.tcx.intern_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n+    let out_layout = fx.layout_of(fx.tcx.mk_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n "}]}