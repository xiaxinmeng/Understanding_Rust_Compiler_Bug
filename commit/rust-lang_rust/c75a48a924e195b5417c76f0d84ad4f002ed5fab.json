{"sha": "c75a48a924e195b5417c76f0d84ad4f002ed5fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NWE0OGE5MjRlMTk1YjU0MTdjNzZmMGQ4NGFkNGYwMDJlZDVmYWI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T13:09:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T13:09:22Z"}, "message": "Rollup merge of #66297 - vakaras:edit-queries, r=oli-obk\n\nAdd a callback that allows compiler consumers to override queries.\n\nThis pull request adds an additional callback that allows compiler consumers such as Prusti and MIRAI to override queries. My hope is that in this way it will be possible to get access to the internal compiler information (e.g. borrow checker) without major changes to the compiler.\n\nThis pull request is work in progress because I am still testing if I can get the information which I need.\n\ncc @nikomatsakis\n\nr? @oli-obk", "tree": {"sha": "5e3015c8a1668395ffa8680b5a7c0964e43274a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3015c8a1668395ffa8680b5a7c0964e43274a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75a48a924e195b5417c76f0d84ad4f002ed5fab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzACCCRBK7hj4Ov3rIwAAdHIIABaa0pw4s6Q9kdwq/l28ijbB\nR+9smmt//0ozoayDdafBJ08VkqyC6uOws55fQEFW3mkFwaf4InoYT2P+lfV7+VEx\nMvMAcZ/JE2euHG9kSktJ3q4zpmXqFEmgAAjD/tfQFMEIjixxt5civHPb5zKjx1Q8\nLvCDA0O98VRNKQ2OSYW0BTnboRdNZuAI11cYCh5Xi1v0OLztpmO9L8MYIax6XO0D\naiMhIQJ3PfNNQChEv3NBG+xoNYEji92XnrpvL1xzhIMHJLGfgo8LrMjDkFqefGlz\neXPMj+8bldv2kSpPl84uFWihTqpFn/PR+J7BVTaA+LZ1UF7sFzf50IILJycF3dM=\n=QZ+B\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e3015c8a1668395ffa8680b5a7c0964e43274a7\nparent 961d51dcbb3e62593367752ca354ea05ad93ac03\nparent f9f5a88bc4d2e62ea325be8a37e5811a951f234c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573650562 +0900\ncommitter GitHub <noreply@github.com> 1573650562 +0900\n\nRollup merge of #66297 - vakaras:edit-queries, r=oli-obk\n\nAdd a callback that allows compiler consumers to override queries.\n\nThis pull request adds an additional callback that allows compiler consumers such as Prusti and MIRAI to override queries. My hope is that in this way it will be possible to get access to the internal compiler information (e.g. borrow checker) without major changes to the compiler.\n\nThis pull request is work in progress because I am still testing if I can get the information which I need.\n\ncc @nikomatsakis\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75a48a924e195b5417c76f0d84ad4f002ed5fab", "html_url": "https://github.com/rust-lang/rust/commit/c75a48a924e195b5417c76f0d84ad4f002ed5fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75a48a924e195b5417c76f0d84ad4f002ed5fab/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961d51dcbb3e62593367752ca354ea05ad93ac03", "url": "https://api.github.com/repos/rust-lang/rust/commits/961d51dcbb3e62593367752ca354ea05ad93ac03", "html_url": "https://github.com/rust-lang/rust/commit/961d51dcbb3e62593367752ca354ea05ad93ac03"}, {"sha": "f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "html_url": "https://github.com/rust-lang/rust/commit/f9f5a88bc4d2e62ea325be8a37e5811a951f234c"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "514c6d0e1dad962bad63390477fef273f80816e7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c75a48a924e195b5417c76f0d84ad4f002ed5fab", "patch": "@@ -181,6 +181,7 @@ pub fn run_compiler(\n             crate_name: None,\n             lint_caps: Default::default(),\n             register_lints: None,\n+            override_queries: None,\n         };\n         callbacks.config(&mut config);\n         config\n@@ -259,6 +260,7 @@ pub fn run_compiler(\n         crate_name: None,\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     callbacks.config(&mut config);"}, {"sha": "fae4eb48c4a1b127aa810d5de5b8aada02057efc", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=c75a48a924e195b5417c76f0d84ad4f002ed5fab", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_parse::new_parser_from_source_str;\n+use rustc::ty;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n@@ -38,6 +39,8 @@ pub struct Compiler {\n     pub(crate) queries: Queries,\n     pub(crate) crate_name: Option<String>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n+    pub(crate) override_queries:\n+        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n }\n \n impl Compiler {\n@@ -131,6 +134,13 @@ pub struct Config {\n     /// Note that if you find a Some here you probably want to call that function in the new\n     /// function being registered.\n     pub register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n+\n+    /// This is a callback from the driver that is called just after we have populated\n+    /// the list of queries.\n+    ///\n+    /// The second parameter is local providers and the third parameter is external providers.\n+    pub override_queries:\n+        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n }\n \n pub fn run_compiler_in_existing_thread_pool<F, R>(config: Config, f: F) -> R\n@@ -157,6 +167,7 @@ where\n         queries: Default::default(),\n         crate_name: config.crate_name,\n         register_lints: config.register_lints,\n+        override_queries: config.override_queries,\n     };\n \n     let _sess_abort_error = OnDrop(|| {"}, {"sha": "c57622b8b8fe5d587c0c8c427eb65cef27c111ef", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=c75a48a924e195b5417c76f0d84ad4f002ed5fab", "patch": "@@ -786,6 +786,7 @@ pub fn create_global_ctxt(\n     let codegen_backend = compiler.codegen_backend().clone();\n     let crate_name = crate_name.to_string();\n     let defs = mem::take(&mut resolver_outputs.definitions);\n+    let override_queries = compiler.override_queries;\n \n     let ((), result) = BoxedGlobalCtxt::new(static move || {\n         let sess = &*sess;\n@@ -810,6 +811,10 @@ pub fn create_global_ctxt(\n         default_provide_extern(&mut extern_providers);\n         codegen_backend.provide_extern(&mut extern_providers);\n \n+        if let Some(callback) = override_queries {\n+            callback(sess, &mut local_providers, &mut extern_providers);\n+        }\n+\n         let gcx = TyCtxt::create_global_ctxt(\n             sess,\n             lint_store,"}, {"sha": "0f508966a4cc2fe9ddc7e1fd56771fe5f076b94c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c75a48a924e195b5417c76f0d84ad4f002ed5fab", "patch": "@@ -335,6 +335,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         crate_name,\n         lint_caps,\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     interface::run_compiler_in_existing_thread_pool(config, |compiler| {"}, {"sha": "c483f6fb4770f941d7e1722d85f38b07545a8df1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c75a48a924e195b5417c76f0d84ad4f002ed5fab", "patch": "@@ -79,6 +79,7 @@ pub fn run(options: Options) -> i32 {\n         crate_name: options.crate_name.clone(),\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     let mut test_args = options.test_args.clone();"}, {"sha": "9f1850dfb4c90e291a6b612a40e9d777e9f49eb1", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75a48a924e195b5417c76f0d84ad4f002ed5fab/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=c75a48a924e195b5417c76f0d84ad4f002ed5fab", "patch": "@@ -60,6 +60,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         crate_name: None,\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     interface::run_compiler(config, |compiler| {"}]}