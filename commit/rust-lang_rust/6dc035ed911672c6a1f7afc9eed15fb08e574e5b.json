{"sha": "6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYzAzNWVkOTExNjcyYzZhMWY3YWZjOWVlZDE1ZmIwOGU1NzRlNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-16T02:49:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-16T02:49:12Z"}, "message": "Auto merge of #37098 - ollie27:rustdoc_playground, r=GuillaumeGomez\n\nrustdoc: Improve playground run buttons\n\nThe main change is to stop using javascript to generate the URLs and use\nrustdoc instead.\n\nThis also adds run buttons to the error index examples.\n\nYou can test the changes at https://ollie27.github.io/rust_doc_test/.\n\nFixes #36621\nFixes #36910", "tree": {"sha": "23ae8ad453a087d87bb8fd84aae32360290f8af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ae8ad453a087d87bb8fd84aae32360290f8af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "html_url": "https://github.com/rust-lang/rust/commit/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a3502da1456b209ff031604cabbbcb9d0eddf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a3502da1456b209ff031604cabbbcb9d0eddf1", "html_url": "https://github.com/rust-lang/rust/commit/98a3502da1456b209ff031604cabbbcb9d0eddf1"}, {"sha": "0b2746c8db6fc11965b1b6fd1d8536309a0d98b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2746c8db6fc11965b1b6fd1d8536309a0d98b6", "html_url": "https://github.com/rust-lang/rust/commit/0b2746c8db6fc11965b1b6fd1d8536309a0d98b6"}], "stats": {"total": 246, "additions": 131, "deletions": 115}, "files": [{"sha": "77e151235e822d4281d365d6908d13bf8073a231", "filename": "src/doc/footer.inc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Fdoc%2Ffooter.inc", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Fdoc%2Ffooter.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ffooter.inc?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -5,4 +5,3 @@ or the <a href=\"https://opensource.org/licenses/MIT\">MIT license</a>, at your op\n </p><p>\n This file may not be copied, modified, or distributed except according to those terms.\n </p></footer>\n-<script type=\"text/javascript\" src=\"playpen.js\"></script>"}, {"sha": "932594b99126df489783fc68eb306bf29ed70bbe", "filename": "src/doc/rust.css", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -336,20 +336,22 @@ table th {\n \n /* Code snippets */\n \n-.rusttest { display: none; }\n pre.rust { position: relative; }\n a.test-arrow {\n+    background-color: rgba(78, 139, 202, 0.2);\n     display: inline-block;\n     position: absolute;\n-\n-    background-color: #4e8bca;\n     color: #f5f5f5;\n     padding: 5px 10px 5px 10px;\n     border-radius: 5px;\n     font-size: 130%;\n     top: 5px;\n     right: 5px;\n }\n+a.test-arrow:hover{\n+    background-color: #4e8bca;\n+    text-decoration: none;\n+}\n \n .unstable-feature {\n     border: 2px solid red;"}, {"sha": "5353642e294251e6438a843c5a9f38a068f4ccb8", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -19,7 +19,6 @@ pub struct Layout {\n     pub favicon: String,\n     pub external_html: ExternalHtml,\n     pub krate: String,\n-    pub playground_url: String,\n }\n \n pub struct Page<'a> {\n@@ -136,11 +135,9 @@ r##\"<!DOCTYPE html>\n     <script>\n         window.rootPath = \"{root_path}\";\n         window.currentCrate = \"{krate}\";\n-        window.playgroundUrl = \"{play_url}\";\n     </script>\n     <script src=\"{root_path}jquery.js\"></script>\n     <script src=\"{root_path}main.js\"></script>\n-    {play_js}\n     <script defer src=\"{root_path}search-index.js\"></script>\n </body>\n </html>\"##,\n@@ -174,12 +171,6 @@ r##\"<!DOCTYPE html>\n     after_content = layout.external_html.after_content,\n     sidebar   = *sidebar,\n     krate     = layout.krate,\n-    play_url  = layout.playground_url,\n-    play_js   = if layout.playground_url.is_empty() {\n-        format!(r#\"<script src=\"{}extra.js\"></script>\"#, page.root_path)\n-    } else {\n-        format!(r#\"<script src=\"{}playpen.js\"></script>\"#, page.root_path)\n-    }\n     )\n }\n "}, {"sha": "f12349e5b7c6bf0158f8a9ac420a6823cc9f8ada", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -31,7 +31,7 @@ use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::default::Default;\n use std::ffi::CString;\n-use std::fmt;\n+use std::fmt::{self, Write};\n use std::slice;\n use std::str;\n use syntax::feature_gate::UnstableFeatures;\n@@ -214,7 +214,9 @@ fn collapse_whitespace(s: &str) -> String {\n     s.split_whitespace().collect::<Vec<_>>().join(\" \")\n }\n \n-thread_local!(pub static PLAYGROUND_KRATE: RefCell<Option<Option<String>>> = {\n+// Information about the playground if a URL has been specified, containing an\n+// optional crate name and the URL.\n+thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> = {\n     RefCell::new(None)\n });\n \n@@ -248,24 +250,53 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n             });\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             if rendered { return }\n-            PLAYGROUND_KRATE.with(|krate| {\n+            PLAYGROUND.with(|play| {\n                 // insert newline to clearly separate it from the\n                 // previous block so we can shorten the html output\n                 let mut s = String::from(\"\\n\");\n-                krate.borrow().as_ref().map(|krate| {\n+                let playground_button = play.borrow().as_ref().and_then(|&(ref krate, ref url)| {\n+                    if url.is_empty() {\n+                        return None;\n+                    }\n                     let test = origtext.lines().map(|l| {\n                         stripped_filtered_line(l).unwrap_or(l)\n                     }).collect::<Vec<&str>>().join(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n                     let test = test::maketest(&test, krate, false,\n                                               &Default::default());\n-                    s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n+                    let channel = if test.contains(\"#![feature(\") {\n+                        \"&amp;version=nightly\"\n+                    } else {\n+                        \"\"\n+                    };\n+                    // These characters don't need to be escaped in a URI.\n+                    // FIXME: use a library function for percent encoding.\n+                    fn dont_escape(c: u8) -> bool {\n+                        (b'a' <= c && c <= b'z') ||\n+                        (b'A' <= c && c <= b'Z') ||\n+                        (b'0' <= c && c <= b'9') ||\n+                        c == b'-' || c == b'_' || c == b'.' ||\n+                        c == b'~' || c == b'!' || c == b'\\'' ||\n+                        c == b'(' || c == b')' || c == b'*'\n+                    }\n+                    let mut test_escaped = String::new();\n+                    for b in test.bytes() {\n+                        if dont_escape(b) {\n+                            test_escaped.push(char::from(b));\n+                        } else {\n+                            write!(test_escaped, \"%{:02X}\", b).unwrap();\n+                        }\n+                    }\n+                    Some(format!(\n+                        r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}\">Run</a>\"#,\n+                        url, test_escaped, channel\n+                    ))\n                 });\n                 s.push_str(&highlight::render_with_highlighting(\n                                &text,\n                                Some(\"rust-example-rendered\"),\n                                None,\n-                               Some(\"<a class='test-arrow' target='_blank' href=''>Run</a>\")));\n+                               playground_button.as_ref().map(String::as_str)));\n                 let output = CString::new(s).unwrap();\n                 hoedown_buffer_puts(ob, output.as_ptr());\n             })"}, {"sha": "77a5ff3243a6c8af7e9b31577132cebde17f1264", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -449,7 +449,6 @@ pub fn run(mut krate: clean::Crate,\n             favicon: \"\".to_string(),\n             external_html: external_html.clone(),\n             krate: krate.name.clone(),\n-            playground_url: \"\".to_string(),\n         },\n         css_file_extension: css_file_extension.clone(),\n     };\n@@ -469,11 +468,10 @@ pub fn run(mut krate: clean::Crate,\n                 }\n                 clean::NameValue(ref x, ref s)\n                         if \"html_playground_url\" == *x => {\n-                    scx.layout.playground_url = s.to_string();\n-                    markdown::PLAYGROUND_KRATE.with(|slot| {\n+                    markdown::PLAYGROUND.with(|slot| {\n                         if slot.borrow().is_none() {\n                             let name = krate.name.clone();\n-                            *slot.borrow_mut() = Some(Some(name));\n+                            *slot.borrow_mut() = Some((Some(name), s.clone()));\n                         }\n                     });\n                 }\n@@ -659,8 +657,6 @@ fn write_shared(cx: &Context,\n           include_bytes!(\"static/jquery-2.1.4.min.js\"))?;\n     write(cx.dst.join(\"main.js\"),\n           include_bytes!(\"static/main.js\"))?;\n-    write(cx.dst.join(\"playpen.js\"),\n-          include_bytes!(\"static/playpen.js\"))?;\n     write(cx.dst.join(\"rustdoc.css\"),\n           include_bytes!(\"static/rustdoc.css\"))?;\n     write(cx.dst.join(\"main.css\"),"}, {"sha": "d9d97d9b8838a9cb4531d3129ec2fcabbbdbb8bb", "filename": "src/librustdoc/html/static/extra.js", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/98a3502da1456b209ff031604cabbbcb9d0eddf1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fextra.js", "raw_url": "https://github.com/rust-lang/rust/raw/98a3502da1456b209ff031604cabbbcb9d0eddf1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fextra.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fextra.js?ref=98a3502da1456b209ff031604cabbbcb9d0eddf1", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2014-2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*jslint browser: true, es5: true */\n-/*globals $: true, rootPath: true */\n-\n-document.addEventListener('DOMContentLoaded', function() {\n-    'use strict';\n-\n-    if (!window.playgroundUrl) {\n-        var runButtons = document.querySelectorAll(\".test-arrow\");\n-\n-        for (var i = 0; i < runButtons.length; i++) {\n-            runButtons[i].classList.remove(\"test-arrow\");\n-        }\n-        return;\n-    }\n-});"}, {"sha": "8d8953d56e12c6f97658d6da12b53dd476fd609f", "filename": "src/librustdoc/html/static/playpen.js", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/98a3502da1456b209ff031604cabbbcb9d0eddf1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "raw_url": "https://github.com/rust-lang/rust/raw/98a3502da1456b209ff031604cabbbcb9d0eddf1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js?ref=98a3502da1456b209ff031604cabbbcb9d0eddf1", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*jslint browser: true, es5: true */\n-/*globals $: true, rootPath: true */\n-\n-document.addEventListener('DOMContentLoaded', function() {\n-    'use strict';\n-\n-    if (!window.playgroundUrl) {\n-        var runButtons = document.querySelectorAll(\".test-arrow\");\n-\n-        for (var i = 0; i < runButtons.length; i++) {\n-            runButtons[i].classList.remove(\"test-arrow\");\n-        }\n-        return;\n-    }\n-\n-    var featureRegexp = new RegExp('^\\s*#!\\\\[feature\\\\(\\.*?\\\\)\\\\]');\n-    var elements = document.querySelectorAll('pre.rust-example-rendered');\n-\n-    Array.prototype.forEach.call(elements, function(el) {\n-        el.onmouseover = function(e) {\n-            if (el.contains(e.relatedTarget)) {\n-                return;\n-            }\n-\n-            var a = el.querySelectorAll('a.test-arrow')[0];\n-\n-            var code = el.previousElementSibling.textContent;\n-\n-            var channel = '';\n-            if (featureRegexp.test(code)) {\n-                channel = '&version=nightly';\n-            }\n-\n-            a.setAttribute('href', window.playgroundUrl + '?code=' +\n-                           encodeURIComponent(code) + channel);\n-        };\n-    });\n-});"}, {"sha": "f49b8556f66cb8b973048339d59af7ad351d4d57", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -575,7 +575,6 @@ pre.rust .question-mark {\n     font-weight: bold;\n }\n \n-.rusttest { display: none; }\n pre.rust { position: relative; }\n a.test-arrow {\n     background-color: rgba(78, 139, 202, 0.2);"}, {"sha": "b617acfabbbf1380f01b0dd297dc21a94a72e1aa", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -63,11 +63,9 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n         Err(LoadStringError::ReadFail) => return 1,\n         Err(LoadStringError::BadUtf8) => return 2,\n     };\n-    let playground = matches.opt_str(\"markdown-playground-url\");\n-    if playground.is_some() {\n-        markdown::PLAYGROUND_KRATE.with(|s| { *s.borrow_mut() = Some(None); });\n+    if let Some(playground) = matches.opt_str(\"markdown-playground-url\") {\n+        markdown::PLAYGROUND.with(|s| { *s.borrow_mut() = Some((None, playground)); });\n     }\n-    let playground = playground.unwrap_or(\"\".to_string());\n \n     let mut out = match File::create(&output) {\n         Err(e) => {\n@@ -119,9 +117,6 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n     {before_content}\n     <h1 class=\"title\">{title}</h1>\n     {text}\n-    <script type=\"text/javascript\">\n-        window.playgroundUrl = \"{playground}\";\n-    </script>\n     {after_content}\n </body>\n </html>\"#,\n@@ -131,7 +126,6 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n         before_content = external_html.before_content,\n         text = rendered,\n         after_content = external_html.after_content,\n-        playground = playground,\n         );\n \n     match err {"}, {"sha": "d1d2b14806ffe4a1ff3793ece90f7927fabb179c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -355,7 +355,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n     if dont_insert_main || s.contains(\"fn main\") {\n         prog.push_str(&everything_else);\n     } else {\n-        prog.push_str(\"fn main() {\\n    \");\n+        prog.push_str(\"fn main() {\\n\");\n         prog.push_str(&everything_else);\n         prog = prog.trim().into();\n         prog.push_str(\"\\n}\");"}, {"sha": "00881a62dd0a8cc3a9ea550bbd428149c88900a9", "filename": "src/test/rustdoc/playground-empty.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftest%2Frustdoc%2Fplayground-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftest%2Frustdoc%2Fplayground-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-empty.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+#![doc(html_playground_url = \"\")]\n+\n+//! module docs\n+//!\n+//! ```\n+//! println!(\"Hello, world!\");\n+//! ```\n+\n+// @!has foo/index.html '//a[@class=\"test-arrow\"]' \"Run\""}, {"sha": "83c312d7ab22090f272532a09faed1b07e30ae5a", "filename": "src/test/rustdoc/playground-none.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftest%2Frustdoc%2Fplayground-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftest%2Frustdoc%2Fplayground-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-none.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+//! module docs\n+//!\n+//! ```\n+//! println!(\"Hello, world!\");\n+//! ```\n+\n+// @!has foo/index.html '//a[@class=\"test-arrow\"]' \"Run\""}, {"sha": "9eb8dec51a7f2f6f86489eb04b49df533cdc2952", "filename": "src/test/rustdoc/playground.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftest%2Frustdoc%2Fplayground.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftest%2Frustdoc%2Fplayground.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+\n+#![doc(html_playground_url = \"https://www.example.com/\")]\n+\n+//! module docs\n+//!\n+//! ```\n+//! println!(\"Hello, world!\");\n+//! ```\n+//!\n+//! ```\n+//! fn main() {\n+//!     println!(\"Hello, world!\");\n+//! }\n+//! ```\n+//!\n+//! ```\n+//! #![feature(something)]\n+//!\n+//! fn main() {\n+//!     println!(\"Hello, world!\");\n+//! }\n+//! ```\n+\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=fn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=fn%20main()%20%7B%0Aprintln!(%22Hello%2C%20world!%22)%3B%0A%7D\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A&version=nightly\"]' \"Run\""}, {"sha": "e33df0dfbc8dec5cf344341d76546138dc15e39a", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -24,7 +24,7 @@ use std::path::PathBuf;\n \n use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n-use rustdoc::html::markdown::Markdown;\n+use rustdoc::html::markdown::{Markdown, PLAYGROUND};\n use rustc_serialize::json;\n \n enum OutputFormat {\n@@ -201,6 +201,9 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n }\n \n fn main() {\n+    PLAYGROUND.with(|slot| {\n+        *slot.borrow_mut() = Some((None, String::from(\"https://play.rust-lang.org/\")));\n+    });\n     let (format, dst) = parse_args();\n     if let Err(e) = main_with_result(format, &dst) {\n         panic!(\"{}\", e.description());"}, {"sha": "d88ff48843a403526f6135ca4c7973702f4031e4", "filename": "src/tools/rustbook/build.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftools%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc035ed911672c6a1f7afc9eed15fb08e574e5b/src%2Ftools%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fbuild.rs?ref=6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "patch": "@@ -131,7 +131,6 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n         {\n             let mut buffer = BufWriter::new(File::create(&postlude)?);\n             writeln!(&mut buffer, \"<script src='rustbook.js'></script>\")?;\n-            writeln!(&mut buffer, \"<script src='playpen.js'></script>\")?;\n             writeln!(&mut buffer, \"</div></div>\")?;\n         }\n \n@@ -143,7 +142,7 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n             format!(\"-o{}\", out_path.display()),\n             format!(\"--html-before-content={}\", prelude.display()),\n             format!(\"--html-after-content={}\", postlude.display()),\n-            format!(\"--markdown-playground-url=https://play.rust-lang.org\"),\n+            format!(\"--markdown-playground-url=https://play.rust-lang.org/\"),\n             format!(\"--markdown-css={}\", item.path_to_root.join(\"rustbook.css\").display()),\n             \"--markdown-no-toc\".to_string(),\n         ];\n@@ -158,10 +157,6 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n     // create index.html from the root README\n     fs::copy(&tgt.join(\"README.html\"), &tgt.join(\"index.html\"))?;\n \n-    // Copy js for playpen\n-    let mut playpen = File::create(tgt.join(\"playpen.js\"))?;\n-    let js = include_bytes!(\"../../librustdoc/html/static/playpen.js\");\n-    playpen.write_all(js)?;\n     Ok(())\n }\n "}]}