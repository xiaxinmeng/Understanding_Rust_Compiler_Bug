{"sha": "6befe6784f37d953884ef05982b41c3a11932170", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZWZlNjc4NGYzN2Q5NTM4ODRlZjA1OTgyYjQxYzNhMTE5MzIxNzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T15:19:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T15:19:43Z"}, "message": "treat generator fields like unions", "tree": {"sha": "eecb06765edeaaed6acd366cadda530f3135468e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eecb06765edeaaed6acd366cadda530f3135468e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6befe6784f37d953884ef05982b41c3a11932170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6befe6784f37d953884ef05982b41c3a11932170", "html_url": "https://github.com/rust-lang/rust/commit/6befe6784f37d953884ef05982b41c3a11932170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6befe6784f37d953884ef05982b41c3a11932170/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f1077700c019b2dc8d651528ecad106c9267858", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1077700c019b2dc8d651528ecad106c9267858", "html_url": "https://github.com/rust-lang/rust/commit/7f1077700c019b2dc8d651528ecad106c9267858"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "81e56f3115d26cfd8aa1b39ef4d88d36e45c7839", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6befe6784f37d953884ef05982b41c3a11932170/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6befe6784f37d953884ef05982b41c3a11932170/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=6befe6784f37d953884ef05982b41c3a11932170", "patch": "@@ -158,7 +158,9 @@ macro_rules! make_value_visitor {\n             ) -> EvalResult<'tcx> {\n                 self.walk_aggregate(v, fields)\n             }\n-            /// Called each time we recurse down to a field, passing in old and new value.\n+\n+            /// Called each time we recurse down to a field of a \"product-like\" aggregate\n+            /// (structs, tuples, arrays and the like, but not enums), passing in old and new value.\n             /// This gives the visitor the chance to track the stack of nested fields that\n             /// we are descending through.\n             #[inline(always)]\n@@ -171,6 +173,19 @@ macro_rules! make_value_visitor {\n                 self.visit_value(new_val)\n             }\n \n+            /// Called for recursing into the field of a generator.  These are not known to be\n+            /// initialized, so we treat them like unions.\n+            #[inline(always)]\n+            fn visit_generator_field(\n+                &mut self,\n+                _old_val: Self::V,\n+                _field: usize,\n+                new_val: Self::V,\n+            ) -> EvalResult<'tcx> {\n+                self.visit_union(new_val)\n+            }\n+\n+            /// Called when recursing into an enum variant.\n             #[inline(always)]\n             fn visit_variant(\n                 &mut self,\n@@ -300,7 +315,12 @@ macro_rules! make_value_visitor {\n                         match v.layout().ty.sty {\n                             ty::Generator(..) => {\n                                 let field = v.project_field(self.ecx(), 0)?;\n-                                self.visit_aggregate(v, std::iter::once(Ok(field)))\n+                                self.visit_aggregate(v, std::iter::once(Ok(field)))?;\n+                                for i in 1..offsets.len() {\n+                                    let field = v.project_field(self.ecx(), i as u64)?;\n+                                    self.visit_generator_field(v, i, field)?;\n+                                }\n+                                Ok(())\n                             }\n                             _ => {\n                                 // FIXME: We collect in a vec because otherwise there are lifetime"}]}