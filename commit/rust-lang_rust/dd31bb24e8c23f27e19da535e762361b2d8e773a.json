{"sha": "dd31bb24e8c23f27e19da535e762361b2d8e773a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMzFiYjI0ZThjMjNmMjdlMTlkYTUzNWU3NjIzNjFiMmQ4ZTc3M2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T23:57:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-02T17:24:46Z"}, "message": "Modify variance inference to always infer all trait parameters as invariant.", "tree": {"sha": "6a121876b625851c57ee2dfdf1ef01da8e4daa28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a121876b625851c57ee2dfdf1ef01da8e4daa28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd31bb24e8c23f27e19da535e762361b2d8e773a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd31bb24e8c23f27e19da535e762361b2d8e773a", "html_url": "https://github.com/rust-lang/rust/commit/dd31bb24e8c23f27e19da535e762361b2d8e773a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd31bb24e8c23f27e19da535e762361b2d8e773a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9854143cba679834bc4ef932858cd5303f015a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9854143cba679834bc4ef932858cd5303f015a0e", "html_url": "https://github.com/rust-lang/rust/commit/9854143cba679834bc4ef932858cd5303f015a0e"}], "stats": {"total": 99, "additions": 3, "deletions": 96}, "files": [{"sha": "a95919c20f31f75f9956bac13049a63d5e9e0b2b", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 3, "deletions": 96, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/dd31bb24e8c23f27e19da535e762361b2d8e773a/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd31bb24e8c23f27e19da535e762361b2d8e773a/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=dd31bb24e8c23f27e19da535e762361b2d8e773a", "patch": "@@ -644,39 +644,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n \n             ast::ItemTrait(..) => {\n                 let trait_def = ty::lookup_trait_def(tcx, did);\n-                let predicates = ty::lookup_super_predicates(tcx, did);\n-                self.add_constraints_from_predicates(&trait_def.generics,\n-                                                     predicates.predicates.as_slice(),\n-                                                     self.covariant);\n-\n-                let trait_items = ty::trait_items(tcx, did);\n-                for trait_item in &*trait_items {\n-                    match *trait_item {\n-                        ty::MethodTraitItem(ref method) => {\n-                            self.add_constraints_from_predicates(\n-                                &method.generics,\n-                                method.predicates.predicates.get_slice(FnSpace),\n-                                self.contravariant);\n-\n-                            self.add_constraints_from_sig(\n-                                &method.generics,\n-                                &method.fty.sig,\n-                                self.covariant);\n-                        }\n-                        ty::TypeTraitItem(ref data) => {\n-                            // Any trait with an associated type is\n-                            // invariant with respect to all of its\n-                            // inputs. See length discussion in the comment\n-                            // on this module.\n-                            let projection_ty = ty::mk_projection(tcx,\n-                                                                  trait_def.trait_ref.clone(),\n-                                                                  data.name);\n-                            self.add_constraints_from_ty(&trait_def.generics,\n-                                                         projection_ty,\n-                                                         self.invariant);\n-                        }\n-                    }\n-                }\n+                self.add_constraints_from_trait_ref(&trait_def.generics,\n+                                                    &trait_def.trait_ref,\n+                                                    self.invariant);\n             }\n \n             ast::ItemExternCrate(_) |\n@@ -1045,69 +1015,6 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n-    fn add_constraints_from_predicates(&mut self,\n-                                       generics: &ty::Generics<'tcx>,\n-                                       predicates: &[ty::Predicate<'tcx>],\n-                                       variance: VarianceTermPtr<'a>) {\n-        debug!(\"add_constraints_from_generics({})\",\n-               generics.repr(self.tcx()));\n-\n-        for predicate in predicates.iter() {\n-            match *predicate {\n-                ty::Predicate::Trait(ty::Binder(ref data)) => {\n-                    self.add_constraints_from_trait_ref(generics, &*data.trait_ref, variance);\n-                }\n-\n-                ty::Predicate::Equate(ty::Binder(ref data)) => {\n-                    // A == B is only true if A and B are the same\n-                    // types, not subtypes of one another, so this is\n-                    // an invariant position:\n-                    self.add_constraints_from_ty(generics, data.0, self.invariant);\n-                    self.add_constraints_from_ty(generics, data.1, self.invariant);\n-                }\n-\n-                ty::Predicate::TypeOutlives(ty::Binder(ref data)) => {\n-                    // Why contravariant on both? Let's consider:\n-                    //\n-                    // Under what conditions is `(T:'t) <: (U:'u)`,\n-                    // meaning that `(T:'t) => (U:'u)`. The answer is\n-                    // if `U <: T` or `'u <= 't`. Let's see some examples:\n-                    //\n-                    //   (T: 'big) => (T: 'small)\n-                    //   where 'small <= 'big\n-                    //\n-                    //   (&'small Foo: 't) => (&'big Foo: 't)\n-                    //   where 'small <= 'big\n-                    //   note that &'big Foo <: &'small Foo\n-\n-                    let variance_r = self.xform(variance, self.contravariant);\n-                    self.add_constraints_from_ty(generics, data.0, variance_r);\n-                    self.add_constraints_from_region(generics, data.1, variance_r);\n-                }\n-\n-                ty::Predicate::RegionOutlives(ty::Binder(ref data)) => {\n-                    // `'a : 'b` is still true if 'a gets bigger\n-                    self.add_constraints_from_region(generics, data.0, variance);\n-\n-                    // `'a : 'b` is still true if 'b gets smaller\n-                    let variance_r = self.xform(variance, self.contravariant);\n-                    self.add_constraints_from_region(generics, data.1, variance_r);\n-                }\n-\n-                ty::Predicate::Projection(ty::Binder(ref data)) => {\n-                    self.add_constraints_from_trait_ref(generics,\n-                                                        &*data.projection_ty.trait_ref,\n-                                                        variance);\n-\n-                    // as the equality predicate above, a binder is a\n-                    // type equality relation, not a subtyping\n-                    // relation\n-                    self.add_constraints_from_ty(generics, data.ty, self.invariant);\n-                }\n-            }\n-        }\n-    }\n-\n     /// Adds constraints appropriate for a function with signature\n     /// `sig` appearing in a context with ambient variance `variance`\n     fn add_constraints_from_sig(&mut self,"}]}