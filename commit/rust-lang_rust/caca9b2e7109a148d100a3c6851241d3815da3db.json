{"sha": "caca9b2e7109a148d100a3c6851241d3815da3db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhY2E5YjJlNzEwOWExNDhkMTAwYTNjNjg1MTI0MWQzODE1ZGEzZGI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-06T05:59:45Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-06T22:57:52Z"}, "message": "Fallout from stabilization", "tree": {"sha": "b49ae965c7392d0c527aba9c427d4e9e224f8750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49ae965c7392d0c527aba9c427d4e9e224f8750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caca9b2e7109a148d100a3c6851241d3815da3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caca9b2e7109a148d100a3c6851241d3815da3db", "html_url": "https://github.com/rust-lang/rust/commit/caca9b2e7109a148d100a3c6851241d3815da3db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caca9b2e7109a148d100a3c6851241d3815da3db/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f67b81e8d4dc198ad10ad50a7624e43cc1e25802", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67b81e8d4dc198ad10ad50a7624e43cc1e25802", "html_url": "https://github.com/rust-lang/rust/commit/f67b81e8d4dc198ad10ad50a7624e43cc1e25802"}], "stats": {"total": 493, "additions": 245, "deletions": 248}, "files": [{"sha": "18d90dab51a8860bcb77be577fc26ef671912006", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -447,7 +447,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n             loop {\n                 //waiting 1 second for gdbserver start\n                 timer::sleep(Duration::milliseconds(1000));\n-                let result = Thread::spawn(move || {\n+                let result = Thread::scoped(move || {\n                     tcp::TcpStream::connect(\"127.0.0.1:5039\").unwrap();\n                 }).join();\n                 if result.is_err() {"}, {"sha": "fbc96a577a41acc43c237f2d951c53869ff8d544", "filename": "src/doc/intro.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -395,7 +395,7 @@ fn main() {\n     for _ in range(0u, 10u) {\n         Thread::spawn(move || {\n             println!(\"Hello, world!\");\n-        }).detach();\n+        });\n     }\n }\n ```\n@@ -405,8 +405,7 @@ This program creates ten threads, who all print `Hello, world!`. The\n double bars `||`. (The `move` keyword indicates that the closure takes\n ownership of any data it uses; we'll have more on the significance of\n this shortly.) This closure is executed in a new thread created by\n-`spawn`. The `detach` method means that the child thread is allowed to\n-outlive its parent.\n+`spawn`.\n \n One common form of problem in concurrent programs is a 'data race.'\n This occurs when two different threads attempt to access the same\n@@ -429,7 +428,7 @@ fn main() {\n     for i in range(0u, 3u) {\n         Thread::spawn(move || {\n             for j in range(0, 3) { numbers[j] += 1 }\n-        }).detach();\n+        });\n     }\n }\n ```\n@@ -488,7 +487,7 @@ fn main() {\n             (*array)[i] += 1;\n \n             println!(\"numbers[{}] is {}\", i, (*array)[i]);\n-        }).detach();\n+        });\n     }\n }\n ```"}, {"sha": "ac3d2b002123c08ef4f3b20e021c8ae67ddfd0ca", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -42,7 +42,7 @@\n //!\n //!     Thread::spawn(move || {\n //!         println!(\"{}\", five);\n-//!     }).detach();\n+//!     });\n //! }\n //! ```\n //!\n@@ -63,7 +63,7 @@\n //!         *number += 1;\n //!\n //!         println!(\"{}\", *number); // prints 6\n-//!     }).detach();\n+//!     });\n //! }\n //! ```\n \n@@ -106,7 +106,7 @@ use heap::deallocate;\n ///             let local_numbers = child_numbers.as_slice();\n ///\n ///             // Work with the local numbers\n-///         }).detach();\n+///         });\n ///     }\n /// }\n /// ```"}, {"sha": "d628bdc364364a23d7fc914875a23ac13d2489b5", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -924,7 +924,7 @@ mod tests {\n     #[test]\n     fn test_send() {\n         let n = list_from(&[1i,2,3]);\n-        Thread::spawn(move || {\n+        Thread::scoped(move || {\n             check_links(&n);\n             let a: &[_] = &[&1,&2,&3];\n             assert_eq!(a, n.iter().collect::<Vec<&int>>());"}, {"sha": "cc4308b52942085828769ba64e3f64342f5ccbc9", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -50,7 +50,7 @@\n //!     let spinlock_clone = spinlock.clone();\n //!     Thread::spawn(move|| {\n //!         spinlock_clone.store(0, Ordering::SeqCst);\n-//!     }).detach();\n+//!     });\n //!\n //!     // Wait for the other task to release the lock\n //!     while spinlock.load(Ordering::SeqCst) != 0 {}"}, {"sha": "ef78da3fd0e9773758565d5624dba1cbef16e381", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -559,7 +559,7 @@ pub fn monitor<F:FnOnce()+Send>(f: F) {\n         cfg = cfg.stack_size(STACK_SIZE);\n     }\n \n-    match cfg.spawn(move || { std::io::stdio::set_stderr(box w); f() }).join() {\n+    match cfg.scoped(move || { std::io::stdio::set_stderr(box w); f() }).join() {\n         Ok(()) => { /* fallthrough */ }\n         Err(value) => {\n             // Thread panicked without emitting a fatal diagnostic"}, {"sha": "aa82950257e7c66c69daa52866c3fe81fd09308a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -928,7 +928,7 @@ fn run_work_multithreaded(sess: &Session,\n             }\n \n             tx.take().unwrap().send(()).unwrap();\n-        }).detach();\n+        });\n     }\n \n     let mut panicked = false;"}, {"sha": "c3a5a9e6dc9d7e31ba7273491c0aa7ffb74da067", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -116,7 +116,7 @@ struct Output {\n \n pub fn main() {\n     static STACK_SIZE: uint = 32000000; // 32MB\n-    let res = std::thread::Builder::new().stack_size(STACK_SIZE).spawn(move || {\n+    let res = std::thread::Builder::new().stack_size(STACK_SIZE).scoped(move || {\n         main_args(std::os::args().as_slice())\n     }).join();\n     std::os::set_exit_status(res.map_err(|_| ()).unwrap());\n@@ -358,7 +358,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     let cr = Path::new(cratefile);\n     info!(\"starting to run rustc\");\n \n-    let (mut krate, analysis) = std::thread::Thread::spawn(move |:| {\n+    let (mut krate, analysis) = std::thread::Thread::scoped(move |:| {\n         let cr = cr;\n         core::run_core(paths, cfgs, externs, &cr, triple)\n     }).join().map_err(|_| \"rustc failed\").unwrap();"}, {"sha": "278260fd3e6b7ae8a0f26d5c26dff8ccd0753e1f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -157,7 +157,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n             None => box io::stderr() as Box<Writer>,\n         };\n         io::util::copy(&mut p, &mut err).unwrap();\n-    }).detach();\n+    });\n     let emitter = diagnostic::EmitterWriter::new(box w2, None);\n \n     // Compile the code"}, {"sha": "9ccede09cfc94d6ae03edec32a373260ae0b526e", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -172,7 +172,7 @@ mod test {\n           tx.send(vec![3u8, 4u8]).unwrap();\n           tx.send(vec![5u8, 6u8]).unwrap();\n           tx.send(vec![7u8, 8u8]).unwrap();\n-        }).detach();\n+        });\n \n         let mut reader = ChanReader::new(rx);\n         let mut buf = [0u8; 3];\n@@ -215,7 +215,7 @@ mod test {\n           tx.send(b\"rld\\nhow \".to_vec()).unwrap();\n           tx.send(b\"are you?\".to_vec()).unwrap();\n           tx.send(b\"\".to_vec()).unwrap();\n-        }).detach();\n+        });\n \n         let mut reader = ChanReader::new(rx);\n \n@@ -234,7 +234,7 @@ mod test {\n         writer.write_be_u32(42).unwrap();\n \n         let wanted = vec![0u8, 0u8, 0u8, 42u8];\n-        let got = match Thread::spawn(move|| { rx.recv().unwrap() }).join() {\n+        let got = match Thread::scoped(move|| { rx.recv().unwrap() }).join() {\n             Ok(got) => got,\n             Err(_) => panic!(),\n         };"}, {"sha": "46c59ec49c19055ee18aaa4ea4deec094ca9b429", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -120,10 +120,12 @@\n //!     for stream in acceptor.incoming() {\n //!         match stream {\n //!             Err(e) => { /* connection failed */ }\n-//!             Ok(stream) => Thread::spawn(move|| {\n-//!                 // connection succeeded\n-//!                 handle_client(stream)\n-//!             }).detach()\n+//!             Ok(stream) => {\n+//!                 Thread::spawn(move|| {\n+//!                     // connection succeeded\n+//!                     handle_client(stream)\n+//!                 });\n+//!             }\n //!         }\n //!     }\n //!"}, {"sha": "29295b5751cd4c92aec5c684ac8b8106d057a9d6", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -608,7 +608,7 @@ mod tests {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut b = [0];\n         let mut s = UnixStream::connect(&addr).unwrap();\n@@ -645,7 +645,7 @@ mod tests {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = UnixStream::connect(&addr).unwrap();\n         let s2 = s.clone();\n@@ -672,7 +672,7 @@ mod tests {\n             rx.recv().unwrap();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         s.set_timeout(Some(20));\n@@ -716,7 +716,7 @@ mod tests {\n                 }\n             }\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         s.set_read_timeout(Some(20));\n@@ -739,7 +739,7 @@ mod tests {\n             rx.recv().unwrap();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n@@ -766,7 +766,7 @@ mod tests {\n             rx.recv().unwrap();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         let s2 = s.clone();"}, {"sha": "b1762ff26fc6a9faf2bec7403568edf68597c96f", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -146,7 +146,7 @@ impl TcpStream {\n     ///     timer::sleep(Duration::seconds(1));\n     ///     let mut stream = stream2;\n     ///     stream.close_read();\n-    /// }).detach();\n+    /// });\n     ///\n     /// // wait for some data, will get canceled after one second\n     /// let mut buf = [0];\n@@ -295,10 +295,12 @@ impl sys_common::AsInner<TcpStreamImp> for TcpStream {\n /// for stream in acceptor.incoming() {\n ///     match stream {\n ///         Err(e) => { /* connection failed */ }\n-///         Ok(stream) => Thread::spawn(move|| {\n-///             // connection succeeded\n-///             handle_client(stream)\n-///         }).detach()\n+///         Ok(stream) => {\n+///             Thread::spawn(move|| {\n+///                 // connection succeeded\n+///                 handle_client(stream)\n+///             });\n+///         }\n ///     }\n /// }\n ///\n@@ -432,7 +434,7 @@ impl TcpAcceptor {\n     ///             Err(e) => panic!(\"unexpected error: {}\", e),\n     ///         }\n     ///     }\n-    /// }).detach();\n+    /// });\n     ///\n     /// # fn wait_for_sigint() {}\n     /// // Now that our accept loop is running, wait for the program to be\n@@ -1186,7 +1188,7 @@ mod test {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv().unwrap();\n-        }).detach();\n+        });\n \n         let mut b = [0];\n         let mut s = TcpStream::connect(addr).unwrap();\n@@ -1223,7 +1225,7 @@ mod test {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv().unwrap();\n-        }).detach();\n+        });\n \n         let mut s = TcpStream::connect(addr).unwrap();\n         let s2 = s.clone();\n@@ -1250,7 +1252,7 @@ mod test {\n             rx.recv().unwrap();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         s.set_timeout(Some(20));\n@@ -1289,7 +1291,7 @@ mod test {\n                 }\n             }\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         s.set_read_timeout(Some(20));\n@@ -1312,7 +1314,7 @@ mod test {\n             rx.recv().unwrap();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n@@ -1340,7 +1342,7 @@ mod test {\n             rx.recv().unwrap();\n             assert_eq!(s.write(&[0]), Ok(()));\n             let _ = rx.recv();\n-        }).detach();\n+        });\n \n         let mut s = a.accept().unwrap();\n         let s2 = s.clone();"}, {"sha": "d7452180ffa6466aeca440cd924bcfaa602bd3f8", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -705,7 +705,7 @@ impl Process {\n                     Thread::spawn(move |:| {\n                         let mut stream = stream;\n                         tx.send(stream.read_to_end()).unwrap();\n-                    }).detach();\n+                    });\n                 }\n                 None => tx.send(Ok(Vec::new())).unwrap()\n             }"}, {"sha": "8a0445be47135775ba1483c0371457c231785eed", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -358,7 +358,7 @@ mod test {\n \n         Thread::spawn(move|| {\n             let _ = timer_rx.recv();\n-        }).detach();\n+        });\n \n         // when we drop the TimerWatcher we're going to destroy the channel,\n         // which must wake up the task on the other end\n@@ -372,7 +372,7 @@ mod test {\n \n         Thread::spawn(move|| {\n             let _ = timer_rx.recv();\n-        }).detach();\n+        });\n \n         timer.oneshot(Duration::milliseconds(1));\n     }\n@@ -385,7 +385,7 @@ mod test {\n \n         Thread::spawn(move|| {\n             let _ = timer_rx.recv();\n-        }).detach();\n+        });\n \n         timer.sleep(Duration::milliseconds(1));\n     }"}, {"sha": "092430bf082d3fa6b703ee39253dca41ba06b563", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -303,8 +303,8 @@ macro_rules! try {\n /// # fn long_running_task() {}\n /// # fn calculate_the_answer() -> int { 42i }\n ///\n-/// Thread::spawn(move|| { long_running_task(); tx1.send(()) }).detach();\n-/// Thread::spawn(move|| { tx2.send(calculate_the_answer()) }).detach();\n+/// Thread::spawn(move|| { long_running_task(); tx1.send(()).unwrap(); });\n+/// Thread::spawn(move|| { tx2.send(calculate_the_answer()).unwrap(); });\n ///\n /// select! (\n ///     _ = rx1.recv() => println!(\"the long running task finished first\"),"}, {"sha": "ece9a343841231f757e5e0fc8e8063570c2f478c", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -502,17 +502,17 @@ mod tests {\n     #[test]\n     fn test_null_byte() {\n         use thread::Thread;\n-        let result = Thread::spawn(move|| {\n+        let result = Thread::scoped(move|| {\n             Path::new(b\"foo/bar\\0\")\n         }).join();\n         assert!(result.is_err());\n \n-        let result = Thread::spawn(move|| {\n+        let result = Thread::scoped(move|| {\n             Path::new(\"test\").set_filename(b\"f\\0o\")\n         }).join();\n         assert!(result.is_err());\n \n-        let result = Thread::spawn(move|| {\n+        let result = Thread::scoped(move|| {\n             Path::new(\"test\").push(b\"f\\0o\");\n         }).join();\n         assert!(result.is_err());"}, {"sha": "db3224e66e4130d592ecc6724e9b07f7982493a4", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -1287,17 +1287,17 @@ mod tests {\n     #[test]\n     fn test_null_byte() {\n         use thread::Thread;\n-        let result = Thread::spawn(move|| {\n+        let result = Thread::scoped(move|| {\n             Path::new(b\"foo/bar\\0\")\n         }).join();\n         assert!(result.is_err());\n \n-        let result = Thread::spawn(move|| {\n+        let result = Thread::scoped(move|| {\n             Path::new(\"test\").set_filename(b\"f\\0o\")\n         }).join();\n         assert!(result.is_err());\n \n-        let result = Thread::spawn(move || {\n+        let result = Thread::scoped(move || {\n             Path::new(\"test\").push(b\"f\\0o\");\n         }).join();\n         assert!(result.is_err());"}, {"sha": "d9c019e3aced8a400dee3fffe21097089092e0c8", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -397,7 +397,7 @@ mod test {\n                     r.fill_bytes(&mut v);\n                     Thread::yield_now();\n                 }\n-            }).detach();\n+            });\n         }\n \n         // start all the tasks"}, {"sha": "709398794003869abb034616fdc6fa793d98b64b", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -26,7 +26,7 @@ use sync::{Mutex, Condvar};\n ///         println!(\"before wait\");\n ///         c.wait();\n ///         println!(\"after wait\");\n-///     }).detach();\n+///     });\n /// }\n /// ```\n #[stable]\n@@ -126,7 +126,7 @@ mod tests {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 tx.send(c.wait().is_leader()).unwrap();\n-            }).detach();\n+            });\n         }\n \n         // At this point, all spawned tasks should be blocked,"}, {"sha": "3c0ae71255dbe39632a8485ee04836e793bf832d", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -48,7 +48,7 @@ use sync::{mutex, MutexGuard};\n ///     let mut started = lock.lock().unwrap();\n ///     *started = true;\n ///     cvar.notify_one();\n-/// }).detach();\n+/// });\n ///\n /// // wait for the thread to start up\n /// let &(ref lock, ref cvar) = &*pair;\n@@ -338,7 +338,7 @@ mod tests {\n                     cnt = cond.wait(cnt).unwrap();\n                 }\n                 tx.send(()).unwrap();\n-            }).detach();\n+            });\n         }\n         drop(tx);\n "}, {"sha": "568c24446e7a34d9c9059fa302689054913ce221", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -141,7 +141,7 @@ impl<A:Send> Future<A> {\n         Thread::spawn(move |:| {\n             // Don't panic if the other end has hung up\n             let _ = tx.send(blk());\n-        }).detach();\n+        });\n \n         Future::from_receiver(rx)\n     }"}, {"sha": "72c453f7f71c29bf94dcf6dea0a1d08eb0f12a3c", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -60,7 +60,7 @@\n //! let (tx, rx) = channel();\n //! Thread::spawn(move|| {\n //!     tx.send(10i).unwrap();\n-//! }).detach();\n+//! });\n //! assert_eq!(rx.recv().unwrap(), 10i);\n //! ```\n //!\n@@ -78,7 +78,7 @@\n //!     let tx = tx.clone();\n //!     Thread::spawn(move|| {\n //!         tx.send(i).unwrap();\n-//!     }).detach()\n+//!     });\n //! }\n //!\n //! for _ in range(0i, 10i) {\n@@ -109,7 +109,7 @@\n //! Thread::spawn(move|| {\n //!     // This will wait for the parent task to start receiving\n //!     tx.send(53).unwrap();\n-//! }).detach();\n+//! });\n //! rx.recv().unwrap();\n //! ```\n //!\n@@ -476,7 +476,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// Thread::spawn(move|| {\n /// #   fn expensive_computation() {}\n ///     tx.send(expensive_computation()).unwrap();\n-/// }).detach();\n+/// });\n ///\n /// // Do some useful work for awhile\n ///\n@@ -518,7 +518,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// Thread::spawn(move|| {\n ///     // this will block until the previous message has been received\n ///     tx.send(2i).unwrap();\n-/// }).detach();\n+/// });\n ///\n /// assert_eq!(rx.recv().unwrap(), 1i);\n /// assert_eq!(rx.recv().unwrap(), 2i);\n@@ -1144,7 +1144,7 @@ mod test {\n     #[test]\n     fn stress() {\n         let (tx, rx) = channel::<int>();\n-        let t = Thread::spawn(move|| {\n+        let t = Thread::scoped(move|| {\n             for _ in range(0u, 10000) { tx.send(1i).unwrap(); }\n         });\n         for _ in range(0u, 10000) {\n@@ -1159,7 +1159,7 @@ mod test {\n         static NTHREADS: uint = 8;\n         let (tx, rx) = channel::<int>();\n \n-        let t = Thread::spawn(move|| {\n+        let t = Thread::scoped(move|| {\n             for _ in range(0, AMT * NTHREADS) {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n@@ -1173,7 +1173,7 @@ mod test {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 for _ in range(0, AMT) { tx.send(1).unwrap(); }\n-            }).detach();\n+            });\n         }\n         drop(tx);\n         t.join().ok().unwrap();\n@@ -1183,14 +1183,14 @@ mod test {\n     fn send_from_outside_runtime() {\n         let (tx1, rx1) = channel::<()>();\n         let (tx2, rx2) = channel::<int>();\n-        let t1 = Thread::spawn(move|| {\n+        let t1 = Thread::scoped(move|| {\n             tx1.send(()).unwrap();\n             for _ in range(0i, 40) {\n                 assert_eq!(rx2.recv().unwrap(), 1);\n             }\n         });\n         rx1.recv().unwrap();\n-        let t2 = Thread::spawn(move|| {\n+        let t2 = Thread::scoped(move|| {\n             for _ in range(0i, 40) {\n                 tx2.send(1).unwrap();\n             }\n@@ -1202,7 +1202,7 @@ mod test {\n     #[test]\n     fn recv_from_outside_runtime() {\n         let (tx, rx) = channel::<int>();\n-        let t = Thread::spawn(move|| {\n+        let t = Thread::scoped(move|| {\n             for _ in range(0i, 40) {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n@@ -1217,11 +1217,11 @@ mod test {\n     fn no_runtime() {\n         let (tx1, rx1) = channel::<int>();\n         let (tx2, rx2) = channel::<int>();\n-        let t1 = Thread::spawn(move|| {\n+        let t1 = Thread::scoped(move|| {\n             assert_eq!(rx1.recv().unwrap(), 1);\n             tx2.send(2).unwrap();\n         });\n-        let t2 = Thread::spawn(move|| {\n+        let t2 = Thread::scoped(move|| {\n             tx1.send(1).unwrap();\n             assert_eq!(rx2.recv().unwrap(), 2);\n         });\n@@ -1254,7 +1254,7 @@ mod test {\n     #[test]\n     fn oneshot_single_thread_recv_chan_close() {\n         // Receiving on a closed chan will panic\n-        let res = Thread::spawn(move|| {\n+        let res = Thread::scoped(move|| {\n             let (tx, rx) = channel::<int>();\n             drop(tx);\n             rx.recv().unwrap();\n@@ -1336,7 +1336,7 @@ mod test {\n         let _t = Thread::spawn(move|| {\n             drop(tx);\n         });\n-        let res = Thread::spawn(move|| {\n+        let res = Thread::scoped(move|| {\n             assert!(rx.recv().unwrap() == box 10);\n         }).join();\n         assert!(res.is_err());\n@@ -1360,7 +1360,7 @@ mod test {\n             let _t = Thread::spawn(move|| {\n                 drop(rx);\n             });\n-            let _ = Thread::spawn(move|| {\n+            let _ = Thread::scoped(move|| {\n                 tx.send(1).unwrap();\n             }).join();\n         }\n@@ -1371,15 +1371,15 @@ mod test {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = channel::<int>();\n             Thread::spawn(move|| {\n-                let res = Thread::spawn(move|| {\n+                let res = Thread::scoped(move|| {\n                     rx.recv().unwrap();\n                 }).join();\n                 assert!(res.is_err());\n-            }).detach();\n+            });\n             let _t = Thread::spawn(move|| {\n                 Thread::spawn(move|| {\n                     drop(tx);\n-                }).detach();\n+                });\n             });\n         }\n     }\n@@ -1409,7 +1409,7 @@ mod test {\n                 Thread::spawn(move|| {\n                     tx.send(box i).unwrap();\n                     send(tx, i + 1);\n-                }).detach();\n+                });\n             }\n \n             fn recv(rx: Receiver<Box<int>>, i: int) {\n@@ -1418,7 +1418,7 @@ mod test {\n                 Thread::spawn(move|| {\n                     assert!(rx.recv().unwrap() == box i);\n                     recv(rx, i + 1);\n-                }).detach();\n+                });\n             }\n         }\n     }\n@@ -1439,7 +1439,7 @@ mod test {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 tx.send(()).unwrap();\n-            }).detach();\n+            });\n         }\n \n         for _ in range(0, total) {\n@@ -1644,7 +1644,7 @@ mod sync_tests {\n         Thread::spawn(move|| {\n             tx.send(1).unwrap();\n             tx.send(1).unwrap();\n-        }).detach();\n+        });\n         while rx.recv().is_ok() {}\n     }\n \n@@ -1653,7 +1653,7 @@ mod sync_tests {\n         let (tx, rx) = sync_channel::<int>(0);\n         Thread::spawn(move|| {\n             for _ in range(0u, 10000) { tx.send(1).unwrap(); }\n-        }).detach();\n+        });\n         for _ in range(0u, 10000) {\n             assert_eq!(rx.recv().unwrap(), 1);\n         }\n@@ -1675,13 +1675,13 @@ mod sync_tests {\n                 _ => {}\n             }\n             dtx.send(()).unwrap();\n-        }).detach();\n+        });\n \n         for _ in range(0, NTHREADS) {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 for _ in range(0, AMT) { tx.send(1).unwrap(); }\n-            }).detach();\n+            });\n         }\n         drop(tx);\n         drx.recv().unwrap();\n@@ -1712,7 +1712,7 @@ mod sync_tests {\n     #[test]\n     fn oneshot_single_thread_recv_chan_close() {\n         // Receiving on a closed chan will panic\n-        let res = Thread::spawn(move|| {\n+        let res = Thread::scoped(move|| {\n             let (tx, rx) = sync_channel::<int>(0);\n             drop(tx);\n             rx.recv().unwrap();\n@@ -1800,7 +1800,7 @@ mod sync_tests {\n         let _t = Thread::spawn(move|| {\n             drop(tx);\n         });\n-        let res = Thread::spawn(move|| {\n+        let res = Thread::scoped(move|| {\n             assert!(rx.recv().unwrap() == box 10);\n         }).join();\n         assert!(res.is_err());\n@@ -1824,7 +1824,7 @@ mod sync_tests {\n             let _t = Thread::spawn(move|| {\n                 drop(rx);\n             });\n-            let _ = Thread::spawn(move || {\n+            let _ = Thread::scoped(move || {\n                 tx.send(1).unwrap();\n             }).join();\n         }\n@@ -1835,15 +1835,15 @@ mod sync_tests {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = sync_channel::<int>(0);\n             let _t = Thread::spawn(move|| {\n-                let res = Thread::spawn(move|| {\n+                let res = Thread::scoped(move|| {\n                     rx.recv().unwrap();\n                 }).join();\n                 assert!(res.is_err());\n             });\n             let _t = Thread::spawn(move|| {\n                 Thread::spawn(move|| {\n                     drop(tx);\n-                }).detach();\n+                });\n             });\n         }\n     }\n@@ -1873,7 +1873,7 @@ mod sync_tests {\n                 Thread::spawn(move|| {\n                     tx.send(box i).unwrap();\n                     send(tx, i + 1);\n-                }).detach();\n+                });\n             }\n \n             fn recv(rx: Receiver<Box<int>>, i: int) {\n@@ -1882,7 +1882,7 @@ mod sync_tests {\n                 Thread::spawn(move|| {\n                     assert!(rx.recv().unwrap() == box i);\n                     recv(rx, i + 1);\n-                }).detach();\n+                });\n             }\n         }\n     }\n@@ -1903,7 +1903,7 @@ mod sync_tests {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 tx.send(()).unwrap();\n-            }).detach();\n+            });\n         }\n \n         for _ in range(0, total) {"}, {"sha": "f8eae1322bf1f7b9bbeb5e2c6b38d870d6c1a018", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -188,7 +188,7 @@ mod tests {\n                     q.push(i);\n                 }\n                 tx.send(()).unwrap();\n-            }).detach();\n+            });\n         }\n \n         let mut i = 0u;"}, {"sha": "6eef428f558aa93aedc3fadc1d3569a1c51e06f2", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -75,7 +75,7 @@ use sys_common::mutex as sys;\n ///             tx.send(()).unwrap();\n ///         }\n ///         // the lock is unlocked here when `data` goes out of scope.\n-///     }).detach();\n+///     });\n /// }\n ///\n /// rx.recv().unwrap();\n@@ -90,7 +90,7 @@ use sys_common::mutex as sys;\n /// let lock = Arc::new(Mutex::new(0u));\n /// let lock2 = lock.clone();\n ///\n-/// let _ = Thread::spawn(move || -> () {\n+/// let _ = Thread::scoped(move || -> () {\n ///     // This thread will acquire the mutex first, unwrapping the result of\n ///     // `lock` because the lock has not been poisoned.\n ///     let _lock = lock2.lock().unwrap();\n@@ -376,9 +376,9 @@ mod test {\n         let (tx, rx) = channel();\n         for _ in range(0, K) {\n             let tx2 = tx.clone();\n-            Thread::spawn(move|| { inc(); tx2.send(()).unwrap(); }).detach();\n+            Thread::spawn(move|| { inc(); tx2.send(()).unwrap(); });\n             let tx2 = tx.clone();\n-            Thread::spawn(move|| { inc(); tx2.send(()).unwrap(); }).detach();\n+            Thread::spawn(move|| { inc(); tx2.send(()).unwrap(); });\n         }\n \n         drop(tx);\n@@ -453,7 +453,7 @@ mod test {\n     fn test_mutex_arc_poison() {\n         let arc = Arc::new(Mutex::new(1i));\n         let arc2 = arc.clone();\n-        let _ = Thread::spawn(move|| {\n+        let _ = Thread::scoped(move|| {\n             let lock = arc2.lock().unwrap();\n             assert_eq!(*lock, 2);\n         }).join();\n@@ -480,7 +480,7 @@ mod test {\n     fn test_mutex_arc_access_in_unwind() {\n         let arc = Arc::new(Mutex::new(1i));\n         let arc2 = arc.clone();\n-        let _ = Thread::spawn(move|| -> () {\n+        let _ = Thread::scoped(move|| -> () {\n             struct Unwinder {\n                 i: Arc<Mutex<int>>,\n             }"}, {"sha": "b32faf2d03f14d4966b7aa6bfbc24fc4c631499b", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -159,7 +159,7 @@ mod test {\n                     assert!(run);\n                 }\n                 tx.send(()).unwrap();\n-            }).detach();\n+            });\n         }\n \n         unsafe {"}, {"sha": "00b783d9661156940ff75da288070dc5756373f9", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -411,7 +411,7 @@ mod tests {\n                     }\n                 }\n                 drop(tx);\n-            }).detach();\n+            });\n         }\n         drop(tx);\n         let _ = rx.recv();\n@@ -422,7 +422,7 @@ mod tests {\n     fn test_rw_arc_poison_wr() {\n         let arc = Arc::new(RwLock::new(1i));\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = Thread::spawn(move|| {\n+        let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.write().unwrap();\n             panic!();\n         }).join();\n@@ -433,7 +433,7 @@ mod tests {\n     fn test_rw_arc_poison_ww() {\n         let arc = Arc::new(RwLock::new(1i));\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = Thread::spawn(move|| {\n+        let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.write().unwrap();\n             panic!();\n         }).join();\n@@ -444,7 +444,7 @@ mod tests {\n     fn test_rw_arc_no_poison_rr() {\n         let arc = Arc::new(RwLock::new(1i));\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = Thread::spawn(move|| {\n+        let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.read().unwrap();\n             panic!();\n         }).join();\n@@ -455,7 +455,7 @@ mod tests {\n     fn test_rw_arc_no_poison_rw() {\n         let arc = Arc::new(RwLock::new(1i));\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = Thread::spawn(move|| {\n+        let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.read().unwrap();\n             panic!()\n         }).join();\n@@ -478,13 +478,13 @@ mod tests {\n                 *lock = tmp + 1;\n             }\n             tx.send(()).unwrap();\n-        }).detach();\n+        });\n \n         // Readers try to catch the writer in the act\n         let mut children = Vec::new();\n         for _ in range(0u, 5) {\n             let arc3 = arc.clone();\n-            children.push(Thread::spawn(move|| {\n+            children.push(Thread::scoped(move|| {\n                 let lock = arc3.read().unwrap();\n                 assert!(*lock >= 0);\n             }));\n@@ -505,7 +505,7 @@ mod tests {\n     fn test_rw_arc_access_in_unwind() {\n         let arc = Arc::new(RwLock::new(1i));\n         let arc2 = arc.clone();\n-        let _ = Thread::spawn(move|| -> () {\n+        let _ = Thread::scoped(move|| -> () {\n             struct Unwinder {\n                 i: Arc<RwLock<int>>,\n             }"}, {"sha": "8d44084671aad2c61c3a77ad42b8021ec5606aaf", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -193,7 +193,7 @@ mod tests {\n                 tx.send(()).unwrap();\n                 drop(s2.access());\n                 tx.send(()).unwrap();\n-            }).detach();\n+            });\n             rx.recv().unwrap(); // wait for child to come alive\n         }\n         rx.recv().unwrap(); // wait for child to be done"}, {"sha": "278528bdb388bd711c747be4143e338104702c8b", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -132,7 +132,7 @@ fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk>>>) {\n         }\n \n         sentinel.cancel();\n-    }).detach();\n+    });\n }\n \n #[cfg(test)]"}, {"sha": "f940b6ed3682e5253257d5fbd433cfc5e894b4a0", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -99,7 +99,7 @@ impl<M: Send> Helper<M> {\n                     let _g = self.lock.lock().unwrap();\n                     *self.shutdown.get() = true;\n                     self.cond.notify_one()\n-                }).detach();\n+                });\n \n                 rt::at_exit(move|:| { self.shutdown() });\n                 *self.initialized.get() = true;"}, {"sha": "5153b6b90a79f063f53d6bbef966cac06a92ede9", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -332,9 +332,6 @@ pub struct Thread {\n     inner: Arc<Inner>,\n }\n \n-#[stable]\n-unsafe impl Sync for Thread {}\n-\n impl Thread {\n     // Used only internally to construct a thread object without spawning\n     fn new(name: Option<String>) -> Thread {\n@@ -520,14 +517,14 @@ mod test {\n \n     #[test]\n     fn test_unnamed_thread() {\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             assert!(Thread::current().name().is_none());\n         }).join().map_err(|_| ()).unwrap();\n     }\n \n     #[test]\n     fn test_named_thread() {\n-        Builder::new().name(\"ada lovelace\".to_string()).spawn(move|| {\n+        Builder::new().name(\"ada lovelace\".to_string()).scoped(move|| {\n             assert!(Thread::current().name().unwrap() == \"ada lovelace\".to_string());\n         }).join().map_err(|_| ()).unwrap();\n     }\n@@ -537,13 +534,13 @@ mod test {\n         let (tx, rx) = channel();\n         Thread::spawn(move|| {\n             tx.send(()).unwrap();\n-        }).detach();\n+        });\n         rx.recv().unwrap();\n     }\n \n     #[test]\n     fn test_join_success() {\n-        match Thread::spawn(move|| -> String {\n+        match Thread::scoped(move|| -> String {\n             \"Success!\".to_string()\n         }).join().as_ref().map(|s| s.as_slice()) {\n             result::Result::Ok(\"Success!\") => (),\n@@ -553,7 +550,7 @@ mod test {\n \n     #[test]\n     fn test_join_panic() {\n-        match Thread::spawn(move|| {\n+        match Thread::scoped(move|| {\n             panic!()\n         }).join() {\n             result::Result::Err(_) => (),\n@@ -575,7 +572,7 @@ mod test {\n                 } else {\n                     f(i - 1, tx);\n                 }\n-            }).detach();\n+            });\n \n         }\n         f(10, tx);\n@@ -589,8 +586,8 @@ mod test {\n         Thread::spawn(move|| {\n             Thread::spawn(move|| {\n                 tx.send(()).unwrap();\n-            }).detach();\n-        }).detach();\n+            });\n+        });\n \n         rx.recv().unwrap();\n     }\n@@ -613,7 +610,7 @@ mod test {\n     #[test]\n     fn test_avoid_copying_the_body_spawn() {\n         avoid_copying_the_body(|v| {\n-            Thread::spawn(move || v.invoke(())).detach();\n+            Thread::spawn(move || v.invoke(()));\n         });\n     }\n \n@@ -622,14 +619,14 @@ mod test {\n         avoid_copying_the_body(|f| {\n             Thread::spawn(move|| {\n                 f.invoke(());\n-            }).detach();\n+            });\n         })\n     }\n \n     #[test]\n     fn test_avoid_copying_the_body_join() {\n         avoid_copying_the_body(|f| {\n-            let _ = Thread::spawn(move|| {\n+            let _ = Thread::scoped(move|| {\n                 f.invoke(())\n             }).join();\n         })\n@@ -645,21 +642,21 @@ mod test {\n         fn child_no(x: uint) -> Thunk {\n             return Thunk::new(move|| {\n                 if x < GENERATIONS {\n-                    Thread::spawn(move|| child_no(x+1).invoke(())).detach();\n+                    Thread::spawn(move|| child_no(x+1).invoke(()));\n                 }\n             });\n         }\n-        Thread::spawn(|| child_no(0).invoke(())).detach();\n+        Thread::spawn(|| child_no(0).invoke(()));\n     }\n \n     #[test]\n     fn test_simple_newsched_spawn() {\n-        Thread::spawn(move || {}).detach();\n+        Thread::spawn(move || {});\n     }\n \n     #[test]\n     fn test_try_panic_message_static_str() {\n-        match Thread::spawn(move|| {\n+        match Thread::scoped(move|| {\n             panic!(\"static string\");\n         }).join() {\n             Err(e) => {\n@@ -673,7 +670,7 @@ mod test {\n \n     #[test]\n     fn test_try_panic_message_owned_str() {\n-        match Thread::spawn(move|| {\n+        match Thread::scoped(move|| {\n             panic!(\"owned string\".to_string());\n         }).join() {\n             Err(e) => {\n@@ -687,7 +684,7 @@ mod test {\n \n     #[test]\n     fn test_try_panic_message_any() {\n-        match Thread::spawn(move|| {\n+        match Thread::scoped(move|| {\n             panic!(box 413u16 as Box<Any + Send>);\n         }).join() {\n             Err(e) => {\n@@ -705,7 +702,7 @@ mod test {\n     fn test_try_panic_message_unit_struct() {\n         struct Juju;\n \n-        match Thread::spawn(move|| {\n+        match Thread::scoped(move|| {\n             panic!(Juju)\n         }).join() {\n             Err(ref e) if e.is::<Juju>() => {}\n@@ -719,7 +716,7 @@ mod test {\n         let mut reader = ChanReader::new(rx);\n         let stdout = ChanWriter::new(tx);\n \n-        let r = Builder::new().stdout(box stdout as Box<Writer + Send>).spawn(move|| {\n+        let r = Builder::new().stdout(box stdout as Box<Writer + Send>).scoped(move|| {\n             print!(\"Hello, world!\");\n         }).join();\n         assert!(r.is_ok());"}, {"sha": "c8cad7765e690c72842a29b8c41de21c81b37c60", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -87,7 +87,7 @@ pub mod __impl {\n ///         assert_eq!(*f.borrow(), 1);\n ///         *f.borrow_mut() = 3;\n ///     });\n-/// }).detach();\n+/// });\n ///\n /// // we retain our original value of 2 despite the child thread\n /// FOO.with(|f| {\n@@ -581,7 +581,7 @@ mod tests {\n         }\n         thread_local!(static FOO: Foo = foo());\n \n-        Thread::spawn(|| {\n+        Thread::scoped(|| {\n             assert!(FOO.state() == State::Uninitialized);\n             FOO.with(|_| {\n                 assert!(FOO.state() == State::Valid);\n@@ -645,7 +645,7 @@ mod tests {\n             }\n         }\n \n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             drop(S1);\n         }).join().ok().unwrap();\n     }\n@@ -663,7 +663,7 @@ mod tests {\n             }\n         }\n \n-        Thread::spawn(move|| unsafe {\n+        Thread::scoped(move|| unsafe {\n             K1.with(|s| *s.get() = Some(S1));\n         }).join().ok().unwrap();\n     }"}, {"sha": "6d55848a5839f87006b4e45171b399ef1624bb96", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -1137,11 +1137,11 @@ pub fn run_test(opts: &TestOpts,\n                 cfg = cfg.stderr(box stderr as Box<Writer + Send>);\n             }\n \n-            let result_guard = cfg.spawn(move || { testfn.invoke(()) });\n+            let result_guard = cfg.scoped(move || { testfn.invoke(()) });\n             let stdout = reader.read_to_end().unwrap().into_iter().collect();\n             let test_result = calc_result(&desc, result_guard.join());\n             monitor_ch.send((desc.clone(), test_result, stdout)).unwrap();\n-        }).detach();\n+        });\n     }\n \n     match testfn {"}, {"sha": "673c38697b79cbf10644f7b8ecc8f97b1b318348", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -15,6 +15,6 @@ pub fn foo<T:Send + Clone>(x: T) -> Receiver<T> {\n     let (tx, rx) = channel();\n     Thread::spawn(move|| {\n         tx.send(x.clone());\n-    }).detach();\n+    });\n     rx\n }"}, {"sha": "387601de8284c0116054edbf6ab555eb270e00c9", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -64,7 +64,7 @@ fn run(args: &[String]) {\n         let mut worker_results = Vec::new();\n         for _ in range(0u, workers) {\n             let to_child = to_child.clone();\n-            worker_results.push(Thread::spawn(move|| {\n+            worker_results.push(Thread::scoped(move|| {\n                 for _ in range(0u, size / workers) {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes)).unwrap();\n@@ -74,7 +74,7 @@ fn run(args: &[String]) {\n         }\n         Thread::spawn(move|| {\n             server(&from_parent, &to_parent);\n-        }).detach();\n+        });\n \n         for r in worker_results.into_iter() {\n             let _ = r.join();"}, {"sha": "d6d01e5452b95d631f751639c745f1c5d6b5b7a6", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -59,7 +59,7 @@ fn run(args: &[String]) {\n         let mut worker_results = Vec::new();\n         let from_parent = if workers == 1 {\n             let (to_child, from_parent) = channel();\n-            worker_results.push(Thread::spawn(move|| {\n+            worker_results.push(Thread::scoped(move|| {\n                 for _ in range(0u, size / workers) {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes));\n@@ -71,7 +71,7 @@ fn run(args: &[String]) {\n             let (to_child, from_parent) = channel();\n             for _ in range(0u, workers) {\n                 let to_child = to_child.clone();\n-                worker_results.push(Thread::spawn(move|| {\n+                worker_results.push(Thread::scoped(move|| {\n                     for _ in range(0u, size / workers) {\n                         //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                         to_child.send(request::bytes(num_bytes));\n@@ -83,7 +83,7 @@ fn run(args: &[String]) {\n         };\n         Thread::spawn(move|| {\n             server(&from_parent, &to_parent);\n-        }).detach();\n+        });\n \n         for r in worker_results.into_iter() {\n             let _ = r.join();"}, {"sha": "b854dc11b988abd910304495390132e6591fa611", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -35,15 +35,15 @@ fn ping_pong_bench(n: uint, m: uint) {\n         // Create a channel: B->A\n         let (btx, brx) = channel();\n \n-        let guard_a = Thread::spawn(move|| {\n+        let guard_a = Thread::scoped(move|| {\n             let (tx, rx) = (atx, brx);\n             for _ in range(0, n) {\n                 tx.send(()).unwrap();\n                 rx.recv().unwrap();\n             }\n         });\n \n-        let guard_b = Thread::spawn(move|| {\n+        let guard_b = Thread::scoped(move|| {\n             let (tx, rx) = (btx, arx);\n             for _ in range(0, n) {\n                 rx.recv().unwrap();"}, {"sha": "37210cd93f1b319b05e57af130477ea6d2f19b1b", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -25,7 +25,7 @@ fn parfib(n: uint) -> uint {\n     let (tx, rx) = channel();\n     Thread::spawn(move|| {\n         tx.send(parfib(n-1));\n-    }).detach();\n+    });\n     let m2 = parfib(n-2);\n     return (rx.recv().unwrap() + m2);\n }"}, {"sha": "737776368dd0c5150b09e6aa34edea71461229a7", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -95,7 +95,7 @@ fn main() {\n     let mut messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n             use std::num::Int;\n             let iterations = 2i.pow((max_depth - depth + min_depth) as uint);\n-            Thread::spawn(move|| {\n+            Thread::scoped(move|| {\n                 let mut chk = 0;\n                 for i in range(1, iterations + 1) {\n                     let arena = TypedArena::new();"}, {"sha": "5c36fccc7f5d8cce7f329c64a2c0c428047e1f2a", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -195,7 +195,7 @@ fn rendezvous(nn: uint, set: Vec<Color>) {\n                          from_rendezvous,\n                          to_rendezvous,\n                          to_rendezvous_log);\n-            }).detach();\n+            });\n             to_creature\n         }).collect();\n "}, {"sha": "2725c7cf6d63a8420cd767abd19b7ebd3f6729f1", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -168,7 +168,7 @@ fn fannkuch(n: i32) -> (i32, i32) {\n     for (i, j) in range(0, N).zip(iter::count(0, k)) {\n         let max = cmp::min(j+k, perm.max());\n \n-        futures.push(Thread::spawn(move|| {\n+        futures.push(Thread::scoped(move|| {\n             work(perm, j as uint, max as uint)\n         }))\n     }"}, {"sha": "8ce4edccbd3a0ce75d1133f07e1409914299b1a2", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -173,7 +173,7 @@ fn main() {\n \n         Thread::spawn(move|| {\n             make_sequence_processor(sz, &from_parent, &to_parent_);\n-        }).detach();\n+        });\n \n         to_child\n     }).collect::<Vec<Sender<Vec<u8> >> >();"}, {"sha": "760758a3406ae557253f0d49cc1158707815d58d", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -304,11 +304,11 @@ fn main() {\n \n     let nb_freqs: Vec<_> = range(1u, 3).map(|i| {\n         let input = input.clone();\n-        (i, Thread::spawn(move|| generate_frequencies(input.as_slice(), i)))\n+        (i, Thread::scoped(move|| generate_frequencies(input.as_slice(), i)))\n     }).collect();\n     let occ_freqs: Vec<_> = OCCURRENCES.iter().map(|&occ| {\n         let input = input.clone();\n-        Thread::spawn(move|| generate_frequencies(input.as_slice(), occ.len()))\n+        Thread::scoped(move|| generate_frequencies(input.as_slice(), occ.len()))\n     }).collect();\n \n     for (i, freq) in nb_freqs.into_iter() {"}, {"sha": "f6124c1271f05b1df5d31d81fdc630ea121e5eb0", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -82,7 +82,7 @@ fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n     let mut precalc_i = Vec::with_capacity(h);\n \n     let precalc_futures = range(0, WORKERS).map(|i| {\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             let mut rs = Vec::with_capacity(w / WORKERS);\n             let mut is = Vec::with_capacity(w / WORKERS);\n \n@@ -123,7 +123,7 @@ fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n         let vec_init_r = arc_init_r.clone();\n         let vec_init_i = arc_init_i.clone();\n \n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             let mut res: Vec<u8> = Vec::with_capacity((chunk_size * w) / 8);\n             let init_r_slice = vec_init_r.as_slice();\n "}, {"sha": "34a036eff375024fb839b8daaf2000b0f5c5fcb7", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -321,7 +321,7 @@ fn par_search(masks: Vec<Vec<Vec<u64>>>) -> Data {\n             let mut data = Data::new();\n             search(&*masks, m, 1, List::Cons(m, &List::Nil), &mut data);\n             tx.send(data).unwrap();\n-        }).detach();\n+        });\n     }\n \n     // collecting the results"}, {"sha": "3953d3f9cdd33a7789a74f3eb9f85b6df4029ff0", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -35,15 +35,15 @@ fn fib(n: int) -> int {\n         } else {\n             let (tx1, rx) = channel();\n             let tx2 = tx1.clone();\n-            Thread::spawn(move|| pfib(&tx2, n - 1)).detach();\n+            Thread::spawn(move|| pfib(&tx2, n - 1));\n             let tx2 = tx1.clone();\n-            Thread::spawn(move|| pfib(&tx2, n - 2)).detach();\n+            Thread::spawn(move|| pfib(&tx2, n - 2));\n             tx.send(rx.recv().unwrap() + rx.recv().unwrap());\n         }\n     }\n \n     let (tx, rx) = channel();\n-    Thread::spawn(move|| pfib(&tx, n) ).detach();\n+    Thread::spawn(move|| pfib(&tx, n) );\n     rx.recv().unwrap()\n }\n \n@@ -78,7 +78,7 @@ fn stress_task(id: int) {\n fn stress(num_tasks: int) {\n     let mut results = Vec::new();\n     for i in range(0, num_tasks) {\n-        results.push(Thread::spawn(move|| {\n+        results.push(Thread::scoped(move|| {\n             stress_task(i);\n         }));\n     }"}, {"sha": "da427b36e8d0fe2e1bf7ddfe45b5feb920d4240c", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -46,10 +46,10 @@ fn start(n_tasks: int, token: int) {\n     tx.send(token);\n     for i in range(2, n_tasks + 1) {\n         let (tx, next_rx) = channel();\n-        Thread::spawn(move|| roundtrip(i, tx, rx)).detach();\n+        Thread::spawn(move|| roundtrip(i, tx, rx));\n         rx = next_rx;\n     }\n-    Thread::spawn(move|| roundtrip(1, tx, rx)).detach();\n+    Thread::spawn(move|| roundtrip(1, tx, rx));\n }\n \n fn roundtrip(id: int, tx: Sender<int>, rx: Receiver<int>) {"}, {"sha": "55e8dcbb6e8fbf4af74fd0611077f366880528cd", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -36,7 +36,7 @@ fn main() {\n fn run(repeat: int, depth: int) {\n     for _ in range(0, repeat) {\n         let dur = Duration::span(|| {\n-            let _ = Thread::spawn(move|| {\n+            let _ = Thread::scoped(move|| {\n                 recurse_or_panic(depth, None)\n             }).join();\n         });"}, {"sha": "a2a380279f34d69538c90feaa0ff5a80fddadc24", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -35,7 +35,7 @@ fn child_generation(gens_left: uint, tx: Sender<()>) {\n         } else {\n             tx.send(()).unwrap()\n         }\n-    }).detach();\n+    });\n }\n \n fn main() {"}, {"sha": "eb1e30e2846766e0a0ef3a5e9a6f49b36210c81e", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -15,7 +15,7 @@ use std::thread::Thread;\n fn f(n: uint) {\n     let mut i = 0u;\n     while i < n {\n-        let _ = Thread::spawn(move|| g()).join();\n+        let _ = Thread::scoped(move|| g()).join();\n         i += 1u;\n     }\n }\n@@ -33,5 +33,5 @@ fn main() {\n     };\n     let n = args[1].parse().unwrap();\n     let mut i = 0u;\n-    while i < n { Thread::spawn(move|| f(n) ).detach(); i += 1u; }\n+    while i < n { Thread::spawn(move|| f(n) ); i += 1u; }\n }"}, {"sha": "9beee3b1843f3b98bf97440450aea479463f6573", "filename": "src/test/run-fail/panic-task-name-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -13,7 +13,7 @@\n use std::thread::Thread;\n \n fn main() {\n-    let r: Result<int,_> = Thread::spawn(move|| {\n+    let r: Result<int,_> = Thread::scoped(move|| {\n         panic!(\"test\");\n         1i\n     }).join();"}, {"sha": "714cec6fb3d2091f3245315f7120eda9fe95fca9", "filename": "src/test/run-fail/panic-task-name-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -13,7 +13,7 @@\n use std::thread::Builder;\n \n fn main() {\n-    let r: Result<int,_> = Builder::new().name(\"owned name\".to_string()).spawn(move|| {\n+    let r: Result<int,_> = Builder::new().name(\"owned name\".to_string()).scoped(move|| {\n         panic!(\"test\");\n         1i\n     }).join();"}, {"sha": "d58148810da1fd22109596710d7035307732943b", "filename": "src/test/run-fail/task-spawn-barefn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -15,7 +15,7 @@ use std::thread::Thread;\n fn main() {\n     // the purpose of this test is to make sure that task::spawn()\n     // works when provided with a bare function:\n-    let r = Thread::spawn(startfn).join();\n+    let r = Thread::scoped(startfn).join();\n     if r.is_err() {\n         panic!()\n     }"}, {"sha": "bd88cb19aa7c0bf1f9a264024a446860169f6ee5", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -22,7 +22,7 @@ impl Drop for A {\n }\n \n fn main() {\n-    Thread::spawn(move|| {\n+    Thread::scoped(move|| {\n         let _a = A;\n         lib::callback(|| panic!());\n         1i"}, {"sha": "526819940d00322f28cd68124b15969348b92276", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -45,5 +45,5 @@ pub fn fails() {\n }\n \n pub fn main() {\n-    Thread::spawn(fails).join();\n+    Thread::scoped(fails).join();\n }"}, {"sha": "eeb044e560422ba07b0c5c0df67f76ec3517e81a", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -90,7 +90,7 @@ pub fn test_destroy_actually_kills(force: bool) {\n             _ = rx2.recv() => unsafe { libc::exit(1) },\n             _ = rx1.recv() => {}\n         }\n-    }).detach();\n+    });\n     match p.wait().unwrap() {\n         ExitStatus(..) => panic!(\"expected a signal\"),\n         ExitSignal(..) => tx.send(()).unwrap(),"}, {"sha": "c1df9d53ad440516228977777aa40b5a6a1ce1a8", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -21,7 +21,7 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             let i = &100i;\n             rust_dbg_call(callback, mem::transmute(i));\n         }).join();"}, {"sha": "f83698edc90526d1cd236410d9ed1f726f3b9a30", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -37,7 +36,7 @@ mod map_reduce {\n         for i in inputs.iter() {\n             let ctrl = ctrl.clone();\n             let i = i.clone();\n-            Thread::spawn(move|| map_task(ctrl.clone(), i.clone()) ).detach();\n+            Thread::spawn(move|| map_task(ctrl.clone(), i.clone()) );\n         }\n     }\n "}, {"sha": "a6a4d21e8f2c04aefe297e38c100ed31e987ef9a", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -12,7 +12,7 @@ use std::time::Duration;\n use std::thread::Thread;\n \n fn main() {\n-    Thread::spawn(move|| customtask()).join().ok().unwrap();\n+    Thread::scoped(move|| customtask()).join().ok().unwrap();\n }\n \n fn customtask() {"}, {"sha": "bef0ff5fc2cd2551c94124bc44696c44e61d7140", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -22,7 +22,7 @@ fn helper(rx: Receiver<Sender<()>>) {\n \n fn main() {\n     let (tx, rx) = channel();\n-    let _t = Thread::spawn(move|| { helper(rx) }).detach();\n+    let _t = Thread::spawn(move|| { helper(rx) });\n     let (snd, rcv) = channel::<int>();\n     for _ in range(1i, 100000i) {\n         snd.send(1i).unwrap();"}, {"sha": "6b03a499f15773728e54d603a344f929bfa4d8d5", "filename": "src/test/run-pass/issue-16560.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16560.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     // Check that both closures are capturing by value\n     assert_eq!(1, mem::size_of_val(&closure));\n \n-    Thread::spawn(move|| {\n+    Thread::scoped(move|| {\n         let ok = closure;\n     }).join().ok().unwrap();\n }"}, {"sha": "e25b3e8e89c6c16175ce85e79f0d1807f1d3c6fb", "filename": "src/test/run-pass/issue-16671.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16671.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -24,5 +24,5 @@ pub fn main() {\n     let mut stdin = std::io::stdin();\n     Thread::spawn(move|| {\n         let _ = stdin.read_to_end();\n-    }).detach();\n+    });\n }"}, {"sha": "810bf385d7e0b0946d1c05921155a6fbc53d922d", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -14,7 +14,7 @@ use std::thunk::Thunk;\n static generations: uint = 1024+256+128+49;\n \n fn spawn(f: Thunk) {\n-    Builder::new().stack_size(32 * 1024).spawn(move|| f.invoke(())).detach()\n+    Builder::new().stack_size(32 * 1024).spawn(move|| f.invoke(()));\n }\n \n fn child_no(x: uint) -> Thunk {"}, {"sha": "9c00348ad6a5155814859b31da8af2208a3383bc", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n \n     tx.send(\"hello, world\").unwrap();\n \n-    Thread::spawn(move|| {\n+    Thread::scoped(move|| {\n         println(rx.recv().unwrap());\n     }).join().ok().unwrap();\n }"}, {"sha": "a19bfca721a7c2318dc705a183551300c2e808dc", "filename": "src/test/run-pass/issue-4448.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4448.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -14,7 +14,7 @@ use std::thread::Thread;\n pub fn main() {\n     let (tx, rx) = channel::<&'static str>();\n \n-    let t = Thread::spawn(move|| {\n+    let t = Thread::scoped(move|| {\n         assert_eq!(rx.recv().unwrap(), \"hello, world\");\n     });\n "}, {"sha": "3ea6d5d4f2fcbeefb2ed53e6a985460fe778ddb0", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -12,24 +12,24 @@ use std::{int, i8, i16, i32, i64};\n use std::thread::Thread;\n \n fn main() {\n-    assert!(Thread::spawn(move|| int::MIN / -1).join().is_err());\n-    assert!(Thread::spawn(move|| i8::MIN / -1).join().is_err());\n-    assert!(Thread::spawn(move|| i16::MIN / -1).join().is_err());\n-    assert!(Thread::spawn(move|| i32::MIN / -1).join().is_err());\n-    assert!(Thread::spawn(move|| i64::MIN / -1).join().is_err());\n-    assert!(Thread::spawn(move|| 1i / 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i8 / 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i16 / 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i32 / 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i64 / 0).join().is_err());\n-    assert!(Thread::spawn(move|| int::MIN % -1).join().is_err());\n-    assert!(Thread::spawn(move|| i8::MIN % -1).join().is_err());\n-    assert!(Thread::spawn(move|| i16::MIN % -1).join().is_err());\n-    assert!(Thread::spawn(move|| i32::MIN % -1).join().is_err());\n-    assert!(Thread::spawn(move|| i64::MIN % -1).join().is_err());\n-    assert!(Thread::spawn(move|| 1i % 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i8 % 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i16 % 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i32 % 0).join().is_err());\n-    assert!(Thread::spawn(move|| 1i64 % 0).join().is_err());\n+    assert!(Thread::scoped(move|| int::MIN / -1).join().is_err());\n+    assert!(Thread::scoped(move|| i8::MIN / -1).join().is_err());\n+    assert!(Thread::scoped(move|| i16::MIN / -1).join().is_err());\n+    assert!(Thread::scoped(move|| i32::MIN / -1).join().is_err());\n+    assert!(Thread::scoped(move|| i64::MIN / -1).join().is_err());\n+    assert!(Thread::scoped(move|| 1i / 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i8 / 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i16 / 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i32 / 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i64 / 0).join().is_err());\n+    assert!(Thread::scoped(move|| int::MIN % -1).join().is_err());\n+    assert!(Thread::scoped(move|| i8::MIN % -1).join().is_err());\n+    assert!(Thread::scoped(move|| i16::MIN % -1).join().is_err());\n+    assert!(Thread::scoped(move|| i32::MIN % -1).join().is_err());\n+    assert!(Thread::scoped(move|| i64::MIN % -1).join().is_err());\n+    assert!(Thread::scoped(move|| 1i % 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i8 % 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i16 % 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i32 % 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1i64 % 0).join().is_err());\n }"}, {"sha": "d8b7490124f7055a2b1f08d89599cf1bfa081c74", "filename": "src/test/run-pass/issue-8827.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8827.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -26,7 +26,7 @@ fn periodical(n: int) -> Receiver<bool> {\n                 Err(..) => break\n             }\n         }\n-    }).detach();\n+    });\n     return port;\n }\n \n@@ -41,7 +41,7 @@ fn integers() -> Receiver<int> {\n             }\n             i = i + 1;\n         }\n-    }).detach();\n+    });\n     return port;\n }\n \n@@ -58,4 +58,3 @@ fn main() {\n         }\n     }\n }\n-"}, {"sha": "54f74239daf8603c81451cfade6a7ac748d4fc75", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -27,7 +27,7 @@ impl fmt::Show for Foo {\n }\n \n pub fn main() {\n-    Thread::spawn(move|| {\n+    Thread::scoped(move|| {\n         let mut f = Foo(Cell::new(0));\n         println!(\"{}\", f);\n         let Foo(ref mut f) = f;"}, {"sha": "cb52ba74bbd683088d2c1807cc72bb8c253766ac", "filename": "src/test/run-pass/macro-with-braces-in-expr-position.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -14,7 +14,7 @@ macro_rules! expr { ($e: expr) => { $e } }\n \n macro_rules! spawn {\n     ($($code: tt)*) => {\n-        expr!(Thread::spawn(move|| {$($code)*}).detach())\n+        expr!(Thread::spawn(move|| {$($code)*}))\n     }\n }\n "}, {"sha": "64e78c3483bbae41d35503df04db32a339f9de5c", "filename": "src/test/run-pass/no-landing-pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -23,7 +23,7 @@ impl Drop for A {\n }\n \n fn main() {\n-    Thread::spawn(move|| -> () {\n+    Thread::scoped(move|| -> () {\n         let _a = A;\n         panic!();\n     }).join().unwrap_err();"}, {"sha": "3cc01b967ce6af5d452cc6edad560502e25d7372", "filename": "src/test/run-pass/panic-in-dtor-drops-fields.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fpanic-in-dtor-drops-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fpanic-in-dtor-drops-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-in-dtor-drops-fields.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -33,10 +33,9 @@ impl Drop for B {\n }\n \n pub fn main() {\n-    let ret = Thread::spawn(move|| {\n+    let ret = Thread::scoped(move|| {\n         let _a = A { b: B { foo: 3 } };\n     }).join();\n     assert!(ret.is_err());\n     unsafe { assert!(dropped); }\n }\n-"}, {"sha": "a6e4716c3b8a36e0294654b42b24e66c3a7386b6", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -22,7 +22,7 @@ fn test05() {\n         println!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);\n     };\n-    Thread::spawn(move|| {\n+    Thread::scoped(move|| {\n         test05_start(fn_to_send);\n     }).join().ok().unwrap();\n }"}, {"sha": "b8bb3b4e7f8c39dd70eff3464308cf3b9d43b6db", "filename": "src/test/run-pass/sepcomp-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -36,5 +36,5 @@ mod b {\n }\n \n fn main() {\n-    Thread::spawn(move|| { ::b::g() }).join().unwrap_err();\n+    Thread::scoped(move|| { ::b::g() }).join().unwrap_err();\n }"}, {"sha": "c3612d26c936b408ae683a67b415bff6aba87f99", "filename": "src/test/run-pass/slice-panic-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -28,6 +28,6 @@ fn foo() {\n }\n \n fn main() {\n-    let _ = Thread::spawn(move|| foo()).join();\n+    let _ = Thread::scoped(move|| foo()).join();\n     unsafe { assert!(DTOR_COUNT == 2); }\n }"}, {"sha": "c1e6d941d93261e8b8207602992e954f633d6edd", "filename": "src/test/run-pass/slice-panic-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -32,6 +32,6 @@ fn foo() {\n }\n \n fn main() {\n-    let _ = Thread::spawn(move|| foo()).join();\n+    let _ = Thread::scoped(move|| foo()).join();\n     unsafe { assert!(DTOR_COUNT == 2); }\n }"}, {"sha": "eaad2abe8f72e4909c7a541c82be4e155e9079e5", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -25,6 +25,6 @@ fn iotask(_tx: &ctx, ip: String) {\n \n pub fn main() {\n     let (tx, _rx) = channel::<int>();\n-    let t = Thread::spawn(move|| iotask(&tx, \"localhost\".to_string()) );\n+    let t = Thread::scoped(move|| iotask(&tx, \"localhost\".to_string()) );\n     t.join().ok().unwrap();\n }"}, {"sha": "8f937afa6b93241ebf5a01316fac9e44256ca702", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -11,7 +11,7 @@\n use std::thread::Thread;\n \n pub fn main() {\n-    Thread::spawn(move|| child(10)).join().ok().unwrap();\n+    Thread::scoped(move|| child(10)).join().ok().unwrap();\n }\n \n fn child(i: int) { println!(\"{}\", i); assert!((i == 10)); }"}, {"sha": "75104a4ddef008ebf063383b9d36a94af4981c90", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -11,7 +11,7 @@\n use std::thread::Thread;\n \n pub fn main() {\n-    let t = Thread::spawn(move|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) );\n+    let t = Thread::scoped(move|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) );\n     t.join().ok().unwrap();\n }\n "}, {"sha": "858b7a83c6274f475f484666c2f6e36bed5be558", "filename": "src/test/run-pass/spawning-with-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -17,5 +17,5 @@ use std::thread::Builder;\n \n pub fn main() {\n     let mut t = Builder::new();\n-    t.spawn(move|| ()).detach();\n+    t.spawn(move|| ());\n }"}, {"sha": "180f6e09ba99bb12b0f341e85dfa5c215912e306", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -15,6 +15,6 @@ pub fn main() { test00(); }\n fn start() { println!(\"Started / Finished task.\"); }\n \n fn test00() {\n-    let _ = Thread::spawn(move|| start() ).join();\n+    let _ = Thread::scoped(move|| start() ).join();\n     println!(\"Completing.\");\n }"}, {"sha": "da080408ad17c8a9be99fc09a2bfd520391db5cc", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -16,7 +16,7 @@ fn start(_task_number: int) { println!(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n-    let mut result = Thread::spawn(move|| {\n+    let mut result = Thread::scoped(move|| {\n         start(i)\n     });\n "}, {"sha": "429c6ce9fb3711531cf0f1765730d8839b29182c", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -19,6 +19,6 @@ fn start(tx: &Sender<int>, start: int, number_of_messages: int) {\n pub fn main() {\n     println!(\"Check that we don't deadlock.\");\n     let (tx, rx) = channel();\n-    let _ = Thread::spawn(move|| { start(&tx, 0, 10) }).join();\n+    let _ = Thread::scoped(move|| { start(&tx, 0, 10) }).join();\n     println!(\"Joined task\");\n }"}, {"sha": "0735e3996eec10ec81986948a1157616b598d143", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     while (i > 0) {\n         println!(\"{}\", i);\n         let tx = tx.clone();\n-        Thread::spawn({let i = i; move|| { child(i, &tx) }}).detach();\n+        Thread::spawn({let i = i; move|| { child(i, &tx) }});\n         i = i - 1;\n     }\n "}, {"sha": "9db5465f7e96e77e03d0dbaa66fdb1490644f28b", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -18,5 +18,5 @@ fn f() {\n }\n \n pub fn main() {\n-    let _t = Thread::spawn(move|| f() ).join();\n+    let _t = Thread::scoped(move|| f() ).join();\n }"}, {"sha": "306cc0ffcef7cb6127c7a84fe41f6b100713dd80", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -40,7 +40,7 @@ fn test00() {\n     let mut results = Vec::new();\n     while i < number_of_tasks {\n         let tx = tx.clone();\n-        results.push(Thread::spawn({\n+        results.push(Thread::scoped({\n             let i = i;\n             move|| {\n                 test00_start(&tx, i, number_of_messages)"}, {"sha": "6d8de4a6a53d6c090b2cfa7fae564fe5b1739bec", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -24,7 +24,7 @@ fn test00() {\n     let (tx, rx) = channel();\n     let number_of_messages: int = 10;\n \n-    let result = Thread::spawn(move|| {\n+    let result = Thread::scoped(move|| {\n         test00_start(&tx, number_of_messages);\n     });\n "}, {"sha": "7ff5960375cb2d7d20d0f2ea93a9ee791e4222c4", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     let mut reader = ChanReader::new(rx);\n     let stderr = ChanWriter::new(tx);\n \n-    let res = thread::Builder::new().stderr(box stderr as Box<Writer + Send>).spawn(move|| -> () {\n+    let res = thread::Builder::new().stderr(box stderr as Box<Writer + Send>).scoped(move|| -> () {\n         panic!(\"Hello, world!\")\n     }).join();\n     assert!(res.is_err());"}, {"sha": "cd3cb872fd3bc58fdca1791a001752162b808b30", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -52,7 +52,7 @@ fn test() {\n                 }\n             }\n             srv_tx.send(());\n-        }).detach();\n+        });\n     }\n \n     for _ in range(0, N) {\n@@ -62,7 +62,7 @@ fn test() {\n                 let _s = TcpStream::connect(addr).unwrap();\n             }\n             cli_tx.send(());\n-        }).detach();\n+        });\n     }\n     drop((cli_tx, srv_tx));\n "}, {"sha": "0109d64ad5347896f7c9129a27a54dca6cdd11c6", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -29,7 +29,7 @@ fn main() {\n         timer::sleep(Duration::milliseconds(30 * 1000));\n         println!(\"timed out!\");\n         unsafe { libc::exit(1) }\n-    }).detach();\n+    });\n \n     let (tx, rx) = channel();\n     Thread::spawn(move || -> () {\n@@ -47,7 +47,7 @@ fn main() {\n             stream.read_byte();\n             stream.write(&[2]);\n         }\n-    }).detach();\n+    });\n     let addr = rx.recv().unwrap();\n \n     let (tx, rx) = channel();\n@@ -64,7 +64,7 @@ fn main() {\n                 Err(e) => debug!(\"{}\", e)\n             }\n             tx.send(()).unwrap();\n-        }).detach();\n+        });\n     }\n \n     // Wait for all clients to exit, but don't wait for the server to exit. The"}, {"sha": "b931bd9609c6fde3fbfa64a369c9cf8d8bb23f1b", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -42,7 +42,7 @@ fn test_rm_tempdir() {\n         tx.send(tmp.path().clone()).unwrap();\n         panic!(\"panic to unwind past `tmp`\");\n     };\n-    let _ = Thread::spawn(f).join();\n+    let _ = Thread::scoped(f).join();\n     let path = rx.recv().unwrap();\n     assert!(!path.exists());\n \n@@ -52,15 +52,15 @@ fn test_rm_tempdir() {\n         let _tmp = tmp;\n         panic!(\"panic to unwind past `tmp`\");\n     };\n-    let _ = Thread::spawn(f).join();\n+    let _ = Thread::scoped(f).join();\n     assert!(!path.exists());\n \n     let path;\n     {\n         let f = move|:| {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n-        let tmp = Thread::spawn(f).join().ok().expect(\"test_rm_tmdir\");\n+        let tmp = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n         path = tmp.path().clone();\n         assert!(path.exists());\n     }\n@@ -84,7 +84,7 @@ fn test_rm_tempdir_close() {\n         tmp.close();\n         panic!(\"panic when unwinding past `tmp`\");\n     };\n-    let _ = Thread::spawn(f).join();\n+    let _ = Thread::scoped(f).join();\n     let path = rx.recv().unwrap();\n     assert!(!path.exists());\n \n@@ -95,15 +95,15 @@ fn test_rm_tempdir_close() {\n         tmp.close();\n         panic!(\"panic when unwinding past `tmp`\");\n     };\n-    let _ = Thread::spawn(f).join();\n+    let _ = Thread::scoped(f).join();\n     assert!(!path.exists());\n \n     let path;\n     {\n         let f = move|:| {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n-        let tmp = Thread::spawn(f).join().ok().expect(\"test_rm_tmdir\");\n+        let tmp = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n         path = tmp.path().clone();\n         assert!(path.exists());\n         tmp.close();\n@@ -177,7 +177,7 @@ pub fn test_rmdir_recursive_ok() {\n }\n \n pub fn dont_double_panic() {\n-    let r: Result<(), _> = Thread::spawn(move|| {\n+    let r: Result<(), _> = Thread::scoped(move|| {\n         let tmpdir = TempDir::new(\"test\").unwrap();\n         // Remove the temporary directory so that TempDir sees\n         // an error on drop"}, {"sha": "bfd1f5f4a74dd60ef6710a1a0df2615ee3206872", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -22,13 +22,13 @@ fn test_ret() { let _x: Box<int> = return; }\n \n fn test_panic() {\n     fn f() { let _x: Box<int> = panic!(); }\n-    Thread::spawn(move|| f() ).join().err().unwrap();\n+    Thread::scoped(move|| f() ).join().err().unwrap();\n }\n \n fn test_panic_indirect() {\n     fn f() -> ! { panic!(); }\n     fn g() { let _x: Box<int> = f(); }\n-    Thread::spawn(move|| g() ).join().err().unwrap();\n+    Thread::scoped(move|| g() ).join().err().unwrap();\n }\n \n pub fn main() {"}, {"sha": "c47ca0db2a15693d797a1de63f0ae549608f36a0", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -13,7 +13,7 @@ use std::thread::Thread;\n pub fn main() {\n     let mut i = 10;\n     while i > 0 {\n-        Thread::spawn({let i = i; move|| child(i)}).detach();\n+        Thread::spawn({let i = i; move|| child(i)});\n         i = i - 1;\n     }\n     println!(\"main thread exiting\");"}, {"sha": "bb3019ede4b5764dc86547851f447ad7b1d36485", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n         let tx = tx.clone();\n         Thread::spawn(move|| {\n             child(&tx, i)\n-        }).detach();\n+        });\n         expected += i;\n     }\n "}, {"sha": "4c8665032828e50fbb93496e57621f7607eb7a37", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -22,7 +22,7 @@ impl Drop for Foo {\n }\n \n pub fn main() {\n-    let x = Thread::spawn(move|| {\n+    let x = Thread::scoped(move|| {\n         let _b = Foo;\n     }).join();\n "}, {"sha": "29bf82a81d65da7949368c4fd0156b7511530596", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -77,7 +77,7 @@ pub fn main() {\n \n                 let v = main.clone();\n \n-                let _ = Thread::spawn(move|| {\n+                let _ = Thread::scoped(move|| {\n                     let mut v = v;\n                     let mut panic_countdown = panic_countdown;\n                     v.as_mut_slice().sort_by(|a, b| {"}, {"sha": "9ad6dd9d2b14213302d6f7e109e776f90d0832f0", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -11,7 +11,7 @@\n use std::thread::Thread;\n \n pub fn main() {\n-    let mut result = Thread::spawn(child);\n+    let mut result = Thread::scoped(child);\n     println!(\"1\");\n     Thread::yield_now();\n     println!(\"2\");"}, {"sha": "3d3a36021da1569d405b95fbb4271f28ea9a7ced", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caca9b2e7109a148d100a3c6851241d3815da3db/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=caca9b2e7109a148d100a3c6851241d3815da3db", "patch": "@@ -11,7 +11,7 @@\n use std::thread::Thread;\n \n pub fn main() {\n-    let mut result = Thread::spawn(child);\n+    let mut result = Thread::scoped(child);\n     println!(\"1\");\n     Thread::yield_now();\n     result.join();"}]}