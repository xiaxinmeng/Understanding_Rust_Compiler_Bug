{"sha": "fbb367333190128015d35c0211877d71796f8deb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjM2NzMzMzE5MDEyODAxNWQzNWMwMjExODc3ZDcxNzk2ZjhkZWI=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-08-31T03:09:20Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-08-31T03:09:20Z"}, "message": "Make more Ipv4Addr methods const\n\nConstify the following methods of `std::net::Ipv4Addr`:\n - `octets`\n - `is_loopback`\n - `is_private`\n - `is_link_local`\n - `is_shared`\n - `is_ietf_protocol_assignment`\n - `is_benchmarking`\n - `is_multicast`\n - `is_documentation`\n\nAlso insta-stabilizes these methods as const.\n\nPossible because of the stabilization of const integer arithmetic and control flow.", "tree": {"sha": "59723cbd54a2ef81325f23f9749e296fddb83e12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59723cbd54a2ef81325f23f9749e296fddb83e12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb367333190128015d35c0211877d71796f8deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb367333190128015d35c0211877d71796f8deb", "html_url": "https://github.com/rust-lang/rust/commit/fbb367333190128015d35c0211877d71796f8deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb367333190128015d35c0211877d71796f8deb/comments", "author": null, "committer": null, "parents": [{"sha": "36b0d7e25769e88fec85e1d073196065a7f2d7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b0d7e25769e88fec85e1d073196065a7f2d7c4", "html_url": "https://github.com/rust-lang/rust/commit/36b0d7e25769e88fec85e1d073196065a7f2d7c4"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "c37323b1bc48a365ccf01550d1373406d535c0fe", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fbb367333190128015d35c0211877d71796f8deb/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb367333190128015d35c0211877d71796f8deb/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=fbb367333190128015d35c0211877d71796f8deb", "patch": "@@ -361,8 +361,9 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// assert_eq!(addr.octets(), [127, 0, 0, 1]);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn octets(&self) -> [u8; 4] {\n+    pub const fn octets(&self) -> [u8; 4] {\n         // This returns the order we want because s_addr is stored in big-endian.\n         self.inner.s_addr.to_ne_bytes()\n     }\n@@ -404,8 +405,9 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_loopback(), true);\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_loopback(), false);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_loopback(&self) -> bool {\n+    pub const fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n     }\n \n@@ -433,8 +435,9 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(192, 168, 0, 2).is_private(), true);\n     /// assert_eq!(Ipv4Addr::new(192, 169, 0, 2).is_private(), false);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_private(&self) -> bool {\n+    pub const fn is_private(&self) -> bool {\n         match self.octets() {\n             [10, ..] => true,\n             [172, b, ..] if b >= 16 && b <= 31 => true,\n@@ -459,8 +462,9 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(169, 254, 10, 65).is_link_local(), true);\n     /// assert_eq!(Ipv4Addr::new(16, 89, 10, 65).is_link_local(), false);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_link_local(&self) -> bool {\n+    pub const fn is_link_local(&self) -> bool {\n         match self.octets() {\n             [169, 254, ..] => true,\n             _ => false,\n@@ -573,7 +577,8 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(100, 127, 255, 255).is_shared(), true);\n     /// assert_eq!(Ipv4Addr::new(100, 128, 0, 0).is_shared(), false);\n     /// ```\n-    pub fn is_shared(&self) -> bool {\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n     }\n \n@@ -605,7 +610,8 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(192, 0, 1, 0).is_ietf_protocol_assignment(), false);\n     /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n     /// ```\n-    pub fn is_ietf_protocol_assignment(&self) -> bool {\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    pub const fn is_ietf_protocol_assignment(&self) -> bool {\n         self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n     }\n \n@@ -628,7 +634,8 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(198, 19, 255, 255).is_benchmarking(), true);\n     /// assert_eq!(Ipv4Addr::new(198, 20, 0, 0).is_benchmarking(), false);\n     /// ```\n-    pub fn is_benchmarking(&self) -> bool {\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n+    pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n     }\n \n@@ -681,8 +688,9 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_multicast(), true);\n     /// assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_multicast(), false);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_multicast(&self) -> bool {\n+    pub const fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n \n@@ -727,8 +735,9 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_documentation(), true);\n     /// assert_eq!(Ipv4Addr::new(193, 34, 17, 19).is_documentation(), false);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.48.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_documentation(&self) -> bool {\n+    pub const fn is_documentation(&self) -> bool {\n         match self.octets() {\n             [192, 0, 2, _] => true,\n             [198, 51, 100, _] => true,"}]}