{"sha": "c9cd6aa370667783292de3bc580e0503a409e453", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Y2Q2YWEzNzA2Njc3ODMyOTJkZTNiYzU4MGUwNTAzYTQwOWU0NTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T10:10:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T10:11:38Z"}, "message": "Move ids to hir_def crate", "tree": {"sha": "4662b1c76bed5e830c1dae9ee5dbf47520f41e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4662b1c76bed5e830c1dae9ee5dbf47520f41e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9cd6aa370667783292de3bc580e0503a409e453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cd6aa370667783292de3bc580e0503a409e453", "html_url": "https://github.com/rust-lang/rust/commit/c9cd6aa370667783292de3bc580e0503a409e453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9cd6aa370667783292de3bc580e0503a409e453/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a136cc0653d2b4133fb6387009cfdbaf3e2cf275", "url": "https://api.github.com/repos/rust-lang/rust/commits/a136cc0653d2b4133fb6387009cfdbaf3e2cf275", "html_url": "https://github.com/rust-lang/rust/commit/a136cc0653d2b4133fb6387009cfdbaf3e2cf275"}], "stats": {"total": 516, "additions": 258, "deletions": 258}, "files": [{"sha": "66ff1285a09231c0829f4d2d28fdab9339255620", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -1021,6 +1021,7 @@ dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n+ \"ra_hir_expand 0.1.0\",\n  \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n ]"}, {"sha": "1a790b2f300287dea0a6a8dbecb9999d7e100703", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -343,7 +343,7 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -405,7 +405,7 @@ impl Union {\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Ty {\n@@ -431,7 +431,7 @@ pub struct Enum {\n \n impl Enum {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -697,7 +697,7 @@ impl FnData {\n \n impl Function {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -775,7 +775,7 @@ pub struct Const {\n \n impl Const {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -872,7 +872,7 @@ pub struct Static {\n \n impl Static {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -901,7 +901,7 @@ pub struct Trait {\n \n impl Trait {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n@@ -1003,7 +1003,7 @@ pub struct TypeAlias {\n \n impl TypeAlias {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db)\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {"}, {"sha": "5c7f61eefb46162b9c973d61fbd28d4ff2b55cfd", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -1,9 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_syntax::{\n-    ast::{self, AstNode},\n-    SyntaxNode,\n-};\n+use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n@@ -12,26 +9,13 @@ use crate::{\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub struct Source<T> {\n-    pub file_id: HirFileId,\n-    pub ast: T,\n-}\n+pub use hir_def::Source;\n \n pub trait HasSource {\n     type Ast;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<Self::Ast>;\n }\n \n-impl<T> Source<T> {\n-    pub(crate) fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n-        Source { file_id: self.file_id, ast: f(self.ast) }\n-    }\n-    pub(crate) fn file_syntax(&self, db: &impl AstDatabase) -> SyntaxNode {\n-        db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n-    }\n-}\n-\n /// NB: Module is !HasSource, because it has two source nodes at the same time:\n /// definition and declaration.\n impl Module {"}, {"sha": "8f6cb2da7d3cd7e89061e631b565e0e72dbc5289", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -2,8 +2,8 @@\n \n use std::sync::Arc;\n \n-use ra_db::{salsa, SourceDatabase};\n-use ra_syntax::{ast, SmolStr};\n+use ra_db::salsa;\n+use ra_syntax::SmolStr;\n \n use crate::{\n     adt::{EnumData, StructData},\n@@ -23,34 +23,12 @@ use crate::{\n     Static, Struct, StructField, Trait, TypeAlias,\n };\n \n+pub use hir_def::db::{InternDatabase, InternDatabaseStorage};\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n     ParseMacroQuery,\n };\n \n-/// We store all interned things in the single QueryGroup.\n-///\n-/// This is done mainly to allow both \"volatile\" `AstDatabase` and \"stable\"\n-/// `DefDatabase` to access macros, without adding hard dependencies between the\n-/// two.\n-#[salsa::query_group(InternDatabaseStorage)]\n-pub trait InternDatabase: SourceDatabase {\n-    #[salsa::interned]\n-    fn intern_function(&self, loc: ids::ItemLoc<ast::FnDef>) -> ids::FunctionId;\n-    #[salsa::interned]\n-    fn intern_struct(&self, loc: ids::ItemLoc<ast::StructDef>) -> ids::StructId;\n-    #[salsa::interned]\n-    fn intern_enum(&self, loc: ids::ItemLoc<ast::EnumDef>) -> ids::EnumId;\n-    #[salsa::interned]\n-    fn intern_const(&self, loc: ids::ItemLoc<ast::ConstDef>) -> ids::ConstId;\n-    #[salsa::interned]\n-    fn intern_static(&self, loc: ids::ItemLoc<ast::StaticDef>) -> ids::StaticId;\n-    #[salsa::interned]\n-    fn intern_trait(&self, loc: ids::ItemLoc<ast::TraitDef>) -> ids::TraitId;\n-    #[salsa::interned]\n-    fn intern_type_alias(&self, loc: ids::ItemLoc<ast::TypeAliasDef>) -> ids::TypeAliasId;\n-}\n-\n // This database uses `AstDatabase` internally,\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]"}, {"sha": "93713bb1424fa5a44c7f6964fc2af30aa7178deb", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -208,6 +208,6 @@ where\n     let module_src =\n         crate::ModuleSource::from_child_node(db, src.file_id.original_file(db), &src.ast.syntax());\n     let module = Module::from_definition(db, Source { file_id: src.file_id, ast: module_src })?;\n-    let ctx = LocationCtx::new(db, module, src.file_id);\n+    let ctx = LocationCtx::new(db, module.id, src.file_id);\n     Some(DEF::from_ast(ctx, &src.ast))\n }"}, {"sha": "fe083c0c65f68841224ab71a673f370e250819fa", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 3, "deletions": 164, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -5,16 +5,12 @@\n //! This module defines a bunch of ids we are using. The most important ones are\n //! probably `HirFileId` and `DefId`.\n \n-use std::hash::{Hash, Hasher};\n-\n use ra_db::salsa;\n-use ra_syntax::{ast, AstNode};\n \n-use crate::{\n-    db::{AstDatabase, InternDatabase},\n-    AstId, FileAstId, Module, Source,\n+pub use hir_def::{\n+    AstItemDef, ConstId, EnumId, FunctionId, ItemLoc, LocationCtx, StaticId, StructId, TraitId,\n+    TypeAliasId,\n };\n-\n pub use hir_expand::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, MacroFileKind};\n \n macro_rules! impl_intern_key {\n@@ -30,163 +26,6 @@ macro_rules! impl_intern_key {\n     };\n }\n \n-#[derive(Debug)]\n-pub struct ItemLoc<N: AstNode> {\n-    pub(crate) module: Module,\n-    ast_id: AstId<N>,\n-}\n-\n-impl<N: AstNode> PartialEq for ItemLoc<N> {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.module == other.module && self.ast_id == other.ast_id\n-    }\n-}\n-impl<N: AstNode> Eq for ItemLoc<N> {}\n-impl<N: AstNode> Hash for ItemLoc<N> {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        self.module.hash(hasher);\n-        self.ast_id.hash(hasher);\n-    }\n-}\n-\n-impl<N: AstNode> Clone for ItemLoc<N> {\n-    fn clone(&self) -> ItemLoc<N> {\n-        ItemLoc { module: self.module, ast_id: self.ast_id }\n-    }\n-}\n-\n-#[derive(Clone, Copy)]\n-pub(crate) struct LocationCtx<DB> {\n-    db: DB,\n-    module: Module,\n-    file_id: HirFileId,\n-}\n-\n-impl<'a, DB> LocationCtx<&'a DB> {\n-    pub(crate) fn new(db: &'a DB, module: Module, file_id: HirFileId) -> LocationCtx<&'a DB> {\n-        LocationCtx { db, module, file_id }\n-    }\n-}\n-\n-impl<'a, DB: AstDatabase + InternDatabase> LocationCtx<&'a DB> {\n-    pub(crate) fn to_def<N, DEF>(self, ast: &N) -> DEF\n-    where\n-        N: AstNode,\n-        DEF: AstItemDef<N>,\n-    {\n-        DEF::from_ast(self, ast)\n-    }\n-}\n-\n-pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n-\n-    fn from_ast(ctx: LocationCtx<&(impl AstDatabase + InternDatabase)>, ast: &N) -> Self {\n-        let items = ctx.db.ast_id_map(ctx.file_id);\n-        let item_id = items.ast_id(ast);\n-        Self::from_ast_id(ctx, item_id)\n-    }\n-    fn from_ast_id(ctx: LocationCtx<&impl InternDatabase>, ast_id: FileAstId<N>) -> Self {\n-        let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n-        Self::intern(ctx.db, loc)\n-    }\n-    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> Source<N> {\n-        let loc = self.lookup_intern(db);\n-        let ast = loc.ast_id.to_node(db);\n-        Source { file_id: loc.ast_id.file_id(), ast }\n-    }\n-    fn module(self, db: &impl InternDatabase) -> Module {\n-        let loc = self.lookup_intern(db);\n-        loc.module\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct FunctionId(salsa::InternId);\n-impl_intern_key!(FunctionId);\n-\n-impl AstItemDef<ast::FnDef> for FunctionId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::FnDef>) -> Self {\n-        db.intern_function(loc)\n-    }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::FnDef> {\n-        db.lookup_intern_function(self)\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructId(salsa::InternId);\n-impl_intern_key!(StructId);\n-impl AstItemDef<ast::StructDef> for StructId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n-        db.intern_struct(loc)\n-    }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n-        db.lookup_intern_struct(self)\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct EnumId(salsa::InternId);\n-impl_intern_key!(EnumId);\n-impl AstItemDef<ast::EnumDef> for EnumId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::EnumDef>) -> Self {\n-        db.intern_enum(loc)\n-    }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::EnumDef> {\n-        db.lookup_intern_enum(self)\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct ConstId(salsa::InternId);\n-impl_intern_key!(ConstId);\n-impl AstItemDef<ast::ConstDef> for ConstId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::ConstDef>) -> Self {\n-        db.intern_const(loc)\n-    }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::ConstDef> {\n-        db.lookup_intern_const(self)\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StaticId(salsa::InternId);\n-impl_intern_key!(StaticId);\n-impl AstItemDef<ast::StaticDef> for StaticId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StaticDef>) -> Self {\n-        db.intern_static(loc)\n-    }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StaticDef> {\n-        db.lookup_intern_static(self)\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TraitId(salsa::InternId);\n-impl_intern_key!(TraitId);\n-impl AstItemDef<ast::TraitDef> for TraitId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TraitDef>) -> Self {\n-        db.intern_trait(loc)\n-    }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TraitDef> {\n-        db.lookup_intern_trait(self)\n-    }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TypeAliasId(salsa::InternId);\n-impl_intern_key!(TypeAliasId);\n-impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TypeAliasDef>) -> Self {\n-        db.intern_type_alias(loc)\n-    }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TypeAliasDef> {\n-        db.lookup_intern_type_alias(self)\n-    }\n-}\n-\n /// This exists just for Chalk, because Chalk just has a single `StructId` where\n /// we have different kinds of ADTs, primitive types and special type\n /// constructors like tuples and function pointers."}, {"sha": "06f21fc33eee86edb1a0e08a7f7aa019729feaa1", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -129,7 +129,7 @@ impl ImplData {\n     ) -> Self {\n         let target_trait = node.target_trait().map(TypeRef::from_ast);\n         let target_type = TypeRef::from_ast_opt(node.target_type());\n-        let ctx = LocationCtx::new(db, module, file_id);\n+        let ctx = LocationCtx::new(db, module.id, file_id);\n         let negative = node.is_negative();\n         let items = if let Some(item_list) = node.item_list() {\n             item_list"}, {"sha": "a94a0554c84c0738fa7191ce0422539f971388d1", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -641,7 +641,7 @@ where\n \n     fn define_def(&mut self, def: &raw::DefData) {\n         let module = Module::new(self.def_collector.def_map.krate, self.module_id);\n-        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n+        let ctx = LocationCtx::new(self.def_collector.db, module.id, self.file_id);\n \n         macro_rules! def {\n             ($kind:ident, $ast_id:ident) => {"}, {"sha": "730c3322647e1ef6517fffbe8507c38fb3a6f5eb", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -64,7 +64,7 @@ fn def_with_body_from_child_node(\n ) -> Option<DefWithBody> {\n     let src = crate::ModuleSource::from_child_node(db, file_id, node);\n     let module = Module::from_definition(db, crate::Source { file_id: file_id.into(), ast: src })?;\n-    let ctx = LocationCtx::new(db, module, file_id.into());\n+    let ctx = LocationCtx::new(db, module.id, file_id.into());\n \n     node.ancestors().find_map(|node| {\n         if let Some(def) = ast::FnDef::cast(node.clone()) {"}, {"sha": "22f1880493f9f996b19d7c0476b1b9b80cfa4d07", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -27,7 +27,7 @@ impl TraitData {\n         let src = tr.source(db);\n         let name = src.ast.name().map(|n| n.as_name());\n         let module = tr.module(db);\n-        let ctx = LocationCtx::new(db, module, src.file_id);\n+        let ctx = LocationCtx::new(db, module.id, src.file_id);\n         let auto = src.ast.is_auto();\n         let items = if let Some(item_list) = src.ast.item_list() {\n             item_list"}, {"sha": "ab66515beecffa76fe773009d0f1240a689b2d40", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -162,11 +162,11 @@ impl ToChalk for Trait {\n     type Chalk = chalk_ir::TraitId;\n \n     fn to_chalk(self, _db: &impl HirDatabase) -> chalk_ir::TraitId {\n-        self.id.into()\n+        chalk_ir::TraitId(id_to_chalk(self.id))\n     }\n \n     fn from_chalk(_db: &impl HirDatabase, trait_id: chalk_ir::TraitId) -> Trait {\n-        Trait { id: trait_id.into() }\n+        Trait { id: id_from_chalk(trait_id.0) }\n     }\n }\n \n@@ -198,11 +198,11 @@ impl ToChalk for TypeAlias {\n     type Chalk = chalk_ir::TypeId;\n \n     fn to_chalk(self, _db: &impl HirDatabase) -> chalk_ir::TypeId {\n-        self.id.into()\n+        chalk_ir::TypeId(id_to_chalk(self.id))\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, impl_id: chalk_ir::TypeId) -> TypeAlias {\n-        TypeAlias { id: impl_id.into() }\n+    fn from_chalk(_db: &impl HirDatabase, type_alias_id: chalk_ir::TypeId) -> TypeAlias {\n+        TypeAlias { id: id_from_chalk(type_alias_id.0) }\n     }\n }\n \n@@ -775,30 +775,6 @@ fn id_to_chalk<T: InternKey>(salsa_id: T) -> chalk_ir::RawId {\n     chalk_ir::RawId { index: salsa_id.as_intern_id().as_u32() }\n }\n \n-impl From<chalk_ir::TraitId> for crate::ids::TraitId {\n-    fn from(trait_id: chalk_ir::TraitId) -> Self {\n-        id_from_chalk(trait_id.0)\n-    }\n-}\n-\n-impl From<crate::ids::TraitId> for chalk_ir::TraitId {\n-    fn from(trait_id: crate::ids::TraitId) -> Self {\n-        chalk_ir::TraitId(id_to_chalk(trait_id))\n-    }\n-}\n-\n-impl From<chalk_ir::TypeId> for crate::ids::TypeAliasId {\n-    fn from(type_id: chalk_ir::TypeId) -> Self {\n-        id_from_chalk(type_id.0)\n-    }\n-}\n-\n-impl From<crate::ids::TypeAliasId> for chalk_ir::TypeId {\n-    fn from(type_id: crate::ids::TypeAliasId) -> Self {\n-        chalk_ir::TypeId(id_to_chalk(type_id))\n-    }\n-}\n-\n impl From<chalk_ir::StructId> for crate::ids::TypeCtorId {\n     fn from(struct_id: chalk_ir::StructId) -> Self {\n         id_from_chalk(struct_id.0)"}, {"sha": "75e93f2547bbc73b7ca5832bc832cca3e33a77f8", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -11,3 +11,4 @@ ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_prof = { path = \"../ra_prof\" }\n+hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }"}, {"sha": "f6f976c860a0a8f255ae7980712616e08e212457", "filename": "crates/ra_hir_def/src/db.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -0,0 +1,22 @@\n+//! Defines database & queries for name resolution.\n+\n+use ra_db::{salsa, SourceDatabase};\n+use ra_syntax::ast;\n+\n+#[salsa::query_group(InternDatabaseStorage)]\n+pub trait InternDatabase: SourceDatabase {\n+    #[salsa::interned]\n+    fn intern_function(&self, loc: crate::ItemLoc<ast::FnDef>) -> crate::FunctionId;\n+    #[salsa::interned]\n+    fn intern_struct(&self, loc: crate::ItemLoc<ast::StructDef>) -> crate::StructId;\n+    #[salsa::interned]\n+    fn intern_enum(&self, loc: crate::ItemLoc<ast::EnumDef>) -> crate::EnumId;\n+    #[salsa::interned]\n+    fn intern_const(&self, loc: crate::ItemLoc<ast::ConstDef>) -> crate::ConstId;\n+    #[salsa::interned]\n+    fn intern_static(&self, loc: crate::ItemLoc<ast::StaticDef>) -> crate::StaticId;\n+    #[salsa::interned]\n+    fn intern_trait(&self, loc: crate::ItemLoc<ast::TraitDef>) -> crate::TraitId;\n+    #[salsa::interned]\n+    fn intern_type_alias(&self, loc: crate::ItemLoc<ast::TypeAliasDef>) -> crate::TypeAliasId;\n+}"}, {"sha": "4d6b9db033f9bac20bb53d5c8dcbb32084f50274", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 203, "deletions": 1, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -1,5 +1,37 @@\n+//! `hir_def` crate contains everything between macro expansion and type\n+//! inference.\n+//!\n+//! It defines various items (structs, enums, traits) which comprises Rust code,\n+//! as well as an algorithm for resolving paths to such entities.\n+//!\n+//! Note that `hir_def` is a work in progress, so not all of the above is\n+//! actually true.\n+\n+pub mod db;\n+\n+use std::hash::{Hash, Hasher};\n+\n+use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId};\n use ra_arena::{impl_arena_id, RawId};\n-use ra_db::CrateId;\n+use ra_db::{salsa, CrateId};\n+use ra_syntax::{ast, AstNode, SyntaxNode};\n+\n+use crate::db::InternDatabase;\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub struct Source<T> {\n+    pub file_id: HirFileId,\n+    pub ast: T,\n+}\n+\n+impl<T> Source<T> {\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n+        Source { file_id: self.file_id, ast: f(self.ast) }\n+    }\n+    pub fn file_syntax(&self, db: &impl AstDatabase) -> SyntaxNode {\n+        db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n+    }\n+}\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n@@ -12,3 +44,173 @@ pub struct ModuleId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateModuleId(RawId);\n impl_arena_id!(CrateModuleId);\n+\n+macro_rules! impl_intern_key {\n+    ($name:ident) => {\n+        impl salsa::InternKey for $name {\n+            fn from_intern_id(v: salsa::InternId) -> Self {\n+                $name(v)\n+            }\n+            fn as_intern_id(&self) -> salsa::InternId {\n+                self.0\n+            }\n+        }\n+    };\n+}\n+\n+#[derive(Debug)]\n+pub struct ItemLoc<N: AstNode> {\n+    pub(crate) module: ModuleId,\n+    ast_id: AstId<N>,\n+}\n+\n+impl<N: AstNode> PartialEq for ItemLoc<N> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.module == other.module && self.ast_id == other.ast_id\n+    }\n+}\n+impl<N: AstNode> Eq for ItemLoc<N> {}\n+impl<N: AstNode> Hash for ItemLoc<N> {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        self.module.hash(hasher);\n+        self.ast_id.hash(hasher);\n+    }\n+}\n+\n+impl<N: AstNode> Clone for ItemLoc<N> {\n+    fn clone(&self) -> ItemLoc<N> {\n+        ItemLoc { module: self.module, ast_id: self.ast_id }\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct LocationCtx<DB> {\n+    db: DB,\n+    module: ModuleId,\n+    file_id: HirFileId,\n+}\n+\n+impl<'a, DB> LocationCtx<&'a DB> {\n+    pub fn new(db: &'a DB, module: ModuleId, file_id: HirFileId) -> LocationCtx<&'a DB> {\n+        LocationCtx { db, module, file_id }\n+    }\n+}\n+\n+impl<'a, DB: AstDatabase + InternDatabase> LocationCtx<&'a DB> {\n+    pub fn to_def<N, DEF>(self, ast: &N) -> DEF\n+    where\n+        N: AstNode,\n+        DEF: AstItemDef<N>,\n+    {\n+        DEF::from_ast(self, ast)\n+    }\n+}\n+\n+pub trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n+\n+    fn from_ast(ctx: LocationCtx<&(impl AstDatabase + InternDatabase)>, ast: &N) -> Self {\n+        let items = ctx.db.ast_id_map(ctx.file_id);\n+        let item_id = items.ast_id(ast);\n+        Self::from_ast_id(ctx, item_id)\n+    }\n+    fn from_ast_id(ctx: LocationCtx<&impl InternDatabase>, ast_id: FileAstId<N>) -> Self {\n+        let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n+        Self::intern(ctx.db, loc)\n+    }\n+    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> Source<N> {\n+        let loc = self.lookup_intern(db);\n+        let ast = loc.ast_id.to_node(db);\n+        Source { file_id: loc.ast_id.file_id(), ast }\n+    }\n+    fn module(self, db: &impl InternDatabase) -> ModuleId {\n+        let loc = self.lookup_intern(db);\n+        loc.module\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct FunctionId(salsa::InternId);\n+impl_intern_key!(FunctionId);\n+\n+impl AstItemDef<ast::FnDef> for FunctionId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::FnDef>) -> Self {\n+        db.intern_function(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::FnDef> {\n+        db.lookup_intern_function(self)\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct StructId(salsa::InternId);\n+impl_intern_key!(StructId);\n+impl AstItemDef<ast::StructDef> for StructId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n+        db.intern_struct(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n+        db.lookup_intern_struct(self)\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct EnumId(salsa::InternId);\n+impl_intern_key!(EnumId);\n+impl AstItemDef<ast::EnumDef> for EnumId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::EnumDef>) -> Self {\n+        db.intern_enum(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::EnumDef> {\n+        db.lookup_intern_enum(self)\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct ConstId(salsa::InternId);\n+impl_intern_key!(ConstId);\n+impl AstItemDef<ast::ConstDef> for ConstId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::ConstDef>) -> Self {\n+        db.intern_const(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::ConstDef> {\n+        db.lookup_intern_const(self)\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct StaticId(salsa::InternId);\n+impl_intern_key!(StaticId);\n+impl AstItemDef<ast::StaticDef> for StaticId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StaticDef>) -> Self {\n+        db.intern_static(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StaticDef> {\n+        db.lookup_intern_static(self)\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TraitId(salsa::InternId);\n+impl_intern_key!(TraitId);\n+impl AstItemDef<ast::TraitDef> for TraitId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TraitDef>) -> Self {\n+        db.intern_trait(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TraitDef> {\n+        db.lookup_intern_trait(self)\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TypeAliasId(salsa::InternId);\n+impl_intern_key!(TypeAliasId);\n+impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TypeAliasDef>) -> Self {\n+        db.intern_type_alias(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TypeAliasDef> {\n+        db.lookup_intern_type_alias(self)\n+    }\n+}"}, {"sha": "956d8ce49c44c6974bad0c7c0ef372700144f58c", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -50,7 +50,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };\n-            let krate = ctx.module.and_then(|m| m.krate(ctx.db));\n+            let krate = ctx.module.map(|m| m.krate());\n             if let Some(krate) = krate {\n                 ty.iterate_impl_items(ctx.db, krate, |item| {\n                     match item {"}, {"sha": "b899ed3a5f78f49b4224061f3fdbbfdbb8a232dc", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -51,7 +51,7 @@ fn impls_for_def(\n         }\n     };\n \n-    let krate = module.krate(db)?;\n+    let krate = module.krate();\n     let impls = db.impls_in_crate(krate);\n \n     Some(\n@@ -72,7 +72,7 @@ fn impls_for_trait(\n     let src = hir::Source { file_id: position.file_id.into(), ast: node.clone() };\n     let tr = hir::Trait::from_source(db, src)?;\n \n-    let krate = module.krate(db)?;\n+    let krate = module.krate();\n     let impls = db.impls_in_crate(krate);\n \n     Some("}, {"sha": "4c57566e2af930b469224082681caab424c2d7b9", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -27,10 +27,7 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n             Some(it) => it,\n             None => return Vec::new(),\n         };\n-    let krate = match module.krate(db) {\n-        Some(it) => it,\n-        None => return Vec::new(),\n-    };\n+    let krate = module.krate();\n     vec![krate.crate_id()]\n }\n "}, {"sha": "dbd1af597693aabc70ced21bcfce8b3bb2055568", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cd6aa370667783292de3bc580e0503a409e453/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=c9cd6aa370667783292de3bc580e0503a409e453", "patch": "@@ -120,7 +120,7 @@ impl NameDefinition {\n                 return SearchScope::new(res);\n             }\n             if vis.as_str() == \"pub\" {\n-                let krate = self.container.krate(db).unwrap();\n+                let krate = self.container.krate();\n                 let crate_graph = db.crate_graph();\n                 for crate_id in crate_graph.iter() {\n                     let mut crate_deps = crate_graph.dependencies(crate_id);"}]}