{"sha": "ca78e2428e25524831231263c579e390f7dbd1e3", "node_id": "C_kwDOAAsO6NoAKGNhNzhlMjQyOGUyNTUyNDgzMTIzMTI2M2M1NzllMzkwZjdkYmQxZTM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-30T16:36:05Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-31T17:08:05Z"}, "message": "Add lint `swap_ptr_to_ref`", "tree": {"sha": "6e0d140df8d64749611e0b569c2105295133d36c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e0d140df8d64749611e0b569c2105295133d36c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca78e2428e25524831231263c579e390f7dbd1e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca78e2428e25524831231263c579e390f7dbd1e3", "html_url": "https://github.com/rust-lang/rust/commit/ca78e2428e25524831231263c579e390f7dbd1e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca78e2428e25524831231263c579e390f7dbd1e3/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "html_url": "https://github.com/rust-lang/rust/commit/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd"}], "stats": {"total": 203, "additions": 203, "deletions": 0}, "files": [{"sha": "731d5cac3330bfddc664e03e2bde02ea4a30d777", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -3753,6 +3753,7 @@ Released 2018-09-13\n [`suspicious_operation_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_operation_groupings\n [`suspicious_splitn`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_splitn\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n+[`swap_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#swap_ptr_to_ref\n [`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr"}, {"sha": "58f8ea7b997f93daab87d6dc396c25d0776c7c62", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -292,6 +292,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n     LintId::of(swap::ALMOST_SWAPPED),\n     LintId::of(swap::MANUAL_SWAP),\n+    LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n     LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n     LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n     LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),"}, {"sha": "e04d9f4fb9027e153df0ca6475063a97e882b8c5", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -497,6 +497,7 @@ store.register_lints(&[\n     suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n     swap::ALMOST_SWAPPED,\n     swap::MANUAL_SWAP,\n+    swap_ptr_to_ref::SWAP_PTR_TO_REF,\n     tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n     temporary_assignment::TEMPORARY_ASSIGNMENT,\n     to_digit_is_some::TO_DIGIT_IS_SOME,"}, {"sha": "43ced5070f17e472d5651ab3ce2d5f966ea72437", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -32,4 +32,5 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+    LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n ])"}, {"sha": "81a231cbebece02ac23aa44166b2869a2cbb296d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -380,6 +380,7 @@ mod strlen_on_c_strings;\n mod suspicious_operation_groupings;\n mod suspicious_trait_impl;\n mod swap;\n+mod swap_ptr_to_ref;\n mod tabs_in_doc_comments;\n mod temporary_assignment;\n mod to_digit_is_some;\n@@ -913,6 +914,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(get_first::GetFirst));\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n+    store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "75d3b040c968f9b3f47889d9a164203e4357a1b6", "filename": "clippy_lints/src/swap_ptr_to_ref.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -0,0 +1,80 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::{match_def_path, path_def_id, paths};\n+use rustc_errors::Applicability;\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{Span, SyntaxContext};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `core::mem::swap` where either parameter is derived from a pointer\n+    ///\n+    /// ### Why is this bad?\n+    /// When at least one parameter to `swap` is derived from a pointer it may overlap with the\n+    /// other. This would then lead to undefined behavior.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// unsafe fn swap(x: &[*mut u32], y: &[*mut u32]) {\n+    ///     for (&x, &y) in x.iter().zip(y) {\n+    ///         core::mem::swap(&mut *x, &mut *y);\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// unsafe fn swap(x: &[*mut u32], y: &[*mut u32]) {\n+    ///     for (&x, &y) in x.iter().zip(y) {\n+    ///         core::ptr::swap(x, y);\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub SWAP_PTR_TO_REF,\n+    suspicious,\n+    \"call to `mem::swap` using pointer derived references\"\n+}\n+declare_lint_pass!(SwapPtrToRef => [SWAP_PTR_TO_REF]);\n+\n+impl LateLintPass<'_> for SwapPtrToRef {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, e: &Expr<'_>) {\n+        if let ExprKind::Call(fn_expr, [arg1, arg2]) = e.kind\n+            && let Some(fn_id) = path_def_id(cx, fn_expr)\n+            && match_def_path(cx, fn_id, &paths::MEM_SWAP)\n+            && let ctxt = e.span.ctxt()\n+            && let (from_ptr1, arg1_span) = is_ptr_to_ref(cx, arg1, ctxt)\n+            && let (from_ptr2, arg2_span) = is_ptr_to_ref(cx, arg2, ctxt)\n+            && (from_ptr1 || from_ptr2)\n+        {\n+            span_lint_and_then(\n+                cx,\n+                SWAP_PTR_TO_REF,\n+                e.span,\n+                \"call to `core::mem::swap` with a parameter derived from a raw pointer\",\n+                |diag| {\n+                    if !((from_ptr1 && arg1_span.is_none()) || (from_ptr2 && arg2_span.is_none())) {\n+                        let mut app = Applicability::MachineApplicable;\n+                        let snip1 = snippet_with_context(cx, arg1_span.unwrap_or(arg1.span), ctxt, \"..\", &mut app).0;\n+                        let snip2 = snippet_with_context(cx, arg2_span.unwrap_or(arg2.span), ctxt, \"..\", &mut app).0;\n+                        diag.span_suggestion(e.span, \"use ptr::swap\", format!(\"core::ptr::swap({}, {})\", snip1, snip2), app);\n+                    }\n+                }\n+            );\n+        }\n+    }\n+}\n+\n+/// Checks if the expression converts a mutable pointer to a mutable reference. If it is, also\n+/// returns the span of the pointer expression if it's suitable for making a suggestion.\n+fn is_ptr_to_ref(cx: &LateContext<'_>, e: &Expr<'_>, ctxt: SyntaxContext) -> (bool, Option<Span>) {\n+    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, borrowed_expr) = e.kind\n+        && let ExprKind::Unary(UnOp::Deref, derefed_expr) = borrowed_expr.kind\n+        && cx.typeck_results().expr_ty(derefed_expr).is_unsafe_ptr()\n+    {\n+        (true, (borrowed_expr.span.ctxt() == ctxt || derefed_expr.span.ctxt() == ctxt).then(|| derefed_expr.span))\n+    } else {\n+        (false, None)\n+    }\n+}"}, {"sha": "89789c3d8513538179011a8f850d0ed021f1c7eb", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -73,6 +73,7 @@ pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LATE_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"LateLintPass\"];\n #[cfg(feature = \"internal\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n+pub const MEM_SWAP: [&str; 3] = [\"core\", \"mem\", \"swap\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n /// Preferably use the diagnostic item `sym::Option` where possible"}, {"sha": "596b6ee919bb458c2ef71a9fdd8415bdfc6b1071", "filename": "tests/ui/swap_ptr_to_ref.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap_ptr_to_ref.fixed?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+#![warn(clippy::swap_ptr_to_ref)]\n+\n+use core::ptr::addr_of_mut;\n+\n+fn main() {\n+    let mut x = 0u32;\n+    let y: *mut _ = &mut x;\n+    let z: *mut _ = &mut x;\n+\n+    unsafe {\n+        core::ptr::swap(y, z);\n+        core::ptr::swap(y, &mut x);\n+        core::ptr::swap(&mut x, y);\n+        core::ptr::swap(addr_of_mut!(x), addr_of_mut!(x));\n+    }\n+\n+    let y = &mut x;\n+    let mut z = 0u32;\n+    let z = &mut z;\n+\n+    core::mem::swap(y, z);\n+}"}, {"sha": "282f571211d957cbddfd5c2dc525f1713bbcbaad", "filename": "tests/ui/swap_ptr_to_ref.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap_ptr_to_ref.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+#![warn(clippy::swap_ptr_to_ref)]\n+\n+use core::ptr::addr_of_mut;\n+\n+fn main() {\n+    let mut x = 0u32;\n+    let y: *mut _ = &mut x;\n+    let z: *mut _ = &mut x;\n+\n+    unsafe {\n+        core::mem::swap(&mut *y, &mut *z);\n+        core::mem::swap(&mut *y, &mut x);\n+        core::mem::swap(&mut x, &mut *y);\n+        core::mem::swap(&mut *addr_of_mut!(x), &mut *addr_of_mut!(x));\n+    }\n+\n+    let y = &mut x;\n+    let mut z = 0u32;\n+    let z = &mut z;\n+\n+    core::mem::swap(y, z);\n+}"}, {"sha": "401ce070869a230c434fe7ed6d4ca594550df348", "filename": "tests/ui/swap_ptr_to_ref.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap_ptr_to_ref.stderr?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -0,0 +1,28 @@\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:13:9\n+   |\n+LL |         core::mem::swap(&mut *y, &mut *z);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(y, z)`\n+   |\n+   = note: `-D clippy::swap-ptr-to-ref` implied by `-D warnings`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:14:9\n+   |\n+LL |         core::mem::swap(&mut *y, &mut x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(y, &mut x)`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:15:9\n+   |\n+LL |         core::mem::swap(&mut x, &mut *y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(&mut x, y)`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:16:9\n+   |\n+LL |         core::mem::swap(&mut *addr_of_mut!(x), &mut *addr_of_mut!(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(addr_of_mut!(x), addr_of_mut!(x))`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "66ea7c6529bd2b2bc6170b400351b4bc8692bc56", "filename": "tests/ui/swap_ptr_to_ref_unfixable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap_ptr_to_ref_unfixable.rs?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -0,0 +1,18 @@\n+#![warn(clippy::swap_ptr_to_ref)]\n+\n+macro_rules! addr_of_mut_to_ref {\n+    ($e:expr) => {\n+        &mut *core::ptr::addr_of_mut!($e)\n+    };\n+}\n+\n+fn main() {\n+    let mut x = 0u32;\n+    let y: *mut _ = &mut x;\n+\n+    unsafe {\n+        core::mem::swap(addr_of_mut_to_ref!(x), &mut *y);\n+        core::mem::swap(&mut *y, addr_of_mut_to_ref!(x));\n+        core::mem::swap(addr_of_mut_to_ref!(x), addr_of_mut_to_ref!(x));\n+    }\n+}"}, {"sha": "c261205d556e49225122c8be41e7a46a2e6832a5", "filename": "tests/ui/swap_ptr_to_ref_unfixable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca78e2428e25524831231263c579e390f7dbd1e3/tests%2Fui%2Fswap_ptr_to_ref_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap_ptr_to_ref_unfixable.stderr?ref=ca78e2428e25524831231263c579e390f7dbd1e3", "patch": "@@ -0,0 +1,22 @@\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref_unfixable.rs:14:9\n+   |\n+LL |         core::mem::swap(addr_of_mut_to_ref!(x), &mut *y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::swap-ptr-to-ref` implied by `-D warnings`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref_unfixable.rs:15:9\n+   |\n+LL |         core::mem::swap(&mut *y, addr_of_mut_to_ref!(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref_unfixable.rs:16:9\n+   |\n+LL |         core::mem::swap(addr_of_mut_to_ref!(x), addr_of_mut_to_ref!(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}