{"sha": "1a238589833cd3bb2eb9e7746735baa9948c09ee", "node_id": "C_kwDOAAsO6NoAKDFhMjM4NTg5ODMzY2QzYmIyZWI5ZTc3NDY3MzViYWE5OTQ4YzA5ZWU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-11T22:47:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-24T15:57:15Z"}, "message": "resolve: Rename some expansion def scope methods", "tree": {"sha": "1c2ded474b29263665f338e243d536b5da06ab53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c2ded474b29263665f338e243d536b5da06ab53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a238589833cd3bb2eb9e7746735baa9948c09ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a238589833cd3bb2eb9e7746735baa9948c09ee", "html_url": "https://github.com/rust-lang/rust/commit/1a238589833cd3bb2eb9e7746735baa9948c09ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a238589833cd3bb2eb9e7746735baa9948c09ee/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "html_url": "https://github.com/rust-lang/rust/commit/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "e6ff31842953c0896a744bc98c27d1194d82c965", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=1a238589833cd3bb2eb9e7746735baa9948c09ee", "patch": "@@ -152,20 +152,17 @@ impl<'a> Resolver<'a> {\n         module\n     }\n \n-    crate fn macro_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n-        let def_id = match expn_id.expn_data().macro_def_id {\n-            Some(def_id) => def_id,\n-            None => {\n-                return expn_id\n-                    .as_local()\n-                    .and_then(|expn_id| self.ast_transform_scopes.get(&expn_id))\n-                    .unwrap_or(&self.graph_root);\n-            }\n-        };\n-        self.macro_def_scope_from_def_id(def_id)\n+    crate fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n+        match expn_id.expn_data().macro_def_id {\n+            Some(def_id) => self.macro_def_scope(def_id),\n+            None => expn_id\n+                .as_local()\n+                .and_then(|expn_id| self.ast_transform_scopes.get(&expn_id))\n+                .unwrap_or(&self.graph_root),\n+        }\n     }\n \n-    crate fn macro_def_scope_from_def_id(&mut self, def_id: DefId) -> Module<'a> {\n+    crate fn macro_def_scope(&mut self, def_id: DefId) -> Module<'a> {\n         if let Some(id) = def_id.as_local() {\n             self.local_macro_def_scopes[&id]\n         } else {"}, {"sha": "7556f69c39116f7993abeb3d7b87fc6d2dce04eb", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=1a238589833cd3bb2eb9e7746735baa9948c09ee", "patch": "@@ -427,7 +427,7 @@ impl<'a> Resolver<'a> {\n             match ident.span.glob_adjust(module.expansion, glob_import.span) {\n                 Some(Some(def)) => {\n                     tmp_parent_scope =\n-                        ParentScope { module: self.macro_def_scope(def), ..*parent_scope };\n+                        ParentScope { module: self.expn_def_scope(def), ..*parent_scope };\n                     adjusted_parent_scope = &tmp_parent_scope;\n                 }\n                 Some(None) => {}\n@@ -585,7 +585,7 @@ impl<'a> Resolver<'a> {\n         for import in module.glob_importers.borrow_mut().iter() {\n             let mut ident = key.ident;\n             let scope = match ident.span.reverse_glob_adjust(module.expansion, import.span) {\n-                Some(Some(def)) => self.macro_def_scope(def),\n+                Some(Some(def)) => self.expn_def_scope(def),\n                 Some(None) => import.parent_scope.module,\n                 None => continue,\n             };\n@@ -1364,7 +1364,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             .collect::<Vec<_>>();\n         for (mut key, binding) in bindings {\n             let scope = match key.ident.span.reverse_glob_adjust(module.expansion, import.span) {\n-                Some(Some(def)) => self.r.macro_def_scope(def),\n+                Some(Some(def)) => self.r.expn_def_scope(def),\n                 Some(None) => import.parent_scope.module,\n                 None => continue,\n             };"}, {"sha": "e53be0ee005c4a89d959fc66789e07c4939346f9", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=1a238589833cd3bb2eb9e7746735baa9948c09ee", "patch": "@@ -2018,7 +2018,7 @@ impl<'a> Resolver<'a> {\n         derive_fallback_lint_id: Option<NodeId>,\n     ) -> Option<(Module<'a>, Option<NodeId>)> {\n         if !module.expansion.outer_expn_is_descendant_of(*ctxt) {\n-            return Some((self.macro_def_scope(ctxt.remove_mark()), None));\n+            return Some((self.expn_def_scope(ctxt.remove_mark()), None));\n         }\n \n         if let ModuleKind::Block(..) = module.kind {\n@@ -2087,7 +2087,7 @@ impl<'a> Resolver<'a> {\n             ModuleOrUniformRoot::Module(m) => {\n                 if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {\n                     tmp_parent_scope =\n-                        ParentScope { module: self.macro_def_scope(def), ..*parent_scope };\n+                        ParentScope { module: self.expn_def_scope(def), ..*parent_scope };\n                     adjusted_parent_scope = &tmp_parent_scope;\n                 }\n             }\n@@ -2160,7 +2160,7 @@ impl<'a> Resolver<'a> {\n             ctxt.adjust(ExpnId::root())\n         };\n         let module = match mark {\n-            Some(def) => self.macro_def_scope(def),\n+            Some(def) => self.expn_def_scope(def),\n             None => {\n                 debug!(\n                     \"resolve_crate_root({:?}): found no mark (ident.span = {:?})\",\n@@ -2185,7 +2185,7 @@ impl<'a> Resolver<'a> {\n     fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {\n         let mut module = self.get_module(module.nearest_parent_mod());\n         while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {\n-            let parent = module.parent.unwrap_or_else(|| self.macro_def_scope(ctxt.remove_mark()));\n+            let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));\n             module = self.get_module(parent.nearest_parent_mod());\n         }\n         module"}, {"sha": "ba7999e49eb9307cab9a45307b6cdf59cc65fa9b", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a238589833cd3bb2eb9e7746735baa9948c09ee/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=1a238589833cd3bb2eb9e7746735baa9948c09ee", "patch": "@@ -298,15 +298,14 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         )?;\n \n         let span = invoc.span();\n+        let def_id = res.opt_def_id();\n         invoc_id.set_expn_data(\n             ext.expn_data(\n                 parent_scope.expansion,\n                 span,\n                 fast_print_path(path),\n-                res.opt_def_id(),\n-                res.opt_def_id().map(|macro_def_id| {\n-                    self.macro_def_scope_from_def_id(macro_def_id).nearest_parent_mod()\n-                }),\n+                def_id,\n+                def_id.map(|def_id| self.macro_def_scope(def_id).nearest_parent_mod()),\n             ),\n             self.create_stable_hashing_context(),\n         );"}]}