{"sha": "eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNTBmZmQyMzQzZWVmM2FmY2ZiZjA2OTZkMDRmY2MzZmU4YTA3NWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-11T21:56:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-19T17:53:06Z"}, "message": "rustc_trans: Clean up some style in back::link\n\n* Add some logging here and there\n* Move some `err` + `abort_if_errors` to just using `fatal`\n* Clean up some line-lengths", "tree": {"sha": "27501c2b85517e87f67968402e257cc47ee56851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27501c2b85517e87f67968402e257cc47ee56851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a", "html_url": "https://github.com/rust-lang/rust/commit/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2854b38932e9cc3aa5ac09b55b59845919860c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2854b38932e9cc3aa5ac09b55b59845919860c4", "html_url": "https://github.com/rust-lang/rust/commit/e2854b38932e9cc3aa5ac09b55b59845919860c4"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "54a0bcd22b765ceb1a5b8da78228ba7a9b6a41c8", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a", "patch": "@@ -546,6 +546,7 @@ fn link_rlib<'a>(sess: &'a Session,\n                  trans: Option<&CrateTranslation>, // None == no metadata/bytecode\n                  obj_filename: &Path,\n                  out_filename: &Path) -> ArchiveBuilder<'a> {\n+    info!(\"preparing rlib from {:?} to {:?}\", obj_filename, out_filename);\n     let handler = &sess.diagnostic().handler;\n     let config = ArchiveConfig {\n         handler: handler,\n@@ -560,9 +561,7 @@ fn link_rlib<'a>(sess: &'a Session,\n \n     for &(ref l, kind) in &*sess.cstore.get_used_libraries().borrow() {\n         match kind {\n-            cstore::NativeStatic => {\n-                ab.add_native_library(&l[..]).unwrap();\n-            }\n+            cstore::NativeStatic => ab.add_native_library(&l).unwrap(),\n             cstore::NativeFramework | cstore::NativeUnknown => {}\n         }\n     }\n@@ -613,10 +612,8 @@ fn link_rlib<'a>(sess: &'a Session,\n             }) {\n                 Ok(..) => {}\n                 Err(e) => {\n-                    sess.err(&format!(\"failed to write {}: {}\",\n-                                     metadata.display(),\n-                                     e));\n-                    sess.abort_if_errors();\n+                    sess.fatal(&format!(\"failed to write {}: {}\",\n+                                        metadata.display(), e));\n                 }\n             }\n             ab.add_file(&metadata).unwrap();\n@@ -658,9 +655,8 @@ fn link_rlib<'a>(sess: &'a Session,\n                                                     &bc_data_deflated) {\n                     Ok(()) => {}\n                     Err(e) => {\n-                        sess.err(&format!(\"failed to write compressed bytecode: \\\n-                                          {}\", e));\n-                        sess.abort_if_errors()\n+                        sess.fatal(&format!(\"failed to write compressed \\\n+                                             bytecode: {}\", e));\n                     }\n                 };\n \n@@ -794,6 +790,8 @@ fn link_staticlib(sess: &Session, obj_filename: &Path, out_filename: &Path) {\n // links to all upstream files as well.\n fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n                  obj_filename: &Path, out_filename: &Path) {\n+    info!(\"preparing dylib? ({}) from {:?} to {:?}\", dylib, obj_filename,\n+          out_filename);\n     let tmpdir = TempDir::new(\"rustc\").ok().expect(\"needs a temp dir\");\n \n     // The invocations of cc share some flags across platforms\n@@ -827,7 +825,7 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     sess.abort_if_errors();\n \n     // Invoke the system linker\n-    debug!(\"{:?}\", &cmd);\n+    info!(\"{:?}\", &cmd);\n     let prog = time(sess.time_passes(), \"running linker\", (), |()| cmd.output());\n     match prog {\n         Ok(prog) => {\n@@ -841,14 +839,11 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n                 sess.note(str::from_utf8(&output[..]).unwrap());\n                 sess.abort_if_errors();\n             }\n-            debug!(\"linker stderr:\\n{}\", String::from_utf8(prog.stderr).unwrap());\n-            debug!(\"linker stdout:\\n{}\", String::from_utf8(prog.stdout).unwrap());\n+            info!(\"linker stderr:\\n{}\", String::from_utf8(prog.stderr).unwrap());\n+            info!(\"linker stdout:\\n{}\", String::from_utf8(prog.stdout).unwrap());\n         },\n         Err(e) => {\n-            sess.err(&format!(\"could not exec the linker `{}`: {}\",\n-                             pname,\n-                             e));\n-            sess.abort_if_errors();\n+            sess.fatal(&format!(\"could not exec the linker `{}`: {}\", pname, e));\n         }\n     }\n \n@@ -858,10 +853,7 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     if sess.target.target.options.is_like_osx && sess.opts.debuginfo != NoDebugInfo {\n         match Command::new(\"dsymutil\").arg(out_filename).output() {\n             Ok(..) => {}\n-            Err(e) => {\n-                sess.err(&format!(\"failed to run dsymutil: {}\", e));\n-                sess.abort_if_errors();\n-            }\n+            Err(e) => sess.fatal(&format!(\"failed to run dsymutil: {}\", e)),\n         }\n     }\n }\n@@ -1157,11 +1149,9 @@ fn add_upstream_rust_crates(cmd: &mut Linker, sess: &Session,\n                 match fs::copy(&cratepath, &dst) {\n                     Ok(..) => {}\n                     Err(e) => {\n-                        sess.err(&format!(\"failed to copy {} to {}: {}\",\n-                                         cratepath.display(),\n-                                         dst.display(),\n-                                         e));\n-                        sess.abort_if_errors();\n+                        sess.fatal(&format!(\"failed to copy {} to {}: {}\",\n+                                            cratepath.display(),\n+                                            dst.display(), e));\n                     }\n                 }\n                 // Fix up permissions of the copy, as fs::copy() preserves\n@@ -1174,10 +1164,8 @@ fn add_upstream_rust_crates(cmd: &mut Linker, sess: &Session,\n                 }) {\n                     Ok(..) => {}\n                     Err(e) => {\n-                        sess.err(&format!(\"failed to chmod {} when preparing \\\n-                                          for LTO: {}\", dst.display(),\n-                                         e));\n-                        sess.abort_if_errors();\n+                        sess.fatal(&format!(\"failed to chmod {} when preparing \\\n+                                             for LTO: {}\", dst.display(), e));\n                     }\n                 }\n                 let handler = &sess.diagnostic().handler;"}]}