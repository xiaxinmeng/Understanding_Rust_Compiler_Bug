{"sha": "cc65ebd0d29a79a2a1d3fd77e679c763837b33c4", "node_id": "C_kwDOAAsO6NoAKGNjNjVlYmQwZDI5YTc5YTJhMWQzZmQ3N2U2NzljNzYzODM3YjMzYzQ", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-17T17:42:08Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T17:35:34Z"}, "message": "Make use of ObligationCtxt", "tree": {"sha": "fdfb71b3c2aeb3e2949c2ee6e4a18c5ba2513832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdfb71b3c2aeb3e2949c2ee6e4a18c5ba2513832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPyXeYACgkQ0XoHIV9o\n5xPmFhAAgxI+udLutMx7JZpt72CUiqh9QBOFJBFR7ezIu70/eNdIzV7LjDdVpKIN\naH30Yi0IEHaZG41SX2CygP5k+3taZbQGNMneRbja8sHuFZUJaLR3NCnv3RhbxPbl\nyboKTcOX4OCCyVlcqzbobPzHEUA6oXAnlr2helIJbWRtBAudokKcll4xPE3d2o9F\naEX4XbGnjrP1JlBiApe01vO467bv5kcGNmKyAgpOZxW+dpIpa7n3dIlwt0cyHOFQ\nOqzNozO3cAdBEuweL5JvB6ltu3fgg36hJWIawQSQ8H2eIVkEoaVaX0S7uATeqZEp\nwQlWEe5fpaBZVTPTLMK7yN7Cu/wdBs1v1AVWByVzmIArRJlWjXR3p2Wkpatve+le\n0MXMkkjyA5q7OcWa9+2tRiA974LrqLj556quP4m2JUx7QKOpzkMZFmFfqCcqMbCu\nueINSJx8mgj2WrYdv7XG8FeOcpzUXWWV+KB45G9DIpbSm704xKdKH4ZbnElAAQG5\nmfgxqidesXCzk6cEsoWQZ5p7A9Le0ufOc/VMauGruWJr8omlPKteWTa8fabNObQz\nhi7jWnomJgxbP05EWIx3a9qVBzDBc9yKVle0IUZkGfUrCRjn/jvElR2RSk6NlX4X\njuZy5BFfW4EmdyGM+e1nKTihrzsfL1ke+/JfmUymYuTYIca2t/Y=\n=9PHM\n-----END PGP SIGNATURE-----", "payload": "tree fdfb71b3c2aeb3e2949c2ee6e4a18c5ba2513832\nparent aa7edf70739528746d55915b96c63bd3ec43f3a7\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676655728 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676828134 +0100\n\nMake use of ObligationCtxt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4", "html_url": "https://github.com/rust-lang/rust/commit/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa7edf70739528746d55915b96c63bd3ec43f3a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7edf70739528746d55915b96c63bd3ec43f3a7", "html_url": "https://github.com/rust-lang/rust/commit/aa7edf70739528746d55915b96c63bd3ec43f3a7"}], "stats": {"total": 87, "additions": 33, "deletions": 54}, "files": [{"sha": "0e9f5fb3dae653191f1803bef29650c140e5bc24", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=cc65ebd0d29a79a2a1d3fd77e679c763837b33c4", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_infer::traits::FulfillmentError;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::parse::feature_err;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -226,8 +227,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         name: Ident,\n         self_ty: Ty<'tcx>,\n-        candidates: &[DefId],\n-        unsatisfied_predicates: Vec<ty::Predicate<'tcx>>,\n+        candidates: Vec<(DefId, (DefId, DefId))>,\n+        fulfillment_errors: Vec<FulfillmentError<'tcx>>,\n         span: Span,\n     ) -> ErrorGuaranteed {\n         let tcx = self.tcx();\n@@ -245,16 +246,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         };\n \n-        if unsatisfied_predicates.is_empty() {\n+        if fulfillment_errors.is_empty() {\n             // FIXME(fmease): Copied from `rustc_hir_typeck::method::probe`. Deduplicate.\n \n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             let type_candidates = candidates\n                 .iter()\n                 .take(limit)\n-                .map(|candidate| {\n-                    format!(\"- `{}`\", tcx.at(span).type_of(candidate).subst_identity())\n-                })\n+                .map(|&(impl_, _)| format!(\"- `{}`\", tcx.at(span).type_of(impl_).subst_identity()))\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\");\n             let additional_types = if candidates.len() > limit {\n@@ -348,8 +347,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // FIXME(fmease): `rustc_hir_typeck::method::suggest` uses a `skip_list` to filter out some bounds.\n         // I would do the same here if it didn't mean more code duplication.\n-        let mut bounds: Vec<_> = unsatisfied_predicates\n+        let mut bounds: Vec<_> = fulfillment_errors\n             .into_iter()\n+            .map(|error| error.root_obligation.predicate)\n             .filter_map(format_pred)\n             .map(|(p, _)| format!(\"`{}`\", p))\n             .collect();"}, {"sha": "d3468f03eedc59222ad87a68bb7bc0a4a66ab50e", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 26, "deletions": 47, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc65ebd0d29a79a2a1d3fd77e679c763837b33c4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=cc65ebd0d29a79a2a1d3fd77e679c763837b33c4", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n+use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::middle::stability::AllowUnstable;\n@@ -42,13 +42,11 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n-use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::{\n     report_object_safety_error, suggestions::NextTypeParamName,\n };\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::wf::object_region_bounds;\n-use rustc_trait_selection::traits::{astconv_object_safety_violations, NormalizeExt};\n+use rustc_trait_selection::traits::{self, astconv_object_safety_violations, ObligationCtxt};\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n@@ -1948,7 +1946,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             Res::Err\n         };\n \n-        // Check if we have an enum variant.\n+        // Check if we have an enum variant or an inherent associated type.\n         let mut variant_resolution = None;\n         if let Some(adt_def) = self.probe_adt(span, qself_ty) {\n             if adt_def.is_enum() {\n@@ -2221,62 +2219,37 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let param_env = tcx.param_env(block.owner.to_def_id());\n         let cause = ObligationCause::misc(span, block.owner.def_id);\n-        let mut unsatisfied_predicates = Vec::new();\n+        let mut fulfillment_errors = Vec::new();\n \n         for &(impl_, (assoc_item, def_scope)) in &candidates {\n             let infcx = tcx.infer_ctxt().ignoring_regions().build();\n+            let ocx = ObligationCtxt::new(&infcx);\n \n             let impl_ty = tcx.type_of(impl_);\n             let impl_substs = self.fresh_item_substs(impl_, &infcx);\n             let impl_ty = impl_ty.subst(tcx, impl_substs);\n-\n-            let InferOk { value: impl_ty, obligations } =\n-                infcx.at(&cause, param_env).normalize(impl_ty);\n+            let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n             // Check that the Self-types can be related.\n-            let Ok(InferOk { obligations: sub_obligations, value: () }) = infcx\n-                .at(&ObligationCause::dummy(), param_env)\n-                .define_opaque_types(false)\n-                .sup(impl_ty, self_ty)\n-            else {\n+            // FIXME(fmease): Should we use `eq` here?\n+            if ocx.sup(&ObligationCause::dummy(), param_env, impl_ty, self_ty).is_err() {\n                 continue;\n-            };\n+            }\n \n             // Check whether the impl imposes obligations we have to worry about.\n             let impl_bounds = tcx.predicates_of(impl_);\n             let impl_bounds = impl_bounds.instantiate(tcx, impl_substs);\n \n-            let InferOk { value: impl_bounds, obligations: norm_obligations } =\n-                infcx.at(&cause, param_env).normalize(impl_bounds);\n+            let impl_bounds = ocx.normalize(&cause, param_env, impl_bounds);\n \n             let impl_obligations =\n                 traits::predicates_for_generics(|_, _| cause.clone(), param_env, impl_bounds);\n \n-            let candidate_obligations = impl_obligations\n-                .chain(norm_obligations.into_iter())\n-                .chain(obligations.iter().cloned());\n-\n-            let mut matches = true;\n-\n-            // Evaluate those obligations to see if they might possibly hold.\n-            for o in candidate_obligations {\n-                let o = infcx.resolve_vars_if_possible(o);\n-                if !infcx.predicate_may_hold(&o) {\n-                    matches = false;\n-                    unsatisfied_predicates.push(o.predicate);\n-                }\n-            }\n+            ocx.register_obligations(impl_obligations);\n \n-            // Evaluate those obligations to see if they might possibly hold.\n-            for o in sub_obligations {\n-                let o = infcx.resolve_vars_if_possible(o);\n-                if !infcx.predicate_may_hold(&o) {\n-                    matches = false;\n-                    unsatisfied_predicates.push(o.predicate);\n-                }\n-            }\n-\n-            if !matches {\n+            let errors = ocx.select_where_possible();\n+            if !errors.is_empty() {\n+                fulfillment_errors = errors;\n                 continue;\n             }\n \n@@ -2286,19 +2259,25 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 bug!(\"unreachable: `lookup_inherent_assoc_ty` is only called on ADTs\");\n             };\n \n-            let item_substs =\n-                self.create_substs_for_associated_item(span, assoc_item, segment, adt_substs);\n-            // FIXME(inherent_associated_types): Check if the obligations arising from the\n-            // where-clause & the bounds on the associated type and its parameters hold.\n+            let item_substs = self.create_substs_for_associated_item(\n+                span, assoc_item, segment,\n+                // FIXME(fmease, #107468, #105305): Don't use `adt_substs` here but `impl_substs`.\n+                adt_substs,\n+            );\n+\n+            // FIXME(fmease, #106722): Check if the bounds on the parameters of the\n+            // associated type hold, if any.\n             let ty = tcx.type_of(assoc_item).subst(tcx, item_substs);\n+\n+            // FIXME(fmease): Don't return early here! There might be multiple applicable candidates.\n             return Ok(Some((ty, assoc_item)));\n         }\n \n         Err(self.complain_about_inherent_assoc_type_not_found(\n             name,\n             self_ty,\n-            &candidates.into_iter().map(|(impl_, _)| impl_).collect::<Vec<_>>(),\n-            unsatisfied_predicates,\n+            candidates,\n+            fulfillment_errors,\n             span,\n         ))\n     }"}]}