{"sha": "34ff9aa83fa014f77ffe8fa5a12268a033c95694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZmY5YWE4M2ZhMDE0Zjc3ZmZlOGZhNWExMjI2OGEwMzNjOTU2OTQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-01T00:29:57Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-01T14:56:13Z"}, "message": "store the normalized types of statics in MIR Lvalues\n\nThe types of statics, like all other items, are stored in the tcx\nunnormalized. This is necessarily so, because\n    a) Item types other than statics have generics, which can't be\nnormalized.\n    b) Eager normalization causes undesirable on-demand dependencies.\n\nKeeping with the principle that MIR lvalues require no normalization in\norder to interpret, this patch stores the normalized type of the statics\nin the Lvalue and reads it to get the lvalue type.\n\nFixes #39367.", "tree": {"sha": "0a320a50f2e1b3b9904bbe4aee2125ceaeed7ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a320a50f2e1b3b9904bbe4aee2125ceaeed7ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ff9aa83fa014f77ffe8fa5a12268a033c95694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ff9aa83fa014f77ffe8fa5a12268a033c95694", "html_url": "https://github.com/rust-lang/rust/commit/34ff9aa83fa014f77ffe8fa5a12268a033c95694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ff9aa83fa014f77ffe8fa5a12268a033c95694/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8708273b6d7ee506e7d03051778d520cfaa50f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8708273b6d7ee506e7d03051778d520cfaa50f", "html_url": "https://github.com/rust-lang/rust/commit/ca8708273b6d7ee506e7d03051778d520cfaa50f"}], "stats": {"total": 116, "additions": 100, "deletions": 16}, "files": [{"sha": "a7e89e77f34018e3cfa5f347d0f720736a6a0d8b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -816,12 +816,20 @@ pub enum Lvalue<'tcx> {\n     Local(Local),\n \n     /// static or static mut variable\n-    Static(DefId),\n+    Static(Box<Static<'tcx>>),\n \n     /// projection out of an lvalue (access a field, deref a pointer, etc)\n     Projection(Box<LvalueProjection<'tcx>>),\n }\n \n+/// The def-id of a static, along with its normalized type (which is\n+/// stored to avoid requiring normalization when reading MIR).\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable)]\n+pub struct Static<'tcx> {\n+    pub def_id: DefId,\n+    pub ty: Ty<'tcx>,\n+}\n+\n /// The `Projection` data structure defines things of the form `B.x`\n /// or `*B` or `B[index]`. Note that it is parameterized because it is\n /// shared between `Constant` and `Lvalue`. See the aliases\n@@ -911,8 +919,8 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n \n         match *self {\n             Local(id) => write!(fmt, \"{:?}\", id),\n-            Static(def_id) =>\n-                write!(fmt, \"{}\", ty::tls::with(|tcx| tcx.item_path_str(def_id))),\n+            Static(box self::Static { def_id, ty }) =>\n+                write!(fmt, \"({}: {:?})\", ty::tls::with(|tcx| tcx.item_path_str(def_id)), ty),\n             Projection(ref data) =>\n                 match data.elem {\n                     ProjectionElem::Downcast(ref adt_def, index) =>"}, {"sha": "638655aee15aa0ca2ba9de8e8c91f15e478e7745", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -125,8 +125,8 @@ impl<'tcx> Lvalue<'tcx> {\n         match *self {\n             Lvalue::Local(index) =>\n                 LvalueTy::Ty { ty: mir.local_decls[index].ty },\n-            Lvalue::Static(def_id) =>\n-                LvalueTy::Ty { ty: tcx.item_type(def_id) },\n+            Lvalue::Static(ref data) =>\n+                LvalueTy::Ty { ty: data.ty },\n             Lvalue::Projection(ref proj) =>\n                 proj.base.ty(mir, tcx).projection_ty(tcx, &proj.elem),\n         }"}, {"sha": "1172172a845c217631e91c4b79c975877eb3d5ed", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -154,6 +154,13 @@ macro_rules! make_mir_visitor {\n                 self.super_lvalue(lvalue, context, location);\n             }\n \n+            fn visit_static(&mut self,\n+                            static_: & $($mutability)* Static<'tcx>,\n+                            context: LvalueContext<'tcx>,\n+                            location: Location) {\n+                self.super_static(static_, context, location);\n+            }\n+\n             fn visit_projection(&mut self,\n                                 lvalue: & $($mutability)* LvalueProjection<'tcx>,\n                                 context: LvalueContext<'tcx>,\n@@ -559,15 +566,27 @@ macro_rules! make_mir_visitor {\n                 match *lvalue {\n                     Lvalue::Local(_) => {\n                     }\n-                    Lvalue::Static(ref $($mutability)* def_id) => {\n-                        self.visit_def_id(def_id, location);\n+                    Lvalue::Static(ref $($mutability)* static_) => {\n+                        self.visit_static(static_, context, location);\n                     }\n                     Lvalue::Projection(ref $($mutability)* proj) => {\n                         self.visit_projection(proj, context, location);\n                     }\n                 }\n             }\n \n+            fn super_static(&mut self,\n+                            static_: & $($mutability)* Static<'tcx>,\n+                            _context: LvalueContext<'tcx>,\n+                            location: Location) {\n+                let Static {\n+                    ref $($mutability)* def_id,\n+                    ref $($mutability)* ty,\n+                } = *static_;\n+                self.visit_def_id(def_id, location);\n+                self.visit_ty(ty);\n+            }\n+\n             fn super_projection(&mut self,\n                                 proj: & $($mutability)* LvalueProjection<'tcx>,\n                                 context: LvalueContext<'tcx>,\n@@ -837,4 +856,3 @@ impl<'tcx> LvalueContext<'tcx> {\n         self.is_mutating_use() || self.is_nonmutating_use()\n     }\n }\n-"}, {"sha": "ec412d4e9c62ea547e199eba343e8acd86f7b134", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block.and(Lvalue::Local(index))\n             }\n             ExprKind::StaticRef { id } => {\n-                block.and(Lvalue::Static(id))\n+                block.and(Lvalue::Static(Box::new(Static { def_id: id, ty: expr.ty })))\n             }\n \n             ExprKind::Array { .. } |"}, {"sha": "c2faf27412c6934e2e411cfa638378f2e8d8124b", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -126,8 +126,18 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         debug!(\"sanitize_lvalue: {:?}\", lvalue);\n         match *lvalue {\n             Lvalue::Local(index) => LvalueTy::Ty { ty: self.mir.local_decls[index].ty },\n-            Lvalue::Static(def_id) =>\n-                LvalueTy::Ty { ty: self.tcx().item_type(def_id) },\n+            Lvalue::Static(box Static { def_id, ty: sty }) => {\n+                let sty = self.sanitize_type(lvalue, sty);\n+                let ty = self.tcx().item_type(def_id);\n+                let ty = self.cx.normalize(&ty);\n+                if let Err(terr) = self.cx.eq_types(self.last_span, ty, sty) {\n+                    span_mirbug!(\n+                        self, lvalue, \"bad static type ({:?}: {:?}): {:?}\",\n+                        ty, sty, terr);\n+                }\n+                LvalueTy::Ty { ty: sty }\n+\n+            },\n             Lvalue::Projection(ref proj) => {\n                 let base_ty = self.sanitize_lvalue(&proj.base, location);\n                 if let LvalueTy::Ty { ty } = base_ty {"}, {"sha": "fb2ef8f60c44998bff57156dd8dd80c41bbc1c9d", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -382,11 +382,11 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n \n         let lvalue = match *lvalue {\n             mir::Lvalue::Local(_)  => bug!(), // handled above\n-            mir::Lvalue::Static(def_id) => {\n+            mir::Lvalue::Static(box mir::Static { def_id, ty }) => {\n                 ConstLvalue {\n                     base: Base::Static(consts::get_static(self.ccx, def_id)),\n                     llextra: ptr::null_mut(),\n-                    ty: lvalue.ty(self.mir, tcx).to_ty(tcx)\n+                    ty: self.monomorphize(&ty),\n                 }\n             }\n             mir::Lvalue::Projection(ref projection) => {"}, {"sha": "49e1e3855571b6bcf9f6fe9ea9f35c96dee97112", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -304,10 +304,9 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n         let result = match *lvalue {\n             mir::Lvalue::Local(_) => bug!(), // handled above\n-            mir::Lvalue::Static(def_id) => {\n-                let const_ty = self.monomorphized_lvalue_ty(lvalue);\n+            mir::Lvalue::Static(box mir::Static { def_id, ty }) => {\n                 LvalueRef::new_sized(consts::get_static(ccx, def_id),\n-                                     LvalueTy::from_ty(const_ty),\n+                                     LvalueTy::from_ty(self.monomorphize(&ty)),\n                                      Alignment::AbiAligned)\n             },\n             mir::Lvalue::Projection(box mir::Projection {"}, {"sha": "3e72efada84e621083976722579b8386081ca291", "filename": "src/test/run-pass/issue-39367.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Ftest%2Frun-pass%2Fissue-39367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff9aa83fa014f77ffe8fa5a12268a033c95694/src%2Ftest%2Frun-pass%2Fissue-39367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-39367.rs?ref=34ff9aa83fa014f77ffe8fa5a12268a033c95694", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+struct ArenaSet<U: Deref, V=<U as Deref>::Target>(U, &'static V)\n+    where V: 'static + ?Sized;\n+\n+static Z: [u8; 4] = [1,2,3,4];\n+\n+fn arena() -> &'static ArenaSet<Vec<u8>> {\n+    fn __static_ref_initialize() -> ArenaSet<Vec<u8>> {\n+        ArenaSet(vec![], &Z)\n+    }\n+    unsafe {\n+        use std::sync::{Once, ONCE_INIT};\n+        fn require_sync<T: Sync>(_: &T) { }\n+        unsafe fn __stability() -> &'static ArenaSet<Vec<u8>> {\n+            use std::mem::transmute;\n+            use std::boxed::Box;\n+            static mut DATA: *const ArenaSet<Vec<u8>> = 0 as *const ArenaSet<Vec<u8>>;\n+\n+            static mut ONCE: Once = ONCE_INIT;\n+            ONCE.call_once(|| {\n+                DATA = transmute\n+                    ::<Box<ArenaSet<Vec<u8>>>, *const ArenaSet<Vec<u8>>>\n+                    (Box::new(__static_ref_initialize()));\n+            });\n+\n+            &*DATA\n+        }\n+        let static_ref = __stability();\n+        require_sync(static_ref);\n+        static_ref\n+    }\n+}\n+\n+fn main() {\n+    let &ArenaSet(ref u, v) = arena();\n+    assert!(u.is_empty());\n+    assert_eq!(v, Z);\n+}"}]}