{"sha": "96e3103cfec430ef03dee1a9125f2f519c7ebc22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTMxMDNjZmVjNDMwZWYwM2RlZTFhOTEyNWYyZjUxOWM3ZWJjMjI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-18T15:50:28Z"}, "committer": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-31T15:53:01Z"}, "message": "Improve Path and PathBuf docs", "tree": {"sha": "143dad2397b365213622147c42f6c12affdd74fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143dad2397b365213622147c42f6c12affdd74fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e3103cfec430ef03dee1a9125f2f519c7ebc22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e3103cfec430ef03dee1a9125f2f519c7ebc22", "html_url": "https://github.com/rust-lang/rust/commit/96e3103cfec430ef03dee1a9125f2f519c7ebc22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e3103cfec430ef03dee1a9125f2f519c7ebc22/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d6520f97ba9062e6a6103f4038357e928d2f851", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6520f97ba9062e6a6103f4038357e928d2f851", "html_url": "https://github.com/rust-lang/rust/commit/9d6520f97ba9062e6a6103f4038357e928d2f851"}], "stats": {"total": 183, "additions": 149, "deletions": 34}, "files": [{"sha": "f8b816d548a49e28f9ae07565ee74cb0538c13b2", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96e3103cfec430ef03dee1a9125f2f519c7ebc22/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3103cfec430ef03dee1a9125f2f519c7ebc22/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=96e3103cfec430ef03dee1a9125f2f519c7ebc22", "patch": "@@ -1511,8 +1511,11 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// Returns an iterator over the entries within a directory.\n ///\n-/// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n-/// be encountered after an iterator is initially constructed.\n+/// The iterator will yield instances of [`io::Result`]`<`[`DirEntry`]`>`.\n+/// New errors may be encountered after an iterator is initially constructed.\n+///\n+/// [`io::Result`]: ../io/type.Result.html\n+/// [`DirEntry`]: struct.DirEntry.html\n ///\n /// # Platform-specific behavior\n ///"}, {"sha": "ac750d5009f49c2d32f8cbd51dcdaac5bf0b6c86", "filename": "src/libstd/path.rs", "status": "modified", "additions": 144, "deletions": 32, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/96e3103cfec430ef03dee1a9125f2f519c7ebc22/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e3103cfec430ef03dee1a9125f2f519c7ebc22/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=96e3103cfec430ef03dee1a9125f2f519c7ebc22", "patch": "@@ -986,11 +986,16 @@ impl<'a> cmp::Ord for Components<'a> {\n // Basic types and traits\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// An owned, mutable path (akin to `String`).\n+/// An owned, mutable path (akin to [`String`]).\n ///\n-/// This type provides methods like `push` and `set_extension` that mutate the\n-/// path in place. It also implements `Deref` to `Path`, meaning that all\n-/// methods on `Path` slices are available on `PathBuf` values as well.\n+/// This type provides methods like [`push`] and [`set_extension`] that mutate\n+/// the path in place. It also implements [`Deref`] to [`Path`], meaning that\n+/// all methods on [`Path`] slices are available on `PathBuf` values as well.\n+///\n+/// [`String`]: ../string/struct.String.html\n+/// [`Path`]: struct.Path.html\n+/// [`push`]: struct.PathBuf.html#method.push\n+/// [`set_extension`]: struct.PathBuf.html#method.set_extension\n ///\n /// More details about the overall approach can be found in\n /// the module documentation.\n@@ -1017,12 +1022,31 @@ impl PathBuf {\n     }\n \n     /// Allocates an empty `PathBuf`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let path = PathBuf::new();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> PathBuf {\n         PathBuf { inner: OsString::new() }\n     }\n \n-    /// Coerces to a `Path` slice.\n+    /// Coerces to a [`Path`] slice.\n+    ///\n+    /// [`Path`]: struct.Path.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::{Path, PathBuf};\n+    ///\n+    /// let p = PathBuf::from(\"/test\");\n+    /// assert_eq!(Path::new(\"/test\"), p.as_path());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_path(&self) -> &Path {\n         self\n@@ -1087,10 +1111,26 @@ impl PathBuf {\n         self.inner.push(path);\n     }\n \n-    /// Truncate `self` to `self.parent()`.\n+    /// Truncate `self` to [`self.parent()`].\n     ///\n-    /// Returns false and does nothing if `self.file_name()` is `None`.\n+    /// Returns false and does nothing if [`self.file_name()`] is `None`.\n     /// Otherwise, returns `true`.\n+    ///\n+    /// [`self.parent()`]: struct.PathBuf.html#method.parent\n+    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::{Path, PathBuf};\n+    ///\n+    /// let mut p = PathBuf::from(\"/test/test.rs\");\n+    ///\n+    /// p.pop();\n+    /// assert_eq!(Path::new(\"/test\"), p.as_path());\n+    /// p.pop();\n+    /// assert_eq!(Path::new(\"/\"), p.as_path());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pop(&mut self) -> bool {\n         match self.parent().map(|p| p.as_u8_slice().len()) {\n@@ -1102,11 +1142,13 @@ impl PathBuf {\n         }\n     }\n \n-    /// Updates `self.file_name()` to `file_name`.\n+    /// Updates [`self.file_name()`] to `file_name`.\n     ///\n-    /// If `self.file_name()` was `None`, this is equivalent to pushing\n+    /// If [`self.file_name()`] was `None`, this is equivalent to pushing\n     /// `file_name`.\n     ///\n+    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1133,12 +1175,29 @@ impl PathBuf {\n         self.push(file_name);\n     }\n \n-    /// Updates `self.extension()` to `extension`.\n+    /// Updates [`self.extension()`] to `extension`.\n+    ///\n+    /// If [`self.file_name()`] is `None`, does nothing and returns `false`.\n+    ///\n+    /// Otherwise, returns `true`; if [`self.extension()`] is `None`, the\n+    /// extension is added; otherwise it is replaced.\n+    ///\n+    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    /// [`self.extension()`]: struct.PathBuf.html#method.extension\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::{Path, PathBuf};\n     ///\n-    /// If `self.file_name()` is `None`, does nothing and returns `false`.\n+    /// let mut p = PathBuf::from(\"/feel/the\");\n     ///\n-    /// Otherwise, returns `true`; if `self.extension()` is `None`, the extension\n-    /// is added; otherwise it is replaced.\n+    /// p.set_extension(\"force\");\n+    /// assert_eq!(Path::new(\"/feel/the.force\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"dark_side\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark_side\"), p.as_path());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {\n         self._set_extension(extension.as_ref())\n@@ -1163,7 +1222,18 @@ impl PathBuf {\n         true\n     }\n \n-    /// Consumes the `PathBuf`, yielding its internal `OsString` storage.\n+    /// Consumes the `PathBuf`, yielding its internal [`OsString`] storage.\n+    ///\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let p = PathBuf::from(\"/the/head\");\n+    /// let os_str = p.into_os_string();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_os_string(self) -> OsString {\n         self.inner\n@@ -1301,7 +1371,7 @@ impl Into<OsString> for PathBuf {\n     }\n }\n \n-/// A slice of a path (akin to `str`).\n+/// A slice of a path (akin to [`str`]).\n ///\n /// This type supports a number of operations for inspecting a path, including\n /// breaking the path into its components (separated by `/` or `\\`, depending on\n@@ -1310,7 +1380,10 @@ impl Into<OsString> for PathBuf {\n /// the module documentation.\n ///\n /// This is an *unsized* type, meaning that it must always be used behind a\n-/// pointer like `&` or `Box`.\n+/// pointer like `&` or [`Box`].\n+///\n+/// [`str`]: ../primitive.str.html\n+/// [`Box`]: ../boxed/struct.Box.html\n ///\n /// # Examples\n ///\n@@ -1372,7 +1445,9 @@ impl Path {\n         unsafe { mem::transmute(s.as_ref()) }\n     }\n \n-    /// Yields the underlying `OsStr` slice.\n+    /// Yields the underlying [`OsStr`] slice.\n+    ///\n+    /// [`OsStr`]: ../ffi/struct.OsStr.html\n     ///\n     /// # Examples\n     ///\n@@ -1387,10 +1462,12 @@ impl Path {\n         &self.inner\n     }\n \n-    /// Yields a `&str` slice if the `Path` is valid unicode.\n+    /// Yields a [`&str`] slice if the `Path` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n     ///\n+    /// [`&str`]: ../primitive.str.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1404,10 +1481,12 @@ impl Path {\n         self.inner.to_str()\n     }\n \n-    /// Converts a `Path` to a `Cow<str>`.\n+    /// Converts a `Path` to a [`Cow<str>`].\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n     ///\n+    /// [`Cow<str>`]: ../borrow/enum.Cow.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1421,7 +1500,9 @@ impl Path {\n         self.inner.to_string_lossy()\n     }\n \n-    /// Converts a `Path` to an owned `PathBuf`.\n+    /// Converts a `Path` to an owned [`PathBuf`].\n+    ///\n+    /// [`PathBuf`]: struct.PathBuf.html\n     ///\n     /// # Examples\n     ///\n@@ -1569,6 +1650,18 @@ impl Path {\n     ///\n     /// If `base` is not a prefix of `self` (i.e. `starts_with`\n     /// returns `false`), returns `Err`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::Path;\n+    ///\n+    /// let path = Path::new(\"/test/haha/foo.txt\");\n+    ///\n+    /// assert_eq!(path.strip_prefix(\"/test\"), Ok(Path::new(\"haha/foo.txt\")));\n+    /// assert_eq!(path.strip_prefix(\"test\").is_ok(), false);\n+    /// assert_eq!(path.strip_prefix(\"/haha\").is_ok(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"path_strip_prefix\")]\n     pub fn strip_prefix<'a, P: ?Sized>(&'a self, base: &'a P)\n                                        -> Result<&'a Path, StripPrefixError>\n@@ -1630,7 +1723,9 @@ impl Path {\n         iter_after(self.components().rev(), child.components().rev()).is_some()\n     }\n \n-    /// Extracts the stem (non-extension) portion of `self.file_name()`.\n+    /// Extracts the stem (non-extension) portion of [`self.file_name()`].\n+    ///\n+    /// [`self.file_name()`]: struct.Path.html#method.file_name\n     ///\n     /// The stem is:\n     ///\n@@ -1653,7 +1748,9 @@ impl Path {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n \n-    /// Extracts the extension of `self.file_name()`, if possible.\n+    /// Extracts the extension of [`self.file_name()`], if possible.\n+    ///\n+    /// [`self.file_name()`]: struct.Path.html#method.file_name\n     ///\n     /// The extension is:\n     ///\n@@ -1676,9 +1773,12 @@ impl Path {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.and(after))\n     }\n \n-    /// Creates an owned `PathBuf` with `path` adjoined to `self`.\n+    /// Creates an owned [`PathBuf`] with `path` adjoined to `self`.\n+    ///\n+    /// See [`PathBuf::push`] for more details on what it means to adjoin a path.\n     ///\n-    /// See `PathBuf::push` for more details on what it means to adjoin a path.\n+    /// [`PathBuf`]: struct.PathBuf.html\n+    /// [`PathBuf::push`]: struct.PathBuf.html#method.push\n     ///\n     /// # Examples\n     ///\n@@ -1698,9 +1798,12 @@ impl Path {\n         buf\n     }\n \n-    /// Creates an owned `PathBuf` like `self` but with the given file name.\n+    /// Creates an owned [`PathBuf`] like `self` but with the given file name.\n     ///\n-    /// See `PathBuf::set_file_name` for more details.\n+    /// See [`PathBuf::set_file_name`] for more details.\n+    ///\n+    /// [`PathBuf`]: struct.PathBuf.html\n+    /// [`PathBuf::set_file_name`]: struct.PathBuf.html#method.set_file_name\n     ///\n     /// # Examples\n     ///\n@@ -1721,9 +1824,12 @@ impl Path {\n         buf\n     }\n \n-    /// Creates an owned `PathBuf` like `self` but with the given extension.\n+    /// Creates an owned [`PathBuf`] like `self` but with the given extension.\n+    ///\n+    /// See [`PathBuf::set_extension`] for more details.\n     ///\n-    /// See `PathBuf::set_extension` for more details.\n+    /// [`PathBuf`]: struct.PathBuf.html\n+    /// [`PathBuf::set_extension`]: struct.PathBuf.html#method.set_extension\n     ///\n     /// # Examples\n     ///\n@@ -1771,7 +1877,9 @@ impl Path {\n         }\n     }\n \n-    /// Produce an iterator over the path's components viewed as `OsStr` slices.\n+    /// Produce an iterator over the path's components viewed as [`OsStr`] slices.\n+    ///\n+    /// [`OsStr`]: ../ffi/struct.OsStr.html\n     ///\n     /// # Examples\n     ///\n@@ -1790,9 +1898,11 @@ impl Path {\n         Iter { inner: self.components() }\n     }\n \n-    /// Returns an object that implements `Display` for safely printing paths\n+    /// Returns an object that implements [`Display`] for safely printing paths\n     /// that may contain non-Unicode data.\n     ///\n+    /// [`Display`]: ../fmt/trait.Display.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1854,11 +1964,13 @@ impl Path {\n \n     /// Returns an iterator over the entries within a directory.\n     ///\n-    /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n-    /// be encountered after an iterator is initially constructed.\n+    /// The iterator will yield instances of [`io::Result`]`<`[`DirEntry`]`>`. New\n+    /// errors may be encountered after an iterator is initially constructed.\n     ///\n     /// This is an alias to [`fs::read_dir`].\n     ///\n+    /// [`io::Result`]: ../io/type.Result.html\n+    /// [`DirEntry`]: ../fs/struct.DirEntry.html\n     /// [`fs::read_dir`]: ../fs/fn.read_dir.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn read_dir(&self) -> io::Result<fs::ReadDir> {"}]}