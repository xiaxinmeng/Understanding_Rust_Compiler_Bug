{"sha": "a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OTQ1MTM3ZGMwZTY1ZWNiMmFlOGQwZGE0ODIxYWZhODBhMzY3YmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-07T15:32:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-07T15:32:40Z"}, "message": "Merge #4364\n\n4364: Touch up assists public API r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0a036aeb11785ab638c809614daa66e5dd1133b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a036aeb11785ab638c809614daa66e5dd1133b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetCoYCRBK7hj4Ov3rIwAAdHIIAK3QZJIrZ8uYXYRjZT6QdYFI\nkdJ7g1mDpVuPbQc/WP9JV1nlq7S90VzdplvM3+i5e1I9Nq0i7mWKOWR6HiXiGfI0\nB+nbKJHrFLYhYhKeeG5ZzjlmKuoR1TvzJzgKAkFlgjOp7a6uEoUNzDJMVZeF5gR3\nieooJgDuQsrdJEuWZdYI5EIuLuFNCvUEM4d8PRt7hB8LyBuOcY16/XyBaUdpTvqC\n1R9jkptDBO+kQqgd0402VzbYtSd6yTkD5PFqgogBF5njh+w6ntZ7vLzgLtKSuzED\nzaq9TJ3/MwPcL/+nAIWO92/G4yz9VjouKscLdsIoPLT+foMyHfCugM7NPulsu9o=\n=xTLh\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a036aeb11785ab638c809614daa66e5dd1133b4\nparent c7e305731c922a2d32eda89ff22cb636059bc4e7\nparent 1e790ea3149f085e49cb66e6a052920f72da01e9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588865560 +0000\ncommitter GitHub <noreply@github.com> 1588865560 +0000\n\nMerge #4364\n\n4364: Touch up assists public API r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "html_url": "https://github.com/rust-lang/rust/commit/a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e305731c922a2d32eda89ff22cb636059bc4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e305731c922a2d32eda89ff22cb636059bc4e7", "html_url": "https://github.com/rust-lang/rust/commit/c7e305731c922a2d32eda89ff22cb636059bc4e7"}, {"sha": "1e790ea3149f085e49cb66e6a052920f72da01e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e790ea3149f085e49cb66e6a052920f72da01e9", "html_url": "https://github.com/rust-lang/rust/commit/1e790ea3149f085e49cb66e6a052920f72da01e9"}], "stats": {"total": 139, "additions": 69, "deletions": 70}, "files": [{"sha": "3085c4330c313af32b06b68fbc880fe34538037c", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n+use crate::{Assist, AssistId, GroupLabel, ResolvedAssist};\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n ///\n@@ -76,8 +76,7 @@ impl<'a> AssistContext<'a> {\n         find_node_at_offset(self.source_file.syntax(), self.offset())\n     }\n     pub(crate) fn find_node_at_offset_with_descend<N: AstNode>(&self) -> Option<N> {\n-        self.sema\n-            .find_node_at_offset_with_descend(self.source_file.syntax(), self.frange.range.start())\n+        self.sema.find_node_at_offset_with_descend(self.source_file.syntax(), self.offset())\n     }\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n         find_covering_element(self.source_file.syntax(), self.frange.range)\n@@ -91,7 +90,7 @@ impl<'a> AssistContext<'a> {\n pub(crate) struct Assists {\n     resolve: bool,\n     file: FileId,\n-    buf: Vec<(AssistLabel, Option<SourceChange>)>,\n+    buf: Vec<(Assist, Option<SourceChange>)>,\n }\n \n impl Assists {\n@@ -102,7 +101,7 @@ impl Assists {\n         Assists { resolve: false, file: ctx.frange.file_id, buf: Vec::new() }\n     }\n \n-    pub(crate) fn finish_unresolved(self) -> Vec<AssistLabel> {\n+    pub(crate) fn finish_unresolved(self) -> Vec<Assist> {\n         assert!(!self.resolve);\n         self.finish()\n             .into_iter()\n@@ -117,7 +116,7 @@ impl Assists {\n         assert!(self.resolve);\n         self.finish()\n             .into_iter()\n-            .map(|(label, edit)| ResolvedAssist { label, source_change: edit.unwrap() })\n+            .map(|(label, edit)| ResolvedAssist { assist: label, source_change: edit.unwrap() })\n             .collect()\n     }\n \n@@ -128,7 +127,7 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = AssistLabel::new(id, label.into(), None, target);\n+        let label = Assist::new(id, label.into(), None, target);\n         self.add_impl(label, f)\n     }\n     pub(crate) fn add_group(\n@@ -139,10 +138,10 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = AssistLabel::new(id, label.into(), Some(group.clone()), target);\n+        let label = Assist::new(id, label.into(), Some(group.clone()), target);\n         self.add_impl(label, f)\n     }\n-    fn add_impl(&mut self, label: AssistLabel, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n+    fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n         let change_label = label.label.clone();\n         let source_change = if self.resolve {\n             let mut builder = AssistBuilder::new(self.file);\n@@ -156,7 +155,7 @@ impl Assists {\n         Some(())\n     }\n \n-    fn finish(mut self) -> Vec<(AssistLabel, Option<SourceChange>)> {\n+    fn finish(mut self) -> Vec<(Assist, Option<SourceChange>)> {\n         self.buf.sort_by_key(|(label, _edit)| label.target.len());\n         self.buf\n     }"}, {"sha": "810784ad57535a6d0eb3840d50b435632e2aa168", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     }\n \n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n-    let cursor_position = ctx.frange.range.start();\n+    let cursor_position = ctx.offset();\n \n     let target = if_expr.syntax().text_range();\n     acc.add(AssistId(\"convert_to_guarded_return\"), \"Convert to guarded return\", target, |edit| {"}, {"sha": "ac3e53c2734a9f05bb2e604e03d36a6a85507911", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -26,7 +26,7 @@ use crate::{\n pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let tree: ast::UseTree = ctx.find_node_at_offset()?;\n     let mut rewriter = SyntaxRewriter::default();\n-    let mut offset = ctx.frange.range.start();\n+    let mut offset = ctx.offset();\n \n     if let Some(use_item) = tree.syntax().parent().and_then(ast::UseItem::cast) {\n         let (merged, to_delete) = next_prev()"}, {"sha": "d4e38aa6a592c162bbf4ad1cf20a371ddb9922be", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n         InExpr(TextSize),\n         InPat(TextSize),\n     }\n-    let cursor_pos = ctx.frange.range.start();\n+    let cursor_pos = ctx.offset();\n     let cursor_pos = if current_expr.syntax().text_range().contains(cursor_pos) {\n         CursorPos::InExpr(current_text_range.end() - cursor_pos)\n     } else {"}, {"sha": "b2757e50ce709ebe042ccf870eacd5300c43764e", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     if new_tree == use_tree {\n         return None;\n     }\n-    let cursor = ctx.frange.range.start();\n+    let cursor = ctx.offset();\n \n     let target = colon_colon.text_range();\n     acc.add(AssistId(\"split_import\"), \"Split import\", target, |edit| {"}, {"sha": "b6dc7cb1bfc10166be3900ddfbd4ac9757409d2f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -29,8 +29,11 @@ pub(crate) use crate::assist_context::{AssistContext, Assists};\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub struct AssistId(pub &'static str);\n \n+#[derive(Clone, Debug)]\n+pub struct GroupLabel(pub String);\n+\n #[derive(Debug, Clone)]\n-pub struct AssistLabel {\n+pub struct Assist {\n     pub id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n@@ -40,56 +43,53 @@ pub struct AssistLabel {\n     pub target: TextRange,\n }\n \n-#[derive(Clone, Debug)]\n-pub struct GroupLabel(pub String);\n+#[derive(Debug, Clone)]\n+pub struct ResolvedAssist {\n+    pub assist: Assist,\n+    pub source_change: SourceChange,\n+}\n+\n+impl Assist {\n+    /// Return all the assists applicable at the given position.\n+    ///\n+    /// Assists are returned in the \"unresolved\" state, that is only labels are\n+    /// returned, without actual edits.\n+    pub fn unresolved(db: &RootDatabase, range: FileRange) -> Vec<Assist> {\n+        let sema = Semantics::new(db);\n+        let ctx = AssistContext::new(sema, range);\n+        let mut acc = Assists::new_unresolved(&ctx);\n+        handlers::all().iter().for_each(|handler| {\n+            handler(&mut acc, &ctx);\n+        });\n+        acc.finish_unresolved()\n+    }\n+\n+    /// Return all the assists applicable at the given position.\n+    ///\n+    /// Assists are returned in the \"resolved\" state, that is with edit fully\n+    /// computed.\n+    pub fn resolved(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n+        let sema = Semantics::new(db);\n+        let ctx = AssistContext::new(sema, range);\n+        let mut acc = Assists::new_resolved(&ctx);\n+        handlers::all().iter().for_each(|handler| {\n+            handler(&mut acc, &ctx);\n+        });\n+        acc.finish_resolved()\n+    }\n \n-impl AssistLabel {\n     pub(crate) fn new(\n         id: AssistId,\n         label: String,\n         group: Option<GroupLabel>,\n         target: TextRange,\n-    ) -> AssistLabel {\n+    ) -> Assist {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        AssistLabel { id, label, group, target }\n+        Assist { id, label, group, target }\n     }\n }\n \n-#[derive(Debug, Clone)]\n-pub struct ResolvedAssist {\n-    pub label: AssistLabel,\n-    pub source_change: SourceChange,\n-}\n-\n-/// Return all the assists applicable at the given position.\n-///\n-/// Assists are returned in the \"unresolved\" state, that is only labels are\n-/// returned, without actual edits.\n-pub fn unresolved_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n-    let sema = Semantics::new(db);\n-    let ctx = AssistContext::new(sema, range);\n-    let mut acc = Assists::new_unresolved(&ctx);\n-    handlers::all().iter().for_each(|handler| {\n-        handler(&mut acc, &ctx);\n-    });\n-    acc.finish_unresolved()\n-}\n-\n-/// Return all the assists applicable at the given position.\n-///\n-/// Assists are returned in the \"resolved\" state, that is with edit fully\n-/// computed.\n-pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n-    let sema = Semantics::new(db);\n-    let ctx = AssistContext::new(sema, range);\n-    let mut acc = Assists::new_resolved(&ctx);\n-    handlers::all().iter().for_each(|handler| {\n-        handler(&mut acc, &ctx);\n-    });\n-    acc.finish_resolved()\n-}\n-\n mod handlers {\n     use crate::{AssistContext, Assists};\n "}, {"sha": "a3eacb8f11540897e8cda3208325b25710059408", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -11,7 +11,7 @@ use test_utils::{\n     RangeOrOffset,\n };\n \n-use crate::{handlers::Handler, resolved_assists, AssistContext, Assists};\n+use crate::{handlers::Handler, Assist, AssistContext, Assists};\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -41,16 +41,16 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = crate::tests::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = resolved_assists(&db, frange)\n+    let mut assist = Assist::resolved(&db, frange)\n         .into_iter()\n-        .find(|assist| assist.label.id.0 == assist_id)\n+        .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                resolved_assists(&db, frange)\n+                Assist::resolved(&db, frange)\n                     .into_iter()\n-                    .map(|assist| assist.label.id.0)\n+                    .map(|assist| assist.assist.id.0)\n                     .collect::<Vec<_>>()\n                     .join(\", \")\n             )\n@@ -119,7 +119,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n             assert_eq_text!(after, &actual);\n         }\n         (Some(assist), ExpectedResult::Target(target)) => {\n-            let range = assist.label.target;\n+            let range = assist.assist.target;\n             assert_eq_text!(&text_without_caret[range], target);\n         }\n         (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n@@ -136,14 +136,14 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = resolved_assists(&db, frange);\n+    let assists = Assist::resolved(&db, frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(\n-        assists.next().expect(\"expected assist\").label.label,\n+        assists.next().expect(\"expected assist\").assist.label,\n         \"Change visibility to pub(crate)\"\n     );\n-    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n+    assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Add `#[derive]`\");\n }\n \n #[test]\n@@ -159,9 +159,9 @@ fn assist_order_if_expr() {\n     let (range, before) = extract_range(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range };\n-    let assists = resolved_assists(&db, frange);\n+    let assists = Assist::resolved(&db, frange);\n     let mut assists = assists.iter();\n \n-    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n+    assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n+    assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Replace with match\");\n }"}, {"sha": "915199bd878ac07e5565036657f9b3c1cfea8e07", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9945137dc0e65ecb2ae8d0da4821afa80a367bd/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "patch": "@@ -472,12 +472,12 @@ impl Analysis {\n     /// position.\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| {\n-            ra_assists::resolved_assists(db, frange)\n+            ra_assists::Assist::resolved(db, frange)\n                 .into_iter()\n                 .map(|assist| Assist {\n-                    id: assist.label.id,\n-                    label: assist.label.label,\n-                    group_label: assist.label.group.map(|it| it.0),\n+                    id: assist.assist.id,\n+                    label: assist.assist.label,\n+                    group_label: assist.assist.group.map(|it| it.0),\n                     source_change: assist.source_change,\n                 })\n                 .collect()"}]}