{"sha": "2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNGU3YzE1N2ViM2FiOWNkODI3MGMzZTlmZmZlZGQwM2YwY2IwNTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T01:43:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T23:42:51Z"}, "message": "rt: Export a scheduler API", "tree": {"sha": "c7d792cd47cf1ea8c0f67aea22b69e34eb35a960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7d792cd47cf1ea8c0f67aea22b69e34eb35a960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "html_url": "https://github.com/rust-lang/rust/commit/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a1aa2649ad030f189c54245ee182a0aa6983ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a1aa2649ad030f189c54245ee182a0aa6983ed", "html_url": "https://github.com/rust-lang/rust/commit/f2a1aa2649ad030f189c54245ee182a0aa6983ed"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "53093190efe1c07dfa9c853320158bffd5a9c203", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "patch": "@@ -431,16 +431,43 @@ nano_time(uint64_t *ns) {\n     *ns = t.time_ns();\n }\n \n+extern \"C\" CDECL rust_sched_id\n+rust_get_sched_id() {\n+    rust_task *task = rust_task_thread::get_task();\n+    return task->sched->get_id();\n+}\n+\n+extern \"C\" CDECL rust_sched_id\n+rust_new_sched(size_t threads) {\n+    rust_task *task = rust_task_thread::get_task();\n+    A(task->thread, threads > 0,\n+      \"Can't create a scheduler with no threads, silly!\");\n+    return task->kernel->create_scheduler(threads);\n+}\n+\n extern \"C\" CDECL rust_task_id\n get_task_id() {\n     rust_task *task = rust_task_thread::get_task();\n     return task->user.id;\n }\n \n+static rust_task_id\n+new_task_common(rust_scheduler *sched, rust_task *parent) {\n+    return sched->create_task(parent, NULL);\n+}\n+\n extern \"C\" CDECL rust_task_id\n new_task() {\n     rust_task *task = rust_task_thread::get_task();\n-    return task->sched->create_task(task, NULL);\n+    return new_task_common(task->sched, task);\n+}\n+\n+extern \"C\" CDECL rust_task_id\n+rust_new_task_in_sched(rust_sched_id id) {\n+    rust_task *task = rust_task_thread::get_task();\n+    rust_scheduler *sched = task->kernel->get_scheduler_by_id(id);\n+    // FIXME: What if we didn't get the scheduler?\n+    return new_task_common(sched, task);\n }\n \n extern \"C\" CDECL void"}, {"sha": "d014877c2786c540653c576e93111bf8e47908e7", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "patch": "@@ -59,10 +59,11 @@ void rust_kernel::free(void *mem) {\n rust_sched_id\n rust_kernel::create_scheduler(size_t num_threads) {\n     I(this, !sched_lock.lock_held_by_current_thread());\n+    rust_sched_id id;\n     rust_scheduler *sched;\n     {\n         scoped_lock with(sched_lock);\n-        rust_sched_id id = max_sched_id++;\n+        id = max_sched_id++;\n         K(srv, id != INTPTR_MAX, \"Hit the maximum scheduler id\");\n         sched = new (this, \"rust_scheduler\")\n             rust_scheduler(this, srv, num_threads, id);\n@@ -72,7 +73,7 @@ rust_kernel::create_scheduler(size_t num_threads) {\n         live_schedulers++;\n     }\n     sched->start_task_threads();\n-    return 0;\n+    return id;\n }\n \n rust_scheduler *"}, {"sha": "5a931cad348e8b4c216bc8f24e158f70155f9581", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "patch": "@@ -49,6 +49,8 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     // Called by each thread when it terminates. When all threads\n     // terminate the scheduler does as well.\n     void release_task_thread();\n+\n+    rust_sched_id get_id() { return id; }\n };\n \n #endif /* RUST_SCHEDULER_H */"}, {"sha": "e51d47065f6eb54d681360b6070e2ca3d8b79c70", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "patch": "@@ -24,6 +24,9 @@ rand_free\n rand_new\n rand_next\n refcount\n+rust_get_sched_id\n+rust_new_sched\n+rust_new_task_in_sched\n rust_path_is_dir\n rust_path_exists\n rust_getcwd"}, {"sha": "ba07bb2f3ce24899cb7c594aaa319a6d1b954d5d", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=2f4e7c157eb3ab9cd8270c3e9fffedd03f0cb055", "patch": "@@ -0,0 +1,36 @@\n+// Tests of the runtime's scheduler interface\n+\n+type sched_id = int;\n+type task_id = int;\n+\n+type task = *ctypes::void;\n+type closure = *ctypes::void;\n+\n+native mod rustrt {\n+    fn rust_new_sched(num_threads: ctypes::size_t) -> sched_id;\n+    fn rust_get_sched_id() -> sched_id;\n+    fn rust_new_task_in_sched(id: sched_id) -> task_id;\n+    fn start_task(id: task_id, f: closure);\n+}\n+\n+fn main() unsafe {\n+    let po = comm::port();\n+    let ch = comm::chan(po);\n+    let parent_sched_id = rustrt::rust_get_sched_id();\n+    #error(\"parent %?\", parent_sched_id);\n+    let num_threads = 1u;\n+    let new_sched_id = rustrt::rust_new_sched(num_threads);\n+    #error(\"new_sched_id %?\", new_sched_id);\n+    let new_task_id = rustrt::rust_new_task_in_sched(new_sched_id);\n+    let f = fn~() {\n+        let child_sched_id = rustrt::rust_get_sched_id();\n+        #error(\"child_sched_id %?\", child_sched_id);\n+        assert child_sched_id != parent_sched_id;\n+        assert child_sched_id == new_sched_id;\n+        comm::send(ch, ());\n+    };\n+    let fptr = unsafe::reinterpret_cast(ptr::addr_of(f));\n+    rustrt::start_task(new_task_id, fptr);\n+    unsafe::leak(f);\n+    comm::recv(po);\n+}\n\\ No newline at end of file"}]}