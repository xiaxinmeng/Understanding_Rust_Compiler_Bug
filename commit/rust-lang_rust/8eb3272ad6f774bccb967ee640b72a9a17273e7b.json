{"sha": "8eb3272ad6f774bccb967ee640b72a9a17273e7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjMyNzJhZDZmNzc0YmNjYjk2N2VlNjQwYjcyYTlhMTcyNzNlN2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T20:25:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T23:23:05Z"}, "message": "Use snippets in add function", "tree": {"sha": "0255efa99452c826308b41158b1db941d3f4543f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0255efa99452c826308b41158b1db941d3f4543f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb3272ad6f774bccb967ee640b72a9a17273e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb3272ad6f774bccb967ee640b72a9a17273e7b", "html_url": "https://github.com/rust-lang/rust/commit/8eb3272ad6f774bccb967ee640b72a9a17273e7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb3272ad6f774bccb967ee640b72a9a17273e7b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3acd3028d32b6cf099e8d5dffe435f15f241a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3acd3028d32b6cf099e8d5dffe435f15f241a2", "html_url": "https://github.com/rust-lang/rust/commit/9c3acd3028d32b6cf099e8d5dffe435f15f241a2"}], "stats": {"total": 115, "additions": 75, "deletions": 40}, "files": [{"sha": "69fede00fb1bd7d2cf5c69f8cc1c88bd49138b03", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 43, "deletions": 36, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=8eb3272ad6f774bccb967ee640b72a9a17273e7b", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{utils::render_snippet, AssistContext, AssistId, Assists};\n \n // Assist: add_function\n //\n@@ -33,7 +33,7 @@ use crate::{AssistContext, AssistId, Assists};\n // }\n //\n // fn bar(arg: &str, baz: Baz) {\n-//     todo!()\n+//     ${0:todo!()}\n // }\n //\n // ```\n@@ -58,18 +58,27 @@ pub(crate) fn add_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let function_builder = FunctionBuilder::from_call(&ctx, &call, &path, target_module)?;\n \n     let target = call.syntax().text_range();\n-    acc.add(AssistId(\"add_function\"), \"Add function\", target, |edit| {\n+    acc.add(AssistId(\"add_function\"), \"Add function\", target, |builder| {\n         let function_template = function_builder.render();\n-        edit.set_file(function_template.file);\n-        edit.set_cursor(function_template.cursor_offset);\n-        edit.insert(function_template.insert_offset, function_template.fn_def.to_string());\n+        builder.set_file(function_template.file);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                let snippet = render_snippet(\n+                    function_template.fn_def.syntax(),\n+                    function_template.placeholder_expr.syntax(),\n+                );\n+                builder.insert_snippet(cap, function_template.insert_offset, snippet)\n+            }\n+            None => builder\n+                .insert(function_template.insert_offset, function_template.fn_def.to_string()),\n+        }\n     })\n }\n \n struct FunctionTemplate {\n     insert_offset: TextSize,\n-    cursor_offset: TextSize,\n     fn_def: ast::SourceFile,\n+    placeholder_expr: ast::MacroCall,\n     file: FileId,\n }\n \n@@ -136,9 +145,7 @@ impl FunctionBuilder {\n \n         let placeholder_expr =\n             fn_def.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n-        let cursor_offset_from_fn_start = placeholder_expr.syntax().text_range().start();\n-        let cursor_offset = insert_offset + cursor_offset_from_fn_start;\n-        FunctionTemplate { insert_offset, cursor_offset, fn_def, file: self.file }\n+        FunctionTemplate { insert_offset, placeholder_expr, fn_def, file: self.file }\n     }\n }\n \n@@ -316,7 +323,7 @@ fn foo() {\n }\n \n fn bar() {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -343,7 +350,7 @@ impl Foo {\n }\n \n fn bar() {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -367,7 +374,7 @@ fn foo1() {\n }\n \n fn bar() {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \n fn foo2() {}\n@@ -393,7 +400,7 @@ mod baz {\n     }\n \n     fn bar() {\n-        <|>todo!()\n+        ${0:todo!()}\n     }\n }\n \",\n@@ -419,7 +426,7 @@ fn foo() {\n }\n \n fn bar(baz: Baz) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         );\n@@ -452,7 +459,7 @@ impl Baz {\n }\n \n fn bar(baz: Baz) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -473,7 +480,7 @@ fn foo() {\n }\n \n fn bar(arg: &str) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \"#,\n         )\n@@ -494,7 +501,7 @@ fn foo() {\n }\n \n fn bar(arg: char) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \"#,\n         )\n@@ -515,7 +522,7 @@ fn foo() {\n }\n \n fn bar(arg: i32) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -536,7 +543,7 @@ fn foo() {\n }\n \n fn bar(arg: u8) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -561,7 +568,7 @@ fn foo() {\n }\n \n fn bar(x: u8) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -584,7 +591,7 @@ fn foo() {\n }\n \n fn bar(worble: ()) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -613,7 +620,7 @@ fn baz() {\n }\n \n fn bar(foo: impl Foo) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -640,7 +647,7 @@ fn foo() {\n }\n \n fn bar(baz: &Baz) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -669,7 +676,7 @@ fn foo() {\n }\n \n fn bar(baz: Baz::Bof) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -692,7 +699,7 @@ fn foo<T>(t: T) {\n }\n \n fn bar<T>(t: T) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -723,7 +730,7 @@ fn foo() {\n }\n \n fn bar(arg: fn() -> Baz) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -748,7 +755,7 @@ fn foo() {\n }\n \n fn bar(closure: impl Fn(i64) -> i64) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -769,7 +776,7 @@ fn foo() {\n }\n \n fn bar(baz: ()) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -794,7 +801,7 @@ fn foo() {\n }\n \n fn bar(baz_1: Baz, baz_2: Baz) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -819,7 +826,7 @@ fn foo() {\n }\n \n fn bar(baz_1: Baz, baz_2: Baz, arg_1: &str, arg_2: &str) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \"#,\n         )\n@@ -839,7 +846,7 @@ fn foo() {\n             r\"\n mod bar {\n     pub(crate) fn my_fn() {\n-        <|>todo!()\n+        ${0:todo!()}\n     }\n }\n \n@@ -878,7 +885,7 @@ fn bar() {\n }\n \n fn baz(foo: foo::Foo) {\n-    <|>todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -902,7 +909,7 @@ mod bar {\n     fn something_else() {}\n \n     pub(crate) fn my_fn() {\n-        <|>todo!()\n+        ${0:todo!()}\n     }\n }\n \n@@ -930,7 +937,7 @@ fn foo() {\n mod bar {\n     mod baz {\n         pub(crate) fn my_fn() {\n-            <|>todo!()\n+            ${0:todo!()}\n         }\n     }\n }\n@@ -959,7 +966,7 @@ fn main() {\n \n \n pub(crate) fn bar() {\n-    <|>todo!()\n+    ${0:todo!()}\n }\",\n         )\n     }"}, {"sha": "1d82c245d0429b34a482a5e08dc7e30ec0b5e10a", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=8eb3272ad6f774bccb967ee640b72a9a17273e7b", "patch": "@@ -78,7 +78,7 @@ fn foo() {\n }\n \n fn bar(arg: &str, baz: Baz) {\n-    todo!()\n+    ${0:todo!()}\n }\n \n \"#####,"}, {"sha": "bb9749b06f2ab4f3d7da56feb7efab414d35a247", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=8eb3272ad6f774bccb967ee640b72a9a17273e7b", "patch": "@@ -1,18 +1,38 @@\n //! Assorted functions shared by several assists.\n pub(crate) mod insert_use;\n \n-use std::iter;\n+use std::{iter, ops};\n \n use hir::{Adt, Crate, Semantics, Trait, Type};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, make, NameOwner},\n-    AstNode, T,\n+    AstNode, SyntaxNode, T,\n };\n use rustc_hash::FxHashSet;\n \n pub(crate) use insert_use::insert_use_statement;\n \n+pub(crate) fn render_snippet(node: &SyntaxNode, placeholder: &SyntaxNode) -> String {\n+    assert!(placeholder.ancestors().any(|it| it == *node));\n+    let range = placeholder.text_range() - node.text_range().start();\n+    let range: ops::Range<usize> = range.into();\n+\n+    let mut placeholder = placeholder.to_string();\n+    escape(&mut placeholder);\n+    let tab_stop = format!(\"${{0:{}}}\", placeholder);\n+\n+    let mut buf = node.to_string();\n+    buf.replace_range(range, &tab_stop);\n+    return buf;\n+\n+    fn escape(buf: &mut String) {\n+        stdx::replace(buf, '{', r\"\\{\");\n+        stdx::replace(buf, '}', r\"\\}\");\n+        stdx::replace(buf, '$', r\"\\$\");\n+    }\n+}\n+\n pub fn get_missing_assoc_items(\n     sema: &Semantics<RootDatabase>,\n     impl_def: &ast::ImplDef,"}, {"sha": "71a57fba230f1ac05aa1c3b7fefc526986ab7577", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb3272ad6f774bccb967ee640b72a9a17273e7b/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=8eb3272ad6f774bccb967ee640b72a9a17273e7b", "patch": "@@ -116,3 +116,11 @@ pub fn to_lower_snake_case(s: &str) -> String {\n     }\n     buf\n }\n+\n+pub fn replace(buf: &mut String, from: char, to: &str) {\n+    if !buf.contains(from) {\n+        return;\n+    }\n+    // FIXME: do this in place.\n+    *buf = buf.replace(from, to)\n+}"}, {"sha": "10ab67b2e72281aa1a5618c95e0792222f03662e", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb3272ad6f774bccb967ee640b72a9a17273e7b/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eb3272ad6f774bccb967ee640b72a9a17273e7b/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=8eb3272ad6f774bccb967ee640b72a9a17273e7b", "patch": "@@ -77,7 +77,7 @@ fn foo() {\n }\n \n fn bar(arg: &str, baz: Baz) {\n-    todo!()\n+    ${0:todo!()}\n }\n \n ```"}]}