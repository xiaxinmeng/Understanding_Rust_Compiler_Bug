{"sha": "bddf151deac83ad9306c31806ebacfede93e4b99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZGYxNTFkZWFjODNhZDkzMDZjMzE4MDZlYmFjZmVkZTkzZTRiOTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-31T14:24:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:24:16Z"}, "message": "Use more accurate lifetimes", "tree": {"sha": "77b95d534001532f928642a842f865973050a661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b95d534001532f928642a842f865973050a661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bddf151deac83ad9306c31806ebacfede93e4b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bddf151deac83ad9306c31806ebacfede93e4b99", "html_url": "https://github.com/rust-lang/rust/commit/bddf151deac83ad9306c31806ebacfede93e4b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bddf151deac83ad9306c31806ebacfede93e4b99/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7ec348783f1ebd3c4610c56ec02608dd3dad54", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7ec348783f1ebd3c4610c56ec02608dd3dad54", "html_url": "https://github.com/rust-lang/rust/commit/1b7ec348783f1ebd3c4610c56ec02608dd3dad54"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "8f6c955056d7e939ddbd5a585c8769891adfb681", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bddf151deac83ad9306c31806ebacfede93e4b99/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bddf151deac83ad9306c31806ebacfede93e4b99/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=bddf151deac83ad9306c31806ebacfede93e4b99", "patch": "@@ -88,16 +88,14 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n     counter.count\n }\n \n-#[derive(Copy, Clone)]\n-pub struct AccessAction(*mut dyn FnMut());\n+pub struct AccessAction(*mut dyn for<'a> FnMut(&mut Resolver<'a>));\n \n impl AccessAction {\n-    pub fn get(self) -> *mut dyn FnMut() {\n+    pub fn get(self) -> *mut dyn for<'a> FnMut(&mut Resolver<'a>) {\n         self.0\n     }\n }\n \n-#[derive(Copy, Clone)]\n pub enum Action {\n     Initial,\n     Access(AccessAction),\n@@ -123,7 +121,7 @@ pub struct BoxedResolver {\n         Box<\n             dyn Generator<\n                 Action,\n-                Yield = YieldType<Result<ast::Crate>, fn(&mut Resolver<'_>)>,\n+                Yield = YieldType<Result<ast::Crate>, for<'a> fn(&mut Resolver<'a>)>,\n                 Return = ResolverOutputs,\n             >,\n         >,\n@@ -150,16 +148,16 @@ impl BoxedResolver {\n         (init, BoxedResolver { generator })\n     }\n \n-    pub fn access<F: FnOnce(&mut Resolver<'_>) -> R, R>(&mut self, f: F) -> R {\n+    pub fn access<F: for<'a> FnOnce(&mut Resolver<'a>) -> R, R>(&mut self, f: F) -> R {\n         // Turn the FnOnce closure into *mut dyn FnMut()\n         // so we can pass it in to the generator\n         let mut r = None;\n         let mut f = Some(f);\n-        let mut_f: &mut dyn FnMut(&mut Resolver<'_>) = &mut |resolver| {\n+        let mut_f: &mut dyn for<'a> FnMut(&mut Resolver<'a>) = &mut |resolver| {\n             let f = f.take().unwrap();\n             r = Some(f(resolver));\n         };\n-        let mut_f = mut_f as *mut dyn FnMut(&mut Resolver<'_>);\n+        let mut_f = mut_f as *mut dyn for<'a> FnMut(&mut Resolver<'a>);\n \n         // Get the generator to call our closure\n         unsafe {"}]}