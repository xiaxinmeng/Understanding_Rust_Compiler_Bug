{"sha": "ff2d16e119093d98ab2d8fa1802e7e200475c729", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMmQxNmUxMTkwOTNkOThhYjJkOGZhMTgwMmU3ZTIwMDQ3NWM3Mjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T00:22:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:30Z"}, "message": "librustc: De-`@mut` `RegionVarBindings`", "tree": {"sha": "85ff89726bf6a7679cf15cedf28f7384a27c2ea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85ff89726bf6a7679cf15cedf28f7384a27c2ea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2d16e119093d98ab2d8fa1802e7e200475c729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2d16e119093d98ab2d8fa1802e7e200475c729", "html_url": "https://github.com/rust-lang/rust/commit/ff2d16e119093d98ab2d8fa1802e7e200475c729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2d16e119093d98ab2d8fa1802e7e200475c729/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39ab7445c248548fe5c9fb2d1cc600eee311f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39ab7445c248548fe5c9fb2d1cc600eee311f24", "html_url": "https://github.com/rust-lang/rust/commit/a39ab7445c248548fe5c9fb2d1cc600eee311f24"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "8d8524e0f512f6179318584bb1ede785c53fb82d", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d16e119093d98ab2d8fa1802e7e200475c729/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d16e119093d98ab2d8fa1802e7e200475c729/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=ff2d16e119093d98ab2d8fa1802e7e200475c729", "patch": "@@ -130,7 +130,7 @@ impl RegionVarBindings {\n         undo_log.get().len() > 0\n     }\n \n-    pub fn start_snapshot(&mut self) -> uint {\n+    pub fn start_snapshot(&self) -> uint {\n         debug!(\"RegionVarBindings: start_snapshot()\");\n         if self.in_snapshot() {\n             {\n@@ -146,15 +146,15 @@ impl RegionVarBindings {\n         }\n     }\n \n-    pub fn commit(&mut self) {\n+    pub fn commit(&self) {\n         debug!(\"RegionVarBindings: commit()\");\n         let mut undo_log = self.undo_log.borrow_mut();\n         while undo_log.get().len() > 0 {\n             undo_log.get().pop();\n         }\n     }\n \n-    pub fn rollback_to(&mut self, snapshot: uint) {\n+    pub fn rollback_to(&self, snapshot: uint) {\n         debug!(\"RegionVarBindings: rollback_to({})\", snapshot);\n         let mut undo_log = self.undo_log.borrow_mut();\n         while undo_log.get().len() > snapshot {\n@@ -188,7 +188,7 @@ impl RegionVarBindings {\n         var_origins.get().len()\n     }\n \n-    pub fn new_region_var(&mut self, origin: RegionVariableOrigin) -> RegionVid {\n+    pub fn new_region_var(&self, origin: RegionVariableOrigin) -> RegionVid {\n         let id = self.num_vars();\n         let mut var_origins = self.var_origins.borrow_mut();\n         var_origins.get().push(origin);\n@@ -204,13 +204,13 @@ impl RegionVarBindings {\n         return vid;\n     }\n \n-    pub fn new_skolemized(&mut self, br: ty::BoundRegion) -> Region {\n+    pub fn new_skolemized(&self, br: ty::BoundRegion) -> Region {\n         let sc = self.skolemization_count.get();\n         self.skolemization_count.set(sc + 1);\n         ReInfer(ReSkolemized(sc, br))\n     }\n \n-    pub fn new_bound(&mut self, binder_id: ast::NodeId) -> Region {\n+    pub fn new_bound(&self, binder_id: ast::NodeId) -> Region {\n         // Creates a fresh bound variable for use in GLB computations.\n         // See discussion of GLB computation in the large comment at\n         // the top of this file for more details.\n@@ -244,7 +244,7 @@ impl RegionVarBindings {\n         values.get().is_none()\n     }\n \n-    pub fn add_constraint(&mut self,\n+    pub fn add_constraint(&self,\n                           constraint: Constraint,\n                           origin: SubregionOrigin) {\n         // cannot add constraints once regions are resolved\n@@ -263,7 +263,7 @@ impl RegionVarBindings {\n         }\n     }\n \n-    pub fn make_subregion(&mut self,\n+    pub fn make_subregion(&self,\n                           origin: SubregionOrigin,\n                           sub: Region,\n                           sup: Region) {\n@@ -297,7 +297,7 @@ impl RegionVarBindings {\n         }\n     }\n \n-    pub fn lub_regions(&mut self,\n+    pub fn lub_regions(&self,\n                        origin: SubregionOrigin,\n                        a: Region,\n                        b: Region)\n@@ -320,7 +320,7 @@ impl RegionVarBindings {\n         }\n     }\n \n-    pub fn glb_regions(&mut self,\n+    pub fn glb_regions(&self,\n                        origin: SubregionOrigin,\n                        a: Region,\n                        b: Region)\n@@ -344,7 +344,7 @@ impl RegionVarBindings {\n         }\n     }\n \n-    pub fn resolve_var(&mut self, rid: RegionVid) -> ty::Region {\n+    pub fn resolve_var(&self, rid: RegionVid) -> ty::Region {\n         let values = self.values.borrow();\n         let v = match *values.get() {\n             None => {\n@@ -374,20 +374,20 @@ impl RegionVarBindings {\n         }\n     }\n \n-    fn combine_map<'a>(&'a mut self, t: CombineMapType)\n-                   -> &'a mut RefCell<CombineMap> {\n+    fn combine_map<'a>(&'a self, t: CombineMapType)\n+                   -> &'a RefCell<CombineMap> {\n         match t {\n-            Glb => &mut self.glbs,\n-            Lub => &mut self.lubs,\n+            Glb => &self.glbs,\n+            Lub => &self.lubs,\n         }\n     }\n \n-    pub fn combine_vars(&mut self,\n+    pub fn combine_vars(&self,\n                         t: CombineMapType,\n                         a: Region,\n                         b: Region,\n                         origin: SubregionOrigin,\n-                        relate: |this: &mut RegionVarBindings,\n+                        relate: |this: &RegionVarBindings,\n                                  old_r: Region,\n                                  new_r: Region|)\n                         -> Region {\n@@ -418,7 +418,7 @@ impl RegionVarBindings {\n         ReInfer(ReVar(c))\n     }\n \n-    pub fn vars_created_since_snapshot(&mut self, snapshot: uint)\n+    pub fn vars_created_since_snapshot(&self, snapshot: uint)\n                                        -> ~[RegionVid] {\n         let undo_log = self.undo_log.borrow();\n         undo_log.get().slice_from(snapshot).iter()\n@@ -429,7 +429,7 @@ impl RegionVarBindings {\n             .collect()\n     }\n \n-    pub fn tainted(&mut self, snapshot: uint, r0: Region) -> ~[Region] {\n+    pub fn tainted(&self, snapshot: uint, r0: Region) -> ~[Region] {\n         /*!\n          * Computes all regions that have been related to `r0` in any\n          * way since the snapshot `snapshot` was taken---`r0` itself\n@@ -522,7 +522,7 @@ impl RegionVarBindings {\n     constraints, assuming such values can be found; if they cannot,\n     errors are reported.\n     */\n-    pub fn resolve_regions(&mut self) -> OptVec<RegionResolutionError> {\n+    pub fn resolve_regions(&self) -> OptVec<RegionResolutionError> {\n         debug!(\"RegionVarBindings: resolve_regions()\");\n         let mut errors = opt_vec::Empty;\n         let v = self.infer_variable_values(&mut errors);"}]}