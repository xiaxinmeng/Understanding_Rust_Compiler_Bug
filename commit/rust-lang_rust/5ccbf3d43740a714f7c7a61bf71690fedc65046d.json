{"sha": "5ccbf3d43740a714f7c7a61bf71690fedc65046d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjY2JmM2Q0Mzc0MGE3MTRmN2M3YTYxYmY3MTY5MGZlZGM2NTA0NmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-22T08:44:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-22T08:44:46Z"}, "message": "unify the lints", "tree": {"sha": "f53f8cf41e484c4599a67a5eb09caf68d7527b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f53f8cf41e484c4599a67a5eb09caf68d7527b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ccbf3d43740a714f7c7a61bf71690fedc65046d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXak/+AAoJEFbW7qD8Z6xGjaAP/jI5JatLpSsujk4R9kpg5q/K\nJRKk5sW0B3daUr+U36vZ9o6Eoj2qAcAsLgukYhrjTrTBE6j8D6bnVJl0YiBZkQqI\nUuj2pOlaMMRF71QRMK9ed9mlPRH8gzhORmXhhN6BxxoWhg8fqmKfqRBw3bAgpvEx\nCe0dz+ShN30/xHC7h8n7QSZ+G6PO7/HwzKfJ3v383vSV7u2xKWMXdvWLPTllW9ay\nM61IRmLf6h4yb8TBLWp6gtMCFtjOvJm1WT3aajd8XKlDtKoggj7ijVMEE+EtUcOj\nuV9MGs5xc95rCtLpAmITk9GtXp9GiQFGZPJZgZIcQRc/1viRSFTSbQu9xm5PxG2w\nMfcrYiBIvy4Dq5Go/33NaYoH5xgYIO/Ir1Js1E0y3JE02Ol7kEAn03dfyn3Ov9C+\nrRL4HaAhGO+NuP7tDxmq0LqdPYkNXRCuVSZDIjIcxpfKoEbMOyCM5voUCbW9EXlv\nlIfQb6xMDlAzOCmMFEOBQFglf73Be6YPvrygOAYMn2kyHLa+CdWEyBdGdp/YsfD/\nr5qyMfao8IDYTSBD2MxOtjfnX2hv7tbUPIZNc5d65xOkP9H7nQqrfKuPkBsTzZWX\nBM3TFp62IcEBisj/5XVmpkvjVOUEPxWwl1oL6KQ0srXYi59jgiB2J4jjddQXF+Lg\nNEfw1jdDTBAGiWwEpe53\n=TJnA\n-----END PGP SIGNATURE-----", "payload": "tree f53f8cf41e484c4599a67a5eb09caf68d7527b4b\nparent ac6e7b29577285a4476c9cc34395e4d1d51d3aac\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466585086 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466585086 +0200\n\nunify the lints"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccbf3d43740a714f7c7a61bf71690fedc65046d", "html_url": "https://github.com/rust-lang/rust/commit/5ccbf3d43740a714f7c7a61bf71690fedc65046d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ccbf3d43740a714f7c7a61bf71690fedc65046d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6e7b29577285a4476c9cc34395e4d1d51d3aac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6e7b29577285a4476c9cc34395e4d1d51d3aac", "html_url": "https://github.com/rust-lang/rust/commit/ac6e7b29577285a4476c9cc34395e4d1d51d3aac"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "9bd8affcded7a5c2776ba9d5b067f3d6842412e9", "filename": "CHANGELOG.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccbf3d43740a714f7c7a61bf71690fedc65046d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ccbf3d43740a714f7c7a61bf71690fedc65046d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5ccbf3d43740a714f7c7a61bf71690fedc65046d", "patch": "@@ -154,9 +154,7 @@ All notable changes to this project will be documented in this file.\n [`explicit_counter_loop`]: https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop\n [`explicit_iter_loop`]: https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop\n [`extend_from_slice`]: https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice\n-[`filter_flat_map`]: https://github.com/Manishearth/rust-clippy/wiki#filter_flat_map\n [`filter_map`]: https://github.com/Manishearth/rust-clippy/wiki#filter_map\n-[`filter_map_flat_map`]: https://github.com/Manishearth/rust-clippy/wiki#filter_map_flat_map\n [`filter_next`]: https://github.com/Manishearth/rust-clippy/wiki#filter_next\n [`float_arithmetic`]: https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic\n [`float_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#float_cmp"}, {"sha": "4345c504822825d77f1a33cee0dbfa751c686fc9", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ccbf3d43740a714f7c7a61bf71690fedc65046d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ccbf3d43740a714f7c7a61bf71690fedc65046d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5ccbf3d43740a714f7c7a61bf71690fedc65046d", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 157 lints included in this crate:\n+There are 155 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -60,9 +60,7 @@ name\n [explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)                       | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                             | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n [extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                               | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n-[filter_flat_map](https://github.com/Manishearth/rust-clippy/wiki#filter_flat_map)                                   | allow   | using `filter(_).flat_map(_)`, which can be rewritten using just the flat_map\n [filter_map](https://github.com/Manishearth/rust-clippy/wiki#filter_map)                                             | allow   | using `filter(_).map(_)`, which is more succinctly expressed as `.filter_map(_)`\n-[filter_map_flat_map](https://github.com/Manishearth/rust-clippy/wiki#filter_map_flat_map)                           | allow   | using `filter_map(_).flat_map(_)`, which can be rewritten using just the flat_map\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                           | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic)                                 | allow   | Any floating-point arithmetic statement\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                               | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)"}, {"sha": "835823b8cd31d114937e6bd50ec0c853d1e30be9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccbf3d43740a714f7c7a61bf71690fedc65046d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccbf3d43740a714f7c7a61bf71690fedc65046d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5ccbf3d43740a714f7c7a61bf71690fedc65046d", "patch": "@@ -268,9 +268,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,\n         mem_forget::MEM_FORGET,\n-        methods::FILTER_FLAT_MAP,\n         methods::FILTER_MAP,\n-        methods::FILTER_MAP_FLAT_MAP,\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,\n         methods::WRONG_PUB_SELF_CONVENTION,"}, {"sha": "97130ee751fd1d91e48ae0c9e9fe98468ff992c2", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5ccbf3d43740a714f7c7a61bf71690fedc65046d/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccbf3d43740a714f7c7a61bf71690fedc65046d/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=5ccbf3d43740a714f7c7a61bf71690fedc65046d", "patch": "@@ -159,42 +159,18 @@ declare_lint! {\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n }\n \n-/// **What it does:** This lint `Warn`s on `_.filter(_).map(_)`.\n+/// **What it does:** This lint `Warn`s on `_.filter(_).map(_)`, `_.filter(_).flat_map(_)`, `_.filter_map(_).flat_map(_)` and similar.\n ///\n-/// **Why is this bad?** Readability, this can be written more concisely as `_.filter_map(_)`.\n+/// **Why is this bad?** Readability, this can be written more concisely as a single method call\n ///\n-/// **Known problems:** Often requires a condition + Option creation in `filter_map`\n+/// **Known problems:** Often requires a condition + Option/Iterator creation inside the closure\n ///\n /// **Example:** `iter.filter(|x| x == 0).map(|x| x * 2)`\n declare_lint! {\n     pub FILTER_MAP, Allow,\n     \"using `filter(_).map(_)`, which is more succinctly expressed as `.filter_map(_)`\"\n }\n \n-/// **What it does:** This lint `Warn`s on `_.filter(_).flat_map(_)`.\n-///\n-/// **Why is this bad?** Readability, this just needs the `flat_map` to return an empty iterator, if the value should be filtered.\n-///\n-/// **Known problems:** Often requires a condition + Iterator creation in `flat_map`\n-///\n-/// **Example:** `iter.filter(|x| x == 0).flat_map(|x| x.bits())`\n-declare_lint! {\n-    pub FILTER_FLAT_MAP, Allow,\n-    \"using `filter(_).flat_map(_)`, which can be rewritten using just the flat_map\"\n-}\n-\n-/// **What it does:** This lint `Warn`s on `_.filter_map(_).flat_map(_)`.\n-///\n-/// **Why is this bad?** Readability, this just needs the `flat_map` to return an empty iterator, if the value should be filtered.\n-///\n-/// **Known problems:** Often requires a condition + Iterator creation in `flat_map`\n-///\n-/// **Example:** `iter.filter_map(|x| x.process()).flat_map(|x| x.bits())`\n-declare_lint! {\n-    pub FILTER_MAP_FLAT_MAP, Allow,\n-    \"using `filter_map(_).flat_map(_)`, which can be rewritten using just the flat_map\"\n-}\n-\n /// **What it does:** This lint `Warn`s on an iterator search (such as `find()`, `position()`, or\n /// `rposition()`) followed by a call to `is_some()`.\n ///\n@@ -393,8 +369,6 @@ impl LintPass for Pass {\n                     SEARCH_IS_SOME,\n                     TEMPORARY_CSTRING_AS_PTR,\n                     FILTER_MAP,\n-                    FILTER_FLAT_MAP,\n-                    FILTER_MAP_FLAT_MAP,\n                     ITER_NTH)\n     }\n }\n@@ -420,6 +394,8 @@ impl LateLintPass for Pass {\n                     lint_filter_next(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"map\"]) {\n                     lint_filter_map(cx, expr, arglists[0], arglists[1]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"filter_map\", \"map\"]) {\n+                    lint_filter_map_map(cx, expr, arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"flat_map\"]) {\n                     lint_filter_flat_map(cx, expr, arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"filter_map\", \"flat_map\"]) {\n@@ -884,8 +860,19 @@ fn lint_filter_next(cx: &LateContext, expr: &hir::Expr, filter_args: &MethodArgs\n fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.filter_map(..)` \\\n-                   instead.\";\n+        let msg = \"called `filter(p).map(q)` on an `Iterator`. \\\n+                   This is more succinctly expressed by calling `.filter_map(..)` instead.\";\n+        span_lint(cx, FILTER_MAP, expr.span, msg);\n+    }\n+}\n+\n+// Type of MethodArgs is potentially a Vec\n+/// lint use of `filter().map()` for `Iterators`\n+fn lint_filter_map_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n+    // lint if caller of `.filter().map()` is an Iterator\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `filter_map(p).map(q)` on an `Iterator`. \\\n+                   This is more succinctly expressed by only calling `.filter_map(..)` instead.\";\n         span_lint(cx, FILTER_MAP, expr.span, msg);\n     }\n }\n@@ -895,9 +882,10 @@ fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs\n fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` \\\n+        let msg = \"called `filter(p).flat_map(q)` on an `Iterator`. \\\n+                   This is more succinctly expressed by calling `.flat_map(..)` \\\n                    and filtering by returning an empty Iterator.\";\n-        span_lint(cx, FILTER_FLAT_MAP, expr.span, msg);\n+        span_lint(cx, FILTER_MAP, expr.span, msg);\n     }\n }\n \n@@ -906,9 +894,10 @@ fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &Metho\n fn lint_filter_map_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` \\\n+        let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`. \\\n+                   This is more succinctly expressed by calling `.flat_map(..)` \\\n                    and filtering by returning an empty Iterator.\";\n-        span_lint(cx, FILTER_MAP_FLAT_MAP, expr.span, msg);\n+        span_lint(cx, FILTER_MAP, expr.span, msg);\n     }\n }\n "}, {"sha": "743c3c15aeb82cbbf83693c2947c796861e1cf1c", "filename": "tests/compile-fail/filter_methods.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ccbf3d43740a714f7c7a61bf71690fedc65046d/tests%2Fcompile-fail%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccbf3d43740a714f7c7a61bf71690fedc65046d/tests%2Fcompile-fail%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffilter_methods.rs?ref=5ccbf3d43740a714f7c7a61bf71690fedc65046d", "patch": "@@ -17,4 +17,9 @@ fn main() {\n                                 .filter_map(|x| x.checked_mul(2))\n                                 .flat_map(|x| x.checked_mul(2))\n                                 .collect();\n+\n+    let _: Vec<_> = vec![5i8; 6].into_iter() //~ERROR called `filter_map(p).map(q)` on an `Iterator`\n+                                .filter_map(|x| x.checked_mul(2))\n+                                .map(|x| x.checked_mul(2))\n+                                .collect();\n }"}]}