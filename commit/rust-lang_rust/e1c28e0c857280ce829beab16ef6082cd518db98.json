{"sha": "e1c28e0c857280ce829beab16ef6082cd518db98", "node_id": "C_kwDOAAsO6NoAKGUxYzI4ZTBjODU3MjgwY2U4MjliZWFiMTZlZjYwODJjZDUxOGRiOTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T01:23:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T01:23:17Z"}, "message": "Auto merge of #102068 - cjgillot:erased-lifetime-print, r=eholk\n\nAlways print '_, even for erased lifetimes.\n\nExplicit lifetime arguments are now the recommended syntax in rust 2018 and rust 2021.  This PR applies this discipline to rustc itself.", "tree": {"sha": "45064a3b9e035f0fbad036478caea48be1d21cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45064a3b9e035f0fbad036478caea48be1d21cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c28e0c857280ce829beab16ef6082cd518db98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c28e0c857280ce829beab16ef6082cd518db98", "html_url": "https://github.com/rust-lang/rust/commit/e1c28e0c857280ce829beab16ef6082cd518db98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c28e0c857280ce829beab16ef6082cd518db98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a14677239bbd9a3892d165ee24513c1a05820e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a14677239bbd9a3892d165ee24513c1a05820e4", "html_url": "https://github.com/rust-lang/rust/commit/4a14677239bbd9a3892d165ee24513c1a05820e4"}, {"sha": "eb1ddd2573fc41062c36d5ceb484f5a99364b3b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1ddd2573fc41062c36d5ceb484f5a99364b3b8", "html_url": "https://github.com/rust-lang/rust/commit/eb1ddd2573fc41062c36d5ceb484f5a99364b3b8"}], "stats": {"total": 163, "additions": 72, "deletions": 91}, "files": [{"sha": "99e5722ddad0e443bdcf6c3798d8d184fb852d03", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -1088,17 +1088,9 @@ pub trait PrettyPrinter<'tcx>:\n                         .generics_of(principal.def_id)\n                         .own_substs_no_defaults(cx.tcx(), principal.substs);\n \n-                    // Don't print `'_` if there's no unerased regions.\n-                    let print_regions = args.iter().any(|arg| match arg.unpack() {\n-                        GenericArgKind::Lifetime(r) => !r.is_erased(),\n-                        _ => false,\n-                    });\n-                    let mut args = args.iter().cloned().filter(|arg| match arg.unpack() {\n-                        GenericArgKind::Lifetime(_) => print_regions,\n-                        _ => true,\n-                    });\n                     let mut projections = predicates.projection_bounds();\n \n+                    let mut args = args.iter().cloned();\n                     let arg0 = args.next();\n                     let projection0 = projections.next();\n                     if arg0.is_some() || projection0.is_some() {\n@@ -1845,22 +1837,11 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n-        // Don't print `'_` if there's no unerased regions.\n-        let print_regions = self.tcx.sess.verbose()\n-            || args.iter().any(|arg| match arg.unpack() {\n-                GenericArgKind::Lifetime(r) => !r.is_erased(),\n-                _ => false,\n-            });\n-        let args = args.iter().cloned().filter(|arg| match arg.unpack() {\n-            GenericArgKind::Lifetime(_) => print_regions,\n-            _ => true,\n-        });\n-\n-        if args.clone().next().is_some() {\n+        if args.first().is_some() {\n             if self.in_value {\n                 write!(self, \"::\")?;\n             }\n-            self.generic_delimiters(|cx| cx.comma_sep(args))\n+            self.generic_delimiters(|cx| cx.comma_sep(args.iter().cloned()))\n         } else {\n             Ok(self)\n         }"}, {"sha": "4260230c2c674113235a37263d714699b6da4264", "filename": "src/test/codegen-units/item-collection/generic-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -30,11 +30,11 @@ pub struct LifeTimeOnly<'a> {\n \n impl<'a> LifeTimeOnly<'a> {\n \n-    //~ MONO_ITEM fn LifeTimeOnly::foo\n+    //~ MONO_ITEM fn LifeTimeOnly::<'_>::foo\n     pub fn foo(&self) {}\n-    //~ MONO_ITEM fn LifeTimeOnly::bar\n+    //~ MONO_ITEM fn LifeTimeOnly::<'_>::bar\n     pub fn bar(&'a self) {}\n-    //~ MONO_ITEM fn LifeTimeOnly::baz\n+    //~ MONO_ITEM fn LifeTimeOnly::<'_>::baz\n     pub fn baz<'b>(&'b self) {}\n \n     pub fn non_instantiated<T>(&self) {}"}, {"sha": "1e1c80aad34e7a8abb1439d785ab68556ba4f55f", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -3,15 +3,15 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:+0:11: +0:11\n-      let mut _1: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _1: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:18: +1:26\n-      let mut _4: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n       let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _8: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _9: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _8: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _9: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n       let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n       let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n@@ -53,10 +53,10 @@\n           StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _7 = <std::slice::Iter<'_, i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> Option<<std::slice::Iter<i32> as Iterator>::Item> {<std::slice::Iter<i32> as Iterator>::next}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "659aed18f0436370ad71c3d48de54dbb09988a31", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -1,12 +1,12 @@\n - // MIR for `no_downcast` before EarlyOtherwiseBranch\n + // MIR for `no_downcast` after EarlyOtherwiseBranch\n   \n-  fn no_downcast(_1: &E) -> u32 {\n+  fn no_downcast(_1: &E<'_>) -> u32 {\n       debug e => _1;                       // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:16: +0:17\n       let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:26: +0:29\n       let mut _2: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:20: +1:30\n       let mut _3: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n-      let mut _4: &E;                      // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:16: +0:17\n+      let mut _4: &E<'_>;                  // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:16: +0:17\n       scope 1 {\n       }\n   \n@@ -16,7 +16,7 @@\n       }\n   \n       bb1: {\n-          _4 = deref_copy (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          _4 = deref_copy (((*_1) as Some).0: &E<'_>); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n           _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n           switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n       }"}, {"sha": "b789ae22974da1f02b283c193fac821d8dff67e1", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -1,24 +1,24 @@\n - // MIR for `float_to_exponential_common` before ConstProp\n + // MIR for `float_to_exponential_common` after ConstProp\n   \n-  fn float_to_exponential_common(_1: &mut Formatter, _2: &T, _3: bool) -> Result<(), std::fmt::Error> {\n+  fn float_to_exponential_common(_1: &mut Formatter<'_>, _2: &T, _3: bool) -> Result<(), std::fmt::Error> {\n       debug fmt => _1;                     // in scope 0 at $DIR/funky_arms.rs:+0:35: +0:38\n       debug num => _2;                     // in scope 0 at $DIR/funky_arms.rs:+0:60: +0:63\n       debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:+0:69: +0:74\n       let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at $DIR/funky_arms.rs:+0:85: +0:91\n       let _4: bool;                        // in scope 0 at $DIR/funky_arms.rs:+4:9: +4:19\n-      let mut _5: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+      let mut _5: &std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n       let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/funky_arms.rs:+13:30: +13:45\n-      let mut _8: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:+13:30: +13:45\n+      let mut _8: &std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+13:30: +13:45\n       let mut _9: isize;                   // in scope 0 at $DIR/funky_arms.rs:+13:12: +13:27\n-      let mut _11: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:+15:43: +15:46\n+      let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+15:43: +15:46\n       let mut _12: &T;                     // in scope 0 at $DIR/funky_arms.rs:+15:48: +15:51\n       let mut _13: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:+15:53: +15:57\n       let mut _14: u32;                    // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:79\n       let mut _15: u32;                    // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:75\n       let mut _16: usize;                  // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:68\n       let mut _17: bool;                   // in scope 0 at $DIR/funky_arms.rs:+15:81: +15:86\n-      let mut _18: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:+17:46: +17:49\n+      let mut _18: &mut std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+17:46: +17:49\n       let mut _19: &T;                     // in scope 0 at $DIR/funky_arms.rs:+17:51: +17:54\n       let mut _20: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:+17:56: +17:60\n       let mut _21: bool;                   // in scope 0 at $DIR/funky_arms.rs:+17:62: +17:67\n@@ -38,10 +38,10 @@\n           StorageLive(_4);                 // scope 0 at $DIR/funky_arms.rs:+4:9: +4:19\n           StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n           _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n-          _4 = Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+          _4 = Formatter::<'_>::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n-                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> bool {Formatter::sign_plus}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r Formatter<'_>) -> bool {Formatter::<'_>::sign_plus}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -66,10 +66,10 @@\n           StorageLive(_7);                 // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n           StorageLive(_8);                 // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n           _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n-          _7 = Formatter::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+          _7 = Formatter::<'_>::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n-                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> Option<usize> {Formatter::precision}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r Formatter<'_>) -> Option<usize> {Formatter::<'_>::precision}, val: Value(<ZST>) }\n       }\n   \n       bb5: {"}, {"sha": "533907e704093df8bee947c5907b20e602dcaf96", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -25,7 +25,7 @@\n       let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n           let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14"}, {"sha": "6f58bb1b47fe423ec4a7b41076d286b1a26719cf", "filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -26,7 +26,7 @@ fn main() -> () {\n     let _19: &&[u8];                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _20: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let _21: &&[u8; 4];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    let mut _22: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let _23: ();                         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _24: (&&[u8], &&[u8; 4]);    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _25: &&[u8];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -46,7 +46,7 @@ fn main() -> () {\n     let _40: &&[u8];                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _41: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let _42: &&[u8; 4];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    let mut _43: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     scope 1 {\n         debug left_val => _8;            // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         debug right_val => _9;           // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -128,7 +128,7 @@ fn main() -> () {\n         _21 = &(*_9);                    // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _20 = &(*_21);                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_22);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _22 = Option::<Arguments>::None; // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _22 = Option::<Arguments<'_>>::None; // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _16 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _17, move _18, move _20, move _22) -> bb19; // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -237,7 +237,7 @@ fn main() -> () {\n         _42 = &(*_30);                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _41 = &(*_42);                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_43);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _43 = Option::<Arguments>::None; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _43 = Option::<Arguments<'_>>::None; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _37 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _38, move _39, move _41, move _43) -> bb19; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "318b241fa737ac80969666fc3cf129c11055ba2e", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -29,7 +29,7 @@ fn array_casts() -> () {\n     let _31: &usize;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _32: &usize;                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let _33: &usize;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    let mut _34: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _34: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/retag.rs:+1:9: +1:14\n         let _2: *mut usize;              // in scope 1 at $DIR/retag.rs:+2:9: +2:10"}, {"sha": "10958a7727c4ba1f53cbf348c5e78efbef2a854d", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -34,10 +34,10 @@\n                     ((::alloc::fmt::format as\n                             for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n                                 as\n-                                fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                                fn(&[&'static str], &[ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1})((&([(\"test\"\n                                             as &str)] as [&str; 1]) as &[&str; 1]),\n-                            (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n-                            Arguments)) as String);\n+                            (&([] as [ArgumentV1<'_>; 0]) as &[ArgumentV1<'_>; 0])) as\n+                            Arguments<'_>)) as String);\n                 (res as String)\n             } as String);\n     } as ())"}, {"sha": "4becf3a364cf12c7f26206bceca5edb31c851766", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -1,16 +1,16 @@\n-error[E0391]: cycle detected when resolving instance `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>::DIM`\n+error[E0391]: cycle detected when resolving instance `<LazyUpdim<'_, T, { T::DIM }, DIM> as TensorDimension>::DIM`\n   --> $DIR/issue-83765.rs:5:5\n    |\n LL |     const DIM: usize;\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`...\n+note: ...which requires computing candidate for `<LazyUpdim<'_, T, { T::DIM }, DIM> as TensorDimension>`...\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {\n    | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires resolving instance `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>::DIM`, completing the cycle\n-note: cycle used when computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`\n+   = note: ...which again requires resolving instance `<LazyUpdim<'_, T, { T::DIM }, DIM> as TensorDimension>::DIM`, completing the cycle\n+note: cycle used when computing candidate for `<LazyUpdim<'_, T, { T::DIM }, DIM> as TensorDimension>`\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {"}, {"sha": "8978ab436d07d9f54ff118893cc629a5169613a9", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -5,7 +5,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:18:34\n    |\n@@ -19,7 +19,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:19:33\n    |\n@@ -33,7 +33,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:22:34\n    |\n@@ -92,7 +92,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:43:5\n    |\n@@ -111,7 +111,7 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:46:34\n    |\n@@ -130,7 +130,7 @@ LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:47:33\n    |\n@@ -230,7 +230,7 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:79:34\n    |\n@@ -249,7 +249,7 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:80:35\n    |"}, {"sha": "db42b7c98307d229d350b1fcf5dfbec79e38b628", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -5,7 +5,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:18:34\n    |\n@@ -19,7 +19,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:19:33\n    |\n@@ -33,7 +33,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:22:34\n    |\n@@ -92,7 +92,7 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:43:5\n    |\n@@ -111,7 +111,7 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:46:34\n    |\n@@ -130,7 +130,7 @@ LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:47:33\n    |\n@@ -230,7 +230,7 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:79:34\n    |\n@@ -249,7 +249,7 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:80:35\n    |"}, {"sha": "5981d9dc733034e577a2c858f71f65ec4229852f", "filename": "src/test/ui/issues/issue-21174.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -4,8 +4,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     let new: T::B = unsafe { std::mem::transmute(value) };\n    |                              ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `<T as Trait>::A` (this type does not have a fixed size)\n-   = note: target type: `<T as Trait>::B` (this type does not have a fixed size)\n+   = note: source type: `<T as Trait<'_>>::A` (this type does not have a fixed size)\n+   = note: target type: `<T as Trait<'_>>::B` (this type does not have a fixed size)\n \n error: aborting due to previous error\n "}, {"sha": "80bb2af25cc218b3a384b4dbf8689e843806012d", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -41,7 +41,7 @@ error: item has unused generic parameters\n LL | fn bar<I>() {\n    |    ^^^ - generic parameter `I` is unused\n \n-note: the above error was encountered while instantiating `fn foo::<std::slice::Iter<u32>, T>`\n+note: the above error was encountered while instantiating `fn foo::<std::slice::Iter<'_, u32>, T>`\n   --> $DIR/predicates.rs:86:5\n    |\n LL |     foo(x.iter());"}, {"sha": "f2307899d3c47e0a074dcf4e7ab111d75b4e68b1", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -6,15 +6,15 @@ LL |     let Ok(x) = res;\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n-note: `Result<u32, &R>` defined here\n+note: `Result<u32, &R<'_>>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n    | ---------------------\n ...\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     ^^^ not covered\n-   = note: the matched value is of type `Result<u32, &R>`\n+   = note: the matched value is of type `Result<u32, &R<'_>>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let x = if let Ok(x) = res { x } else { todo!() };"}, {"sha": "31ae4b26e45d2f388ee5bba294ddfced38169794", "filename": "src/test/ui/specialization/issue-38091-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -10,7 +10,7 @@ LL | #![feature(specialization)]\n \n error[E0275]: overflow evaluating the requirement `i32: Check`\n    |\n-note: required for `i32` to implement `Iterate`\n+note: required for `i32` to implement `Iterate<'_>`\n   --> $DIR/issue-38091-2.rs:11:13\n    |\n LL | impl<'a, T> Iterate<'a> for T"}, {"sha": "d519f03682b5d751b51179197331b17aa1159870", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -4,7 +4,7 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     transmute(x)\n    |     ^^^^^^^^^\n    |\n-   = note: `<C as TypeConstructor>::T` does not have a fixed size\n+   = note: `<C as TypeConstructor<'_>>::T` does not have a fixed size\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/main.rs:17:17"}, {"sha": "1c0490ffa44ccbbf8096ac7d360e5f5017caa1c6", "filename": "src/tools/clippy/tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finefficient_to_string.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -35,21 +35,21 @@ LL |     let _: String = rrrstring.to_string();\n    |\n    = help: `&&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&std::borrow::Cow<str>`\n+error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:29:21\n    |\n LL |     let _: String = rrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n    |\n-   = help: `&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n+   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&&std::borrow::Cow<str>`\n+error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:30:21\n    |\n LL |     let _: String = rrrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`\n    |\n-   = help: `&&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n+   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ae1aec34d82e0b3ccb19e9d8a1050fb87c9336d4", "filename": "src/tools/clippy/tests/ui/suspicious_to_owned.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_to_owned.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -1,24 +1,24 @@\n-error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:16:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n    |\n    = note: `-D clippy::suspicious-to-owned` implied by `-D warnings`\n \n-error: this `to_owned` call clones the std::borrow::Cow<[char; 3]> itself and does not cause the std::borrow::Cow<[char; 3]> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, [char; 3]> itself and does not cause the std::borrow::Cow<'_, [char; 3]> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:26:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<std::vec::Vec<char>> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<'_, std::vec::Vec<char>> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:36:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:46:13\n    |\n LL |     let _ = cow.to_owned();"}, {"sha": "10117ee9182ab97d97e9bb13e5cee991a399980f", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -42,13 +42,13 @@ error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:36:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<_>>()`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<&u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, &u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:38:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };"}, {"sha": "65ee3807fa9d9b19456730995dec508d1661211c", "filename": "src/tools/clippy/tests/ui/useless_conversion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -46,7 +46,7 @@ error: useless conversion to the same type: `std::string::String`\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n-error: useless conversion to the same type: `std::str::Lines`\n+error: useless conversion to the same type: `std::str::Lines<'_>`\n   --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = \"\".lines().into_iter();"}, {"sha": "20f34cf104d63f1b6f1f83c641ce34cf79b82600", "filename": "src/tools/miri/tests/fail/concurrency/windows_join_detached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c28e0c857280ce829beab16ef6082cd518db98/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr?ref=e1c28e0c857280ce829beab16ef6082cd518db98", "patch": "@@ -8,7 +8,7 @@ LL |         let rc = unsafe { c::WaitForSingleObject(self.handle.as_raw_handle(\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::sys::PLATFORM::thread::Thread::join` at RUSTLIB/std/src/sys/PLATFORM/thread.rs:LL:CC\n-   = note: inside `std::thread::JoinInner::<()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n+   = note: inside `std::thread::JoinInner::<'_, ()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n    = note: inside `std::thread::JoinHandle::<()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n note: inside `main` at $DIR/windows_join_detached.rs:LL:CC\n   --> $DIR/windows_join_detached.rs:LL:CC"}]}