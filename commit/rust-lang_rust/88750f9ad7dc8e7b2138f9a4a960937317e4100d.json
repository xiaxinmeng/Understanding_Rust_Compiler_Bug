{"sha": "88750f9ad7dc8e7b2138f9a4a960937317e4100d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzUwZjlhZDdkYzhlN2IyMTM4ZjlhNGE5NjA5MzczMTdlNDEwMGQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-31T06:16:04Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-31T06:16:04Z"}, "message": "Fix `extra_unused_lifetimes` false positive\n\nFixes #4291", "tree": {"sha": "d0a54580353432f4d0e5a006610ff9f72e9b96b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0a54580353432f4d0e5a006610ff9f72e9b96b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88750f9ad7dc8e7b2138f9a4a960937317e4100d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88750f9ad7dc8e7b2138f9a4a960937317e4100d", "html_url": "https://github.com/rust-lang/rust/commit/88750f9ad7dc8e7b2138f9a4a960937317e4100d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88750f9ad7dc8e7b2138f9a4a960937317e4100d/comments", "author": null, "committer": null, "parents": [{"sha": "a3fcaee5620d458af22682097c4ffb64b57c3327", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fcaee5620d458af22682097c4ffb64b57c3327", "html_url": "https://github.com/rust-lang/rust/commit/a3fcaee5620d458af22682097c4ffb64b57c3327"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "3a7863a02014780018390a8d135e0755501509ee", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88750f9ad7dc8e7b2138f9a4a960937317e4100d/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88750f9ad7dc8e7b2138f9a4a960937317e4100d/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=88750f9ad7dc8e7b2138f9a4a960937317e4100d", "patch": "@@ -9,7 +9,7 @@ use syntax::source_map::Span;\n use syntax::symbol::kw;\n \n use crate::reexport::*;\n-use crate::utils::{last_path_segment, span_lint};\n+use crate::utils::{last_path_segment, span_lint, trait_ref_of_method};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -66,7 +66,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, id) = item.node {\n-            check_fn_inner(cx, &sig.decl, Some(id), &item.generics, item.span);\n+            if trait_ref_of_method(cx, item.hir_id).is_none() {\n+                check_fn_inner(cx, &sig.decl, Some(id), &item.generics, item.span);\n+            }\n         }\n     }\n "}, {"sha": "66f6e67a75c2916831cb53657b3b628e659e6d82", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/88750f9ad7dc8e7b2138f9a4a960937317e4100d/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88750f9ad7dc8e7b2138f9a4a960937317e4100d/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=88750f9ad7dc8e7b2138f9a4a960937317e4100d", "patch": "@@ -61,4 +61,23 @@ impl X {\n     fn explicit_self_with_lifetime<'a>(self: &'a Self) {}\n }\n \n+// Methods implementing traits must have matching lifetimes\n+mod issue4291 {\n+    #[derive(Debug)]\n+    pub struct Foo<'a>(&'a std::marker::PhantomData<u8>);\n+\n+    #[derive(Debug)]\n+    pub struct Bar<'a: 'b, 'b>(Foo<'a>, &'b std::marker::PhantomData<u8>);\n+\n+    trait LT {\n+        fn test<'a: 'b, 'b>(foo: &Foo<'a>, bar: &Bar<'a, 'b>);\n+    }\n+\n+    pub struct Baz;\n+\n+    impl LT for Baz {\n+        fn test<'a: 'b, 'b>(_foo: &Foo, _bar: &Bar) {}\n+    }\n+}\n+\n fn main() {}"}]}