{"sha": "7b0644d81e52d00a7a6795b187f356213ff68225", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMDY0NGQ4MWU1MmQwMGE3YTY3OTViMTg3ZjM1NjIxM2ZmNjgyMjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:09:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:25:34Z"}, "message": "Switch to the new location for impls", "tree": {"sha": "88da767605960bb672934c091489d3aad826f17a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88da767605960bb672934c091489d3aad826f17a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b0644d81e52d00a7a6795b187f356213ff68225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0644d81e52d00a7a6795b187f356213ff68225", "html_url": "https://github.com/rust-lang/rust/commit/7b0644d81e52d00a7a6795b187f356213ff68225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b0644d81e52d00a7a6795b187f356213ff68225/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0739d5a26684527129882b7d182d01e635525bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0739d5a26684527129882b7d182d01e635525bc", "html_url": "https://github.com/rust-lang/rust/commit/b0739d5a26684527129882b7d182d01e635525bc"}], "stats": {"total": 101, "additions": 69, "deletions": 32}, "files": [{"sha": "af874945c1946ad7d2ed5c38875be93e6bf1dd67", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -1123,6 +1123,7 @@ dependencies = [\n  \"rowan 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_lexer 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "117ca2fe32d6382aba6ee0cc6e5f198c08b95835", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -809,7 +809,10 @@ impl ImplBlock {\n         let resolver = self.id.resolver(db);\n         let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n-        Type { krate: self.id.module(db).krate, ty: InEnvironment { value: ty, environment } }\n+        Type {\n+            krate: self.id.lookup(db).container.krate,\n+            ty: InEnvironment { value: ty, environment },\n+        }\n     }\n \n     pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {\n@@ -821,7 +824,7 @@ impl ImplBlock {\n     }\n \n     pub fn module(&self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db).into()\n+        self.id.lookup(db).container.into()\n     }\n \n     pub fn krate(&self, db: &impl DefDatabase) -> Crate {"}, {"sha": "b35188a21c9654fb6742f17cd5621d419a5b4544", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -107,8 +107,10 @@ impl FromSource for MacroDef {\n impl FromSource for ImplBlock {\n     type Ast = ast::ImplBlock;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(ImplBlock { id })\n+        // XXX: use `.parent()` to avoid finding ourselves\n+        let parent = src.value.syntax().parent()?;\n+        let container = Container::find(db, src.with_value(parent).as_ref())?;\n+        container.child_by_source(db)[keys::IMPL].get(&src).copied().map(ImplBlock::from)\n     }\n }\n "}, {"sha": "a888fe995ca7fc823c1c2a955fd1589a61faae21", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -114,7 +114,7 @@ impl HasSource for MacroDef {\n impl HasSource for ImplBlock {\n     type Ast = ast::ImplBlock;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::ImplBlock> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Import {"}, {"sha": "12d4e777a7938cc79344bdaa43b94326812bf301", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -64,7 +64,7 @@ impl Attrs {\n             AttrDefId::MacroDefId(it) => {\n                 it.ast_id.map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db))\n             }\n-            AttrDefId::ImplId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+            AttrDefId::ImplId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::ConstId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::StaticId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::FunctionId(it) => attrs_from_loc(it.lookup(db), db),"}, {"sha": "821549bd58073183d370a54823f849f9f82867a8", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -98,6 +98,11 @@ impl ChildBySource for ModuleId {\n             }\n         }\n \n+        for &impl_ in crate_def_map[self.local_id].impls.iter() {\n+            let src = impl_.lookup(db).source(db);\n+            res[keys::IMPL].insert(src, impl_)\n+        }\n+\n         res\n     }\n }"}, {"sha": "42821b9b11b7da5f0159828c6149e7d5750860cc", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -167,7 +167,7 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn impl_data_query(db: &impl DefDatabase, id: ImplId) -> Arc<ImplData> {\n-        let src = id.source(db);\n+        let src = id.lookup(db).source(db);\n         let items = db.ast_id_map(src.file_id);\n \n         let target_trait = src.value.target_trait().map(TypeRef::from_ast);"}, {"sha": "8907aacca49e2e4295f91bcbf05ca5487bffe8e5", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -18,8 +18,8 @@ use crate::{\n         CrateDefMap,\n     },\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, TraitId, TypeAliasId, TypeAliasLoc,\n-    UnionId,\n+    ImplId, ImplLoc, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, TraitId, TypeAliasId,\n+    TypeAliasLoc, UnionId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -41,7 +41,7 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_type_alias(&self, loc: TypeAliasLoc) -> TypeAliasId;\n     #[salsa::interned]\n-    fn intern_impl(&self, loc: ItemLoc<ast::ImplBlock>) -> ImplId;\n+    fn intern_impl(&self, loc: ImplLoc) -> ImplId;\n }\n \n #[salsa::query_group(DefDatabaseStorage)]"}, {"sha": "5d1100945821acb563ce3e7c6425f4cdce2a90e7", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -109,7 +109,7 @@ impl GenericParams {\n             // type-parameter, but rather is a type-alias for impl's target\n             // type, so this is handled by the resolver.\n             GenericDefId::ImplId(it) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n                 src.file_id\n             }"}, {"sha": "d318b2451d757677a8337d32dbf8691bb6ab2bad", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -8,16 +8,18 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumVariantId, FunctionId, StaticId, StructFieldId, TypeAliasId, TypeParamId,\n+    ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, TypeAliasId, TypeParamId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n \n pub const FUNCTION: Key<ast::FnDef, FunctionId> = Key::new();\n pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();\n pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n-pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n+pub const IMPL: Key<ast::ImplBlock, ImplId> = Key::new();\n+\n+pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();\n pub const RECORD_FIELD: Key<ast::RecordFieldDef, StructFieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();"}, {"sha": "5564b166bf7af6f3e073483f9c576048289e74ab", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -289,12 +289,24 @@ impl Lookup for TypeAliasId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplId(salsa::InternId);\n impl_intern_key!(ImplId);\n-impl AstItemDef<ast::ImplBlock> for ImplId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::ImplBlock>) -> Self {\n-        db.intern_impl(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ImplLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::ImplBlock>,\n+}\n+\n+impl Intern for ImplLoc {\n+    type ID = ImplId;\n+    fn intern(self, db: &impl db::DefDatabase) -> ImplId {\n+        db.intern_impl(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::ImplBlock> {\n-        db.lookup_intern_impl(self)\n+}\n+\n+impl Lookup for ImplId {\n+    type Data = ImplLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> ImplLoc {\n+        db.lookup_intern_impl(*self)\n     }\n }\n \n@@ -479,7 +491,7 @@ impl HasModule for FunctionLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.module(db),\n+            ContainerId::ImplId(it) => it.lookup(db).container,\n             ContainerId::TraitId(it) => it.module(db),\n         }\n     }\n@@ -489,7 +501,7 @@ impl HasModule for TypeAliasLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.module(db),\n+            ContainerId::ImplId(it) => it.lookup(db).container,\n             ContainerId::TraitId(it) => it.module(db),\n         }\n     }\n@@ -499,7 +511,7 @@ impl HasModule for ConstLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.module(db),\n+            ContainerId::ImplId(it) => it.lookup(db).container,\n             ContainerId::TraitId(it) => it.module(db),\n         }\n     }\n@@ -532,7 +544,7 @@ impl HasModule for GenericDefId {\n             GenericDefId::AdtId(it) => it.module(db),\n             GenericDefId::TraitId(it) => it.module(db),\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n-            GenericDefId::ImplId(it) => it.module(db),\n+            GenericDefId::ImplId(it) => it.lookup(db).container,\n             GenericDefId::EnumVariantId(it) => it.parent.module(db),\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }"}, {"sha": "b33507a9ae0c406d01feb3c75062dfc919c9b1a0", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     },\n     path::{Path, PathKind},\n     per_ns::PerNs,\n-    AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplId,\n+    AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplLoc,\n     Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructId,\n     TraitId, TypeAliasLoc, UnionId,\n };\n@@ -661,9 +661,11 @@ where\n                             krate: self.def_collector.def_map.krate,\n                             local_id: self.module_id,\n                         };\n-                        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n-                        let imp_id = ImplId::from_ast_id(ctx, self.raw_items[imp].ast_id);\n-                        self.def_collector.def_map.modules[self.module_id].impls.push(imp_id)\n+                        let ast_id = self.raw_items[imp].ast_id;\n+                        let impl_id =\n+                            ImplLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                                .intern(self.def_collector.db);\n+                        self.def_collector.def_map.modules[self.module_id].impls.push(impl_id)\n                     }\n                 }\n             }"}, {"sha": "f87b16b447286b880b06aa431f8d239247dfb997", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -564,7 +564,8 @@ impl HasResolver for TypeAliasId {\n \n impl HasResolver for ImplId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db)\n+        self.lookup(db)\n+            .container\n             .resolver(db)\n             .push_generic_params_scope(db, self.into())\n             .push_impl_block_scope(self)"}, {"sha": "a5c4359a73e963e8988f3aae5d08f1d284487aff", "filename": "crates/ra_hir_def/src/src.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -4,7 +4,7 @@ use hir_expand::InFile;\n use ra_arena::map::ArenaMap;\n use ra_syntax::ast;\n \n-use crate::{db::DefDatabase, ConstLoc, FunctionLoc, StaticLoc, TypeAliasLoc};\n+use crate::{db::DefDatabase, ConstLoc, FunctionLoc, ImplLoc, StaticLoc, TypeAliasLoc};\n \n pub trait HasSource {\n     type Value;\n@@ -47,6 +47,15 @@ impl HasSource for StaticLoc {\n     }\n }\n \n+impl HasSource for ImplLoc {\n+    type Value = ast::ImplBlock;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::ImplBlock> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n pub trait HasChildSource {\n     type ChildId;\n     type Value;"}, {"sha": "848e306e9eedda8ad8015c7ec0241cd36b54faee", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -6,8 +6,8 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, AstItemDef,\n-    FunctionId, HasModule, ImplId, Lookup, TraitId,\n+    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, FunctionId,\n+    HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n@@ -134,7 +134,7 @@ impl Ty {\n                 LangItemTarget::ImplBlockId(it) => Some(it),\n                 _ => None,\n             })\n-            .map(|it| it.module(db).krate)\n+            .map(|it| it.lookup(db).container.krate)\n             .collect();\n         Some(res)\n     }"}, {"sha": "ff299f511ecc4726af99e3c5c0822070b940ce89", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0644d81e52d00a7a6795b187f356213ff68225/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=7b0644d81e52d00a7a6795b187f356213ff68225", "patch": "@@ -673,7 +673,7 @@ fn impl_block_datum(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let trait_ref = trait_ref.subst(&bound_vars);\n     let trait_ = trait_ref.trait_;\n-    let impl_type = if impl_id.module(db).krate == krate {\n+    let impl_type = if impl_id.lookup(db).container.krate == krate {\n         chalk_rust_ir::ImplType::Local\n     } else {\n         chalk_rust_ir::ImplType::External"}]}