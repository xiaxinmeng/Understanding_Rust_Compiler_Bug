{"sha": "447596cccccf7ba47d93fe447d31717a8936601e", "node_id": "C_kwDOAAsO6NoAKDQ0NzU5NmNjY2NjZjdiYTQ3ZDkzZmU0NDdkMzE3MTdhODkzNjYwMWU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-09T06:25:42Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-12T17:43:05Z"}, "message": "Implement `RustIrDatabase::generator_datum()`", "tree": {"sha": "648740987bd73a23aa04df41509b952cd0b40199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/648740987bd73a23aa04df41509b952cd0b40199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447596cccccf7ba47d93fe447d31717a8936601e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmMfb6kACgkQ4laYqTBY\nYXE9xw//fRVuo9yGimM1Y29IHE3s47u6Y6RO4jC4aAI4kkfXe0hR+lJJfuIprN79\nmiP8CdmZbKq8khCMSuAS8ZPLHavSkGI0UAUw7Px6JQ+rlLMQ3LVqx14xQj5XN352\nfd7IkSTNHQPJxfzB21Y80LQdphxaPU0cV0G5rov883+ykCXOtLuL2rK9dlNmXHSo\np04Fj27ycw9Lf1unGnZyveboHcm4MpLApQFdeyWHkfSN7IOC4ZRIr+YRLQC3kzEI\n9C6Vcm+Y2gWGjV2MV6kj2sOJKDksjxqqq4PJp/fJ/VhUqbf4qsWdMZ4xYHWcgEmx\ni7IStpTC5gOPOnHfqcjtebcqwjEF/3u5ZVEN61+bSclvkDCLVB9qGUVolaEzpVY+\nAWww6PRr8w6eg7DqM1QDcGe9tnYgJmNbOpFs/q6DN9SleCkdO0/cAaxQ12nbr0er\niCyL3oEt7ZZRcXRYu5fGeyXgrEXdrt8C5BBN2z/JSPMuwm1h6IXGt39S50yKnn/y\nqoIJYHQ4waBmGaJojCyklHyBXp62VUrUEeDjmd5IvFtmU3mpY6+MhuY9t1dYxnQ9\nml9IC9LwQaclkB00up3n085hO2d0zFfhabEwIRYAymL6SnUAJSZmAlKzmJHJbW+O\ns3YD2DFevw+EA5Z4w4wy4AEhR09cdZdq853wy9URna95uf403H8=\n=/+6K\n-----END PGP SIGNATURE-----", "payload": "tree 648740987bd73a23aa04df41509b952cd0b40199\nparent 77c40f878de2c5bfca8aba5a09fd16d805944727\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1662704742 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1663004585 +0900\n\nImplement `RustIrDatabase::generator_datum()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447596cccccf7ba47d93fe447d31717a8936601e", "html_url": "https://github.com/rust-lang/rust/commit/447596cccccf7ba47d93fe447d31717a8936601e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447596cccccf7ba47d93fe447d31717a8936601e/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c40f878de2c5bfca8aba5a09fd16d805944727", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c40f878de2c5bfca8aba5a09fd16d805944727", "html_url": "https://github.com/rust-lang/rust/commit/77c40f878de2c5bfca8aba5a09fd16d805944727"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "c5cf6729d119991ff1d95fef4062be613339354e", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 56, "deletions": 9, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/447596cccccf7ba47d93fe447d31717a8936601e/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447596cccccf7ba47d93fe447d31717a8936601e/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=447596cccccf7ba47d93fe447d31717a8936601e", "patch": "@@ -11,6 +11,7 @@ use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n \n use base_db::CrateId;\n use hir_def::{\n+    expr::Movability,\n     lang_item::{lang_attr, LangItemTarget},\n     AssocItemId, GenericDefId, HasModule, ItemContainerId, Lookup, ModuleId, TypeAliasId,\n };\n@@ -26,9 +27,9 @@ use crate::{\n     to_assoc_type_id, to_chalk_trait_id,\n     traits::ChalkContext,\n     utils::generics,\n-    AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, Interner, ProjectionTy,\n-    ProjectionTyExt, QuantifiedWhereClause, Substitution, TraitRef, TraitRefExt, Ty, TyBuilder,\n-    TyExt, TyKind, WhereClause,\n+    wrap_empty_binders, AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId,\n+    Interner, ProjectionTy, ProjectionTyExt, QuantifiedWhereClause, Substitution, TraitRef,\n+    TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause,\n };\n \n pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n@@ -372,17 +373,63 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n     fn generator_datum(\n         &self,\n-        _: chalk_ir::GeneratorId<Interner>,\n+        id: chalk_ir::GeneratorId<Interner>,\n     ) -> std::sync::Arc<chalk_solve::rust_ir::GeneratorDatum<Interner>> {\n-        // FIXME\n-        unimplemented!()\n+        let (parent, expr) = self.db.lookup_intern_generator(id.into());\n+\n+        // We fill substitution with unknown type, because we only need to know whether the generic\n+        // params are types or consts to build `Binders` and those being filled up are for\n+        // `resume_type`, `yield_type`, and `return_type` of the generator in question.\n+        let subst = TyBuilder::subst_for_generator(self.db, parent).fill_with_unknown().build();\n+\n+        let len = subst.len(Interner);\n+        let input_output = rust_ir::GeneratorInputOutputDatum {\n+            resume_type: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, len - 3))\n+                .intern(Interner),\n+            yield_type: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, len - 2))\n+                .intern(Interner),\n+            return_type: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, len - 1))\n+                .intern(Interner),\n+            // FIXME: calculate upvars\n+            upvars: vec![],\n+        };\n+\n+        let it = subst\n+            .iter(Interner)\n+            .map(|it| it.constant(Interner).map(|c| c.data(Interner).ty.clone()));\n+        let input_output = crate::make_type_and_const_binders(it, input_output);\n+\n+        let movability = match self.db.body(parent)[expr] {\n+            hir_def::expr::Expr::Closure {\n+                closure_kind: hir_def::expr::ClosureKind::Generator(movability),\n+                ..\n+            } => movability,\n+            _ => unreachable!(\"non generator expression interned as generator\"),\n+        };\n+        let movability = match movability {\n+            Movability::Static => rust_ir::Movability::Static,\n+            Movability::Movable => rust_ir::Movability::Movable,\n+        };\n+\n+        Arc::new(rust_ir::GeneratorDatum { movability, input_output })\n     }\n     fn generator_witness_datum(\n         &self,\n-        _: chalk_ir::GeneratorId<Interner>,\n+        id: chalk_ir::GeneratorId<Interner>,\n     ) -> std::sync::Arc<chalk_solve::rust_ir::GeneratorWitnessDatum<Interner>> {\n-        // FIXME\n-        unimplemented!()\n+        // FIXME: calculate inner types\n+        let inner_types =\n+            rust_ir::GeneratorWitnessExistential { types: wrap_empty_binders(vec![]) };\n+\n+        let (parent, _) = self.db.lookup_intern_generator(id.into());\n+        // See the comment in `generator_datum()` for unknown types.\n+        let subst = TyBuilder::subst_for_generator(self.db, parent).fill_with_unknown().build();\n+        let it = subst\n+            .iter(Interner)\n+            .map(|it| it.constant(Interner).map(|c| c.data(Interner).ty.clone()));\n+        let inner_types = crate::make_type_and_const_binders(it, inner_types);\n+\n+        Arc::new(rust_ir::GeneratorWitnessDatum { inner_types })\n     }\n \n     fn unification_database(&self) -> &dyn chalk_ir::UnificationDatabase<Interner> {"}]}