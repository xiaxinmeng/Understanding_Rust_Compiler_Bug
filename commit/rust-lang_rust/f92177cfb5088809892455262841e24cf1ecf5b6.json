{"sha": "f92177cfb5088809892455262841e24cf1ecf5b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MjE3N2NmYjUwODg4MDk4OTI0NTUyNjI4NDFlMjRjZjFlY2Y1YjY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-30T18:16:28Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-02T12:56:38Z"}, "message": "Add an expr_source method analogous to the source methods in the code model\n\n... and use that instead of exposing the source map.", "tree": {"sha": "789f733506520663e6cb5f99eec7d56c1a443831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789f733506520663e6cb5f99eec7d56c1a443831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92177cfb5088809892455262841e24cf1ecf5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92177cfb5088809892455262841e24cf1ecf5b6", "html_url": "https://github.com/rust-lang/rust/commit/f92177cfb5088809892455262841e24cf1ecf5b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92177cfb5088809892455262841e24cf1ecf5b6/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "html_url": "https://github.com/rust-lang/rust/commit/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853"}], "stats": {"total": 167, "additions": 107, "deletions": 60}, "files": [{"sha": "d355fa2e83ad54b04b395f72c8296355b5a5c04e", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -1,7 +1,7 @@\n use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n \n use ra_db::SourceDatabase;\n-use ra_hir::{Crate, HasSource, HirDisplay, ImplItem, ModuleDef, Ty};\n+use ra_hir::{Crate, HasBodySource, HasSource, HirDisplay, ImplItem, ModuleDef, Ty};\n use ra_syntax::AstNode;\n \n use crate::Result;\n@@ -104,35 +104,34 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n             if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr_id) {\n                 num_type_mismatches += 1;\n                 if verbose {\n-                    let src = f.source(db);\n-                    let original_file = src.file_id.original_file(db);\n-                    let path = db.file_relative_path(original_file);\n-                    let line_index = host.analysis().file_line_index(original_file).unwrap();\n-                    let body_source_map = f.body_source_map(db);\n-                    let syntax_node = body_source_map.expr_syntax(expr_id);\n-                    let line_col = syntax_node.map(|syntax_node| {\n-                        (\n-                            line_index.line_col(syntax_node.range().start()),\n-                            line_index.line_col(syntax_node.range().end()),\n-                        )\n-                    });\n-                    let line_col = match line_col {\n-                        Some((start, end)) => format!(\n-                            \"{}:{}-{}:{}\",\n+                    let src = f.expr_source(db, expr_id);\n+                    if let Some(src) = src {\n+                        // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n+                        let original_file = src.file_id.original_file(db);\n+                        let path = db.file_relative_path(original_file);\n+                        let line_index = host.analysis().file_line_index(original_file).unwrap();\n+                        let (start, end) = (\n+                            line_index.line_col(src.ast.syntax().text_range().start()),\n+                            line_index.line_col(src.ast.syntax().text_range().end()),\n+                        );\n+                        bar.println(format!(\n+                            \"{} {}:{}-{}:{}: Expected {}, got {}\",\n+                            path.display(),\n                             start.line + 1,\n                             start.col_utf16,\n                             end.line + 1,\n-                            end.col_utf16\n-                        ),\n-                        None => \"?:?\".to_string(),\n-                    };\n-                    bar.println(format!(\n-                        \"{} {}: Expected {}, got {}\",\n-                        path.display(),\n-                        line_col,\n-                        mismatch.expected.display(db),\n-                        mismatch.actual.display(db)\n-                    ));\n+                            end.col_utf16,\n+                            mismatch.expected.display(db),\n+                            mismatch.actual.display(db)\n+                        ));\n+                    } else {\n+                        bar.println(format!(\n+                            \"{}: Expected {}, got {}\",\n+                            name,\n+                            mismatch.expected.display(db),\n+                            mismatch.actual.display(db)\n+                        ));\n+                    }\n                 }\n             }\n         }"}, {"sha": "f7efc1b6653126f278d245331fcefb754deb79d8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -510,18 +510,6 @@ pub enum DefWithBody {\n impl_froms!(DefWithBody: Function, Const, Static);\n \n impl DefWithBody {\n-    pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(self)\n-    }\n-\n-    pub fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(self)\n-    }\n-\n-    pub fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(self).1\n-    }\n-\n     /// Builds a resolver for code inside this item.\n     pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n         match self {\n@@ -532,6 +520,43 @@ impl DefWithBody {\n     }\n }\n \n+pub trait HasBody: Copy {\n+    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult>;\n+    fn body(self, db: &impl HirDatabase) -> Arc<Body>;\n+    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap>;\n+}\n+\n+impl<T> HasBody for T\n+where\n+    T: Into<DefWithBody> + Copy + HasSource,\n+{\n+    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer(self.into())\n+    }\n+\n+    fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n+        db.body_hir(self.into())\n+    }\n+\n+    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map(self.into()).1\n+    }\n+}\n+\n+impl HasBody for DefWithBody {\n+    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer(self)\n+    }\n+\n+    fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n+        db.body_hir(self)\n+    }\n+\n+    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map(self).1\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) id: FunctionId,\n@@ -617,7 +642,7 @@ impl Function {\n         self.data(db).name.clone()\n     }\n \n-    pub fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+    pub(crate) fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n         db.body_with_source_map(self.into()).1\n     }\n "}, {"sha": "e5bae16ab5b88a8c36f4a593460979044cd1552d", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -1,9 +1,9 @@\n-use ra_syntax::ast;\n+use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n     ids::AstItemDef, AstDatabase, Const, DefDatabase, Enum, EnumVariant, FieldSource, Function,\n-    HirFileId, MacroDef, Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias,\n-    Union,\n+    HasBody, HirDatabase, HirFileId, MacroDef, Module, ModuleSource, Static, Struct, StructField,\n+    Trait, TypeAlias, Union,\n };\n \n pub struct Source<T> {\n@@ -108,3 +108,27 @@ impl HasSource for MacroDef {\n         Source { file_id: self.id.0.file_id(), ast: self.id.0.to_node(db) }\n     }\n }\n+\n+pub trait HasBodySource: HasBody + HasSource\n+where\n+    Self::Ast: AstNode,\n+{\n+    fn expr_source(\n+        self,\n+        db: &impl HirDatabase,\n+        expr_id: crate::expr::ExprId,\n+    ) -> Option<Source<ast::Expr>> {\n+        let source_map = self.body_source_map(db);\n+        let expr_syntax = source_map.expr_syntax(expr_id)?;\n+        let source = self.source(db);\n+        let node = expr_syntax.to_node(&source.ast.syntax());\n+        ast::Expr::cast(node).map(|ast| Source { file_id: source.file_id, ast })\n+    }\n+}\n+\n+impl<T> HasBodySource for T\n+where\n+    T: HasBody + HasSource,\n+    T::Ast: AstNode,\n+{\n+}"}, {"sha": "7cdc7555c551e456654f5639b7f5dff1c750d10d", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -128,27 +128,27 @@ impl Index<PatId> for Body {\n }\n \n impl BodySourceMap {\n-    pub fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n+    pub(crate) fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n         self.expr_map_back.get(expr).cloned()\n     }\n \n-    pub fn syntax_expr(&self, ptr: SyntaxNodePtr) -> Option<ExprId> {\n+    pub(crate) fn syntax_expr(&self, ptr: SyntaxNodePtr) -> Option<ExprId> {\n         self.expr_map.get(&ptr).cloned()\n     }\n \n-    pub fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n+    pub(crate) fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n         self.expr_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n     }\n \n-    pub fn pat_syntax(&self, pat: PatId) -> Option<PatPtr> {\n+    pub(crate) fn pat_syntax(&self, pat: PatId) -> Option<PatPtr> {\n         self.pat_map_back.get(pat).cloned()\n     }\n \n-    pub fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n+    pub(crate) fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n         self.pat_map.get(&Either::A(AstPtr::new(node))).cloned()\n     }\n \n-    pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n+    pub(crate) fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n         self.field_map[&(expr, field)]\n     }\n }"}, {"sha": "752653ad7a360ac41464079648ac57025abc60a6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -75,8 +75,8 @@ pub use self::{\n \n pub use self::code_model::{\n     docs::{DocDef, Docs, Documentation},\n-    src::{HasSource, Source},\n+    src::{HasBodySource, HasSource, Source},\n     BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-    EnumVariant, FieldSource, FnData, Function, MacroDef, Module, ModuleDef, ModuleSource, Static,\n-    Struct, StructField, Trait, TypeAlias, Union,\n+    EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef, ModuleSource,\n+    Static, Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "43aec201a7b28bd92df542c087fa1bb0c9eec46e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -27,9 +27,9 @@ use crate::{\n     name,\n     path::{PathKind, PathSegment},\n     ty::method_resolution::implements_trait,\n-    AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HirDatabase, HirFileId,\n-    MacroDef, Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static, Struct, Trait,\n-    Ty,\n+    AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HasBody, HirDatabase,\n+    HirFileId, MacroDef, Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static,\n+    Struct, Trait, Ty,\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file."}, {"sha": "9ba146299ebdc69948b44127351f36d09ce48350", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -50,8 +50,8 @@ use crate::{\n     },\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n-    AdtDef, ConstData, DefWithBody, FnData, Function, HirDatabase, ImplItem, ModuleDef, Name, Path,\n-    StructField,\n+    AdtDef, ConstData, DefWithBody, FnData, Function, HasBody, HirDatabase, ImplItem, ModuleDef,\n+    Name, Path, StructField,\n };\n \n mod unify;"}, {"sha": "80e55d2aa406f75c20a3b7f6500671d8ed0d19f8", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92177cfb5088809892455262841e24cf1ecf5b6/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=f92177cfb5088809892455262841e24cf1ecf5b6", "patch": "@@ -15,9 +15,8 @@ impl SyntaxNodePtr {\n         SyntaxNodePtr { range: node.text_range(), kind: node.kind() }\n     }\n \n-    pub fn to_node(self, root: &SyntaxNode) -> SyntaxNode {\n-        assert!(root.parent().is_none());\n-        successors(Some(root.clone()), |node| {\n+    pub fn to_node(self, parent: &SyntaxNode) -> SyntaxNode {\n+        successors(Some(parent.clone()), |node| {\n             node.children().find(|it| self.range.is_subrange(&it.text_range()))\n         })\n         .find(|it| it.text_range() == self.range && it.kind() == self.kind)"}]}