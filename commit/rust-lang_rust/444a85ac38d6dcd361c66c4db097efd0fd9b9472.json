{"sha": "444a85ac38d6dcd361c66c4db097efd0fd9b9472", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NGE4NWFjMzhkNmRjZDM2MWM2NmM0ZGIwOTdlZmQwZmQ5Yjk0NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-16T22:48:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-16T22:48:31Z"}, "message": "Auto merge of #86379 - JohnTitor:rollup-mkz9x36, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #85870 (Allow whitespace in dump_mir filter)\n - #86104 (Fix span calculation in format strings)\n - #86140 (Mention the `Borrow` guarantee on the `Hash` implementations for Arrays and `Vec`)\n - #86141 (Link reference in `dyn` keyword documentation)\n - #86260 (Open trait implementations' toggles by default.)\n - #86339 (Mention #79078 on compatibility notes of 1.52)\n - #86341 (Stop returning a value from `report_assert_as_lint`)\n - #86353 (Remove `projection_ty_from_predicates`)\n - #86361 (Add missing backslashes to prevent unwanted newlines in rustdoc HTML)\n - #86372 (Typo correction: s/is/its)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fa217f11406001f674d75850358ce50706e27ce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa217f11406001f674d75850358ce50706e27ce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444a85ac38d6dcd361c66c4db097efd0fd9b9472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444a85ac38d6dcd361c66c4db097efd0fd9b9472", "html_url": "https://github.com/rust-lang/rust/commit/444a85ac38d6dcd361c66c4db097efd0fd9b9472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444a85ac38d6dcd361c66c4db097efd0fd9b9472/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85f584aebd9b08314bf30b9adc17b4a752143e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85f584aebd9b08314bf30b9adc17b4a752143e5", "html_url": "https://github.com/rust-lang/rust/commit/a85f584aebd9b08314bf30b9adc17b4a752143e5"}, {"sha": "27d5426bcfd430a0f1ca6b42cdfe6b92e16266e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d5426bcfd430a0f1ca6b42cdfe6b92e16266e9", "html_url": "https://github.com/rust-lang/rust/commit/27d5426bcfd430a0f1ca6b42cdfe6b92e16266e9"}], "stats": {"total": 199, "additions": 136, "deletions": 63}, "files": [{"sha": "da8333e6287ca0367b137fa2a702d8e369fe9af2", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -306,6 +306,7 @@ Compatibility Notes\n - [Rustc now catches more cases of `pub_use_of_private_extern_crate`][80763]\n - [Changes in how proc macros handle whitespace may lead to panics when used\n   with older `proc-macro-hack` versions. A `cargo update` should be sufficient to fix this in all cases.][84136]\n+- [Turn `#[derive]` into a regular macro attribute][79078]\n \n [84136]: https://github.com/rust-lang/rust/issues/84136\n [80763]: https://github.com/rust-lang/rust/pull/80763\n@@ -332,6 +333,7 @@ Compatibility Notes\n [78429]: https://github.com/rust-lang/rust/pull/78429\n [82733]: https://github.com/rust-lang/rust/pull/82733\n [82594]: https://github.com/rust-lang/rust/pull/82594\n+[79078]: https://github.com/rust-lang/rust/pull/79078\n [cargo/9181]: https://github.com/rust-lang/cargo/pull/9181\n [`char::MAX`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX\n [`char::REPLACEMENT_CHARACTER`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER"}, {"sha": "00f2f37146db68193c08e48fbb5190fe96bed99d", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -939,6 +939,7 @@ pub fn expand_preparsed_format_args(\n \n     let msg = \"format argument must be a string literal\";\n     let fmt_sp = efmt.span;\n+    let efmt_kind_is_lit: bool = matches!(efmt.kind, ast::ExprKind::Lit(_));\n     let (fmt_str, fmt_style, fmt_span) = match expr_to_spanned_string(ecx, efmt, msg) {\n         Ok(mut fmt) if append_newline => {\n             fmt.0 = Symbol::intern(&format!(\"{}\\n\", fmt.0));\n@@ -989,7 +990,19 @@ pub fn expand_preparsed_format_args(\n \n     if !parser.errors.is_empty() {\n         let err = parser.errors.remove(0);\n-        let sp = fmt_span.from_inner(err.span);\n+        let sp = if efmt_kind_is_lit {\n+            fmt_span.from_inner(err.span)\n+        } else {\n+            // The format string could be another macro invocation, e.g.:\n+            //     format!(concat!(\"abc\", \"{}\"), 4);\n+            // However, `err.span` is an inner span relative to the *result* of\n+            // the macro invocation, which is why we would get a nonsensical\n+            // result calling `fmt_span.from_inner(err.span)` as above, and\n+            // might even end up inside a multibyte character (issue #86085).\n+            // Therefore, we conservatively report the error for the entire\n+            // argument span here.\n+            fmt_span\n+        };\n         let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\", err.description));\n         e.span_label(sp, err.label + \" in format string\");\n         if let Some(note) = err.note {"}, {"sha": "aa54d1ae7b9d118426d9702dac6384725e0b50c4", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 18);\n+static_assert_size!(DepNode, 17);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "dda407940e3c3a950a1ed6a36c078f9dd88803f6", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -191,10 +191,6 @@ rustc_queries! {\n         desc { |tcx| \"elaborating item bounds for `{}`\", tcx.def_path_str(key) }\n     }\n \n-    query projection_ty_from_predicates(key: (DefId, DefId)) -> Option<ty::ProjectionTy<'tcx>> {\n-        desc { |tcx| \"finding projection type inside predicates of `{}`\", tcx.def_path_str(key.0) }\n-    }\n-\n     query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLib>> {\n         desc { \"looking up the native libraries of a linked crate\" }\n     }"}, {"sha": "73a0f5537c3b39739f298d322499db75138ce1af", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -528,14 +528,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         source_info: SourceInfo,\n         message: &'static str,\n         panic: AssertKind<impl std::fmt::Debug>,\n-    ) -> Option<()> {\n-        let lint_root = self.lint_root(source_info)?;\n-        self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n-            let mut err = lint.build(message);\n-            err.span_label(source_info.span, format!(\"{:?}\", panic));\n-            err.emit()\n-        });\n-        None\n+    ) {\n+        if let Some(lint_root) = self.lint_root(source_info) {\n+            self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n+                let mut err = lint.build(message);\n+                err.span_label(source_info.span, format!(\"{:?}\", panic));\n+                err.emit()\n+            });\n+        }\n     }\n \n     fn check_unary_op(\n@@ -557,7 +557,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 source_info,\n                 \"this arithmetic operation will overflow\",\n                 AssertKind::OverflowNeg(val.to_const_int()),\n-            )?;\n+            );\n+            return None;\n         }\n \n         Some(())\n@@ -602,7 +603,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         },\n                         r.to_const_int(),\n                     ),\n-                )?;\n+                );\n+                return None;\n             }\n         }\n \n@@ -617,7 +619,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     source_info,\n                     \"this arithmetic operation will overflow\",\n                     AssertKind::Overflow(op, l.to_const_int(), r.to_const_int()),\n-                )?;\n+                );\n+                return None;\n             }\n         }\n         Some(())"}, {"sha": "f8325a3646ff40d5eed0f9f3c694eeb36a8dab8a", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -99,7 +99,10 @@ pub fn dump_enabled<'tcx>(tcx: TyCtxt<'tcx>, pass_name: &str, def_id: DefId) ->\n     });\n     filters.split('|').any(|or_filter| {\n         or_filter.split('&').all(|and_filter| {\n-            and_filter == \"all\" || pass_name.contains(and_filter) || node_path.contains(and_filter)\n+            let and_filter_trimmed = and_filter.trim();\n+            and_filter_trimmed == \"all\"\n+                || pass_name.contains(and_filter_trimmed)\n+                || node_path.contains(and_filter_trimmed)\n         })\n     })\n }"}, {"sha": "55de04bfba0fe6b7e81d566daa719441f0d5c59c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -77,7 +77,6 @@ pub fn provide(providers: &mut Providers) {\n         generics_of,\n         predicates_of,\n         predicates_defined_on,\n-        projection_ty_from_predicates,\n         explicit_predicates_of,\n         super_predicates_of,\n         super_predicates_that_define_assoc_type,\n@@ -2352,29 +2351,6 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     }\n }\n \n-fn projection_ty_from_predicates(\n-    tcx: TyCtxt<'tcx>,\n-    key: (\n-        // ty_def_id\n-        DefId,\n-        // def_id of `N` in `<T as Trait>::N`\n-        DefId,\n-    ),\n-) -> Option<ty::ProjectionTy<'tcx>> {\n-    let (ty_def_id, item_def_id) = key;\n-    let mut projection_ty = None;\n-    for (predicate, _) in tcx.predicates_of(ty_def_id).predicates {\n-        if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder()\n-        {\n-            if item_def_id == projection_predicate.projection_ty.item_def_id {\n-                projection_ty = Some(projection_predicate.projection_ty);\n-                break;\n-            }\n-        }\n-    }\n-    projection_ty\n-}\n-\n /// Converts a specific `GenericBound` from the AST into a set of\n /// predicates that apply to the self type. A vector is returned\n /// because this can be anywhere from zero predicates (`T: ?Sized` adds no"}, {"sha": "b59d2977add95ffb5fd45109940ac8a14eea1ff6", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -2407,6 +2407,23 @@ impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n     }\n }\n \n+/// The hash of a vector is the same as that of the corresponding slice,\n+/// as required by the `core::borrow::Borrow` implementation.\n+///\n+/// ```\n+/// use std::hash::{BuildHasher, Hash, Hasher};\n+///\n+/// fn hash_of(x: impl Hash, b: &impl BuildHasher) -> u64 {\n+///     let mut h = b.build_hasher();\n+///     x.hash(&mut h);\n+///     h.finish()\n+/// }\n+///\n+/// let b = std::collections::hash_map::RandomState::new();\n+/// let v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\n+/// let s: &[u8] = &[0xa8, 0x3c, 0x09];\n+/// assert_eq!(hash_of(v, &b), hash_of(s, &b));\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Hash, A: Allocator> Hash for Vec<T, A> {\n     #[inline]"}, {"sha": "f44e22b3dbd7c5d27ddb114ceb9b037a4a1db373", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -139,6 +139,23 @@ impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n     }\n }\n \n+/// The hash of an array is the same as that of the corresponding slice,\n+/// as required by the `Borrow` implementation.\n+///\n+/// ```\n+/// use std::hash::{BuildHasher, Hash, Hasher};\n+///\n+/// fn hash_of(x: impl Hash, b: &impl BuildHasher) -> u64 {\n+///     let mut h = b.build_hasher();\n+///     x.hash(&mut h);\n+///     h.finish()\n+/// }\n+///\n+/// let b = std::collections::hash_map::RandomState::new();\n+/// let a: [u8; 3] = [0xa8, 0x3c, 0x09];\n+/// let s: &[u8] = &[0xa8, 0x3c, 0x09];\n+/// assert_eq!(hash_of(a, &b), hash_of(s, &b));\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Hash, const N: usize> Hash for [T; N] {\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {"}, {"sha": "3ab40f1faa1d6a2bad27b7dba6a02f5b7f8b4136", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -194,7 +194,7 @@ impl<T: ?Sized> NonNull<T> {\n         }\n     }\n \n-    /// Decompose a (possibly wide) pointer into is address and metadata components.\n+    /// Decompose a (possibly wide) pointer into its address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]"}, {"sha": "a609567ce93f367adb43ae9f2920f7dcca5a1fd8", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -2256,6 +2256,9 @@ mod await_keyword {}\n /// At run-time, when a method needs to be called on the `dyn Trait`, the vtable is consulted to get\n /// the function pointer and then that function pointer is called.\n ///\n+/// See the Reference for more information on [trait objects][ref-trait-obj]\n+/// and [object safety][ref-obj-safety].\n+///\n /// ## Trade-offs\n ///\n /// The above indirection is the additional runtime cost of calling a function on a `dyn Trait`.\n@@ -2264,9 +2267,9 @@ mod await_keyword {}\n /// However, `dyn Trait` is likely to produce smaller code than `impl Trait` / generic parameters as\n /// the method won't be duplicated for each concrete type.\n ///\n-/// Read more about `object safety` and [trait object]s.\n-///\n /// [trait object]: ../book/ch17-02-trait-objects.html\n+/// [ref-trait-obj]: ../reference/types/trait-object.html\n+/// [ref-obj-safety]: ../reference/items/traits.html#object-safety\n /// [erased]: https://en.wikipedia.org/wiki/Type_erasure\n mod dyn_keyword {}\n "}, {"sha": "0efa014b12748d473a084d58b55cee1a93c2a81c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -488,7 +488,7 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n             .into(),\n         (\"auto-hide-large-items\", \"Auto-hide item contents for large items.\", true).into(),\n         (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n-        (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", true)\n+        (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", false)\n             .into(),\n         (\"auto-collapse-implementors\", \"Auto-hide implementors of a trait\", true).into(),\n         (\"go-to-only-result\", \"Directly go to item in search if there is only one result\", false)\n@@ -1543,15 +1543,10 @@ fn render_impl(\n         }\n     }\n     if render_mode == RenderMode::Normal {\n-        let is_implementing_trait = i.inner_impl().trait_.is_some();\n         let toggled = !impl_items.is_empty() || !default_impl_items.is_empty();\n         if toggled {\n             close_tags.insert_str(0, \"</details>\");\n-            if is_implementing_trait {\n-                write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\">\");\n-            } else {\n-                write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\");\n-            }\n+            write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\");\n         }\n         if toggled {\n             write!(w, \"<summary>\")"}, {"sha": "88ec172a18bca370ff26f3a5832ccc058c66d10c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -864,7 +864,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n     if fields.peek().is_some() {\n         write!(\n             w,\n-            \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\n+            \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\\\n                    Fields<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a></h2>\"\n         );\n         for (field, ty) in fields {\n@@ -953,8 +953,8 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n     if !e.variants.is_empty() {\n         write!(\n             w,\n-            \"<h2 id=\\\"variants\\\" class=\\\"variants small-section-header\\\">\n-                   Variants{}<a href=\\\"#variants\\\" class=\\\"anchor\\\"></a></h2>\\n\",\n+            \"<h2 id=\\\"variants\\\" class=\\\"variants small-section-header\\\">\\\n+                   Variants{}<a href=\\\"#variants\\\" class=\\\"anchor\\\"></a></h2>\",\n             document_non_exhaustive_header(it)\n         );\n         document_non_exhaustive(w, it);\n@@ -1139,7 +1139,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n         if fields.peek().is_some() {\n             write!(\n                 w,\n-                \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\n+                \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\\\n                        Fields{}<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a></h2>\",\n                 document_non_exhaustive_header(it)\n             );"}, {"sha": "e43a231d7570ba9f3be40069ff00dfb763b7cd4b", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -779,25 +779,25 @@ function hideThemeButtonState() {\n \n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n         var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n-        var hideImplementations = getSettingValue(\"auto-hide-trait-implementations\") !== \"false\";\n+        var hideImplementations = getSettingValue(\"auto-hide-trait-implementations\") === \"true\";\n         var hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n \n-        function openImplementors(id) {\n+        function setImplementorsTogglesOpen(id, open) {\n             var list = document.getElementById(id);\n             if (list !== null) {\n                 onEachLazy(list.getElementsByClassName(\"implementors-toggle\"), function(e) {\n-                    e.open = true;\n+                    e.open = open;\n                 });\n             }\n         }\n \n-        if (!hideImplementations) {\n-            openImplementors(\"trait-implementations-list\");\n-            openImplementors(\"blanket-implementations-list\");\n+        if (hideImplementations) {\n+            setImplementorsTogglesOpen(\"trait-implementations-list\", false);\n+            setImplementorsTogglesOpen(\"blanket-implementations-list\", false);\n         }\n \n         if (!hideImplementors) {\n-            openImplementors(\"implementors-list\");\n+            setImplementorsTogglesOpen(\"implementors-list\", true);\n         }\n \n         onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), function (e) {"}, {"sha": "96a5492edefcbf745a4e44e8bdcd3763afaa52cf", "filename": "src/test/rustdoc-gui/toggled-open-implementations.goml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -0,0 +1,5 @@\n+// This tests that the \"implementations\" section on struct/enum pages\n+// has all the implementations toggled open by default, so users can\n+// find method names in those implementations with Ctrl-F.\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+assert: (\".rustdoc-toggle.implementors-toggle\", \"open\", \"\")"}, {"sha": "ce92df0ad92bd7cf43cff7f154bf3c816702f858", "filename": "src/test/ui/fmt/format-concat-span.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -0,0 +1,15 @@\n+// If the format string is another macro invocation, rustc would previously\n+// compute nonsensical spans, such as:\n+//\n+//   error: invalid format string: unmatched `}` found\n+//    --> test.rs:2:17\n+//     |\n+//   2 |     format!(concat!(\"abc}\"));\n+//     |                 ^ unmatched `}` in format string\n+//\n+// This test checks that this behavior has been fixed.\n+\n+fn main() {\n+    format!(concat!(\"abc}\"));\n+    //~^ ERROR: invalid format string: unmatched `}` found\n+}"}, {"sha": "da46f40abcb97ffde2de181d4aca65fa1771b28e", "filename": "src/test/ui/fmt/format-concat-span.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -0,0 +1,11 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-concat-span.rs:13:13\n+   |\n+LL |     format!(concat!(\"abc}\"));\n+   |             ^^^^^^^^^^^^^^^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "63d42b76969cd73ec5ee4ef81b8e1aef8331202d", "filename": "src/test/ui/fmt/issue-86085.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.rs?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -0,0 +1,6 @@\n+// Tests for an ICE with the fuzzed input below.\n+\n+fn main ( ) {\n+format ! ( concat ! ( r#\"lJ\ud800\udfff\u00c6\ufffd.\ud800\udfff\ufffd\"# , \"r} {}\" )     ) ;\n+//~^ ERROR: invalid format string: unmatched `}` found\n+}"}, {"sha": "ee7d8a5cc237a833b2bdf52d76a6ecf69f2e62d7", "filename": "src/test/ui/fmt/issue-86085.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444a85ac38d6dcd361c66c4db097efd0fd9b9472/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.stderr?ref=444a85ac38d6dcd361c66c4db097efd0fd9b9472", "patch": "@@ -0,0 +1,11 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/issue-86085.rs:4:12\n+   |\n+LL | format ! ( concat ! ( r#\"lJ\ud800\udfff\u00c6\ufffd.\ud800\udfff\ufffd\"# , \"r} {}\" )     ) ;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}