{"sha": "62ba365195e37b0508dc35f73b55243cb1aef7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmEzNjUxOTVlMzdiMDUwOGRjMzVmNzNiNTUyNDNjYjFhZWY3ZjM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-22T17:27:40Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-23T15:06:41Z"}, "message": "Review comments: use newtype instead of `bool`", "tree": {"sha": "014ee35497297641cb257555fa8460f4e27a697f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/014ee35497297641cb257555fa8460f4e27a697f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ba365195e37b0508dc35f73b55243cb1aef7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ba365195e37b0508dc35f73b55243cb1aef7f3", "html_url": "https://github.com/rust-lang/rust/commit/62ba365195e37b0508dc35f73b55243cb1aef7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ba365195e37b0508dc35f73b55243cb1aef7f3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "url": "https://api.github.com/repos/rust-lang/rust/commits/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "html_url": "https://github.com/rust-lang/rust/commit/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260"}], "stats": {"total": 111, "additions": 68, "deletions": 43}, "files": [{"sha": "9e93cfc27d0dd6ce125d4eb4ff085ee5c0308145", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=62ba365195e37b0508dc35f73b55243cb1aef7f3", "patch": "@@ -54,6 +54,7 @@ use crate::infer::OriginalQueryValues;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n+    StatementAsExpression,\n };\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -689,7 +690,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let msg = \"`match` arms have incompatible types\";\n                     err.span_label(outer_error_span, msg);\n                     if let Some((sp, boxed)) = semi_span {\n-                        if boxed {\n+                        if matches!(boxed, StatementAsExpression::NeedsBoxing) {\n                             err.span_suggestion_verbose(\n                                 sp,\n                                 \"consider removing this semicolon and boxing the expression\",\n@@ -727,7 +728,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     err.span_label(sp, \"`if` and `else` have incompatible types\");\n                 }\n                 if let Some((sp, boxed)) = semicolon {\n-                    if boxed {\n+                    if matches!(boxed, StatementAsExpression::NeedsBoxing) {\n                         err.span_suggestion_verbose(\n                             sp,\n                             \"consider removing this semicolon and boxing the expression\","}, {"sha": "4deb7225dcb61db4e6cb7a1b0f28181a5c8d8f4c", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=62ba365195e37b0508dc35f73b55243cb1aef7f3", "patch": "@@ -340,11 +340,24 @@ impl ObligationCauseCode<'_> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(ObligationCauseCode<'_>, 32);\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum StatementAsExpression {\n+    CorrectType,\n+    NeedsBoxing,\n+}\n+\n+impl<'tcx> ty::Lift<'tcx> for StatementAsExpression {\n+    type Lifted = StatementAsExpression;\n+    fn lift_to_tcx(self, _tcx: TyCtxt<'tcx>) -> Option<StatementAsExpression> {\n+        Some(self)\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n pub struct MatchExpressionArmCause<'tcx> {\n     pub arm_span: Span,\n     pub scrut_span: Span,\n-    pub semi_span: Option<(Span, bool)>,\n+    pub semi_span: Option<(Span, StatementAsExpression)>,\n     pub source: hir::MatchSource,\n     pub prior_arms: Vec<Span>,\n     pub last_ty: Ty<'tcx>,\n@@ -357,7 +370,7 @@ pub struct IfExpressionCause {\n     pub then: Span,\n     pub else_sp: Span,\n     pub outer: Option<Span>,\n-    pub semicolon: Option<(Span, bool)>,\n+    pub semicolon: Option<(Span, StatementAsExpression)>,\n     pub opt_suggest_box_span: Option<Span>,\n }\n "}, {"sha": "e8eea65137ff7041757fabc4c66ccb5c0053f833", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=62ba365195e37b0508dc35f73b55243cb1aef7f3", "patch": "@@ -9,6 +9,7 @@ use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n+    StatementAsExpression,\n };\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -188,18 +189,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             } else {\n-                let (arm_span, mut semi_span) = if let hir::ExprKind::Block(blk, _) = &arm.body.kind\n-                {\n-                    self.find_block_span(blk, prior_arm_ty)\n-                } else {\n-                    (arm.body.span, None)\n-                };\n-                if semi_span.is_none() && i > 0 {\n-                    if let hir::ExprKind::Block(blk, _) = &arms[i - 1].body.kind {\n-                        let (_, semi_span_prev) = self.find_block_span(blk, Some(arm_ty));\n-                        semi_span = semi_span_prev;\n-                    }\n-                }\n+                let (arm_span, semi_span) =\n+                    self.get_appropriate_arm_semicolon_removal_span(&arms, i, prior_arm_ty, arm_ty);\n                 let (span, code) = match i {\n                     // The reason for the first arm to fail is not that the match arms diverge,\n                     // but rather that there's a prior obligation that doesn't hold.\n@@ -249,6 +240,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         coercion.complete(self)\n     }\n \n+    fn get_appropriate_arm_semicolon_removal_span(\n+        &self,\n+        arms: &'tcx [hir::Arm<'tcx>],\n+        i: usize,\n+        prior_arm_ty: Option<Ty<'tcx>>,\n+        arm_ty: Ty<'tcx>,\n+    ) -> (Span, Option<(Span, StatementAsExpression)>) {\n+        let arm = &arms[i];\n+        let (arm_span, mut semi_span) = if let hir::ExprKind::Block(blk, _) = &arm.body.kind {\n+            self.find_block_span(blk, prior_arm_ty)\n+        } else {\n+            (arm.body.span, None)\n+        };\n+        if semi_span.is_none() && i > 0 {\n+            if let hir::ExprKind::Block(blk, _) = &arms[i - 1].body.kind {\n+                let (_, semi_span_prev) = self.find_block_span(blk, Some(arm_ty));\n+                semi_span = semi_span_prev;\n+            }\n+        }\n+        (arm_span, semi_span)\n+    }\n+\n     /// When the previously checked expression (the scrutinee) diverges,\n     /// warn the user about the match arms being unreachable.\n     fn warn_arms_when_scrutinee_diverges(\n@@ -521,7 +534,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         block: &'tcx hir::Block<'tcx>,\n         expected_ty: Option<Ty<'tcx>>,\n-    ) -> (Span, Option<(Span, bool)>) {\n+    ) -> (Span, Option<(Span, StatementAsExpression)>) {\n         if let Some(expr) = &block.expr {\n             (expr.span, None)\n         } else if let Some(stmt) = block.stmts.last() {"}, {"sha": "f87e6b607d46e5d168dd1b709301e88ce0a62bbc", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=62ba365195e37b0508dc35f73b55243cb1aef7f3", "patch": "@@ -33,7 +33,9 @@ use rustc_span::{self, BytePos, MultiSpan, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCauseCode, TraitEngine, TraitEngineExt};\n+use rustc_trait_selection::traits::{\n+    self, ObligationCauseCode, StatementAsExpression, TraitEngine, TraitEngineExt,\n+};\n \n use std::collections::hash_map::Entry;\n use std::slice;\n@@ -1061,7 +1063,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         blk: &'tcx hir::Block<'tcx>,\n         expected_ty: Ty<'tcx>,\n-    ) -> Option<(Span, bool)> {\n+    ) -> Option<(Span, StatementAsExpression)> {\n         // Be helpful when the user wrote `{... expr;}` and\n         // taking the `;` off is enough to fix the error.\n         let last_stmt = blk.stmts.last()?;\n@@ -1078,49 +1080,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 let last_hir_id = self.tcx.hir().local_def_id_to_hir_id(last_def_id.expect_local());\n                 let exp_hir_id = self.tcx.hir().local_def_id_to_hir_id(exp_def_id.expect_local());\n-                if let (\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: last_bounds, .. }),\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: exp_bounds, .. }),\n-                ) = (\n+                match (\n                     &self.tcx.hir().expect_item(last_hir_id).kind,\n                     &self.tcx.hir().expect_item(exp_hir_id).kind,\n                 ) {\n-                    debug!(\"{:?} {:?}\", last_bounds, exp_bounds);\n-                    last_bounds.iter().zip(exp_bounds.iter()).all(|(left, right)| {\n+                    (\n+                        hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: last_bounds, .. }),\n+                        hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: exp_bounds, .. }),\n+                    ) if last_bounds.iter().zip(exp_bounds.iter()).all(|(left, right)| {\n                         match (left, right) {\n                             (\n                                 hir::GenericBound::Trait(tl, ml),\n                                 hir::GenericBound::Trait(tr, mr),\n-                            ) => {\n-                                tl.trait_ref.trait_def_id() == tr.trait_ref.trait_def_id()\n-                                    && ml == mr\n+                            ) if tl.trait_ref.trait_def_id() == tr.trait_ref.trait_def_id()\n+                                && ml == mr =>\n+                            {\n+                                true\n                             }\n                             (\n                                 hir::GenericBound::LangItemTrait(langl, _, _, argsl),\n                                 hir::GenericBound::LangItemTrait(langr, _, _, argsr),\n-                            ) => {\n+                            ) if langl == langr => {\n                                 // FIXME: consider the bounds!\n                                 debug!(\"{:?} {:?}\", argsl, argsr);\n-                                langl == langr\n+                                true\n                             }\n                             _ => false,\n                         }\n-                    })\n-                } else {\n-                    false\n+                    }) =>\n+                    {\n+                        StatementAsExpression::NeedsBoxing\n+                    }\n+                    _ => StatementAsExpression::CorrectType,\n                 }\n             }\n-            _ => false,\n+            _ => StatementAsExpression::CorrectType,\n         };\n-        debug!(\n-            \"needs_box {:?} {:?} {:?}\",\n-            needs_box,\n-            last_expr_ty.kind(),\n-            self.can_sub(self.param_env, last_expr_ty, expected_ty)\n-        );\n         if (matches!(last_expr_ty.kind(), ty::Error(_))\n             || self.can_sub(self.param_env, last_expr_ty, expected_ty).is_err())\n-            && !needs_box\n+            && matches!(needs_box, StatementAsExpression::CorrectType)\n         {\n             return None;\n         }"}, {"sha": "a820661d8432a0d17b0ac50d9c66ed0b5eda813f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba365195e37b0508dc35f73b55243cb1aef7f3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=62ba365195e37b0508dc35f73b55243cb1aef7f3", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{self, MultiSpan, Span};\n-use rustc_trait_selection::traits::{self, ObligationCauseCode};\n+use rustc_trait_selection::traits::{self, ObligationCauseCode, StatementAsExpression};\n \n use std::mem::replace;\n use std::slice;\n@@ -759,7 +759,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n         if let Some((span_semi, boxed)) = self.could_remove_semicolon(blk, expected_ty) {\n-            if boxed {\n+            if let StatementAsExpression::NeedsBoxing = boxed {\n                 err.span_suggestion_verbose(\n                     span_semi,\n                     \"consider removing this semicolon and boxing the expression\","}]}