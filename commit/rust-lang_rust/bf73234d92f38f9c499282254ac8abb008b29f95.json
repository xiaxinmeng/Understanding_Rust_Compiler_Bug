{"sha": "bf73234d92f38f9c499282254ac8abb008b29f95", "node_id": "C_kwDOAAsO6NoAKGJmNzMyMzRkOTJmMzhmOWM0OTkyODIyNTRhYzhhYmIwMDhiMjlmOTU", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "loic.branstett@epitech.eu", "date": "2021-12-17T19:01:19Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-04-26T08:18:53Z"}, "message": "Implement midpoint for all floating point f32 and f64", "tree": {"sha": "1a47259d231a938a0d1c8a7e48049f5e5d9ebbe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a47259d231a938a0d1c8a7e48049f5e5d9ebbe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf73234d92f38f9c499282254ac8abb008b29f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf73234d92f38f9c499282254ac8abb008b29f95", "html_url": "https://github.com/rust-lang/rust/commit/bf73234d92f38f9c499282254ac8abb008b29f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf73234d92f38f9c499282254ac8abb008b29f95/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "html_url": "https://github.com/rust-lang/rust/commit/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305"}], "stats": {"total": 128, "additions": 125, "deletions": 3}, "files": [{"sha": "4a035ad61e107cabc0708494c036c5d2211e541e", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bf73234d92f38f9c499282254ac8abb008b29f95/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf73234d92f38f9c499282254ac8abb008b29f95/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=bf73234d92f38f9c499282254ac8abb008b29f95", "patch": "@@ -940,6 +940,42 @@ impl f32 {\n         }\n     }\n \n+    /// Calculates the middle point of `self` and `rhs`.\n+    ///\n+    /// This returns NaN when *either* argument is NaN or if a combination of\n+    /// +inf and -inf is provided as arguments.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(num_midpoint)]\n+    /// assert_eq!(1f32.midpoint(4.0), 2.5);\n+    /// assert_eq!((-5.5f32).midpoint(8.0), 1.25);\n+    /// ```\n+    #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+    pub fn midpoint(self, other: f32) -> f32 {\n+        const LO: f32 = f32::MIN_POSITIVE * 2.;\n+        const HI: f32 = f32::MAX / 2.;\n+\n+        let (a, b) = (self, other);\n+        let abs_a = a.abs_private();\n+        let abs_b = b.abs_private();\n+\n+        if abs_a <= HI && abs_b <= HI {\n+            // Overflow is impossible\n+            (a + b) / 2.\n+        } else if abs_a < LO {\n+            // Not safe to halve a\n+            a + (b / 2.)\n+        } else if abs_b < LO {\n+            // Not safe to halve b\n+            (a / 2.) + b\n+        } else {\n+            // Not safe to halve a and b\n+            (a / 2.) + (b / 2.)\n+        }\n+    }\n+\n     /// Rounds toward zero and converts to any primitive integer type,\n     /// assuming that the value is finite and fits in that type.\n     ///"}, {"sha": "3aafc435f1e17687cd62e1bd47afee93818daf2b", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bf73234d92f38f9c499282254ac8abb008b29f95/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf73234d92f38f9c499282254ac8abb008b29f95/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=bf73234d92f38f9c499282254ac8abb008b29f95", "patch": "@@ -951,6 +951,42 @@ impl f64 {\n         }\n     }\n \n+    /// Calculates the middle point of `self` and `rhs`.\n+    ///\n+    /// This returns NaN when *either* argument is NaN or if a combination of\n+    /// +inf and -inf is provided as arguments.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(num_midpoint)]\n+    /// assert_eq!(1f64.midpoint(4.0), 2.5);\n+    /// assert_eq!((-5.5f64).midpoint(8.0), 1.25);\n+    /// ```\n+    #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+    pub fn midpoint(self, other: f64) -> f64 {\n+        const LO: f64 = f64::MIN_POSITIVE * 2.;\n+        const HI: f64 = f64::MAX / 2.;\n+\n+        let (a, b) = (self, other);\n+        let abs_a = a.abs_private();\n+        let abs_b = b.abs_private();\n+\n+        if abs_a <= HI && abs_b <= HI {\n+            // Overflow is impossible\n+            (a + b) / 2.\n+        } else if abs_a < LO {\n+            // Not safe to halve a\n+            a + (b / 2.)\n+        } else if abs_b < LO {\n+            // Not safe to halve b\n+            (a / 2.) + b\n+        } else {\n+            // Not safe to halve a and b\n+            (a / 2.) + (b / 2.)\n+        }\n+    }\n+\n     /// Rounds toward zero and converts to any primitive integer type,\n     /// assuming that the value is finite and fits in that type.\n     ///"}, {"sha": "15f89cd8ce446422625fe7f05390d9c86becb702", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bf73234d92f38f9c499282254ac8abb008b29f95/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf73234d92f38f9c499282254ac8abb008b29f95/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=bf73234d92f38f9c499282254ac8abb008b29f95", "patch": "@@ -724,7 +724,7 @@ assume_usize_width! {\n }\n \n macro_rules! test_float {\n-    ($modname: ident, $fty: ty, $inf: expr, $neginf: expr, $nan: expr) => {\n+    ($modname: ident, $fty: ty, $inf: expr, $neginf: expr, $nan: expr, $min: expr, $max: expr, $min_pos: expr) => {\n         mod $modname {\n             #[test]\n             fn min() {\n@@ -845,6 +845,38 @@ macro_rules! test_float {\n                 assert!(($nan as $fty).maximum($nan).is_nan());\n             }\n             #[test]\n+            fn midpoint() {\n+                assert_eq!((0.5 as $fty).midpoint(0.5), 0.5);\n+                assert_eq!((0.5 as $fty).midpoint(2.5), 1.5);\n+                assert_eq!((3.0 as $fty).midpoint(4.0), 3.5);\n+                assert_eq!((-3.0 as $fty).midpoint(4.0), 0.5);\n+                assert_eq!((3.0 as $fty).midpoint(-4.0), -0.5);\n+                assert_eq!((-3.0 as $fty).midpoint(-4.0), -3.5);\n+                assert_eq!((0.0 as $fty).midpoint(0.0), 0.0);\n+                assert_eq!((-0.0 as $fty).midpoint(-0.0), -0.0);\n+                assert_eq!((-5.0 as $fty).midpoint(5.0), 0.0);\n+                assert_eq!(($max as $fty).midpoint($min), 0.0);\n+                assert_eq!(($min as $fty).midpoint($max), -0.0);\n+                assert_eq!(($max as $fty).midpoint($min_pos), $max / 2.);\n+                assert_eq!((-$max as $fty).midpoint($min_pos), -$max / 2.);\n+                assert_eq!(($max as $fty).midpoint(-$min_pos), $max / 2.);\n+                assert_eq!((-$max as $fty).midpoint(-$min_pos), -$max / 2.);\n+                assert_eq!(($min_pos as $fty).midpoint($max), $max / 2.);\n+                assert_eq!(($min_pos as $fty).midpoint(-$max), -$max / 2.);\n+                assert_eq!((-$min_pos as $fty).midpoint($max), $max / 2.);\n+                assert_eq!((-$min_pos as $fty).midpoint(-$max), -$max / 2.);\n+                assert_eq!(($max as $fty).midpoint($max), $max);\n+                assert_eq!(($min_pos as $fty).midpoint($min_pos), $min_pos);\n+                assert_eq!((-$min_pos as $fty).midpoint(-$min_pos), -$min_pos);\n+                assert_eq!(($max as $fty).midpoint(5.0), $max / 2.0 + 2.5);\n+                assert_eq!(($max as $fty).midpoint(-5.0), $max / 2.0 - 2.5);\n+                assert_eq!(($inf as $fty).midpoint($inf), $inf);\n+                assert_eq!(($neginf as $fty).midpoint($neginf), $neginf);\n+                assert!(($nan as $fty).midpoint(1.0).is_nan());\n+                assert!((1.0 as $fty).midpoint($nan).is_nan());\n+                assert!(($nan as $fty).midpoint($nan).is_nan());\n+            }\n+            #[test]\n             fn rem_euclid() {\n                 let a: $fty = 42.0;\n                 assert!($inf.rem_euclid(a).is_nan());\n@@ -867,5 +899,23 @@ macro_rules! test_float {\n     };\n }\n \n-test_float!(f32, f32, f32::INFINITY, f32::NEG_INFINITY, f32::NAN);\n-test_float!(f64, f64, f64::INFINITY, f64::NEG_INFINITY, f64::NAN);\n+test_float!(\n+    f32,\n+    f32,\n+    f32::INFINITY,\n+    f32::NEG_INFINITY,\n+    f32::NAN,\n+    f32::MIN,\n+    f32::MAX,\n+    f32::MIN_POSITIVE\n+);\n+test_float!(\n+    f64,\n+    f64,\n+    f64::INFINITY,\n+    f64::NEG_INFINITY,\n+    f64::NAN,\n+    f64::MIN,\n+    f64::MAX,\n+    f64::MIN_POSITIVE\n+);"}]}