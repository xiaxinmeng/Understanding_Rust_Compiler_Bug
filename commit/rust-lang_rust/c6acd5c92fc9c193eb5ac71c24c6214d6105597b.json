{"sha": "c6acd5c92fc9c193eb5ac71c24c6214d6105597b", "node_id": "C_kwDOAAsO6NoAKGM2YWNkNWM5MmZjOWMxOTNlYjVhYzcxYzI0YzYyMTRkNjEwNTU5N2I", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T11:15:10Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T11:26:34Z"}, "message": "Remove `Pointer::with_ref` in favour implementing it on tagged pointers directly", "tree": {"sha": "ca1bdc546a1122fb7d90abb4b7757ace14cf6c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca1bdc546a1122fb7d90abb4b7757ace14cf6c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6acd5c92fc9c193eb5ac71c24c6214d6105597b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6acd5c92fc9c193eb5ac71c24c6214d6105597b", "html_url": "https://github.com/rust-lang/rust/commit/c6acd5c92fc9c193eb5ac71c24c6214d6105597b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6acd5c92fc9c193eb5ac71c24c6214d6105597b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9051331dd751042c49119701e745463921106c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9051331dd751042c49119701e745463921106c8b", "html_url": "https://github.com/rust-lang/rust/commit/9051331dd751042c49119701e745463921106c8b"}], "stats": {"total": 65, "additions": 25, "deletions": 40}, "files": [{"sha": "9a3d76fd4d4da0cab6fbc8cf7aa10017c4befc49", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c6acd5c92fc9c193eb5ac71c24c6214d6105597b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6acd5c92fc9c193eb5ac71c24c6214d6105597b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=c6acd5c92fc9c193eb5ac71c24c6214d6105597b", "patch": "@@ -13,7 +13,6 @@\n //! The tag must implement the `Tag` trait. We assert that the tag and `Pointer`\n //! are compatible at compile time.\n \n-use std::mem::ManuallyDrop;\n use std::ops::Deref;\n use std::ptr::NonNull;\n use std::rc::Rc;\n@@ -81,16 +80,6 @@ pub unsafe trait Pointer: Deref {\n     /// This acts as `ptr::read` semantically, it should not be called more than\n     /// once on non-`Copy` `Pointer`s.\n     unsafe fn from_ptr(ptr: NonNull<Self::Target>) -> Self;\n-\n-    /// This provides a reference to the `Pointer` itself, rather than the\n-    /// `Deref::Target`. It is used for cases where we want to call methods that\n-    /// may be implement differently for the Pointer than the Pointee (e.g.,\n-    /// `Rc::clone` vs cloning the inner value).\n-    ///\n-    /// # Safety\n-    ///\n-    /// The passed `ptr` must be returned from `into_usize`.\n-    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: NonNull<Self::Target>, f: F) -> R;\n }\n \n /// This describes tags that the `TaggedPtr` struct can hold.\n@@ -124,11 +113,6 @@ unsafe impl<T: ?Sized + Aligned> Pointer for Box<T> {\n     unsafe fn from_ptr(ptr: NonNull<T>) -> Self {\n         Box::from_raw(ptr.as_ptr())\n     }\n-\n-    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: NonNull<T>, f: F) -> R {\n-        let raw = ManuallyDrop::new(Self::from_ptr(ptr));\n-        f(&raw)\n-    }\n }\n \n unsafe impl<T: ?Sized + Aligned> Pointer for Rc<T> {\n@@ -143,11 +127,6 @@ unsafe impl<T: ?Sized + Aligned> Pointer for Rc<T> {\n     unsafe fn from_ptr(ptr: NonNull<T>) -> Self {\n         Rc::from_raw(ptr.as_ptr())\n     }\n-\n-    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: NonNull<T>, f: F) -> R {\n-        let raw = ManuallyDrop::new(Self::from_ptr(ptr));\n-        f(&raw)\n-    }\n }\n \n unsafe impl<T: ?Sized + Aligned> Pointer for Arc<T> {\n@@ -162,11 +141,6 @@ unsafe impl<T: ?Sized + Aligned> Pointer for Arc<T> {\n     unsafe fn from_ptr(ptr: NonNull<T>) -> Self {\n         Arc::from_raw(ptr.as_ptr())\n     }\n-\n-    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: NonNull<T>, f: F) -> R {\n-        let raw = ManuallyDrop::new(Self::from_ptr(ptr));\n-        f(&raw)\n-    }\n }\n \n unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a T {\n@@ -181,10 +155,6 @@ unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a T {\n     unsafe fn from_ptr(ptr: NonNull<T>) -> Self {\n         ptr.as_ref()\n     }\n-\n-    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: NonNull<T>, f: F) -> R {\n-        f(&ptr.as_ref())\n-    }\n }\n \n unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n@@ -199,10 +169,6 @@ unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n     unsafe fn from_ptr(mut ptr: NonNull<T>) -> Self {\n         ptr.as_mut()\n     }\n-\n-    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(mut ptr: NonNull<T>, f: F) -> R {\n-        f(&ptr.as_mut())\n-    }\n }\n \n /// Returns the number of bits available for use for tags in a pointer to `T`"}, {"sha": "2900b883264afa2864af670668c82dbc22b45ce6", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6acd5c92fc9c193eb5ac71c24c6214d6105597b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6acd5c92fc9c193eb5ac71c24c6214d6105597b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=c6acd5c92fc9c193eb5ac71c24c6214d6105597b", "patch": "@@ -2,6 +2,7 @@ use super::{Pointer, Tag};\n use crate::stable_hasher::{HashStable, StableHasher};\n use std::fmt;\n use std::marker::PhantomData;\n+use std::mem::ManuallyDrop;\n use std::num::NonZeroUsize;\n use std::ops::{Deref, DerefMut};\n use std::ptr::NonNull;\n@@ -85,6 +86,24 @@ where\n         self.packed.map_addr(|addr| unsafe { NonZeroUsize::new_unchecked(addr.get() << T::BITS) })\n     }\n \n+    /// This provides a reference to the `P` pointer itself, rather than the\n+    /// `Deref::Target`. It is used for cases where we want to call methods\n+    /// that may be implement differently for the Pointer than the Pointee\n+    /// (e.g., `Rc::clone` vs cloning the inner value).\n+    pub(super) fn with_pointer_ref<R>(&self, f: impl FnOnce(&P) -> R) -> R {\n+        // Safety:\n+        // - `self.raw.pointer_raw()` is originally returned from `P::into_ptr`\n+        //   and as such is valid for `P::from_ptr`.\n+        //   - This also allows us to not care whatever `f` panics or not.\n+        // - Even though we create a copy of the pointer, we store it inside\n+        //   `ManuallyDrop` and only access it by-ref, so we don't double-drop.\n+        //\n+        // Semantically this is just `f(&self.pointer)` (where `self.pointer`\n+        // is non-packed original pointer).\n+        let ptr = unsafe { ManuallyDrop::new(P::from_ptr(self.pointer_raw())) };\n+        f(&ptr)\n+    }\n+\n     pub fn pointer(self) -> P\n     where\n         P: Copy,\n@@ -189,9 +208,7 @@ where\n     T: Tag + HashStable<HCX>,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        unsafe {\n-            Pointer::with_ref(self.pointer_raw(), |p: &P| p.hash_stable(hcx, hasher));\n-        }\n+        self.with_pointer_ref(|ptr| ptr.hash_stable(hcx, hasher));\n         self.tag().hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "a2b119e15b8a5e259dce8ebd09303bcd52a9a87e", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6acd5c92fc9c193eb5ac71c24c6214d6105597b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6acd5c92fc9c193eb5ac71c24c6214d6105597b/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs?ref=c6acd5c92fc9c193eb5ac71c24c6214d6105597b", "patch": "@@ -1,8 +1,8 @@\n-use super::{Pointer, Tag};\n-use crate::stable_hasher::{HashStable, StableHasher};\n use std::fmt;\n \n use super::CopyTaggedPtr;\n+use super::{Pointer, Tag};\n+use crate::stable_hasher::{HashStable, StableHasher};\n \n /// A TaggedPtr implementing `Drop`.\n ///\n@@ -23,7 +23,9 @@ where\n     T: Tag,\n {\n     fn clone(&self) -> Self {\n-        unsafe { Self::new(P::with_ref(self.raw.pointer_raw(), |p| p.clone()), self.raw.tag()) }\n+        let ptr = self.raw.with_pointer_ref(P::clone);\n+\n+        Self::new(ptr, self.tag())\n     }\n }\n "}]}