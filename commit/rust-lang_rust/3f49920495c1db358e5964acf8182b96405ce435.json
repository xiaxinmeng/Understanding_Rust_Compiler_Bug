{"sha": "3f49920495c1db358e5964acf8182b96405ce435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNDk5MjA0OTVjMWRiMzU4ZTU5NjRhY2Y4MTgyYjk2NDA1Y2U0MzU=", "commit": {"author": {"name": "Timothy McRoy", "email": "timothy-mcroy@uiowa.edu", "date": "2016-05-01T18:41:11Z"}, "committer": {"name": "Timothy McRoy", "email": "timothy-mcroy@uiowa.edu", "date": "2016-05-01T18:41:11Z"}, "message": "Add error explanation for E0501", "tree": {"sha": "0411edc8ccc0a487e2e5d971d8e227bd743f77dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0411edc8ccc0a487e2e5d971d8e227bd743f77dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f49920495c1db358e5964acf8182b96405ce435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f49920495c1db358e5964acf8182b96405ce435", "html_url": "https://github.com/rust-lang/rust/commit/3f49920495c1db358e5964acf8182b96405ce435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f49920495c1db358e5964acf8182b96405ce435/comments", "author": null, "committer": null, "parents": [{"sha": "9e17622449ae4280463f00dfc4b1a5f7e25f9ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e17622449ae4280463f00dfc4b1a5f7e25f9ad0", "html_url": "https://github.com/rust-lang/rust/commit/9e17622449ae4280463f00dfc4b1a5f7e25f9ad0"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "6eccc7082aad493d7903fb06fcbdd6164ff17053", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3f49920495c1db358e5964acf8182b96405ce435/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f49920495c1db358e5964acf8182b96405ce435/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=3f49920495c1db358e5964acf8182b96405ce435", "patch": "@@ -314,6 +314,82 @@ let c = &i; // still ok!\n ```\n \"##,\n \n+E0501: r##\"\n+This error indicates that a mutable variable is being used while it is still\n+captured by a closure. Because the closure has borrowed the variable, it is not\n+available for use until the closure goes out of scope.\n+\n+Note that a capture will either move or borrow a variable, but in this\n+situation, the closure is borrowing the variable. Take a look at\n+http://rustbyexample.com/fn/closures/capture.html for more information about\n+capturing.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+fn inside_closure(x: &mut i32) {\n+    // Actions which require unique access\n+}\n+\n+fn outside_closure(x: &mut i32) {\n+    // Actions which require unique access\n+}\n+\n+fn foo(a: &mut i32) {\n+    let bar = || {\n+        inside_closure(a)\n+    };\n+    outside_closure(a); // error: cannot borrow `*a` as mutable because previous\n+                        //        closure requires unique access.\n+}\n+```\n+\n+To fix this error, you can place the closure in its own scope:\n+\n+```\n+fn inside_closure(x: &mut i32) {}\n+fn outside_closure(x: &mut i32) {}\n+\n+fn foo(a: &mut i32) {\n+    {\n+        let bar = || {\n+            inside_closure(a)\n+        };\n+    } // borrow on `a` ends.\n+    outside_closure(a); // ok!\n+}\n+```\n+\n+Or you can pass the variable as a parameter to the closure:\n+\n+```\n+fn inside_closure(x: &mut i32) {}\n+fn outside_closure(x: &mut i32) {}\n+\n+fn foo(a: &mut i32) {\n+    let bar = |s: &mut i32| {\n+        inside_closure(s)\n+    };\n+    outside_closure(a);\n+    bar(a);\n+}\n+```\n+\n+It may be possible to define the closure later:\n+\n+```\n+fn inside_closure(x: &mut i32) {}\n+fn outside_closure(x: &mut i32) {}\n+\n+fn foo(a: &mut i32) {\n+    outside_closure(a);\n+    let bar = || {\n+        inside_closure(a)\n+    };\n+}\n+```\n+\"##,\n+\n E0507: r##\"\n You tried to move out of a value which was borrowed. Erroneous code example:\n \n@@ -436,7 +512,6 @@ register_diagnostics! {\n     E0388, // {} in a static location\n     E0389, // {} in a `&` reference\n     E0500, // closure requires unique access to `..` but .. is already borrowed\n-    E0501, // cannot borrow `..`.. as .. because previous closure requires unique access\n     E0502, // cannot borrow `..`.. as .. because .. is also borrowed as ...\n     E0503, // cannot use `..` because it was mutably borrowed\n     E0504, // cannot move `..` into closure because it is borrowed"}]}