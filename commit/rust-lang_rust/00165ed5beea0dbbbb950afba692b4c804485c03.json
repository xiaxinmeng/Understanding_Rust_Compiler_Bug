{"sha": "00165ed5beea0dbbbb950afba692b4c804485c03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTY1ZWQ1YmVlYTBkYmJiYjk1MGFmYmE2OTJiNGM4MDQ0ODVjMDM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T21:22:10Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T21:22:10Z"}, "message": "Remove mask aliases", "tree": {"sha": "bafb7d85ad6b1966dd6c1000a1641a4b505dfb5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bafb7d85ad6b1966dd6c1000a1641a4b505dfb5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00165ed5beea0dbbbb950afba692b4c804485c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00165ed5beea0dbbbb950afba692b4c804485c03", "html_url": "https://github.com/rust-lang/rust/commit/00165ed5beea0dbbbb950afba692b4c804485c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00165ed5beea0dbbbb950afba692b4c804485c03/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40142ac034088c0ca149d4ca511bc854c70ff238", "url": "https://api.github.com/repos/rust-lang/rust/commits/40142ac034088c0ca149d4ca511bc854c70ff238", "html_url": "https://github.com/rust-lang/rust/commit/40142ac034088c0ca149d4ca511bc854c70ff238"}], "stats": {"total": 87, "additions": 36, "deletions": 51}, "files": [{"sha": "b433712a329127818f70c9f1abe4ab01a1defd75", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/00165ed5beea0dbbbb950afba692b4c804485c03/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00165ed5beea0dbbbb950afba692b4c804485c03/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=00165ed5beea0dbbbb950afba692b4c804485c03", "patch": "@@ -452,74 +452,59 @@ where\n     }\n }\n \n-/// A SIMD mask of `LANES` 8-bit values.\n-pub type Mask8<const LANES: usize> = Mask<i8, LANES>;\n-\n-/// A SIMD mask of `LANES` 16-bit values.\n-pub type Mask16<const LANES: usize> = Mask<i16, LANES>;\n-\n-/// A SIMD mask of `LANES` 32-bit values.\n-pub type Mask32<const LANES: usize> = Mask<i32, LANES>;\n-\n-/// A SIMD mask of `LANES` 64-bit values.\n-pub type Mask64<const LANES: usize> = Mask<i64, LANES>;\n-\n-/// A SIMD mask of `LANES` pointer-width values.\n-pub type MaskSize<const LANES: usize> = Mask<isize, LANES>;\n-\n /// Vector of eight 8-bit masks\n-pub type mask8x8 = Mask8<8>;\n+pub type mask8x8 = Mask<i8, 8>;\n \n /// Vector of 16 8-bit masks\n-pub type mask8x16 = Mask8<16>;\n+pub type mask8x16 = Mask<i8, 16>;\n \n /// Vector of 32 8-bit masks\n-pub type mask8x32 = Mask8<32>;\n+pub type mask8x32 = Mask<i8, 32>;\n \n /// Vector of 16 8-bit masks\n-pub type mask8x64 = Mask8<64>;\n+pub type mask8x64 = Mask<i8, 64>;\n \n /// Vector of four 16-bit masks\n-pub type mask16x4 = Mask16<4>;\n+pub type mask16x4 = Mask<i16, 4>;\n \n /// Vector of eight 16-bit masks\n-pub type mask16x8 = Mask16<8>;\n+pub type mask16x8 = Mask<i16, 8>;\n \n /// Vector of 16 16-bit masks\n-pub type mask16x16 = Mask16<16>;\n+pub type mask16x16 = Mask<i16, 16>;\n \n /// Vector of 32 16-bit masks\n-pub type mask16x32 = Mask32<32>;\n+pub type mask16x32 = Mask<i32, 32>;\n \n /// Vector of two 32-bit masks\n-pub type mask32x2 = Mask32<2>;\n+pub type mask32x2 = Mask<i32, 2>;\n \n /// Vector of four 32-bit masks\n-pub type mask32x4 = Mask32<4>;\n+pub type mask32x4 = Mask<i32, 4>;\n \n /// Vector of eight 32-bit masks\n-pub type mask32x8 = Mask32<8>;\n+pub type mask32x8 = Mask<i32, 8>;\n \n /// Vector of 16 32-bit masks\n-pub type mask32x16 = Mask32<16>;\n+pub type mask32x16 = Mask<i32, 16>;\n \n /// Vector of two 64-bit masks\n-pub type mask64x2 = Mask64<2>;\n+pub type mask64x2 = Mask<i64, 2>;\n \n /// Vector of four 64-bit masks\n-pub type mask64x4 = Mask64<4>;\n+pub type mask64x4 = Mask<i64, 4>;\n \n /// Vector of eight 64-bit masks\n-pub type mask64x8 = Mask64<8>;\n+pub type mask64x8 = Mask<i64, 8>;\n \n /// Vector of two pointer-width masks\n-pub type masksizex2 = MaskSize<2>;\n+pub type masksizex2 = Mask<isize, 2>;\n \n /// Vector of four pointer-width masks\n-pub type masksizex4 = MaskSize<4>;\n+pub type masksizex4 = Mask<isize, 4>;\n \n /// Vector of eight pointer-width masks\n-pub type masksizex8 = MaskSize<8>;\n+pub type masksizex8 = Mask<isize, 8>;\n \n macro_rules! impl_from {\n     { $from:ty  => $($to:ty),* } => {"}, {"sha": "cf8039d153d565ce7bb0323b9e8f720f7bebad1f", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/00165ed5beea0dbbbb950afba692b4c804485c03/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00165ed5beea0dbbbb950afba692b4c804485c03/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=00165ed5beea0dbbbb950afba692b4c804485c03", "patch": "@@ -7,17 +7,17 @@ use wasm_bindgen_test::*;\n wasm_bindgen_test_configure!(run_in_browser);\n \n macro_rules! test_mask_api {\n-    { $name:ident } => {\n+    { $type:ident } => {\n         #[allow(non_snake_case)]\n-        mod $name {\n+        mod $type {\n             #[cfg(target_arch = \"wasm32\")]\n             use wasm_bindgen_test::*;\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn set_and_test() {\n                 let values = [true, false, false, true, false, false, true, false];\n-                let mut mask = core_simd::$name::<8>::splat(false);\n+                let mut mask = core_simd::Mask::<$type, 8>::splat(false);\n                 for (lane, value) in values.iter().copied().enumerate() {\n                     mask.set(lane, value);\n                 }\n@@ -29,43 +29,43 @@ macro_rules! test_mask_api {\n             #[test]\n             #[should_panic]\n             fn set_invalid_lane() {\n-                let mut mask = core_simd::$name::<8>::splat(false);\n+                let mut mask = core_simd::Mask::<$type, 8>::splat(false);\n                 mask.set(8, true);\n                 let _ = mask;\n             }\n \n             #[test]\n             #[should_panic]\n             fn test_invalid_lane() {\n-                let mask = core_simd::$name::<8>::splat(false);\n+                let mask = core_simd::Mask::<$type, 8>::splat(false);\n                 let _ = mask.test(8);\n             }\n \n             #[test]\n             fn any() {\n-                assert!(!core_simd::$name::<8>::splat(false).any());\n-                assert!(core_simd::$name::<8>::splat(true).any());\n-                let mut v = core_simd::$name::<8>::splat(false);\n+                assert!(!core_simd::Mask::<$type, 8>::splat(false).any());\n+                assert!(core_simd::Mask::<$type, 8>::splat(true).any());\n+                let mut v = core_simd::Mask::<$type, 8>::splat(false);\n                 v.set(2, true);\n                 assert!(v.any());\n             }\n \n             #[test]\n             fn all() {\n-                assert!(!core_simd::$name::<8>::splat(false).all());\n-                assert!(core_simd::$name::<8>::splat(true).all());\n-                let mut v = core_simd::$name::<8>::splat(false);\n+                assert!(!core_simd::Mask::<$type, 8>::splat(false).all());\n+                assert!(core_simd::Mask::<$type, 8>::splat(true).all());\n+                let mut v = core_simd::Mask::<$type, 8>::splat(false);\n                 v.set(2, true);\n                 assert!(!v.all());\n             }\n \n             #[test]\n             fn roundtrip_int_conversion() {\n                 let values = [true, false, false, true, false, false, true, false];\n-                let mask = core_simd::$name::<8>::from_array(values);\n+                let mask = core_simd::Mask::<$type, 8>::from_array(values);\n                 let int = mask.to_int();\n                 assert_eq!(int.to_array(), [-1, 0, 0, -1, 0, 0, -1, 0]);\n-                assert_eq!(core_simd::$name::<8>::from_int(int), mask);\n+                assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);\n             }\n \n             #[test]\n@@ -74,24 +74,24 @@ macro_rules! test_mask_api {\n                     true, false, false, true, false, false, true, false,\n                     true, true, false, false, false, false, false, true,\n                 ];\n-                let mask = core_simd::$name::<16>::from_array(values);\n+                let mask = core_simd::Mask::<$type, 16>::from_array(values);\n                 let bitmask = mask.to_bitmask();\n                 assert_eq!(bitmask, [0b01001001, 0b10000011]);\n-                assert_eq!(core_simd::$name::<16>::from_bitmask(bitmask), mask);\n+                assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n             }\n         }\n     }\n }\n \n mod mask_api {\n-    test_mask_api! { Mask8 }\n+    test_mask_api! { i8 }\n }\n \n #[test]\n fn convert() {\n     let values = [true, false, false, true, false, false, true, false];\n     assert_eq!(\n-        core_simd::Mask8::from_array(values),\n-        core_simd::Mask32::from_array(values).into()\n+        core_simd::Mask::<i8, 8>::from_array(values),\n+        core_simd::Mask::<i32, 8>::from_array(values).into()\n     );\n }"}]}