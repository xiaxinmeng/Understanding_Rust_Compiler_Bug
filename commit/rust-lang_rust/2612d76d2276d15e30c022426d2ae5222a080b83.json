{"sha": "2612d76d2276d15e30c022426d2ae5222a080b83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MTJkNzZkMjI3NmQxNWUzMGMwMjI0MjZkMmFlNTIyMmEwODBiODM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T00:08:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:22Z"}, "message": "librustc: De-`@mut` `intrinsic_defs`", "tree": {"sha": "48582eb531c5272915d8ddf0a2fa5dd7ffd770f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48582eb531c5272915d8ddf0a2fa5dd7ffd770f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2612d76d2276d15e30c022426d2ae5222a080b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2612d76d2276d15e30c022426d2ae5222a080b83", "html_url": "https://github.com/rust-lang/rust/commit/2612d76d2276d15e30c022426d2ae5222a080b83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2612d76d2276d15e30c022426d2ae5222a080b83/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ead970b215e2db865b00d48024c81d0052547eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ead970b215e2db865b00d48024c81d0052547eb", "html_url": "https://github.com/rust-lang/rust/commit/2ead970b215e2db865b00d48024c81d0052547eb"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "84ad8099892d3e6ca8eb383c3bc2d7ea6c2f71f4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2612d76d2276d15e30c022426d2ae5222a080b83/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2612d76d2276d15e30c022426d2ae5222a080b83/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2612d76d2276d15e30c022426d2ae5222a080b83", "patch": "@@ -303,7 +303,7 @@ struct ctxt_ {\n     /// Despite its name, `items` does not only map NodeId to an item but\n     /// also to expr/stmt/local/arg/etc\n     items: ast_map::map,\n-    intrinsic_defs: @mut HashMap<ast::DefId, t>,\n+    intrinsic_defs: RefCell<HashMap<ast::DefId, t>>,\n     freevars: freevars::freevar_map,\n     tcache: type_cache,\n     rcache: creader_cache,\n@@ -989,7 +989,7 @@ pub fn mk_ctxt(s: session::Session,\n         trait_refs: RefCell::new(HashMap::new()),\n         trait_defs: RefCell::new(HashMap::new()),\n         items: amap,\n-        intrinsic_defs: @mut HashMap::new(),\n+        intrinsic_defs: RefCell::new(HashMap::new()),\n         freevars: freevars,\n         tcache: @mut HashMap::new(),\n         rcache: mk_rcache(),\n@@ -4417,14 +4417,16 @@ pub fn count_traits_and_supertraits(tcx: ctxt,\n \n pub fn get_tydesc_ty(tcx: ctxt) -> Result<t, ~str> {\n     tcx.lang_items.require(TyDescStructLangItem).map(|tydesc_lang_item| {\n-        tcx.intrinsic_defs.find_copy(&tydesc_lang_item)\n+        let intrinsic_defs = tcx.intrinsic_defs.borrow();\n+        intrinsic_defs.get().find_copy(&tydesc_lang_item)\n             .expect(\"Failed to resolve TyDesc\")\n     })\n }\n \n pub fn get_opaque_ty(tcx: ctxt) -> Result<t, ~str> {\n     tcx.lang_items.require(OpaqueStructLangItem).map(|opaque_lang_item| {\n-        tcx.intrinsic_defs.find_copy(&opaque_lang_item)\n+        let intrinsic_defs = tcx.intrinsic_defs.borrow();\n+        intrinsic_defs.get().find_copy(&opaque_lang_item)\n             .expect(\"Failed to resolve Opaque\")\n     })\n }"}, {"sha": "5bcaf41a870c6f84fe0875952fe7a9d889802821", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2612d76d2276d15e30c022426d2ae5222a080b83/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2612d76d2276d15e30c022426d2ae5222a080b83/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=2612d76d2276d15e30c022426d2ae5222a080b83", "patch": "@@ -76,7 +76,8 @@ pub fn collect_item_types(ccx: @mut CrateCtxt, crate: &ast::Crate) {\n                               lang_item: ast::DefId) {\n         let ty::ty_param_bounds_and_ty { ty: ty, .. } =\n             ccx.get_item_ty(lang_item);\n-        ccx.tcx.intrinsic_defs.insert(lang_item, ty);\n+        let mut intrinsic_defs = ccx.tcx.intrinsic_defs.borrow_mut();\n+        intrinsic_defs.get().insert(lang_item, ty);\n     }\n \n     match ccx.tcx.lang_items.ty_desc() {"}]}