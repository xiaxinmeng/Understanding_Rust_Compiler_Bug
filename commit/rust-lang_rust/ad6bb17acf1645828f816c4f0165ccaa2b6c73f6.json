{"sha": "ad6bb17acf1645828f816c4f0165ccaa2b6c73f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNmJiMTdhY2YxNjQ1ODI4ZjgxNmM0ZjAxNjVjY2FhMmI2YzczZjY=", "commit": {"author": {"name": "Brian Leibig", "email": "brian@brianleibig.com", "date": "2015-02-10T03:41:27Z"}, "committer": {"name": "Brian Leibig", "email": "brian@brianleibig.com", "date": "2015-02-11T01:59:01Z"}, "message": "Bison grammar: refactor index expressions to use ordinary expressions as indexes, remove index_expr and expr_norange", "tree": {"sha": "97912db892cdd8d7ebde7d8ab44ecb0b34e56aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97912db892cdd8d7ebde7d8ab44ecb0b34e56aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad6bb17acf1645828f816c4f0165ccaa2b6c73f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6bb17acf1645828f816c4f0165ccaa2b6c73f6", "html_url": "https://github.com/rust-lang/rust/commit/ad6bb17acf1645828f816c4f0165ccaa2b6c73f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad6bb17acf1645828f816c4f0165ccaa2b6c73f6/comments", "author": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a954663db66fc8efb1889beaf7bd1771ecbb9b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/a954663db66fc8efb1889beaf7bd1771ecbb9b21", "html_url": "https://github.com/rust-lang/rust/commit/a954663db66fc8efb1889beaf7bd1771ecbb9b21"}], "stats": {"total": 86, "additions": 12, "deletions": 74}, "files": [{"sha": "2e83e8bccd53675f538c0f72725bf61f70754d63", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 12, "deletions": 74, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ad6bb17acf1645828f816c4f0165ccaa2b6c73f6/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/ad6bb17acf1645828f816c4f0165ccaa2b6c73f6/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=ad6bb17acf1645828f816c4f0165ccaa2b6c73f6", "patch": "@@ -1193,12 +1193,10 @@ maybe_stmts\n //\n // In non-stmts contexts, expr can relax this trichotomy.\n //\n-// There are also two other expr subtypes: first, nonparen_expr\n-// disallows exprs surrounded by parens (including tuple expressions),\n-// this is necessary for BOX (place) expressions, so a parens expr\n-// following the BOX is always parsed as the place. There is also\n-// expr_norange used in index_expr, which disallows '..' in\n-// expressions as that has special meaning inside of brackets.\n+// There is also one other expr subtype: nonparen_expr disallows exprs\n+// surrounded by parens (including tuple expressions), this is\n+// necessary for BOX (place) expressions, so a parens expr following\n+// the BOX is always parsed as the place.\n \n stmts\n : stmt           { $$ = mk_node(\"stmts\", 1, $1); }\n@@ -1265,7 +1263,7 @@ nonblock_expr\n | path_expr '{' struct_expr_fields '}'                          { $$ = mk_node(\"ExprStruct\", 2, $1, $3); }\n | nonblock_expr '.' path_generic_args_with_colons               { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n | nonblock_expr '.' LIT_INTEGER                                 { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n-| nonblock_expr '[' index_expr ']'                              { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n+| nonblock_expr '[' maybe_expr ']'                              { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n | nonblock_expr '(' maybe_exprs ')'                             { $$ = mk_node(\"ExprCall\", 2, $1, $3); }\n | '[' vec_expr ']'                                              { $$ = mk_node(\"ExprVec\", 1, $2); }\n | '(' maybe_exprs ')'                                           { $$ = mk_node(\"ExprParen\", 1, $2); }\n@@ -1307,6 +1305,7 @@ nonblock_expr\n | nonblock_expr DOTDOT                                          { $$ = mk_node(\"ExprRange\", 2, $1, mk_none()); }\n | nonblock_expr DOTDOT expr                                     { $$ = mk_node(\"ExprRange\", 2, $1, $3); }\n |               DOTDOT expr                                     { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n+|               DOTDOT                                          { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n | nonblock_expr AS ty                                           { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n | BOX nonparen_expr                                             { $$ = mk_node(\"ExprBox\", 1, $2); }\n | %prec BOXPLACE BOX '(' maybe_expr ')' nonblock_expr           { $$ = mk_node(\"ExprBox\", 2, $3, $5); }\n@@ -1322,7 +1321,7 @@ expr\n | path_expr '{' struct_expr_fields '}'                { $$ = mk_node(\"ExprStruct\", 2, $1, $3); }\n | expr '.' path_generic_args_with_colons              { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n | expr '.' LIT_INTEGER                                { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n-| expr '[' index_expr ']'                             { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n+| expr '[' maybe_expr ']'                             { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n | expr '(' maybe_exprs ')'                            { $$ = mk_node(\"ExprCall\", 2, $1, $3); }\n | '(' maybe_exprs ')'                                 { $$ = mk_node(\"ExprParen\", 1, $2); }\n | '[' vec_expr ']'                                    { $$ = mk_node(\"ExprVec\", 1, $2); }\n@@ -1364,6 +1363,7 @@ expr\n | expr DOTDOT                                         { $$ = mk_node(\"ExprRange\", 2, $1, mk_none()); }\n | expr DOTDOT expr                                    { $$ = mk_node(\"ExprRange\", 2, $1, $3); }\n |      DOTDOT expr                                    { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n+|      DOTDOT                                         { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n | expr AS ty                                          { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n | BOX nonparen_expr                                   { $$ = mk_node(\"ExprBox\", 1, $2); }\n | %prec BOXPLACE BOX '(' maybe_expr ')' expr          { $$ = mk_node(\"ExprBox\", 2, $3, $5); }\n@@ -1381,7 +1381,7 @@ nonparen_expr\n | path_expr '{' struct_expr_fields '}'                { $$ = mk_node(\"ExprStruct\", 2, $1, $3); }\n | nonparen_expr '.' path_generic_args_with_colons     { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n | nonparen_expr '.' LIT_INTEGER                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n-| nonparen_expr '[' index_expr ']'                    { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n+| nonparen_expr '[' maybe_expr ']'                    { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n | nonparen_expr '(' maybe_exprs ')'                   { $$ = mk_node(\"ExprCall\", 2, $1, $3); }\n | '[' vec_expr ']'                                    { $$ = mk_node(\"ExprVec\", 1, $2); }\n | CONTINUE                                            { $$ = mk_node(\"ExprAgain\", 0); }\n@@ -1422,6 +1422,7 @@ nonparen_expr\n | nonparen_expr DOTDOT                                { $$ = mk_node(\"ExprRange\", 2, $1, mk_none()); }\n | nonparen_expr DOTDOT nonparen_expr                  { $$ = mk_node(\"ExprRange\", 2, $1, $3); }\n |               DOTDOT nonparen_expr                  { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n+|               DOTDOT                                { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n | nonparen_expr AS ty                                 { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n | BOX nonparen_expr                                   { $$ = mk_node(\"ExprBox\", 1, $2); }\n | %prec BOXPLACE BOX '(' maybe_expr ')' expr          { $$ = mk_node(\"ExprBox\", 1, $3, $5); }\n@@ -1430,62 +1431,6 @@ nonparen_expr\n | nonblock_prefix_expr\n ;\n \n-expr_norange\n-: lit                                                 { $$ = mk_node(\"ExprLit\", 1, $1); }\n-| %prec IDENT\n-  path_expr                                           { $$ = mk_node(\"ExprPath\", 1, $1); }\n-| SELF                                                { $$ = mk_node(\"ExprPath\", 1, mk_node(\"ident\", 1, mk_atom(\"self\"))); }\n-| macro_expr                                          { $$ = mk_node(\"ExprMac\", 1, $1); }\n-| path_expr '{' struct_expr_fields '}'                { $$ = mk_node(\"ExprStruct\", 2, $1, $3); }\n-| expr_norange '.' path_generic_args_with_colons      { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n-| expr_norange '.' LIT_INTEGER                        { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n-| expr_norange '[' index_expr ']'                     { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n-| expr_norange '(' maybe_exprs ')'                    { $$ = mk_node(\"ExprCall\", 2, $1, $3); }\n-| '(' maybe_exprs ')'                                 { $$ = mk_node(\"ExprParen\", 1, $2); }\n-| '[' vec_expr ']'                                    { $$ = mk_node(\"ExprVec\", 1, $2); }\n-| CONTINUE                                            { $$ = mk_node(\"ExprAgain\", 0); }\n-| CONTINUE ident                                      { $$ = mk_node(\"ExprAgain\", 1, $2); }\n-| RETURN                                              { $$ = mk_node(\"ExprRet\", 0); }\n-| RETURN expr                                         { $$ = mk_node(\"ExprRet\", 1, $2); }\n-| BREAK                                               { $$ = mk_node(\"ExprBreak\", 0); }\n-| BREAK ident                                         { $$ = mk_node(\"ExprBreak\", 1, $2); }\n-| expr_norange '=' expr_norange                       { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n-| expr_norange SHLEQ expr_norange                     { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n-| expr_norange SHREQ expr_norange                     { $$ = mk_node(\"ExprAssignShr\", 2, $1, $3); }\n-| expr_norange MINUSEQ expr_norange                   { $$ = mk_node(\"ExprAssignSub\", 2, $1, $3); }\n-| expr_norange ANDEQ expr_norange                     { $$ = mk_node(\"ExprAssignBitAnd\", 2, $1, $3); }\n-| expr_norange OREQ expr_norange                      { $$ = mk_node(\"ExprAssignBitOr\", 2, $1, $3); }\n-| expr_norange PLUSEQ expr_norange                    { $$ = mk_node(\"ExprAssignAdd\", 2, $1, $3); }\n-| expr_norange STAREQ expr_norange                    { $$ = mk_node(\"ExprAssignMul\", 2, $1, $3); }\n-| expr_norange SLASHEQ expr_norange                   { $$ = mk_node(\"ExprAssignDiv\", 2, $1, $3); }\n-| expr_norange CARETEQ expr_norange                   { $$ = mk_node(\"ExprAssignBitXor\", 2, $1, $3); }\n-| expr_norange PERCENTEQ expr_norange                 { $$ = mk_node(\"ExprAssignRem\", 2, $1, $3); }\n-| expr_norange OROR expr_norange                      { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiOr\"), $1, $3); }\n-| expr_norange ANDAND expr_norange                    { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiAnd\"), $1, $3); }\n-| expr_norange EQEQ expr_norange                      { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiEq\"), $1, $3); }\n-| expr_norange NE expr_norange                        { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiNe\"), $1, $3); }\n-| expr_norange '<' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiLt\"), $1, $3); }\n-| expr_norange '>' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiGt\"), $1, $3); }\n-| expr_norange LE expr_norange                        { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiLe\"), $1, $3); }\n-| expr_norange GE expr_norange                        { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiGe\"), $1, $3); }\n-| expr_norange '|' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiBitOr\"), $1, $3); }\n-| expr_norange '^' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiBitXor\"), $1, $3); }\n-| expr_norange '&' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiBitAnd\"), $1, $3); }\n-| expr_norange SHL expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiShl\"), $1, $3); }\n-| expr_norange SHR expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiShr\"), $1, $3); }\n-| expr_norange '+' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiAdd\"), $1, $3); }\n-| expr_norange '-' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiSub\"), $1, $3); }\n-| expr_norange '*' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiMul\"), $1, $3); }\n-| expr_norange '/' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiDiv\"), $1, $3); }\n-| expr_norange '%' expr_norange                       { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiRem\"), $1, $3); }\n-| expr_norange AS ty                                  { $$ = mk_node(\"Expr_NorangeCast\", 2, $1, $3); }\n-| BOX nonparen_expr                                   { $$ = mk_node(\"ExprBox\", 1, $2); }\n-| %prec BOXPLACE BOX '(' maybe_expr ')' expr_norange  { $$ = mk_node(\"ExprBox\", 2, $3, $5); }\n-| block_expr\n-| block\n-| nonblock_prefix_expr\n-;\n-\n expr_nostruct\n : lit                                                 { $$ = mk_node(\"ExprLit\", 1, $1); }\n | %prec IDENT\n@@ -1494,7 +1439,7 @@ expr_nostruct\n | macro_expr                                          { $$ = mk_node(\"ExprMac\", 1, $1); }\n | expr_nostruct '.' path_generic_args_with_colons     { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n | expr_nostruct '.' LIT_INTEGER                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n-| expr_nostruct '[' index_expr ']'                    { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n+| expr_nostruct '[' maybe_expr ']'                    { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n | expr_nostruct '(' maybe_exprs ')'                   { $$ = mk_node(\"ExprCall\", 2, $1, $3); }\n | '[' vec_expr ']'                                    { $$ = mk_node(\"ExprVec\", 1, $2); }\n | '(' maybe_exprs ')'                                 { $$ = mk_node(\"ExprParen\", 1, $2); }\n@@ -1536,6 +1481,7 @@ expr_nostruct\n | expr_nostruct DOTDOT                                { $$ = mk_node(\"ExprRange\", 2, $1, mk_none()); }\n | expr_nostruct DOTDOT expr_nostruct                  { $$ = mk_node(\"ExprRange\", 2, $1, $3); }\n |               DOTDOT expr_nostruct                  { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n+|               DOTDOT                                { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n | expr_nostruct AS ty                                 { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n | BOX nonparen_expr                                   { $$ = mk_node(\"ExprBox\", 1, $2); }\n | %prec BOXPLACE BOX '(' maybe_expr ')' expr_nostruct { $$ = mk_node(\"ExprBox\", 1, $3, $5); }\n@@ -1612,14 +1558,6 @@ vec_expr\n | exprs ';' expr { $$ = mk_node(\"VecRepeat\", 2, $1, $3); }\n ;\n \n-index_expr\n-: expr_norange                     { $$ = mk_node(\"Index\", 1, $1); }\n-| expr_norange DOTDOT              { $$ = mk_node(\"SliceToEnd\", 1, $1); }\n-|              DOTDOT expr_norange { $$ = mk_node(\"SliceFromBeginning\", 1, $2); }\n-| expr_norange DOTDOT expr_norange { $$ = mk_node(\"Slice\", 2, $1, $3); }\n-| %empty                           { $$ = mk_none(); }\n-;\n-\n struct_expr_fields\n : field_inits\n | field_inits ','"}]}