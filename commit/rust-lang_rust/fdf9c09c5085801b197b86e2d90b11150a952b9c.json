{"sha": "fdf9c09c5085801b197b86e2d90b11150a952b9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZjljMDljNTA4NTgwMWIxOTdiODZlMmQ5MGIxMTE1MGE5NTJiOWM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T08:41:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T08:41:27Z"}, "message": "Rollup merge of #88496 - m-ou-se:prelude-collision-lifetime-generics, r=petrochenkov\n\nFix prelude collision lint suggestion for generics with lifetimes\n\nFixes https://github.com/rust-lang/rust/issues/88470\n\ncc `@nikomatsakis`", "tree": {"sha": "c7ae660b64d9e89dc855b5133bc01ac0c24edd5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ae660b64d9e89dc855b5133bc01ac0c24edd5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdf9c09c5085801b197b86e2d90b11150a952b9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLes3CRBK7hj4Ov3rIwAA8L4IAGtSSqzgj6PJyX2/F0hUZdZ1\n4o2piZFOdFUaOR3P7IorFIqsXjIukZCG5OZiZBBEba+tdsdPilOxUQSPrOoXIFF4\nWq1VUSkKxPzwVzGzXBn2lZtSbKzzJ0AphZOg8uRt0Y2y+22GZEXPzpbVoBI4l17a\nkGDu66Z566CnzynWB6l1JkLsSoSpCVDreG/XusMFjFyXNBR9txt/Wa/it6F3rMlV\nAUacQjh7ipJCGusPzfaDipq1l82DCnGD/Xuhqc0BW0DxlYHla/8cXnBOwbDW5Q/M\nju8caDCrmx/CLkmuQlVhLc2TfFPbgEj7MAI07fbsVehg180H5tIXzrV99Xg67gI=\n=SBys\n-----END PGP SIGNATURE-----\n", "payload": "tree c7ae660b64d9e89dc855b5133bc01ac0c24edd5c\nparent 4adacfd43e141b4a90c1d6c041e77db314eb7b42\nparent 78a7d1c652149c08cc60d3a91dabb66f41807d28\nauthor Mara Bos <m-ou.se@m-ou.se> 1630399287 +0200\ncommitter GitHub <noreply@github.com> 1630399287 +0200\n\nRollup merge of #88496 - m-ou-se:prelude-collision-lifetime-generics, r=petrochenkov\n\nFix prelude collision lint suggestion for generics with lifetimes\n\nFixes https://github.com/rust-lang/rust/issues/88470\n\ncc `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf9c09c5085801b197b86e2d90b11150a952b9c", "html_url": "https://github.com/rust-lang/rust/commit/fdf9c09c5085801b197b86e2d90b11150a952b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdf9c09c5085801b197b86e2d90b11150a952b9c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4adacfd43e141b4a90c1d6c041e77db314eb7b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/4adacfd43e141b4a90c1d6c041e77db314eb7b42", "html_url": "https://github.com/rust-lang/rust/commit/4adacfd43e141b4a90c1d6c041e77db314eb7b42"}, {"sha": "78a7d1c652149c08cc60d3a91dabb66f41807d28", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a7d1c652149c08cc60d3a91dabb66f41807d28", "html_url": "https://github.com/rust-lang/rust/commit/78a7d1c652149c08cc60d3a91dabb66f41807d28"}], "stats": {"total": 181, "additions": 134, "deletions": 47}, "files": [{"sha": "69dada98dc3b51168c91ddcc159e8de2b2130e10", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fdf9c09c5085801b197b86e2d90b11150a952b9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf9c09c5085801b197b86e2d90b11150a952b9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=fdf9c09c5085801b197b86e2d90b11150a952b9c", "patch": "@@ -239,47 +239,58 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let trait_path = self.trait_path_or_bare_name(span, expr_id, pick.item.container.id());\n             let trait_generics = self.tcx.generics_of(pick.item.container.id());\n \n-            let parameter_count = trait_generics.count() - (trait_generics.has_self as usize);\n-            let trait_name = if parameter_count == 0 {\n-                trait_path\n-            } else {\n-                format!(\n-                    \"{}<{}>\",\n-                    trait_path,\n-                    std::iter::repeat(\"_\").take(parameter_count).collect::<Vec<_>>().join(\", \")\n-                )\n-            };\n+            let trait_name =\n+                if trait_generics.params.len() <= trait_generics.has_self as usize {\n+                    trait_path\n+                } else {\n+                    let counts = trait_generics.own_counts();\n+                    format!(\n+                        \"{}<{}>\",\n+                        trait_path,\n+                        std::iter::repeat(\"'_\")\n+                            .take(counts.lifetimes)\n+                            .chain(std::iter::repeat(\"_\").take(\n+                                counts.types + counts.consts - trait_generics.has_self as usize\n+                            ))\n+                            .collect::<Vec<_>>()\n+                            .join(\", \")\n+                    )\n+                };\n \n             let mut lint = lint.build(&format!(\n                 \"trait-associated function `{}` will become ambiguous in Rust 2021\",\n                 method_name.name\n             ));\n \n-            let self_ty_name = self\n+            let mut self_ty_name = self\n                 .sess()\n                 .source_map()\n                 .span_to_snippet(self_ty_span)\n                 .unwrap_or_else(|_| self_ty.to_string());\n \n-            let self_ty_generics_count = match self_ty.kind() {\n-                // Get the number of generics the self type has (if an Adt) unless we can determine that\n-                // the user has written the self type with generics already which we (naively) do by looking\n-                // for a \"<\" in `self_ty_name`.\n-                Adt(def, _) if !self_ty_name.contains('<') => self.tcx.generics_of(def.did).count(),\n-                _ => 0,\n-            };\n-            let self_ty_generics = if self_ty_generics_count > 0 {\n-                format!(\"<{}>\", vec![\"_\"; self_ty_generics_count].join(\", \"))\n-            } else {\n-                String::new()\n-            };\n+            // Get the number of generics the self type has (if an Adt) unless we can determine that\n+            // the user has written the self type with generics already which we (naively) do by looking\n+            // for a \"<\" in `self_ty_name`.\n+            if !self_ty_name.contains('<') {\n+                if let Adt(def, _) = self_ty.kind() {\n+                    let generics = self.tcx.generics_of(def.did);\n+                    if !generics.params.is_empty() {\n+                        let counts = generics.own_counts();\n+                        self_ty_name += &format!(\n+                            \"<{}>\",\n+                            std::iter::repeat(\"'_\")\n+                                .take(counts.lifetimes)\n+                                .chain(std::iter::repeat(\"_\").take(counts.types + counts.consts))\n+                                .collect::<Vec<_>>()\n+                                .join(\", \")\n+                        );\n+                    }\n+                }\n+            }\n             lint.span_suggestion(\n                 span,\n                 \"disambiguate the associated function\",\n-                format!(\n-                    \"<{}{} as {}>::{}\",\n-                    self_ty_name, self_ty_generics, trait_name, method_name.name,\n-                ),\n+                format!(\"<{} as {}>::{}\", self_ty_name, trait_name, method_name.name,),\n                 Applicability::MachineApplicable,\n             );\n "}, {"sha": "a1b6f5b16baf856d457a0a47b4db2d7e809b26e7", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed?ref=fdf9c09c5085801b197b86e2d90b11150a952b9c", "patch": "@@ -0,0 +1,30 @@\n+// See https://github.com/rust-lang/rust/issues/88470\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+pub trait PyTryFrom<'v, T>: Sized {\n+    fn try_from<V>(value: V) -> Result<&'v Self, T>;\n+}\n+\n+pub trait PyTryInto<T>: Sized {\n+    fn try_into(&self) -> Result<&T, i32>;\n+}\n+\n+struct Foo;\n+\n+impl<U> PyTryInto<U> for Foo\n+where\n+    U: for<'v> PyTryFrom<'v, i32>,\n+{\n+    fn try_into(&self) -> Result<&U, i32> {\n+        <U as PyTryFrom<'_, _>>::try_from(self)\n+        //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+        //~| this is accepted in the current edition (Rust 2018)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "142ba552002fc97b51384001e8b6c5a9e52a8f9d", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs?ref=fdf9c09c5085801b197b86e2d90b11150a952b9c", "patch": "@@ -0,0 +1,30 @@\n+// See https://github.com/rust-lang/rust/issues/88470\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+pub trait PyTryFrom<'v, T>: Sized {\n+    fn try_from<V>(value: V) -> Result<&'v Self, T>;\n+}\n+\n+pub trait PyTryInto<T>: Sized {\n+    fn try_into(&self) -> Result<&T, i32>;\n+}\n+\n+struct Foo;\n+\n+impl<U> PyTryInto<U> for Foo\n+where\n+    U: for<'v> PyTryFrom<'v, i32>,\n+{\n+    fn try_into(&self) -> Result<&U, i32> {\n+        U::try_from(self)\n+        //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+        //~| this is accepted in the current edition (Rust 2018)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "14ad9b017b694400522f9822fbb7640aefe3971b", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr?ref=fdf9c09c5085801b197b86e2d90b11150a952b9c", "patch": "@@ -0,0 +1,16 @@\n+warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic-trait.rs:24:9\n+   |\n+LL |         U::try_from(self)\n+   |         ^^^^^^^^^^^ help: disambiguate the associated function: `<U as PyTryFrom<'_, _>>::try_from`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-prelude-collision-generic-trait.rs:5:9\n+   |\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "1bb9ba3777404415cfb8bfc325815ba4fbf6a78f", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.fixed", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed?ref=fdf9c09c5085801b197b86e2d90b11150a952b9c", "patch": "@@ -6,32 +6,32 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-struct Generic<T, U>(T, U);\n+struct Generic<'a, U>(&'a U);\n \n trait MyFromIter {\n     fn from_iter(_: i32) -> Self;\n }\n \n-impl MyFromIter for Generic<i32, i32> {\n-    fn from_iter(x: i32) -> Self {\n-        Self(x, x)\n+impl MyFromIter for Generic<'static, i32> {\n+    fn from_iter(_: i32) -> Self {\n+        todo!()\n     }\n }\n \n-impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+impl std::iter::FromIterator<i32> for Generic<'static, i32> {\n     fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n         todo!()\n     }\n }\n \n fn main() {\n-    <Generic<_, _> as MyFromIter>::from_iter(1);\n+    <Generic<'_, _> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    <Generic::<i32, i32> as MyFromIter>::from_iter(1);\n+    <Generic::<'static, i32> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    <Generic::<_, _> as MyFromIter>::from_iter(1);\n+    <Generic::<'_, _> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n }"}, {"sha": "d7f8affc61ade9e331c6a210b9cdf997dc8ec133", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs?ref=fdf9c09c5085801b197b86e2d90b11150a952b9c", "patch": "@@ -6,19 +6,19 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-struct Generic<T, U>(T, U);\n+struct Generic<'a, U>(&'a U);\n \n trait MyFromIter {\n     fn from_iter(_: i32) -> Self;\n }\n \n-impl MyFromIter for Generic<i32, i32> {\n-    fn from_iter(x: i32) -> Self {\n-        Self(x, x)\n+impl MyFromIter for Generic<'static, i32> {\n+    fn from_iter(_: i32) -> Self {\n+        todo!()\n     }\n }\n \n-impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+impl std::iter::FromIterator<i32> for Generic<'static, i32> {\n     fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n         todo!()\n     }\n@@ -28,10 +28,10 @@ fn main() {\n     Generic::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    Generic::<i32, i32>::from_iter(1);\n+    Generic::<'static, i32>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    Generic::<_, _>::from_iter(1);\n+    Generic::<'_, _>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n }"}, {"sha": "e1d3f3c0a4629d972a64b025c1163b68b6e1c47d", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdf9c09c5085801b197b86e2d90b11150a952b9c/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr?ref=fdf9c09c5085801b197b86e2d90b11150a952b9c", "patch": "@@ -2,7 +2,7 @@ warning: trait-associated function `from_iter` will become ambiguous in Rust 202\n   --> $DIR/future-prelude-collision-generic.rs:28:5\n    |\n LL |     Generic::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<_, _> as MyFromIter>::from_iter`\n+   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<'_, _> as MyFromIter>::from_iter`\n    |\n note: the lint level is defined here\n   --> $DIR/future-prelude-collision-generic.rs:5:9\n@@ -15,17 +15,17 @@ LL | #![warn(rust_2021_prelude_collisions)]\n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:31:5\n    |\n-LL |     Generic::<i32, i32>::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<i32, i32> as MyFromIter>::from_iter`\n+LL |     Generic::<'static, i32>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<'static, i32> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:34:5\n    |\n-LL |     Generic::<_, _>::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<_, _> as MyFromIter>::from_iter`\n+LL |     Generic::<'_, _>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<'_, _> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>"}]}