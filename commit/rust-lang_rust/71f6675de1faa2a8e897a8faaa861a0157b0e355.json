{"sha": "71f6675de1faa2a8e897a8faaa861a0157b0e355", "node_id": "C_kwDOAAsO6NoAKDcxZjY2NzVkZTFmYWEyYThlODk3YThmYWFhODYxYTAxNTdiMGUzNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T09:19:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T09:19:07Z"}, "message": "Auto merge of #107919 - Dylan-DPC:rollup-fkl9swa, r=Dylan-DPC\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #105019 (Add parentheses properly for borrowing suggestion)\n - #106001 (Stop at the first `NULL` argument when iterating `argv`)\n - #107098 (Suggest function call on pattern type mismatch)\n - #107490 (rustdoc: remove inconsistently-present sidebar tooltips)\n - #107855 (Add a couple random projection tests for new solver)\n - #107857 (Add ui test for implementation on projection)\n - #107878 (Clarify `new_size` for realloc means bytes)\n - #107888 (revert #107074, add regression test)\n - #107900 (Zero the `REPARSE_MOUNTPOINT_DATA_BUFFER` header)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "39c775331357fa66cb00d91c4a8e9acd89062c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39c775331357fa66cb00d91c4a8e9acd89062c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f6675de1faa2a8e897a8faaa861a0157b0e355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f6675de1faa2a8e897a8faaa861a0157b0e355", "html_url": "https://github.com/rust-lang/rust/commit/71f6675de1faa2a8e897a8faaa861a0157b0e355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f6675de1faa2a8e897a8faaa861a0157b0e355/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1623ab0246deebec4fe32dc525d20bf8a88096f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1623ab0246deebec4fe32dc525d20bf8a88096f2", "html_url": "https://github.com/rust-lang/rust/commit/1623ab0246deebec4fe32dc525d20bf8a88096f2"}, {"sha": "a50c379fcd8d0a4a9bc5ee1a837c299d3e5206f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50c379fcd8d0a4a9bc5ee1a837c299d3e5206f8", "html_url": "https://github.com/rust-lang/rust/commit/a50c379fcd8d0a4a9bc5ee1a837c299d3e5206f8"}], "stats": {"total": 390, "additions": 320, "deletions": 70}, "files": [{"sha": "56c60d59d2858676f336c247079f263ef33208f5", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::{\n     RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n     TerminatorKind, UnOp, START_BLOCK,\n };\n-use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n@@ -231,6 +231,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return true;\n         }\n \n+        // We sometimes have to use `defining_opaque_types` for subtyping\n+        // to succeed here and figuring out how exactly that should work\n+        // is annoying. It is harmless enough to just not validate anything\n+        // in that case. We still check this after analysis as all opque\n+        // types have been revealed at this point.\n+        if (src, dest).has_opaque_types() {\n+            return true;\n+        }\n+\n         crate::util::is_subtype(self.tcx, self.param_env, src, dest)\n     }\n }"}, {"sha": "e19ef2ff3bf481a874445e4e18808061dce0d0b8", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // #55810: Type check patterns first so we get types for all bindings.\n         let scrut_span = scrut.span.find_ancestor_inside(expr.span).unwrap_or(scrut.span);\n         for arm in arms {\n-            self.check_pat_top(&arm.pat, scrutinee_ty, Some(scrut_span), true);\n+            self.check_pat_top(&arm.pat, scrutinee_ty, Some(scrut_span), Some(scrut));\n         }\n \n         // Now typecheck the blocks."}, {"sha": "cc515e6c853134c6055f251f9ebedfc5d5ec9300", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -90,7 +90,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     for (idx, (param_ty, param)) in inputs_fn.chain(maybe_va_list).zip(body.params).enumerate() {\n         // Check the pattern.\n         let ty_span = try { inputs_hir?.get(idx)?.span };\n-        fcx.check_pat_top(&param.pat, param_ty, ty_span, false);\n+        fcx.check_pat_top(&param.pat, param_ty, ty_span, None);\n \n         // Check that argument is Sized.\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings"}, {"sha": "9c7a84ce198e8fa9411fde54a60220071f9055c4", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -1330,11 +1330,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Does the expected pattern type originate from an expression and what is the span?\n         let (origin_expr, ty_span) = match (decl.ty, decl.init) {\n-            (Some(ty), _) => (false, Some(ty.span)), // Bias towards the explicit user type.\n+            (Some(ty), _) => (None, Some(ty.span)), // Bias towards the explicit user type.\n             (_, Some(init)) => {\n-                (true, Some(init.span.find_ancestor_inside(decl.span).unwrap_or(init.span)))\n+                (Some(init), Some(init.span.find_ancestor_inside(decl.span).unwrap_or(init.span)))\n             } // No explicit type; so use the scrutinee.\n-            _ => (false, None), // We have `let $pat;`, so the expected type is unconstrained.\n+            _ => (None, None), // We have `let $pat;`, so the expected type is unconstrained.\n         };\n \n         // Type check the pattern. Override if necessary to avoid knock-on errors."}, {"sha": "52236ae56eeaac92b5bd15c6f33eca6555940e98", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -46,7 +46,7 @@ struct TopInfo<'tcx> {\n     /// Was the origin of the `span` from a scrutinee expression?\n     ///\n     /// Otherwise there is no scrutinee and it could be e.g. from the type of a formal parameter.\n-    origin_expr: bool,\n+    origin_expr: Option<&'tcx hir::Expr<'tcx>>,\n     /// The span giving rise to the `expected` type, if one could be provided.\n     ///\n     /// If `origin_expr` is `true`, then this is the span of the scrutinee as in:\n@@ -74,7 +74,8 @@ struct TopInfo<'tcx> {\n \n impl<'tcx> FnCtxt<'_, 'tcx> {\n     fn pattern_cause(&self, ti: TopInfo<'tcx>, cause_span: Span) -> ObligationCause<'tcx> {\n-        let code = Pattern { span: ti.span, root_ty: ti.expected, origin_expr: ti.origin_expr };\n+        let code =\n+            Pattern { span: ti.span, root_ty: ti.expected, origin_expr: ti.origin_expr.is_some() };\n         self.cause(cause_span, code)\n     }\n \n@@ -85,7 +86,14 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         actual: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n-        self.demand_eqtype_with_origin(&self.pattern_cause(ti, cause_span), expected, actual)\n+        let mut diag =\n+            self.demand_eqtype_with_origin(&self.pattern_cause(ti, cause_span), expected, actual)?;\n+        if let Some(expr) = ti.origin_expr {\n+            self.suggest_fn_call(&mut diag, expr, expected, |output| {\n+                self.can_eq(self.param_env, output, actual).is_ok()\n+            });\n+        }\n+        Some(diag)\n     }\n \n     fn demand_eqtype_pat(\n@@ -127,7 +135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         expected: Ty<'tcx>,\n         span: Option<Span>,\n-        origin_expr: bool,\n+        origin_expr: Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n         let info = TopInfo { expected, origin_expr, span };\n         self.check_pat(pat, expected, INITIAL_BM, info);\n@@ -2146,7 +2154,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n         } else if self.autoderef(span, expected_ty)\n             .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n-            && let (Some(span), true) = (ti.span, ti.origin_expr)\n+            && let Some(span) = ti.span\n+            && let Some(_) = ti.origin_expr\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n         {\n             let ty = self.resolve_vars_if_possible(ti.expected);"}, {"sha": "048a5471994195d6ccde8f7ed08b2932b75a30c5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -19,6 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::is_range_literal;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_hir::{Expr, HirId};\n@@ -1349,14 +1350,41 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n+                        // Issue #104961, we need to add parentheses properly for compond expressions\n+                        // for example, `x.starts_with(\"hi\".to_string() + \"you\")`\n+                        // should be `x.starts_with(&(\"hi\".to_string() + \"you\"))`\n+                        let Some(body_id) = self.tcx.hir().maybe_body_owned_by(obligation.cause.body_id) else { return false; };\n+                        let body = self.tcx.hir().body(body_id);\n+                        let mut expr_finder = FindExprBySpan::new(span);\n+                        expr_finder.visit_expr(body.value);\n+                        let Some(expr) = expr_finder.result else { return false; };\n+                        let needs_parens = match expr.kind {\n+                            // parenthesize if needed (Issue #46756)\n+                            hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => true,\n+                            // parenthesize borrows of range literals (Issue #54505)\n+                            _ if is_range_literal(expr) => true,\n+                            _ => false,\n+                        };\n+\n                         let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n-                        err.span_suggestion_verbose(\n-                            span.shrink_to_lo(),\n-                            &format!(\n-                                \"consider{} borrowing here\",\n-                                if is_mut { \" mutably\" } else { \"\" }\n-                            ),\n-                            format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n+                        let span = if needs_parens { span } else { span.shrink_to_lo() };\n+                        let sugg_prefix = format!(\"&{}\", if is_mut { \"mut \" } else { \"\" });\n+                        let sugg_msg = &format!(\n+                            \"consider{} borrowing here\",\n+                            if is_mut { \" mutably\" } else { \"\" }\n+                        );\n+\n+                        let suggestions = if !needs_parens {\n+                            vec![(span.shrink_to_lo(), format!(\"{}\", sugg_prefix))]\n+                        } else {\n+                            vec![\n+                                (span.shrink_to_lo(), format!(\"{}(\", sugg_prefix)),\n+                                (span.shrink_to_hi(), \")\".to_string()),\n+                            ]\n+                        };\n+                        err.multipart_suggestion_verbose(\n+                            sugg_msg,\n+                            suggestions,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "18da70451f299a7e9cedc57a27e62f615650df06", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -203,18 +203,19 @@ pub unsafe trait GlobalAlloc {\n         ptr\n     }\n \n-    /// Shrink or grow a block of memory to the given `new_size`.\n+    /// Shrink or grow a block of memory to the given `new_size` in bytes.\n     /// The block is described by the given `ptr` pointer and `layout`.\n     ///\n     /// If this returns a non-null pointer, then ownership of the memory block\n     /// referenced by `ptr` has been transferred to this allocator.\n     /// Any access to the old `ptr` is Undefined Behavior, even if the\n     /// allocation remained in-place. The newly returned pointer is the only valid pointer\n     /// for accessing this memory now.\n+    ///\n     /// The new memory block is allocated with `layout`,\n-    /// but with the `size` updated to `new_size`. This new layout must be\n-    /// used when deallocating the new memory block with `dealloc`. The range\n-    /// `0..min(layout.size(), new_size)` of the new memory block is\n+    /// but with the `size` updated to `new_size` in bytes.\n+    /// This new layout must be used when deallocating the new memory block with `dealloc`.\n+    /// The range `0..min(layout.size(), new_size)` of the new memory block is\n     /// guaranteed to have the same values as the original block.\n     ///\n     /// If this method returns null, then ownership of the memory"}, {"sha": "a5ce6d5120dad1fe88d312c359e500390d2fa54b", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -141,12 +141,28 @@ mod imp {\n             // list.\n             let argv = ARGV.load(Ordering::Relaxed);\n             let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n-            (0..argc)\n-                .map(|i| {\n-                    let cstr = CStr::from_ptr(*argv.offset(i) as *const libc::c_char);\n-                    OsStringExt::from_vec(cstr.to_bytes().to_vec())\n-                })\n-                .collect()\n+            let mut args = Vec::with_capacity(argc as usize);\n+            for i in 0..argc {\n+                let ptr = *argv.offset(i) as *const libc::c_char;\n+\n+                // Some C commandline parsers (e.g. GLib and Qt) are replacing already\n+                // handled arguments in `argv` with `NULL` and move them to the end. That\n+                // means that `argc` might be bigger than the actual number of non-`NULL`\n+                // pointers in `argv` at this point.\n+                //\n+                // To handle this we simply stop iterating at the first `NULL` argument.\n+                //\n+                // `argv` is also guaranteed to be `NULL`-terminated so any non-`NULL` arguments\n+                // after the first `NULL` can safely be ignored.\n+                if ptr.is_null() {\n+                    break;\n+                }\n+\n+                let cstr = CStr::from_ptr(ptr);\n+                args.push(OsStringExt::from_vec(cstr.to_bytes().to_vec()));\n+            }\n+\n+            args\n         }\n     }\n }"}, {"sha": "f1a784b5fd2e75c96cd7b5adb3eb2e1d2fee26ed", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -1393,6 +1393,8 @@ fn symlink_junction_inner(original: &Path, junction: &Path) -> io::Result<()> {\n         let mut data = Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n         let data_ptr = data.0.as_mut_ptr();\n         let db = data_ptr.cast::<c::REPARSE_MOUNTPOINT_DATA_BUFFER>();\n+        // Zero the header to ensure it's fully initialized, including reserved parameters.\n+        *db = mem::zeroed();\n         let buf = ptr::addr_of_mut!((*db).ReparseTarget).cast::<c::WCHAR>();\n         let mut i = 0;\n         // FIXME: this conversion is very hacky"}, {"sha": "1216a8d71c8cfa51bce3bace9577f7760de4ee1c", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -18,7 +18,7 @@ use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n     collect_spans_and_sources, print_sidebar, scrape_examples_help, sidebar_module_like, AllTypes,\n-    LinkFromSrc, NameDoc, StylePath,\n+    LinkFromSrc, StylePath,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -256,7 +256,7 @@ impl<'tcx> Context<'tcx> {\n     }\n \n     /// Construct a map of items shown in the sidebar to a plain-text summary of their docs.\n-    fn build_sidebar_items(&self, m: &clean::Module) -> BTreeMap<String, Vec<NameDoc>> {\n+    fn build_sidebar_items(&self, m: &clean::Module) -> BTreeMap<String, Vec<String>> {\n         // BTreeMap instead of HashMap to get a sorted output\n         let mut map: BTreeMap<_, Vec<_>> = BTreeMap::new();\n         let mut inserted: FxHashMap<ItemType, FxHashSet<Symbol>> = FxHashMap::default();\n@@ -274,10 +274,7 @@ impl<'tcx> Context<'tcx> {\n             if inserted.entry(short).or_default().insert(myname) {\n                 let short = short.to_string();\n                 let myname = myname.to_string();\n-                map.entry(short).or_default().push((\n-                    myname,\n-                    Some(item.doc_value().map_or_else(String::new, |s| plain_text_summary(&s))),\n-                ));\n+                map.entry(short).or_default().push(myname);\n             }\n         }\n "}, {"sha": "6a9a7a6b1a088613156447981c2b9457fdb35221", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -83,9 +83,6 @@ use crate::scrape_examples::{CallData, CallLocation};\n use crate::try_none;\n use crate::DOC_RUST_LANG_ORG_CHANNEL;\n \n-/// A pair of name and its optional document.\n-pub(crate) type NameDoc = (String, Option<String>);\n-\n pub(crate) fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     crate::html::format::display_fn(move |f| {\n         if !v.ends_with('/') && !v.is_empty() { write!(f, \"{}/\", v) } else { f.write_str(v) }"}, {"sha": "aa4d65b4bfbcd52bce477a8e32faaa2d5b407308", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -455,10 +455,7 @@ function loadCss(cssUrl) {\n             const ul = document.createElement(\"ul\");\n             ul.className = \"block \" + shortty;\n \n-            for (const item of filtered) {\n-                const name = item[0];\n-                const desc = item[1]; // can be null\n-\n+            for (const name of filtered) {\n                 let path;\n                 if (shortty === \"mod\") {\n                     path = name + \"/index.html\";\n@@ -468,7 +465,6 @@ function loadCss(cssUrl) {\n                 const current_page = document.location.href.split(\"/\").pop();\n                 const link = document.createElement(\"a\");\n                 link.href = path;\n-                link.title = desc;\n                 if (path === current_page) {\n                     link.className = \"current\";\n                 }"}, {"sha": "31e7072b5ce9bc7e05c4b596d777aaf991ad2d6d", "filename": "tests/rustdoc/markdown-summaries.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1623ab0246deebec4fe32dc525d20bf8a88096f2/tests%2Frustdoc%2Fmarkdown-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1623ab0246deebec4fe32dc525d20bf8a88096f2/tests%2Frustdoc%2Fmarkdown-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmarkdown-summaries.rs?ref=1623ab0246deebec4fe32dc525d20bf8a88096f2", "patch": "@@ -1,27 +0,0 @@\n-#![crate_type = \"lib\"]\n-#![crate_name = \"summaries\"]\n-\n-//! This *summary* has a [link] and `code`.\n-//!\n-//! This is the second paragraph.\n-//!\n-//! [link]: https://example.com\n-\n-// @hasraw search-index.js 'This <em>summary</em> has a link and <code>code</code>.'\n-// @!hasraw - 'second paragraph'\n-\n-/// This `code` will be rendered in a code tag.\n-///\n-/// This text should not be rendered.\n-pub struct Sidebar;\n-\n-// @hasraw search-index.js 'This <code>code</code> will be rendered in a code tag.'\n-// @hasraw summaries/sidebar-items.js 'This `code` will be rendered in a code tag.'\n-// @!hasraw - 'text should not be rendered'\n-\n-/// ```text\n-/// this block should not be rendered\n-/// ```\n-pub struct Sidebar2;\n-\n-// @!hasraw summaries/sidebar-items.js 'block should not be rendered'"}, {"sha": "f1ce317b3f78b584784ba3c1f6a09dd6dcb3c66a", "filename": "tests/ui/const-generics/wrong-normalization.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fconst-generics%2Fwrong-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fconst-generics%2Fwrong-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fwrong-normalization.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,19 @@\n+// This test ensures that if implementation on projections is supported,\n+// it doesn't end in very weird cycle error.\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait Identity {\n+    type Identity: ?Sized;\n+}\n+\n+impl<T: ?Sized> Identity for T {\n+    type Identity = Self;\n+}\n+\n+pub struct I8<const F: i8>;\n+\n+impl <I8<{i8::MIN}> as Identity>::Identity {\n+//~^ ERROR no nominal type found for inherent implementation\n+    pub fn foo(&self) {}\n+}"}, {"sha": "fb806bdb1e7473996deef0ae86684acf15ace445", "filename": "tests/ui/const-generics/wrong-normalization.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,11 @@\n+error[E0118]: no nominal type found for inherent implementation\n+  --> $DIR/wrong-normalization.rs:16:6\n+   |\n+LL | impl <I8<{i8::MIN}> as Identity>::Identity {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n+   |\n+   = note: either implement a trait on it or create a newtype to wrap it instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0118`."}, {"sha": "fe883ce6fc8ed3909566edc178a5cfd9ee150859", "filename": "tests/ui/impl-trait/nested-return-type2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -1,4 +1,7 @@\n // check-pass\n+// compile-flags: -Zvalidate-mir\n+\n+// Using -Zvalidate-mir as a regression test for #107346.\n \n trait Duh {}\n "}, {"sha": "09ad3bd05c1b3dda20e4842d09f3186cde6d8249", "filename": "tests/ui/impl-trait/nested-return-type2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -1,5 +1,5 @@\n warning: opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n-  --> $DIR/nested-return-type2.rs:25:24\n+  --> $DIR/nested-return-type2.rs:28:24\n    |\n LL |     type Assoc: Duh;\n    |                 --- this associated type bound is unsatisfied for `impl Send`"}, {"sha": "520d638b1748f1c4b51fb0a0e998e8c31ae9f672", "filename": "tests/ui/suggestions/issue-104961.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fissue-104961.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fissue-104961.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104961.fixed?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+fn foo(x: &str) -> bool {\n+    x.starts_with(&(\"hi\".to_string() + \" you\"))\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn foo2(x: &str) -> bool {\n+    x.starts_with(&\"hi\".to_string())\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn main() {\n+    foo(\"hi you\");\n+    foo2(\"hi\");\n+}"}, {"sha": "aeb787abb6fc8779515121fd297f747198869cc4", "filename": "tests/ui/suggestions/issue-104961.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fissue-104961.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fissue-104961.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104961.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+fn foo(x: &str) -> bool {\n+    x.starts_with(\"hi\".to_string() + \" you\")\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn foo2(x: &str) -> bool {\n+    x.starts_with(\"hi\".to_string())\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn main() {\n+    foo(\"hi you\");\n+    foo2(\"hi\");\n+}"}, {"sha": "8cec6a3f8270a6f1bd16da3b3c999e2ddf9123bd", "filename": "tests/ui/suggestions/issue-104961.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fissue-104961.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fissue-104961.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104961.stderr?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,37 @@\n+error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n+  --> $DIR/issue-104961.rs:4:19\n+   |\n+LL |     x.starts_with(\"hi\".to_string() + \" you\")\n+   |       ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Pattern<'_>` is not implemented for `String`\n+   |       |\n+   |       required by a bound introduced by this call\n+   |\n+   = note: the trait bound `String: Pattern<'_>` is not satisfied\n+   = note: required for `String` to implement `Pattern<'_>`\n+note: required by a bound in `core::str::<impl str>::starts_with`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+help: consider borrowing here\n+   |\n+LL |     x.starts_with(&(\"hi\".to_string() + \" you\"))\n+   |                   ++                         +\n+\n+error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n+  --> $DIR/issue-104961.rs:9:19\n+   |\n+LL |     x.starts_with(\"hi\".to_string())\n+   |       ----------- ^^^^^^^^^^^^^^^^ the trait `Pattern<'_>` is not implemented for `String`\n+   |       |\n+   |       required by a bound introduced by this call\n+   |\n+   = note: the trait bound `String: Pattern<'_>` is not satisfied\n+   = note: required for `String` to implement `Pattern<'_>`\n+note: required by a bound in `core::str::<impl str>::starts_with`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+help: consider borrowing here\n+   |\n+LL |     x.starts_with(&\"hi\".to_string())\n+   |                   +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "657dd9c22c21b1a4d3c7ba3f183ea8fa1fedb321", "filename": "tests/ui/suggestions/suggest-call-on-pat-mismatch.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fsuggest-call-on-pat-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fsuggest-call-on-pat-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-call-on-pat-mismatch.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,16 @@\n+enum E {\n+    One(i32, i32),\n+}\n+\n+fn main() {\n+    let var = E::One;\n+    if let E::One(var1, var2) = var {\n+        //~^ ERROR mismatched types\n+        //~| HELP use parentheses to construct this tuple variant\n+        println!(\"{var1} {var2}\");\n+    }\n+\n+    let Some(x) = Some;\n+    //~^ ERROR mismatched types\n+    //~| HELP use parentheses to construct this tuple variant\n+}"}, {"sha": "7338312bab651eb8ca999ff76830aa00e7c5889d", "filename": "tests/ui/suggestions/suggest-call-on-pat-mismatch.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fsuggest-call-on-pat-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Fsuggestions%2Fsuggest-call-on-pat-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-call-on-pat-mismatch.stderr?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-call-on-pat-mismatch.rs:7:12\n+   |\n+LL |     if let E::One(var1, var2) = var {\n+   |            ^^^^^^^^^^^^^^^^^^   --- this expression has type `fn(i32, i32) -> E {E::One}`\n+   |            |\n+   |            expected enum constructor, found `E`\n+   |\n+   = note: expected enum constructor `fn(i32, i32) -> E {E::One}`\n+                          found enum `E`\n+help: use parentheses to construct this tuple variant\n+   |\n+LL |     if let E::One(var1, var2) = var(/* i32 */, /* i32 */) {\n+   |                                    ++++++++++++++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-call-on-pat-mismatch.rs:13:9\n+   |\n+LL |     let Some(x) = Some;\n+   |         ^^^^^^^   ---- this expression has type `fn(_) -> Option<_> {Option::<_>::Some}`\n+   |         |\n+   |         expected enum constructor, found `Option<_>`\n+   |\n+   = note: expected enum constructor `fn(_) -> Option<_> {Option::<_>::Some}`\n+                          found enum `Option<_>`\n+help: use parentheses to construct this tuple variant\n+   |\n+LL |     let Some(x) = Some(/* value */);\n+   |                       +++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bdf999ec5dd00c17c10330209ec01f599fc49b87", "filename": "tests/ui/traits/new-solver/param-candidate-doesnt-shadow-project.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-candidate-doesnt-shadow-project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-candidate-doesnt-shadow-project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-candidate-doesnt-shadow-project.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+\n+impl<T> Foo for T {\n+    type Assoc = i32;\n+}\n+\n+impl<T> Bar for T where T: Foo<Assoc = i32> {}\n+\n+fn require_bar<T: Bar>() {}\n+\n+fn foo<T: Foo>() {\n+    // Unlike the classic solver, `<T as Foo>::Assoc = _` will still project\n+    // down to `i32` even though there's a param-env candidate here, since we\n+    // don't assemble any param-env projection candidates for `T: Foo` alone.\n+    require_bar::<T>();\n+}\n+\n+fn main() {}"}, {"sha": "cde2059ca9b912cbf7dc49dfad20fa78293cd635", "filename": "tests/ui/traits/new-solver/two-projection-param-candidates-are-ambiguous.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,30 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// When we're solving `<T as Foo>::Assoc = i32`, we actually first solve\n+// `<T as Foo>::Assoc = _#1t`, then unify `_#1t` with `i32`. That goal\n+// with the inference variable is ambiguous when there are >1 param-env\n+// candidates.\n+\n+// We don't unify the RHS of a projection goal eagerly when solving, both\n+// for caching reasons and partly to make sure that we don't make the new\n+// trait solver smarter than it should be.\n+\n+// This is (as far as I can tell) a forwards-compatible decision, but if you\n+// make this test go from fail to pass, be sure you understand the implications!\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+\n+impl<T> Bar for T where T: Foo<Assoc = i32> {}\n+\n+fn needs_bar<T: Bar>() {}\n+\n+fn foo<T: Foo<Assoc = i32> + Foo<Assoc = u32>>() {\n+    needs_bar::<T>();\n+    //~^ ERROR type annotations needed: cannot satisfy `T: Bar`\n+}\n+\n+fn main() {}"}, {"sha": "fa5e780ee5e8bb59fc6aad7315bd73968adcce9c", "filename": "tests/ui/traits/new-solver/two-projection-param-candidates-are-ambiguous.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f6675de1faa2a8e897a8faaa861a0157b0e355/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.stderr?ref=71f6675de1faa2a8e897a8faaa861a0157b0e355", "patch": "@@ -0,0 +1,16 @@\n+error[E0283]: type annotations needed: cannot satisfy `T: Bar`\n+  --> $DIR/two-projection-param-candidates-are-ambiguous.rs:26:5\n+   |\n+LL |     needs_bar::<T>();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: cannot satisfy `T: Bar`\n+note: required by a bound in `needs_bar`\n+  --> $DIR/two-projection-param-candidates-are-ambiguous.rs:23:17\n+   |\n+LL | fn needs_bar<T: Bar>() {}\n+   |                 ^^^ required by this bound in `needs_bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}]}