{"sha": "f9d60cf55154272656bb2bdba8c4fd419ec814e6", "node_id": "C_kwDOAAsO6NoAKGY5ZDYwY2Y1NTE1NDI3MjY1NmJiMmJkYmE4YzRmZDQxOWVjODE0ZTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T16:05:29Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T16:05:29Z"}, "message": "Do asm compilation and object file emission in parallel", "tree": {"sha": "e14aa6c60f4f68846a91a3ba837394874ac85f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14aa6c60f4f68846a91a3ba837394874ac85f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d60cf55154272656bb2bdba8c4fd419ec814e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d60cf55154272656bb2bdba8c4fd419ec814e6", "html_url": "https://github.com/rust-lang/rust/commit/f9d60cf55154272656bb2bdba8c4fd419ec814e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d60cf55154272656bb2bdba8c4fd419ec814e6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "html_url": "https://github.com/rust-lang/rust/commit/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "224756bc6c712285c8a37c4320c1ca3ae001c7c2", "filename": "src/driver/aot.rs", "status": "modified", "additions": 56, "deletions": 24, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f9d60cf55154272656bb2bdba8c4fd419ec814e6/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d60cf55154272656bb2bdba8c4fd419ec814e6/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=f9d60cf55154272656bb2bdba8c4fd419ec814e6", "patch": "@@ -4,6 +4,7 @@\n use std::fs::File;\n use std::path::PathBuf;\n use std::sync::Arc;\n+use std::thread::JoinHandle;\n \n use rustc_codegen_ssa::back::metadata::create_compressed_metadata_file;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n@@ -18,6 +19,7 @@ use rustc_session::Session;\n \n use cranelift_object::{ObjectBuilder, ObjectModule};\n \n+use crate::concurrency_limiter::{ConcurrencyLimiter, ConcurrencyLimiterToken};\n use crate::global_asm::GlobalAsmConfig;\n use crate::{prelude::*, BackendConfig};\n \n@@ -27,18 +29,24 @@ struct ModuleCodegenResult {\n     existing_work_product: Option<(WorkProductId, WorkProduct)>,\n }\n \n-impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n+enum OngoingModuleCodegen {\n+    Sync(Result<ModuleCodegenResult, String>),\n+    Async(JoinHandle<Result<ModuleCodegenResult, String>>),\n+}\n+\n+impl<HCX> HashStable<HCX> for OngoingModuleCodegen {\n     fn hash_stable(&self, _: &mut HCX, _: &mut StableHasher) {\n         // do nothing\n     }\n }\n \n pub(crate) struct OngoingCodegen {\n-    modules: Vec<Result<ModuleCodegenResult, String>>,\n+    modules: Vec<OngoingModuleCodegen>,\n     allocator_module: Option<CompiledModule>,\n     metadata_module: Option<CompiledModule>,\n     metadata: EncodedMetadata,\n     crate_info: CrateInfo,\n+    concurrency_limiter: ConcurrencyLimiter,\n }\n \n impl OngoingCodegen {\n@@ -50,7 +58,15 @@ impl OngoingCodegen {\n         let mut work_products = FxHashMap::default();\n         let mut modules = vec![];\n \n-        for module_codegen_result in self.modules {\n+        for module_codegen in self.modules {\n+            let module_codegen_result = match module_codegen {\n+                OngoingModuleCodegen::Sync(module_codegen_result) => module_codegen_result,\n+                OngoingModuleCodegen::Async(join_handle) => match join_handle.join() {\n+                    Ok(module_codegen_result) => module_codegen_result,\n+                    Err(panic) => std::panic::resume_unwind(panic),\n+                },\n+            };\n+\n             let module_codegen_result = match module_codegen_result {\n                 Ok(module_codegen_result) => module_codegen_result,\n                 Err(err) => sess.fatal(&err),\n@@ -90,6 +106,8 @@ impl OngoingCodegen {\n             }\n         }\n \n+        drop(self.concurrency_limiter);\n+\n         (\n             CodegenResults {\n                 modules,\n@@ -233,12 +251,13 @@ fn reuse_workproduct_for_cgu(\n \n fn module_codegen(\n     tcx: TyCtxt<'_>,\n-    (backend_config, global_asm_config, cgu_name): (\n+    (backend_config, global_asm_config, cgu_name, token): (\n         BackendConfig,\n         Arc<GlobalAsmConfig>,\n         rustc_span::Symbol,\n+        ConcurrencyLimiterToken,\n     ),\n-) -> Result<ModuleCodegenResult, String> {\n+) -> OngoingModuleCodegen {\n     let cgu = tcx.codegen_unit(cgu_name);\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n \n@@ -280,23 +299,26 @@ fn module_codegen(\n         cgu.is_primary(),\n     );\n \n-    let global_asm_object_file = crate::global_asm::compile_global_asm(\n-        &global_asm_config,\n-        cgu.name().as_str(),\n-        &cx.global_asm,\n-    )?;\n-\n-    tcx.sess.time(\"write object file\", || {\n-        emit_cgu(\n-            &global_asm_config.output_filenames,\n-            &cx.profiler,\n-            cgu.name().as_str().to_string(),\n-            module,\n-            cx.debug_context,\n-            cx.unwind_context,\n-            global_asm_object_file,\n-        )\n-    })\n+    let cgu_name = cgu.name().as_str().to_owned();\n+\n+    OngoingModuleCodegen::Async(std::thread::spawn(move || {\n+        let global_asm_object_file =\n+            crate::global_asm::compile_global_asm(&global_asm_config, &cgu_name, &cx.global_asm)?;\n+\n+        let codegen_result = cx.profiler.verbose_generic_activity(\"write object file\").run(|| {\n+            emit_cgu(\n+                &global_asm_config.output_filenames,\n+                &cx.profiler,\n+                cgu_name,\n+                module,\n+                cx.debug_context,\n+                cx.unwind_context,\n+                global_asm_object_file,\n+            )\n+        });\n+        std::mem::drop(token);\n+        codegen_result\n+    }))\n }\n \n pub(crate) fn run_aot(\n@@ -321,6 +343,8 @@ pub(crate) fn run_aot(\n \n     let global_asm_config = Arc::new(crate::global_asm::GlobalAsmConfig::new(tcx));\n \n+    let mut concurrency_limiter = ConcurrencyLimiter::new(tcx.sess, cgus.len());\n+\n     let modules = super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n         cgus.iter()\n             .map(|cgu| {\n@@ -338,13 +362,20 @@ pub(crate) fn run_aot(\n                             .with_task(\n                                 dep_node,\n                                 tcx,\n-                                (backend_config.clone(), global_asm_config.clone(), cgu.name()),\n+                                (\n+                                    backend_config.clone(),\n+                                    global_asm_config.clone(),\n+                                    cgu.name(),\n+                                    concurrency_limiter.acquire(),\n+                                ),\n                                 module_codegen,\n                                 Some(rustc_middle::dep_graph::hash_result),\n                             )\n                             .0\n                     }\n-                    CguReuse::PreLto => reuse_workproduct_for_cgu(tcx, &*cgu),\n+                    CguReuse::PreLto => {\n+                        OngoingModuleCodegen::Sync(reuse_workproduct_for_cgu(tcx, &*cgu))\n+                    }\n                     CguReuse::PostLto => unreachable!(),\n                 }\n             })\n@@ -424,6 +455,7 @@ pub(crate) fn run_aot(\n         metadata_module,\n         metadata,\n         crate_info: CrateInfo::new(tcx, target_cpu),\n+        concurrency_limiter,\n     })\n }\n "}]}