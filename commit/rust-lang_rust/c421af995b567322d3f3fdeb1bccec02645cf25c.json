{"sha": "c421af995b567322d3f3fdeb1bccec02645cf25c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjFhZjk5NWI1NjczMjJkM2YzZmRlYjFiY2NlYzAyNjQ1Y2YyNWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T22:59:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T22:59:46Z"}, "message": "Add assertion to constructor_intersects_pattern", "tree": {"sha": "571a220c88a2b5a1d96d313c1ee02d0541ba2883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571a220c88a2b5a1d96d313c1ee02d0541ba2883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c421af995b567322d3f3fdeb1bccec02645cf25c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c421af995b567322d3f3fdeb1bccec02645cf25c", "html_url": "https://github.com/rust-lang/rust/commit/c421af995b567322d3f3fdeb1bccec02645cf25c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c421af995b567322d3f3fdeb1bccec02645cf25c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8a625674b6624fec6f7d40f10df27ca0c316bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a625674b6624fec6f7d40f10df27ca0c316bf", "html_url": "https://github.com/rust-lang/rust/commit/6e8a625674b6624fec6f7d40f10df27ca0c316bf"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "85e68a12a971443fe56beffa3295be2fc2bc345f", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c421af995b567322d3f3fdeb1bccec02645cf25c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c421af995b567322d3f3fdeb1bccec02645cf25c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=c421af995b567322d3f3fdeb1bccec02645cf25c", "patch": "@@ -1517,7 +1517,14 @@ fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n ) -> Option<Vec<&'p Pattern<'tcx>>> {\n     if should_treat_range_exhaustively(tcx, ctor) {\n         match (IntRange::from_ctor(tcx, ctor), IntRange::from_pat(tcx, pat)) {\n-            (Some(ctor), Some(pat)) => ctor.intersection(&pat).map(|_| vec![]),\n+            (Some(ctor), Some(pat)) => {\n+                ctor.intersection(&pat).map(|_| {\n+                    let (pat_lo, pat_hi) = pat.range.into_inner();\n+                    let (ctor_lo, ctor_hi) = ctor.range.into_inner();\n+                    assert!(pat_lo <= ctor_lo && ctor_hi <= pat_hi);\n+                    Some(vec![])\n+                })\n+            }\n             _ => None,\n         }\n     } else {\n@@ -1656,21 +1663,18 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     }\n                 }\n                 _ => {\n-                    // If the constructor is a single value, we add a row to the specialised matrix\n-                    // if the pattern is equal to the constructor. If the constructor is a range of\n-                    // values, we add a row to the specialised matrix if the pattern is contained\n-                    // within the constructor. These two cases (for a single value pattern) can be\n-                    // treated as intersection.\n+                    // If the constructor is a:\n+                    //      Single value: add a row if the constructor equals the pattern.\n+                    //      Range: add a row if the constructor contains the pattern.\n                     constructor_intersects_pattern(cx.tcx, constructor, pat)\n                 }\n             }\n         }\n \n         PatternKind::Range { .. } => {\n-            // If the constructor is a single value, we add a row to the specialised matrix if the\n-            // pattern contains the constructor. If the constructor is a range of values, we add a\n-            // row to the specialised matrix if there exists any value that lies both within the\n-            // pattern and the constructor. These two cases reduce to intersection.\n+            // If the constructor is a:\n+            //      Single value: add a row if the pattern contains the constructor.\n+            //      Range: add a row if the constructor intersects the pattern.\n             constructor_intersects_pattern(cx.tcx, constructor, pat)\n         }\n "}]}