{"sha": "3454c504cfde9e034753a048feee632c060db5c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NTRjNTA0Y2ZkZTllMDM0NzUzYTA0OGZlZWU2MzJjMDYwZGI1YzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-30T23:08:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-02-05T22:37:17Z"}, "message": "Address review feedback", "tree": {"sha": "17f03b9c07a777a35ee8f910ea80bd7b9cc65ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f03b9c07a777a35ee8f910ea80bd7b9cc65ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3454c504cfde9e034753a048feee632c060db5c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3454c504cfde9e034753a048feee632c060db5c2", "html_url": "https://github.com/rust-lang/rust/commit/3454c504cfde9e034753a048feee632c060db5c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3454c504cfde9e034753a048feee632c060db5c2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1364919b6c0d850bda6b381de5bfff72edb2fa74", "url": "https://api.github.com/repos/rust-lang/rust/commits/1364919b6c0d850bda6b381de5bfff72edb2fa74", "html_url": "https://github.com/rust-lang/rust/commit/1364919b6c0d850bda6b381de5bfff72edb2fa74"}], "stats": {"total": 90, "additions": 30, "deletions": 60}, "files": [{"sha": "03aeff1363093ef95d5cea048c5b70b6b569c844", "filename": "src/etc/tidy.py", "status": "modified", "additions": 30, "deletions": 60, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/3454c504cfde9e034753a048feee632c060db5c2/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/3454c504cfde9e034753a048feee632c060db5c2/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=3454c504cfde9e034753a048feee632c060db5c2", "patch": "@@ -64,75 +64,51 @@ def do_license_check(name, contents):\n src_dir = sys.argv[1]\n \n try:\n-    count_rs = 0\n-    count_py = 0\n-    count_js = 0\n-    count_sh = 0\n-    count_pl = 0\n-    count_c = 0\n-    count_h = 0\n-    count_other = 0\n-\n     count_lines = 0\n     count_non_blank_lines = 0\n \n+    interesting_files = ['.rs', '.py', '.js', '.sh', '.c', '.h']\n+\n+    file_counts = {ext: 0 for ext in interesting_files}\n+    file_counts['other'] = 0\n+\n     def update_counts(current_name):\n-        global count_rs\n-        global count_py\n-        global count_js\n-        global count_sh\n-        global count_pl\n-        global count_c\n-        global count_h\n-        global count_other\n-\n-        if current_name.endswith(\".rs\"):\n-            count_rs += 1\n-        if current_name.endswith(\".py\"):\n-            count_py += 1\n-        if current_name.endswith(\".js\"):\n-            count_js += 1\n-        if current_name.endswith(\".sh\"):\n-            count_sh += 1\n-        if current_name.endswith(\".pl\"):\n-            count_pl += 1\n-        if current_name.endswith(\".c\"):\n-            count_c += 1\n-        if current_name.endswith(\".h\"):\n-            count_h += 1\n+        global file_counts\n+        _, ext = os.path.splitext(current_name)\n+\n+        if ext in file_counts:\n+            file_counts[ext] += 1\n+        else:\n+            file_counts['other'] += 1\n \n     all_paths = set()\n \n     for (dirpath, dirnames, filenames) in os.walk(src_dir):\n \n         # Skip some third-party directories\n-        if \"src/jemalloc\" in dirpath: continue\n-        if \"src/llvm\" in dirpath: continue\n-        if \"src/gyp\" in dirpath: continue\n-        if \"src/libbacktrace\" in dirpath: continue\n-        if \"src/compiler-rt\" in dirpath: continue\n-        if \"src/rt/hoedown\" in dirpath: continue\n-        if \"src/rustllvm\" in dirpath: continue\n-        if \"src/rt/valgrind\" in dirpath: continue\n-        if \"src/rt/msvc\" in dirpath: continue\n-        if \"src/rust-installer\" in dirpath: continue\n+        skippable_dirs = {\n+            'src/jemalloc',\n+            'src/llvm',\n+            'src/gyp',\n+            'src/libbacktrace',\n+            'src/compiler-rt',\n+            'src/rt/hoedown',\n+            'src/rustllvm',\n+            'src/rt/valgrind',\n+            'src/rt/msvc',\n+            'src/rust-installer'\n+        }\n+\n+        if any(d in dirpath for d in skippable_dirs):\n+            continue\n \n         def interesting_file(f):\n             if \"miniz.c\" in f \\\n             or \"jquery\" in f \\\n             or \"rust_android_dummy\" in f:\n                 return False\n \n-            if f.endswith(\".rs\") \\\n-            or f.endswith(\".py\") \\\n-            or f.endswith(\".js\") \\\n-            or f.endswith(\".sh\") \\\n-            or f.endswith(\".pl\") \\\n-            or f.endswith(\".c\") \\\n-            or f.endswith(\".h\") :\n-                return True\n-            else:\n-                return False\n+            return any(os.path.splitext(f)[1] == ext for ext in interesting_files)\n \n         file_names = [os.path.join(dirpath, f) for f in filenames\n                       if interesting_file(f)\n@@ -219,14 +195,8 @@ def interesting_file(f):\n     report_err(\"UTF-8 decoding error \" + str(e))\n \n print\n-print \"* linted .rs files: \" + str(count_rs)\n-print \"* linted .py files: \" + str(count_py)\n-print \"* linted .js files: \" + str(count_js)\n-print \"* linted .sh files: \" + str(count_sh)\n-print \"* linted .pl files: \" + str(count_pl)\n-print \"* linted .c files: \" + str(count_c)\n-print \"* linted .h files: \" + str(count_h)\n-print \"* other linted files: \" + str(count_other)\n+for ext in file_counts:\n+    print \"* linted \" + str(file_counts[ext]) + \" \" + ext + \" files\"\n print \"* total lines of code: \" + str(count_lines)\n print \"* total non-blank lines of code: \" + str(count_non_blank_lines)\n print"}]}