{"sha": "39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YjIxMzc2ZGJlOTQ4OWI3ZjRkMzlmM2JmNzQyYTQ0ZDVmMzc3MGQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-25T10:16:58Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-02T14:14:59Z"}, "message": "Rename `colorful-json` to `json-rendered` and make it a selection instead of a bool", "tree": {"sha": "01777e3e1ec6df2815920f4fb6e87c4c91ee9f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01777e3e1ec6df2815920f4fb6e87c4c91ee9f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "html_url": "https://github.com/rust-lang/rust/commit/39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a842e8c7a18ac609c3c7c60563e8e6bc7d917c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a842e8c7a18ac609c3c7c60563e8e6bc7d917c6", "html_url": "https://github.com/rust-lang/rust/commit/0a842e8c7a18ac609c3c7c60563e8e6bc7d917c6"}], "stats": {"total": 287, "additions": 164, "deletions": 123}, "files": [{"sha": "e7d57c7ba0126dac32f0dadb1ccf48c212c1e21c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -19,6 +19,7 @@ use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n use syntax::feature_gate::UnstableFeatures;\n+use errors::emitter::HumanReadableErrorType;\n \n use errors::{ColorConfig, FatalError, Handler};\n \n@@ -204,19 +205,18 @@ impl OutputType {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum ErrorOutputType {\n-    HumanReadable(ColorConfig),\n+    HumanReadable(HumanReadableErrorType),\n     Json {\n         /// Render the json in a human readable way (with indents and newlines)\n         pretty: bool,\n-        /// The `rendered` field with the command line diagnostics include color codes\n-        colorful_rendered: bool,\n+        /// The way the `rendered` field is created\n+        json_rendered: HumanReadableErrorType,\n     },\n-    Short(ColorConfig),\n }\n \n impl Default for ErrorOutputType {\n     fn default() -> ErrorOutputType {\n-        ErrorOutputType::HumanReadable(ColorConfig::Auto)\n+        ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(ColorConfig::Auto))\n     }\n }\n \n@@ -1350,8 +1350,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"print some statistics about AST and HIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata\"),\n-    colorful_json: bool = (false, parse_bool, [UNTRACKED],\n-        \"encode color codes in the `rendered` field of json diagnostics\"),\n+    json_rendered: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"describes how to render the `rendered` field of json diagnostics\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n         \"take the breaks off const evaluation. NOTE: this is unsound\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n@@ -1807,9 +1807,9 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n         ),\n         opt::opt(\n             \"\",\n-            \"colorful-json\",\n-            \"Emit ansi color codes to the `rendered` field of json diagnostics\",\n-            \"TYPE\",\n+            \"json-rendered\",\n+            \"Choose `rendered` field of json diagnostics render scheme\",\n+            \"plain|termcolor\",\n         ),\n         opt::opt_s(\n             \"\",\n@@ -1951,22 +1951,32 @@ pub fn build_session_options_and_crate_config(\n         )\n     }\n \n-    let colorful_rendered = matches.opt_present(\"colorful-json\");\n+    let json_rendered = matches.opt_str(\"json-rendered\").and_then(|s| match s.as_str() {\n+        \"plain\" => None,\n+        \"termcolor\" => Some(HumanReadableErrorType::Default(ColorConfig::Always)),\n+        _ => early_error(\n+            ErrorOutputType::default(),\n+            &format!(\n+                \"argument for --json-rendered must be `plain` or `termcolor` (instead was `{}`)\",\n+                s,\n+            ),\n+        ),\n+    }).unwrap_or(HumanReadableErrorType::Default(ColorConfig::Never));\n \n     // We need the opts_present check because the driver will send us Matches\n     // with only stable options if no unstable options are used. Since error-format\n     // is unstable, it will not be present. We have to use opts_present not\n     // opt_present because the latter will panic.\n     let error_format = if matches.opts_present(&[\"error-format\".to_owned()]) {\n         match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n-            Some(\"human\") => ErrorOutputType::HumanReadable(color),\n-            Some(\"json\") => ErrorOutputType::Json { pretty: false, colorful_rendered },\n-            Some(\"pretty-json\") => ErrorOutputType::Json { pretty: true, colorful_rendered },\n-            Some(\"short\") => ErrorOutputType::Short(color),\n-            None => ErrorOutputType::HumanReadable(color),\n+            None |\n+            Some(\"human\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n+            Some(\"json\") => ErrorOutputType::Json { pretty: false, json_rendered },\n+            Some(\"pretty-json\") => ErrorOutputType::Json { pretty: true, json_rendered },\n+            Some(\"short\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Short(color)),\n \n             Some(arg) => early_error(\n-                ErrorOutputType::HumanReadable(color),\n+                ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n                 &format!(\n                     \"argument for --error-format must be `human`, `json` or \\\n                      `short` (instead was `{}`)\",\n@@ -1975,7 +1985,7 @@ pub fn build_session_options_and_crate_config(\n             ),\n         }\n     } else {\n-        ErrorOutputType::HumanReadable(color)\n+        ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color))\n     };\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n@@ -1988,12 +1998,12 @@ pub fn build_session_options_and_crate_config(\n     let mut debugging_opts = build_debugging_options(matches, error_format);\n \n     if !debugging_opts.unstable_options {\n-        if colorful_rendered {\n-            early_error(error_format, \"--colorful-json=true is unstable\");\n+        if matches.opt_str(\"json-rendered\").is_some() {\n+            early_error(error_format, \"`--json-rendered=x` is unstable\");\n         }\n-        if let ErrorOutputType::Json { pretty: true, .. } = error_format {\n+        if let ErrorOutputType::Json { pretty: true, json_rendered } = error_format {\n             early_error(\n-                ErrorOutputType::Json { pretty: false, colorful_rendered: false },\n+                ErrorOutputType::Json { pretty: false, json_rendered },\n                 \"--error-format=pretty-json is unstable\",\n             );\n         }\n@@ -2902,7 +2912,7 @@ mod tests {\n \n         const JSON: super::ErrorOutputType = super::ErrorOutputType::Json {\n             pretty: false,\n-            colorful_rendered: false,\n+            json_rendered: super::HumanReadableErrorType::Default(super::ColorConfig::Never),\n         };\n \n         // Reference"}, {"sha": "6a0e5d984789f7048d495dbb5bf85166c2d3a3e3", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -1037,44 +1037,42 @@ fn default_emitter(\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n     match (sopts.error_format, emitter_dest) {\n-        (config::ErrorOutputType::HumanReadable(color_config), None) => Box::new(\n-            EmitterWriter::stderr(\n-                color_config,\n-                Some(source_map.clone()),\n-                false,\n-                sopts.debugging_opts.teach,\n-            ).ui_testing(sopts.debugging_opts.ui_testing),\n-        ),\n-        (config::ErrorOutputType::HumanReadable(_), Some(dst)) => Box::new(\n-            EmitterWriter::new(\n-                dst, Some(source_map.clone()), false, false, sopts.debugging_opts.colorful_json,\n-            ).ui_testing(sopts.debugging_opts.ui_testing),\n-        ),\n-        (config::ErrorOutputType::Json { pretty, colorful_rendered }, None) => Box::new(\n+        (config::ErrorOutputType::HumanReadable(kind), dst) => {\n+            let (short, color_config) = kind.unzip();\n+            let emitter = match dst {\n+                None => EmitterWriter::stderr(\n+                    color_config,\n+                    Some(source_map.clone()),\n+                    short,\n+                    sopts.debugging_opts.teach,\n+                ),\n+                Some(dst) => EmitterWriter::new(\n+                    dst,\n+                    Some(source_map.clone()),\n+                    short,\n+                    false,\n+                    color_config.suggests_using_colors(),\n+                ),\n+            };\n+            Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+        },\n+        (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n             JsonEmitter::stderr(\n                 Some(registry),\n                 source_map.clone(),\n                 pretty,\n-                colorful_rendered,\n+                json_rendered,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n-        (config::ErrorOutputType::Json { pretty, colorful_rendered }, Some(dst)) => Box::new(\n+        (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n                 dst,\n                 Some(registry),\n                 source_map.clone(),\n                 pretty,\n-                colorful_rendered,\n+                json_rendered,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n-        (config::ErrorOutputType::Short(color_config), None) => Box::new(\n-            EmitterWriter::stderr(color_config, Some(source_map.clone()), true, false),\n-        ),\n-        (config::ErrorOutputType::Short(_), Some(dst)) => {\n-            Box::new(EmitterWriter::new(\n-                dst, Some(source_map.clone()), true, false, sopts.debugging_opts.colorful_json,\n-            ))\n-        }\n     }\n }\n \n@@ -1319,14 +1317,12 @@ pub enum IncrCompSession {\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n-        config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, false, false))\n-        }\n-        config::ErrorOutputType::Json { pretty, colorful_rendered } =>\n-            Box::new(JsonEmitter::basic(pretty, colorful_rendered)),\n-        config::ErrorOutputType::Short(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, true, false))\n+        config::ErrorOutputType::HumanReadable(kind) => {\n+            let (short, color_config) = kind.unzip();\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n         }\n+        config::ErrorOutputType::Json { pretty, json_rendered } =>\n+            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n@@ -1335,14 +1331,12 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n-        config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, false, false))\n-        }\n-        config::ErrorOutputType::Json { pretty, colorful_rendered } =>\n-            Box::new(JsonEmitter::basic(pretty, colorful_rendered)),\n-        config::ErrorOutputType::Short(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, true, false))\n+        config::ErrorOutputType::HumanReadable(kind) => {\n+            let (short, color_config) = kind.unzip();\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n         }\n+        config::ErrorOutputType::Json { pretty, json_rendered } =>\n+            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);"}, {"sha": "5ba17d12d93840f6f26cd2683957be9c6d4dba7e", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -19,6 +19,32 @@ use std::cmp::{min, Reverse};\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter, Ansi};\n use termcolor::{WriteColor, Color, Buffer};\n \n+/// Describes the way the content of the `rendered` field of the json output is generated\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub enum HumanReadableErrorType {\n+    Default(ColorConfig),\n+    Short(ColorConfig),\n+}\n+\n+impl HumanReadableErrorType {\n+    /// Returns a (`short`, `color`) tuple\n+    pub fn unzip(self) -> (bool, ColorConfig) {\n+        match self {\n+            HumanReadableErrorType::Default(cc) => (false, cc),\n+            HumanReadableErrorType::Short(cc) => (true, cc),\n+        }\n+    }\n+    pub fn new_emitter(\n+        self,\n+        dst: Box<dyn Write + Send>,\n+        source_map: Option<Lrc<SourceMapperDyn>>,\n+        teach: bool,\n+    ) -> EmitterWriter {\n+        let (short, color_config) = self.unzip();\n+        EmitterWriter::new(dst, source_map, short, teach, color_config.suggests_using_colors())\n+    }\n+}\n+\n const ANONYMIZED_LINE_NUM: &str = \"LL\";\n \n /// Emitter trait for emitting errors.\n@@ -104,8 +130,8 @@ pub enum ColorConfig {\n }\n \n impl ColorConfig {\n-    fn to_color_choice(&self) -> ColorChoice {\n-        match *self {\n+    fn to_color_choice(self) -> ColorChoice {\n+        match self {\n             ColorConfig::Always => {\n                 if atty::is(atty::Stream::Stderr) {\n                     ColorChoice::Always\n@@ -120,6 +146,14 @@ impl ColorConfig {\n             ColorConfig::Auto => ColorChoice::Never,\n         }\n     }\n+    pub fn suggests_using_colors(self) -> bool {\n+        match self {\n+            | ColorConfig::Always\n+            | ColorConfig::Auto\n+            => true,\n+            ColorConfig::Never => false,\n+        }\n+    }\n }\n \n pub struct EmitterWriter {\n@@ -1540,6 +1574,7 @@ fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n pub enum Destination {\n     Terminal(StandardStream),\n     Buffered(BufferWriter),\n+    // The bool denotes whether we should be emitting ansi color codes or not\n     Raw(Box<(dyn Write + Send)>, bool),\n }\n "}, {"sha": "a2acb02c339f891590651b935324cae2be9d1152", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use std::path::PathBuf;\n \n use errors;\n-use errors::emitter::ColorConfig;\n+use errors::emitter::{ColorConfig, HumanReadableErrorType};\n use getopts;\n use rustc::lint::Level;\n use rustc::session::early_error;\n@@ -256,11 +256,17 @@ impl Options {\n         };\n         // FIXME: deduplicate this code from the identical code in librustc/session/config.rs\n         let error_format = match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n-            Some(\"human\") => ErrorOutputType::HumanReadable(color),\n-            Some(\"json\") => ErrorOutputType::Json { pretty: false, colorful_rendered: false },\n-            Some(\"pretty-json\") => ErrorOutputType::Json { pretty: true, colorful_rendered: false },\n-            Some(\"short\") => ErrorOutputType::Short(color),\n-            None => ErrorOutputType::HumanReadable(color),\n+            None |\n+            Some(\"human\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n+            Some(\"json\") => ErrorOutputType::Json {\n+                pretty: false,\n+                json_rendered: HumanReadableErrorType::Default(color),\n+            },\n+            Some(\"pretty-json\") => ErrorOutputType::Json {\n+                pretty: true,\n+                json_rendered: HumanReadableErrorType::Default(color),\n+            },\n+            Some(\"short\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Short(color)),\n             Some(arg) => {\n                 early_error(ErrorOutputType::default(),\n                             &format!(\"argument for --error-format must be `human`, `json` or \\"}, {"sha": "c141b47481531fd446f436194545d1d439ab634d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -299,33 +299,29 @@ pub fn new_handler(error_format: ErrorOutputType,\n     // stick to the defaults\n     let sessopts = Options::default();\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n-        ErrorOutputType::HumanReadable(color_config) => Box::new(\n-            EmitterWriter::stderr(\n-                color_config,\n-                source_map.map(|cm| cm as _),\n-                false,\n-                sessopts.debugging_opts.teach,\n-            ).ui_testing(ui_testing)\n-        ),\n-        ErrorOutputType::Json { pretty, colorful_rendered } => {\n+        ErrorOutputType::HumanReadable(kind) => {\n+            let (short, color_config) = kind.unzip();\n+            Box::new(\n+                EmitterWriter::stderr(\n+                    color_config,\n+                    source_map.map(|cm| cm as _),\n+                    short,\n+                    sessopts.debugging_opts.teach,\n+                ).ui_testing(ui_testing)\n+            )\n+        },\n+        ErrorOutputType::Json { pretty, json_rendered } => {\n             let source_map = source_map.unwrap_or_else(\n                 || Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping())));\n             Box::new(\n                 JsonEmitter::stderr(\n                     None,\n                     source_map,\n                     pretty,\n-                    colorful_rendered,\n+                    json_rendered,\n                 ).ui_testing(ui_testing)\n             )\n         },\n-        ErrorOutputType::Short(color_config) => Box::new(\n-            EmitterWriter::stderr(\n-                color_config,\n-                source_map.map(|cm| cm as _),\n-                true,\n-                false)\n-        ),\n     };\n \n     errors::Handler::with_emitter_and_flags("}, {"sha": "e08deaf2dede4c251a8d53a2461ece929fb54f2d", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -14,7 +14,7 @@ use crate::source_map::{SourceMap, FilePathMapping};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, SourceMapper};\n use errors::{DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, EmitterWriter};\n+use errors::emitter::{Emitter, HumanReadableErrorType};\n \n use syntax_pos::{MacroBacktrace, Span, SpanLabel, MultiSpan};\n use rustc_data_structures::sync::{self, Lrc};\n@@ -30,46 +30,46 @@ pub struct JsonEmitter {\n     sm: Lrc<dyn SourceMapper + sync::Send + sync::Sync>,\n     pretty: bool,\n     ui_testing: bool,\n-    colorful_rendered: bool,\n+    json_rendered: HumanReadableErrorType,\n }\n \n impl JsonEmitter {\n     pub fn stderr(\n         registry: Option<Registry>,\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n-        colorful_rendered: bool,\n+        json_rendered: HumanReadableErrorType,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             sm: source_map,\n             pretty,\n             ui_testing: false,\n-            colorful_rendered,\n+            json_rendered,\n         }\n     }\n \n-    pub fn basic(pretty: bool, colorful_rendered: bool) -> JsonEmitter {\n+    pub fn basic(pretty: bool, json_rendered: HumanReadableErrorType) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(None, Lrc::new(SourceMap::new(file_path_mapping)),\n-                            pretty, colorful_rendered)\n+                            pretty, json_rendered)\n     }\n \n     pub fn new(\n         dst: Box<dyn Write + Send>,\n         registry: Option<Registry>,\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n-        colorful_rendered: bool,\n+        json_rendered: HumanReadableErrorType,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             sm: source_map,\n             pretty,\n             ui_testing: false,\n-            colorful_rendered,\n+            json_rendered,\n         }\n     }\n \n@@ -199,7 +199,7 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        EmitterWriter::new(Box::new(buf), Some(je.sm.clone()), false, false, je.colorful_rendered)\n+        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false)\n             .ui_testing(je.ui_testing).emit(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();"}, {"sha": "d62f8f110e0e13ca7ed662e9d8a4925c9eee9dc5", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -1,5 +1,5 @@\n // ignore-cloudabi\n-// compile-flags: --error-format pretty-json -Zunstable-options --colorful-json=true\n+// compile-flags: --error-format pretty-json -Zunstable-options --json-rendered=termcolor\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "04cfebdd8013fd8ad408bd07f9fcc4bedf99a1fd", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39b21376dbe9489b7f4d39f3bf742a44d5f3770d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=39b21376dbe9489b7f4d39f3bf742a44d5f3770d", "patch": "@@ -73,8 +73,8 @@ mod foo {\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-      \"byte_start\": 461,\n-      \"byte_end\": 465,\n+      \"byte_start\": 466,\n+      \"byte_end\": 470,\n       \"line_start\": 11,\n       \"line_end\": 11,\n       \"column_start\": 12,\n@@ -101,8 +101,8 @@ mod foo {\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -124,8 +124,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -147,8 +147,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -170,8 +170,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -193,8 +193,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -216,8 +216,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -239,8 +239,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -262,8 +262,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -285,8 +285,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -308,8 +308,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -331,8 +331,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -354,8 +354,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 438,\n-          \"byte_end\": 438,\n+          \"byte_start\": 443,\n+          \"byte_end\": 443,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,"}]}