{"sha": "3de221a862b064430bc8c5727e9e1346ad85c27e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZTIyMWE4NjJiMDY0NDMwYmM4YzU3MjdlOWUxMzQ2YWQ4NWMyN2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T02:39:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:15:31Z"}, "message": "typeck/pat.rs: extract `check_pat_box`.", "tree": {"sha": "c83f22d2d3acf26119d6182195c9ed20cc0a9346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83f22d2d3acf26119d6182195c9ed20cc0a9346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3de221a862b064430bc8c5727e9e1346ad85c27e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3de221a862b064430bc8c5727e9e1346ad85c27e", "html_url": "https://github.com/rust-lang/rust/commit/3de221a862b064430bc8c5727e9e1346ad85c27e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3de221a862b064430bc8c5727e9e1346ad85c27e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a51caa6485b7db6ce323cba47dfbe7c44026af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a51caa6485b7db6ce323cba47dfbe7c44026af5", "html_url": "https://github.com/rust-lang/rust/commit/3a51caa6485b7db6ce323cba47dfbe7c44026af5"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "f740dc73db5402bfb1cc4848531f501d5dc4e282", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3de221a862b064430bc8c5727e9e1346ad85c27e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de221a862b064430bc8c5727e9e1346ad85c27e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=3de221a862b064430bc8c5727e9e1346ad85c27e", "patch": "@@ -108,23 +108,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_tuple(pat.span, elements, ddpos, expected, def_bm, discrim_span)\n             }\n             PatKind::Box(ref inner) => {\n-                let inner_ty = self.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::TypeInference,\n-                    span: inner.span,\n-                });\n-                let uniq_ty = tcx.mk_box(inner_ty);\n-\n-                if self.check_dereferencable(pat.span, expected, &inner) {\n-                    // Here, `demand::subtype` is good enough, but I don't\n-                    // think any errors can be introduced by using\n-                    // `demand::eqtype`.\n-                    self.demand_eqtype_pat(pat.span, expected, uniq_ty, discrim_span);\n-                    self.check_pat_walk(&inner, inner_ty, def_bm, discrim_span);\n-                    uniq_ty\n-                } else {\n-                    self.check_pat_walk(&inner, tcx.types.err, def_bm, discrim_span);\n-                    tcx.types.err\n-                }\n+                self.check_pat_box(pat.span, inner, expected, def_bm, discrim_span)\n             }\n             PatKind::Ref(ref inner, mutbl) => {\n                 let expected = self.shallow_resolve(expected);\n@@ -1047,4 +1031,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         no_field_errors\n     }\n+\n+    fn check_pat_box(\n+        &self,\n+        span: Span,\n+        inner: &'tcx hir::Pat,\n+        expected: Ty<'tcx>,\n+        def_bm: ty::BindingMode,\n+        discrim_span: Option<Span>,\n+    ) -> Ty<'tcx> {\n+        let tcx = self.tcx;\n+        let inner_ty = self.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::TypeInference,\n+            span: inner.span,\n+        });\n+        let uniq_ty = tcx.mk_box(inner_ty);\n+\n+        if self.check_dereferencable(span, expected, &inner) {\n+            // Here, `demand::subtype` is good enough, but I don't\n+            // think any errors can be introduced by using\n+            // `demand::eqtype`.\n+            self.demand_eqtype_pat(span, expected, uniq_ty, discrim_span);\n+            self.check_pat_walk(&inner, inner_ty, def_bm, discrim_span);\n+            uniq_ty\n+        } else {\n+            self.check_pat_walk(&inner, tcx.types.err, def_bm, discrim_span);\n+            tcx.types.err\n+        }\n+    }\n }"}]}