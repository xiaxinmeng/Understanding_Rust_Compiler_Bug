{"sha": "58d2c7909f9f9310971fcd517fc895cb878b74c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDJjNzkwOWY5ZjkzMTA5NzFmY2Q1MTdmYzg5NWNiODc4Yjc0YzM=", "commit": {"author": {"name": "Thomas Wickham", "email": "thomas@wickham.epimeros.org", "date": "2016-01-14T15:06:53Z"}, "committer": {"name": "Thomas Wickham", "email": "thomas@wickham.epimeros.org", "date": "2016-01-14T15:06:53Z"}, "message": "Doc:std::convert explicitely list generic impls\n\nAlso add a note about the necessary simplicity of the conversion.\nRelated issue: #29349", "tree": {"sha": "7461a5eeb94f952c796c0f0be901e839ca11985c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7461a5eeb94f952c796c0f0be901e839ca11985c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d2c7909f9f9310971fcd517fc895cb878b74c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d2c7909f9f9310971fcd517fc895cb878b74c3", "html_url": "https://github.com/rust-lang/rust/commit/58d2c7909f9f9310971fcd517fc895cb878b74c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d2c7909f9f9310971fcd517fc895cb878b74c3/comments", "author": null, "committer": null, "parents": [{"sha": "e1f550ebc299d5eadc073160cd3acb8de6c5d857", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f550ebc299d5eadc073160cd3acb8de6c5d857", "html_url": "https://github.com/rust-lang/rust/commit/e1f550ebc299d5eadc073160cd3acb8de6c5d857"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "a0021d2adda3e736b2cc02d4cbc973979b0216f1", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/58d2c7909f9f9310971fcd517fc895cb878b74c3/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d2c7909f9f9310971fcd517fc895cb878b74c3/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=58d2c7909f9f9310971fcd517fc895cb878b74c3", "patch": "@@ -17,6 +17,26 @@\n //! Like many traits, these are often used as bounds for generic functions, to\n //! support arguments of multiple types.\n //!\n+//! - Use `as` for reference-to-reference conversions\n+//! - Use `into` when you want to consume the value\n+//! - `from` is the more flexible way, which can convert values and references\n+//!\n+//! As a library writer, you should prefer implementing `From<T>` rather than\n+//! `Into<U>`, as `From` is more flexible (you can't `Into` a reference, where\n+//! you can impl `From` for a reference). `From` is also used for generic\n+//! implementations.\n+//!\n+//! **Note:** these traits are for trivial conversion. **They must not fail**. If\n+//! they can fail, use a dedicated method which return an `Option<T>` or\n+//! a `Result<T, E>`.\n+//!\n+//! # Generic impl\n+//!\n+//! - `AsRef` and `AsMut` auto-dereference if the inner type is a reference\n+//! - `From<U> for T` implies `Into<T> for U`\n+//! - `From` and `Into` are reflexive, which means that all types can `into()`\n+//! themselve and `from()` themselve\n+//!\n //! See each trait for usage examples.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -30,6 +50,10 @@ use marker::Sized;\n ///\n /// [book]: ../../book/borrow-and-asref.html\n ///\n+/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n+/// they can fail, use a dedicated method which return an `Option<T>` or\n+/// a `Result<T, E>`.\n+///\n /// # Examples\n ///\n /// Both `String` and `&str` implement `AsRef<str>`:\n@@ -45,6 +69,12 @@ use marker::Sized;\n /// let s = \"hello\".to_string();\n /// is_hello(s);\n /// ```\n+///\n+/// # Generic Impls\n+///\n+/// - `AsRef` auto-dereference if the inner type is a reference or a mutable\n+/// reference\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n@@ -53,6 +83,16 @@ pub trait AsRef<T: ?Sized> {\n }\n \n /// A cheap, mutable reference-to-mutable reference conversion.\n+///\n+/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n+/// they can fail, use a dedicated method which return an `Option<T>` or\n+/// a `Result<T, E>`.\n+///\n+/// # Generic Impls\n+///\n+/// - `AsMut` auto-dereference if the inner type is a reference or a mutable\n+/// reference\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n     /// Performs the conversion.\n@@ -62,6 +102,10 @@ pub trait AsMut<T: ?Sized> {\n \n /// A conversion that consumes `self`, which may or may not be expensive.\n ///\n+/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n+/// they can fail, use a dedicated method which return an `Option<T>` or\n+/// a `Result<T, E>`.\n+///\n /// # Examples\n ///\n /// `String` implements `Into<Vec<u8>>`:\n@@ -75,6 +119,12 @@ pub trait AsMut<T: ?Sized> {\n /// let s = \"hello\".to_string();\n /// is_hello(s);\n /// ```\n+///\n+/// #Generic Impls\n+///\n+/// - `From<T> for U` implies `Into<U> for T`\n+/// - `into()` is reflexive, which means that `Into<T> for T` is implemented\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n@@ -84,6 +134,10 @@ pub trait Into<T>: Sized {\n \n /// Construct `Self` via a conversion.\n ///\n+/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n+/// they can fail, use a dedicated method which return an `Option<T>` or\n+/// a `Result<T, E>`.\n+///\n /// # Examples\n ///\n /// `String` implements `From<&str>`:\n@@ -94,6 +148,11 @@ pub trait Into<T>: Sized {\n ///\n /// assert_eq!(string, other_string);\n /// ```\n+/// # Generic impls\n+///\n+/// - `From<T> for U` implies `Into<U> for T`\n+/// - `from()` is reflexive, which means that `From<T> for T` is implemented\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion."}]}