{"sha": "cff59f80e4ad2325dc3550da762c37721e2bad37", "node_id": "C_kwDOAAsO6NoAKGNmZjU5ZjgwZTRhZDIzMjVkYzM1NTBkYTc2MmMzNzcyMWUyYmFkMzc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-22T12:28:01Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-22T12:28:01Z"}, "message": "apply query response: actually define opaque types", "tree": {"sha": "f2de5bd2e5846310f8a813b3464bcff85019ce84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2de5bd2e5846310f8a813b3464bcff85019ce84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff59f80e4ad2325dc3550da762c37721e2bad37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff59f80e4ad2325dc3550da762c37721e2bad37", "html_url": "https://github.com/rust-lang/rust/commit/cff59f80e4ad2325dc3550da762c37721e2bad37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff59f80e4ad2325dc3550da762c37721e2bad37/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9216b75646cde0c4c69ae00232778a47fc893d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9216b75646cde0c4c69ae00232778a47fc893d3", "html_url": "https://github.com/rust-lang/rust/commit/f9216b75646cde0c4c69ae00232778a47fc893d3"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "7177e2f10173be9cac47e8dc1f4a4e7720989ecf", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cff59f80e4ad2325dc3550da762c37721e2bad37/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff59f80e4ad2325dc3550da762c37721e2bad37/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=cff59f80e4ad2325dc3550da762c37721e2bad37", "patch": "@@ -393,6 +393,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// will instantiate fresh inference variables for each canonical\n     /// variable instead. Therefore, the result of this method must be\n     /// properly unified\n+    #[instrument(level = \"debug\", skip(self, cause, param_env))]\n     fn query_response_substitution_guess<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n@@ -403,11 +404,6 @@ impl<'tcx> InferCtxt<'tcx> {\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n-        debug!(\n-            \"query_response_substitution_guess(original_values={:#?}, query_response={:#?})\",\n-            original_values, query_response,\n-        );\n-\n         // For each new universe created in the query result that did\n         // not appear in the original query, create a local\n         // superuniverse.\n@@ -502,7 +498,9 @@ impl<'tcx> InferCtxt<'tcx> {\n         for &(a, b) in &query_response.value.opaque_types {\n             let a = substitute_value(self.tcx, &result_subst, a);\n             let b = substitute_value(self.tcx, &result_subst, b);\n-            obligations.extend(self.at(cause, param_env).eq(a, b)?.obligations);\n+            debug!(?a, ?b, \"constrain opaque type\");\n+            obligations\n+                .extend(self.at(cause, param_env).define_opaque_types(true).eq(a, b)?.obligations);\n         }\n \n         Ok(InferOk { value: result_subst, obligations })"}]}