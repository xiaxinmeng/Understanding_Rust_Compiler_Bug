{"sha": "e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "node_id": "C_kwDOAAsO6NoAKGU2MTJjZTljZTUwMTgyZmIzM2E1MTg2ZmJiMzljZGQ1ZDQ1MzRmMWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T22:41:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-07T22:41:39Z"}, "message": "Auto merge of #96824 - matthiaskrgr:rollup-silw3ki, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #96336 (Link to correct `as_mut` in docs for `pointer::as_ref`)\n - #96586 (Add aliases for std::fs::canonicalize)\n - #96667 (Add regression test)\n - #96671 (Remove hard links from `env::current_exe` security example)\n - #96726 (Add regression and bug tests)\n - #96756 (Enable compiler-docs by default for `compiler`, `codegen`, and `tools` profiles)\n - #96757 (Don't constantly rebuild clippy on `x test src/tools/clippy`.)\n - #96769 (Remove `adx_target_feature` feature from active features list)\n - #96777 (Make the test `check-pass` not to produce a JSON file)\n - #96822 (Enforce quote rule for JS source code)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "387c7e6345267016414d6dbd5eecf6773733efb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/387c7e6345267016414d6dbd5eecf6773733efb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "html_url": "https://github.com/rust-lang/rust/commit/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea92b08383b718e79317b29470cb244c48557cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea92b08383b718e79317b29470cb244c48557cd5", "html_url": "https://github.com/rust-lang/rust/commit/ea92b08383b718e79317b29470cb244c48557cd5"}, {"sha": "20ade86456c69e7987153006ed85108a3493b3fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ade86456c69e7987153006ed85108a3493b3fd", "html_url": "https://github.com/rust-lang/rust/commit/20ade86456c69e7987153006ed85108a3493b3fd"}], "stats": {"total": 324, "additions": 237, "deletions": 87}, "files": [{"sha": "520769d308e66f785c844f18bfe96e6946cacc35", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -244,7 +244,6 @@ declare_features! (\n \n     // Unstable `#[target_feature]` directives.\n     (active, aarch64_ver_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n     (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n     (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n     (active, bpf_target_feature, \"1.54.0\", Some(44839), None),"}, {"sha": "ed80cdc9bf9e1508e4a61bfc880c4659b7d7553d", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -287,7 +287,7 @@ impl<T: ?Sized> *mut T {\n     /// For the mutable counterpart see [`as_mut`].\n     ///\n     /// [`as_uninit_ref`]: #method.as_uninit_ref-1\n-    /// [`as_mut`]: #method.as_mut\n+    /// [`as_mut`]: #method.as_mut-1\n     ///\n     /// # Safety\n     ///"}, {"sha": "e287a93da7b03ed837fd3cc7c09dbd5b6432dfdf", "filename": "library/std/src/env.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -644,36 +644,23 @@ pub fn temp_dir() -> PathBuf {\n ///\n /// # Security\n ///\n-/// The output of this function should not be used in anything that might have\n-/// security implications. For example:\n-///\n-/// ```\n-/// fn main() {\n-///     println!(\"{:?}\", std::env::current_exe());\n-/// }\n-/// ```\n-///\n-/// On Linux systems, if this is compiled as `foo`:\n-///\n-/// ```bash\n-/// $ rustc foo.rs\n-/// $ ./foo\n-/// Ok(\"/home/alex/foo\")\n-/// ```\n-///\n-/// And you make a hard link of the program:\n-///\n-/// ```bash\n-/// $ ln foo bar\n-/// ```\n-///\n-/// When you run it, you won\u2019t get the path of the original executable, you\u2019ll\n-/// get the path of the hard link:\n-///\n-/// ```bash\n-/// $ ./bar\n-/// Ok(\"/home/alex/bar\")\n-/// ```\n+/// The output of this function should not be trusted for anything\n+/// that might have security implications. Basically, if users can run\n+/// the executable, they can change the output arbitrarily.\n+///\n+/// As an example, you can easily introduce a race condition. It goes\n+/// like this:\n+///\n+/// 1. You get the path to the current executable using `current_exe()`, and\n+///    store it in a variable.\n+/// 2. Time passes. A malicious actor removes the current executable, and\n+///    replaces it with a malicious one.\n+/// 3. You then use the stored path to re-execute the current\n+///    executable.\n+///\n+/// You expected to safely execute the current executable, but you're\n+/// instead executing something completely different. The code you\n+/// just executed run with your privileges.\n ///\n /// This sort of behavior has been known to [lead to privilege escalation] when\n /// used incorrectly."}, {"sha": "369a251696e0b5f8aac47b6967308a7f53e89797", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -1930,6 +1930,8 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///     Ok(())\n /// }\n /// ```\n+#[doc(alias = \"realpath\")]\n+#[doc(alias = \"GetFinalPathNameByHandle\")]\n #[stable(feature = \"fs_canonicalize\", since = \"1.5.0\")]\n pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n     fs_imp::canonicalize(path.as_ref())"}, {"sha": "088cbd1057ec568186ed89eba6b2738e64bdda25", "filename": "src/bootstrap/defaults/config.codegen.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -1,4 +1,8 @@\n # These defaults are meant for contributors to the compiler who modify codegen or LLVM\n+[build]\n+# Contributors working on the compiler will probably expect compiler docs to be generated.\n+compiler-docs = true\n+\n [llvm]\n # This enables debug-assertions in LLVM,\n # catching logic errors in codegen much earlier in the process."}, {"sha": "2f4ccb825c4d8738199976676b69195e5345a445", "filename": "src/bootstrap/defaults/config.compiler.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -1,4 +1,8 @@\n # These defaults are meant for contributors to the compiler who do not modify codegen or LLVM\n+[build]\n+# Contributors working on the compiler will probably expect compiler docs to be generated.\n+compiler-docs = true\n+\n [rust]\n # This enables `RUSTC_LOG=debug`, avoiding confusing situations\n # where adding `debug!()` appears to do nothing."}, {"sha": "6b6625342a67e03bfbfa12bc185388ac6a52a5e9", "filename": "src/bootstrap/defaults/config.tools.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -14,6 +14,8 @@ download-rustc = \"if-unchanged\"\n [build]\n # Document with the in-tree rustdoc by default, since `download-rustc` makes it quick to compile.\n doc-stage = 2\n+# Contributors working on tools will probably expect compiler docs to be generated, so they can figure out how to use the API.\n+compiler-docs = true\n \n [llvm]\n # Will download LLVM from CI if available on your platform."}, {"sha": "8f2347be90e864c9106e401e8120bf967014d160", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -664,8 +664,6 @@ impl Step for Clippy {\n             &[],\n         );\n \n-        // clippy tests need to know about the stage sysroot\n-        cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n         cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n         cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());"}, {"sha": "3b30e6de12a63abed65ed9388ea05a4e339e63ee", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -250,6 +250,10 @@ pub fn prepare_tool_cargo(\n         }\n     }\n \n+    // clippy tests need to know about the stage sysroot. Set them consistently while building to\n+    // avoid rebuilding when running tests.\n+    cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n+\n     // if tools are using lzma we want to force the build script to build its\n     // own copy\n     cargo.env(\"LZMA_API_STATIC\", \"1\");"}, {"sha": "5fcffe715b12fe971d86edc6ad68c627a74d3211", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -17,6 +17,10 @@ module.exports = {\n             \"error\",\n             \"always\"\n         ],\n+        \"quotes\": [\n+            \"error\",\n+            \"double\"\n+        ],\n         \"no-var\": [\"error\"],\n         \"prefer-const\": [\"error\"],\n         \"prefer-arrow-callback\": [\"error\"],"}, {"sha": "336223ad28f329b02fc32cbad6ad895bf546d7e3", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -291,7 +291,7 @@ function loadCss(cssFileName) {\n \n (function() {\n     function loadScript(url) {\n-        const script = document.createElement('script');\n+        const script = document.createElement(\"script\");\n         script.src = url;\n         document.head.append(script);\n     }\n@@ -344,7 +344,7 @@ function loadCss(cssFileName) {\n             searchState.input.blur();\n         },\n         showResults: search => {\n-            if (search === null || typeof search === 'undefined') {\n+            if (search === null || typeof search === \"undefined\") {\n                 search = searchState.outputElement();\n             }\n             switchDisplayedElement(search);\n@@ -390,7 +390,7 @@ function loadCss(cssFileName) {\n                 loadSearch();\n             });\n \n-            if (search_input.value !== '') {\n+            if (search_input.value !== \"\") {\n                 loadSearch();\n             }\n \n@@ -968,7 +968,7 @@ function loadCss(cssFileName) {\n \n     onEachLazy(document.getElementsByClassName(\"notable-traits\"), e => {\n         e.onclick = function() {\n-            this.getElementsByClassName('notable-traits-tooltiptext')[0]\n+            this.getElementsByClassName(\"notable-traits-tooltiptext\")[0]\n                 .classList.toggle(\"force-tooltip\");\n         };\n     });\n@@ -1070,29 +1070,29 @@ function loadCss(cssFileName) {\n         const path = [];\n \n         onEach(parent.childNodes, child => {\n-            if (child.tagName === 'A') {\n+            if (child.tagName === \"A\") {\n                 path.push(child.textContent);\n             }\n         });\n \n-        const el = document.createElement('textarea');\n-        el.value = path.join('::');\n-        el.setAttribute('readonly', '');\n+        const el = document.createElement(\"textarea\");\n+        el.value = path.join(\"::\");\n+        el.setAttribute(\"readonly\", \"\");\n         // To not make it appear on the screen.\n-        el.style.position = 'absolute';\n-        el.style.left = '-9999px';\n+        el.style.position = \"absolute\";\n+        el.style.left = \"-9999px\";\n \n         document.body.appendChild(el);\n         el.select();\n-        document.execCommand('copy');\n+        document.execCommand(\"copy\");\n         document.body.removeChild(el);\n \n         // There is always one children, but multiple childNodes.\n-        but.children[0].style.display = 'none';\n+        but.children[0].style.display = \"none\";\n \n         let tmp;\n         if (but.childNodes.length < 2) {\n-            tmp = document.createTextNode('\u2713');\n+            tmp = document.createTextNode(\"\u2713\");\n             but.appendChild(tmp);\n         } else {\n             onEachLazy(but.childNodes, e => {\n@@ -1101,15 +1101,15 @@ function loadCss(cssFileName) {\n                     return true;\n                 }\n             });\n-            tmp.textContent = '\u2713';\n+            tmp.textContent = \"\u2713\";\n         }\n \n         if (reset_button_timeout !== null) {\n             window.clearTimeout(reset_button_timeout);\n         }\n \n         function reset_button() {\n-            tmp.textContent = '';\n+            tmp.textContent = \"\";\n             reset_button_timeout = null;\n             but.children[0].style.display = \"\";\n         }"}, {"sha": "408b7e19feadd0cd09d72aa63e64c636200c5aca", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -8,7 +8,7 @@\n \n     // Scroll code block to the given code location\n     function scrollToLoc(elt, loc) {\n-        const lines = elt.querySelector('.line-numbers');\n+        const lines = elt.querySelector(\".line-numbers\");\n         let scrollOffset;\n \n         // If the block is greater than the size of the viewer,\n@@ -32,16 +32,16 @@\n     function updateScrapedExample(example) {\n         const locs = JSON.parse(example.attributes.getNamedItem(\"data-locs\").textContent);\n         let locIndex = 0;\n-        const highlights = Array.prototype.slice.call(example.querySelectorAll('.highlight'));\n-        const link = example.querySelector('.scraped-example-title a');\n+        const highlights = Array.prototype.slice.call(example.querySelectorAll(\".highlight\"));\n+        const link = example.querySelector(\".scraped-example-title a\");\n \n         if (locs.length > 1) {\n             // Toggle through list of examples in a given file\n             const onChangeLoc = changeIndex => {\n-                removeClass(highlights[locIndex], 'focus');\n+                removeClass(highlights[locIndex], \"focus\");\n                 changeIndex();\n                 scrollToLoc(example, locs[locIndex][0]);\n-                addClass(highlights[locIndex], 'focus');\n+                addClass(highlights[locIndex], \"focus\");\n \n                 const url = locs[locIndex][1];\n                 const title = locs[locIndex][2];\n@@ -50,24 +50,24 @@\n                 link.innerHTML = title;\n             };\n \n-            example.querySelector('.prev')\n-                .addEventListener('click', () => {\n+            example.querySelector(\".prev\")\n+                .addEventListener(\"click\", () => {\n                     onChangeLoc(() => {\n                         locIndex = (locIndex - 1 + locs.length) % locs.length;\n                     });\n                 });\n \n-            example.querySelector('.next')\n-                .addEventListener('click', () => {\n+            example.querySelector(\"next\")\n+                .addEventListener(\"click\", () => {\n                     onChangeLoc(() => {\n                         locIndex = (locIndex + 1) % locs.length;\n                     });\n                 });\n         }\n \n-        const expandButton = example.querySelector('.expand');\n+        const expandButton = example.querySelector(\".expand\");\n         if (expandButton) {\n-            expandButton.addEventListener('click', () => {\n+            expandButton.addEventListener(\"click\", () => {\n                 if (hasClass(example, \"expanded\")) {\n                     removeClass(example, \"expanded\");\n                     scrollToLoc(example, locs[0][0]);\n@@ -81,19 +81,19 @@\n         scrollToLoc(example, locs[0][0]);\n     }\n \n-    const firstExamples = document.querySelectorAll('.scraped-example-list > .scraped-example');\n+    const firstExamples = document.querySelectorAll(\".scraped-example-list > .scraped-example\");\n     onEachLazy(firstExamples, updateScrapedExample);\n-    onEachLazy(document.querySelectorAll('.more-examples-toggle'), toggle => {\n+    onEachLazy(document.querySelectorAll(\".more-examples-toggle\"), toggle => {\n         // Allow users to click the left border of the <details> section to close it,\n         // since the section can be large and finding the [+] button is annoying.\n-        onEachLazy(toggle.querySelectorAll('.toggle-line, .hide-more'), button => {\n-            button.addEventListener('click', () => {\n+        onEachLazy(toggle.querySelectorAll(\".toggle-line, .hide-more\"), button => {\n+            button.addEventListener(\"click\", () => {\n                 toggle.open = false;\n             });\n         });\n \n-        const moreExamples = toggle.querySelectorAll('.scraped-example');\n-        toggle.querySelector('summary').addEventListener('click', () => {\n+        const moreExamples = toggle.querySelectorAll(\".scraped-example\");\n+        toggle.querySelector(\"summary\").addEventListener(\"click\", () => {\n             // Wrapping in setTimeout ensures the update happens after the elements are actually\n             // visible. This is necessary since updateScrapedExample calls scrollToLoc which\n             // depends on offsetHeight, a property that requires an element to be visible to"}, {"sha": "1e3894c1fcd276fcdec297936a9ae9b1c68dc79d", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -204,7 +204,7 @@ window.initSearch = rawSearchIndex => {\n      * @return {boolean}\n      */\n     function isPathStart(parserState) {\n-        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) == '::';\n+        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) == \"::\";\n     }\n \n     /**\n@@ -215,7 +215,7 @@ window.initSearch = rawSearchIndex => {\n      * @return {boolean}\n      */\n     function isReturnArrow(parserState) {\n-        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) == '->';\n+        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) == \"->\";\n     }\n \n     /**\n@@ -227,10 +227,10 @@ window.initSearch = rawSearchIndex => {\n      */\n     function isIdentCharacter(c) {\n         return (\n-            c === '_' ||\n-            (c >= '0' && c <= '9') ||\n-            (c >= 'a' && c <= 'z') ||\n-            (c >= 'A' && c <= 'Z'));\n+            c === \"_\" ||\n+            (c >= \"0\" && c <= \"9\") ||\n+            (c >= \"a\" && c <= \"z\") ||\n+            (c >= \"A\" && c <= \"Z\"));\n     }\n \n     /**\n@@ -264,7 +264,7 @@ window.initSearch = rawSearchIndex => {\n      * @return {QueryElement}                - The newly created `QueryElement`.\n      */\n     function createQueryElement(query, parserState, name, generics, isInGenerics) {\n-        if (name === '*' || (name.length === 0 && generics.length === 0)) {\n+        if (name === \"*\" || (name.length === 0 && generics.length === 0)) {\n             return;\n         }\n         if (query.literalSearch && parserState.totalElems - parserState.genericsElems > 0) {\n@@ -1708,29 +1708,30 @@ window.initSearch = rawSearchIndex => {\n \n         let crates = \"\";\n         if (window.ALL_CRATES.length > 1) {\n-            crates = ` in <select id=\"crate-search\"><option value=\"All crates\">All crates</option>`;\n+            crates = \" in <select id=\\\"crate-search\\\"><option value=\\\"All crates\\\">\" +\n+                \"All crates</option>\";\n             for (const c of window.ALL_CRATES) {\n                 crates += `<option value=\"${c}\" ${c == filterCrates && \"selected\"}>${c}</option>`;\n             }\n-            crates += `</select>`;\n+            crates += \"</select>\";\n         }\n \n         let typeFilter = \"\";\n         if (results.query.typeFilter !== NO_TYPE_FILTER) {\n             typeFilter = \" (type: \" + escape(itemTypes[results.query.typeFilter]) + \")\";\n         }\n \n-        let output = `<div id=\"search-settings\">` +\n+        let output = \"<div id=\\\"search-settings\\\">\" +\n             `<h1 class=\"search-results-title\">Results for ${escape(results.query.userQuery)}` +\n             `${typeFilter}</h1> in ${crates} </div>`;\n         if (results.query.error !== null) {\n             output += `<h3>Query parser error: \"${results.query.error}\".</h3>`;\n-            output += '<div id=\"titles\">' +\n+            output += \"<div id=\\\"titles\\\">\" +\n                 makeTabHeader(0, \"In Names\", ret_others[1]) +\n                 \"</div>\";\n             currentTab = 0;\n         } else if (results.query.foundElems <= 1 && results.query.returned.length === 0) {\n-            output += `<div id=\"titles\">` +\n+            output += \"<div id=\\\"titles\\\">\" +\n                 makeTabHeader(0, \"In Names\", ret_others[1]) +\n                 makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n                 makeTabHeader(2, \"In Return Types\", ret_returned[1]) +\n@@ -1740,7 +1741,7 @@ window.initSearch = rawSearchIndex => {\n                 results.query.elems.length === 0 ? \"In Function Return Types\" :\n                 results.query.returned.length === 0 ? \"In Function Parameters\" :\n                 \"In Function Signatures\";\n-            output += '<div id=\"titles\">' +\n+            output += \"<div id=\\\"titles\\\">\" +\n                 makeTabHeader(0, signatureTabTitle, ret_others[1]) +\n                 \"</div>\";\n             currentTab = 0;"}, {"sha": "ad32a193893896a6be5ea62162f6b863fde22544", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -108,7 +108,7 @@\n         let output = \"\";\n \n         for (const setting of settings) {\n-            output += `<div class=\"setting-line\">`;\n+            output += \"<div class=\\\"setting-line\\\">\";\n             const js_data_name = setting[\"js_name\"];\n             const setting_name = setting[\"name\"];\n \n@@ -217,11 +217,10 @@\n \n         if (isSettingsPage) {\n             innerHTML +=\n-                `<a id=\"back\" href=\"javascript:void(0)\" onclick=\"history.back();\">Back</a>`;\n+                \"<a id=\\\"back\\\" href=\\\"javascript:void(0)\\\" onclick=\\\"history.back();\\\">Back</a>\";\n         } else {\n-            innerHTML +=\n-                `<a id=\"back\" href=\"javascript:void(0)\" onclick=\"switchDisplayedElement(null);\">\\\n-                    Back</a>`;\n+            innerHTML += \"<a id=\\\"back\\\" href=\\\"javascript:void(0)\\\" \" +\n+                \"onclick=\\\"switchDisplayedElement(null);\\\">Back</a>\";\n         }\n         innerHTML += `</span>\n             </div>"}, {"sha": "21de7d77d64e7f60a3b449051e1758539d64e337", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -24,7 +24,7 @@ function getSettingValue(settingName) {\n     if (settingsDataset !== null) {\n         // See the comment for `default_settings.into_iter()` etc. in\n         // `Options::from_matches` in `librustdoc/config.rs`.\n-        const def = settingsDataset[settingName.replace(/-/g,'_')];\n+        const def = settingsDataset[settingName.replace(/-/g,\"_\")];\n         if (def !== undefined) {\n             return def;\n         }\n@@ -173,7 +173,7 @@ const updateSystemTheme = (function () {\n         // fallback to the CSS computed value\n         return () => {\n             const cssTheme = getComputedStyle(document.documentElement)\n-                .getPropertyValue('content');\n+                .getPropertyValue(\"content\");\n \n             switchTheme(\n                 window.currentTheme,"}, {"sha": "36a569784adf7b1347a8036e34663ca7dcdce6d7", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -1,4 +1,4 @@\n-// [full] run-pass\n+// [full] check-pass\n // revisions: full min\n \n // regression test for #78180"}, {"sha": "75d20a6fef9fe4a9aebe801674e3591dfe982bf5", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/collect_hidden_types.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,21 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// edition:2018\n+\n+use std::future::Future;\n+\n+pub trait Service<Request> {\n+    type Future: Future<Output = ()>;\n+    fn call(&mut self, req: Request) -> Self::Future;\n+}\n+\n+// NOTE: the pub(crate) here is critical\n+pub(crate) fn new() -> () {}\n+\n+pub struct A;\n+impl Service<()> for A {\n+    type Future = impl Future<Output = ()>;\n+    fn call(&mut self, _: ()) -> Self::Future {\n+        async { new() }\n+    }\n+}"}, {"sha": "e78f178e464ebe36e8988f3e4dc3bc24b4597d98", "filename": "src/test/ui/type-alias-impl-trait/collect_hidden_types.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcollect_hidden_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcollect_hidden_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcollect_hidden_types.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,22 @@\n+// aux-build:collect_hidden_types.rs\n+use collect_hidden_types::Service;\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::Context;\n+\n+// build-pass\n+\n+// edition:2018\n+\n+extern crate collect_hidden_types;\n+\n+fn broken(mut a: collect_hidden_types::A, cx: &mut Context<'_>) {\n+    let mut fut = a.call(());\n+    let _ = unsafe { Pin::new_unchecked(&mut fut) }.poll(cx);\n+}\n+\n+pub async fn meeb(cx: &mut Context<'_>) {\n+    broken(collect_hidden_types::A, cx);\n+}\n+\n+fn main() {}"}, {"sha": "dafaf40a69df43dad9efd01487df42e0c09881a7", "filename": "src/test/ui/type-alias-impl-trait/cross_inference.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = (1u32, 2u32);\n+    let x: (_, _) = foo;\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "9ad7cad39d0713c1150c400650296418ab614923", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,24 @@\n+// known-bug\n+// failure-status: 101\n+// compile-flags: --edition=2021 --crate-type=lib\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"#.*\\n\" -> \"\"\n+// normalize-stderr-test \".*delayed.*\\n\" -> \"\"\n+\n+// tracked in https://github.com/rust-lang/rust/issues/96572\n+\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = (1u32, 2u32);\n+    let (a, b): (u32, u32) = foo;\n+}"}, {"sha": "84d2705bf2453c9c0a0439843a29dffc1d8a2a0a", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,32 @@\n+error: internal compiler error: no errors encountered even though `delay_span_bug` issued\n+\n+error: internal compiler error: broken MIR in DefId(0:3 ~ cross_inference_pattern_bug[646d]::main) ((_1.0: u32)): can't project out of PlaceTy { ty: main::T, variant_index: None }\n+  --> $DIR/cross_inference_pattern_bug.rs:23:10\n+   |\n+LL |     let (a, b): (u32, u32) = foo;\n+   |          ^\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+error: internal compiler error: broken MIR in DefId(0:3 ~ cross_inference_pattern_bug[646d]::main) ((_1.1: u32)): can't project out of PlaceTy { ty: main::T, variant_index: None }\n+  --> $DIR/cross_inference_pattern_bug.rs:23:13\n+   |\n+LL |     let (a, b): (u32, u32) = foo;\n+   |             ^\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+thread 'rustc' panicked\n+\n+query stack during panic:\n+end of query stack"}, {"sha": "179f525de52b0e445cc25b443360a1f1104e4f8c", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,13 @@\n+// known-bug\n+// compile-flags: --edition=2021 --crate-type=lib\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// tracked in https://github.com/rust-lang/rust/issues/96572\n+\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;  // error: unconstrained opaque type\n+    let foo: T = (1u32, 2u32);\n+    let (a, b) = foo; // removing this line makes the code compile\n+}"}, {"sha": "8aa1f495639951ff05e51d906d728a69dd8fd9bf", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained opaque type\n+  --> $DIR/cross_inference_pattern_bug_no_type.rs:10:14\n+   |\n+LL |     type T = impl Copy;  // error: unconstrained opaque type\n+   |              ^^^^^^^^^\n+   |\n+   = note: `T` must be used in combination with a concrete type within the same module\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6affbf175995ac31417cbd2b006eb3014bf3eca", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_rpit.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e612ce9ce50182fb33a5186fbb39cdd5d4534f1f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_rpit.rs?ref=e612ce9ce50182fb33a5186fbb39cdd5d4534f1f", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+fn foo(b: bool) -> impl Copy {\n+    if b {\n+        return (5,6)\n+    }\n+    let x: (_, _) = foo(true);\n+    println!(\"{:?}\", x);\n+    (1u32, 2u32)\n+}\n+\n+fn main() {\n+    foo(false);\n+}"}]}