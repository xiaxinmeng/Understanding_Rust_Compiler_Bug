{"sha": "cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjA4NWRlZDhkNjFkN2I3NDRkMGE4M2VjYmIzZGEyNTRmNmFiOWY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-24T09:41:32Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-24T09:41:32Z"}, "message": "Merge #624\n\n624: encapsulate hir locations r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "18b34194e0d01f5c186bc69f50879c568237dcf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b34194e0d01f5c186bc69f50879c568237dcf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "html_url": "https://github.com/rust-lang/rust/commit/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6a0a4a564accb12b48e703245655e3e3a0637445", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0a4a564accb12b48e703245655e3e3a0637445", "html_url": "https://github.com/rust-lang/rust/commit/6a0a4a564accb12b48e703245655e3e3a0637445"}, {"sha": "9fe09db771aa3890ac8a0eeb1d9e6097060fad06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe09db771aa3890ac8a0eeb1d9e6097060fad06", "html_url": "https://github.com/rust-lang/rust/commit/9fe09db771aa3890ac8a0eeb1d9e6097060fad06"}], "stats": {"total": 119, "additions": 45, "deletions": 74}, "files": [{"sha": "cc03da1e2583cf767efeb3984dea8919412f311a", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "patch": "@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n use ra_syntax::{SyntaxNode, TreeArc, SourceFile};\n-use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, salsa};\n+use ra_db::{SourceRootId, SyntaxDatabase, salsa};\n \n use crate::{\n-    DefLoc, DefId, MacroCallLoc, MacroCallId, Name, HirFileId,\n+    HirInterner, DefId, MacroCallId, Name, HirFileId,\n     SourceFileItems, SourceItemId, Crate,\n     query_definitions,\n     FnSignature, FnScopes,\n@@ -18,11 +18,7 @@ use crate::{\n };\n \n #[salsa::query_group]\n-pub trait HirDatabase:\n-    SyntaxDatabase\n-    + AsRef<LocationIntener<DefLoc, DefId>>\n-    + AsRef<LocationIntener<MacroCallLoc, MacroCallId>>\n-{\n+pub trait HirDatabase: SyntaxDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(HirFileId::hir_source_file)]\n     fn hir_source_file(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n "}, {"sha": "43f0e81f9f4bb11cfa0dbd5088d0a3f03caab09c", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "patch": "@@ -8,6 +8,18 @@ use crate::{\n     module_tree::ModuleId,\n };\n \n+#[derive(Debug, Default)]\n+pub struct HirInterner {\n+    defs: LocationIntener<DefLoc, DefId>,\n+    macros: LocationIntener<MacroCallLoc, MacroCallId>,\n+}\n+\n+impl HirInterner {\n+    pub fn len(&self) -> usize {\n+        self.defs.len() + self.macros.len()\n+    }\n+}\n+\n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor\n /// (but for hir objects).\n@@ -106,21 +118,15 @@ pub struct MacroCallLoc {\n }\n \n impl MacroCallId {\n-    pub(crate) fn loc(\n-        self,\n-        db: &impl AsRef<LocationIntener<MacroCallLoc, MacroCallId>>,\n-    ) -> MacroCallLoc {\n-        db.as_ref().id2loc(self)\n+    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> MacroCallLoc {\n+        db.as_ref().macros.id2loc(self)\n     }\n }\n \n impl MacroCallLoc {\n     #[allow(unused)]\n-    pub(crate) fn id(\n-        &self,\n-        db: &impl AsRef<LocationIntener<MacroCallLoc, MacroCallId>>,\n-    ) -> MacroCallId {\n-        db.as_ref().loc2id(&self)\n+    pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> MacroCallId {\n+        db.as_ref().macros.loc2id(&self)\n     }\n }\n \n@@ -164,8 +170,8 @@ pub(crate) enum DefKind {\n }\n \n impl DefId {\n-    pub(crate) fn loc(self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefLoc {\n-        db.as_ref().id2loc(self)\n+    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> DefLoc {\n+        db.as_ref().defs.id2loc(self)\n     }\n \n     pub fn resolve(self, db: &impl HirDatabase) -> Def {\n@@ -233,8 +239,8 @@ impl DefId {\n }\n \n impl DefLoc {\n-    pub(crate) fn id(&self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefId {\n-        db.as_ref().loc2id(&self)\n+    pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> DefId {\n+        db.as_ref().defs.loc2id(&self)\n     }\n }\n "}, {"sha": "551d0d149d38a12d5ba5f2068eaeaa82718f8e99", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "patch": "@@ -3,11 +3,11 @@ use rustc_hash::FxHashMap;\n \n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_syntax::ast::{self, AstNode};\n-use ra_db::{LocationIntener, SourceRootId};\n+use ra_db::{SourceRootId};\n \n use crate::{\n     DefId, DefLoc, DefKind, SourceItemId, SourceFileItems,\n-    Function,\n+    Function, HirInterner,\n     db::HirDatabase,\n     type_ref::TypeRef,\n     module_tree::ModuleId,\n@@ -66,7 +66,7 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn from_ast(\n-        db: &impl AsRef<LocationIntener<DefLoc, DefId>>,\n+        db: &impl AsRef<HirInterner>,\n         file_items: &SourceFileItems,\n         module: &Module,\n         node: &ast::ImplBlock,"}, {"sha": "87b5a8b8a00ef04daa28429225bc8ece352e69b9", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "patch": "@@ -40,7 +40,7 @@ use crate::{\n pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n-    ids::{HirFileId, DefId, DefLoc, MacroCallId, MacroCallLoc},\n+    ids::{HirFileId, DefId, DefLoc, MacroCallId, MacroCallLoc, HirInterner},\n     macros::{MacroDef, MacroInput, MacroExpansion},\n     nameres::{ItemMap, PerNs, Namespace, Resolution},\n     ty::Ty,"}, {"sha": "4145c804878e6e5344b8393de4ec7ac2421594e2", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "patch": "@@ -2,21 +2,21 @@ use std::{sync::Arc, panic};\n \n use parking_lot::Mutex;\n use ra_db::{\n-    LocationIntener, BaseDatabase, FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId,\n+    BaseDatabase, FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId,\n     salsa::{self, Database},\n };\n use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n \n-use crate::{db, DefId, DefLoc, MacroCallId, MacroCallLoc};\n+use crate::{db, HirInterner};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n #[derive(Debug)]\n pub(crate) struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n     runtime: salsa::Runtime<MockDatabase>,\n-    id_maps: Arc<IdMaps>,\n+    interner: Arc<HirInterner>,\n     file_counter: u32,\n }\n \n@@ -123,12 +123,6 @@ impl MockDatabase {\n     }\n }\n \n-#[derive(Debug, Default)]\n-struct IdMaps {\n-    defs: LocationIntener<DefLoc, DefId>,\n-    macros: LocationIntener<MacroCallLoc, MacroCallId>,\n-}\n-\n impl salsa::Database for MockDatabase {\n     fn salsa_runtime(&self) -> &salsa::Runtime<MockDatabase> {\n         &self.runtime\n@@ -147,7 +141,7 @@ impl Default for MockDatabase {\n         let mut db = MockDatabase {\n             events: Default::default(),\n             runtime: salsa::Runtime::default(),\n-            id_maps: Default::default(),\n+            interner: Default::default(),\n             file_counter: 0,\n         };\n         db.query_mut(ra_db::CrateGraphQuery)\n@@ -165,22 +159,17 @@ impl salsa::ParallelDatabase for MockDatabase {\n         salsa::Snapshot::new(MockDatabase {\n             events: Default::default(),\n             runtime: self.runtime.snapshot(self),\n-            id_maps: self.id_maps.clone(),\n+            interner: Arc::clone(&self.interner),\n             file_counter: self.file_counter,\n         })\n     }\n }\n \n impl BaseDatabase for MockDatabase {}\n \n-impl AsRef<LocationIntener<DefLoc, DefId>> for MockDatabase {\n-    fn as_ref(&self) -> &LocationIntener<DefLoc, DefId> {\n-        &self.id_maps.defs\n-    }\n-}\n-impl AsRef<LocationIntener<MacroCallLoc, MacroCallId>> for MockDatabase {\n-    fn as_ref(&self) -> &LocationIntener<MacroCallLoc, MacroCallId> {\n-        &self.id_maps.macros\n+impl AsRef<HirInterner> for MockDatabase {\n+    fn as_ref(&self) -> &HirInterner {\n+        &self.interner\n     }\n }\n "}, {"sha": "ba0eb1cb8acce09ad77d63a6664fc2dba3b55947", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "patch": "@@ -1,7 +1,7 @@\n-use std::{fmt, sync::Arc};\n+use std::sync::Arc;\n \n use ra_db::{\n-    LocationIntener, BaseDatabase, FileId, Canceled,\n+    BaseDatabase, FileId, Canceled,\n     salsa::{self, Database},\n };\n \n@@ -10,21 +10,7 @@ use crate::{symbol_index, LineIndex};\n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n-    id_maps: Arc<IdMaps>,\n-}\n-\n-#[derive(Default)]\n-struct IdMaps {\n-    defs: LocationIntener<hir::DefLoc, hir::DefId>,\n-    macros: LocationIntener<hir::MacroCallLoc, hir::MacroCallId>,\n-}\n-\n-impl fmt::Debug for IdMaps {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"IdMaps\")\n-            .field(\"n_defs\", &self.defs.len())\n-            .finish()\n-    }\n+    interner: Arc<hir::HirInterner>,\n }\n \n impl salsa::Database for RootDatabase {\n@@ -40,7 +26,7 @@ impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n         let mut db = RootDatabase {\n             runtime: salsa::Runtime::default(),\n-            id_maps: Default::default(),\n+            interner: Default::default(),\n         };\n         db.query_mut(ra_db::CrateGraphQuery)\n             .set((), Default::default());\n@@ -56,22 +42,16 @@ impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n             runtime: self.runtime.snapshot(self),\n-            id_maps: self.id_maps.clone(),\n+            interner: Arc::clone(&self.interner),\n         })\n     }\n }\n \n impl BaseDatabase for RootDatabase {}\n \n-impl AsRef<LocationIntener<hir::DefLoc, hir::DefId>> for RootDatabase {\n-    fn as_ref(&self) -> &LocationIntener<hir::DefLoc, hir::DefId> {\n-        &self.id_maps.defs\n-    }\n-}\n-\n-impl AsRef<LocationIntener<hir::MacroCallLoc, hir::MacroCallId>> for RootDatabase {\n-    fn as_ref(&self) -> &LocationIntener<hir::MacroCallLoc, hir::MacroCallId> {\n-        &self.id_maps.macros\n+impl AsRef<hir::HirInterner> for RootDatabase {\n+    fn as_ref(&self) -> &hir::HirInterner {\n+        &self.interner\n     }\n }\n "}, {"sha": "5c14cbdeb4a1ee295e1c6b5537187442b845cef7", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=cfb085ded8d61d7b744d0a83ecbb3da254f6ab9f", "patch": "@@ -1,5 +1,5 @@\n use ra_db::{\n-    LocationIntener, SourceFileQuery,\n+    SourceFileQuery,\n     salsa::{Database, debug::DebugQueryTable},\n };\n \n@@ -8,7 +8,7 @@ use crate::db::RootDatabase;\n pub(crate) fn status(db: &RootDatabase) -> String {\n     let n_parsed_files = db.query(SourceFileQuery).keys::<Vec<_>>().len();\n     let n_defs = {\n-        let interner: &LocationIntener<hir::DefLoc, hir::DefId> = db.as_ref();\n+        let interner: &hir::HirInterner = db.as_ref();\n         interner.len()\n     };\n     format!(\"#n_parsed_files {}\\n#n_defs {}\\n\", n_parsed_files, n_defs)"}]}