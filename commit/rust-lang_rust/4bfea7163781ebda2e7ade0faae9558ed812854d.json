{"sha": "4bfea7163781ebda2e7ade0faae9558ed812854d", "node_id": "C_kwDOAAsO6NoAKDRiZmVhNzE2Mzc4MWViZGEyZTdhZGUwZmFhZTk1NThlZDgxMjg1NGQ", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2022-04-02T09:28:33Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2022-04-02T09:28:33Z"}, "message": "incorporating feedback", "tree": {"sha": "e5426811559dde21f1be39af64131571ac72d2b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5426811559dde21f1be39af64131571ac72d2b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bfea7163781ebda2e7ade0faae9558ed812854d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0hoVRXRPubZAqGkYx9jUtSpSe8FAmJIF0EACgkQYx9jUtSp\nSe+XYA/+OIToK2fezp+jRzz1s1uZtTxDFM/ls9AsLeb3QhA4/I+ljcg+IddwzwzU\ncErgdzCo7jgARsLl2ZK3NNlk0L4xiNwRdhCWvFIciDNY7AlTJ3lB1OYZVQhbZxjw\nXDO2WFiP7I+398PIvL3XV+NESkoJS7SallnOPL8+FjxU53j9j8LFGB0JhLqRN/8F\nAgGUvYx3SdS5IiB5Y1ub/8ADcrutg1zyotrEbxDWhaR0vcm8JBud7wHwrGvbdY2g\nF2JFDoZreTTBtABSfC1hD3VrvK0ST/ZNFTpAsYtfXuq+McdwpKw3VcGlfm3JeH5h\nVXyzBnd3ckYLeHcvnWylPrdBroQ07EXDk+4DBrOkNi7xwuWqk0ULWpKo+0wtTbo8\na2ALsuV3C3fHEevp9lXxj3mEQiquWn9+psb5AvRpJ6BtFb0qHQQoEYn31EUU7KYP\n+pjn3bEfLWZd3DSs9oC7kqbbMU4cLuajrbbmlQi5YgHSYHVswukH5p8eh6V5tHCN\nXkoO0nxv4CM4j68lRYi78D9yU2Yukmel1XEjyeoHq3oTNHrkVZsCtBPwTn1pOOIk\n9sEvNXDM4Y28JPxrr+R6NeK8ll+dfhQfIGdia1IKICRDaaZlFlfUmY1PWYd0oyE1\nhrx/UJdrs2d3K9agaB7BV9M1vqsRk1XRTZ0tvTPWjA2m3Nixe9E=\n=Gj2F\n-----END PGP SIGNATURE-----", "payload": "tree e5426811559dde21f1be39af64131571ac72d2b1\nparent d27454eda51a946a5f80c30b836238821b1f56fc\nauthor Giles Cope <gilescope@gmail.com> 1648891713 +0100\ncommitter Giles Cope <gilescope@gmail.com> 1648891713 +0100\n\nincorporating feedback\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfea7163781ebda2e7ade0faae9558ed812854d", "html_url": "https://github.com/rust-lang/rust/commit/4bfea7163781ebda2e7ade0faae9558ed812854d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bfea7163781ebda2e7ade0faae9558ed812854d/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d27454eda51a946a5f80c30b836238821b1f56fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d27454eda51a946a5f80c30b836238821b1f56fc", "html_url": "https://github.com/rust-lang/rust/commit/d27454eda51a946a5f80c30b836238821b1f56fc"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "5eb7b9096bc58b7e6912cab0dedce4bcd25f2c92", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4bfea7163781ebda2e7ade0faae9558ed812854d/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfea7163781ebda2e7ade0faae9558ed812854d/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=4bfea7163781ebda2e7ade0faae9558ed812854d", "patch": "@@ -975,9 +975,9 @@ trait FromStrRadixHelper: PartialOrd + Copy {\n     fn checked_mul(&self, other: u32) -> Option<Self>;\n     fn checked_sub(&self, other: u32) -> Option<Self>;\n     fn checked_add(&self, other: u32) -> Option<Self>;\n-    unsafe fn unchecked_mul(&self, other: u32) -> Self;\n-    unsafe fn unchecked_sub(&self, other: u32) -> Self;\n-    unsafe fn unchecked_add(&self, other: u32) -> Self;\n+    unsafe fn unchecked_mul(self, other: u32) -> Self;\n+    unsafe fn unchecked_sub(self, other: u32) -> Self;\n+    unsafe fn unchecked_add(self, other: u32) -> Self;\n }\n \n macro_rules! from_str_radix_int_impl {\n@@ -993,7 +993,7 @@ macro_rules! from_str_radix_int_impl {\n }\n from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n-macro_rules! doit {\n+macro_rules! impl_helper_for {\n     ($($t:ty)*) => ($(impl FromStrRadixHelper for $t {\n         const MIN: Self = Self::MIN;\n         #[inline]\n@@ -1011,29 +1011,29 @@ macro_rules! doit {\n             Self::checked_add(*self, other as Self)\n         }\n         #[inline]\n-        unsafe fn unchecked_mul(&self, other: u32) -> Self {\n+        unsafe fn unchecked_mul(self, other: u32) -> Self {\n             // SAFETY:  Conditions of `Self::unchecked_mul` must be upheld by the caller.\n             unsafe {\n-                Self::unchecked_mul(*self, other as Self)\n+                Self::unchecked_mul(self, other as Self)\n             }\n         }\n         #[inline]\n-        unsafe fn unchecked_sub(&self, other: u32) -> Self {\n+        unsafe fn unchecked_sub(self, other: u32) -> Self {\n             // SAFETY:  Conditions of `Self::unchecked_sub` must be upheld by the caller.\n             unsafe {\n-                Self::unchecked_sub(*self, other as Self)\n+                Self::unchecked_sub(self, other as Self)\n             }\n         }\n         #[inline]\n-        unsafe fn unchecked_add(&self, other: u32) -> Self {\n+        unsafe fn unchecked_add(self, other: u32) -> Self {\n             // SAFETY: Conditions of `Self::unchecked_add` must be upheld by the caller.\n             unsafe {\n-                Self::unchecked_add(*self, other as Self)\n+                Self::unchecked_add(self, other as Self)\n             }\n         }\n     })*)\n }\n-doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n+impl_helper_for! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n \n fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n     use self::IntErrorKind::*;\n@@ -1078,41 +1078,49 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n         // `u8::MAX` is `ff` - any str of len 2 is guaranteed to not overflow.\n         // `i8::MAX` is `7f` - only a str of len 1 is guaranteed to not overflow.\n         unsafe {\n-            macro_rules! run_loop {\n+            macro_rules! run_unchecked_loop {\n                 ($unchecked_additive_op:ident) => {\n                     for &c in digits {\n                         result = result.unchecked_mul(radix);\n                         let x = (c as char).to_digit(radix).ok_or(PIE { kind: InvalidDigit })?;\n-                        result = T::$unchecked_additive_op(&result, x);\n+                        result = T::$unchecked_additive_op(result, x);\n                     }\n                 };\n             }\n             if is_positive {\n-                run_loop!(unchecked_add)\n+                run_unchecked_loop!(unchecked_add)\n             } else {\n-                run_loop!(unchecked_sub)\n+                run_unchecked_loop!(unchecked_sub)\n             };\n         }\n-    } else {\n-        let additive_op = if is_positive { T::checked_add } else { T::checked_sub };\n-        let overflow_err = || PIE { kind: if is_positive { PosOverflow } else { NegOverflow } };\n-\n-        for &c in digits {\n-            // When `radix` is passed in as a literal, rather than doing a slow `imul`\n-            // the compiler can use shifts if `radix` can be expressed as a\n-            // sum of powers of 2 (x*10 can be written as x*8 + x*2).\n-            // When the compiler can't use these optimisations,\n-            // the latency of the multiplication can be hidden by issuing it\n-            // before the result is needed to improve performance on\n-            // modern out-of-order CPU as multiplication here is slower\n-            // than the other instructions, we can get the end result faster\n-            // doing multiplication first and let the CPU spends other cycles\n-            // doing other computation and get multiplication result later.\n-            let mul = result.checked_mul(radix);\n-            let x = (c as char).to_digit(radix).ok_or(PIE { kind: InvalidDigit })?;\n-            result = mul.ok_or_else(overflow_err)?;\n-            result = additive_op(&result, x).ok_or_else(overflow_err)?;\n+    } else {        \n+        macro_rules! run_checked_loop {\n+            ($checked_additive_op:ident, $overflow_err:ident) => {\n+                for &c in digits {\n+                    // When `radix` is passed in as a literal, rather than doing a slow `imul`\n+                    // the compiler can use shifts if `radix` can be expressed as a\n+                    // sum of powers of 2 (x*10 can be written as x*8 + x*2).\n+                    // When the compiler can't use these optimisations,\n+                    // the latency of the multiplication can be hidden by issuing it\n+                    // before the result is needed to improve performance on\n+                    // modern out-of-order CPU as multiplication here is slower\n+                    // than the other instructions, we can get the end result faster\n+                    // doing multiplication first and let the CPU spends other cycles\n+                    // doing other computation and get multiplication result later.\n+                    let mul = result.checked_mul(radix);\n+                    let x = (c as char).to_digit(radix).ok_or(PIE { kind: InvalidDigit })?;\n+                    result = mul.ok_or_else($overflow_err)?;\n+                    result =  T::$checked_additive_op(&result, x).ok_or_else($overflow_err)?;\n+                }\n+            }\n         }\n+        if is_positive {\n+            let overflow_err = || PIE { kind: PosOverflow };\n+            run_checked_loop!(checked_add, overflow_err)\n+        } else {\n+            let overflow_err = || PIE { kind: NegOverflow };\n+            run_checked_loop!(checked_sub, overflow_err)\n+        };\n     }\n     Ok(result)\n }"}]}