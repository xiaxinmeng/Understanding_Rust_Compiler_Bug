{"sha": "4b82bbeac009c09c55e4a5458ee7338bddb14a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODJiYmVhYzAwOWMwOWM1NWU0YTU0NThlZTczMzhiZGRiMTRhNDQ=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-19T10:50:47Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-19T11:51:44Z"}, "message": "Recognize bounds on impls as const bounds", "tree": {"sha": "662e8f10cbcfe6e580599e074bdc5ab7f5a9cff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/662e8f10cbcfe6e580599e074bdc5ab7f5a9cff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b82bbeac009c09c55e4a5458ee7338bddb14a44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmD1Z1AACgkQZSV3NIU3\nbZK1tA//c+L4H23aP5b4vTwE3a0c3ZgMxzf0r4aD+jlcjcLll4PrdHiKrgNnAQpR\nla1yEQ9MQII5tuqMWKmpzxRKzTiUMua6QZFD6LPum0ytfoWLk8LS9XM9/wutZ7eH\n5XNZJGT0pLSeuX0o90BQroPE7VvWEOuOaJjsoCmf72YLx6JxSjDlUNG77O5AuAWS\ncV89Z8/93vsZGt17CooQh3LHWzzFmBBiEA5ncBsZr+ooV2KJir7iUHo+typ3WTCe\nLjJITAxKByFYU2NoOP1RA2Il0pVpKvH/QPsfL8kZp8ySiv0IBDFRLz64tfB3f5Jg\nSdVfIUojNfNVydmNkCczY5q2N/Tz4TPqRg5+qSybTnFCrzS9EqadzT0x6t77G+Ll\nQvJGWaCQIgqMoPCAOiWMtZvo7a/LoHVN1X8s/aRYa6cIoL9b1quWMxxTBO9yl0iI\nSDubtLlaaBQHMtH7r6VylKFG+Pbd0VsDTcG6v4pS+Mmdo06gLLTLn+fr4FVmA9xT\nPqdQ4PnLqlgRiBLrAdqcaX4nvivQcBOvqk01RE4+7mcdqHuJ0rJDsR5IAXu5pHAa\nOYEn2ao+5HTz9puV+3fEtz84+IkCGpU99KH72X2B4vgdWpXS+m5tAxBrMsYbsHvl\nDnawjL+vsg7GnFYdcCpOG7m7sW7Qtdmmxza4hxBf5yB4ynvyGyw=\n=h7eY\n-----END PGP SIGNATURE-----", "payload": "tree 662e8f10cbcfe6e580599e074bdc5ab7f5a9cff6\nparent d05a286449809cba5043bdac39074198a63cda6d\nauthor Deadbeef <ent3rm4n@gmail.com> 1626691847 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1626695504 +0800\n\nRecognize bounds on impls as const bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b82bbeac009c09c55e4a5458ee7338bddb14a44", "html_url": "https://github.com/rust-lang/rust/commit/4b82bbeac009c09c55e4a5458ee7338bddb14a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b82bbeac009c09c55e4a5458ee7338bddb14a44/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d05a286449809cba5043bdac39074198a63cda6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d05a286449809cba5043bdac39074198a63cda6d", "html_url": "https://github.com/rust-lang/rust/commit/d05a286449809cba5043bdac39074198a63cda6d"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "213887e26179ceb70b5ef411da37fa41cf3e4f10", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b82bbeac009c09c55e4a5458ee7338bddb14a44/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b82bbeac009c09c55e4a5458ee7338bddb14a44/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4b82bbeac009c09c55e4a5458ee7338bddb14a44", "patch": "@@ -3064,6 +3064,27 @@ impl<'hir> Node<'hir> {\n             Node::Crate(_) | Node::Visibility(_) => None,\n         }\n     }\n+\n+    /// Returns `Constness::Const` when this node is a const fn/impl.\n+    pub fn constness(&self) -> Constness {\n+        match self {\n+            Node::Item(Item {\n+                kind: ItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::Item(Item { kind: ItemKind::Impl(Impl { constness, .. }), .. }) => *constness,\n+\n+            _ => Constness::NotConst,\n+        }\n+    }\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger."}, {"sha": "13686cfec809a8635e683129330341d1a222a62e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b82bbeac009c09c55e4a5458ee7338bddb14a44/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b82bbeac009c09c55e4a5458ee7338bddb14a44/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=4b82bbeac009c09c55e4a5458ee7338bddb14a44", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n@@ -175,13 +174,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        // FIXME: refactor this into a method\n-        let node = self.tcx.hir().get(self.body_id);\n-        if let Some(fn_like) = FnLikeNode::from_node(node) {\n-            fn_like.constness()\n-        } else {\n-            hir::Constness::NotConst\n-        }\n+        self.tcx.hir().get(self.body_id).constness()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "1a4c2eb5155849168bcb719b3763737abc840ea3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b82bbeac009c09c55e4a5458ee7338bddb14a44/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b82bbeac009c09c55e4a5458ee7338bddb14a44/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4b82bbeac009c09c55e4a5458ee7338bddb14a44", "patch": "@@ -35,7 +35,6 @@ use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n use rustc_hir::{GenericParamKind, HirId, Node};\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n@@ -358,11 +357,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        if let Some(fn_like) = FnLikeNode::from_node(self.node()) {\n-            fn_like.constness()\n-        } else {\n-            hir::Constness::NotConst\n-        }\n+        self.node().constness()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "536c1d737402346f87f5209e4bf0be7f11e5c01f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4b82bbeac009c09c55e4a5458ee7338bddb14a44/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b82bbeac009c09c55e4a5458ee7338bddb14a44/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=4b82bbeac009c09c55e4a5458ee7338bddb14a44", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+trait MyPartialEq {\n+    fn eq(&self, other: &Self) -> bool;\n+}\n+\n+impl<T: PartialEq> const MyPartialEq for T {\n+    fn eq(&self, other: &Self) -> bool {\n+        PartialEq::eq(self, other)\n+    }\n+}\n+\n+fn main() {}"}]}