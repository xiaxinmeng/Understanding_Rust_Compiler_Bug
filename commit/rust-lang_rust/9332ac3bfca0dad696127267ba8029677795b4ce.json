{"sha": "9332ac3bfca0dad696127267ba8029677795b4ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMzJhYzNiZmNhMGRhZDY5NjEyNzI2N2JhODAyOTY3Nzc5NWI0Y2U=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-05-11T11:00:34Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-05-11T11:00:34Z"}, "message": "Override `clone_from` for some types", "tree": {"sha": "709b35bfbd13df1fae1ccddeb9d4a210c5a350dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/709b35bfbd13df1fae1ccddeb9d4a210c5a350dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9332ac3bfca0dad696127267ba8029677795b4ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9332ac3bfca0dad696127267ba8029677795b4ce", "html_url": "https://github.com/rust-lang/rust/commit/9332ac3bfca0dad696127267ba8029677795b4ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9332ac3bfca0dad696127267ba8029677795b4ce/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe62c6e2958abfe54a9410a24a5750baf4c157e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe62c6e2958abfe54a9410a24a5750baf4c157e0", "html_url": "https://github.com/rust-lang/rust/commit/fe62c6e2958abfe54a9410a24a5750baf4c157e0"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "f88a6e418c7c819313e069ad44a69a41f9bb2bc9", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9332ac3bfca0dad696127267ba8029677795b4ce", "patch": "@@ -1123,6 +1123,15 @@ impl<T: Clone> Clone for RefCell<T> {\n     fn clone(&self) -> RefCell<T> {\n         RefCell::new(self.borrow().clone())\n     }\n+\n+    /// # Panics\n+    ///\n+    /// Panics if `other` is currently mutably borrowed.\n+    #[inline]\n+    #[track_caller]\n+    fn clone_from(&mut self, other: &Self) {\n+        self.get_mut().clone_from(&other.borrow())\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3f0acf435fe8ddeb1103b8f8cc6c5e2ee7052b58", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=9332ac3bfca0dad696127267ba8029677795b4ce", "patch": "@@ -578,7 +578,7 @@ impl Ordering {\n /// v.sort_by_key(|&num| (num > 3, Reverse(num)));\n /// assert_eq!(v, vec![3, 2, 1, 6, 5, 4]);\n /// ```\n-#[derive(PartialEq, Eq, Debug, Copy, Clone, Default, Hash)]\n+#[derive(PartialEq, Eq, Debug, Copy, Default, Hash)]\n #[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")]\n #[repr(transparent)]\n pub struct Reverse<T>(#[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")] pub T);\n@@ -616,6 +616,19 @@ impl<T: Ord> Ord for Reverse<T> {\n     }\n }\n \n+#[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")]\n+impl<T: Clone> Clone for Reverse<T> {\n+    #[inline]\n+    fn clone(&self) -> Reverse<T> {\n+        Reverse(self.0.clone())\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, other: &Self) {\n+        self.0.clone_from(&other.0)\n+    }\n+}\n+\n /// Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).\n ///\n /// An order is a total order if it is (for all `a`, `b` and `c`):"}, {"sha": "5b99f6954e62beb70c9fbf7814c889e58d6e2a15", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=9332ac3bfca0dad696127267ba8029677795b4ce", "patch": "@@ -44,7 +44,7 @@ use crate::ptr;\n /// [`MaybeUninit<T>`]: crate::mem::MaybeUninit\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[lang = \"manually_drop\"]\n-#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[repr(transparent)]\n pub struct ManuallyDrop<T: ?Sized> {\n     value: T,\n@@ -160,3 +160,16 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n         &mut self.value\n     }\n }\n+\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+impl<T: Clone> Clone for ManuallyDrop<T> {\n+    #[inline]\n+    fn clone(&self) -> ManuallyDrop<T> {\n+        ManuallyDrop { value: self.value.clone() }\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, other: &Self) {\n+        self.value.clone_from(&other.value)\n+    }\n+}"}, {"sha": "9527254c947938644417ac5ccaa0c8041301ae56", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9332ac3bfca0dad696127267ba8029677795b4ce/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=9332ac3bfca0dad696127267ba8029677795b4ce", "patch": "@@ -71,7 +71,7 @@ use core::convert::TryInto;\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Clone, Debug, Default, Eq, PartialEq)]\n+#[derive(Debug, Default, Eq, PartialEq)]\n pub struct Cursor<T> {\n     inner: T,\n     pos: u64,\n@@ -205,6 +205,23 @@ impl<T> Cursor<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> Clone for Cursor<T>\n+where\n+    T: Clone,\n+{\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        Cursor { inner: self.inner.clone(), pos: self.pos }\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, other: &Self) {\n+        self.inner.clone_from(&other.inner);\n+        self.pos = other.pos;\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> io::Seek for Cursor<T>\n where"}]}