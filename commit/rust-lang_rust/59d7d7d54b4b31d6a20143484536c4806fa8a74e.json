{"sha": "59d7d7d54b4b31d6a20143484536c4806fa8a74e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDdkN2Q1NGI0YjMxZDZhMjAxNDM0ODQ1MzZjNDgwNmZhOGE3NGU=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-13T00:06:50Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-13T22:53:58Z"}, "message": "Querify local plugin_registrar_fn", "tree": {"sha": "2da2213c232f8279a7d0ba322cb7bc3da1f520b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da2213c232f8279a7d0ba322cb7bc3da1f520b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d7d7d54b4b31d6a20143484536c4806fa8a74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d7d7d54b4b31d6a20143484536c4806fa8a74e", "html_url": "https://github.com/rust-lang/rust/commit/59d7d7d54b4b31d6a20143484536c4806fa8a74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d7d7d54b4b31d6a20143484536c4806fa8a74e/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb6040096ca2c21c354a500ab8fd0038d84be193", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6040096ca2c21c354a500ab8fd0038d84be193", "html_url": "https://github.com/rust-lang/rust/commit/fb6040096ca2c21c354a500ab8fd0038d84be193"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "5f9f62f7b136b54efbd71499684f500f1f69b746", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=59d7d7d54b4b31d6a20143484536c4806fa8a74e", "patch": "@@ -69,7 +69,6 @@ pub struct Session {\n     pub parse_sess: ParseSess,\n     /// For a library crate, this is always none\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n-    pub plugin_registrar_fn: Once<Option<ast::NodeId>>,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n@@ -1173,7 +1172,6 @@ pub fn build_session_(\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: Once::new(),\n-        plugin_registrar_fn: Once::new(),\n         sysroot,\n         local_crate_source_file,\n         working_dir,"}, {"sha": "bf69089a254a4feb0e9f19e42269e684d77a79ba", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=59d7d7d54b4b31d6a20143484536c4806fa8a74e", "patch": "@@ -151,9 +151,8 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n-    if let Some(id) = *tcx.sess.plugin_registrar_fn.get() {\n-        let def_id = tcx.hir().local_def_id(id);\n-        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.plugin_registrar_fn(LOCAL_CRATE) {\n+        reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n     Lrc::new(reachable_non_generics)"}, {"sha": "9267f14f2423456e7de2dc19a023d10b2b55a271", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=59d7d7d54b4b31d6a20143484536c4806fa8a74e", "patch": "@@ -242,8 +242,8 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     let node_id = tcx.hir().as_local_node_id(def_id);\n \n-    if let Some(id) = node_id {\n-        if *tcx.sess.plugin_registrar_fn.get() == Some(id) {\n+    if def_id.is_local() {\n+        if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }"}, {"sha": "6667db35b70e6c5b25cb6d065966e5690f44dc4d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=59d7d7d54b4b31d6a20143484536c4806fa8a74e", "patch": "@@ -1159,6 +1159,7 @@ where\n \n pub fn default_provide(providers: &mut ty::query::Providers) {\n     proc_macro_decls::provide(providers);\n+    plugin::build::provide(providers);\n     hir::provide(providers);\n     borrowck::provide(providers);\n     mir::provide(providers);\n@@ -1213,11 +1214,6 @@ where\n         middle::entry::find_entry_point(sess, &hir_map, name)\n     });\n \n-    sess.plugin_registrar_fn\n-        .set(time(sess, \"looking for plugin registrar\", || {\n-            plugin::build::find_plugin_registrar(sess.diagnostic(), &hir_map)\n-        }));\n-\n     let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n     codegen_backend.provide(&mut local_providers);\n@@ -1249,6 +1245,10 @@ where\n \n             time(sess, \"loop checking\", || loops::check_crate(tcx));\n \n+            time(sess, \"looking for plugin registrar\", || {\n+                plugin::build::find_plugin_registrar(tcx)\n+            });\n+\n             time(sess, \"looking for derive registrar\", || {\n                 proc_macro_decls::find(tcx)\n             });"}, {"sha": "72bcf8edfdd2183585be10f7d3da9e9c9217c55c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=59d7d7d54b4b31d6a20143484536c4806fa8a74e", "patch": "@@ -19,7 +19,7 @@\n //! a `pub fn new()`.\n \n use rustc::hir::def::Def;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::{self, Ty};\n use hir::Node;\n use util::nodemap::NodeSet;\n@@ -860,7 +860,7 @@ impl LintPass for PluginAsLibrary {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        if cx.sess().plugin_registrar_fn.get().is_some() {\n+        if cx.tcx.plugin_registrar_fn(LOCAL_CRATE).is_some() {\n             // We're compiling a plugin; it's fine to link other plugins.\n             return;\n         }"}, {"sha": "2de1637fb0d9d11e24e47757a8305d6f3d975af8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=59d7d7d54b4b31d6a20143484536c4806fa8a74e", "patch": "@@ -482,10 +482,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             has_global_allocator: has_global_allocator,\n             has_panic_handler: has_panic_handler,\n             has_default_lib_allocator: has_default_lib_allocator,\n-            plugin_registrar_fn: tcx.sess\n-                .plugin_registrar_fn\n-                .get()\n-                .map(|id| tcx.hir().local_def_id(id).index),\n+            plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_decls_static: if is_proc_macro {\n                 let id = tcx.proc_macro_decls_static(LOCAL_CRATE).unwrap();\n                 Some(id.index)"}, {"sha": "46c452668c3c8b509f6e26a6ce383b4de969527a", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d7d54b4b31d6a20143484536c4806fa8a74e/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=59d7d7d54b4b31d6a20143484536c4806fa8a74e", "patch": "@@ -2,11 +2,12 @@\n \n use syntax::ast;\n use syntax::attr;\n-use errors;\n use syntax_pos::Span;\n-use rustc::hir::map::Map;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n \n struct RegistrarFinder {\n     registrars: Vec<(ast::NodeId, Span)> ,\n@@ -30,21 +31,27 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n }\n \n /// Find the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n-                             hir_map: &Map)\n-                             -> Option<ast::NodeId> {\n-    let krate = hir_map.krate();\n+pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Option<DefId> {\n+    tcx.plugin_registrar_fn(LOCAL_CRATE)\n+}\n+\n+fn plugin_registrar_fn<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    cnum: CrateNum,\n+) -> Option<DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };\n-    krate.visit_all_item_likes(&mut finder);\n+    tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n     match finder.registrars.len() {\n         0 => None,\n         1 => {\n             let (node_id, _) = finder.registrars.pop().unwrap();\n-            Some(node_id)\n+            Some(tcx.hir().local_def_id(node_id))\n         },\n         _ => {\n+            let diagnostic = tcx.sess.diagnostic();\n             let mut e = diagnostic.struct_err(\"multiple plugin registration functions found\");\n             for &(_, span) in &finder.registrars {\n                 e.span_note(span, \"one is here\");\n@@ -55,3 +62,11 @@ pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n         }\n     }\n }\n+\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        plugin_registrar_fn,\n+        ..*providers\n+    };\n+}"}]}