{"sha": "95fac99a2036a0120be26262110a1e473a85950d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZmFjOTlhMjAzNmEwMTIwYmUyNjI2MjExMGExZTQ3M2E4NTk1MGQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-21T17:17:00Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-22T14:54:08Z"}, "message": "Add some doc comments to SortedMap.", "tree": {"sha": "80f55b97b38ea7de1e3f94da2e00a955d76210a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f55b97b38ea7de1e3f94da2e00a955d76210a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95fac99a2036a0120be26262110a1e473a85950d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95fac99a2036a0120be26262110a1e473a85950d", "html_url": "https://github.com/rust-lang/rust/commit/95fac99a2036a0120be26262110a1e473a85950d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95fac99a2036a0120be26262110a1e473a85950d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bedc314597c20cbaf68ac094e42ba569fcc8973", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bedc314597c20cbaf68ac094e42ba569fcc8973", "html_url": "https://github.com/rust-lang/rust/commit/4bedc314597c20cbaf68ac094e42ba569fcc8973"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "e14bd33c82c1a56610380a23190ad61e11491e52", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/95fac99a2036a0120be26262110a1e473a85950d/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fac99a2036a0120be26262110a1e473a85950d/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=95fac99a2036a0120be26262110a1e473a85950d", "patch": "@@ -14,7 +14,15 @@ use std::convert::From;\n use std::mem;\n use std::ops::{RangeBounds, Bound, Index, IndexMut};\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+/// `SortedMap` is a data structure with similar characteristics as BTreeMap but\n+/// slightly different trade-offs: lookup, inseration, and removal are O(log(N))\n+/// and elements can be iterated in order cheaply.\n+///\n+/// `SortedMap` can be faster than a `BTreeMap` for small sizes (<50) since it\n+/// stores data in a more compact way. It also supports accessing contiguous\n+/// ranges of elements as a slice, and slices of already sorted elements can be\n+/// inserted efficiently.\n+#[derive(Clone, PartialEq, Eq, Hash, Default, Debug, RustcEncodable, RustcDecodable)]\n pub struct SortedMap<K: Ord, V> {\n     data: Vec<(K,V)>\n }\n@@ -28,8 +36,11 @@ impl<K: Ord, V> SortedMap<K, V> {\n         }\n     }\n \n-    // It is up to the caller to make sure that the elements are sorted by key\n-    // and that there are no duplicates.\n+    /// Construct a `SortedMap` from a presorted set of elements. This is faster\n+    /// than creating an empty map and then inserting the elements individually.\n+    ///\n+    /// It is up to the caller to make sure that the elements are sorted by key\n+    /// and that there are no duplicates.\n     #[inline]\n     pub fn from_presorted_elements(elements: Vec<(K, V)>) -> SortedMap<K, V>\n     {\n@@ -150,8 +161,12 @@ impl<K: Ord, V> SortedMap<K, V> {\n         self.data.iter_mut().map(|&mut (ref mut k, _)| k).for_each(f);\n     }\n \n-    // It is up to the caller to make sure that the elements are sorted by key\n-    // and that there are no duplicates.\n+    /// Inserts a presorted range of elements into the map. If the range can be\n+    /// inserted as a whole in between to existing elements of the map, this\n+    /// will be faster than inserting the elements individually.\n+    ///\n+    /// It is up to the caller to make sure that the elements are sorted by key\n+    /// and that there are no duplicates.\n     #[inline]\n     pub fn insert_presorted(&mut self, mut elements: Vec<(K, V)>) {\n         if elements.is_empty() {"}]}