{"sha": "7b8693eff85d39d7b836fa45cdcf30507d7f8731", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiODY5M2VmZjg1ZDM5ZDdiODM2ZmE0NWNkY2YzMDUwN2Q3Zjg3MzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-27T18:59:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-15T11:57:59Z"}, "message": "all memory behind a constant must be immutable", "tree": {"sha": "6b3a5e0f8e5b194b9341f4de431440700c2bba50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b3a5e0f8e5b194b9341f4de431440700c2bba50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b8693eff85d39d7b836fa45cdcf30507d7f8731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b8693eff85d39d7b836fa45cdcf30507d7f8731", "html_url": "https://github.com/rust-lang/rust/commit/7b8693eff85d39d7b836fa45cdcf30507d7f8731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b8693eff85d39d7b836fa45cdcf30507d7f8731/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613769193397374485485fed2d9ba3ea2eee5077", "url": "https://api.github.com/repos/rust-lang/rust/commits/613769193397374485485fed2d9ba3ea2eee5077", "html_url": "https://github.com/rust-lang/rust/commit/613769193397374485485fed2d9ba3ea2eee5077"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "6333fce2c47f25c591a85b03e36513f623e4c848", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b8693eff85d39d7b836fa45cdcf30507d7f8731/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8693eff85d39d7b836fa45cdcf30507d7f8731/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=7b8693eff85d39d7b836fa45cdcf30507d7f8731", "patch": "@@ -304,9 +304,14 @@ pub fn intern_const_alloc_recursive(\n \n     let mut todo: Vec<_> = leftover_relocations.iter().cloned().collect();\n     while let Some(alloc_id) = todo.pop() {\n-        if let Some((_, alloc)) = ecx.memory_mut().alloc_map.remove(&alloc_id) {\n+        if let Some((_, mut alloc)) = ecx.memory_mut().alloc_map.remove(&alloc_id) {\n             // We can't call the `intern_shallow` method here, as its logic is tailored to safe\n             // references. So we hand-roll the interning logic here again.\n+            if base_intern_mode != InternMode::Static {\n+                // If it's not a static, it *must* be immutable.\n+                // We cannot have mutable memory inside a constant.\n+                alloc.mutability = Mutability::Immutable;\n+            }\n             let alloc = tcx.intern_const_alloc(alloc);\n             tcx.alloc_map.lock().set_alloc_id_memory(alloc_id, alloc);\n             for &(_, ((), reloc)) in alloc.relocations().iter() {"}, {"sha": "b476e04529a52c86431c41b82b7dddf07b3f5204", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b8693eff85d39d7b836fa45cdcf30507d7f8731/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8693eff85d39d7b836fa45cdcf30507d7f8731/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=7b8693eff85d39d7b836fa45cdcf30507d7f8731", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+\n+#![feature(const_raw_ptr_deref)]\n+#![deny(const_err)]\n+\n+use std::cell::UnsafeCell;\n+\n+// make sure we do not just intern this as mutable\n+const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+\n+const MUTATING_BEHIND_RAW: () = {\n+    // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n+    unsafe {\n+        *MUTABLE_BEHIND_RAW = 99 //~ WARN skipping const checks\n+        //~^ ERROR any use of this value will cause an error\n+        //~^^ tried to modify constant memory\n+    }\n+};\n+\n+fn main() {}"}, {"sha": "507d4823a111d5876863b82d27d11c8d007d8926", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7b8693eff85d39d7b836fa45cdcf30507d7f8731/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8693eff85d39d7b836fa45cdcf30507d7f8731/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=7b8693eff85d39d7b836fa45cdcf30507d7f8731", "patch": "@@ -0,0 +1,27 @@\n+warning: skipping const checks\n+  --> $DIR/mutable_const.rs:14:9\n+   |\n+LL |         *MUTABLE_BEHIND_RAW = 99\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: any use of this value will cause an error\n+  --> $DIR/mutable_const.rs:14:9\n+   |\n+LL | / const MUTATING_BEHIND_RAW: () = {\n+LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n+LL | |     unsafe {\n+LL | |         *MUTABLE_BEHIND_RAW = 99\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ tried to modify constant memory\n+...  |\n+LL | |     }\n+LL | | };\n+   | |__-\n+   |\n+note: lint level defined here\n+  --> $DIR/mutable_const.rs:4:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}