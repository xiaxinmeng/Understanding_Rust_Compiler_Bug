{"sha": "5a8edc0b7607b997dd926b5d882cd39000386cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOGVkYzBiNzYwN2I5OTdkZDkyNmI1ZDg4MmNkMzkwMDAzODZjZGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-11-21T10:45:13Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-19T21:28:24Z"}, "message": "cleanup: extract a helper for coercion from inference variables", "tree": {"sha": "9403e68ddc795ffead57a23995637d8943e69a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9403e68ddc795ffead57a23995637d8943e69a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a8edc0b7607b997dd926b5d882cd39000386cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8edc0b7607b997dd926b5d882cd39000386cdc", "html_url": "https://github.com/rust-lang/rust/commit/5a8edc0b7607b997dd926b5d882cd39000386cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a8edc0b7607b997dd926b5d882cd39000386cdc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eca626e4025fc4f4695aeba03cd60b344001378", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eca626e4025fc4f4695aeba03cd60b344001378", "html_url": "https://github.com/rust-lang/rust/commit/5eca626e4025fc4f4695aeba03cd60b344001378"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "7e03ef18144029cae2c65cba0e42c910dc12a347", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a8edc0b7607b997dd926b5d882cd39000386cdc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8edc0b7607b997dd926b5d882cd39000386cdc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5a8edc0b7607b997dd926b5d882cd39000386cdc", "patch": "@@ -146,6 +146,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     }\n \n     fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {\n+        // First, remove any resolved type variables (at the top level, at least):\n         let a = self.shallow_resolve(a);\n         let b = self.shallow_resolve(b);\n         debug!(\"Coerce.tys({:?} => {:?})\", a, b);\n@@ -155,6 +156,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             return success(vec![], self.fcx.tcx.ty_error(), vec![]);\n         }\n \n+        // Coercing from `!` to any type is allowed:\n         if a.is_never() {\n             // Subtle: If we are coercing from `!` to `?T`, where `?T` is an unbound\n             // type variable, we want `?T` to fallback to `!` if not\n@@ -176,6 +178,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             };\n         }\n \n+        // Coercing *from* an unresolved inference variable means that\n+        // we have no information about the source type. This will always\n+        // ultimately fall back to some form of subtyping.\n+        if a.is_ty_var() {\n+            return self.coerce_from_inference_variable(a, b);\n+        }\n+\n         // Consider coercing the subtype to a DST\n         //\n         // NOTE: this is wrapped in a `commit_if_ok` because it creates\n@@ -233,6 +242,16 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n     }\n \n+    /// Coercing *from* an inference variable. In this case, we have no information\n+    /// about the source type, so we can't really do a true coercion and we always\n+    /// fall back to subtyping (`unify_and`).\n+    fn coerce_from_inference_variable(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {\n+        assert!(a.is_ty_var() && self.infcx.shallow_resolve(a) == a);\n+        assert!(self.infcx.shallow_resolve(b) == b);\n+\n+        self.unify_and(a, b, identity)\n+    }\n+\n     /// Reborrows `&mut A` to `&mut B` and `&(mut) A` to `&B`.\n     /// To match `A` with `B`, autoderef will be performed,\n     /// calling `deref`/`deref_mut` where necessary."}]}