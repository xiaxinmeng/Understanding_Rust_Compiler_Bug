{"sha": "33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZWY3OGZhOGJiZTliOGQwNWJhMGRhNjA3ZDRkYTVlMzE0NzVhOTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-31T09:41:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-05T14:15:28Z"}, "message": "Add impls of the comparison operators for fixed-length arrays of lengths 0...32 and repair various cases where slices and fixed-length arrays were being compared.", "tree": {"sha": "774228e56b93cc095456f45929824f2c667b11cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/774228e56b93cc095456f45929824f2c667b11cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "html_url": "https://github.com/rust-lang/rust/commit/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af52eee59ff25a7f636798bdbc3f1bec985828f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af52eee59ff25a7f636798bdbc3f1bec985828f", "html_url": "https://github.com/rust-lang/rust/commit/4af52eee59ff25a7f636798bdbc3f1bec985828f"}], "stats": {"total": 113, "additions": 102, "deletions": 11}, "files": [{"sha": "eb4ff345b5133614d5f0111c270f17e3e6de7bbe", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "patch": "@@ -1598,15 +1598,15 @@ mod tests {\n     #[test]\n     fn test_total_ord() {\n         let c: &[int] = &[1, 2, 3];\n-        [1, 2, 3, 4].cmp(& c) == Greater;\n+        [1, 2, 3, 4][].cmp(& c) == Greater;\n         let c: &[int] = &[1, 2, 3, 4];\n-        [1, 2, 3].cmp(& c) == Less;\n+        [1, 2, 3][].cmp(& c) == Less;\n         let c: &[int] = &[1, 2, 3, 6];\n-        [1, 2, 3, 4].cmp(& c) == Equal;\n+        [1, 2, 3, 4][].cmp(& c) == Equal;\n         let c: &[int] = &[1, 2, 3, 4, 5, 6];\n-        [1, 2, 3, 4, 5, 5, 5, 5].cmp(& c) == Less;\n+        [1, 2, 3, 4, 5, 5, 5, 5][].cmp(& c) == Less;\n         let c: &[int] = &[1, 2, 3, 4];\n-        [2, 2].cmp(& c) == Greater;\n+        [2, 2][].cmp(& c) == Greater;\n     }\n \n     #[test]\n@@ -1980,15 +1980,15 @@ mod tests {\n             let (left, right) = values.split_at_mut(2);\n             {\n                 let left: &[_] = left;\n-                assert!(left[0..left.len()] == [1, 2]);\n+                assert!(left[0..left.len()] == [1, 2][]);\n             }\n             for p in left.iter_mut() {\n                 *p += 1;\n             }\n \n             {\n                 let right: &[_] = right;\n-                assert!(right[0..right.len()] == [3, 4, 5]);\n+                assert!(right[0..right.len()] == [3, 4, 5][]);\n             }\n             for p in right.iter_mut() {\n                 *p += 2;"}, {"sha": "40e7c949972b53483486100fe25179e5a0497e3c", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "patch": "@@ -1800,15 +1800,15 @@ mod tests {\n             let (left, right) = values.split_at_mut(2);\n             {\n                 let left: &[_] = left;\n-                assert!(left[0..left.len()] == [1, 2]);\n+                assert!(left[0..left.len()] == [1, 2][]);\n             }\n             for p in left.iter_mut() {\n                 *p += 1;\n             }\n \n             {\n                 let right: &[_] = right;\n-                assert!(right[0..right.len()] == [3, 4, 5]);\n+                assert!(right[0..right.len()] == [3, 4, 5][]);\n             }\n             for p in right.iter_mut() {\n                 *p += 2;\n@@ -1863,7 +1863,7 @@ mod tests {\n     #[test]\n     fn test_retain() {\n         let mut vec = vec![1u, 2, 3, 4];\n-        vec.retain(|x| x%2 == 0);\n+        vec.retain(|&x| x % 2 == 0);\n         assert!(vec == vec![2u, 4]);\n     }\n "}, {"sha": "999574b4d7d52318282083338392d7df0af42dec", "filename": "src/libcore/array.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "patch": "@@ -0,0 +1,87 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+ * Implementations of things like `Eq` for fixed-length arrays\n+ * up to a certain length. Eventually we should able to generalize\n+ * to all lengths.\n+ */\n+\n+#![doc(primitive = \"tuple\")]\n+#![stable]\n+\n+#[unstable = \"this is just a documentation module and should not be part \\\n+              of the public api\"]\n+pub use unit;\n+\n+use cmp::*;\n+use option::{Option};\n+\n+// macro for implementing n-ary tuple functions and operations\n+macro_rules! array_impls {\n+    ($($N:expr)+) => {\n+        $(\n+            #[unstable = \"waiting for PartialEq to stabilize\"]\n+            impl<T:PartialEq> PartialEq for [T, ..$N] {\n+                #[inline]\n+                fn eq(&self, other: &[T, ..$N]) -> bool {\n+                    self[] == other[]\n+                }\n+                #[inline]\n+                fn ne(&self, other: &[T, ..$N]) -> bool {\n+                    self[] != other[]\n+                }\n+            }\n+\n+            #[unstable = \"waiting for Eq to stabilize\"]\n+            impl<T:Eq> Eq for [T, ..$N] { }\n+\n+            #[unstable = \"waiting for PartialOrd to stabilize\"]\n+            impl<T:PartialOrd> PartialOrd for [T, ..$N] {\n+                #[inline]\n+                fn partial_cmp(&self, other: &[T, ..$N]) -> Option<Ordering> {\n+                    PartialOrd::partial_cmp(&self[], &other[])\n+                }\n+                #[inline]\n+                fn lt(&self, other: &[T, ..$N]) -> bool {\n+                    PartialOrd::lt(&self[], &other[])\n+                }\n+                #[inline]\n+                fn le(&self, other: &[T, ..$N]) -> bool {\n+                    PartialOrd::le(&self[], &other[])\n+                }\n+                #[inline]\n+                fn ge(&self, other: &[T, ..$N]) -> bool {\n+                    PartialOrd::ge(&self[], &other[])\n+                }\n+                #[inline]\n+                fn gt(&self, other: &[T, ..$N]) -> bool {\n+                    PartialOrd::gt(&self[], &other[])\n+                }\n+            }\n+\n+            #[unstable = \"waiting for Ord to stabilize\"]\n+            impl<T:Ord> Ord for [T, ..$N] {\n+                #[inline]\n+                fn cmp(&self, other: &[T, ..$N]) -> Ordering {\n+                    Ord::cmp(&self[], &other[])\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+array_impls! {\n+     0  1  2  3  4  5  6  7  8  9\n+    10 11 12 13 14 15 16 17 18 19\n+    20 21 22 23 24 25 26 27 28 29\n+    30 31 32\n+}\n+"}, {"sha": "d9a0c398605e112afb0e3df019e30af8487f5ed5", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "patch": "@@ -126,6 +126,10 @@ pub mod tuple;\n pub mod unit;\n pub mod fmt;\n \n+// note: does not need to be public\n+#[cfg(not(stage0))]\n+mod array;\n+\n #[doc(hidden)]\n mod core {\n     pub use panicking;"}, {"sha": "688036d22dd6e583573b468c875969b714f670c9", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ef78fa8bbe9b8d05ba0da607d4da5e31475a95/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=33ef78fa8bbe9b8d05ba0da607d4da5e31475a95", "patch": "@@ -792,7 +792,7 @@ mod test_set {\n         };\n \n         let v = hs.into_iter().collect::<Vec<char>>();\n-        assert!(['a', 'b'] == v.as_slice() || ['b', 'a'] == v.as_slice());\n+        assert!(['a', 'b'][] == v.as_slice() || ['b', 'a'][] == v.as_slice());\n     }\n \n     #[test]"}]}