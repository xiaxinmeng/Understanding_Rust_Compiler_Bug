{"sha": "26e102a567aadcf86f2e5b575cb6b915991ba088", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTEwMmE1NjdhYWRjZjg2ZjJlNWI1NzVjYjZiOTE1OTkxYmEwODg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-07-27T12:53:57Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T12:09:08Z"}, "message": "Separate diagnostics and diagnostics fix ranges", "tree": {"sha": "2075de8433e6f99ee79849724cb402cf232d8426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2075de8433e6f99ee79849724cb402cf232d8426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e102a567aadcf86f2e5b575cb6b915991ba088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e102a567aadcf86f2e5b575cb6b915991ba088", "html_url": "https://github.com/rust-lang/rust/commit/26e102a567aadcf86f2e5b575cb6b915991ba088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e102a567aadcf86f2e5b575cb6b915991ba088/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0de2475208765a171f335dfffde764f96243d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0de2475208765a171f335dfffde764f96243d41", "html_url": "https://github.com/rust-lang/rust/commit/e0de2475208765a171f335dfffde764f96243d41"}], "stats": {"total": 106, "additions": 59, "deletions": 47}, "files": [{"sha": "5c8ea46abb160ae6b5e889f2455838f20d8bec91", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 43, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/26e102a567aadcf86f2e5b575cb6b915991ba088/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e102a567aadcf86f2e5b575cb6b915991ba088/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=26e102a567aadcf86f2e5b575cb6b915991ba088", "patch": "@@ -60,14 +60,16 @@ pub(crate) fn diagnostics(\n                 FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }\n                     .into(),\n             );\n+            let range = sema.diagnostics_range(d).range;\n             res.borrow_mut().push(Diagnostic {\n-                range: sema.diagnostics_range(d).range,\n+                range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: Some(fix),\n+                fix: Some((fix, range)),\n             })\n         })\n         .on::<hir::diagnostics::MissingFields, _>(|d| {\n+            let range = sema.diagnostics_range(d).range;\n             // Note that although we could add a diagnostics to\n             // fill the missing tuple field, e.g :\n             // `struct A(usize);`\n@@ -91,11 +93,15 @@ pub(crate) fn diagnostics(\n                         .into_text_edit(&mut builder);\n                     builder.finish()\n                 };\n-                Some(Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()))\n+                Some((\n+                    Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()),\n+                    range,\n+                ))\n             };\n \n             res.borrow_mut().push(Diagnostic {\n-                range: sema.diagnostics_range(d).range,\n+                // TODO kb use a smaller range here\n+                range,\n                 message: d.message(),\n                 severity: Severity::Error,\n                 fix,\n@@ -106,20 +112,21 @@ pub(crate) fn diagnostics(\n             let replacement = format!(\"Ok({})\", node.syntax());\n             let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n             let source_change = SourceFileEdit { file_id, edit }.into();\n-            let fix = Fix::new(\"Wrap with ok\", source_change);\n+            let range = sema.diagnostics_range(d).range;\n             res.borrow_mut().push(Diagnostic {\n-                range: sema.diagnostics_range(d).range,\n+                range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: Some(fix),\n+                fix: Some((Fix::new(\"Wrap with ok\", source_change), range)),\n             })\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n+            let range = sema.diagnostics_range(d).range;\n             res.borrow_mut().push(Diagnostic {\n-                range: sema.diagnostics_range(d).range,\n+                range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: missing_struct_field_fix(&sema, file_id, d),\n+                fix: missing_struct_field_fix(&sema, file_id, d).map(|fix| (fix, range)),\n             })\n         })\n         // Only collect experimental diagnostics when they're enabled.\n@@ -222,24 +229,24 @@ fn check_unnecessary_braces_in_use_statement(\n ) -> Option<()> {\n     let use_tree_list = ast::UseTreeList::cast(node.clone())?;\n     if let Some((single_use_tree,)) = use_tree_list.use_trees().collect_tuple() {\n-        let range = use_tree_list.syntax().text_range();\n+        let use_range = use_tree_list.syntax().text_range();\n         let edit =\n             text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(&single_use_tree)\n                 .unwrap_or_else(|| {\n                     let to_replace = single_use_tree.syntax().text().to_string();\n                     let mut edit_builder = TextEditBuilder::default();\n-                    edit_builder.delete(range);\n-                    edit_builder.insert(range.start(), to_replace);\n+                    edit_builder.delete(use_range);\n+                    edit_builder.insert(use_range.start(), to_replace);\n                     edit_builder.finish()\n                 });\n \n         acc.push(Diagnostic {\n-            range,\n+            range: use_range,\n             message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n-            fix: Some(Fix::new(\n-                \"Remove unnecessary braces\",\n-                SourceFileEdit { file_id, edit }.into(),\n+            fix: Some((\n+                Fix::new(\"Remove unnecessary braces\", SourceFileEdit { file_id, edit }.into()),\n+                use_range,\n             )),\n         });\n     }\n@@ -254,8 +261,7 @@ fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n     if single_use_tree.path()?.segment()?.syntax().first_child_or_token()?.kind() == T![self] {\n         let start = use_tree_list_node.prev_sibling_or_token()?.text_range().start();\n         let end = use_tree_list_node.text_range().end();\n-        let range = TextRange::new(start, end);\n-        return Some(TextEdit::delete(range));\n+        return Some(TextEdit::delete(TextRange::new(start, end)));\n     }\n     None\n }\n@@ -278,13 +284,17 @@ fn check_struct_shorthand_initialization(\n                 edit_builder.insert(record_field.syntax().text_range().start(), field_name);\n                 let edit = edit_builder.finish();\n \n+                let field_range = record_field.syntax().text_range();\n                 acc.push(Diagnostic {\n-                    range: record_field.syntax().text_range(),\n+                    range: field_range,\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n-                    fix: Some(Fix::new(\n-                        \"Use struct shorthand initialization\",\n-                        SourceFileEdit { file_id, edit }.into(),\n+                    fix: Some((\n+                        Fix::new(\n+                            \"Use struct shorthand initialization\",\n+                            SourceFileEdit { file_id, edit }.into(),\n+                        ),\n+                        field_range,\n                     )),\n                 });\n             }\n@@ -304,14 +314,14 @@ mod tests {\n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n     ///  * a diagnostic is produced\n-    ///  * this diagnostic touches the input cursor position\n+    ///  * this diagnostic fix touches the input cursor position\n     ///  * that the contents of the file containing the cursor match `after` after the diagnostic fix is applied\n     fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n         let diagnostic = analysis.diagnostics(file_position.file_id, true).unwrap().pop().unwrap();\n-        let mut fix = diagnostic.fix.unwrap();\n+        let (mut fix, fix_range) = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n         let actual = {\n@@ -322,10 +332,9 @@ mod tests {\n \n         assert_eq_text!(&after, &actual);\n         assert!(\n-            diagnostic.range.start() <= file_position.offset\n-                && diagnostic.range.end() >= file_position.offset,\n-            \"diagnostic range {:?} does not touch cursor position {:?}\",\n-            diagnostic.range,\n+            fix_range.start() <= file_position.offset && fix_range.end() >= file_position.offset,\n+            \"diagnostic fix range {:?} does not touch cursor position {:?}\",\n+            fix_range,\n             file_position.offset\n         );\n     }\n@@ -337,7 +346,7 @@ mod tests {\n         let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n         let diagnostic = analysis.diagnostics(current_file_id, true).unwrap().pop().unwrap();\n-        let mut fix = diagnostic.fix.unwrap();\n+        let mut fix = diagnostic.fix.unwrap().0;\n         let edit = fix.source_change.source_file_edits.pop().unwrap();\n         let changed_file_id = edit.file_id;\n         let before = analysis.file_text(changed_file_id).unwrap();\n@@ -628,21 +637,24 @@ fn test_fn() {\n                         range: 0..8,\n                         severity: Error,\n                         fix: Some(\n-                            Fix {\n-                                label: \"Create module\",\n-                                source_change: SourceChange {\n-                                    source_file_edits: [],\n-                                    file_system_edits: [\n-                                        CreateFile {\n-                                            anchor: FileId(\n-                                                1,\n-                                            ),\n-                                            dst: \"foo.rs\",\n-                                        },\n-                                    ],\n-                                    is_snippet: false,\n+                            (\n+                                Fix {\n+                                    label: \"Create module\",\n+                                    source_change: SourceChange {\n+                                        source_file_edits: [],\n+                                        file_system_edits: [\n+                                            CreateFile {\n+                                                anchor: FileId(\n+                                                    1,\n+                                                ),\n+                                                dst: \"foo.rs\",\n+                                            },\n+                                        ],\n+                                        is_snippet: false,\n+                                    },\n                                 },\n-                            },\n+                                0..8,\n+                            ),\n                         ),\n                     },\n                 ]"}, {"sha": "45a4b2421e73ec8d9918cd33909f1485dfabfa94", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e102a567aadcf86f2e5b575cb6b915991ba088/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e102a567aadcf86f2e5b575cb6b915991ba088/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=26e102a567aadcf86f2e5b575cb6b915991ba088", "patch": "@@ -105,7 +105,7 @@ pub struct Diagnostic {\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n-    pub fix: Option<Fix>,\n+    pub fix: Option<(Fix, TextRange)>,\n }\n \n #[derive(Debug)]"}, {"sha": "144c641b2a8987cf3774aa6a199eb33b3d94d99c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26e102a567aadcf86f2e5b575cb6b915991ba088/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e102a567aadcf86f2e5b575cb6b915991ba088/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=26e102a567aadcf86f2e5b575cb6b915991ba088", "patch": "@@ -775,9 +775,9 @@ fn handle_fixes(\n \n     let fixes_from_diagnostics = diagnostics\n         .into_iter()\n-        .filter_map(|d| Some((d.range, d.fix?)))\n-        .filter(|(diag_range, _fix)| diag_range.intersect(range).is_some())\n-        .map(|(_range, fix)| fix);\n+        .filter_map(|d| d.fix)\n+        .filter(|(_fix, fix_range)| fix_range.intersect(range).is_some())\n+        .map(|(fix, _range)| fix);\n     for fix in fixes_from_diagnostics {\n         let title = fix.label;\n         let edit = to_proto::snippet_workspace_edit(&snap, fix.source_change)?;"}]}