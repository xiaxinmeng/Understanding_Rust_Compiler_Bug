{"sha": "7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNTBhNGVhZDdlZTRiZTU0ZWM0NThjOTJiMWM4Mjc0YzgxMjNmOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-21T14:23:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-21T14:23:25Z"}, "message": "Auto merge of #6408 - pro-grammer1:master, r=oli-obk\n\nFix false positive in write_literal and print_literal (numeric literals)\n\nchangelog: No longer lint numeric literals in [`write_literal`] and [`print_literal`].\n\nFixes #6335", "tree": {"sha": "8969705c6015f04b7045f1b8fae21db4366c7f26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8969705c6015f04b7045f1b8fae21db4366c7f26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "html_url": "https://github.com/rust-lang/rust/commit/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d13a5a4b77ea543850a216a0ad8453ebade3cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d13a5a4b77ea543850a216a0ad8453ebade3cd", "html_url": "https://github.com/rust-lang/rust/commit/16d13a5a4b77ea543850a216a0ad8453ebade3cd"}, {"sha": "32b2a3f944f9889fd7c5fcfb7976430d1aeb7ed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b2a3f944f9889fd7c5fcfb7976430d1aeb7ed4", "html_url": "https://github.com/rust-lang/rust/commit/32b2a3f944f9889fd7c5fcfb7976430d1aeb7ed4"}], "stats": {"total": 84, "additions": 26, "deletions": 58}, "files": [{"sha": "6358104eedad126d94592276ce2b71c596c6f891", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "patch": "@@ -2,7 +2,8 @@ use std::borrow::Cow;\n use std::ops::Range;\n \n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then};\n-use rustc_ast::ast::{Expr, ExprKind, Item, ItemKind, MacCall, StrLit, StrStyle};\n+use if_chain::if_chain;\n+use rustc_ast::ast::{Expr, ExprKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle};\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n@@ -437,7 +438,7 @@ impl Write {\n                 return (Some(fmtstr), None);\n             };\n             match &token_expr.kind {\n-                ExprKind::Lit(_) => {\n+                ExprKind::Lit(lit) if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) => {\n                     let mut all_simple = true;\n                     let mut seen = false;\n                     for arg in &args {\n@@ -457,8 +458,11 @@ impl Write {\n                     idx += 1;\n                 },\n                 ExprKind::Assign(lhs, rhs, _) => {\n-                    if let ExprKind::Lit(_) = rhs.kind {\n-                        if let ExprKind::Path(_, p) = &lhs.kind {\n+                    if_chain! {\n+                        if let ExprKind::Lit(ref lit) = rhs.kind;\n+                        if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..));\n+                        if let ExprKind::Path(_, p) = &lhs.kind;\n+                        then {\n                             let mut all_simple = true;\n                             let mut seen = false;\n                             for arg in &args {"}, {"sha": "8665a3bb28ae19b9eca30b426e4faf20ff47a6cc", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "patch": "@@ -17,14 +17,14 @@ fn main() {\n     println!(\"{bar:8} {foo:>8}\", foo = \"hello\", bar = \"world\");\n     println!(\"{number:>width$}\", number = 1, width = 6);\n     println!(\"{number:>0width$}\", number = 1, width = 6);\n+    println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+    println!(\"10 / 4 is {}\", 2.5);\n+    println!(\"2 + 1 = {}\", 3);\n \n     // these should throw warnings\n-    println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     print!(\"Hello {}\", \"world\");\n     println!(\"Hello {} {}\", world, \"world\");\n     println!(\"Hello {}\", \"world\");\n-    println!(\"10 / 4 is {}\", 2.5);\n-    println!(\"2 + 1 = {}\", 3);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "e284aece236faa4462e4b288ead9799735528d6e", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "patch": "@@ -1,41 +1,23 @@\n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:22:71\n-   |\n-LL |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n-   |                                                                       ^\n-   |\n-   = note: `-D clippy::print-literal` implied by `-D warnings`\n-\n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:23:24\n+  --> $DIR/print_literal.rs:25:24\n    |\n LL |     print!(\"Hello {}\", \"world\");\n    |                        ^^^^^^^\n+   |\n+   = note: `-D clippy::print-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:24:36\n+  --> $DIR/print_literal.rs:26:36\n    |\n LL |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:25:26\n+  --> $DIR/print_literal.rs:27:26\n    |\n LL |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n \n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:26:30\n-   |\n-LL |     println!(\"10 / 4 is {}\", 2.5);\n-   |                              ^^^\n-\n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:27:28\n-   |\n-LL |     println!(\"2 + 1 = {}\", 3);\n-   |                            ^\n-\n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:25\n    |\n@@ -84,5 +66,5 @@ error: literal with an empty format string\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                                  ^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "0a127858defdfefe997701fa396f34fcbfadeabf", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "patch": "@@ -22,14 +22,14 @@ fn main() {\n     writeln!(&mut v, \"{bar:8} {foo:>8}\", foo = \"hello\", bar = \"world\");\n     writeln!(&mut v, \"{number:>width$}\", number = 1, width = 6);\n     writeln!(&mut v, \"{number:>0width$}\", number = 1, width = 6);\n+    writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+    writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n+    writeln!(&mut v, \"2 + 1 = {}\", 3);\n \n     // these should throw warnings\n-    writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     write!(&mut v, \"Hello {}\", \"world\");\n     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n     writeln!(&mut v, \"Hello {}\", \"world\");\n-    writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n-    writeln!(&mut v, \"2 + 1 = {}\", 3);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "e54d89ecf29e67ded79b647991050b226b7d4234", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b50a4ead7ee4be54ec458c92b1c8274c8123f9f/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=7b50a4ead7ee4be54ec458c92b1c8274c8123f9f", "patch": "@@ -1,41 +1,23 @@\n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:27:79\n-   |\n-LL |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n-   |                                                                               ^\n-   |\n-   = note: `-D clippy::write-literal` implied by `-D warnings`\n-\n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:28:32\n+  --> $DIR/write_literal.rs:30:32\n    |\n LL |     write!(&mut v, \"Hello {}\", \"world\");\n    |                                ^^^^^^^\n+   |\n+   = note: `-D clippy::write-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:29:44\n+  --> $DIR/write_literal.rs:31:44\n    |\n LL |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n    |                                            ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:30:34\n+  --> $DIR/write_literal.rs:32:34\n    |\n LL |     writeln!(&mut v, \"Hello {}\", \"world\");\n    |                                  ^^^^^^^\n \n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:31:38\n-   |\n-LL |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n-   |                                      ^^^\n-\n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:32:36\n-   |\n-LL |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n-   |                                    ^\n-\n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:33\n    |\n@@ -84,5 +66,5 @@ error: literal with an empty format string\n LL |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                                          ^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 11 previous errors\n "}]}