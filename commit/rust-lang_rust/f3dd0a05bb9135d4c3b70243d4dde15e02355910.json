{"sha": "f3dd0a05bb9135d4c3b70243d4dde15e02355910", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZGQwYTA1YmI5MTM1ZDRjM2I3MDI0M2Q0ZGRlMTVlMDIzNTU5MTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-11T17:36:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-11T17:36:12Z"}, "message": "Return early, return often", "tree": {"sha": "5a3715910dbe92240f07bd1fc470f633ea4d267b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3715910dbe92240f07bd1fc470f633ea4d267b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3dd0a05bb9135d4c3b70243d4dde15e02355910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dd0a05bb9135d4c3b70243d4dde15e02355910", "html_url": "https://github.com/rust-lang/rust/commit/f3dd0a05bb9135d4c3b70243d4dde15e02355910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3dd0a05bb9135d4c3b70243d4dde15e02355910/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adfed5c6894602159ca76dd14d9ed26d76c1cc1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/adfed5c6894602159ca76dd14d9ed26d76c1cc1b", "html_url": "https://github.com/rust-lang/rust/commit/adfed5c6894602159ca76dd14d9ed26d76c1cc1b"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "01fb32b3dfd8b9cc59a23d9e807e862aee01800f", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f3dd0a05bb9135d4c3b70243d4dde15e02355910/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dd0a05bb9135d4c3b70243d4dde15e02355910/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=f3dd0a05bb9135d4c3b70243d4dde15e02355910", "patch": "@@ -66,7 +66,9 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n     if is_trailing_comma(prev.kind(), next.kind()) {\n         // Removes: trailing comma, newline (incl. surrounding whitespace)\n         edit.delete(TextRange::from_to(prev.text_range().start(), token.text_range().end()));\n-    } else if prev.kind() == T![,] && next.kind() == T!['}'] {\n+        return;\n+    }\n+    if prev.kind() == T![,] && next.kind() == T!['}'] {\n         // Removes: comma, newline (incl. surrounding whitespace)\n         let space = if let Some(left) = prev.prev_sibling_or_token() {\n             compute_ws(left.kind(), next.kind())\n@@ -77,7 +79,10 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n             TextRange::from_to(prev.text_range().start(), token.text_range().end()),\n             space.to_string(),\n         );\n-    } else if let (Some(_), Some(next)) = (\n+        return;\n+    }\n+\n+    if let (Some(_), Some(next)) = (\n         prev.as_token().cloned().and_then(ast::Comment::cast),\n         next.as_token().cloned().and_then(ast::Comment::cast),\n     ) {\n@@ -86,33 +91,34 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n             token.text_range().start(),\n             next.syntax().text_range().start() + TextUnit::of_str(next.prefix()),\n         ));\n-    } else {\n-        // Special case that turns something like:\n-        //\n-        // ```\n-        // my_function({<|>\n-        //    <some-expr>\n-        // })\n-        // ```\n-        //\n-        // into `my_function(<some-expr>)`\n-        if join_single_expr_block(edit, token).is_some() {\n-            return;\n-        }\n-        // ditto for\n-        //\n-        // ```\n-        // use foo::{<|>\n-        //    bar\n-        // };\n-        // ```\n-        if join_single_use_tree(edit, token).is_some() {\n-            return;\n-        }\n+        return;\n+    }\n \n-        // Remove newline but add a computed amount of whitespace characters\n-        edit.replace(token.text_range(), compute_ws(prev.kind(), next.kind()).to_string());\n+    // Special case that turns something like:\n+    //\n+    // ```\n+    // my_function({<|>\n+    //    <some-expr>\n+    // })\n+    // ```\n+    //\n+    // into `my_function(<some-expr>)`\n+    if join_single_expr_block(edit, token).is_some() {\n+        return;\n     }\n+    // ditto for\n+    //\n+    // ```\n+    // use foo::{<|>\n+    //    bar\n+    // };\n+    // ```\n+    if join_single_use_tree(edit, token).is_some() {\n+        return;\n+    }\n+\n+    // Remove newline but add a computed amount of whitespace characters\n+    edit.replace(token.text_range(), compute_ws(prev.kind(), next.kind()).to_string());\n }\n \n fn has_comma_after(node: &SyntaxNode) -> bool {"}]}