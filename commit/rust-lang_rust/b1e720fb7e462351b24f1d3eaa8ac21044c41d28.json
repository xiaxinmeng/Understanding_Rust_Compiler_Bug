{"sha": "b1e720fb7e462351b24f1d3eaa8ac21044c41d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZTcyMGZiN2U0NjIzNTFiMjRmMWQzZWFhOGFjMjEwNDRjNDFkMjg=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-25T06:16:50Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-25T13:41:55Z"}, "message": "Make HashMap::take not corrupt the map. Fixes #19292", "tree": {"sha": "a7f55a9109adb6f8fdd7e39a3016b20e8a78a4bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f55a9109adb6f8fdd7e39a3016b20e8a78a4bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1e720fb7e462351b24f1d3eaa8ac21044c41d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e720fb7e462351b24f1d3eaa8ac21044c41d28", "html_url": "https://github.com/rust-lang/rust/commit/b1e720fb7e462351b24f1d3eaa8ac21044c41d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1e720fb7e462351b24f1d3eaa8ac21044c41d28/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4389ee3893c82fc2b6b33eeb5555cc1744f6da4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4389ee3893c82fc2b6b33eeb5555cc1744f6da4a", "html_url": "https://github.com/rust-lang/rust/commit/4389ee3893c82fc2b6b33eeb5555cc1744f6da4a"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "d34e99187c236a682af49681fa9c2e5f6a6c7053", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b1e720fb7e462351b24f1d3eaa8ac21044c41d28/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e720fb7e462351b24f1d3eaa8ac21044c41d28/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b1e720fb7e462351b24f1d3eaa8ac21044c41d28", "patch": "@@ -1376,7 +1376,7 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n \n     /// Takes the value out of the entry, and returns it\n     pub fn take(self) -> V {\n-        let (_, _, v) = self.elem.take();\n+        let (_, v) = pop_internal(self.elem);\n         v\n     }\n }\n@@ -1433,6 +1433,7 @@ mod test_map {\n     use hash;\n     use iter::{Iterator,range_inclusive,range_step_inclusive};\n     use cell::RefCell;\n+    use rand::{weak_rng, Rng};\n \n     struct KindaIntLike(int);\n \n@@ -2062,4 +2063,37 @@ mod test_map {\n         assert_eq!(map.get(&10).unwrap(), &1000);\n         assert_eq!(map.len(), 6);\n     }\n+\n+    #[test]\n+    fn test_entry_take_doesnt_corrupt() {\n+        // Test for #19292\n+        fn check(m: &HashMap<int, ()>) {\n+            for k in m.keys() {\n+                assert!(m.contains_key(k),\n+                        \"{} is in keys() but not in the map?\", k);\n+            }\n+        }\n+\n+        let mut m = HashMap::new();\n+        let mut rng = weak_rng();\n+\n+        // Populate the map with some items.\n+        for _ in range(0u, 50) {\n+            let x = rng.gen_range(-10, 10);\n+            m.insert(x, ());\n+        }\n+\n+        for i in range(0u, 1000) {\n+            let x = rng.gen_range(-10, 10);\n+            match m.entry(x) {\n+                Vacant(_) => {},\n+                Occupied(e) => {\n+                    println!(\"{}: remove {}\", i, x);\n+                    e.take();\n+                },\n+            }\n+\n+            check(&m);\n+        }\n+    }\n }"}]}