{"sha": "2300401fb0a44966a2159dd0a69762b18fd89345", "node_id": "C_kwDOAAsO6NoAKDIzMDA0MDFmYjBhNDQ5NjZhMjE1OWRkMGE2OTc2MmIxOGZkODkzNDU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-04-21T02:06:44Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-04-21T02:10:46Z"}, "message": "Remove mutable_borrow_reservation_conflict lint", "tree": {"sha": "0a2e9c7e62a11a15e31c79d840b3874785b9e841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a2e9c7e62a11a15e31c79d840b3874785b9e841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2300401fb0a44966a2159dd0a69762b18fd89345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2300401fb0a44966a2159dd0a69762b18fd89345", "html_url": "https://github.com/rust-lang/rust/commit/2300401fb0a44966a2159dd0a69762b18fd89345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2300401fb0a44966a2159dd0a69762b18fd89345/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febce1fc316f5618d5bb8f05d19e2e3ba868c007", "url": "https://api.github.com/repos/rust-lang/rust/commits/febce1fc316f5618d5bb8f05d19e2e3ba868c007", "html_url": "https://github.com/rust-lang/rust/commit/febce1fc316f5618d5bb8f05d19e2e3ba868c007"}], "stats": {"total": 469, "additions": 89, "deletions": 380}, "files": [{"sha": "7c921b850582362244a89cc297c2179805e3528b", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -167,10 +167,6 @@ impl<'tcx> BorrowSet<'tcx> {\n     crate fn get_index_of(&self, location: &Location) -> Option<BorrowIndex> {\n         self.location_map.get_index_of(location).map(BorrowIndex::from)\n     }\n-\n-    crate fn contains(&self, location: &Location) -> bool {\n-        self.location_map.contains_key(location)\n-    }\n }\n \n struct GatherBorrows<'a, 'tcx> {"}, {"sha": "ee8555e481d3b98d98a5e5759662c8121953eada", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 8, "deletions": 65, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -35,14 +35,13 @@ use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, Stat\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, CapturedPlace, ParamEnv, RegionVid, TyCtxt};\n-use rustc_session::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT, UNUSED_MUT};\n-use rustc_span::{Span, Symbol, DUMMY_SP};\n+use rustc_session::lint::builtin::UNUSED_MUT;\n+use rustc_span::{Span, Symbol};\n \n use either::Either;\n use smallvec::SmallVec;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n-use std::mem;\n use std::rc::Rc;\n \n use rustc_mir_dataflow::impls::{\n@@ -313,7 +312,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 locals_are_invalidated_at_exit,\n                 access_place_error_reported: Default::default(),\n                 reservation_error_reported: Default::default(),\n-                reservation_warnings: Default::default(),\n                 uninitialized_error_reported: Default::default(),\n                 regioncx: regioncx.clone(),\n                 used_mut: Default::default(),\n@@ -345,7 +343,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n         fn_self_span_reported: Default::default(),\n         access_place_error_reported: Default::default(),\n         reservation_error_reported: Default::default(),\n-        reservation_warnings: Default::default(),\n         uninitialized_error_reported: Default::default(),\n         regioncx: Rc::clone(&regioncx),\n         used_mut: Default::default(),\n@@ -378,34 +375,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n         &mut mbcx,\n     );\n \n-    // Convert any reservation warnings into lints.\n-    let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);\n-    for (_, (place, span, location, bk, borrow)) in reservation_warnings {\n-        let initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);\n-\n-        let scope = mbcx.body.source_info(location).scope;\n-        let lint_root = match &mbcx.body.source_scopes[scope].local_data {\n-            ClearCrossCrate::Set(data) => data.lint_root,\n-            _ => tcx.hir().local_def_id_to_hir_id(def.did),\n-        };\n-\n-        // Span and message don't matter; we overwrite them below anyway\n-        mbcx.infcx.tcx.struct_span_lint_hir(\n-            MUTABLE_BORROW_RESERVATION_CONFLICT,\n-            lint_root,\n-            DUMMY_SP,\n-            |lint| {\n-                let mut diag = lint.build(\"\");\n-\n-                diag.message = initial_diag.styled_message().clone();\n-                diag.span = initial_diag.span.clone();\n-\n-                mbcx.buffer_non_error_diag(diag);\n-            },\n-        );\n-        initial_diag.cancel();\n-    }\n-\n     // For each non-user used mutable variable, check if it's been assigned from\n     // a user-declared local. If so, then put that local into the used_mut set.\n     // Note that this set is expected to be small - only upvars from closures\n@@ -540,11 +509,6 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     /// used to report extra information for `FnSelfUse`, to avoid\n     /// unnecessarily verbose errors.\n     fn_self_span_reported: FxHashSet<Span>,\n-    /// Migration warnings to be reported for #56254. We delay reporting these\n-    /// so that we can suppress the warning if there's a corresponding error\n-    /// for the activation of the borrow.\n-    reservation_warnings:\n-        FxHashMap<BorrowIndex, (Place<'tcx>, Span, Location, BorrowKind, BorrowData<'tcx>)>,\n     /// This field keeps track of errors reported in the checking of uninitialized variables,\n     /// so that we don't report seemingly duplicate errors.\n     uninitialized_error_reported: FxHashSet<PlaceRef<'tcx>>,\n@@ -996,12 +960,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let conflict_error =\n             self.check_access_for_conflict(location, place_span, sd, rw, flow_state);\n \n-        if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {\n-            // Suppress this warning when there's an error being emitted for the\n-            // same borrow: fixing the error is likely to fix the warning.\n-            self.reservation_warnings.remove(&borrow_idx);\n-        }\n-\n         if conflict_error || mutability_error {\n             debug!(\"access_place: logging error place_span=`{:?}` kind=`{:?}`\", place_span, kind);\n             self.access_place_error_reported.insert((place_span.0, place_span.1));\n@@ -1068,6 +1026,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     BorrowKind::Unique | BorrowKind::Mut { .. },\n                 ) => Control::Continue,\n \n+                (Reservation(_), BorrowKind::Shallow | BorrowKind::Shared) => {\n+                    // This used to be a future compatibility warning (to be\n+                    // disallowed on NLL). See rust-lang/rust#56254\n+                    Control::Continue\n+                }\n+\n                 (Write(WriteKind::Move), BorrowKind::Shallow) => {\n                     // Handled by initialization checks.\n                     Control::Continue\n@@ -1096,27 +1060,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     Control::Break\n                 }\n \n-                (\n-                    Reservation(WriteKind::MutableBorrow(bk)),\n-                    BorrowKind::Shallow | BorrowKind::Shared,\n-                ) if { tcx.migrate_borrowck() && this.borrow_set.contains(&location) } => {\n-                    let bi = this.borrow_set.get_index_of(&location).unwrap();\n-                    debug!(\n-                        \"recording invalid reservation of place: {:?} with \\\n-                         borrow index {:?} as warning\",\n-                        place_span.0, bi,\n-                    );\n-                    // rust-lang/rust#56254 - This was previously permitted on\n-                    // the 2018 edition so we emit it as a warning. We buffer\n-                    // these separately so that we only emit a warning if borrow\n-                    // checking was otherwise successful.\n-                    this.reservation_warnings\n-                        .insert(bi, (place_span.0, place_span.1, location, bk, borrow.clone()));\n-\n-                    // Don't suppress actual errors.\n-                    Control::Continue\n-                }\n-\n                 (Reservation(kind) | Activation(kind, _) | Write(kind), _) => {\n                     match rw {\n                         Reservation(..) => {"}, {"sha": "3f95ba3e2acaa7dd705ec17fc2ae83984aa09f93", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -491,6 +491,11 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see RFC 2972 \\\n          <https://github.com/rust-lang/rfcs/blob/master/text/2972-constrained-naked.md> for more information\",\n     );\n+    store.register_removed(\n+        \"mutable_borrow_reservation_conflict\",\n+        \"now allowed, see issue #59159 \\\n+         <https://github.com/rust-lang/rust/issues/59159> for more information\",\n+    );\n }\n \n fn register_internals(store: &mut LintStore) {"}, {"sha": "34412795aeff0d7b1e3a2ffe187ef84f4dd1ca16", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -2345,40 +2345,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    /// The `mutable_borrow_reservation_conflict` lint detects the reservation\n-    /// of a two-phased borrow that conflicts with other shared borrows.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust\n-    /// let mut v = vec![0, 1, 2];\n-    /// let shared = &v;\n-    /// v.push(shared.len());\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// This is a [future-incompatible] lint to transition this to a hard error\n-    /// in the future. See [issue #59159] for a complete description of the\n-    /// problem, and some possible solutions.\n-    ///\n-    /// [issue #59159]: https://github.com/rust-lang/rust/issues/59159\n-    /// [future-incompatible]: ../index.md#future-incompatible-lints\n-    pub MUTABLE_BORROW_RESERVATION_CONFLICT,\n-    Warn,\n-    \"reservation of a two-phased borrow conflicts with other shared borrows\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reason: FutureIncompatibilityReason::Custom(\n-            \"this borrowing pattern was not meant to be accepted, \\\n-            and may become a hard error in the future\"\n-        ),\n-        reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n-    };\n-}\n-\n declare_lint! {\n     /// The `soft_unstable` lint detects unstable features that were\n     /// unintentionally allowed on stable.\n@@ -3179,7 +3145,6 @@ declare_lint_pass! {\n         META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n-        MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n         POINTER_STRUCTURAL_MATCH,\n         NONTRIVIAL_STRUCTURAL_MATCH,"}, {"sha": "eb934e7b72b084a6266998d1617113b2a1d586a8", "filename": "src/test/ui/borrowck/suggest-local-var-imm-and-mut.nll.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -7,23 +7,12 @@ LL |             self.foo(self.bar());\n    |             |    |   mutable borrow occurs here\n    |             |    immutable borrow later used by call\n    |             immutable borrow occurs here\n-   |\n-help: try adding a local storing this argument...\n-  --> $DIR/suggest-local-var-imm-and-mut.rs:12:22\n-   |\n-LL |             self.foo(self.bar());\n-   |                      ^^^^^^^^^^\n-help: ...and then using that local as the argument to this call\n-  --> $DIR/suggest-local-var-imm-and-mut.rs:12:13\n-   |\n-LL |             self.foo(self.bar());\n-   |             ^^^^^^^^^^^^^^^^^^^^\n \n error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n-  --> $DIR/suggest-local-var-imm-and-mut.rs:24:39\n+  --> $DIR/suggest-local-var-imm-and-mut.rs:24:29\n    |\n LL |             Self::foo(self, Self::bar(self));\n-   |             --------- ----            ^^^^ mutable borrow occurs here\n+   |             --------- ----  ^^^^^^^^^^^^^^^ mutable borrow occurs here\n    |             |         |\n    |             |         immutable borrow occurs here\n    |             immutable borrow later used by call"}, {"sha": "a89bb941532b62cd54a8477cc5382336a60523d3", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.stderr", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -13,23 +13,6 @@ LL | |\n LL | |         0\n LL | |     });\n    | |______- immutable borrow occurs here\n-   |\n-help: try adding a local storing this argument...\n-  --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:16:9\n-   |\n-LL |         vec.push(2);\n-   |         ^^^^^^^^^^^\n-help: ...and then using that local as the argument to this call\n-  --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:14:5\n-   |\n-LL | /     vec.get({\n-LL | |\n-LL | |         vec.push(2);\n-LL | |\n-LL | |\n-LL | |         0\n-LL | |     });\n-   | |______^\n \n error: aborting due to previous error\n "}, {"sha": "cbbbde61917746f28b698ccdd536412acef931a0", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.base.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.base.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -0,0 +1,25 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:27:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "69c3d7915e43f0f09521101c897d98a57d62e8bb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -20,22 +20,6 @@ LL |     v.extend(&v);\n    |     | immutable borrow later used by call\n    |     mutable borrow occurs here\n \n-warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.push(shared.len());\n-   |     ^^^^^^^------------^\n-   |     |      |\n-   |     |      immutable borrow later used here\n-   |     mutable borrow occurs here\n-   |\n-   = note: `#[warn(mutable_borrow_reservation_conflict)]` on by default\n-   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n-   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "69c3d7915e43f0f09521101c897d98a57d62e8bb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -20,22 +20,6 @@ LL |     v.extend(&v);\n    |     | immutable borrow later used by call\n    |     mutable borrow occurs here\n \n-warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.push(shared.len());\n-   |     ^^^^^^^------------^\n-   |     |      |\n-   |     |      immutable borrow later used here\n-   |     mutable borrow occurs here\n-   |\n-   = note: `#[warn(mutable_borrow_reservation_conflict)]` on by default\n-   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n-   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "cbbbde61917746f28b698ccdd536412acef931a0", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -0,0 +1,25 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:27:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "69c3d7915e43f0f09521101c897d98a57d62e8bb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2015.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -5,9 +5,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.extend(shared);\n-   |     ^^^^^^^^^------^\n-   |     |        |\n-   |     |        immutable borrow later used here\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -20,18 +20,6 @@ LL |     v.extend(&v);\n    |     | immutable borrow later used by call\n    |     mutable borrow occurs here\n \n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.push(shared.len());\n-   |     ^^^^^^^------------^\n-   |     |      |\n-   |     |      immutable borrow later used here\n-   |     mutable borrow occurs here\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "69c3d7915e43f0f09521101c897d98a57d62e8bb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2018.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -5,9 +5,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.extend(shared);\n-   |     ^^^^^^^^^------^\n-   |     |        |\n-   |     |        immutable borrow later used here\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -20,18 +20,6 @@ LL |     v.extend(&v);\n    |     | immutable borrow later used by call\n    |     mutable borrow occurs here\n \n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.push(shared.len());\n-   |     ^^^^^^^------------^\n-   |     |      |\n-   |     |      immutable borrow later used here\n-   |     mutable borrow occurs here\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "3e125869ef1e9272c27fe6336210b1117651d2d2", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -1,50 +1,39 @@\n-// Test for #56254, we previously allowed the last example on the 2018\n-// edition. Make sure that we now emit a warning in that case and an error for\n-// everyone else.\n+// Test for #56254. The last example originally failed with the ast checker, was\n+// accidentally allowed under migrate/nll, then linted against in migrate mode\n+// but disallowed under NLL. Now, we accept it everywhere.\n \n //ignore-compare-mode-nll\n //ignore-compare-mode-polonius\n \n-//revisions: migrate2015 migrate2018 nll2015 nll2018\n+//revisions: base nll\n \n //[migrate2018] edition:2018\n //[nll2018] edition:2018\n \n-#![cfg_attr(any(nll2015, nll2018), feature(nll))]\n+#![cfg_attr(nll, feature(nll))]\n \n fn double_conflicts() {\n     let mut v = vec![0, 1, 2];\n     let shared = &v;\n \n     v.extend(shared);\n-    //[migrate2015]~^ ERROR cannot borrow `v` as mutable\n-    //[nll2015]~^^ ERROR cannot borrow `v` as mutable\n-    //[migrate2018]~^^^ ERROR cannot borrow `v` as mutable\n-    //[nll2018]~^^^^ ERROR cannot borrow `v` as mutable\n+    //[base]~^ ERROR cannot borrow `v` as mutable\n+    //[nll]~^^ ERROR cannot borrow `v` as mutable\n }\n \n fn activation_conflict() {\n     let mut v = vec![0, 1, 2];\n \n     v.extend(&v);\n-    //[migrate2015]~^ ERROR cannot borrow `v` as mutable\n-    //[nll2015]~^^ ERROR cannot borrow `v` as mutable\n-    //[migrate2018]~^^^ ERROR cannot borrow `v` as mutable\n-    //[nll2018]~^^^^ ERROR cannot borrow `v` as mutable\n+    //[base]~^ ERROR cannot borrow `v` as mutable\n+    //[nll]~^^ ERROR cannot borrow `v` as mutable\n }\n \n-fn reservation_conflict() {\n+fn reservation_allowed() {\n     let mut v = vec![0, 1, 2];\n     let shared = &v;\n \n     v.push(shared.len());\n-    //[nll2015]~^ ERROR cannot borrow `v` as mutable\n-    //[nll2018]~^^ ERROR cannot borrow `v` as mutable\n-    //[migrate2015]~^^^ WARNING cannot borrow `v` as mutable\n-    //[migrate2015]~| WARNING may become a hard error in the future\n-\n-    //[migrate2018]~^^^^^^ WARNING cannot borrow `v` as mutable\n-    //[migrate2018]~| WARNING may become a hard error in the future\n }\n \n fn main() {}"}, {"sha": "52e8de3c4ac7d452c127aa8d11fc2623898544fa", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr?ref=febce1fc316f5618d5bb8f05d19e2e3ba868c007", "patch": "@@ -1,39 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:13:9\n-   |\n-LL |         let shared = &v;\n-   |                      -- immutable borrow occurs here\n-LL | \n-LL |         v.push(shared.len());\n-   |         ^^^^^^^------------^\n-   |         |      |\n-   |         |      immutable borrow later used here\n-   |         mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:24:9\n-   |\n-LL |         let shared = &v;\n-   |                      -- immutable borrow occurs here\n-LL | \n-LL |         v.push(shared.len());\n-   |         ^^^^^^^------------^\n-   |         |      |\n-   |         |      immutable borrow later used here\n-   |         mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:37:9\n-   |\n-LL |         let shared = &v;\n-   |                      -- immutable borrow occurs here\n-LL | \n-LL |         v.push(shared.len());\n-   |         ^^^^^^^------------^\n-   |         |      |\n-   |         |      immutable borrow later used here\n-   |         mutable borrow occurs here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "0e1d77ace3f701820f702bce958cecb9d208a201", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.rs?ref=febce1fc316f5618d5bb8f05d19e2e3ba868c007", "patch": "@@ -1,43 +0,0 @@\n-// Check that the future-compat-lint for the reservation conflict is\n-// handled like any other lint.\n-\n-// edition:2018\n-\n-mod future_compat_allow {\n-    #![allow(mutable_borrow_reservation_conflict)]\n-\n-    fn reservation_conflict() {\n-        let mut v = vec![0, 1, 2];\n-        let shared = &v;\n-\n-        v.push(shared.len());\n-    }\n-}\n-\n-mod future_compat_warn {\n-    #![warn(mutable_borrow_reservation_conflict)]\n-\n-    fn reservation_conflict() {\n-        let mut v = vec![0, 1, 2];\n-        let shared = &v;\n-\n-        v.push(shared.len());\n-        //~^ WARNING cannot borrow `v` as mutable\n-        //~| WARNING may become a hard error in the future\n-    }\n-}\n-\n-mod future_compat_deny {\n-    #![deny(mutable_borrow_reservation_conflict)]\n-\n-    fn reservation_conflict() {\n-        let mut v = vec![0, 1, 2];\n-        let shared = &v;\n-\n-        v.push(shared.len());\n-        //~^ ERROR cannot borrow `v` as mutable\n-        //~| WARNING may become a hard error in the future\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "aab21c9e78beff585061e473901961a8f3e5aa30", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr?ref=febce1fc316f5618d5bb8f05d19e2e3ba868c007", "patch": "@@ -1,42 +0,0 @@\n-warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:24:9\n-   |\n-LL |         let shared = &v;\n-   |                      -- immutable borrow occurs here\n-LL | \n-LL |         v.push(shared.len());\n-   |         ^^^^^^^------------^\n-   |         |      |\n-   |         |      immutable borrow later used here\n-   |         mutable borrow occurs here\n-   |\n-note: the lint level is defined here\n-  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:18:13\n-   |\n-LL |     #![warn(mutable_borrow_reservation_conflict)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n-   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n-\n-error: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:37:9\n-   |\n-LL |         let shared = &v;\n-   |                      -- immutable borrow occurs here\n-LL | \n-LL |         v.push(shared.len());\n-   |         ^^^^^^^------------^\n-   |         |      |\n-   |         |      immutable borrow later used here\n-   |         mutable borrow occurs here\n-   |\n-note: the lint level is defined here\n-  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:31:13\n-   |\n-LL |     #![deny(mutable_borrow_reservation_conflict)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n-   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "94cc89754db5fc615509c571e3794e7aab64672c", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -1,10 +1,10 @@\n error[E0502]: cannot borrow `*a` as mutable because it is also borrowed as immutable\n-  --> $DIR/E0502.rs:4:9\n+  --> $DIR/E0502.rs:4:5\n    |\n LL |     let ref y = a;\n    |         ----- immutable borrow occurs here\n LL |     bar(a);\n-   |         ^ mutable borrow occurs here\n+   |     ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n    |     ----------- immutable borrow later used here\n "}, {"sha": "82df50d9dc34f0c4e30438441b2b017ed3aa4fa7", "filename": "src/test/ui/issues/issue-61623.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fissues%2Fissue-61623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fissues%2Fissue-61623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61623.rs?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -5,7 +5,6 @@ fn f2<P>(_: P, _: ()) {}\n fn f3<'a>(x: &'a ((), &'a mut ())) {\n     f2(|| x.0, f1(x.1))\n //~^ ERROR cannot borrow `*x.1` as mutable, as it is behind a `&` reference\n-//~| ERROR cannot borrow `*x.1` as mutable because it is also borrowed as immutable\n }\n \n fn main() {}"}, {"sha": "f654605423379849b5788867d7fa14b2bf3e6aca", "filename": "src/test/ui/issues/issue-61623.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -6,17 +6,6 @@ LL | fn f3<'a>(x: &'a ((), &'a mut ())) {\n LL |     f2(|| x.0, f1(x.1))\n    |                   ^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0502]: cannot borrow `*x.1` as mutable because it is also borrowed as immutable\n-  --> $DIR/issue-61623.rs:6:19\n-   |\n-LL |     f2(|| x.0, f1(x.1))\n-   |     -- -- ---     ^^^ mutable borrow occurs here\n-   |     |  |  |\n-   |     |  |  first borrow occurs due to use of `x` in closure\n-   |     |  immutable borrow occurs here\n-   |     immutable borrow later used by call\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0502, E0596.\n-For more information about an error, try `rustc --explain E0502`.\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "f5f7bf0a758e151bec262f57d981619cfa48f3c6", "filename": "src/test/ui/nll/lint-no-err.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fnll%2Flint-no-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2300401fb0a44966a2159dd0a69762b18fd89345/src%2Ftest%2Fui%2Fnll%2Flint-no-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flint-no-err.rs?ref=2300401fb0a44966a2159dd0a69762b18fd89345", "patch": "@@ -23,6 +23,4 @@ fn main() {\n     let mut conflict = Repro;\n     let prev = conflict.get();\n     conflict.insert(*prev + *x);\n-    //~^ WARN cannot borrow `conflict` as mutable because it is also borrowed as immutable\n-    //~| WARN this borrowing pattern was not meant to be accepted\n }"}, {"sha": "1e7aecfaa643d925a86de3ba0ada8c91cb10f589", "filename": "src/test/ui/nll/lint-no-err.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fnll%2Flint-no-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/febce1fc316f5618d5bb8f05d19e2e3ba868c007/src%2Ftest%2Fui%2Fnll%2Flint-no-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flint-no-err.stderr?ref=febce1fc316f5618d5bb8f05d19e2e3ba868c007", "patch": "@@ -1,17 +0,0 @@\n-warning: cannot borrow `conflict` as mutable because it is also borrowed as immutable\n-  --> $DIR/lint-no-err.rs:25:5\n-   |\n-LL |     let prev = conflict.get();\n-   |                -------------- immutable borrow occurs here\n-LL |     conflict.insert(*prev + *x);\n-   |     ^^^^^^^^^^^^^^^^-----^^^^^^\n-   |     |               |\n-   |     |               immutable borrow later used here\n-   |     mutable borrow occurs here\n-   |\n-   = note: `#[warn(mutable_borrow_reservation_conflict)]` on by default\n-   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n-   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n-\n-warning: 1 warning emitted\n-"}]}