{"sha": "a0fb0facdca979b6f9d775650df6ff81d5b271ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZmIwZmFjZGNhOTc5YjZmOWQ3NzU2NTBkZjZmZjgxZDViMjcxZmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-25T16:45:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-25T16:45:56Z"}, "message": "Run stdsimd test suite", "tree": {"sha": "303f7e93efec794512f3928f7fbe43025f7f837a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/303f7e93efec794512f3928f7fbe43025f7f837a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0fb0facdca979b6f9d775650df6ff81d5b271ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fb0facdca979b6f9d775650df6ff81d5b271ff", "html_url": "https://github.com/rust-lang/rust/commit/a0fb0facdca979b6f9d775650df6ff81d5b271ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0fb0facdca979b6f9d775650df6ff81d5b271ff/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d2221d1bb7978797589cc12a2cada8e9467b42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2221d1bb7978797589cc12a2cada8e9467b42d", "html_url": "https://github.com/rust-lang/rust/commit/6d2221d1bb7978797589cc12a2cada8e9467b42d"}], "stats": {"total": 199, "additions": 194, "deletions": 5}, "files": [{"sha": "4b2051b605abdd726c99682639f95f5c8a7deeb3", "filename": "build_system/prepare.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0fb0facdca979b6f9d775650df6ff81d5b271ff/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0fb0facdca979b6f9d775650df6ff81d5b271ff/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=a0fb0facdca979b6f9d775650df6ff81d5b271ff", "patch": "@@ -27,6 +27,13 @@ pub(crate) fn prepare() {\n         \"341f207c1071f7290e3f228c710817c280c8dca1\",\n     );\n \n+    clone_repo(\n+        \"stdsimd\",\n+        \"https://github.com/rust-lang/stdsimd\",\n+        \"be96995d8ddec03fac9a0caf4d4c51c7fbc33507\",\n+    );\n+    apply_patches(\"stdsimd\", Path::new(\"stdsimd\"));\n+\n     clone_repo(\n         \"simple-raytracer\",\n         \"https://github.com/ebobby/simple-raytracer\",\n@@ -60,11 +67,7 @@ fn prepare_sysroot() {\n     copy_dir_recursively(&sysroot_src_orig.join(\"library\"), &sysroot_src.join(\"library\"));\n \n     let rustc_version = get_rustc_version();\n-    fs::write(\n-        Path::new(\"build_sysroot\").join(\"rustc_version\"),\n-        &rustc_version,\n-    )\n-    .unwrap();\n+    fs::write(Path::new(\"build_sysroot\").join(\"rustc_version\"), &rustc_version).unwrap();\n \n     eprintln!(\"[GIT] init\");\n     let mut git_init_cmd = Command::new(\"git\");"}, {"sha": "b24f67f3edc3067df057f13b3d630a301d87b0c4", "filename": "patches/0001-stdsimd-Disable-unsupported-tests.patch", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/a0fb0facdca979b6f9d775650df6ff81d5b271ff/patches%2F0001-stdsimd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/a0fb0facdca979b6f9d775650df6ff81d5b271ff/patches%2F0001-stdsimd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-stdsimd-Disable-unsupported-tests.patch?ref=a0fb0facdca979b6f9d775650df6ff81d5b271ff", "patch": "@@ -0,0 +1,181 @@\n+From 6bfce5dc2cbf834c74dbccb7538adc08c6eb57e7 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Sun, 25 Jul 2021 18:39:31 +0200\n+Subject: [PATCH] Disable unsupported tests\n+\n+---\n+ crates/core_simd/src/array.rs        |  2 ++\n+ crates/core_simd/src/lib.rs          |  2 +-\n+ crates/core_simd/src/math.rs         |  4 ++++\n+ crates/core_simd/tests/masks.rs      | 12 ------------\n+ crates/core_simd/tests/ops_macros.rs |  6 ++++++\n+ crates/core_simd/tests/round.rs      |  2 ++\n+ 6 files changed, 15 insertions(+), 13 deletions(-)\n+\n+diff --git a/crates/core_simd/src/array.rs b/crates/core_simd/src/array.rs\n+index 25c5309..2b3d819 100644\n+--- a/crates/core_simd/src/array.rs\n++++ b/crates/core_simd/src/array.rs\n+@@ -22,6 +22,7 @@ where\n+     #[must_use]\n+     fn splat(val: Self::Scalar) -> Self;\n+ \n++    /*\n+     /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+     /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n+     /// ```\n+@@ -150,6 +151,7 @@ where\n+             // Cleared \u2622\ufe0f *mut T Zone\n+         }\n+     }\n++    */\n+ }\n+ \n+ macro_rules! impl_simdarray_for {\n+diff --git a/crates/core_simd/src/lib.rs b/crates/core_simd/src/lib.rs\n+index a64904d..299eb11 100644\n+--- a/crates/core_simd/src/lib.rs\n++++ b/crates/core_simd/src/lib.rs\n+@@ -1,7 +1,7 @@\n+ #![no_std]\n+ #![allow(incomplete_features)]\n+ #![feature(\n+-    const_generics, \n++    const_generics,\n+     platform_intrinsics,\n+     repr_simd,\n+     simd_ffi,\n+diff --git a/crates/core_simd/src/math.rs b/crates/core_simd/src/math.rs\n+index 7290a28..e394730 100644\n+--- a/crates/core_simd/src/math.rs\n++++ b/crates/core_simd/src/math.rs\n+@@ -2,6 +2,7 @@ macro_rules! impl_uint_arith {\n+     ($(($name:ident, $n:ident)),+) => {\n+         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n+ \n++            /*\n+             /// Lanewise saturating add.\n+             ///\n+             /// # Examples\n+@@ -38,6 +39,7 @@ macro_rules! impl_uint_arith {\n+             pub fn saturating_sub(self, second: Self) -> Self {\n+                 unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n+             }\n++            */\n+         })+\n+     }\n+ }\n+@@ -46,6 +48,7 @@ macro_rules! impl_int_arith {\n+     ($(($name:ident, $n:ident)),+) => {\n+         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n+ \n++            /*\n+             /// Lanewise saturating add.\n+             ///\n+             /// # Examples\n+@@ -141,6 +144,7 @@ macro_rules! impl_int_arith {\n+             pub fn saturating_neg(self) -> Self {\n+                 Self::splat(0).saturating_sub(self)\n+             }\n++            */\n+         })+\n+     }\n+ }\n+diff --git a/crates/core_simd/tests/masks.rs b/crates/core_simd/tests/masks.rs\n+index 61d8e44..2bccae2 100644\n+--- a/crates/core_simd/tests/masks.rs\n++++ b/crates/core_simd/tests/masks.rs\n+@@ -67,18 +67,6 @@ macro_rules! test_mask_api {\n+                 assert_eq!(int.to_array(), [-1, 0, 0, -1, 0, 0, -1, 0]);\n+                 assert_eq!(core_simd::$name::<8>::from_int(int), mask);\n+             }\n+-\n+-            #[test]\n+-            fn roundtrip_bitmask_conversion() {\n+-                let values = [\n+-                    true, false, false, true, false, false, true, false,\n+-                    true, true, false, false, false, false, false, true,\n+-                ];\n+-                let mask = core_simd::$name::<16>::from_array(values);\n+-                let bitmask = mask.to_bitmask();\n+-                assert_eq!(bitmask, [0b01001001, 0b10000011]);\n+-                assert_eq!(core_simd::$name::<16>::from_bitmask(bitmask), mask);\n+-            }\n+         }\n+     }\n+ }\n+diff --git a/crates/core_simd/tests/ops_macros.rs b/crates/core_simd/tests/ops_macros.rs\n+index cb39e73..fc0ebe1 100644\n+--- a/crates/core_simd/tests/ops_macros.rs\n++++ b/crates/core_simd/tests/ops_macros.rs\n+@@ -435,6 +435,7 @@ macro_rules! impl_float_tests {\n+                     )\n+                 }\n+ \n++                /*\n+                 fn mul_add<const LANES: usize>() {\n+                     test_helpers::test_ternary_elementwise(\n+                         &Vector::<LANES>::mul_add,\n+@@ -442,6 +443,7 @@ macro_rules! impl_float_tests {\n+                         &|_, _, _| true,\n+                     )\n+                 }\n++                */\n+ \n+                 fn sqrt<const LANES: usize>() {\n+                     test_helpers::test_unary_elementwise(\n+@@ -491,6 +493,7 @@ macro_rules! impl_float_tests {\n+                     )\n+                 }\n+ \n++                /*\n+                 fn min<const LANES: usize>() {\n+                     // Regular conditions (both values aren't zero)\n+                     test_helpers::test_binary_elementwise(\n+@@ -536,6 +539,7 @@ macro_rules! impl_float_tests {\n+                     assert!(p_zero.max(n_zero).to_array().iter().all(|x| *x == 0.));\n+                     assert!(n_zero.max(p_zero).to_array().iter().all(|x| *x == 0.));\n+                 }\n++                */\n+ \n+                 fn clamp<const LANES: usize>() {\n+                     test_helpers::test_3(&|value: [Scalar; LANES], mut min: [Scalar; LANES], mut max: [Scalar; LANES]| {\n+@@ -581,6 +585,7 @@ macro_rules! impl_float_tests {\n+                     });\n+                 }\n+ \n++                /*\n+                 fn horizontal_max<const LANES: usize>() {\n+                     test_helpers::test_1(&|x| {\n+                         let vmax = Vector::<LANES>::from_array(x).horizontal_max();\n+@@ -604,6 +609,7 @@ macro_rules! impl_float_tests {\n+                         Ok(())\n+                     });\n+                 }\n++                */\n+             }\n+         }\n+     }\n+diff --git a/crates/core_simd/tests/round.rs b/crates/core_simd/tests/round.rs\n+index 37044a7..4cdc6b7 100644\n+--- a/crates/core_simd/tests/round.rs\n++++ b/crates/core_simd/tests/round.rs\n+@@ -25,6 +25,7 @@ macro_rules! float_rounding_test {\n+                     )\n+                 }\n+ \n++                /*\n+                 fn round<const LANES: usize>() {\n+                     test_helpers::test_unary_elementwise(\n+                         &Vector::<LANES>::round,\n+@@ -32,6 +33,7 @@ macro_rules! float_rounding_test {\n+                         &|_| true,\n+                     )\n+                 }\n++                */\n+ \n+                 fn trunc<const LANES: usize>() {\n+                     test_helpers::test_unary_elementwise(\n+-- \n+2.26.2.7.g19db9cfb68\n+"}, {"sha": "d689b9aad629e5b4baece7a52ec86aef93ddc371", "filename": "scripts/tests.sh", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0fb0facdca979b6f9d775650df6ff81d5b271ff/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a0fb0facdca979b6f9d775650df6ff81d5b271ff/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=a0fb0facdca979b6f9d775650df6ff81d5b271ff", "patch": "@@ -136,6 +136,11 @@ function extended_sysroot_tests() {\n         ../build/cargo build --tests --target $TARGET_TRIPLE\n     fi\n     popd\n+\n+    pushd stdsimd\n+    echo \"[TEST] rust-lang/stdsimd\"\n+    ../build/cargo test -q\n+    popd\n }\n \n case \"$1\" in"}]}