{"sha": "034cd20f528c88be114cbd10c9a28d971ac12acc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNGNkMjBmNTI4Yzg4YmUxMTRjYmQxMGM5YTI4ZDk3MWFjMTJhY2M=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-08-14T22:58:47Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-08-15T06:35:43Z"}, "message": "Exclude `impl Trait` functions from everybody_loops.\n\nFixes #43869.", "tree": {"sha": "eb2e1e9583cc68f4e3ac15c3882a3c9415bb6370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2e1e9583cc68f4e3ac15c3882a3c9415bb6370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/034cd20f528c88be114cbd10c9a28d971ac12acc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZkpZAAAoJEP72yAUdDgE86zUQAJIdeawby1zhJGffp7R13IHM\n3DTK3qv9M/x4I2SusmWt9Glsy5rh2yQF8Tc9LUQUygBrDxYbbF5aZQU8om5yhdhT\n9D0t6OUaVPWzAWgiBW6sBznqSW0r7Z/8c3fwvIdjvbbrJE3EtxCvsShBl1imIdz2\nCAN67AYpqLPS/9KVneSnncjBRr6Wx0e39wGHHBxlpRLHjS5CiHPlogdlwhDTfRLI\n1z6N8gtRJ9LmK8I2mr/lvdSoeVuxzTXRkd0ONLg3rCdpm3MtOsHoLaxbpybCLkfm\nxSWZCCZpOlxga8plLnOR9PMxGZrV8VAVbyvcVaHdMMzGsqmePPzj8kpaMLdb7Yuz\nNDw4qbxrmbfNz6YXwypYEMGUVQyFi3dodTlTj0ovvanlpZ7MqEGtAlCo/QSYIR8X\ncT/zWQIksBsKDyk107ahUV/cD9+jxNdYNcAgNMCfIwJmPdhHgm0V5tPN7uYqdAmf\nfC/z3ERvmep/ElCEO/rxbGhhDCGoKG96Hf70gIzC12kSMCs0s1aO88fguuRfcLmm\nKIkdUTLkCjfchi5/56pMpo8SkUcDRT6kPLZ5fdTWSlZQlfc3eJVdL0mg52xRJR9w\nVk9nhaDnqxfM4wu+Ik0kmrO4H5X6lG7ZuJlixwsNIp7RorwFmdLTvT/XFluI1jTm\n8sY0Oies7IJA5eRWnEU/\n=AKld\n-----END PGP SIGNATURE-----", "payload": "tree eb2e1e9583cc68f4e3ac15c3882a3c9415bb6370\nparent df806275c7c87865080bed9e809a7a693392c666\nauthor kennytm <kennytm@gmail.com> 1502751527 +0800\ncommitter kennytm <kennytm@gmail.com> 1502778943 +0800\n\nExclude `impl Trait` functions from everybody_loops.\n\nFixes #43869.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/034cd20f528c88be114cbd10c9a28d971ac12acc", "html_url": "https://github.com/rust-lang/rust/commit/034cd20f528c88be114cbd10c9a28d971ac12acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/034cd20f528c88be114cbd10c9a28d971ac12acc/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df806275c7c87865080bed9e809a7a693392c666", "url": "https://api.github.com/repos/rust-lang/rust/commits/df806275c7c87865080bed9e809a7a693392c666", "html_url": "https://github.com/rust-lang/rust/commit/df806275c7c87865080bed9e809a7a693392c666"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "bdc6f3bb56c9f854a4ddf69648288b4d43a9991a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/034cd20f528c88be114cbd10c9a28d971ac12acc/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034cd20f528c88be114cbd10c9a28d971ac12acc/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=034cd20f528c88be114cbd10c9a28d971ac12acc", "patch": "@@ -620,6 +620,15 @@ impl UserIdentifiedItem {\n }\n \n // Note: Also used by librustdoc, see PR #43348. Consider moving this struct elsewhere.\n+//\n+// FIXME: Currently the `everybody_loops` transformation is not applied to:\n+//  * `const fn`, due to issue #43636 that `loop` is not supported for const evaluation. We are\n+//    waiting for miri to fix that.\n+//  * `impl Trait`, due to issue #43869 that functions returning impl Trait cannot be diverging.\n+//    Solving this may require `!` to implement every trait, which relies on the an even more\n+//    ambitious form of the closed RFC #1637. See also [#34511].\n+//\n+// [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n pub struct ReplaceBodyWithLoop {\n     within_static_or_const: bool,\n }\n@@ -635,14 +644,34 @@ impl ReplaceBodyWithLoop {\n         self.within_static_or_const = old_const;\n         ret\n     }\n+\n+    fn should_ignore_fn(ret_ty: &ast::FnDecl) -> bool {\n+        if let ast::FunctionRetTy::Ty(ref ty) = ret_ty.output {\n+            fn involves_impl_trait(ty: &ast::Ty) -> bool {\n+                match ty.node {\n+                    ast::TyKind::ImplTrait(_) => true,\n+                    ast::TyKind::Slice(ref subty) |\n+                    ast::TyKind::Array(ref subty, _) |\n+                    ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. }) |\n+                    ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. }) |\n+                    ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n+                    ast::TyKind::Tup(ref tys) => tys.iter().any(|subty| involves_impl_trait(subty)),\n+                    _ => false,\n+                }\n+            }\n+            involves_impl_trait(ty)\n+        } else {\n+            false\n+        }\n+    }\n }\n \n impl fold::Folder for ReplaceBodyWithLoop {\n     fn fold_item_kind(&mut self, i: ast::ItemKind) -> ast::ItemKind {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(_, _, ref constness, _, _, _) =>\n-                constness.node == ast::Constness::Const,\n+            ast::ItemKind::Fn(ref decl, _, ref constness, _, _, _) =>\n+                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_item_kind(i, s))\n@@ -651,8 +680,8 @@ impl fold::Folder for ReplaceBodyWithLoop {\n     fn fold_trait_item(&mut self, i: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n         let is_const = match i.node {\n             ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ast::MethodSig { ref constness, .. }, _) =>\n-                constness.node == ast::Constness::Const,\n+            ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref constness, .. }, _) =>\n+                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_trait_item(i, s))\n@@ -661,8 +690,8 @@ impl fold::Folder for ReplaceBodyWithLoop {\n     fn fold_impl_item(&mut self, i: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n         let is_const = match i.node {\n             ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ast::MethodSig { ref constness, .. }, _) =>\n-                constness.node == ast::Constness::Const,\n+            ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref constness, .. }, _) =>\n+                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_impl_item(i, s))"}, {"sha": "2d18e4be5328683f7591f043b3bce7557f537898", "filename": "src/test/rustdoc/issue-43869.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/034cd20f528c88be114cbd10c9a28d971ac12acc/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034cd20f528c88be114cbd10c9a28d971ac12acc/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-43869.rs?ref=034cd20f528c88be114cbd10c9a28d971ac12acc", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+\n+pub fn g() -> impl Iterator<Item=u8> {\n+    Some(1u8).into_iter()\n+}\n+\n+pub fn h() -> (impl Iterator<Item=u8>) {\n+    Some(1u8).into_iter()\n+}\n+\n+pub fn i() -> impl Iterator<Item=u8> + 'static {\n+    Some(1u8).into_iter()\n+}\n+\n+pub fn j() -> impl Iterator<Item=u8> + Clone {\n+    Some(1u8).into_iter()\n+}\n+\n+// @has issue_43869/fn.g.html\n+// @has issue_43869/fn.h.html\n+// @has issue_43869/fn.i.html\n+// @has issue_43869/fn.j.html"}]}