{"sha": "6343446b892a04601e8c248726c4c22dfea64d63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNDM0NDZiODkyYTA0NjAxZThjMjQ4NzI2YzRjMjJkZmVhNjRkNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-26T19:30:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-26T19:30:57Z"}, "message": "Auto merge of #6800 - matthiaskrgr:lintcheck_stats, r=llogiq\n\nlintcheck: print stats how lint counts change\n\nThe stats look like this:\n````\nStats:\nclippy::manual_map 0 => 10\nclippy::missing_panics_doc 54 => 56\nclippy::upper_case_acronyms 18 => 4\n````\n\nchangelog: lintcheck: print stats about changing lint counts in the log", "tree": {"sha": "a19c85e5a539a8d2fc0dd8ae742eabc5ea1e6f81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19c85e5a539a8d2fc0dd8ae742eabc5ea1e6f81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6343446b892a04601e8c248726c4c22dfea64d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6343446b892a04601e8c248726c4c22dfea64d63", "html_url": "https://github.com/rust-lang/rust/commit/6343446b892a04601e8c248726c4c22dfea64d63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6343446b892a04601e8c248726c4c22dfea64d63/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186bf1ccb4ab8a45302ddd4ac7b8e452d1e7bf4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/186bf1ccb4ab8a45302ddd4ac7b8e452d1e7bf4a", "html_url": "https://github.com/rust-lang/rust/commit/186bf1ccb4ab8a45302ddd4ac7b8e452d1e7bf4a"}, {"sha": "90cf27e9f6f4573ff1938744e87dab9f413002a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/90cf27e9f6f4573ff1938744e87dab9f413002a1", "html_url": "https://github.com/rust-lang/rust/commit/90cf27e9f6f4573ff1938744e87dab9f413002a1"}], "stats": {"total": 154, "additions": 117, "deletions": 37}, "files": [{"sha": "65e438bc0e8d6cd5335c46868e746cd56ac0ac51", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 100, "deletions": 18, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/6343446b892a04601e8c248726c4c22dfea64d63/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6343446b892a04601e8c248726c4c22dfea64d63/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=6343446b892a04601e8c248726c4c22dfea64d63", "patch": "@@ -336,8 +336,7 @@ fn build_clippy() {\n }\n \n /// Read a `toml` file and return a list of `CrateSources` that we want to check with clippy\n-fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n-    let toml_path = lintcheck_config_toml(toml_path);\n+fn read_crates(toml_path: &PathBuf) -> (String, Vec<CrateSource>) {\n     // save it so that we can use the name of the sources.toml as name for the logfile later.\n     let toml_filename = toml_path.file_stem().unwrap().to_str().unwrap().to_string();\n     let toml_content: String =\n@@ -428,7 +427,7 @@ fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n }\n \n /// Generate a short list of occuring lints-types and their count\n-fn gather_stats(clippy_warnings: &[ClippyWarning]) -> String {\n+fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String, usize>) {\n     // count lint type occurrences\n     let mut counter: HashMap<&String, usize> = HashMap::new();\n     clippy_warnings\n@@ -441,15 +440,17 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> String {\n     // to not have a lint with 200 and 2 warnings take the same spot\n     stats.sort_by_key(|(lint, count)| format!(\"{:0>4}, {}\", count, lint));\n \n-    stats\n+    let stats_string = stats\n         .iter()\n         .map(|(lint, count)| format!(\"{} {}\\n\", lint, count))\n-        .collect::<String>()\n+        .collect::<String>();\n+\n+    (stats_string, counter)\n }\n \n /// check if the latest modification of the logfile is older than the modification date of the\n /// clippy binary, if this is true, we should clean the lintchec shared target directory and recheck\n-fn lintcheck_needs_rerun(toml_path: Option<&str>) -> bool {\n+fn lintcheck_needs_rerun(toml_path: &PathBuf) -> bool {\n     let clippy_modified: std::time::SystemTime = {\n         let mut times = [\"target/debug/clippy-driver\", \"target/debug/cargo-clippy\"]\n             .iter()\n@@ -459,17 +460,18 @@ fn lintcheck_needs_rerun(toml_path: Option<&str>) -> bool {\n                     .modified()\n                     .expect(\"failed to get modification date\")\n             });\n-        // the lates modification of either of the binaries\n-        std::cmp::max(times.next().unwrap(), times.next().unwrap())\n+        // the oldest modification of either of the binaries\n+        std::cmp::min(times.next().unwrap(), times.next().unwrap())\n     };\n \n-    let logs_modified: std::time::SystemTime = std::fs::metadata(lintcheck_config_toml(toml_path))\n+    let logs_modified: std::time::SystemTime = std::fs::metadata(toml_path)\n         .expect(\"failed to get metadata of file\")\n         .modified()\n         .expect(\"failed to get modification date\");\n \n-    // if clippys modification time is bigger (older) than the logs mod time, we need to rerun lintcheck\n-    clippy_modified > logs_modified\n+    // if clippys modification time is smaller (older) than the logs mod time, we need to rerun\n+    // lintcheck\n+    clippy_modified < logs_modified\n }\n \n /// lintchecks `main()` function\n@@ -478,11 +480,12 @@ pub fn run(clap_config: &ArgMatches) {\n     build_clippy();\n     println!(\"Done compiling\");\n \n-    let clap_toml_path = clap_config.value_of(\"crates-toml\");\n+    let clap_toml_path: Option<&str> = clap_config.value_of(\"crates-toml\");\n+    let toml_path: PathBuf = lintcheck_config_toml(clap_toml_path);\n \n     // if the clippy bin is newer than our logs, throw away target dirs to force clippy to\n     // refresh the logs\n-    if lintcheck_needs_rerun(clap_toml_path) {\n+    if lintcheck_needs_rerun(&toml_path) {\n         let shared_target_dir = \"target/lintcheck/shared_target_dir\";\n         match std::fs::metadata(&shared_target_dir) {\n             Ok(metadata) => {\n@@ -517,7 +520,9 @@ pub fn run(clap_config: &ArgMatches) {\n     // download and extract the crates, then run clippy on them and collect clippys warnings\n     // flatten into one big list of warnings\n \n-    let (filename, crates) = read_crates(clap_toml_path);\n+    let (filename, crates) = read_crates(&toml_path);\n+    let file = format!(\"lintcheck-logs/{}_logs.txt\", filename);\n+    let old_stats = read_stats_from_file(&file);\n \n     let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n         // if we don't have the specified crate in the .toml, throw an error\n@@ -586,7 +591,7 @@ pub fn run(clap_config: &ArgMatches) {\n     };\n \n     // generate some stats\n-    let stats_formatted = gather_stats(&clippy_warnings);\n+    let (stats_formatted, new_stats) = gather_stats(&clippy_warnings);\n \n     // grab crashes/ICEs, save the crate name and the ice message\n     let ices: Vec<(&String, &String)> = clippy_warnings\n@@ -597,7 +602,7 @@ pub fn run(clap_config: &ArgMatches) {\n \n     let mut all_msgs: Vec<String> = clippy_warnings.iter().map(|warning| warning.to_string()).collect();\n     all_msgs.sort();\n-    all_msgs.push(\"\\n\\n\\n\\nStats\\n\\n\".into());\n+    all_msgs.push(\"\\n\\n\\n\\nStats:\\n\".into());\n     all_msgs.push(stats_formatted);\n \n     // save the text into lintcheck-logs/logs.txt\n@@ -607,7 +612,84 @@ pub fn run(clap_config: &ArgMatches) {\n     ices.iter()\n         .for_each(|(cratename, msg)| text.push_str(&format!(\"{}: '{}'\", cratename, msg)));\n \n-    let file = format!(\"lintcheck-logs/{}_logs.txt\", filename);\n     println!(\"Writing logs to {}\", file);\n-    write(file, text).unwrap();\n+    write(&file, text).unwrap();\n+\n+    print_stats(old_stats, new_stats);\n+}\n+\n+/// read the previous stats from the lintcheck-log file\n+fn read_stats_from_file(file_path: &String) -> HashMap<String, usize> {\n+    let file_path = PathBuf::from(file_path);\n+    let file_content: String = match std::fs::read_to_string(file_path).ok() {\n+        Some(content) => content,\n+        None => {\n+            eprintln!(\"RETURND\");\n+            return HashMap::new();\n+        },\n+    };\n+\n+    let lines: Vec<String> = file_content.lines().map(|l| l.to_string()).collect();\n+\n+    // search for the beginning \"Stats:\" and the end \"ICEs:\" of the section we want\n+    let start = lines.iter().position(|line| line == \"Stats:\").unwrap();\n+    let end = lines.iter().position(|line| line == \"ICEs:\").unwrap();\n+\n+    let stats_lines = &lines[start + 1..=end - 1];\n+\n+    stats_lines\n+        .into_iter()\n+        .map(|line| {\n+            let mut spl = line.split(\" \").into_iter();\n+            (\n+                spl.next().unwrap().to_string(),\n+                spl.next().unwrap().parse::<usize>().unwrap(),\n+            )\n+        })\n+        .collect::<HashMap<String, usize>>()\n+}\n+\n+/// print how lint counts changed between runs\n+fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, usize>) {\n+    let same_in_both_hashmaps = old_stats\n+        .iter()\n+        .filter(|(old_key, old_val)| new_stats.get::<&String>(&old_key) == Some(old_val))\n+        .map(|(k, v)| (k.to_string(), *v))\n+        .collect::<Vec<(String, usize)>>();\n+\n+    let mut old_stats_deduped = old_stats;\n+    let mut new_stats_deduped = new_stats;\n+\n+    // remove duplicates from both hashmaps\n+    same_in_both_hashmaps.iter().for_each(|(k, v)| {\n+        assert!(old_stats_deduped.remove(k) == Some(*v));\n+        assert!(new_stats_deduped.remove(k) == Some(*v));\n+    });\n+\n+    println!(\"\\nStats:\");\n+\n+    // list all new counts  (key is in new stats but not in old stats)\n+    new_stats_deduped\n+        .iter()\n+        .filter(|(new_key, _)| old_stats_deduped.get::<str>(&new_key).is_none())\n+        .for_each(|(new_key, new_value)| {\n+            println!(\"{} 0 => {}\", new_key, new_value);\n+        });\n+\n+    // list all changed counts (key is in both maps but value differs)\n+    new_stats_deduped\n+        .iter()\n+        .filter(|(new_key, _new_val)| old_stats_deduped.get::<str>(&new_key).is_some())\n+        .for_each(|(new_key, new_val)| {\n+            let old_val = old_stats_deduped.get::<str>(&new_key).unwrap();\n+            println!(\"{} {} => {}\", new_key, old_val, new_val);\n+        });\n+\n+    // list all gone counts (key is in old status but not in new stats)\n+    old_stats_deduped\n+        .iter()\n+        .filter(|(old_key, _)| new_stats_deduped.get::<&String>(&old_key).is_none())\n+        .for_each(|(old_key, old_value)| {\n+            println!(\"{} {} => 0\", old_key, old_value);\n+        });\n }"}, {"sha": "e3aeb76657f2692e01afea7753491107d57625db", "filename": "lintcheck-logs/lintcheck_crates_logs.txt", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6343446b892a04601e8c248726c4c22dfea64d63/lintcheck-logs%2Flintcheck_crates_logs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6343446b892a04601e8c248726c4c22dfea64d63/lintcheck-logs%2Flintcheck_crates_logs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flintcheck_crates_logs.txt?ref=6343446b892a04601e8c248726c4c22dfea64d63", "patch": "@@ -1,4 +1,4 @@\n-clippy 0.1.52 (697f3b6d4 2021-02-22)\n+clippy 0.1.52 (5c6cd87b9 2021-02-25)\n \n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.categories` metadata\"\n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.keywords` metadata\"\n@@ -77,6 +77,7 @@ cargo-0.49.0/src/bin/cargo/main.rs:1:null clippy::multiple_crate_versions \"multi\n cargo-0.49.0/src/bin/cargo/main.rs:1:null clippy::multiple_crate_versions \"multiple versions for dependency `hex`: 0.3.2, 0.4.0\"\n cargo-0.49.0/src/bin/cargo/main.rs:1:null clippy::multiple_crate_versions \"multiple versions for dependency `humantime`: 1.3.0, 2.0.0\"\n cargo-0.49.0/src/bin/cargo/main.rs:72:22 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n+cargo-0.49.0/src/bin/cargo/main.rs:79:40 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/bin/cargo/main.rs:94:13 clippy::match_wildcard_for_single_variants \"wildcard match will miss any future added variants\"\n cargo-0.49.0/src/bin/cargo/main.rs:96:41 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/bin/cargo/main.rs:98:60 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n@@ -199,6 +200,7 @@ cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1966:22 clippy::cast_possibl\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1980:17 clippy::similar_names \"binding's name is too similar to existing binding\"\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1980:24 clippy::manual_strip \"stripping a prefix manually\"\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1986:17 clippy::similar_names \"binding's name is too similar to existing binding\"\n+cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1986:27 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:2016:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:61:5 clippy::doc_markdown \"you should put `CompileMode` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:63:12 clippy::doc_markdown \"you should put `CompileKind` between ticks in the documentation\"\n@@ -480,6 +482,7 @@ cargo-0.49.0/src/cargo/core/package_id_spec.rs:212:9 clippy::items_after_stateme\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:231:9 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:51:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:51:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+cargo-0.49.0/src/cargo/core/package_id_spec.rs:64:23 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:77:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:88:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:1004:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -757,6 +760,7 @@ cargo-0.49.0/src/cargo/core/workspace.rs:329:37 clippy::doc_markdown \"you should\n cargo-0.49.0/src/cargo/core/workspace.rs:410:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:440:9 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n cargo-0.49.0/src/cargo/core/workspace.rs:511:32 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n+cargo-0.49.0/src/cargo/core/workspace.rs:531:13 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/core/workspace.rs:561:25 clippy::non_ascii_literal \"literal non-ASCII character detected\"\n cargo-0.49.0/src/cargo/core/workspace.rs:613:13 clippy::filter_map \"called `filter_map(..).map(..)` on an `Iterator`\"\n cargo-0.49.0/src/cargo/core/workspace.rs:615:22 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n@@ -1001,14 +1005,14 @@ cargo-0.49.0/src/cargo/sources/directory.rs:14:1 clippy::module_name_repetitions\n cargo-0.49.0/src/cargo/sources/directory.rs:90:56 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:14:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:25:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/sources/git/source.rs:34:25 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:49:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:53:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:53:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:69:20 clippy::comparison_to_empty \"comparison to empty slice\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:1025:19 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:1157:36 clippy::case_sensitive_file_extension_comparisons \"case-sensitive file extension comparison\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:1158:9 clippy::manual_strip \"stripping a suffix manually\"\n-cargo-0.49.0/src/cargo/sources/git/utils.rs:134:12 clippy::upper_case_acronyms \"name `GitShortID` contains a capitalized acronym\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:176:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:180:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:184:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1061,6 +1065,7 @@ cargo-0.49.0/src/cargo/sources/registry/local.rs:12:1 clippy::module_name_repeti\n cargo-0.49.0/src/cargo/sources/registry/mod.rs:192:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/sources/registry/mod.rs:203:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/sources/registry/mod.rs:229:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n+cargo-0.49.0/src/cargo/sources/registry/mod.rs:340:24 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/sources/registry/mod.rs:372:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/sources/registry/mod.rs:373:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/sources/registry/mod.rs:375:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1085,6 +1090,7 @@ cargo-0.49.0/src/cargo/util/command_prelude.rs:222:1 clippy::must_use_candidate\n cargo-0.49.0/src/cargo/util/command_prelude.rs:234:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/command_prelude.rs:249:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/command_prelude.rs:264:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/command_prelude.rs:265:19 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/util/command_prelude.rs:279:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/command_prelude.rs:298:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/command_prelude.rs:320:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1166,6 +1172,7 @@ cargo-0.49.0/src/cargo/util/config/mod.rs:1901:5 clippy::doc_markdown \"you shoul\n cargo-0.49.0/src/cargo/util/config/mod.rs:214:13 clippy::match_wildcard_for_single_variants \"wildcard match will miss any future added variants\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:259:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:298:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/config/mod.rs:299:12 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:311:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:318:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:353:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1183,6 +1190,7 @@ cargo-0.49.0/src/cargo/util/config/mod.rs:689:20 clippy::unused_self \"unused `se\n cargo-0.49.0/src/cargo/util/config/mod.rs:699:5 clippy::fn_params_excessive_bools \"more than 3 bools in function parameters\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:699:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:719:58 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n+cargo-0.49.0/src/cargo/util/config/mod.rs:748:30 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:816:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/path.rs:10:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/util/config/path.rs:14:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -1241,6 +1249,7 @@ cargo-0.49.0/src/cargo/util/flock.rs:335:23 clippy::cast_sign_loss \"casting `i64\n cargo-0.49.0/src/cargo/util/flock.rs:335:44 clippy::cast_possible_truncation \"casting `i64` to `u32` may truncate the value\"\n cargo-0.49.0/src/cargo/util/flock.rs:379:35 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/src/cargo/util/flock.rs:37:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/util/flock.rs:43:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/flock.rs:43:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/flock.rs:52:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/flock.rs:52:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n@@ -1267,6 +1276,7 @@ cargo-0.49.0/src/cargo/util/interning.rs:66:5 clippy::missing_panics_doc \"docs f\n cargo-0.49.0/src/cargo/util/interning.rs:66:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/interning.rs:77:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/into_url.rs:10:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/into_url_with_base.rs:14:24 clippy::manual_map \"manual implementation of `Option::map`\"\n cargo-0.49.0/src/cargo/util/into_url_with_base.rs:9:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/job.rs:20:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/lev_distance.rs:3:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n@@ -2232,16 +2242,13 @@ rand-0.7.3/src/distributions/uniform.rs:943:54 clippy::cast_possible_truncation\n rand-0.7.3/src/distributions/unit_circle.rs:30:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand-0.7.3/src/distributions/unit_sphere.rs:24:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n rand-0.7.3/src/distributions/unit_sphere.rs:29:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n-rand-0.7.3/src/distributions/utils.rs:218:18 clippy::upper_case_acronyms \"name `FloatSIMDUtils` contains a capitalized acronym\"\n rand-0.7.3/src/distributions/utils.rs:247:15 clippy::wrong_self_convention \"methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\"\n rand-0.7.3/src/distributions/utils.rs:248:20 clippy::wrong_self_convention \"methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\"\n rand-0.7.3/src/distributions/utils.rs:249:18 clippy::wrong_self_convention \"methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\"\n-rand-0.7.3/src/distributions/utils.rs:253:18 clippy::upper_case_acronyms \"name `FloatAsSIMD` contains a capitalized acronym\"\n rand-0.7.3/src/distributions/utils.rs:254:5 clippy::inline_always \"you have declared `#[inline(always)]` on `lanes`. This is usually a bad idea\"\n rand-0.7.3/src/distributions/utils.rs:258:5 clippy::inline_always \"you have declared `#[inline(always)]` on `splat`. This is usually a bad idea\"\n rand-0.7.3/src/distributions/utils.rs:262:5 clippy::inline_always \"you have declared `#[inline(always)]` on `extract`. This is usually a bad idea\"\n rand-0.7.3/src/distributions/utils.rs:267:5 clippy::inline_always \"you have declared `#[inline(always)]` on `replace`. This is usually a bad idea\"\n-rand-0.7.3/src/distributions/utils.rs:274:18 clippy::upper_case_acronyms \"name `BoolAsSIMD` contains a capitalized acronym\"\n rand-0.7.3/src/distributions/utils.rs:281:5 clippy::inline_always \"you have declared `#[inline(always)]` on `any`. This is usually a bad idea\"\n rand-0.7.3/src/distributions/utils.rs:286:5 clippy::inline_always \"you have declared `#[inline(always)]` on `all`. This is usually a bad idea\"\n rand-0.7.3/src/distributions/utils.rs:291:5 clippy::inline_always \"you have declared `#[inline(always)]` on `none`. This is usually a bad idea\"\n@@ -2820,7 +2827,6 @@ regex-1.3.2/src/exec.rs:1270:17 clippy::doc_markdown \"you should put `RegexSet`\n regex-1.3.2/src/exec.rs:1280:17 clippy::doc_markdown \"you should put `RegexSet` between ticks in the documentation\"\n regex-1.3.2/src/exec.rs:137:9 clippy::field_reassign_with_default \"field assignment outside of initializer for an instance created with Default::default()\"\n regex-1.3.2/src/exec.rs:142:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n-regex-1.3.2/src/exec.rs:1493:5 clippy::upper_case_acronyms \"name `PikeVM` contains a capitalized acronym\"\n regex-1.3.2/src/exec.rs:158:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/exec.rs:168:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/exec.rs:181:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -2910,10 +2916,8 @@ regex-1.3.2/src/literal/imp.rs:160:30 clippy::match_same_arms \"this `match` has\n regex-1.3.2/src/literal/imp.rs:167:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/literal/imp.rs:168:13 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n regex-1.3.2/src/literal/imp.rs:211:20 clippy::redundant_else \"redundant else block\"\n-regex-1.3.2/src/literal/imp.rs:239:5 clippy::upper_case_acronyms \"name `AC` contains a capitalized acronym\"\n regex-1.3.2/src/literal/imp.rs:276:50 clippy::match_same_arms \"this `match` has identical arm bodies\"\n regex-1.3.2/src/literal/imp.rs:342:41 clippy::inline_always \"you have declared `#[inline(always)]` on `find`. This is usually a bad idea\"\n-regex-1.3.2/src/literal/imp.rs:34:5 clippy::upper_case_acronyms \"name `AC` contains a capitalized acronym\"\n regex-1.3.2/src/literal/imp.rs:435:13 clippy::redundant_field_names \"redundant field names in struct initialization\"\n regex-1.3.2/src/literal/imp.rs:436:13 clippy::redundant_field_names \"redundant field names in struct initialization\"\n regex-1.3.2/src/literal/imp.rs:437:13 clippy::redundant_field_names \"redundant field names in struct initialization\"\n@@ -2954,7 +2958,6 @@ regex-1.3.2/src/pikevm.rs:224:5 clippy::too_many_arguments \"this function has to\n regex-1.3.2/src/pikevm.rs:234:13 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n regex-1.3.2/src/pikevm.rs:303:13 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n regex-1.3.2/src/pikevm.rs:331:29 clippy::mut_mut \"this expression mutably borrows a mutable reference. Consider reborrowing\"\n-regex-1.3.2/src/pikevm.rs:70:5 clippy::upper_case_acronyms \"name `IP` contains a capitalized acronym\"\n regex-1.3.2/src/pikevm.rs:88:5 clippy::too_many_arguments \"this function has too many arguments (8/7)\"\n regex-1.3.2/src/prog.rs:102:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/prog.rs:113:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -3089,8 +3092,6 @@ ripgrep-12.1.1/crates/core/app.rs:156:39 clippy::doc_markdown \"you should put `c\n ripgrep-12.1.1/crates/core/app.rs:156:39 clippy::doc_markdown \"you should put `clap::Arg` between ticks in the documentation\"\n ripgrep-12.1.1/crates/core/app.rs:156:5 clippy::doc_markdown \"you should put `RGArg` between ticks in the documentation\"\n ripgrep-12.1.1/crates/core/app.rs:156:5 clippy::doc_markdown \"you should put `RGArg` between ticks in the documentation\"\n-ripgrep-12.1.1/crates/core/app.rs:164:12 clippy::upper_case_acronyms \"name `RGArg` contains a capitalized acronym\"\n-ripgrep-12.1.1/crates/core/app.rs:164:12 clippy::upper_case_acronyms \"name `RGArg` contains a capitalized acronym\"\n ripgrep-12.1.1/crates/core/app.rs:1668:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n ripgrep-12.1.1/crates/core/app.rs:1668:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n ripgrep-12.1.1/crates/core/app.rs:1669:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -3099,8 +3100,6 @@ ripgrep-12.1.1/crates/core/app.rs:1821:5 clippy::items_after_statements \"adding\n ripgrep-12.1.1/crates/core/app.rs:1821:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n ripgrep-12.1.1/crates/core/app.rs:1822:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n ripgrep-12.1.1/crates/core/app.rs:1822:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n-ripgrep-12.1.1/crates/core/app.rs:212:10 clippy::upper_case_acronyms \"name `RGArgKind` contains a capitalized acronym\"\n-ripgrep-12.1.1/crates/core/app.rs:212:10 clippy::upper_case_acronyms \"name `RGArgKind` contains a capitalized acronym\"\n ripgrep-12.1.1/crates/core/app.rs:2999:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n ripgrep-12.1.1/crates/core/app.rs:2999:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n ripgrep-12.1.1/crates/core/app.rs:3000:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -3138,7 +3137,6 @@ ripgrep-12.1.1/crates/core/args.rs:410:14 clippy::trivially_copy_pass_by_ref \"th\n ripgrep-12.1.1/crates/core/args.rs:475:18 clippy::match_same_arms \"this `match` has identical arm bodies\"\n ripgrep-12.1.1/crates/core/args.rs:512:19 clippy::doc_markdown \"you should put `ArgMatches` between ticks in the documentation\"\n ripgrep-12.1.1/crates/core/args.rs:549:16 clippy::wrong_self_convention \"methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\"\n-ripgrep-12.1.1/crates/core/args.rs:71:5 clippy::upper_case_acronyms \"name `PCRE2Version` contains a capitalized acronym\"\n ripgrep-12.1.1/crates/core/args.rs:76:18 clippy::trivially_copy_pass_by_ref \"this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\"\n ripgrep-12.1.1/crates/core/args.rs:77:13 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n ripgrep-12.1.1/crates/core/args.rs:923:42 clippy::doc_markdown \"you should put `BinaryDetection::quit` between ticks in the documentation\"\n@@ -3188,8 +3186,8 @@ syn-1.0.54/src/lib.rs:1:null clippy::cargo_common_metadata \"package `syn` is mis\n syn-1.0.54/src/lit.rs:1397:40 clippy::redundant_else \"redundant else block\"\n syn-1.0.54/src/lit.rs:1405:28 clippy::redundant_else \"redundant else block\"\n syn-1.0.54/src/lit.rs:1485:32 clippy::redundant_else \"redundant else block\"\n+syn-1.0.54/src/token.rs:974:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n unicode-xid-0.2.1/src/lib.rs:1:null clippy::cargo_common_metadata \"package `unicode-xid` is missing `package.categories` metadata\"\n-unicode-xid-0.2.1/src/lib.rs:56:11 clippy::upper_case_acronyms \"name `UnicodeXID` contains a capitalized acronym\"\n unicode-xid-0.2.1/src/lib.rs:57:64 clippy::doc_markdown \"you should put `XID_Start` between ticks in the documentation\"\n unicode-xid-0.2.1/src/lib.rs:60:10 clippy::doc_markdown \"you should put `XID_Start` between ticks in the documentation\"\n unicode-xid-0.2.1/src/lib.rs:62:27 clippy::doc_markdown \"you should put `ID_Start` between ticks in the documentation\"\n@@ -3375,8 +3373,7 @@ xsv-0.13.0/src/util.rs:90:1 clippy::needless_lifetimes \"explicit lifetimes given\n \n \n \n-Stats\n-\n+Stats:\n clippy::clone_on_copy 1\n clippy::comparison_chain 1\n clippy::expect_fun_call 1\n@@ -3424,6 +3421,7 @@ clippy::mut_mut 3\n clippy::ptr_arg 3\n clippy::zero_ptr 3\n clippy::too_many_arguments 4\n+clippy::upper_case_acronyms 4\n clippy::explicit_iter_loop 5\n clippy::field_reassign_with_default 5\n clippy::identity_op 5\n@@ -3445,6 +3443,7 @@ clippy::invalid_upcast_comparisons 8\n clippy::needless_question_mark 8\n clippy::wrong_self_convention 8\n clippy::multiple_crate_versions 9\n+clippy::manual_map 10\n clippy::manual_range_contains 10\n clippy::match_wildcard_for_single_variants 10\n clippy::missing_safety_doc 10\n@@ -3456,7 +3455,6 @@ clippy::linkedlist 14\n clippy::single_char_add_str 14\n clippy::option_if_let_else 15\n clippy::needless_pass_by_value 18\n-clippy::upper_case_acronyms 18\n clippy::cast_possible_wrap 19\n clippy::cast_sign_loss 19\n clippy::unnecessary_wraps 19\n@@ -3476,7 +3474,7 @@ clippy::enum_glob_use 40\n clippy::unseparated_literal_suffix 41\n clippy::cast_precision_loss 44\n clippy::single_match_else 45\n-clippy::missing_panics_doc 54\n+clippy::missing_panics_doc 56\n clippy::inline_always 59\n clippy::match_same_arms 60\n clippy::similar_names 78"}]}