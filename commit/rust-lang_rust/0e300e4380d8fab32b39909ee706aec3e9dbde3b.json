{"sha": "0e300e4380d8fab32b39909ee706aec3e9dbde3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzAwZTQzODBkOGZhYjMyYjM5OTA5ZWU3MDZhZWMzZTlkYmRlM2I=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-08T23:16:24Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-08-12T22:03:44Z"}, "message": "Reduce the genericity of Map folds", "tree": {"sha": "0b7ace3c75692824d22c9cd04febc4592826678b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b7ace3c75692824d22c9cd04febc4592826678b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e300e4380d8fab32b39909ee706aec3e9dbde3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e300e4380d8fab32b39909ee706aec3e9dbde3b", "html_url": "https://github.com/rust-lang/rust/commit/0e300e4380d8fab32b39909ee706aec3e9dbde3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e300e4380d8fab32b39909ee706aec3e9dbde3b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "755c091b71bb7b35a5124e110751b6d01592db27", "url": "https://api.github.com/repos/rust-lang/rust/commits/755c091b71bb7b35a5124e110751b6d01592db27", "html_url": "https://github.com/rust-lang/rust/commit/755c091b71bb7b35a5124e110751b6d01592db27"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "002c52bdac6182d42b99791e1be2d3d248dcd8ec", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0e300e4380d8fab32b39909ee706aec3e9dbde3b/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e300e4380d8fab32b39909ee706aec3e9dbde3b/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=0e300e4380d8fab32b39909ee706aec3e9dbde3b", "patch": "@@ -594,6 +594,20 @@ impl<I: fmt::Debug, F> fmt::Debug for Map<I, F> {\n     }\n }\n \n+fn map_fold<T, B, Acc>(\n+    mut f: impl FnMut(T) -> B,\n+    mut g: impl FnMut(Acc, B) -> Acc,\n+) -> impl FnMut(Acc, T) -> Acc {\n+    move |acc, elt| g(acc, f(elt))\n+}\n+\n+fn map_try_fold<'a, T, B, Acc, R>(\n+    f: &'a mut impl FnMut(T) -> B,\n+    mut g: impl FnMut(Acc, B) -> R + 'a,\n+) -> impl FnMut(Acc, T) -> R + 'a {\n+    move |acc, elt| g(acc, f(elt))\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B, I: Iterator, F> Iterator for Map<I, F> where F: FnMut(I::Item) -> B {\n     type Item = B;\n@@ -608,18 +622,16 @@ impl<B, I: Iterator, F> Iterator for Map<I, F> where F: FnMut(I::Item) -> B {\n         self.iter.size_hint()\n     }\n \n-    fn try_fold<Acc, G, R>(&mut self, init: Acc, mut g: G) -> R where\n+    fn try_fold<Acc, G, R>(&mut self, init: Acc, g: G) -> R where\n         Self: Sized, G: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        let f = &mut self.f;\n-        self.iter.try_fold(init, move |acc, elt| g(acc, f(elt)))\n+        self.iter.try_fold(init, map_try_fold(&mut self.f, g))\n     }\n \n-    fn fold<Acc, G>(self, init: Acc, mut g: G) -> Acc\n+    fn fold<Acc, G>(self, init: Acc, g: G) -> Acc\n         where G: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let mut f = self.f;\n-        self.iter.fold(init, move |acc, elt| g(acc, f(elt)))\n+        self.iter.fold(init, map_fold(self.f, g))\n     }\n }\n \n@@ -632,18 +644,16 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n         self.iter.next_back().map(&mut self.f)\n     }\n \n-    fn try_rfold<Acc, G, R>(&mut self, init: Acc, mut g: G) -> R where\n+    fn try_rfold<Acc, G, R>(&mut self, init: Acc, g: G) -> R where\n         Self: Sized, G: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        let f = &mut self.f;\n-        self.iter.try_rfold(init, move |acc, elt| g(acc, f(elt)))\n+        self.iter.try_rfold(init, map_try_fold(&mut self.f, g))\n     }\n \n-    fn rfold<Acc, G>(self, init: Acc, mut g: G) -> Acc\n+    fn rfold<Acc, G>(self, init: Acc, g: G) -> Acc\n         where G: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let mut f = self.f;\n-        self.iter.rfold(init, move |acc, elt| g(acc, f(elt)))\n+        self.iter.rfold(init, map_fold(self.f, g))\n     }\n }\n "}, {"sha": "b94827f98bbb8a97501320a593f831c8279e091f", "filename": "src/test/run-pass/iter-map-fold-type-length.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0e300e4380d8fab32b39909ee706aec3e9dbde3b/src%2Ftest%2Frun-pass%2Fiter-map-fold-type-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e300e4380d8fab32b39909ee706aec3e9dbde3b/src%2Ftest%2Frun-pass%2Fiter-map-fold-type-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-map-fold-type-length.rs?ref=0e300e4380d8fab32b39909ee706aec3e9dbde3b", "patch": "@@ -0,0 +1,37 @@\n+//! Check that type lengths don't explode with `Map` folds.\n+//!\n+//! The normal limit is a million, and this test used to exceed 1.5 million, but\n+//! now we can survive an even tighter limit. Still seems excessive though...\n+#![type_length_limit = \"256000\"]\n+\n+// Custom wrapper so Iterator methods aren't specialized.\n+struct Iter<I>(I);\n+\n+impl<I> Iterator for Iter<I>\n+where\n+    I: Iterator\n+{\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next()\n+    }\n+}\n+\n+fn main() {\n+    let c = Iter(0i32..10)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .map(|x| x)\n+        .count();\n+    assert_eq!(c, 10);\n+}"}]}