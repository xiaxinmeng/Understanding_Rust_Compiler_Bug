{"sha": "816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmIwYWM4YWUzNDQ0YTgxZTYwZTE4YTA1NDMwYmI4NjliYTRiM2I=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-29T08:29:08Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-29T08:29:08Z"}, "message": "Box ty_param_bounds_and_ty\n\nIt contains a vector, which shouldn't be copied all the time.", "tree": {"sha": "5fe37f47fa0fa68577ef72c46e2ea897181f8348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe37f47fa0fa68577ef72c46e2ea897181f8348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "html_url": "https://github.com/rust-lang/rust/commit/816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ed1005bd73f366374a24c77155acb3f8d44f67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed1005bd73f366374a24c77155acb3f8d44f67f", "html_url": "https://github.com/rust-lang/rust/commit/2ed1005bd73f366374a24c77155acb3f8d44f67f"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "adb5e581ae57d0855f321ef7048d1c3441676eda", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "patch": "@@ -213,7 +213,7 @@ fn get_type(data: @[u8], def: ast::def_id, tcx: ty::ctxt,\n     let tp_bounds = if family_has_type_params(item_family(item)) {\n         item_ty_param_bounds(item, this_cnum, tcx, extres)\n     } else { [] };\n-    ret {bounds: tp_bounds, ty: t};\n+    ret @{bounds: tp_bounds, ty: t};\n }\n \n fn get_type_param_count(data: @[u8], id: ast::node_id) -> uint {"}, {"sha": "a318f2ec3546957e1adeb538430194b50dc0990f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "patch": "@@ -2731,7 +2731,7 @@ fn trans_var(cx: @block_ctxt, sp: span, def: ast::def, id: ast::node_id)\n             ret lval_no_env(cx, ccx.consts.get(did.node), owned);\n         } else {\n             let tp = ty::node_id_to_monotype(ccx.tcx, id);\n-            let val = trans_external_path(cx, did, {bounds: [], ty: tp});\n+            let val = trans_external_path(cx, did, @{bounds: [], ty: tp});\n             ret lval_no_env(cx, load_if_immediate(cx, val, tp), owned_imm);\n         }\n       }"}, {"sha": "2f853f5eb8495eb0a20fd1b715c07d54e794d163", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "patch": "@@ -322,7 +322,7 @@ fn param_bounds_to_kind(bounds: @[param_bound]) -> kind {\n     kind\n }\n \n-type ty_param_bounds_and_ty = {bounds: [@[param_bound]], ty: t};\n+type ty_param_bounds_and_ty = @{bounds: [@[param_bound]], ty: t};\n \n type type_cache = hashmap<ast::def_id, ty_param_bounds_and_ty>;\n "}, {"sha": "137804b59d4fa3819621cbefbc9afec5e23e9d2b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816b0ac8ae3444a81e60e18a05430bb869ba4b3b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "patch": "@@ -76,22 +76,22 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_arg(id, _) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret {bounds: [], ty: typ};\n+        ret @{bounds: [], ty: typ};\n       }\n       ast::def_local(id, _) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret {bounds: [], ty: typ};\n+        ret @{bounds: [], ty: typ};\n       }\n       ast::def_obj_field(id, _) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret {bounds: [], ty: typ};\n+        ret @{bounds: [], ty: typ};\n       }\n       ast::def_self(id) {\n         alt get_self_info(fcx.ccx) {\n           some(self_obj(_, obj_t)) | some(self_impl(obj_t)) {\n-            ret {bounds: [], ty: obj_t};\n+            ret @{bounds: [], ty: obj_t};\n           }\n         }\n       }\n@@ -102,12 +102,12 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_binding(id) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret {bounds: [], ty: typ};\n+        ret @{bounds: [], ty: typ};\n       }\n       ast::def_mod(_) {\n         // Hopefully part of a path.\n         // TODO: return a type that's more poisonous, perhaps?\n-        ret {bounds: [], ty: ty::mk_nil(fcx.ccx.tcx)};\n+        ret @{bounds: [], ty: ty::mk_nil(fcx.ccx.tcx)};\n       }\n       ast::def_ty(_) {\n         fcx.ccx.tcx.sess.span_fatal(sp, \"expected value but found type\");\n@@ -382,7 +382,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n     alt it.node {\n       ast::item_const(t, _) {\n         let typ = ast_ty_to_ty(tcx, mode, t);\n-        let tpt = {bounds: [], ty: typ};\n+        let tpt = @{bounds: [], ty: typ};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n@@ -401,7 +401,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         }\n         // Tell ast_ty_to_ty() that we want to perform a recursive\n         // call to resolve any named types.\n-        let tpt = {bounds: ty_param_bounds(tcx, mode, tps),\n+        let tpt = @{bounds: ty_param_bounds(tcx, mode, tps),\n                    ty: ty::mk_named(tcx, ast_ty_to_ty(tcx, mode, t),\n                                     @it.ident)};\n         tcx.tcache.insert(local_def(it.id), tpt);\n@@ -413,7 +413,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         let t = ty::mk_named(tcx, ty::mk_res(tcx, local_def(it.id), t_arg.ty,\n                                              params),\n                              @it.ident);\n-        let t_res = {bounds: bounds, ty: t};\n+        let t_res = @{bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), t_res);\n         ret t_res;\n       }\n@@ -422,7 +422,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         let {bounds, params} = mk_ty_params(tcx, tps);\n         let t = ty::mk_named(tcx, ty::mk_tag(tcx, local_def(it.id), params),\n                              @it.ident);\n-        let tpt = {bounds: bounds, ty: t};\n+        let tpt = @{bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n@@ -431,7 +431,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         let t = ty::mk_named(tcx, ty::mk_iface(tcx, local_def(it.id),\n                                                params),\n                              @it.ident);\n-        let tpt = {bounds: bounds, ty: t};\n+        let tpt = @{bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ty::store_iface_methods(tcx, it.id, @vec::map(ms, {|m|\n             ty_of_ty_method(tcx, m_collect, m)\n@@ -455,7 +455,7 @@ fn ty_of_native_item(tcx: ty::ctxt, mode: mode, it: @ast::native_item)\n           none. { }\n         }\n         let t = ty::mk_native(tcx, ast_util::local_def(it.id));\n-        let tpt = {bounds: [], ty: t};\n+        let tpt = @{bounds: [], ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n@@ -480,7 +480,7 @@ fn ty_of_fn_decl(tcx: ty::ctxt, mode: mode, decl: ast::fn_decl) -> ty::fn_ty {\n fn ty_of_fn(tcx: ty::ctxt, mode: mode, decl: ast::fn_decl,\n             ty_params: [ast::ty_param], def_id: ast::def_id)\n     -> ty::ty_param_bounds_and_ty {\n-    let tpt = {bounds: ty_param_bounds(tcx, mode, ty_params),\n+    let tpt = @{bounds: ty_param_bounds(tcx, mode, ty_params),\n                ty: ty::mk_fn(tcx, ty_of_fn_decl(tcx, mode, decl))};\n     tcx.tcache.insert(def_id, tpt);\n     ret tpt;\n@@ -493,7 +493,7 @@ fn ty_of_native_fn_decl(tcx: ty::ctxt, mode: mode, decl: ast::fn_decl,\n     let output_ty = ast_ty_to_ty(tcx, mode, decl.output);\n \n     let t_fn = ty::mk_native_fn(tcx, input_tys, output_ty);\n-    let tpt = {bounds: bounds, ty: t_fn};\n+    let tpt = @{bounds: bounds, ty: t_fn};\n     tcx.tcache.insert(def_id, tpt);\n     ret tpt;\n }\n@@ -537,7 +537,7 @@ fn ty_of_obj(tcx: ty::ctxt, mode: mode, id: ast::ident, ob: ast::_obj,\n     let methods = vec::map(ob.methods, {|m| ty_of_method(tcx, mode, m)});\n     let t_obj = ty::mk_named(tcx, ty::mk_obj(tcx, ty::sort_methods(methods)),\n                              @id);\n-    ret {bounds: bounds, ty: t_obj};\n+    ret @{bounds: bounds, ty: t_obj};\n }\n fn ty_of_obj_ctor(tcx: ty::ctxt, mode: mode, id: ast::ident, ob: ast::_obj,\n             ctor_id: ast::node_id, ty_params: [ast::ty_param])\n@@ -551,7 +551,7 @@ fn ty_of_obj_ctor(tcx: ty::ctxt, mode: mode, id: ast::ident, ob: ast::_obj,\n     let t_fn = ty::mk_fn(tcx, {proto: ast::proto_shared(ast::sugar_normal),\n                                inputs: t_inputs, output: t_obj.ty,\n                                ret_style: ast::return_val, constraints: []});\n-    let tpt = {bounds: ty_param_bounds(tcx, mode, ty_params), ty: t_fn};\n+    let tpt = @{bounds: ty_param_bounds(tcx, mode, ty_params), ty: t_fn};\n     tcx.tcache.insert(local_def(ctor_id), tpt);\n     ret tpt;\n }\n@@ -672,7 +672,7 @@ mod collect {\n                            inputs: args, output: tag_ty,\n                            ret_style: ast::return_val, constraints: []})\n             };\n-            let tpt = {bounds: ty_param_bounds(cx.tcx, m_collect, ty_params),\n+            let tpt = @{bounds: ty_param_bounds(cx.tcx, m_collect, ty_params),\n                        ty: result_ty};\n             cx.tcx.tcache.insert(local_def(variant.node.id), tpt);\n             write::ty_only(cx.tcx, variant.node.id, result_ty);\n@@ -693,7 +693,7 @@ mod collect {\n                 let bounds = ty_param_bounds(cx.tcx, m_collect, m.tps);\n                 let ty = ty::mk_fn(cx.tcx, ty_of_fn_decl(cx.tcx, m_collect,\n                                                          m.decl));\n-                cx.tcx.tcache.insert(local_def(m.id), {bounds: bounds,\n+                cx.tcx.tcache.insert(local_def(m.id), @{bounds: bounds,\n                                                        ty: ty});\n                 write::ty_only(cx.tcx, m.id, ty);\n             }\n@@ -751,7 +751,7 @@ mod collect {\n             write::ty_only(cx.tcx, it.id, t_res);\n             write::ty_only(cx.tcx, ctor_id, t_ctor);\n             cx.tcx.tcache.insert(local_def(ctor_id),\n-                                 {bounds: bounds,\n+                                 @{bounds: bounds,\n                                   ty: t_ctor});\n             write::ty_only(cx.tcx, dtor_id, t_dtor);\n           }"}]}