{"sha": "6fb92f8cab03824a52da6ad23060fe791928dcc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjkyZjhjYWIwMzgyNGE1MmRhNmFkMjMwNjBmZTc5MTkyOGRjYzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-09T22:48:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-09T22:48:22Z"}, "message": "std::rt: Do local tests in a bare thread to not interfere with the scheduler", "tree": {"sha": "a126ebda7911857a3d2c515578e36f34f91b914b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a126ebda7911857a3d2c515578e36f34f91b914b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb92f8cab03824a52da6ad23060fe791928dcc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb92f8cab03824a52da6ad23060fe791928dcc9", "html_url": "https://github.com/rust-lang/rust/commit/6fb92f8cab03824a52da6ad23060fe791928dcc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb92f8cab03824a52da6ad23060fe791928dcc9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c1315719da842b8d5fcd5e59faf58f2bb408765", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1315719da842b8d5fcd5e59faf58f2bb408765", "html_url": "https://github.com/rust-lang/rust/commit/2c1315719da842b8d5fcd5e59faf58f2bb408765"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "b47bbf3edf0bb99042a6696ff54296eed7b7d19a", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6fb92f8cab03824a52da6ad23060fe791928dcc9/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb92f8cab03824a52da6ad23060fe791928dcc9/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=6fb92f8cab03824a52da6ad23060fe791928dcc9", "patch": "@@ -103,46 +103,55 @@ impl Local for IoFactoryObject {\n \n #[cfg(test)]\n mod test {\n+    use unstable::run_in_bare_thread;\n     use rt::test::*;\n     use rt::sched::Scheduler;\n     use super::*;\n \n     #[test]\n     fn thread_local_scheduler_smoke_test() {\n-        let scheduler = ~new_test_uv_sched();\n-        Local::put(scheduler);\n-        let _scheduler: ~Scheduler = Local::take();\n+        do run_in_bare_thread {\n+            let scheduler = ~new_test_uv_sched();\n+            Local::put(scheduler);\n+            let _scheduler: ~Scheduler = Local::take();\n+        }\n     }\n \n     #[test]\n     fn thread_local_scheduler_two_instances() {\n-        let scheduler = ~new_test_uv_sched();\n-        Local::put(scheduler);\n-        let _scheduler: ~Scheduler = Local::take();\n-        let scheduler = ~new_test_uv_sched();\n-        Local::put(scheduler);\n-        let _scheduler: ~Scheduler = Local::take();\n+        do run_in_bare_thread {\n+            let scheduler = ~new_test_uv_sched();\n+            Local::put(scheduler);\n+            let _scheduler: ~Scheduler = Local::take();\n+            let scheduler = ~new_test_uv_sched();\n+            Local::put(scheduler);\n+            let _scheduler: ~Scheduler = Local::take();\n+        }\n     }\n \n     #[test]\n     fn borrow_smoke_test() {\n-        let scheduler = ~new_test_uv_sched();\n-        Local::put(scheduler);\n-        unsafe {\n-            let _scheduler: *mut Scheduler = Local::unsafe_borrow();\n+        do run_in_bare_thread {\n+            let scheduler = ~new_test_uv_sched();\n+            Local::put(scheduler);\n+            unsafe {\n+                let _scheduler: *mut Scheduler = Local::unsafe_borrow();\n+            }\n+            let _scheduler: ~Scheduler = Local::take();\n         }\n-        let _scheduler: ~Scheduler = Local::take();\n     }\n \n     #[test]\n     fn borrow_with_return() {\n-        let scheduler = ~new_test_uv_sched();\n-        Local::put(scheduler);\n-        let res = do Local::borrow::<Scheduler,bool> |_sched| {\n-            true\n-        };\n-        assert!(res)\n-        let _scheduler: ~Scheduler = Local::take();\n+        do run_in_bare_thread {\n+            let scheduler = ~new_test_uv_sched();\n+            Local::put(scheduler);\n+            let res = do Local::borrow::<Scheduler,bool> |_sched| {\n+                true\n+            };\n+            assert!(res);\n+            let _scheduler: ~Scheduler = Local::take();\n+        }\n     }\n \n }"}]}