{"sha": "4c12f5d25202bbf957d5807dfef26daa70f2f593", "node_id": "C_kwDOAAsO6NoAKDRjMTJmNWQyNTIwMmJiZjk1N2Q1ODA3ZGZlZjI2ZGFhNzBmMmY1OTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-12T05:11:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-12T05:11:14Z"}, "message": "Rollup merge of #111490 - compiler-errors:layout-placeholder, r=aliemjay\n\nDon't ICE in layout computation for placeholder types\n\nWe use `layout_of` for the built-in `PointerLike` trait to check if a type can be coerced to a `dyn*`.\n\nSince the new solver canonicalizes parameter types to placeholders, that code needs to be able to treat placeholders like params, and for the most part it does, **except** for a call to `is_trivially_sized`. This PR fixes that.", "tree": {"sha": "a2edecf899392158d122947e4d1975ace3594cf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2edecf899392158d122947e4d1975ace3594cf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c12f5d25202bbf957d5807dfef26daa70f2f593", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkXcpyCRBK7hj4Ov3rIwAAndwIAG9A1cCKOK322ebZTv9JUoCW\npxTUyGpI48od1GhhcKiGh63+wCe53unCYJbz3d6f/9rV2AM5ZRky9jtCDsjsRqA/\nwoX/j6VarZUtwq4pmIckccF2OQ/0sUnAIheax0O3PXN53WGhTa8Rw/twCQctAvm6\nx/hseutBD91eXCv7HgO+Slo5hFyd2caXnsIPIh+cOn3Icc7ASdAB7OmQ8Z65f++n\nMSA2NNdu0r5VNdGVzvz3i+BRCV+xHaKwRPgFDOQ4+GwPs5QU36VAD5d/1PXQ86Ma\nQhJ+ErIeu+1J9DGU/+MNf7oQa3i2vbcR3lV3bgYxPxTVX9zXQ7PlEztQab8w9+g=\n=hHJA\n-----END PGP SIGNATURE-----\n", "payload": "tree a2edecf899392158d122947e4d1975ace3594cf0\nparent 1d4689cb99f21c0f04c544b52073133cd50f2ad5\nparent 3009cb3f6bded69d83b1d5fe22b26612496e87fc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683868274 +0200\ncommitter GitHub <noreply@github.com> 1683868274 +0200\n\nRollup merge of #111490 - compiler-errors:layout-placeholder, r=aliemjay\n\nDon't ICE in layout computation for placeholder types\n\nWe use `layout_of` for the built-in `PointerLike` trait to check if a type can be coerced to a `dyn*`.\n\nSince the new solver canonicalizes parameter types to placeholders, that code needs to be able to treat placeholders like params, and for the most part it does, **except** for a call to `is_trivially_sized`. This PR fixes that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c12f5d25202bbf957d5807dfef26daa70f2f593", "html_url": "https://github.com/rust-lang/rust/commit/4c12f5d25202bbf957d5807dfef26daa70f2f593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c12f5d25202bbf957d5807dfef26daa70f2f593/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d4689cb99f21c0f04c544b52073133cd50f2ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4689cb99f21c0f04c544b52073133cd50f2ad5", "html_url": "https://github.com/rust-lang/rust/commit/1d4689cb99f21c0f04c544b52073133cd50f2ad5"}, {"sha": "3009cb3f6bded69d83b1d5fe22b26612496e87fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3009cb3f6bded69d83b1d5fe22b26612496e87fc", "html_url": "https://github.com/rust-lang/rust/commit/3009cb3f6bded69d83b1d5fe22b26612496e87fc"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "488d83b5f671b6e083ede5ece2e1985ca20a9cdc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c12f5d25202bbf957d5807dfef26daa70f2f593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c12f5d25202bbf957d5807dfef26daa70f2f593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4c12f5d25202bbf957d5807dfef26daa70f2f593", "patch": "@@ -2366,13 +2366,11 @@ impl<'tcx> Ty<'tcx> {\n \n             ty::Adt(def, _substs) => def.sized_constraint(tcx).0.is_empty(),\n \n-            ty::Alias(..) | ty::Param(_) => false,\n+            ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => false,\n \n             ty::Infer(ty::TyVar(_)) => false,\n \n-            ty::Bound(..)\n-            | ty::Placeholder(..)\n-            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            ty::Bound(..) | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"`is_trivially_sized` applied to unexpected type: {:?}\", self)\n             }\n         }"}, {"sha": "ba42f619a5461dbb1c2fbeae7e57648444e9cb71", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c12f5d25202bbf957d5807dfef26daa70f2f593/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c12f5d25202bbf957d5807dfef26daa70f2f593/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.current.stderr?ref=4c12f5d25202bbf957d5807dfef26daa70f2f593", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `&T` needs to have the same ABI as a pointer\n-  --> $DIR/check-size-at-cast-polymorphic-bad.rs:11:15\n+  --> $DIR/check-size-at-cast-polymorphic-bad.rs:14:15\n    |\n LL |     dyn_debug(t);\n    |               ^ `&T` needs to be a pointer-like type", "previous_filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.stderr"}, {"sha": "ba42f619a5461dbb1c2fbeae7e57648444e9cb71", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.next.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c12f5d25202bbf957d5807dfef26daa70f2f593/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c12f5d25202bbf957d5807dfef26daa70f2f593/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.next.stderr?ref=4c12f5d25202bbf957d5807dfef26daa70f2f593", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: `&T` needs to have the same ABI as a pointer\n+  --> $DIR/check-size-at-cast-polymorphic-bad.rs:14:15\n+   |\n+LL |     dyn_debug(t);\n+   |               ^ `&T` needs to be a pointer-like type\n+   |\n+   = help: the trait `PointerLike` is not implemented for `&T`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerLike {\n+   |                                          +++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9846f87142457fd21c003c635cd48b39d6f5ee74", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c12f5d25202bbf957d5807dfef26daa70f2f593/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c12f5d25202bbf957d5807dfef26daa70f2f593/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs?ref=4c12f5d25202bbf957d5807dfef26daa70f2f593", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![feature(dyn_star)]\n #![allow(incomplete_features)]\n "}]}