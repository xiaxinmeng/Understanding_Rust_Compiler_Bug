{"sha": "66afa5d17a0d157de38e749851ed75b48f8fc3c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YWZhNWQxN2EwZDE1N2RlMzhlNzQ5ODUxZWQ3NWI0OGY4ZmMzYzQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-11T00:38:12Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-12T02:36:19Z"}, "message": "treemap: refactor the set operation tests", "tree": {"sha": "18a17f5ece3e9d88a6ce43eaa3dbdbaccc6621cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a17f5ece3e9d88a6ce43eaa3dbdbaccc6621cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66afa5d17a0d157de38e749851ed75b48f8fc3c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66afa5d17a0d157de38e749851ed75b48f8fc3c4", "html_url": "https://github.com/rust-lang/rust/commit/66afa5d17a0d157de38e749851ed75b48f8fc3c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66afa5d17a0d157de38e749851ed75b48f8fc3c4/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d55225f04a459c574d9533dcc4c06f953fa8fce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55225f04a459c574d9533dcc4c06f953fa8fce5", "html_url": "https://github.com/rust-lang/rust/commit/d55225f04a459c574d9533dcc4c06f953fa8fce5"}], "stats": {"total": 114, "additions": 34, "deletions": 80}, "files": [{"sha": "6126be09bbeaeaf02021951fadbb83ff765f62cb", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 34, "deletions": 80, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/66afa5d17a0d157de38e749851ed75b48f8fc3c4/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66afa5d17a0d157de38e749851ed75b48f8fc3c4/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=66afa5d17a0d157de38e749851ed75b48f8fc3c4", "patch": "@@ -1109,51 +1109,37 @@ mod test_set {\n         }\n     }\n \n-    #[test]\n-    fn test_intersection() {\n-        let mut a = TreeSet::new();\n-        let mut b = TreeSet::new();\n+    fn check(a: &[int], b: &[int], expected: &[int],\n+             f: &fn(&TreeSet<int>, &TreeSet<int>, f: &fn(&int) -> bool)) {\n+        let mut set_a = TreeSet::new();\n+        let mut set_b = TreeSet::new();\n \n-        fail_unless!(a.insert(11));\n-        fail_unless!(a.insert(1));\n-        fail_unless!(a.insert(3));\n-        fail_unless!(a.insert(77));\n-        fail_unless!(a.insert(103));\n-        fail_unless!(a.insert(5));\n-        fail_unless!(a.insert(-5));\n-\n-        fail_unless!(b.insert(2));\n-        fail_unless!(b.insert(11));\n-        fail_unless!(b.insert(77));\n-        fail_unless!(b.insert(-9));\n-        fail_unless!(b.insert(-42));\n-        fail_unless!(b.insert(5));\n-        fail_unless!(b.insert(3));\n+        for a.each |x| { fail_unless!(set_a.insert(*x)) }\n+        for b.each |y| { fail_unless!(set_b.insert(*y)) }\n \n         let mut i = 0;\n-        let expected = [3, 5, 11, 77];\n-        for a.intersection(&b) |x| {\n+        for f(&set_a, &set_b) |x| {\n             fail_unless!(*x == expected[i]);\n-            i += 1\n+            i += 1;\n         }\n         fail_unless!(i == expected.len());\n     }\n \n     #[test]\n-    fn test_difference() {\n-        fn check_difference(a: &[int], b: &[int], expected: &[int]) {\n-            let mut set_a = TreeSet::new();\n-            let mut set_b = TreeSet::new();\n+    fn test_intersection() {\n+        fn check_intersection(a: &[int], b: &[int], expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.intersection(y, z))\n+        }\n \n-            for a.each |x| { fail_unless!(set_a.insert(*x)) }\n-            for b.each |y| { fail_unless!(set_b.insert(*y)) }\n+        check_intersection([11, 1, 3, 77, 103, 5, -5],\n+                           [2, 11, 77, -9, -42, 5, 3],\n+                           [3, 5, 11, 77]);\n+    }\n \n-            let mut i = 0;\n-            for set_a.difference(&set_b) |x| {\n-                fail_unless!(*x == expected[i]);\n-                i += 1;\n-            }\n-            fail_unless!(i == expected.len());\n+    #[test]\n+    fn test_difference() {\n+        fn check_difference(a: &[int], b: &[int], expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.difference(y, z))\n         }\n \n         check_difference([], [], []);\n@@ -1169,57 +1155,25 @@ mod test_set {\n \n     #[test]\n     fn test_symmetric_difference() {\n-        let mut a = TreeSet::new();\n-        let mut b = TreeSet::new();\n-\n-        fail_unless!(a.insert(1));\n-        fail_unless!(a.insert(3));\n-        fail_unless!(a.insert(5));\n-        fail_unless!(a.insert(9));\n-        fail_unless!(a.insert(11));\n-\n-        fail_unless!(b.insert(-2));\n-        fail_unless!(b.insert(3));\n-        fail_unless!(b.insert(9));\n-        fail_unless!(b.insert(14));\n-        fail_unless!(b.insert(22));\n-\n-        let mut i = 0;\n-        let expected = [-2, 1, 5, 11, 14, 22];\n-        for a.symmetric_difference(&b) |x| {\n-            fail_unless!(*x == expected[i]);\n-            i += 1\n+        fn check_symmetric_difference(a: &[int], b: &[int],\n+                                      expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.symmetric_difference(y, z))\n         }\n-        fail_unless!(i == expected.len());\n+\n+        check_symmetric_difference([1, 3, 5, 9, 11],\n+                                   [-2, 3, 9, 14, 22],\n+                                   [-2, 1, 5, 11, 14, 22]);\n     }\n \n     #[test]\n     fn test_union() {\n-        let mut a = TreeSet::new();\n-        let mut b = TreeSet::new();\n-\n-        fail_unless!(a.insert(1));\n-        fail_unless!(a.insert(3));\n-        fail_unless!(a.insert(5));\n-        fail_unless!(a.insert(9));\n-        fail_unless!(a.insert(11));\n-        fail_unless!(a.insert(16));\n-        fail_unless!(a.insert(19));\n-        fail_unless!(a.insert(24));\n-\n-        fail_unless!(b.insert(-2));\n-        fail_unless!(b.insert(1));\n-        fail_unless!(b.insert(5));\n-        fail_unless!(b.insert(9));\n-        fail_unless!(b.insert(13));\n-        fail_unless!(b.insert(19));\n-\n-        let mut i = 0;\n-        let expected = [-2, 1, 3, 5, 9, 11, 13, 16, 19, 24];\n-        for a.union(&b) |x| {\n-            fail_unless!(*x == expected[i]);\n-            i += 1\n+        fn check_union(a: &[int], b: &[int],\n+                                      expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.union(y, z))\n         }\n-        fail_unless!(i == expected.len());\n+\n+        check_union([1, 3, 5, 9, 11, 16, 19, 24],\n+                    [-2, 1, 5, 9, 13, 19],\n+                    [-2, 1, 3, 5, 9, 11, 13, 16, 19, 24]);\n     }\n }"}]}