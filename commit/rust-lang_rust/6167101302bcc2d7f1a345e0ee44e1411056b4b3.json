{"sha": "6167101302bcc2d7f1a345e0ee44e1411056b4b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjcxMDEzMDJiY2MyZDdmMWEzNDVlMGVlNDRlMTQxMTA1NmI0YjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T12:54:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T12:54:33Z"}, "message": "Merge pull request #3190 from matklad/reload\n\nSimplify TS reload logic", "tree": {"sha": "df40b6265f303b8fba5f804a7f7ff370e844dea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df40b6265f303b8fba5f804a7f7ff370e844dea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6167101302bcc2d7f1a345e0ee44e1411056b4b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSo0JCRBK7hj4Ov3rIwAAdHIIAJENIwD9uz/fE7ToXtSW1Pm2\nazv5OObc5bcn/BvaYAjXAFsz3U6uHZczxH71gycRQSQJTjI0ZvXmpztfyrB1StWH\n6C9BHQ9u0fZA1VSILnvvr9a/b4wowqc0DrA6hZ86/wplvoD25racyUrqBynGfmkn\nA6e3Z/k1AyxmLkSN7JZ06Aqi5/lMGD07l5I0kliftqa/1S7qzzGV4KKKIFvw/Ecg\nEFZBuTwcgHfNXtS4roSTifnJP3SmEH0CnX4lQITOrOf3Wmwi9DIL+H6HWe6UFaBL\n3jbZnudT0J2xnuS8pbvsE8hozRiEqPe562X7PVZlH2R6syp6XwnHtVq8yNtnJ7s=\n=g+AY\n-----END PGP SIGNATURE-----\n", "payload": "tree df40b6265f303b8fba5f804a7f7ff370e844dea0\nparent fcf15cc05afaeda6880664777ff2a3db342ea088\nparent d24e612106867c4bb6a1e59bf99aabfb7bc27823\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1581944073 +0100\ncommitter GitHub <noreply@github.com> 1581944073 +0100\n\nMerge pull request #3190 from matklad/reload\n\nSimplify TS reload logic"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6167101302bcc2d7f1a345e0ee44e1411056b4b3", "html_url": "https://github.com/rust-lang/rust/commit/6167101302bcc2d7f1a345e0ee44e1411056b4b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6167101302bcc2d7f1a345e0ee44e1411056b4b3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf15cc05afaeda6880664777ff2a3db342ea088", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf15cc05afaeda6880664777ff2a3db342ea088", "html_url": "https://github.com/rust-lang/rust/commit/fcf15cc05afaeda6880664777ff2a3db342ea088"}, {"sha": "d24e612106867c4bb6a1e59bf99aabfb7bc27823", "url": "https://api.github.com/repos/rust-lang/rust/commits/d24e612106867c4bb6a1e59bf99aabfb7bc27823", "html_url": "https://github.com/rust-lang/rust/commit/d24e612106867c4bb6a1e59bf99aabfb7bc27823"}], "stats": {"total": 104, "additions": 62, "deletions": 42}, "files": [{"sha": "d05f40d67af8c4cbad29c3dcb2a5f7fb90124286", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=6167101302bcc2d7f1a345e0ee44e1411056b4b3", "patch": "@@ -51,10 +51,3 @@ export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n         }\n     };\n }\n-\n-export function reload(ctx: Ctx): Cmd {\n-    return async () => {\n-        vscode.window.showInformationMessage('Reloading rust-analyzer...');\n-        await ctx.restartServer();\n-    };\n-}"}, {"sha": "c06d8ac31760982be0bf6c0542341d7215ffdc40", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=6167101302bcc2d7f1a345e0ee44e1411056b4b3", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import { strict as assert } from \"assert\";\n \n import { Config } from './config';\n import { createClient } from './client';\n@@ -16,19 +17,15 @@ export class Ctx {\n     // on the event loop to get a better picture of what we can do here)\n     client: lc.LanguageClient | null = null;\n     private extCtx: vscode.ExtensionContext;\n-    private onDidRestartHooks: Array<(client: lc.LanguageClient) => void> = [];\n \n     constructor(extCtx: vscode.ExtensionContext) {\n         this.config = new Config(extCtx);\n         this.extCtx = extCtx;\n     }\n \n-    async restartServer() {\n-        const old = this.client;\n-        if (old) {\n-            await old.stop();\n-        }\n-        this.client = null;\n+    async startServer() {\n+        assert(this.client == null);\n+\n         const client = await createClient(this.config);\n         if (!client) {\n             throw new Error(\n@@ -41,9 +38,6 @@ export class Ctx {\n         await client.onReady();\n \n         this.client = client;\n-        for (const hook of this.onDidRestartHooks) {\n-            hook(client);\n-        }\n     }\n \n     get activeRustEditor(): vscode.TextEditor | undefined {\n@@ -71,10 +65,6 @@ export class Ctx {\n     pushCleanup(d: Disposable) {\n         this.extCtx.subscriptions.push(d);\n     }\n-\n-    onDidRestart(hook: (client: lc.LanguageClient) => void) {\n-        this.onDidRestartHooks.push(hook);\n-    }\n }\n \n export interface Disposable {"}, {"sha": "a2db04de872a1a91918d7890f848566fb7b31968", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=6167101302bcc2d7f1a345e0ee44e1411056b4b3", "patch": "@@ -7,7 +7,8 @@ import { Ctx, sendRequestWithRetry } from './ctx';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n-    ctx.onDidRestart(client => {\n+    const client = ctx.client;\n+    if (client != null) {\n         client.onNotification(\n             'rust-analyzer/publishDecorations',\n             (params: PublishDecorationsParams) => {\n@@ -28,7 +29,7 @@ export function activateHighlighting(ctx: Ctx) {\n                 highlighter.setHighlights(targetEditor, params.decorations);\n             },\n         );\n-    });\n+    };\n \n     vscode.workspace.onDidChangeConfiguration(\n         _ => highlighter.removeHighlights(),"}, {"sha": "55bbd7f00415d1ffeb6eda4e060ec5147d1294cb", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=6167101302bcc2d7f1a345e0ee44e1411056b4b3", "patch": "@@ -27,9 +27,15 @@ export function activateInlayHints(ctx: Ctx) {\n         ctx.subscriptions\n     );\n \n-    // We pass async function though it will not be awaited when called,\n-    // thus Promise rejections won't be handled, but this should never throw in fact...\n-    ctx.onDidRestart(async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n+    ctx.pushCleanup({\n+        dispose() {\n+            hintsUpdater.clear()\n+        }\n+    })\n+\n+    // XXX: we don't await this, thus Promise rejections won't be handled, but\n+    // this should never throw in fact...\n+    hintsUpdater.setEnabled(ctx.config.displayInlayHints)\n }\n \n interface InlayHintsParams {\n@@ -61,16 +67,23 @@ class HintsUpdater {\n \n     constructor(ctx: Ctx) {\n         this.ctx = ctx;\n-        this.enabled = ctx.config.displayInlayHints;\n+        this.enabled = false;\n     }\n \n     async setEnabled(enabled: boolean): Promise<void> {\n+        console.log({ enabled, prev: this.enabled });\n+\n         if (this.enabled == enabled) return;\n         this.enabled = enabled;\n \n         if (this.enabled) {\n             return await this.refresh();\n+        } else {\n+            return this.clear();\n         }\n+    }\n+\n+    clear() {\n         this.allEditors.forEach(it => {\n             this.setTypeDecorations(it, []);\n             this.setParameterDecorations(it, []);\n@@ -79,6 +92,8 @@ class HintsUpdater {\n \n     async refresh() {\n         if (!this.enabled) return;\n+        console.log(\"freshin!\");\n+\n         await Promise.all(this.allEditors.map(it => this.refreshEditor(it)));\n     }\n "}, {"sha": "0bf2c4829bbc8de95ee2c1acac3932eab54733bd", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=6167101302bcc2d7f1a345e0ee44e1411056b4b3", "patch": "@@ -11,7 +11,34 @@ let ctx: Ctx | undefined;\n export async function activate(context: vscode.ExtensionContext) {\n     ctx = new Ctx(context);\n \n+    // Note: we try to start the server before we activate type hints so that it\n+    // registers its `onDidChangeDocument` handler before us.\n+    //\n+    // This a horribly, horribly wrong way to deal with this problem.\n+    try {\n+        await ctx.startServer();\n+    } catch (e) {\n+        vscode.window.showErrorMessage(e.message);\n+    }\n+\n     // Commands which invokes manually via command palette, shortcut, etc.\n+    ctx.registerCommand('reload', (ctx) => {\n+        return async () => {\n+            vscode.window.showInformationMessage('Reloading rust-analyzer...');\n+            // @DanTup maneuver\n+            // https://github.com/microsoft/vscode/issues/45774#issuecomment-373423895\n+            await deactivate()\n+            for (const sub of ctx.subscriptions) {\n+                try {\n+                    sub.dispose();\n+                } catch (e) {\n+                    console.error(e);\n+                }\n+            }\n+            await activate(context)\n+        }\n+    })\n+\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('collectGarbage', commands.collectGarbage);\n     ctx.registerCommand('matchingBrace', commands.matchingBrace);\n@@ -20,7 +47,6 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n-    ctx.registerCommand('reload', commands.reload);\n     ctx.registerCommand('onEnter', commands.onEnter);\n     ctx.registerCommand('ssr', commands.ssr)\n \n@@ -33,18 +59,10 @@ export async function activate(context: vscode.ExtensionContext) {\n     activateStatusDisplay(ctx);\n \n     activateHighlighting(ctx);\n-    // Note: we try to start the server before we activate type hints so that it\n-    // registers its `onDidChangeDocument` handler before us.\n-    //\n-    // This a horribly, horribly wrong way to deal with this problem.\n-    try {\n-        await ctx.restartServer();\n-    } catch (e) {\n-        vscode.window.showErrorMessage(e.message);\n-    }\n     activateInlayHints(ctx);\n }\n \n export async function deactivate() {\n     await ctx?.client?.stop();\n+    ctx = undefined;\n }"}, {"sha": "ed0d8216659db5addbe0d48a9e3b3f3652745ef0", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6167101302bcc2d7f1a345e0ee44e1411056b4b3/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=6167101302bcc2d7f1a345e0ee44e1411056b4b3", "patch": "@@ -9,11 +9,14 @@ const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\n export function activateStatusDisplay(ctx: Ctx) {\n     const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n     ctx.pushCleanup(statusDisplay);\n-    ctx.onDidRestart(client => ctx.pushCleanup(client.onProgress(\n-        WorkDoneProgress.type,\n-        'rustAnalyzer/cargoWatcher',\n-        params => statusDisplay.handleProgressNotification(params)\n-    )));\n+    const client = ctx.client;\n+    if (client != null) {\n+        ctx.pushCleanup(client.onProgress(\n+            WorkDoneProgress.type,\n+            'rustAnalyzer/cargoWatcher',\n+            params => statusDisplay.handleProgressNotification(params)\n+        ))\n+    }\n }\n \n class StatusDisplay implements Disposable {"}]}