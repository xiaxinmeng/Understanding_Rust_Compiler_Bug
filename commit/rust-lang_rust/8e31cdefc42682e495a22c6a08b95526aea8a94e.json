{"sha": "8e31cdefc42682e495a22c6a08b95526aea8a94e", "node_id": "C_kwDOAAsO6NoAKDhlMzFjZGVmYzQyNjgyZTQ5NWEyMmM2YTA4Yjk1NTI2YWVhOGE5NGU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-01T01:00:57Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-04T05:55:23Z"}, "message": "Revert #92191 Prefer projection candidates instead of param_env candidates for Sized predicates", "tree": {"sha": "3998cbe07262b968cdb4540dba3a087a5f3baf64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3998cbe07262b968cdb4540dba3a087a5f3baf64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e31cdefc42682e495a22c6a08b95526aea8a94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e31cdefc42682e495a22c6a08b95526aea8a94e", "html_url": "https://github.com/rust-lang/rust/commit/8e31cdefc42682e495a22c6a08b95526aea8a94e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e31cdefc42682e495a22c6a08b95526aea8a94e/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d4862fdd131b6f79dc0a31857f888d26bcdb27", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d4862fdd131b6f79dc0a31857f888d26bcdb27", "html_url": "https://github.com/rust-lang/rust/commit/76d4862fdd131b6f79dc0a31857f888d26bcdb27"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "07720ba71ca95138c95eb9d32fcc7df4a63b05cf", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e31cdefc42682e495a22c6a08b95526aea8a94e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e31cdefc42682e495a22c6a08b95526aea8a94e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=8e31cdefc42682e495a22c6a08b95526aea8a94e", "patch": "@@ -175,9 +175,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();\n \n-        let sized_predicate = self.tcx().lang_items().sized_trait()\n-            == Some(stack.obligation.predicate.skip_binder().def_id());\n-\n         // If there are STILL multiple candidates, we can further\n         // reduce the list by dropping duplicates -- including\n         // resolving specializations.\n@@ -186,7 +183,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             while i < candidates.len() {\n                 let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {\n                     self.candidate_should_be_dropped_in_favor_of(\n-                        sized_predicate,\n                         &candidates[i],\n                         &candidates[j],\n                         needs_infer,"}, {"sha": "9e2d0657029fd0d83c6c399b7cf3978ed5425bb3", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e31cdefc42682e495a22c6a08b95526aea8a94e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e31cdefc42682e495a22c6a08b95526aea8a94e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=8e31cdefc42682e495a22c6a08b95526aea8a94e", "patch": "@@ -1553,7 +1553,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// See the comment for \"SelectionCandidate\" for more details.\n     fn candidate_should_be_dropped_in_favor_of(\n         &mut self,\n-        sized_predicate: bool,\n         victim: &EvaluatedCandidate<'tcx>,\n         other: &EvaluatedCandidate<'tcx>,\n         needs_infer: bool,\n@@ -1625,16 +1624,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Drop otherwise equivalent non-const fn pointer candidates\n             (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,\n \n-            // If obligation is a sized predicate or the where-clause bound is\n-            // global, prefer the projection or object candidate. See issue\n-            // #50825 and #89352.\n-            (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n-                sized_predicate || is_global(cand)\n-            }\n-            (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {\n-                !(sized_predicate || is_global(cand))\n-            }\n-\n             // Global bounds from the where clause should be ignored\n             // here (see issue #50825). Otherwise, we have a where\n             // clause so don't go around looking for impls.\n@@ -1650,8 +1639,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate(..)\n+                | ObjectCandidate(_)\n+                | ProjectionCandidate(_),\n             ) => !is_global(cand),\n+            (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n+                // Prefer these to a global where-clause bound\n+                // (see issue #50825).\n+                is_global(cand)\n+            }\n             (\n                 ImplCandidate(_)\n                 | ClosureCandidate"}, {"sha": "81125a7d6f320c117740bf621c83a091095e13c9", "filename": "src/test/ui/generic-associated-types/bugs/issue-89352.base.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e31cdefc42682e495a22c6a08b95526aea8a94e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e31cdefc42682e495a22c6a08b95526aea8a94e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.base.stderr?ref=8e31cdefc42682e495a22c6a08b95526aea8a94e", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-89352.rs:36:13\n+   |\n+LL |         let a = A::reborrow::<'ai, 's>(self.a.clone());\n+   |             ^ lifetime mismatch\n+   |\n+   = note: expected type `<<A as GenAssoc<T>>::Iter<'s> as Sized>`\n+              found type `<<A as GenAssoc<T>>::Iter<'ai> as Sized>`\n+note: the lifetime `'s` as defined here...\n+  --> $DIR/issue-89352.rs:35:13\n+   |\n+LL |     fn iter<'s>(&'s self) -> Self::Iter<'s> {\n+   |             ^^\n+note: ...does not necessarily outlive the lifetime `'ai` as defined here\n+  --> $DIR/issue-89352.rs:30:6\n+   |\n+LL | impl<'ai, T: 'ai, A: GenAssoc<T>> GenAssoc<T> for Wrapper<'ai, T, A>\n+   |      ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a9f0dd0a0b4ad5f2caac7996f4ad3bc6194442c1", "filename": "src/test/ui/generic-associated-types/bugs/issue-89352.rs", "status": "renamed", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e31cdefc42682e495a22c6a08b95526aea8a94e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e31cdefc42682e495a22c6a08b95526aea8a94e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.rs?ref=8e31cdefc42682e495a22c6a08b95526aea8a94e", "patch": "@@ -1,4 +1,16 @@\n-// check-pass\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n+//[base] check-fail\n+//[nll] check-pass\n+// known-bug\n+\n+// This should pass, but we end up with `A::Iter<'ai>: Sized` for some specific\n+// `'ai`. We also know that `for<'at> A::Iter<'at>: Sized` from the definition,\n+// but we prefer param env candidates. We changed this to preference in #92191,\n+// but this led to unintended consequences (#93262). Suprisingly, this passes\n+// under NLL. So only a bug in migrate mode.\n \n #![feature(generic_associated_types)]\n ", "previous_filename": "src/test/ui/generic-associated-types/issue-89352.rs"}, {"sha": "adc6aa8fa1afa2d6bb199fa3c52566d72446c281", "filename": "src/test/ui/generic-associated-types/issue-93262.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8e31cdefc42682e495a22c6a08b95526aea8a94e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e31cdefc42682e495a22c6a08b95526aea8a94e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93262.rs?ref=8e31cdefc42682e495a22c6a08b95526aea8a94e", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Trait {\n+    type Assoc<'a> where Self: 'a;\n+}\n+\n+pub trait Foo<T: Trait>\n+where\n+    for<'a> T::Assoc<'a>: Clone\n+{}\n+\n+pub struct Type;\n+\n+impl<T: Trait> Foo<T> for Type\n+where\n+    for<'a> T::Assoc<'a>: Clone\n+{}\n+\n+fn main() {}"}]}