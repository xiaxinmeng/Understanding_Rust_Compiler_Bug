{"sha": "247786dba612b7103c4eb694f80f28b75d2e242b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Nzc4NmRiYTYxMmI3MTAzYzRlYjY5NGY4MGYyOGI3NWQyZTI0MmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T11:55:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T11:55:08Z"}, "message": "Auto merge of #879 - RalfJung:rustc-tests, r=RalfJung\n\nalso let bootstrap tell us where to find xargo", "tree": {"sha": "83847f370a680187fd6440001d6460dde2c7ff90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83847f370a680187fd6440001d6460dde2c7ff90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247786dba612b7103c4eb694f80f28b75d2e242b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247786dba612b7103c4eb694f80f28b75d2e242b", "html_url": "https://github.com/rust-lang/rust/commit/247786dba612b7103c4eb694f80f28b75d2e242b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247786dba612b7103c4eb694f80f28b75d2e242b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f463621a90af486c12fe2b1bd961ab773e25c576", "url": "https://api.github.com/repos/rust-lang/rust/commits/f463621a90af486c12fe2b1bd961ab773e25c576", "html_url": "https://github.com/rust-lang/rust/commit/f463621a90af486c12fe2b1bd961ab773e25c576"}, {"sha": "e71ca965b9bfda52f6720e718a631c324c35b196", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71ca965b9bfda52f6720e718a631c324c35b196", "html_url": "https://github.com/rust-lang/rust/commit/e71ca965b9bfda52f6720e718a631c324c35b196"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "351da554b7bface30ab6f311802257833e7d30b3", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/247786dba612b7103c4eb694f80f28b75d2e242b/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247786dba612b7103c4eb694f80f28b75d2e242b/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=247786dba612b7103c4eb694f80f28b75d2e242b", "patch": "@@ -162,8 +162,26 @@ fn test_sysroot_consistency() {\n     }\n }\n \n+fn cargo() -> Command {\n+    if let Ok(val) = std::env::var(\"CARGO\") {\n+        // Bootstrap tells us where to find cargo\n+        Command::new(val)\n+    } else {\n+        Command::new(\"cargo\")\n+    }\n+}\n+\n+fn xargo() -> Command {\n+    if let Ok(val) = std::env::var(\"XARGO\") {\n+        // Bootstrap tells us where to find xargo\n+        Command::new(val)\n+    } else {\n+        Command::new(\"xargo\")\n+    }\n+}\n+\n fn xargo_version() -> Option<(u32, u32, u32)> {\n-    let out = Command::new(\"xargo\").arg(\"--version\").output().ok()?;\n+    let out = xargo().arg(\"--version\").output().ok()?;\n     if !out.status.success() {\n         return None;\n     }\n@@ -224,21 +242,14 @@ fn setup(ask_user: bool) {\n     }\n \n     // First, we need xargo.\n-    let xargo = xargo_version();\n-    if xargo.map_or(true, |v| v < (0, 3, 14)) {\n+    if xargo_version().map_or(true, |v| v < (0, 3, 14)) {\n         if ask_user {\n             ask(\"It seems you do not have a recent enough xargo installed. I will run `cargo install xargo -f`. Proceed?\");\n         } else {\n             println!(\"Installing xargo: `cargo install xargo -f`\");\n         }\n \n-        let mut cargo = if let Ok(val) = std::env::var(\"CARGO\") {\n-            // In rustc bootstrap, an env var tells us where to find cargo.\n-            Command::new(val)\n-        } else {\n-            Command::new(\"cargo\")\n-        };\n-        if !cargo.args(&[\"install\", \"xargo\", \"-f\"]).status().unwrap().success() {\n+        if !cargo().args(&[\"install\", \"xargo\", \"-f\"]).status().unwrap().success() {\n             show_error(format!(\"Failed to install xargo\"));\n         }\n     }\n@@ -294,7 +305,7 @@ path = \"lib.rs\"\n     // Run xargo.\n     let target = get_arg_flag_value(\"--target\");\n     let print_env = !ask_user && has_arg_flag(\"--env\"); // whether we just print the necessary environment variable\n-    let mut command = Command::new(\"xargo\");\n+    let mut command = xargo();\n     command.arg(\"build\").arg(\"-q\")\n         .current_dir(&dir)\n         .env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"))\n@@ -383,7 +394,7 @@ fn in_cargo_miri() {\n         // Now we run `cargo rustc $FLAGS $ARGS`, giving the user the\n         // change to add additional arguments. `FLAGS` is set to identify\n         // this target.  The user gets to control what gets actually passed to Miri.\n-        let mut cmd = Command::new(\"cargo\");\n+        let mut cmd = cargo();\n         cmd.arg(\"rustc\");\n         match (subcommand, kind.as_str()) {\n             (MiriCommand::Run, \"bin\") => {"}]}