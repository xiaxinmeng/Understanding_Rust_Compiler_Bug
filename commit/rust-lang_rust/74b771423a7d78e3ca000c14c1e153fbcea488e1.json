{"sha": "74b771423a7d78e3ca000c14c1e153fbcea488e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Yjc3MTQyM2E3ZDc4ZTNjYTAwMGMxNGMxZTE1M2ZiY2VhNDg4ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-27T12:08:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-27T12:08:05Z"}, "message": "Auto merge of #1723 - RalfJung:cargo-miri, r=RalfJung\n\ncargo-miri: avoid unnecessary rebuilds\n\nFixes https://github.com/rust-lang/miri/issues/1722", "tree": {"sha": "6db847fc1dededde57b10a95d0b4aef7b7022cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db847fc1dededde57b10a95d0b4aef7b7022cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b771423a7d78e3ca000c14c1e153fbcea488e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b771423a7d78e3ca000c14c1e153fbcea488e1", "html_url": "https://github.com/rust-lang/rust/commit/74b771423a7d78e3ca000c14c1e153fbcea488e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b771423a7d78e3ca000c14c1e153fbcea488e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e29f1379413dd5ddbcbb3199bbe9faf2745824f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29f1379413dd5ddbcbb3199bbe9faf2745824f5", "html_url": "https://github.com/rust-lang/rust/commit/e29f1379413dd5ddbcbb3199bbe9faf2745824f5"}, {"sha": "3e987e127c9865189af59f7878e172b9f1297de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e987e127c9865189af59f7878e172b9f1297de5", "html_url": "https://github.com/rust-lang/rust/commit/3e987e127c9865189af59f7878e172b9f1297de5"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "051f3dd3b6fc7bda508dfc0f1d69a7b1a3dfa3c6", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74b771423a7d78e3ca000c14c1e153fbcea488e1/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b771423a7d78e3ca000c14c1e153fbcea488e1/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=74b771423a7d78e3ca000c14c1e153fbcea488e1", "patch": "@@ -692,12 +692,17 @@ fn phase_cargo_rustc(mut args: env::Args) {\n     exec(cmd);\n \n     // Create a stub .rlib file if \"link\" was requested by cargo.\n+    // This is necessary to prevent cargo from doing rebuilds all the time.\n     if emit_link_hack {\n         // Some platforms prepend \"lib\", some do not... let's just create both files.\n-        let filename = out_filename(\"lib\", \".rlib\");\n-        File::create(filename).expect(\"failed to create rlib file\");\n-        let filename = out_filename(\"\", \".rlib\");\n-        File::create(filename).expect(\"failed to create rlib file\");\n+        File::create(out_filename(\"lib\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n+        File::create(out_filename(\"\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n+        // Just in case this is a cdylib or staticlib, also create those fake files.\n+        File::create(out_filename(\"lib\", \".so\")).expect(\"failed to create fake .so file\");\n+        File::create(out_filename(\"lib\", \".a\")).expect(\"failed to create fake .a file\");\n+        File::create(out_filename(\"lib\", \".dylib\")).expect(\"failed to create fake .dylib file\");\n+        File::create(out_filename(\"\", \".dll\")).expect(\"failed to create fake .dll file\");\n+        File::create(out_filename(\"\", \".lib\")).expect(\"failed to create fake .lib file\");\n     }\n }\n "}, {"sha": "b9259b7d0d2253b9aaac90913735c96a66bb0597", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74b771423a7d78e3ca000c14c1e153fbcea488e1/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/74b771423a7d78e3ca000c14c1e153fbcea488e1/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=74b771423a7d78e3ca000c14c1e153fbcea488e1", "patch": "@@ -15,8 +15,10 @@ def fail(msg):\n     print(\"\\nTEST FAIL: {}\".format(msg))\n     sys.exit(1)\n \n-def cargo_miri(cmd):\n-    args = [\"cargo\", \"miri\", cmd, \"-q\"]\n+def cargo_miri(cmd, quiet = True):\n+    args = [\"cargo\", \"miri\", cmd]\n+    if quiet:\n+        args += [\"-q\"]\n     if 'MIRI_TEST_TARGET' in os.environ:\n         args += [\"--target\", os.environ['MIRI_TEST_TARGET']]\n     return args\n@@ -48,6 +50,25 @@ def test(name, cmd, stdout_ref, stderr_ref, stdin=b'', env={}):\n     print(\"--- END stderr ---\")\n     fail(\"exit code was {}\".format(p.returncode))\n \n+def test_no_rebuild(name, cmd):\n+    print(\"Testing {}...\".format(name))\n+    p = subprocess.Popen(\n+        cmd,\n+        stdout=subprocess.PIPE,\n+        stderr=subprocess.PIPE,\n+    )\n+    (stdout, stderr) = p.communicate()\n+    stdout = stdout.decode(\"UTF-8\")\n+    stderr = stderr.decode(\"UTF-8\")\n+    if p.returncode != 0:\n+        fail(\"rebuild failed\");\n+    # Also check for 'Running' as a sanity check.\n+    if stderr.count(\" Compiling \") > 0 or stderr.count(\" Running \") == 0:\n+        print(\"--- BEGIN stderr ---\")\n+        print(stderr, end=\"\")\n+        print(\"--- END stderr ---\")\n+        fail(\"Something was being rebuilt when it should not be (or we got no output)\");\n+\n def test_cargo_miri_run():\n     test(\"`cargo miri run` (no isolation)\",\n         cargo_miri(\"run\"),\n@@ -67,6 +88,12 @@ def test_cargo_miri_run():\n         \"run.subcrate.stdout.ref\", \"run.subcrate.stderr.ref\",\n         env={'MIRIFLAGS': \"-Zmiri-disable-isolation\"},\n     )\n+    # Special test: run it again *without* `-q` to make sure nothing is being rebuilt (Miri issue #1722)\n+    # FIXME: move this test up to right after the first `test`\n+    # (currently that fails, only the 3rd and later runs are really clean... see Miri issue #1722)\n+    test_no_rebuild(\"`cargo miri run` (no rebuild)\",\n+        cargo_miri(\"run\", quiet=False) + [\"--\", \"\"],\n+    )\n \n def test_cargo_miri_test():\n     # rustdoc is not run on foreign targets"}]}