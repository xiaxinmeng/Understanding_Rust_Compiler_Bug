{"sha": "f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjIxY2FiNjg1OWVlMGY4ZGRhY2VhMGVjZTk4ZTRhNGMwMGQ1YTY=", "commit": {"author": {"name": "Ramkumar Ramachandra", "email": "artagnon@gmail.com", "date": "2013-06-26T10:19:21Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T22:08:43Z"}, "message": "priority_queue: implement simple iterator\n\nRemove PriorityQueue::each and replace it with PriorityQueue::iter,\nwhich ultimately calls into vec::VecIterator via PriorityQueueIterator.\nImplement iterator::Iterator for PriorityQueueIterator.  Now you should\nbe able to do:\n\n  extern mod extra;\n  let mut pq = extra::priority_queue::PriorityQueue::new();\n  pq.push(5);\n  pq.push(6);\n  pq.push(3);\n  for pq.iter().advance |el| {\n      println(fmt!(\"%d\", *el));\n  }\n\njust like you iterate over vectors, hashmaps, hashsets etc.  Note that\nthe iteration order is arbitrary (as before with PriorityQueue::each),\nand _not_ the order you get when you pop() repeatedly.\n\nAdd an in-file test to guard this.\n\nReported-by: Daniel Micay <danielmicay@gmail.com>\nSigned-off-by: Ramkumar Ramachandra <artagnon@gmail.com>", "tree": {"sha": "d3ad3130071576b79c40cf2e3b0069a0c916bf36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ad3130071576b79c40cf2e3b0069a0c916bf36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6", "html_url": "https://github.com/rust-lang/rust/commit/f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6/comments", "author": {"login": "artagnon", "id": 37226, "node_id": "MDQ6VXNlcjM3MjI2", "avatar_url": "https://avatars.githubusercontent.com/u/37226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artagnon", "html_url": "https://github.com/artagnon", "followers_url": "https://api.github.com/users/artagnon/followers", "following_url": "https://api.github.com/users/artagnon/following{/other_user}", "gists_url": "https://api.github.com/users/artagnon/gists{/gist_id}", "starred_url": "https://api.github.com/users/artagnon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artagnon/subscriptions", "organizations_url": "https://api.github.com/users/artagnon/orgs", "repos_url": "https://api.github.com/users/artagnon/repos", "events_url": "https://api.github.com/users/artagnon/events{/privacy}", "received_events_url": "https://api.github.com/users/artagnon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b17e4775c816b59d92e166b8a8db039aaa7ba85", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b17e4775c816b59d92e166b8a8db039aaa7ba85", "html_url": "https://github.com/rust-lang/rust/commit/2b17e4775c816b59d92e166b8a8db039aaa7ba85"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "af891edf9e5fde3848197ddcd19e0fffe37b032c", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=f4621cab6859ee0f8ddacea0ece98e4a4c00d5a6", "patch": "@@ -37,10 +37,11 @@ impl<T:Ord> Mutable for PriorityQueue<T> {\n }\n \n impl<T:Ord> PriorityQueue<T> {\n-    /// Visit all values in the underlying vector.\n-    ///\n-    /// The values are **not** visited in order.\n-    pub fn each(&self, f: &fn(&T) -> bool) -> bool { self.data.iter().advance(f) }\n+    /// An iterator visiting all values in underlying vector, in\n+    /// arbitrary order.\n+    pub fn iter<'a>(&'a self) -> PriorityQueueIterator<'a, T> {\n+        PriorityQueueIterator { iter: self.data.iter() }\n+    }\n \n     /// Returns the greatest item in the queue - fails if empty\n     pub fn top<'a>(&'a self) -> &'a T { &self.data[0] }\n@@ -178,11 +179,33 @@ impl<T:Ord> PriorityQueue<T> {\n     }\n }\n \n+/// PriorityQueue iterator\n+pub struct PriorityQueueIterator <'self, T> {\n+    priv iter: vec::VecIterator<'self, T>,\n+}\n+\n+impl<'self, T> Iterator<&'self T> for PriorityQueueIterator<'self, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<(&'self T)> { self.iter.next() }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use sort::merge_sort;\n     use priority_queue::PriorityQueue;\n \n+    #[test]\n+    fn test_iterator() {\n+        let data = ~[5, 9, 3];\n+        let iterout = ~[9, 5, 3];\n+        let pq = PriorityQueue::from_vec(data);\n+        let mut i = 0;\n+        for pq.iter().advance |el| {\n+            assert_eq!(*el, iterout[i]);\n+            i += 1;\n+        }\n+    }\n+\n     #[test]\n     fn test_top_and_pop() {\n         let data = ~[2u, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1];"}]}