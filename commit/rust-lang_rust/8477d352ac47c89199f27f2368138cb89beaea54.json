{"sha": "8477d352ac47c89199f27f2368138cb89beaea54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NzdkMzUyYWM0N2M4OTE5OWYyN2YyMzY4MTM4Y2I4OWJlYWVhNTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-30T13:49:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-03T14:45:43Z"}, "message": "make const_err a future incompat lint", "tree": {"sha": "bfd1fa2d2b5e8c0f50b821ed4034201e71e0edec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd1fa2d2b5e8c0f50b821ed4034201e71e0edec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8477d352ac47c89199f27f2368138cb89beaea54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8477d352ac47c89199f27f2368138cb89beaea54", "html_url": "https://github.com/rust-lang/rust/commit/8477d352ac47c89199f27f2368138cb89beaea54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8477d352ac47c89199f27f2368138cb89beaea54/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "html_url": "https://github.com/rust-lang/rust/commit/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2"}], "stats": {"total": 1213, "additions": 952, "deletions": 261}, "files": [{"sha": "43376003840084a37a3f74f012b08ead2d8e81ae", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -255,6 +255,10 @@ declare_lint! {\n     pub CONST_ERR,\n     Deny,\n     \"constant evaluation encountered erroneous expression\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n+        edition: None,\n+    };\n     report_in_external_macro\n }\n "}, {"sha": "9ff7e2c569ab95c6ad650af9bd94da258465c0b8", "filename": "src/test/ui/array-slice-vec/array_const_index-0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -2,6 +2,7 @@ const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n //~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = B;"}, {"sha": "641705e1c68759c79e36737449497935a42469bf", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const B: i32 = (&A)[1];\n    |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "f4326189c1917d15bc471788701761ddccc94be1", "filename": "src/test/ui/array-slice-vec/array_const_index-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -2,6 +2,7 @@ const A: [i32; 0] = [];\n const B: i32 = A[1];\n //~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = B;"}, {"sha": "4d52d38af5e1730e42fb9ab5452d4a59352ee63c", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const B: i32 = A[1];\n    |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "3936e6a3bc722998dbd6d712008ed94b281f942b", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,7 @@ trait Tr {\n     // `Self::A` must not be assumed to hold inside the trait.\n     const B: u8 = Self::A + 1;\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n // An impl that doesn't override any constant will NOT cause a const eval error\n@@ -33,6 +34,7 @@ fn main() {\n     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n     //~^ ERROR evaluation of constant value failed\n     //~| ERROR erroneous constant used\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     assert_eq!(<u8 as Tr>::A, 254);\n     assert_eq!(<u8 as Tr>::B, 255);"}, {"sha": "d034a50299d500a96cff36afa57d07fdc2cded8b", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,19 +7,23 @@ LL |     const B: u8 = Self::A + 1;\n    |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/defaults-not-assumed-fail.rs:33:16\n+  --> $DIR/defaults-not-assumed-fail.rs:34:16\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |                ^^^^^^^^^^^^^ referenced constant has errors\n \n error: erroneous constant used\n-  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+  --> $DIR/defaults-not-assumed-fail.rs:34:5\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "87b7c377b00368b9312f20875c752c3aebf3d373", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -15,6 +15,8 @@ LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n    |     ------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n@@ -32,6 +34,9 @@ LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n    |     --------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n@@ -49,6 +54,9 @@ LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n    |     --------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "71d947b0c2c70fe3cc3016e481aa29579643f641", "filename": "src/test/ui/consts/assoc_const_generic_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -9,6 +9,7 @@ trait ZeroSized: Sized {\n \n impl<T: Sized> ZeroSized for T {\n     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()]; //~ WARN any use of this value\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     fn requires_zero_size(self) {\n         let () = Self::I_AM_ZERO_SIZED; //~ ERROR erroneous constant encountered\n         println!(\"requires_zero_size called\");"}, {"sha": "96cb904fa1b199f3dd7a3ad8279b102b36c972bf", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,9 +11,11 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n-  --> $DIR/assoc_const_generic_impl.rs:13:18\n+  --> $DIR/assoc_const_generic_impl.rs:14:18\n    |\n LL |         let () = Self::I_AM_ZERO_SIZED;\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d46ce44b7ba2de5df15c68446a09abd5e5e53956", "filename": "src/test/ui/consts/assume-type-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -16,6 +16,8 @@ LL | |     };\n    | |______-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "d8f7635fe9bbe0efff001f671fe1020798a54a43", "filename": "src/test/ui/consts/const-err-early.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -1,10 +1,15 @@\n #![deny(const_err)]\n \n pub const A: i8 = -i8::MIN; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const E: u8 = [5u8][1]; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _a = A;"}, {"sha": "2b3d881738762296458b34c75e6c14546854a203", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,38 +11,52 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:4:19\n+  --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const B: u8 = 200u8 + 200u8;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:5:19\n+  --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n    | ------------------^^^^^^^^^-\n    |                   |\n    |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:6:19\n+  --> $DIR/const-err-early.rs:9:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ------------------^^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:7:19\n+  --> $DIR/const-err-early.rs:11:19\n    |\n LL | pub const E: u8 = [5u8][1];\n    | ------------------^^^^^^^^-\n    |                   |\n    |                   index out of bounds: the length is 1 but the index is 1\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 5 previous errors\n "}, {"sha": "62552e1476ce2de2da0d5bff3879a24803a15478", "filename": "src/test/ui/consts/const-err-multi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -2,12 +2,16 @@\n \n pub const A: i8 = -i8::MIN;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const B: i8 = A;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const C: u8 = A as u8;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const D: i8 = 50 - A;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = (A, B, C, D);"}, {"sha": "c8172e83d10e22f0de4ab1b904ad6bd37dc017c3", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,30 +11,41 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:5:19\n+  --> $DIR/const-err-multi.rs:6:19\n    |\n LL | pub const B: i8 = A;\n    | ------------------^-\n    |                   |\n    |                   referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:7:19\n+  --> $DIR/const-err-multi.rs:9:19\n    |\n LL | pub const C: u8 = A as u8;\n    | ------------------^-------\n    |                   |\n    |                   referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:9:24\n+  --> $DIR/const-err-multi.rs:12:24\n    |\n LL | pub const D: i8 = 50 - A;\n    | -----------------------^-\n    |                        |\n    |                        referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "031f2121a1ee258cc792fd08783c6b95bcb96362", "filename": "src/test/ui/consts/const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -10,6 +10,7 @@ fn black_box<T>(_: T) {\n \n const FOO: u8 = [5u8][1];\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     black_box((FOO, FOO));"}, {"sha": "0c963874a84963dbb23e64a6d0fb32166f8db858", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,15 +11,17 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:15:16\n+  --> $DIR/const-err.rs:16:16\n    |\n LL |     black_box((FOO, FOO));\n    |                ^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:15:21\n+  --> $DIR/const-err.rs:16:21\n    |\n LL |     black_box((FOO, FOO));\n    |                     ^^^ referenced constant has errors"}, {"sha": "9b99a685b63704929a6d01d469eb026e5e5acda4", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,9 +6,11 @@ const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     println!(\"{}\", FOO);\n     //~^ ERROR\n     //~| WARN erroneous constant used [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "356a7f58d8562eb36e1221c218e059ab05d70e2f", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,18 +11,23 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/conditional_array_execution.rs:11:20\n+  --> $DIR/conditional_array_execution.rs:12:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n warning: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:11:20\n+  --> $DIR/conditional_array_execution.rs:12:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "b11f7d6983bfa685539a27835d412189c73e7d55", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,46 +14,54 @@ const VALS_I8: (i8,) =\n      i8::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U8: (u8,) =\n     (\n      u8::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U16: (u16,) = (\n      u16::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U32: (u32,) = (\n      u32::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U64: (u64,) =\n     (\n      u64::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "66e86c352d15430b0c726e5208f7cd558c6bc04f", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -13,74 +13,97 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:20:6\n+  --> $DIR/const-eval-overflow2.rs:21:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:26:6\n+  --> $DIR/const-eval-overflow2.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:32:6\n+  --> $DIR/const-eval-overflow2.rs:35:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:38:6\n+  --> $DIR/const-eval-overflow2.rs:42:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n    | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:43:6\n+  --> $DIR/const-eval-overflow2.rs:48:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:48:6\n+  --> $DIR/const-eval-overflow2.rs:54:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:54:6\n+  --> $DIR/const-eval-overflow2.rs:61:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n "}, {"sha": "9c3ad8ef9b44e5a9b9dae2b98d1721b703d36939", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,46 +14,54 @@ const VALS_I8: (i8,) =\n      i8::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I16: (i16,) =\n     (\n      i16::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I32: (i32,) =\n     (\n      i32::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I64: (i64,) =\n     (\n      i64::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U16: (u16,) = (\n      u16::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U32: (u32,) = (\n      u32::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "3401ba4776500b03bd0e012df9d3c25859cac08f", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -13,74 +13,97 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:20:6\n+  --> $DIR/const-eval-overflow2b.rs:21:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:26:6\n+  --> $DIR/const-eval-overflow2b.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:32:6\n+  --> $DIR/const-eval-overflow2b.rs:35:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:38:6\n+  --> $DIR/const-eval-overflow2b.rs:42:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX + 1,\n    | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:43:6\n+  --> $DIR/const-eval-overflow2b.rs:48:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:48:6\n+  --> $DIR/const-eval-overflow2b.rs:54:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:54:6\n+  --> $DIR/const-eval-overflow2b.rs:61:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n "}, {"sha": "bac4d042e23c9afc2102c9d8a939edb1af6b7c78", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,46 +14,54 @@ const VALS_I8: (i8,) =\n      i8::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U16: (u16,) = (\n      u16::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U32: (u32,) = (\n      u32::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "93c64090f0eebaadbb3fec51affc10519d264114", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -13,74 +13,97 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:20:6\n+  --> $DIR/const-eval-overflow2c.rs:21:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:26:6\n+  --> $DIR/const-eval-overflow2c.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:32:6\n+  --> $DIR/const-eval-overflow2c.rs:35:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:38:6\n+  --> $DIR/const-eval-overflow2c.rs:42:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX * 2,\n    | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:43:6\n+  --> $DIR/const-eval-overflow2c.rs:48:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:48:6\n+  --> $DIR/const-eval-overflow2c.rs:54:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:54:6\n+  --> $DIR/const-eval-overflow2c.rs:61:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n "}, {"sha": "8c3959cc11a431c20c5fa78dd29eb27eb0663614", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -18,6 +18,7 @@\n \n #[warn(const_err)]\n const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let x: &'static i32 = &X;"}, {"sha": "6a205ce9787f920487abdbc7b5736e71412f3307", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,9 +11,11 @@ note: the lint level is defined here\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-query-stack.rs:23:28\n+  --> $DIR/const-eval-query-stack.rs:24:28\n    |\n LL |     let x: &'static i32 = &X;\n    |                            ^ referenced constant has errors"}, {"sha": "90bc191020e264b4abab3565cf8349fe59f223a8", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -27,12 +27,15 @@ fn main() {\n \n     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n     //~^ ERROR it is undefined behavior to use this value\n@@ -42,12 +45,15 @@ fn main() {\n \n     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n     //~^ ERROR it is undefined behavior to use this value\n@@ -57,55 +63,69 @@ fn main() {\n \n     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "ccd13784784e1c76e74151f69d8834408fc69e76", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 86, "deletions": 27, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -15,222 +15,281 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n    |                                           unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:31:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:32:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:36:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:37:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:40:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc18, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:40:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:43:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:43:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:46:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:46:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:50:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:49:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:54:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:52:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:58:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc38, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:55:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:61:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:58:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:64:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:61:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:68:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc50, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:64:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:71:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:67:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:75:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:70:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:79:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:73:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:83:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:76:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:87:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:79:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:91:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc71, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:82:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:94:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:85:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:98:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:102:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:91:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:106:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:94:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:110:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:97:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:113:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:100:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:117:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:103:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:121:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc95, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:106:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:124:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:109:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:128:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 29 previous errors\n "}, {"sha": "e9d66477d60a536d84170f0a28ce9fcef1c7e7a7", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -5,30 +5,40 @@ const MSG: &str = \"hello\";\n \n const Z: () = std::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z2: () = std::panic!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y: () = std::unreachable!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X: () = std::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n //\n const W: () = std::panic!(MSG);\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z_CORE: () = core::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z2_CORE: () = core::panic!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y_CORE: () = core::unreachable!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X_CORE: () = core::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const W_CORE: () = core::panic!(MSG);\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out"}, {"sha": "713be5b662d548c3893af5d1506add6a3a1db1db", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,96 +7,116 @@ LL | const Z: () = std::panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:9:16\n+  --> $DIR/const_panic.rs:10:16\n    |\n LL | const Z2: () = std::panic!();\n    | ---------------^^^^^^^^^^^^^-\n    |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:9:16\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:12:15\n+  --> $DIR/const_panic.rs:14:15\n    |\n LL | const Y: () = std::unreachable!();\n    | --------------^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:14:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:15:15\n+  --> $DIR/const_panic.rs:18:15\n    |\n LL | const X: () = std::unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:15:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:18:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:18:15\n+  --> $DIR/const_panic.rs:22:15\n    |\n LL | const W: () = std::panic!(MSG);\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:18:15\n+   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:21:20\n+  --> $DIR/const_panic.rs:26:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:21:20\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:26:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:24:21\n+  --> $DIR/const_panic.rs:30:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    | --------------------^^^^^^^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:24:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:30:21\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:27:20\n+  --> $DIR/const_panic.rs:34:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:27:20\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:34:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:30:20\n+  --> $DIR/const_panic.rs:38:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:30:20\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:38:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:33:20\n+  --> $DIR/const_panic.rs:42:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n    | -------------------^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:33:20\n+   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:42:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors"}, {"sha": "0eb1e3eb94e52589ac5ee7f65de4694ba3f2c0c9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -8,12 +8,15 @@ use core::panic::PanicInfo;\n \n const Z: () = panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y: () = unreachable!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X: () = unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n #[lang = \"eh_personality\"]\n fn eh() {}"}, {"sha": "7c33610faff0a272dc67b7dcc598c7df8d0d12fb", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,26 +7,32 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_bin.rs:12:15\n+  --> $DIR/const_panic_libcore_bin.rs:13:15\n    |\n LL | const Y: () = unreachable!();\n    | --------------^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:13:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_bin.rs:15:15\n+  --> $DIR/const_panic_libcore_bin.rs:17:15\n    |\n LL | const X: () = unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:17:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "c6a623b29327699971454ae03676a2bf090e8e8d", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,8 +6,11 @@ fn main() {}\n const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n // unconst and bad, will thus error in miri\n const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n+//~| WARN this was previously accepted by the compiler but is being phased out\n // unconst and fine\n const Z: i32 = unsafe { *(&1 as *const i32) };\n // unconst and bad, will thus error in miri\n const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause\n+//~| WARN this was previously accepted by the compiler but is being phased out"}, {"sha": "f207674ac1d019324337fbeb992ef1bda0f0ac43", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,22 +7,30 @@ LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n    |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops2.rs:12:26\n+  --> $DIR/const_raw_ptr_ops2.rs:13:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          unable to turn bytes into a pointer\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops2.rs:13:26\n+  --> $DIR/const_raw_ptr_ops2.rs:15:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          unable to turn bytes into a pointer\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "185d11605fdb589c91b5680fd21a4c4690803a9f", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,8 +6,10 @@ use std::mem;\n const TEST: () = { unsafe { //~ NOTE\n     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n     let _val = &*slice; //~ ERROR: any use of this value will cause an error\n-    //~^ NOTE: slice is bigger than largest supported object\n-    //~^^ on by default\n+    //~| NOTE: slice is bigger than largest supported object\n+    //~| on by default\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE\n } };\n \n fn main() {}"}, {"sha": "a7f7cf13c5b0f3b318d53df8f6dfe9cb9d66a994", "filename": "src/test/ui/consts/const-eval/dangling.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,11 +6,14 @@ LL | |     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n LL | |     let _val = &*slice;\n    | |                ^^^^^^^ invalid metadata in wide pointer: slice is bigger than largest supported object\n LL | |\n+...  |\n LL | |\n LL | | } };\n    | |____-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "b79ce4a523f9671ffe2b73fef8c6c4963bbde300", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -5,6 +5,7 @@ struct PrintName<T>(T);\n impl<T> PrintName<T> {\n     const VOID: () = [()][2]; //~WARN any use of this value will cause an error\n     //~^ WARN this operation will panic at runtime\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n const fn no_codegen<T>() {"}, {"sha": "16ed596628bf569b9c6198f967179e8124f08b19", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -23,18 +23,20 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/erroneous-const.rs:12:17\n+  --> $DIR/erroneous-const.rs:13:17\n    |\n LL |         let _ = PrintName::<T>::VOID;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 referenced constant has errors\n-   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:12:17\n+   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:13:17\n ...\n LL | pub static FOO: () = no_codegen::<i32>();\n-   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:16:22\n+   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:17:22\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "43d79badd72826e8d177523e8b285af8ef7c5f45", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -9,6 +9,7 @@ const fn foo() -> i32 {\n     unsafe {\n         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n         //~^ error: any use of this value will cause an error [const_err]\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n     }\n     1\n "}, {"sha": "3d529ab4ca6e599aa04bcc50b884376a76a1c813", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -12,6 +12,8 @@ LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n    |                 inside `FOO` at $DIR/alloc_intrinsic_errors.rs:7:18\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "8064cc49359eef4c36681f53155d2295c4e846c8", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -9,6 +9,7 @@ struct PrintName<T>(T);\n impl<T> PrintName<T> {\n     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n     //~^ WARN any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n }\n "}, {"sha": "73664fa49d189e8ee7d49d8cdc8d395a26bc01b3", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,9 +11,11 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n-  --> $DIR/index-out-of-bounds-never-type.rs:16:13\n+  --> $DIR/index-out-of-bounds-never-type.rs:17:13\n    |\n LL |     let _ = PrintName::<T>::VOID;\n    |             ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e15f8771dd73b1ff63cae00a4f2b32384288411a", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -9,11 +9,15 @@ const fn foo(x: u32) -> u32 {\n fn main() {\n     const X: u32 = 0 - 1;\n     //~^ WARN any use of this value will cause\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     const Y: u32 = foo(0 - 1);\n     //~^ WARN any use of this value will cause\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     println!(\"{} {}\", X, Y);\n     //~^ ERROR evaluation of constant value failed\n     //~| ERROR evaluation of constant value failed\n     //~| WARN erroneous constant used [const_err]\n     //~| WARN erroneous constant used [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "d4d8cbc669a7bf3a4a970eddda29d2cbf6f2e61d", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,38 +11,49 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:12:24\n+  --> $DIR/issue-43197.rs:13:24\n    |\n LL |     const Y: u32 = foo(0 - 1);\n    |     -------------------^^^^^--\n    |                        |\n    |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-43197.rs:14:23\n+  --> $DIR/issue-43197.rs:16:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:14:23\n+  --> $DIR/issue-43197.rs:16:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-43197.rs:14:26\n+  --> $DIR/issue-43197.rs:16:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:14:26\n+  --> $DIR/issue-43197.rs:16:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 2 previous errors; 4 warnings emitted\n "}, {"sha": "9fd9e8f36472d548961fde5565af967ddbf9102b", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -18,6 +18,7 @@ const fn wat(x: u64) -> &'static u64 {\n }\n const X: u64 = *wat(42);\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     println!(\"{}\", X);"}, {"sha": "0389471edb57ce84efaf6d9ec01d879c2a99394d", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const X: u64 = *wat(42);\n    |                pointer to alloc1 was dereferenced after this allocation got freed\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "15f4de0ae1b671c5c6b3c8b667a6472949eba204", "filename": "src/test/ui/consts/const-eval/issue-50814-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -12,6 +12,7 @@ struct A<T>(T);\n \n impl<T: C> Foo<T> for A<T> {\n     const BAR: usize = [5, 6, 7][T::BOO]; //~ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn foo<T: C>() -> &'static usize {"}, {"sha": "0c520165496768873e9bbc5879ca2c9bebba0bf0", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,9 +7,11 @@ LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |                        index out of bounds: the length is 3 but the index is 42\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-50814-2.rs:18:6\n+  --> $DIR/issue-50814-2.rs:19:6\n    |\n LL |     &<A<T> as Foo<T>>::BAR\n    |      ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "98229f919dd13ac9c8f27aa1ab7e06862274650d", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,6 +14,7 @@ struct Sum<A,B>(A,B);\n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n     const MAX: u8 = A::MAX + B::MAX;\n     //~^ ERROR any use of this value will cause an error [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn foo<T>(_: T) -> &'static u8 {"}, {"sha": "cf82d1eef3e4597f9c54eb73a3262a725df34cf3", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,9 +7,11 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-50814.rs:20:6\n+  --> $DIR/issue-50814.rs:21:6\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |      ^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "f76440298b3ca8e72c02a657acbb51fb1bcb5a4f", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -10,6 +10,7 @@ struct PrintName;\n impl PrintName {\n     const VOID: ! = panic!();\n     //~^ WARN any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn main() {"}, {"sha": "28a3ebede5038f4e1cbde1a6123a56ef15b0b85f", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,10 +11,12 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-assoc-never-type.rs:16:13\n+  --> $DIR/panic-assoc-never-type.rs:17:13\n    |\n LL |     let _ = PrintName::VOID;\n    |             ^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "c5139c575b15f009b7c3daf96716dd51376ae933", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,7 @@\n \n const VOID: ! = panic!();\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = VOID;"}, {"sha": "8f67dd6a8ba427c3f50b62236a9d1c5df306f580", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,10 +11,12 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-never-type.rs:12:13\n+  --> $DIR/panic-never-type.rs:13:13\n    |\n LL |     let _ = VOID;\n    |             ^^^^ referenced constant has errors"}, {"sha": "6f266801bdb4a65f5b6659f2f76d74b2cae35005", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,12 +6,12 @@ LL |       0 - 1\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n    |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+   |       inside `X` at $DIR/promoted_errors.rs:33:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n@@ -22,19 +22,24 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:31:28\n+  --> $DIR/promoted_errors.rs:33:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n    | |                            ^^^^^^^^^^^ referenced constant has errors\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 2 warnings emitted\n "}, {"sha": "892f57bfdfc1bc72c937c68c4e6bf78669b6b44b", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -1,17 +1,17 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:17:5\n+  --> $DIR/promoted_errors.rs:18:5\n    |\n LL |       1 / 0\n    |       ^^^^^\n    |       |\n    |       attempt to divide `1_i32` by zero\n-   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:17:5\n-   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:18:5\n+   |       inside `X` at $DIR/promoted_errors.rs:36:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n@@ -22,19 +22,25 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:33:28\n+  --> $DIR/promoted_errors.rs:36:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n+LL | |\n LL | |     let _x: &'static i32 = &div_by_zero1();\n    | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 2 warnings emitted\n "}, {"sha": "6f266801bdb4a65f5b6659f2f76d74b2cae35005", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,12 +6,12 @@ LL |       0 - 1\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n    |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+   |       inside `X` at $DIR/promoted_errors.rs:33:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n@@ -22,19 +22,24 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:31:28\n+  --> $DIR/promoted_errors.rs:33:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n    | |                            ^^^^^^^^^^^ referenced constant has errors\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 2 warnings emitted\n "}, {"sha": "7840f67c216c075a2597da756eadb013bb04c908", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -12,30 +12,33 @@\n const fn overflow() -> u32 {\n     0 - 1\n     //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+    //[opt_with_overflow_checks,noopt]~| WARN this was previously accepted by the compiler\n }\n const fn div_by_zero1() -> i32 {\n     1 / 0\n     //[opt]~^ WARN any use of this value will cause an error\n+    //[opt]~| WARN this was previously accepted by the compiler but is being phased out\n }\n const fn div_by_zero2() -> i32 {\n-    1 / (1-1)\n+    1 / (1 - 1)\n }\n const fn div_by_zero3() -> i32 {\n     1 / (false as i32)\n }\n const fn oob() -> i32 {\n-    [1,2,3][4]\n+    [1, 2, 3][4]\n }\n \n const X: () = {\n     let _x: &'static u32 = &overflow();\n     //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+    //[opt_with_overflow_checks,noopt]~| WARN this was previously accepted by the compiler\n     let _x: &'static i32 = &div_by_zero1();\n     //[opt]~^ WARN any use of this value will cause an error\n+    //[opt]~| WARN this was previously accepted by the compiler but is being phased out\n     let _x: &'static i32 = &div_by_zero2();\n     let _x: &'static i32 = &div_by_zero3();\n     let _x: &'static i32 = &oob();\n };\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "5faacd556d47957e632d0266f1c3228391b142db", "filename": "src/test/ui/consts/const-eval/pub_const_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -5,5 +5,6 @@\n \n pub const Z: u32 = 0 - 1;\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n pub type Foo = [i32; 0 - 1];"}, {"sha": "dd47dca2b2e40e8c3c8e3b8d968e66c30475f2c2", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,6 +11,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n "}, {"sha": "82eae25121e418a0e9d0aa2d17b4957e283782ff", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -3,6 +3,7 @@\n \n pub const Z: u32 = 0 - 1;\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n pub type Foo = [i32; 0 - 1];\n "}, {"sha": "9f413fb8fd770da3b70c45c64fbb51c613f702fe", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,6 +11,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n "}, {"sha": "e4ced600b4cc4f3564aa7c060abfa72e4888b397", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -16,6 +16,7 @@ const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n     let out_of_bounds_ptr = &ptr[255]; //~ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     mem::transmute(out_of_bounds_ptr)\n } };\n "}, {"sha": "94496b77fe7732f5d4ad5f6adb00d3f51f8bbb0c", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,6 +14,7 @@ LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n    | |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n+LL | |\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-\n@@ -23,41 +24,43 @@ note: the lint level is defined here\n    |\n LL | #[deny(const_err)] // this triggers a `const_err` so validation does not even happen\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:22:1\n+  --> $DIR/ub-nonnull.rs:23:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:24:1\n+  --> $DIR/ub-nonnull.rs:25:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:32:1\n+  --> $DIR/ub-nonnull.rs:33:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes at .0, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:40:1\n+  --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:46:1\n+  --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "3b4523681002edb4eace6fec1d84103bff2b60d9", "filename": "src/test/ui/consts/const-eval/unused-broken-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -4,5 +4,6 @@\n \n const FOO: i32 = [][0];\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "2ce60ec16a33f5ea5483eff9d0c9a801df65e359", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const FOO: i32 = [][0];\n    |                  index out of bounds: the length is 0 but the index is 0\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "10820986fa7d3f603e89e286c71c555507aa2e14", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -3,6 +3,7 @@\n #[unwind(aborts)]\n const fn foo() {\n     panic!() //~ ERROR any use of this value will cause an error [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n const _: () = foo();"}, {"sha": "f13f2bfe9b110a58263320f96b1c4d32e594a8f1", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,12 +6,14 @@ LL |     panic!()\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n    |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n-   |     inside `_` at $DIR/unwind-abort.rs:8:15\n+   |     inside `_` at $DIR/unwind-abort.rs:9:15\n ...\n LL | const _: () = foo();\n    | --------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "4e1c71cd6001342ffa0b113eab589af916a88a0a", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -5,6 +5,7 @@ const fn foo() -> ! {\n     unsafe { std::mem::transmute(()) }\n     //~^ WARN any use of this value will cause an error [const_err]\n     //~| WARN the type `!` does not permit zero-initialization [invalid_value]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n #[derive(Clone, Copy)]"}, {"sha": "3f22fac11f65da82d37b8dd2d573d2a3e61c1326", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,19 +6,21 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              |\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n-   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:14:26\n+   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:15:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n    | -----------------------------------\n    |\n note: the lint level is defined here\n-  --> $DIR/validate_uninhabited_zsts.rs:13:8\n+  --> $DIR/validate_uninhabited_zsts.rs:14:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:17:1\n+  --> $DIR/validate_uninhabited_zsts.rs:18:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Empty at [0]\n@@ -38,7 +40,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:17:35\n+  --> $DIR/validate_uninhabited_zsts.rs:18:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "440c42e32ef3958d134a4dd28a78a1d267762f1c", "filename": "src/test/ui/consts/const-external-macro-const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -10,4 +10,5 @@ use external_macro::static_assert;\n \n fn main() {\n     static_assert!(2 + 2 == 5); //~ ERROR\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "21fdffa115b83267289cbd3c85d30c4278918e51", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -5,6 +5,8 @@ LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "41d8f7a0972bc78951670c388907bfad556eae89", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,129 +14,176 @@ use std::intrinsics;\n \n const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // signed types:\n \n const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and make sure we capture y < 0:\n \n const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and that there's no special relation to the value -1 by picking some\n // negative values at random:\n \n const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // Repeat it all over for `unchecked_shr`\n \n // unsigned types:\n \n const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // signed types:\n \n const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and make sure we capture y < 0:\n \n const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and that there's no special relation to the value -1 by picking some\n // negative values at random:\n \n const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // Other arithmetic functions:\n \n const _: u16 = unsafe { std::intrinsics::unchecked_add(40000u16, 30000) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: u32 = unsafe { std::intrinsics::unchecked_sub(14u32, 22) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: u16 = unsafe { std::intrinsics::unchecked_mul(300u16, 250u16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: i32 = unsafe { std::intrinsics::unchecked_div(1, 0) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::MIN, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: i32 = unsafe { std::intrinsics::unchecked_rem(1, 0) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "e5ecbbc71a7f61d3d94db1fdc4134bc76c4c2c28", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 186, "deletions": 46, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,374 +7,514 @@ LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n    |                             overflowing shift by 8 in `unchecked_shl`\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:17:31\n+  --> $DIR/const-int-unchecked.rs:18:31\n    |\n LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:19:31\n+  --> $DIR/const-int-unchecked.rs:21:31\n    |\n LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:21:31\n+  --> $DIR/const-int-unchecked.rs:24:31\n    |\n LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:23:33\n+  --> $DIR/const-int-unchecked.rs:27:33\n    |\n LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:28:29\n+  --> $DIR/const-int-unchecked.rs:33:29\n    |\n LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             overflowing shift by 8 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:30:31\n+  --> $DIR/const-int-unchecked.rs:36:31\n    |\n LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:32:31\n+  --> $DIR/const-int-unchecked.rs:39:31\n    |\n LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:34:31\n+  --> $DIR/const-int-unchecked.rs:42:31\n    |\n LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:36:33\n+  --> $DIR/const-int-unchecked.rs:45:33\n    |\n LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:41:33\n+  --> $DIR/const-int-unchecked.rs:51:33\n    |\n LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 255 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:43:35\n+  --> $DIR/const-int-unchecked.rs:54:35\n    |\n LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 65535 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:45:35\n+  --> $DIR/const-int-unchecked.rs:57:35\n    |\n LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 4294967295 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:47:35\n+  --> $DIR/const-int-unchecked.rs:60:35\n    |\n LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 18446744073709551615 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:49:37\n+  --> $DIR/const-int-unchecked.rs:63:37\n    |\n LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:55:40\n+  --> $DIR/const-int-unchecked.rs:70:40\n    |\n LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        overflowing shift by 250 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:57:42\n+  --> $DIR/const-int-unchecked.rs:73:42\n    |\n LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 65523 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:59:42\n+  --> $DIR/const-int-unchecked.rs:76:42\n    |\n LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 4294967271 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:61:42\n+  --> $DIR/const-int-unchecked.rs:79:42\n    |\n LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 18446744073709551586 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:63:44\n+  --> $DIR/const-int-unchecked.rs:82:44\n    |\n LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:70:29\n+  --> $DIR/const-int-unchecked.rs:90:29\n    |\n LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             overflowing shift by 8 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:72:31\n+  --> $DIR/const-int-unchecked.rs:93:31\n    |\n LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:74:31\n+  --> $DIR/const-int-unchecked.rs:96:31\n    |\n LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:76:31\n+  --> $DIR/const-int-unchecked.rs:99:31\n    |\n LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:78:33\n+  --> $DIR/const-int-unchecked.rs:102:33\n    |\n LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:83:29\n+  --> $DIR/const-int-unchecked.rs:108:29\n    |\n LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             overflowing shift by 8 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:85:31\n+  --> $DIR/const-int-unchecked.rs:111:31\n    |\n LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:87:31\n+  --> $DIR/const-int-unchecked.rs:114:31\n    |\n LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:89:31\n+  --> $DIR/const-int-unchecked.rs:117:31\n    |\n LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:91:33\n+  --> $DIR/const-int-unchecked.rs:120:33\n    |\n LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:96:33\n+  --> $DIR/const-int-unchecked.rs:126:33\n    |\n LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 255 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:98:35\n+  --> $DIR/const-int-unchecked.rs:129:35\n    |\n LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 65535 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:100:35\n+  --> $DIR/const-int-unchecked.rs:132:35\n    |\n LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 4294967295 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:102:35\n+  --> $DIR/const-int-unchecked.rs:135:35\n    |\n LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 18446744073709551615 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:104:37\n+  --> $DIR/const-int-unchecked.rs:138:37\n    |\n LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:110:40\n+  --> $DIR/const-int-unchecked.rs:145:40\n    |\n LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        overflowing shift by 250 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:112:42\n+  --> $DIR/const-int-unchecked.rs:148:42\n    |\n LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 65523 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:114:42\n+  --> $DIR/const-int-unchecked.rs:151:42\n    |\n LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 4294967271 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:116:42\n+  --> $DIR/const-int-unchecked.rs:154:42\n    |\n LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 18446744073709551586 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:118:44\n+  --> $DIR/const-int-unchecked.rs:157:44\n    |\n LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:123:25\n+  --> $DIR/const-int-unchecked.rs:163:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_add(40000u16, 30000) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_add`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:126:25\n+  --> $DIR/const-int-unchecked.rs:167:25\n    |\n LL | const _: u32 = unsafe { std::intrinsics::unchecked_sub(14u32, 22) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_sub`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:129:25\n+  --> $DIR/const-int-unchecked.rs:171:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_mul(300u16, 250u16) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_mul`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:132:25\n+  --> $DIR/const-int-unchecked.rs:175:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(1, 0) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         dividing by zero\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:134:25\n+  --> $DIR/const-int-unchecked.rs:178:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::MIN, -1) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_div`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:137:25\n+  --> $DIR/const-int-unchecked.rs:182:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(1, 0) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         calculating the remainder with a divisor of zero\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:139:25\n+  --> $DIR/const-int-unchecked.rs:185:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_rem`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 47 previous errors\n "}, {"sha": "7c3d1f320f2f60e2ad19414b0fdf5786903e9ee0", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,6 +6,7 @@ const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();"}, {"sha": "70f645a6c40e83b6d5d484d6061630cef8b38474", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,9 +7,11 @@ LL | const LEN: usize = ONE - TWO;\n    |                    attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-len-underflow-separate-spans.rs:11:17\n+  --> $DIR/const-len-underflow-separate-spans.rs:12:17\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n    |                 ^^^ referenced constant has errors"}, {"sha": "90977efd2b4548e5140c3052e115cc064231d5e6", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -13,6 +13,7 @@ const fn helper() -> Option<&'static mut i32> { unsafe {\n     // Undefined behaviour (integer as pointer), who doesn't love tests like this.\n     // This code never gets executed, because the static checks fail before that.\n     Some(&mut *(42 as *mut i32)) //~ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n } }\n // The error is an evaluation error and not a validation error, so the error is reported\n // directly at the site where it occurs."}, {"sha": "45ae055614b57fd3f88be84892d6a746bd88cc81", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,15 +6,17 @@ LL |     Some(&mut *(42 as *mut i32))\n    |          |\n    |          unable to turn bytes into a pointer\n    |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:15:10\n-   |          inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:19:29\n+   |          inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:20:29\n ...\n LL | const A: Option<&mut i32> = helper();\n    | -------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: encountered dangling pointer in final constant\n-  --> $DIR/mut_ref_in_final_dynamic_check.rs:26:1\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:27:1\n    |\n LL | const B: Option<&mut i32> = helper2();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a65b707f012d00475e329fe947c8ad6ad8d90026", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -3,6 +3,7 @@\n #![allow(dead_code)]\n \n const TEST: u8 = MY_STATIC; //~ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "94d3f1c614544fe58a799724f10a9f168d6a601b", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const TEST: u8 = MY_STATIC;\n    |                  constant accesses static\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: skipping const checks\n    |"}, {"sha": "6653717778ba5afc594dd38149cfc98ede17b29b", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -9,6 +9,8 @@ extern \"C\" {\n }\n \n const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "a9211c17a6bc05e09339a14f9506ffa38d248f21", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,14 +7,19 @@ LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque\n    |                               `extern type` does not have known layout\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:12:32\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n    |\n LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n    | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                |\n    |                                `extern type` does not have known layout\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "35e5a4d2233feb11fa0a8cbdd2e26a77225e353d", "filename": "src/test/ui/consts/const-slice-oob.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -4,6 +4,7 @@ const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n //~^ index out of bounds: the length is 3 but the index is 5\n //~| ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = BAR;"}, {"sha": "6d2c79034d3919b0688aa800b23f4c2add6e49fc", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const BAR: u32 = FOO[5];\n    |                  index out of bounds: the length is 3 but the index is 5\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "86c2f1c4f8e135165ab932afe4f67f1bd3264567", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,6 +14,8 @@ LL | const BAR: i32 = Option::<i32>::None.unwrap();\n    | ----------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "773640b72e6ea9991de88fc26b632e2412fd14f8", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -5,6 +5,7 @@ const X: usize = {\n     let mut x = 0;\n     while x != 1000 {\n         //~^ ERROR any use of this value will cause an error\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n         x += 1;\n     }\n "}, {"sha": "10e54e0348cb7d45ecaf6866ffed2c4710cf8ea0", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,6 +6,7 @@ LL |  |     let mut x = 0;\n LL |  |     while x != 1000 {\n    |  |_____^\n LL | ||\n+LL | ||\n LL | ||         x += 1;\n LL | ||     }\n    | ||_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n@@ -15,6 +16,8 @@ LL |  | };\n    |  |__-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "0bd37876cc3f063a25b04556e74fad4da8f9a490", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -17,4 +17,5 @@ fn main() {\n   assert_eq!(BAR, true);\n   //~^ ERROR E0080\n   //~| ERROR erroneous constant\n+  //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "3f122b2a859120923adb8e4b0fea8bd024c66de0", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -19,6 +19,8 @@ note: the lint level is defined here\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_unsafe_unreachable_ub.rs:17:14\n@@ -33,6 +35,8 @@ LL |   assert_eq!(BAR, true);\n    |   ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors; 1 warning emitted"}, {"sha": "2f28c2e7bb6427845de4bb9b9ff5aea795b6b203", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const _: () = assert!(false);\n    |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a21f28604bdea3051400ee604707819550edd444", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -10,5 +10,6 @@ const _: () = assert!(true);\n const _: () = assert!(false);\n //[stock]~^ ERROR panicking in constants is unstable\n //[const_panic]~^^ ERROR any use of this value will cause an error\n+//[const_panic]~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "cc644404f7d7351de70b2c410b56faff0cca4cca", "filename": "src/test/ui/consts/issue-51559.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -3,5 +3,6 @@\n const BAR: *mut () = ((|| 3) as fn() -> i32) as *mut ();\n pub const FOO: usize = unsafe { BAR as usize };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "fbb40c890dd7bde007f26d1b75c500bf00e9d80f", "filename": "src/test/ui/consts/issue-51559.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | pub const FOO: usize = unsafe { BAR as usize };\n    |                                 \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "a0e8fc70b6acd939e7aee2adc2261ab24f2b4050", "filename": "src/test/ui/consts/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -16,6 +16,8 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7bbe9c87705a30608df439a55dd1f5e09a935252", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -26,13 +26,17 @@ const U8_MUT2: &u8 = { //~ NOTE\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n     //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE\n };\n #[warn(const_err)] //~ NOTE\n const U8_MUT3: &u8 = { //~ NOTE\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n     //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n     //~| NOTE in this expansion of panic!\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE\n };\n \n pub fn test(x: &[u8; 1]) -> bool {"}, {"sha": "a9d6fde6c05be52a979aad7b06adddf3501bb2a6", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -11,7 +11,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:44:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n@@ -29,7 +29,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:53:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n@@ -42,6 +42,8 @@ LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n+LL | |\n+LL | |\n LL | | };\n    | |__-\n    |\n@@ -50,57 +52,62 @@ note: the lint level is defined here\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:64:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n+...  |\n LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:72:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:44:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:53:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:64:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:72:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n@@ -138,27 +145,27 @@ help: skipping check that does not even have a feature gate\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "eb726f9cb113faf53af9c91514d38a18e6a64db1", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -20,6 +20,8 @@ LL | | };\n    | |__-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -38,6 +40,9 @@ LL | |\n LL | |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -59,6 +64,9 @@ LL | |     let field_ptr = &data[1] as *const u8 as *const u16;\n LL | |     unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -78,6 +86,9 @@ LL | |     let ptr = 0 as *const u8;\n LL | |     unsafe { ptr.offset_from(ptr) }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -98,6 +109,9 @@ LL | |     let ptr2 = 16 as *const u8;\n LL | |     unsafe { ptr2.offset_from(ptr1) }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5e8b7a8e0b698dd61776a4a8ab9bda5f0e7b4373", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,6 +14,8 @@ LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1)\n    | ------------------------------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -29,6 +31,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n    | --------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -44,6 +49,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n    | ------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -59,6 +67,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n    | ----------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -74,6 +85,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n    | -----------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -89,6 +103,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n    | ---------------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -104,6 +121,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n    | --------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -119,6 +139,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n    | -------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n@@ -134,6 +157,9 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n    | ---------------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -149,6 +175,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n    | -------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -164,6 +193,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n    | ---------------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 11 previous errors\n "}, {"sha": "0570d817fcce5309cb20d1fef6189372131e22eb", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -66,13 +66,19 @@ const _: *const u8 =\n     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| NOTE\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE \"pointer-to-integer cast\" needs an rfc\n //~| NOTE\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| NOTE\n \n const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE \"pointer-to-integer cast\" needs an rfc\n //~| NOTE\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| NOTE"}, {"sha": "c6c13e54137c5d00b665c010aa44c3eb0d155ef1", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -14,6 +14,8 @@ LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    | -------------------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:66:33\n@@ -24,22 +26,31 @@ LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 100\n    | |_________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n    |                                   |\n    |                                   memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:70:27\n+  --> $DIR/ptr_comparisons.rs:72:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:75:27\n+  --> $DIR/ptr_comparisons.rs:79:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0f0068ac3bdc13e1ebfa309fa0b13a02529860e3", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -15,6 +15,7 @@ fn main() {\n const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n //~^ ERROR any use of this value will cause an error\n //~| ERROR cannot transmute between types of different sizes\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // Once the `any use of this value will cause an error` disappears in this test, make sure to\n // remove the `TransmuteSizeDiff` error variant and make its emitter site an assertion again."}, {"sha": "6e93aed70b65adff716ffe2fa460b6a109a2b298", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    |                             transmuting `usize` to `&[u8]` is not possible, because these types do not have the same size\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/transmute-size-mismatch-before-typeck.rs:10:9"}, {"sha": "860628c39c371a5d8f580809f14b72a632a2c882", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -2,6 +2,7 @@\n \n pub const unsafe fn fake_type<T>() -> T {\n     hint_unreachable() //~ ERROR any use of this value will cause an error [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n pub const unsafe fn hint_unreachable() -> ! {"}, {"sha": "e98eefc11c3c83786a2a4ed9ae59474c9662a375", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 67, "deletions": 65, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -6,141 +6,143 @@ LL |     hint_unreachable()\n    |     |\n    |     reached the configured maximum number of stack frames\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:12:36\n+   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n ...\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |     ---------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: erroneous constant used\n-  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n+  --> $DIR/uninhabited-const-issue-61744.rs:19:10\n    |\n LL |     dbg!(i32::CONSTANT);\n    |          ^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "76dd857ea56163620b81bb0d77dad7f88dff0ab6", "filename": "src/test/ui/error-codes/E0396-fixed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -4,6 +4,7 @@ const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n }"}, {"sha": "521394bdc8e015c9b7b88c50ef46bbe5704e591e", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8477d352ac47c89199f27f2368138cb89beaea54/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=8477d352ac47c89199f27f2368138cb89beaea54", "patch": "@@ -7,6 +7,8 @@ LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    |                            unable to turn bytes into a pointer\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}]}