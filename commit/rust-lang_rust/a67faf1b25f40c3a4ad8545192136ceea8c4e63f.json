{"sha": "a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2N2ZhZjFiMjVmNDBjM2E0YWQ4NTQ1MTkyMTM2Y2VlYThjNGU2M2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-27T05:41:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-27T05:41:18Z"}, "message": "Change the trivial cast lints to allow by default", "tree": {"sha": "a8a4c4911ed287f175345042f8f14c3311aed086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a4c4911ed287f175345042f8f14c3311aed086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "html_url": "https://github.com/rust-lang/rust/commit/a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199bdcfeff5cfafd1f8e8ff583d7209272469879", "url": "https://api.github.com/repos/rust-lang/rust/commits/199bdcfeff5cfafd1f8e8ff583d7209272469879", "html_url": "https://github.com/rust-lang/rust/commit/199bdcfeff5cfafd1f8e8ff583d7209272469879"}], "stats": {"total": 40, "additions": 8, "deletions": 32}, "files": [{"sha": "2e6a35277062414022b8447aff66435ccb22a151", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -25,7 +25,6 @@\n #![doc(test(no_crate_inject))]\n \n #![allow(trivial_casts)]\n-#![allow(trivial_numeric_casts)]\n #![feature(alloc)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]"}, {"sha": "49da99b97cb206571b768a1e88e94b6ae86a6d1e", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -13,7 +13,6 @@\n // FIXME: #6220 Implement floating point formatting\n \n #![allow(unsigned_negation)]\n-#![allow(trivial_numeric_casts)]\n \n use fmt;\n use iter::IteratorExt;"}, {"sha": "5ea60d0d96d29f44943a0c751cf760d7c7deef0c", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i16\")]\n-#![allow(trivial_numeric_casts)]\n \n int_module! { i16, 16 }"}, {"sha": "7d9faa998c12e87769a8519d416b7085d802dcbf", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i32\")]\n-#![allow(trivial_numeric_casts)]\n \n int_module! { i32, 32 }"}, {"sha": "5a70911387b9b7192ab7a86fae52a90e77ddaa7b", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i64\")]\n-#![allow(trivial_numeric_casts)]\n \n int_module! { i64, 64 }"}, {"sha": "1d7d78ffa6c2352a20ad49cbfda99a0b3fc7ce17", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i8\")]\n-#![allow(trivial_numeric_casts)]\n \n int_module! { i8, 8 }"}, {"sha": "fe0d6d13c4c06483649bdbf737fe89c68048cf43", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![doc(hidden)]\n-#![allow(trivial_numeric_casts)]\n \n macro_rules! int_module { ($T:ty, $bits:expr) => (\n "}, {"sha": "0fd0d90b12501ea87b257bb523b56a1c6d0f1b47", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -16,7 +16,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"isize\")]\n-#![allow(trivial_numeric_casts)]\n \n #[cfg(target_pointer_width = \"32\")]\n int_module! { isize, 32 }"}, {"sha": "9ca7b48fbe5ef05b9a125ea7323266ce44cb0b4d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -14,7 +14,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n-#![allow(trivial_numeric_casts)]\n \n use self::wrapping::{OverflowingOps, WrappingOps};\n "}, {"sha": "21635799a77a26a458619bcd3b3431ce2ae0c7ba", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u16\")]\n-#![allow(trivial_numeric_casts)]\n \n uint_module! { u16, i16, 16 }"}, {"sha": "7d520770503d4b2507cb483afc8bcf04204ca443", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u32\")]\n-#![allow(trivial_numeric_casts)]\n \n uint_module! { u32, i32, 32 }"}, {"sha": "f10822077dc7511e3e44d12596e6e2198e0e941d", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u64\")]\n-#![allow(trivial_numeric_casts)]\n \n uint_module! { u64, i64, 64 }"}, {"sha": "3d6922b07b19407b325941dd14888e4fea334214", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -12,6 +12,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u8\")]\n-#![allow(trivial_numeric_casts)]\n \n uint_module! { u8, i8, 8 }"}, {"sha": "d0c4885ad00b77ebbfaef418cb230976e6955f21", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![doc(hidden)]\n-#![allow(trivial_numeric_casts)]\n \n macro_rules! uint_module { ($T:ty, $T_SIGNED:ty, $bits:expr) => (\n "}, {"sha": "602ef4fe45e734e0f1a931a2a50c98ce98e0511a", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -16,6 +16,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"usize\")]\n-#![allow(trivial_numeric_casts)]\n \n uint_module! { usize, isize, ::isize::BITS }"}, {"sha": "e6f27a28ffa7ca118d7d6595c33afe8ae54b5b51", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -10,8 +10,6 @@\n \n //! Generating numbers between two others.\n \n-#![allow(trivial_numeric_casts)]\n-\n // this is surprisingly complicated to be both generic & correct\n \n use core::prelude::{PartialOrd};"}, {"sha": "7ea62b7fd3f413b62d35b1d365872e645d3cc4ee", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -447,7 +447,6 @@ impl Rng for Isaac64Rng {\n \n     #[inline]\n     fn next_u64(&mut self) -> u64 {\n-        #![allow(trivial_numeric_casts)]\n         if self.cnt == 0 {\n             // make some more numbers\n             self.isaac64();"}, {"sha": "62ff7dd8131fb1d68bdb1577ee113101638c9747", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -48,7 +48,6 @@\n #![cfg_attr(test, feature(test))]\n \n #![allow(trivial_casts)]\n-#![allow(trivial_numeric_casts)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "9093cd00ca0014d4b729239ca382c95f055bd282", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -102,13 +102,13 @@ declare_lint! {\n \n declare_lint! {\n     pub TRIVIAL_CASTS,\n-    Warn,\n+    Allow,\n     \"detects trivial casts which could be removed\"\n }\n \n declare_lint! {\n     pub TRIVIAL_NUMERIC_CASTS,\n-    Warn,\n+    Allow,\n     \"detects trivial casts of numeric types which could be removed\"\n }\n /// Does nothing as a lint pass, but registers some `Lint`s"}, {"sha": "d128e6f1a5fdfe943851ffdc31689ee29d18bbf3", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -15,7 +15,6 @@\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n #![allow(trivial_casts)]\n-#![allow(trivial_numeric_casts)]\n \n #![crate_name = \"rustc_llvm\"]\n #![unstable(feature = \"rustc_private\")]"}, {"sha": "a9147205f7d062e4695a7948aa4f593f6274d3e0", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -44,7 +44,6 @@\n #![feature(path_relative_from)]\n \n #![allow(trivial_casts)]\n-#![allow(trivial_numeric_casts)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "3efe3a13562a1259d53d2a073a12a8720bbba9a5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -1105,14 +1105,18 @@ fn check_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, cast: &CastCheck<'tcx>) {\n                 fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_NUMERIC_CASTS,\n                                         e.id,\n                                         span,\n-                                        format!(\"trivial numeric cast: `{}` as `{}`\",\n+                                        format!(\"trivial numeric cast: `{}` as `{}`. Cast can be \\\n+                                                 replaced by coercion, this might require type \\\n+                                                 ascription or a temporary variable\",\n                                                 fcx.infcx().ty_to_string(t_e),\n                                                 fcx.infcx().ty_to_string(t_1)));\n             } else {\n                 fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_CASTS,\n                                         e.id,\n                                         span,\n-                                        format!(\"trivial cast: `{}` as `{}`\",\n+                                        format!(\"trivial cast: `{}` as `{}`. Cast can be \\\n+                                                 replaced by coercion, this might require type \\\n+                                                 ascription or a temporary variable\",\n                                                 fcx.infcx().ty_to_string(t_e),\n                                                 fcx.infcx().ty_to_string(t_1)));\n             }\n@@ -4595,8 +4599,6 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                      ty: attr::IntType,\n                      disr: ty::Disr) -> bool {\n         fn uint_in_range(ccx: &CrateCtxt, ty: ast::UintTy, disr: ty::Disr) -> bool {\n-            #![allow(trivial_numeric_casts)]\n-\n             match ty {\n                 ast::TyU8 => disr as u8 as Disr == disr,\n                 ast::TyU16 => disr as u16 as Disr == disr,\n@@ -4625,7 +4627,6 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                           id: ast::NodeId,\n                           hint: attr::ReprAttr)\n                           -> Vec<Rc<ty::VariantInfo<'tcx>>> {\n-        #![allow(trivial_numeric_casts)]\n         use std::num::Int;\n \n         let rty = ty::node_id_to_type(ccx.tcx, id);"}, {"sha": "acd2716106441ead5dd239a01977a5c0f824d33d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -2430,7 +2430,6 @@ macro_rules! to_json_impl_i64 {\n     ($($t:ty), +) => (\n         $(impl ToJson for $t {\n             fn to_json(&self) -> Json {\n-                #![allow(trivial_numeric_casts)]\n                 Json::I64(*self as i64)\n             }\n         })+\n@@ -2443,7 +2442,6 @@ macro_rules! to_json_impl_u64 {\n     ($($t:ty), +) => (\n         $(impl ToJson for $t {\n             fn to_json(&self) -> Json {\n-                #![allow(trivial_numeric_casts)]\n                 Json::U64(*self as u64)\n             }\n         })+"}, {"sha": "f3fb98e8c6683b8953d51e4d38da12aabdc0d714", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -136,7 +136,6 @@\n #![no_std]\n \n #![allow(trivial_casts)]\n-#![allow(trivial_numeric_casts)]\n #![deny(missing_docs)]\n \n #[cfg(test)] extern crate test;"}, {"sha": "c11ffe66e6c392305450dd13706994e6ba3ed812", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67faf1b25f40c3a4ad8545192136ceea8c4e63f/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=a67faf1b25f40c3a4ad8545192136ceea8c4e63f", "patch": "@@ -262,7 +262,6 @@ pub mod rt {\n         (unsigned, $t:ty, $tag:expr) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    #![allow(trivial_numeric_casts)]\n                     let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit($tag));\n                     pprust::lit_to_string(&dummy_spanned(lit))\n                 }"}]}