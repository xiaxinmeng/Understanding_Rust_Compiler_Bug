{"sha": "974caaff8fa76fdf41e990ce3754b39bd2db5a50", "node_id": "C_kwDOAAsO6NoAKDk3NGNhYWZmOGZhNzZmZGY0MWU5OTBjZTM3NTRiMzliZDJkYjVhNTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T15:34:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T15:34:32Z"}, "message": "Auto merge of #13339 - lowr:patch/change-generic-param-order, r=Veykril\n\nfix: treat enum variants as generic item on their own\n\nFixup for #13335\n\nIt turns out I tried to merge two procedures into one utility function without noticing the incompatibility.\n\nThis time I *did* run analysis-stats on the four crates and confirmed it doesn't crash and this patch doesn't cause regression.", "tree": {"sha": "27bf7bf5053bda2f52a552c1cff0d58c0b3b093f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27bf7bf5053bda2f52a552c1cff0d58c0b3b093f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/974caaff8fa76fdf41e990ce3754b39bd2db5a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/974caaff8fa76fdf41e990ce3754b39bd2db5a50", "html_url": "https://github.com/rust-lang/rust/commit/974caaff8fa76fdf41e990ce3754b39bd2db5a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/974caaff8fa76fdf41e990ce3754b39bd2db5a50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd98e36bc2102643cc6a93c2b894dd6a74be1c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd98e36bc2102643cc6a93c2b894dd6a74be1c2", "html_url": "https://github.com/rust-lang/rust/commit/5bd98e36bc2102643cc6a93c2b894dd6a74be1c2"}, {"sha": "e0a161b2e3a9345fd92fd3617e49648ee43ada86", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a161b2e3a9345fd92fd3617e49648ee43ada86", "html_url": "https://github.com/rust-lang/rust/commit/e0a161b2e3a9345fd92fd3617e49648ee43ada86"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "9ae752556d890df8161c55ea7f937f2fec581aa1", "filename": "crates/hir-ty/src/builder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/974caaff8fa76fdf41e990ce3754b39bd2db5a50/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974caaff8fa76fdf41e990ce3754b39bd2db5a50/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs?ref=974caaff8fa76fdf41e990ce3754b39bd2db5a50", "patch": "@@ -192,9 +192,7 @@ impl TyBuilder<()> {\n         parent_subst: Option<Substitution>,\n     ) -> TyBuilder<()> {\n         let generics = generics(db.upcast(), def.into());\n-        // FIXME: this assertion should hold but some adjustment around\n-        // `ValueTyDefId::EnumVariantId` is needed.\n-        // assert!(generics.parent_generics().is_some() == parent_subst.is_some());\n+        assert!(generics.parent_generics().is_some() == parent_subst.is_some());\n         let params = generics\n             .iter_self()\n             .map(|(id, data)| match data {"}, {"sha": "a77dd910ff7143cbb08b9069656d7b5ca0b30e3d", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/974caaff8fa76fdf41e990ce3754b39bd2db5a50/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974caaff8fa76fdf41e990ce3754b39bd2db5a50/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=974caaff8fa76fdf41e990ce3754b39bd2db5a50", "patch": "@@ -653,22 +653,26 @@ impl<'a> TyLoweringContext<'a> {\n         infer_args: bool,\n     ) -> Substitution {\n         let last = path.segments().last().expect(\"path should have at least one segment\");\n-        let generic_def = resolved.to_generic_def_id();\n-        let segment = match resolved {\n-            ValueTyDefId::EnumVariantId(_) => {\n+        let (segment, generic_def) = match resolved {\n+            ValueTyDefId::FunctionId(it) => (last, Some(it.into())),\n+            ValueTyDefId::StructId(it) => (last, Some(it.into())),\n+            ValueTyDefId::UnionId(it) => (last, Some(it.into())),\n+            ValueTyDefId::ConstId(it) => (last, Some(it.into())),\n+            ValueTyDefId::StaticId(_) => (last, None),\n+            ValueTyDefId::EnumVariantId(var) => {\n                 // the generic args for an enum variant may be either specified\n                 // on the segment referring to the enum, or on the segment\n                 // referring to the variant. So `Option::<T>::None` and\n                 // `Option::None::<T>` are both allowed (though the former is\n                 // preferred). See also `def_ids_for_path_segments` in rustc.\n                 let len = path.segments().len();\n                 let penultimate = len.checked_sub(2).and_then(|idx| path.segments().get(idx));\n-                match penultimate {\n+                let segment = match penultimate {\n                     Some(segment) if segment.args_and_bindings.is_some() => segment,\n                     _ => last,\n-                }\n+                };\n+                (segment, Some(var.parent.into()))\n             }\n-            _ => last,\n         };\n         self.substs_from_path_segment(segment, generic_def, infer_args, None)\n     }\n@@ -1660,7 +1664,7 @@ impl ValueTyDefId {\n             Self::FunctionId(id) => Some(id.into()),\n             Self::StructId(id) => Some(id.into()),\n             Self::UnionId(id) => Some(id.into()),\n-            Self::EnumVariantId(var) => Some(var.parent.into()),\n+            Self::EnumVariantId(var) => Some(var.into()),\n             Self::ConstId(id) => Some(id.into()),\n             Self::StaticId(_) => None,\n         }"}]}