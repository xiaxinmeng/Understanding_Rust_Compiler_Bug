{"sha": "7a1407387567beb0f300ddc3ae98e274259e2b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTQwNzM4NzU2N2JlYjBmMzAwZGRjM2FlOThlMjc0MjU5ZTJiNzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-25T02:51:27Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T18:01:42Z"}, "message": "move def_id to new rustc_hir crate", "tree": {"sha": "c09025074fea54d8d781a959d3759bb64178ca85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09025074fea54d8d781a959d3759bb64178ca85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a1407387567beb0f300ddc3ae98e274259e2b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1407387567beb0f300ddc3ae98e274259e2b78", "html_url": "https://github.com/rust-lang/rust/commit/7a1407387567beb0f300ddc3ae98e274259e2b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a1407387567beb0f300ddc3ae98e274259e2b78/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "html_url": "https://github.com/rust-lang/rust/commit/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91"}], "stats": {"total": 137, "additions": 117, "deletions": 20}, "files": [{"sha": "6c14056bdba528764af9f03aea71abd5ea29dced", "filename": "Cargo.lock", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -3091,6 +3091,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_fs_util\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_session\",\n@@ -3563,6 +3564,42 @@ dependencies = [\n name = \"rustc_fs_util\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"rustc_hir\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"arena\",\n+ \"backtrace\",\n+ \"bitflags\",\n+ \"byteorder\",\n+ \"chalk-engine\",\n+ \"fmt_macros\",\n+ \"graphviz\",\n+ \"jobserver\",\n+ \"log\",\n+ \"measureme\",\n+ \"num_cpus\",\n+ \"parking_lot\",\n+ \"polonius-engine\",\n+ \"rustc-rayon\",\n+ \"rustc-rayon-core\",\n+ \"rustc_apfloat\",\n+ \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_fs_util\",\n+ \"rustc_index\",\n+ \"rustc_macros\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"scoped-tls\",\n+ \"serialize\",\n+ \"smallvec 1.0.0\",\n+ \"syntax\",\n+]\n+\n [[package]]\n name = \"rustc_incremental\"\n version = \"0.0.0\"\n@@ -3603,6 +3640,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n+ \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_lint\",\n  \"rustc_metadata\","}, {"sha": "2e882cfdafdf3a57f4d25fe17a701bd24bc1afcb", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -23,6 +23,7 @@ rustc-rayon-core = \"0.3.0\"\n polonius-engine = \"0.11.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "d7d9990bb88282528f0b78c1fb11e62d56ae5af9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -34,7 +34,7 @@ use syntax::util::parser::ExprPrecedence;\n \n pub mod check_attr;\n pub mod def;\n-pub mod def_id;\n+pub use rustc_hir::def_id;\n pub mod intravisit;\n pub mod itemlikevisit;\n pub mod map;"}, {"sha": "24df1130368c944b5de741db6f362336df71fc26", "filename": "src/librustc_hir/Cargo.toml", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -0,0 +1,42 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_hir\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_hir\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+arena = { path = \"../libarena\" }\n+bitflags = \"1.2.1\"\n+fmt_macros = { path = \"../libfmt_macros\" }\n+graphviz = { path = \"../libgraphviz\" }\n+jobserver = \"0.1\"\n+num_cpus = \"1.0\"\n+scoped-tls = \"1.0\"\n+log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n+rustc-rayon = \"0.3.0\"\n+rustc-rayon-core = \"0.3.0\"\n+polonius-engine = \"0.11.0\"\n+rustc_apfloat = { path = \"../librustc_apfloat\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_index = { path = \"../librustc_index\" }\n+rustc_span = { path = \"../librustc_span\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+syntax = { path = \"../libsyntax\" }\n+backtrace = \"0.3.40\"\n+parking_lot = \"0.9\"\n+byteorder = { version = \"1.3\" }\n+chalk-engine = { version = \"0.9.0\", default-features=false }\n+rustc_fs_util = { path = \"../librustc_fs_util\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+measureme = \"0.5\"\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "f8cacdc6238e830ecdd1731594b9d8c34f807925", "filename": "src/librustc_hir/def_id.rs", "status": "renamed", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_hir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_hir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef_id.rs?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty;\n+use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n use std::fmt;\n use std::u32;\n@@ -40,7 +40,7 @@ impl Idx for CrateNum {\n     fn index(self) -> usize {\n         match self {\n             CrateNum::Index(idx) => Idx::index(idx),\n-            _ => bug!(\"Tried to get crate index of {:?}\", self),\n+            _ => panic!(\"Tried to get crate index of {:?}\", self),\n         }\n     }\n }\n@@ -61,14 +61,14 @@ impl CrateNum {\n     pub fn as_usize(self) -> usize {\n         match self {\n             CrateNum::Index(id) => id.as_usize(),\n-            _ => bug!(\"tried to get index of non-standard crate {:?}\", self),\n+            _ => panic!(\"tried to get index of non-standard crate {:?}\", self),\n         }\n     }\n \n     pub fn as_u32(self) -> u32 {\n         match self {\n             CrateNum::Index(id) => id.as_u32(),\n-            _ => bug!(\"tried to get index of non-standard crate {:?}\", self),\n+            _ => panic!(\"tried to get index of non-standard crate {:?}\", self),\n         }\n     }\n \n@@ -113,21 +113,6 @@ pub struct DefId {\n     pub index: DefIndex,\n }\n \n-impl fmt::Debug for DefId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"DefId({}:{}\", self.krate, self.index.index())?;\n-\n-        ty::tls::with_opt(|opt_tcx| {\n-            if let Some(tcx) = opt_tcx {\n-                write!(f, \" ~ {}\", tcx.def_path_debug_str(*self))?;\n-            }\n-            Ok(())\n-        })?;\n-\n-        write!(f, \")\")\n-    }\n-}\n-\n impl DefId {\n     /// Makes a local `DefId` from the given `DefIndex`.\n     #[inline]\n@@ -153,6 +138,19 @@ impl DefId {\n impl rustc_serialize::UseSpecializedEncodable for DefId {}\n impl rustc_serialize::UseSpecializedDecodable for DefId {}\n \n+pub fn default_def_id_debug(def_id: DefId, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    f.debug_struct(\"DefId\").field(\"krate\", &def_id.krate).field(\"index\", &def_id.index).finish()\n+}\n+\n+pub static DEF_ID_DEBUG: AtomicRef<fn(DefId, &mut fmt::Formatter<'_>) -> fmt::Result> =\n+    AtomicRef::new(&(default_def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+\n+impl fmt::Debug for DefId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        (*DEF_ID_DEBUG)(*self, f)\n+    }\n+}\n+\n rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefId);\n \n /// A LocalDefId is equivalent to a DefId with `krate == LOCAL_CRATE`. Since", "previous_filename": "src/librustc/hir/def_id.rs"}, {"sha": "1ef1694c32018ed9233eeaa2730c174f16dd8dca", "filename": "src/librustc_hir/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -0,0 +1,3 @@\n+#![feature(specialization)]\n+\n+pub mod def_id;"}, {"sha": "be60b75bc47eb26171ebda49bb8037eb6802019e", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -27,6 +27,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_codegen_llvm = { path = \"../librustc_codegen_llvm\", optional = true }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_passes = { path = \"../librustc_passes\" }"}, {"sha": "eb9c118bb0100d8345ee53b09327d84a2707e94f", "filename": "src/librustc_interface/callbacks.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_interface%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1407387567beb0f300ddc3ae98e274259e2b78/src%2Flibrustc_interface%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fcallbacks.rs?ref=7a1407387567beb0f300ddc3ae98e274259e2b78", "patch": "@@ -40,9 +40,23 @@ fn track_diagnostic(diagnostic: &Diagnostic) {\n     })\n }\n \n+/// This is a callback from librustc_hir as it cannot access the implicit state\n+/// in librustc otherwise.\n+fn def_id_debug(def_id: rustc_hir::def_id::DefId, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    write!(f, \"DefId({}:{}\", def_id.krate, def_id.index.index())?;\n+    tls::with_opt(|opt_tcx| {\n+        if let Some(tcx) = opt_tcx {\n+            write!(f, \" ~ {}\", tcx.def_path_debug_str(def_id))?;\n+        }\n+        Ok(())\n+    })?;\n+    write!(f, \")\")\n+}\n+\n /// Sets up the callbacks in prior crates which we want to refer to the\n /// TyCtxt in.\n pub fn setup_callbacks() {\n     rustc_span::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+    rustc_hir::def_id::DEF_ID_DEBUG.swap(&(def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n }"}]}