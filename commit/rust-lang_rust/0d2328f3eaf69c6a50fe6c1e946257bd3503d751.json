{"sha": "0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjMyOGYzZWFmNjljNmE1MGZlNmMxZTk0NjI1N2JkMzUwM2Q3NTE=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-06-05T15:41:58Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-06-05T15:41:58Z"}, "message": "Review fixes", "tree": {"sha": "ae6cfd699840c47bc1e051a0b3c13d62babd5177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae6cfd699840c47bc1e051a0b3c13d62babd5177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "html_url": "https://github.com/rust-lang/rust/commit/0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02962b374ecefd6f2a75956f4fb18806531d1d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/02962b374ecefd6f2a75956f4fb18806531d1d51", "html_url": "https://github.com/rust-lang/rust/commit/02962b374ecefd6f2a75956f4fb18806531d1d51"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "693cd40cf311b847a651eee6954ce4cdb0d8e921", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "patch": "@@ -18,8 +18,8 @@ pub use hir_ty::db::{\n     GenericDefaultsQuery, GenericPredicatesForParamQuery, GenericPredicatesQuery, HirDatabase,\n     HirDatabaseStorage, ImplDatumQuery, ImplSelfTyQuery, ImplTraitQuery, ImplsForTraitQuery,\n     ImplsInCrateQuery, InferQueryQuery, InternAssocTyValueQuery, InternChalkImplQuery,\n-    InternTypeCtorQuery, InternTypeParamIdQuery, StructDatumQuery, TraitDatumQuery,\n-    TraitSolveQuery, TyQuery, ValueTyQuery,\n+    InternTypeCtorQuery, InternTypeParamIdQuery, ReturnTypeImplTraitsQuery, StructDatumQuery,\n+    TraitDatumQuery, TraitSolveQuery, TyQuery, ValueTyQuery,\n };\n \n #[test]"}, {"sha": "3c97e13545e3f538464bf2ace92f5468e74d03a0", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "patch": "@@ -4,7 +4,7 @@ use std::fmt;\n \n use crate::{\n     db::HirDatabase, utils::generics, ApplicationTy, CallableDef, FnSig, GenericPredicate,\n-    Obligation, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n+    Obligation, OpaqueTyId, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n use hir_def::{\n     find_path, generics::TypeParamProvenance, item_scope::ItemInNs, AdtId, AssocContainerId,\n@@ -361,7 +361,7 @@ impl HirDisplay for ApplicationTy {\n             }\n             TypeCtor::OpaqueType(opaque_ty_id) => {\n                 let bounds = match opaque_ty_id {\n-                    crate::OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n                         let datas =\n                             f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n                         let data = (*datas)\n@@ -448,7 +448,7 @@ impl HirDisplay for Ty {\n             }\n             Ty::Opaque(opaque_ty) => {\n                 let bounds = match opaque_ty.opaque_ty_id {\n-                    crate::OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n                         let datas =\n                             f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n                         let data = (*datas)"}, {"sha": "a05cbd7fcf0009658072bb04af3033d4c088de14", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "patch": "@@ -21,8 +21,10 @@ use hir_def::{\n     HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n     UnionId, VariantId,\n };\n+use hir_expand::name::Name;\n use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n+use test_utils::mark;\n \n use crate::{\n     db::HirDatabase,\n@@ -35,7 +37,6 @@ use crate::{\n     ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait, ReturnTypeImplTraits, Substs,\n     TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n-use hir_expand::name::Name;\n \n #[derive(Debug)]\n pub struct TyLoweringContext<'a> {\n@@ -220,10 +221,7 @@ impl Ty {\n \n                         let func = match ctx.resolver.generic_def() {\n                             Some(GenericDefId::FunctionId(f)) => f,\n-                            _ => {\n-                                // this shouldn't happen\n-                                return (Ty::Unknown, None);\n-                            }\n+                            _ => panic!(\"opaque impl trait lowering in non-function\"),\n                         };\n                         let impl_trait_id = OpaqueTyId::ReturnTypeImplTrait(func, idx);\n                         let generics = generics(ctx.db.upcast(), func.into());\n@@ -719,6 +717,7 @@ fn assoc_type_bindings_from_type_bound<'a>(\n \n impl ReturnTypeImplTrait {\n     fn from_hir(ctx: &TyLoweringContext, bounds: &[TypeBound]) -> Self {\n+        mark::hit!(lower_rpit);\n         let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n         let predicates = ctx.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n             bounds"}, {"sha": "0c538a62d9208e890226628d54493183b1feca51", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 58, "deletions": 15, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "patch": "@@ -1160,7 +1160,37 @@ fn test(x: impl Trait<u64>, y: &impl Trait<u64>) {\n }\n \n #[test]\n-fn return_pos_impl_trait() {\n+fn simple_return_pos_impl_trait() {\n+    mark::check!(lower_rpit);\n+    assert_snapshot!(\n+        infer(r#\"\n+trait Trait<T> {\n+    fn foo(&self) -> T;\n+}\n+fn bar() -> impl Trait<u64> { loop {} }\n+\n+fn test() {\n+    let a = bar();\n+    a.foo();\n+}\n+\"#),\n+        @r###\"\n+    30..34 'self': &Self\n+    72..83 '{ loop {} }': !\n+    74..81 'loop {}': !\n+    79..81 '{}': ()\n+    95..130 '{     ...o(); }': ()\n+    105..106 'a': impl Trait<u64>\n+    109..112 'bar': fn bar() -> impl Trait<u64>\n+    109..114 'bar()': impl Trait<u64>\n+    120..121 'a': impl Trait<u64>\n+    120..127 'a.foo()': u64\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn more_return_pos_impl_trait() {\n     assert_snapshot!(\n         infer(r#\"\n trait Iterator {\n@@ -1174,12 +1204,12 @@ fn bar() -> (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>) { loop {} }\n fn baz<T>(t: T) -> (impl Iterator<Item = impl Trait<T>>, impl Trait<T>) { loop {} }\n \n fn test() {\n-    // let (a, b) = bar();\n-    // a.next().foo();\n-    // b.foo();\n+    let (a, b) = bar();\n+    a.next().foo();\n+    b.foo();\n     let (c, d) = baz(1u128);\n-    c.next();//.foo();\n-    // d.foo();\n+    c.next().foo();\n+    d.foo();\n }\n \"#),\n         @r###\"\n@@ -1192,15 +1222,28 @@ fn test() {\n     269..280 '{ loop {} }': ({unknown}, {unknown})\n     271..278 'loop {}': !\n     276..278 '{}': ()\n-    292..429 '{     ...o(); }': ()\n-    368..374 '(c, d)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n-    369..370 'c': impl Iterator<Item = impl Trait<u128>>\n-    372..373 'd': impl Trait<u128>\n-    377..380 'baz': fn baz<u128>(u128) -> (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n-    377..387 'baz(1u128)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n-    381..386 '1u128': u128\n-    393..394 'c': impl Iterator<Item = impl Trait<u128>>\n-    393..401 'c.next()': impl Trait<u128>\n+    292..414 '{     ...o(); }': ()\n+    302..308 '(a, b)': (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n+    303..304 'a': impl Iterator<Item = impl Trait<u32>>\n+    306..307 'b': impl Trait<u64>\n+    311..314 'bar': fn bar() -> (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n+    311..316 'bar()': (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n+    322..323 'a': impl Iterator<Item = impl Trait<u32>>\n+    322..330 'a.next()': impl Trait<u32>\n+    322..336 'a.next().foo()': u32\n+    342..343 'b': impl Trait<u64>\n+    342..349 'b.foo()': u64\n+    359..365 '(c, d)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n+    360..361 'c': impl Iterator<Item = impl Trait<u128>>\n+    363..364 'd': impl Trait<u128>\n+    368..371 'baz': fn baz<u128>(u128) -> (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n+    368..378 'baz(1u128)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n+    372..377 '1u128': u128\n+    384..385 'c': impl Iterator<Item = impl Trait<u128>>\n+    384..392 'c.next()': impl Trait<u128>\n+    384..398 'c.next().foo()': u128\n+    404..405 'd': impl Trait<u128>\n+    404..411 'd.foo()': u128\n     \"###\n     );\n }"}, {"sha": "1f4d2c076570cd8fc14bda6a7798be54baa0119d", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2328f3eaf69c6a50fe6c1e946257bd3503d751/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=0d2328f3eaf69c6a50fe6c1e946257bd3503d751", "patch": "@@ -369,6 +369,7 @@ impl RootDatabase {\n             hir::db::ImplDatumQuery\n             hir::db::AssociatedTyValueQuery\n             hir::db::TraitSolveQuery\n+            hir::db::ReturnTypeImplTraitsQuery\n \n             // SymbolsDatabase\n             crate::symbol_index::FileSymbolsQuery"}]}