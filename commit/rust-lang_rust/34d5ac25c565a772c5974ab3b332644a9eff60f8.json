{"sha": "34d5ac25c565a772c5974ab3b332644a9eff60f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZDVhYzI1YzU2NWE3NzJjNTk3NGFiM2IzMzI2NDRhOWVmZjYwZjg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-01T23:17:51Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-03T21:42:53Z"}, "message": "Make panic/assert calls in rustc compatible with Rust 2021.", "tree": {"sha": "47b5c23a901e6ae0a81f3743d96e51120e42b0f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47b5c23a901e6ae0a81f3743d96e51120e42b0f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34d5ac25c565a772c5974ab3b332644a9eff60f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34d5ac25c565a772c5974ab3b332644a9eff60f8", "html_url": "https://github.com/rust-lang/rust/commit/34d5ac25c565a772c5974ab3b332644a9eff60f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34d5ac25c565a772c5974ab3b332644a9eff60f8/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a616f8267ed9b9c45cdef81346e98aae06a70990", "url": "https://api.github.com/repos/rust-lang/rust/commits/a616f8267ed9b9c45cdef81346e98aae06a70990", "html_url": "https://github.com/rust-lang/rust/commit/a616f8267ed9b9c45cdef81346e98aae06a70990"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "024d9687f311940710bac84eb21f04f908aa8383", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d5ac25c565a772c5974ab3b332644a9eff60f8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d5ac25c565a772c5974ab3b332644a9eff60f8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=34d5ac25c565a772c5974ab3b332644a9eff60f8", "patch": "@@ -28,7 +28,7 @@ pub trait ExpectOne<A: Array> {\n \n impl<A: Array> ExpectOne<A> for SmallVec<A> {\n     fn expect_one(self, err: &'static str) -> A::Item {\n-        assert!(self.len() == 1, err);\n+        assert!(self.len() == 1, \"{}\", err);\n         self.into_iter().next().unwrap()\n     }\n }"}, {"sha": "aa88233209940c13e756ae1e5764a55d18d94902", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d5ac25c565a772c5974ab3b332644a9eff60f8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d5ac25c565a772c5974ab3b332644a9eff60f8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=34d5ac25c565a772c5974ab3b332644a9eff60f8", "patch": "@@ -901,7 +901,7 @@ impl HandlerInner {\n \n     fn span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), sp);\n-        panic!(ExplicitBug);\n+        panic::panic_any(ExplicitBug);\n     }\n \n     fn emit_diag_at_span(&mut self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n@@ -955,7 +955,7 @@ impl HandlerInner {\n \n     fn bug(&mut self, msg: &str) -> ! {\n         self.emit_diagnostic(&Diagnostic::new(Bug, msg));\n-        panic!(ExplicitBug);\n+        panic::panic_any(ExplicitBug);\n     }\n \n     fn delay_as_bug(&mut self, diagnostic: Diagnostic) {"}, {"sha": "791d5060fe5c7b953c49acf4185012969888f636", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d5ac25c565a772c5974ab3b332644a9eff60f8/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d5ac25c565a772c5974ab3b332644a9eff60f8/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=34d5ac25c565a772c5974ab3b332644a9eff60f8", "patch": "@@ -3,7 +3,7 @@\n use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n-use std::panic::Location;\n+use std::panic::{panic_any, Location};\n \n #[cold]\n #[inline(never)]\n@@ -32,7 +32,7 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n         match (tcx, span) {\n             (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n-            (None, _) => panic!(msg),\n+            (None, _) => panic_any(msg),\n         }\n     });\n     unreachable!();"}]}