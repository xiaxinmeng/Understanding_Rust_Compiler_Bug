{"sha": "879f8de4096b2db4769e64e4c1af5ffb10b53a22", "node_id": "C_kwDOAAsO6NoAKDg3OWY4ZGU0MDk2YjJkYjQ3NjllNjRlNGMxYWY1ZmZiMTBiNTNhMjI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-02T12:35:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-05T19:33:44Z"}, "message": "Correctly handle associated items of a trait inside a `#[doc(hidden)]` item", "tree": {"sha": "a9c6d867409e870625cdce0a69e118a54a22a26b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c6d867409e870625cdce0a69e118a54a22a26b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879f8de4096b2db4769e64e4c1af5ffb10b53a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879f8de4096b2db4769e64e4c1af5ffb10b53a22", "html_url": "https://github.com/rust-lang/rust/commit/879f8de4096b2db4769e64e4c1af5ffb10b53a22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879f8de4096b2db4769e64e4c1af5ffb10b53a22/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b778688f913bf6d3735b0b603b41c6989f513399", "url": "https://api.github.com/repos/rust-lang/rust/commits/b778688f913bf6d3735b0b603b41c6989f513399", "html_url": "https://github.com/rust-lang/rust/commit/b778688f913bf6d3735b0b603b41c6989f513399"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "c0730e90740ebf02e06641a0fd9af3f04177b7f9", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/879f8de4096b2db4769e64e4c1af5ffb10b53a22/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879f8de4096b2db4769e64e4c1af5ffb10b53a22/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=879f8de4096b2db4769e64e4c1af5ffb10b53a22", "patch": "@@ -195,7 +195,13 @@ impl Cache {\n impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         if item.item_id.is_local() {\n-            debug!(\"folding {} \\\"{:?}\\\", id {:?}\", item.type_(), item.name, item.item_id);\n+            let is_stripped = matches!(*item.kind, clean::ItemKind::StrippedItem(..));\n+            debug!(\n+                \"folding {} (stripped: {is_stripped:?}) \\\"{:?}\\\", id {:?}\",\n+                item.type_(),\n+                item.name,\n+                item.item_id\n+            );\n         }\n \n         // If this is a stripped module,"}, {"sha": "972b0c5ec190ea85d0c53d0781c20b4601aff48d", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/879f8de4096b2db4769e64e4c1af5ffb10b53a22/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879f8de4096b2db4769e64e4c1af5ffb10b53a22/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=879f8de4096b2db4769e64e4c1af5ffb10b53a22", "patch": "@@ -1,5 +1,6 @@\n //! Strip all doc(hidden) items from the output.\n \n+use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n use std::mem;\n@@ -29,6 +30,7 @@ pub(crate) fn strip_hidden(krate: clean::Crate, cx: &mut DocContext<'_>) -> clea\n             update_retained: true,\n             tcx: cx.tcx,\n             is_in_hidden_item: false,\n+            last_reexport: None,\n         };\n         stripper.fold_crate(krate)\n     };\n@@ -49,13 +51,24 @@ struct Stripper<'a, 'tcx> {\n     update_retained: bool,\n     tcx: TyCtxt<'tcx>,\n     is_in_hidden_item: bool,\n+    last_reexport: Option<LocalDefId>,\n }\n \n impl<'a, 'tcx> Stripper<'a, 'tcx> {\n+    fn set_last_reexport_then_fold_item(&mut self, i: Item) -> Item {\n+        let prev_from_reexport = self.last_reexport;\n+        if i.inline_stmt_id.is_some() {\n+            self.last_reexport = i.item_id.as_def_id().and_then(|def_id| def_id.as_local());\n+        }\n+        let ret = self.fold_item_recur(i);\n+        self.last_reexport = prev_from_reexport;\n+        ret\n+    }\n+\n     fn set_is_in_hidden_item_and_fold(&mut self, is_in_hidden_item: bool, i: Item) -> Item {\n         let prev = self.is_in_hidden_item;\n         self.is_in_hidden_item |= is_in_hidden_item;\n-        let ret = self.fold_item_recur(i);\n+        let ret = self.set_last_reexport_then_fold_item(i);\n         self.is_in_hidden_item = prev;\n         ret\n     }\n@@ -64,7 +77,7 @@ impl<'a, 'tcx> Stripper<'a, 'tcx> {\n     /// of `is_in_hidden_item` to `true` because the impl children inherit its visibility.\n     fn recurse_in_impl_or_exported_macro(&mut self, i: Item) -> Item {\n         let prev = mem::replace(&mut self.is_in_hidden_item, false);\n-        let ret = self.fold_item_recur(i);\n+        let ret = self.set_last_reexport_then_fold_item(i);\n         self.is_in_hidden_item = prev;\n         ret\n     }\n@@ -86,13 +99,20 @@ impl<'a, 'tcx> DocFolder for Stripper<'a, 'tcx> {\n         if !is_impl_or_exported_macro {\n             is_hidden = self.is_in_hidden_item || has_doc_hidden;\n             if !is_hidden && i.inline_stmt_id.is_none() {\n-                // We don't need to check if it's coming from a reexport since the reexport itself was\n-                // already checked.\n+                // `i.inline_stmt_id` is `Some` if the item is directly reexported. If it is, we\n+                // don't need to check it, because the reexport itself was already checked.\n+                //\n+                // If this item is the child of a reexported module, `self.last_reexport` will be\n+                // `Some` even though `i.inline_stmt_id` is `None`. Hiddenness inheritance needs to\n+                // account for the possibility that an item's true parent module is hidden, but it's\n+                // inlined into a visible module true. This code shouldn't be reachable if the\n+                // module's reexport is itself hidden, for the same reason it doesn't need to be\n+                // checked if `i.inline_stmt_id` is Some: hidden reexports are never inlined.\n                 is_hidden = i\n                     .item_id\n                     .as_def_id()\n                     .and_then(|def_id| def_id.as_local())\n-                    .map(|def_id| inherits_doc_hidden(self.tcx, def_id))\n+                    .map(|def_id| inherits_doc_hidden(self.tcx, def_id, self.last_reexport))\n                     .unwrap_or(false);\n             }\n         }"}, {"sha": "a6c2404138052890b2d3cec49c568db5f0d859c3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/879f8de4096b2db4769e64e4c1af5ffb10b53a22/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879f8de4096b2db4769e64e4c1af5ffb10b53a22/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=879f8de4096b2db4769e64e4c1af5ffb10b53a22", "patch": "@@ -500,19 +500,14 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n \n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n         self.visit_item_inner(i, None, None);\n-        let new_value = if self.is_importable_from_parent {\n-            matches!(\n+        let new_value = self.is_importable_from_parent\n+            && matches!(\n                 i.kind,\n                 hir::ItemKind::Mod(..)\n                     | hir::ItemKind::ForeignMod { .. }\n                     | hir::ItemKind::Impl(..)\n                     | hir::ItemKind::Trait(..)\n-            )\n-        } else {\n-            // Whatever the context, if it's an impl block, the items inside it can be used so they\n-            // should be visible.\n-            matches!(i.kind, hir::ItemKind::Impl(..))\n-        };\n+            );\n         let prev = mem::replace(&mut self.is_importable_from_parent, new_value);\n         walk_item(self, i);\n         self.is_importable_from_parent = prev;"}]}