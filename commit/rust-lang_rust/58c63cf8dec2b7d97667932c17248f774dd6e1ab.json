{"sha": "58c63cf8dec2b7d97667932c17248f774dd6e1ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YzYzY2Y4ZGVjMmI3ZDk3NjY3OTMyYzE3MjQ4Zjc3NGRkNmUxYWI=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2020-12-10T12:20:07Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-10T11:18:41Z"}, "message": "Add support for using qualified paths with structs in expression and pattern\nposition.", "tree": {"sha": "84d2dd1263f85b38557898b9462612f298aec81d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d2dd1263f85b38557898b9462612f298aec81d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58c63cf8dec2b7d97667932c17248f774dd6e1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58c63cf8dec2b7d97667932c17248f774dd6e1ab", "html_url": "https://github.com/rust-lang/rust/commit/58c63cf8dec2b7d97667932c17248f774dd6e1ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58c63cf8dec2b7d97667932c17248f774dd6e1ab/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e243be6adad16ad65c3349e476d528d1f416ed59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e243be6adad16ad65c3349e476d528d1f416ed59", "html_url": "https://github.com/rust-lang/rust/commit/e243be6adad16ad65c3349e476d528d1f416ed59"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "bca9f77f959e3aa5c118552babd65338b99325c0", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58c63cf8dec2b7d97667932c17248f774dd6e1ab/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c63cf8dec2b7d97667932c17248f774dd6e1ab/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=58c63cf8dec2b7d97667932c17248f774dd6e1ab", "patch": "@@ -107,7 +107,9 @@ pub(crate) fn format_expr(\n         }\n         ast::ExprKind::Unary(op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n         ast::ExprKind::Struct(ref struct_expr) => {\n-            let ast::StructExpr { fields, path, rest } = &**struct_expr;\n+            let ast::StructExpr {\n+                fields, path, rest, ..\n+            } = &**struct_expr;\n             rewrite_struct_lit(context, path, fields, rest, &expr.attrs, expr.span, shape)\n         }\n         ast::ExprKind::Tup(ref items) => {"}, {"sha": "fa0ef260991d7355af6d0bcc30b098381bad8233", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58c63cf8dec2b7d97667932c17248f774dd6e1ab/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c63cf8dec2b7d97667932c17248f774dd6e1ab/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=58c63cf8dec2b7d97667932c17248f774dd6e1ab", "patch": "@@ -45,7 +45,7 @@ fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n         | ast::PatKind::Path(..)\n         | ast::PatKind::Range(..) => false,\n         ast::PatKind::Tuple(ref subpats) => subpats.len() <= 1,\n-        ast::PatKind::TupleStruct(ref path, ref subpats) => {\n+        ast::PatKind::TupleStruct(_, ref path, ref subpats) => {\n             path.segments.len() <= 1 && subpats.len() <= 1\n         }\n         ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) | ast::PatKind::Paren(ref p) => {\n@@ -226,7 +226,7 @@ impl Rewrite for Pat {\n             PatKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)\n             }\n-            PatKind::TupleStruct(ref path, ref pat_vec) => {\n+            PatKind::TupleStruct(_, ref path, ref pat_vec) => {\n                 let path_str = rewrite_path(context, PathContext::Expr, None, path, shape)?;\n                 rewrite_tuple_pat(pat_vec, Some(path_str), self.span, context, shape)\n             }\n@@ -244,7 +244,7 @@ impl Rewrite for Pat {\n                     .collect();\n                 Some(format!(\"[{}]\", rw.join(\", \")))\n             }\n-            PatKind::Struct(ref path, ref fields, ellipsis) => {\n+            PatKind::Struct(_, ref path, ref fields, ellipsis) => {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             PatKind::MacCall(ref mac) => {"}]}