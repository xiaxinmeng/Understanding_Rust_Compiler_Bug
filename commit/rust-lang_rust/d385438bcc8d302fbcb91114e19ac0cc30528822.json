{"sha": "d385438bcc8d302fbcb91114e19ac0cc30528822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzODU0MzhiY2M4ZDMwMmZiY2I5MTExNGUxOWFjMGNjMzA1Mjg4MjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-25T20:38:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-25T20:38:15Z"}, "message": "generate more assists docs", "tree": {"sha": "d57842c6462f4921976d6d9642ce7751681cf0bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57842c6462f4921976d6d9642ce7751681cf0bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d385438bcc8d302fbcb91114e19ac0cc30528822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d385438bcc8d302fbcb91114e19ac0cc30528822", "html_url": "https://github.com/rust-lang/rust/commit/d385438bcc8d302fbcb91114e19ac0cc30528822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d385438bcc8d302fbcb91114e19ac0cc30528822/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6cb06d2850b9b9c38c0c13d6948ab39adcd652e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6cb06d2850b9b9c38c0c13d6948ab39adcd652e", "html_url": "https://github.com/rust-lang/rust/commit/e6cb06d2850b9b9c38c0c13d6948ab39adcd652e"}], "stats": {"total": 533, "additions": 419, "deletions": 114}, "files": [{"sha": "d3ba634c401821f13e6c17872ea94c35189c69f7", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n@@ -9,6 +7,22 @@ use ra_syntax::{\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: add_derive\n+// Adds a new `#[derive()]` clause to a struct or enum.\n+// ```\n+// struct Point {\n+//     x: u32,\n+//     y: u32,<|>\n+// }\n+// ```\n+// ->\n+// ```\n+// #[derive()]\n+// struct Point {\n+//     x: u32,\n+//     y: u32,\n+// }\n+// ```\n pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;"}, {"sha": "33b7bea7f2b11e289aa910bcb983febfc015943c", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::{db::HirDatabase, HirDisplay, Ty};\n use ra_syntax::{\n     ast::{self, AstNode, LetStmt, NameOwner},\n@@ -8,7 +6,19 @@ use ra_syntax::{\n \n use crate::{Assist, AssistCtx, AssistId};\n \n-/// Add explicit type assist.\n+// Assist: add_explicit_type\n+// Specify type for a let binding\n+// ```\n+// fn main() {\n+//     let x<|> = 92;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let x: i32 = 92;\n+// }\n+// ```\n pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let stmt = ctx.node_at_offset::<LetStmt>()?;\n     let expr = stmt.initializer()?;"}, {"sha": "40bc5c4641d80443874fbfc1d2da8142ba03c4db", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use format_buf::format;\n use hir::db::HirDatabase;\n use join_to_string::join;\n@@ -10,6 +8,23 @@ use ra_syntax::{\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: add_impl\n+// Adds a new inherent impl for a type\n+// ```\n+// struct Ctx<T: Clone> {\n+//      data: T,<|>\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Ctx<T: Clone> {\n+//      data: T,\n+// }\n+//\n+// impl<T: Clone> Ctx<T> {\n+//\n+// }\n+// ```\n pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;"}, {"sha": "36fa6f9ea7a56290ca16fe04309b9000ff6191ae", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::{db::HirDatabase, HasSource};\n use ra_syntax::{\n     ast::{self, edit, make, AstNode, NameOwner},\n@@ -14,6 +12,32 @@ enum AddMissingImplMembersMode {\n     NoDefaultMethods,\n }\n \n+// Assist: add_impl_missing_members\n+// Adds scaffold for required impl members\n+// ```\n+// trait T {\n+//     Type X;\n+//     fn foo(&self);\n+//     fn bar(&self) {}\n+// }\n+//\n+// impl T for () {<|>\n+//\n+// }\n+// ```\n+// ->\n+// ```\n+// trait T {\n+//     Type X;\n+//     fn foo(&self);\n+//     fn bar(&self) {}\n+// }\n+//\n+// impl T for () {\n+//     fn foo(&self) { unimplemented!() }\n+//\n+// }\n+// ```\n pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     add_missing_impl_members_inner(\n         ctx,\n@@ -23,6 +47,36 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n     )\n }\n \n+// Assist: add_impl_default_members\n+// Adds scaffold for overriding default impl members\n+// ```\n+// trait T {\n+//     Type X;\n+//     fn foo(&self);\n+//     fn bar(&self) {}\n+// }\n+//\n+// impl T for () {\n+//     Type X = ();\n+//     fn foo(&self) {}<|>\n+//\n+// }\n+// ```\n+// ->\n+// ```\n+// trait T {\n+//     Type X;\n+//     fn foo(&self);\n+//     fn bar(&self) {}\n+// }\n+//\n+// impl T for () {\n+//     Type X = ();\n+//     fn foo(&self) {}\n+//     fn bar(&self) {}\n+//\n+// }\n+// ```\n pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     add_missing_impl_members_inner(\n         ctx,"}, {"sha": "a072f63e7a8a9d98d1a8e280c17015c0c5369e4e", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -1,18 +1,26 @@\n-//! This contains the functions associated with the demorgan assist.\n-//! This assist transforms boolean expressions of the form `!a || !b` into\n-//! `!(a && b)`.\n use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n use ra_syntax::SyntaxNode;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n-/// Assist for applying demorgan's law\n-///\n-/// This transforms expressions of the form `!l || !r` into `!(l && r)`.\n-/// This also works with `&&`. This assist can only be applied with the cursor\n-/// on either `||` or `&&`, with both operands being a negation of some kind.\n-/// This means something of the form `!x` or `x != y`.\n+// Assist: apply_demorgan\n+// Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws).\n+// This transforms expressions of the form `!l || !r` into `!(l && r)`.\n+// This also works with `&&`. This assist can only be applied with the cursor\n+// on either `||` or `&&`, with both operands being a negation of some kind.\n+// This means something of the form `!x` or `x != y`.\n+// ```\n+// fn main() {\n+//     if x != 4 ||<|> !y {}\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     if !(x == 4 && y) {}\n+// }\n+// ```\n pub(crate) fn apply_demorgan(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let expr = ctx.node_at_offset::<ast::BinExpr>()?;\n     let op = expr.op_kind()?;"}, {"sha": "872bbdf17a5bd0343f4b3946cfc2f33c16334cbe", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -15,8 +15,10 @@ fn check(assist_id: &str, before: &str, after: &str) {\n     let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n \n-    let (_assist_id, action) =\n-        crate::assists(&db, frange).into_iter().find(|(id, _)| id.id.0 == assist_id).unwrap();\n+    let (_assist_id, action) = crate::assists(&db, frange)\n+        .into_iter()\n+        .find(|(id, _)| id.id.0 == assist_id)\n+        .unwrap_or_else(|| panic!(\"Assist {:?} is not applicable\", assist_id));\n \n     let actual = action.edit.apply(&before);\n     assert_eq_text!(after, &actual);"}, {"sha": "76d86b93dadfeba1ed70e66b766e1f4253a14f04", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -2,6 +2,145 @@\n \n use super::check;\n \n+#[test]\n+fn doctest_add_derive() {\n+    check(\n+        \"add_derive\",\n+        r#####\"\n+struct Point {\n+    x: u32,\n+    y: u32,<|>\n+}\n+\"#####,\n+        r#####\"\n+#[derive()]\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_add_explicit_type() {\n+    check(\n+        \"add_explicit_type\",\n+        r#####\"\n+fn main() {\n+    let x<|> = 92;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let x: i32 = 92;\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_add_impl() {\n+    check(\n+        \"add_impl\",\n+        r#####\"\n+struct Ctx<T: Clone> {\n+     data: T,<|>\n+}\n+\"#####,\n+        r#####\"\n+struct Ctx<T: Clone> {\n+     data: T,\n+}\n+\n+impl<T: Clone> Ctx<T> {\n+\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_add_impl_default_members() {\n+    check(\n+        \"add_impl_default_members\",\n+        r#####\"\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {\n+    Type X = ();\n+    fn foo(&self) {}<|>\n+\n+}\n+\"#####,\n+        r#####\"\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {\n+    Type X = ();\n+    fn foo(&self) {}\n+    fn bar(&self) {}\n+\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_add_impl_missing_members() {\n+    check(\n+        \"add_impl_missing_members\",\n+        r#####\"\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {<|>\n+\n+}\n+\"#####,\n+        r#####\"\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {\n+    fn foo(&self) { unimplemented!() }\n+\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_apply_demorgan() {\n+    check(\n+        \"apply_demorgan\",\n+        r#####\"\n+fn main() {\n+    if x != 4 ||<|> !y {}\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    if !(x == 4 && y) {}\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_to_guarded_return() {\n     check("}, {"sha": "eeb48683217844dc58be2f4fe48ad3d058bff0e4", "filename": "docs/user/assists.md", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -1,5 +1,142 @@\n # Assists\n \n+## `add_derive`\n+\n+Adds a new `#[derive()]` clause to a struct or enum.\n+\n+```rust\n+// BEFORE\n+struct Point {\n+    x: u32,\n+    y: u32,<|>\n+}\n+\n+// AFTER\n+#[derive()]\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+```\n+\n+## `add_explicit_type`\n+\n+Specify type for a let binding\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    let x<|> = 92;\n+}\n+\n+// AFTER\n+fn main() {\n+    let x: i32 = 92;\n+}\n+```\n+\n+## `add_impl`\n+\n+Adds a new inherent impl for a type\n+\n+```rust\n+// BEFORE\n+struct Ctx<T: Clone> {\n+     data: T,<|>\n+}\n+\n+// AFTER\n+struct Ctx<T: Clone> {\n+     data: T,\n+}\n+\n+impl<T: Clone> Ctx<T> {\n+\n+}\n+```\n+\n+## `add_impl_default_members`\n+\n+Adds scaffold for overriding default impl members\n+\n+```rust\n+// BEFORE\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {\n+    Type X = ();\n+    fn foo(&self) {}<|>\n+\n+}\n+\n+// AFTER\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {\n+    Type X = ();\n+    fn foo(&self) {}\n+    fn bar(&self) {}\n+\n+}\n+```\n+\n+## `add_impl_missing_members`\n+\n+Adds scaffold for required impl members\n+\n+```rust\n+// BEFORE\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {<|>\n+\n+}\n+\n+// AFTER\n+trait T {\n+    Type X;\n+    fn foo(&self);\n+    fn bar(&self) {}\n+}\n+\n+impl T for () {\n+    fn foo(&self) { unimplemented!() }\n+\n+}\n+```\n+\n+## `apply_demorgan`\n+\n+Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws).\n+This transforms expressions of the form `!l || !r` into `!(l && r)`.\n+This also works with `&&`. This assist can only be applied with the cursor\n+on either `||` or `&&`, with both operands being a negation of some kind.\n+This means something of the form `!x` or `x != y`.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    if x != 4 ||<|> !y {}\n+}\n+\n+// AFTER\n+fn main() {\n+    if !(x == 4 && y) {}\n+}\n+```\n+\n ## `convert_to_guarded_return`\n \n Replace a large conditional with a guarded return."}, {"sha": "acf092cec1bb26e41b2e92d6a0811fc4a5c7a1e5", "filename": "docs/user/features.md", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -104,84 +104,6 @@ the VS Code side to be able to position cursor. `<|>` signifies cursor\n \n See [assists.md](./assists.md)\n \n-- Add `#[derive]`\n-\n-```rust\n-// before:\n-struct Foo {\n-    <|>x: i32\n-}\n-// after:\n-#[derive(<|>)]\n-struct Foo {\n-    x: i32\n-}\n-```\n-\n-- Add `impl`\n-\n-```rust\n-// before:\n-struct Foo<'a, T: Debug> {\n-    <|>t: T\n-}\n-// after:\n-struct Foo<'a, T: Debug> {\n-    t: T\n-}\n-\n-impl<'a, T: Debug> Foo<'a, T> {\n-    <|>\n-}\n-```\n-\n-- Add missing `impl` members\n-\n-```rust\n-// before:\n-trait Foo {\n-    fn foo(&self);\n-    fn bar(&self);\n-    fn baz(&self);\n-}\n-\n-struct S;\n-\n-impl Foo for S {\n-    fn bar(&self) {}\n-    <|>\n-}\n-\n-// after:\n-trait Foo {\n-    fn foo(&self);\n-    fn bar(&self);\n-    fn baz(&self);\n-}\n-\n-struct S;\n-\n-impl Foo for S {\n-    fn bar(&self) {}\n-    fn foo(&self) { unimplemented!() }\n-    fn baz(&self) { unimplemented!() }<|>\n-}\n-```\n-\n-- Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws)\n-\n-```rust\n-// before:\n-fn example(x: bool) -> bool {\n-    !x || !x\n-}\n-\n-// after:\n-fn example(x: bool) -> bool {\n-    !(x && x)\n-}\n-```\n-\n - Import path\n \n ```rust\n@@ -391,19 +313,6 @@ fn foo() {\n }\n ```\n \n-- Add explicit type\n-\n-```rust\n-// before:\n-fn foo() {\n-    let t<|> = (&2, Some(1));\n-}\n-// after:\n-fn foo() {\n-    let t<|>: (&i32, Option<i32>) = (&2, Some(1));\n-}\n-```\n-\n - Move guard expression to match arm body\n ```rust\n // before:"}, {"sha": "4ec8ab75af5c371951e7f8b489bad971f935a410", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -74,13 +74,26 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n }\n \n fn extract_comment_blocks(text: &str) -> Vec<Vec<String>> {\n+    do_extract_comment_blocks(text, false)\n+}\n+\n+fn extract_comment_blocks_with_empty_lines(text: &str) -> Vec<Vec<String>> {\n+    do_extract_comment_blocks(text, true)\n+}\n+\n+fn do_extract_comment_blocks(text: &str, allow_blocks_with_empty_lins: bool) -> Vec<Vec<String>> {\n     let mut res = Vec::new();\n \n     let prefix = \"// \";\n     let lines = text.lines().map(str::trim_start);\n \n     let mut block = vec![];\n     for line in lines {\n+        if line == \"//\" && allow_blocks_with_empty_lins {\n+            block.push(String::new());\n+            continue;\n+        }\n+\n         let is_comment = line.starts_with(prefix);\n         if is_comment {\n             block.push(line[prefix.len()..].to_string());"}, {"sha": "e313820d18a5a0bc57f3b4ad702e51534a2dfa9f", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d385438bcc8d302fbcb91114e19ac0cc30528822/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d385438bcc8d302fbcb91114e19ac0cc30528822/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=d385438bcc8d302fbcb91114e19ac0cc30528822", "patch": "@@ -1,7 +1,7 @@\n use std::{fs, path::Path};\n \n use crate::{\n-    codegen::{self, extract_comment_blocks, Mode},\n+    codegen::{self, extract_comment_blocks_with_empty_lines, Mode},\n     project_root, Result,\n };\n \n@@ -34,7 +34,7 @@ fn collect_assists() -> Result<Vec<Assist>> {\n \n     fn collect_file(acc: &mut Vec<Assist>, path: &Path) -> Result<()> {\n         let text = fs::read_to_string(path)?;\n-        let comment_blocks = extract_comment_blocks(&text);\n+        let comment_blocks = extract_comment_blocks_with_empty_lines(&text);\n \n         for block in comment_blocks {\n             // FIXME: doesn't support blank lines yet, need to tweak\n@@ -45,7 +45,11 @@ fn collect_assists() -> Result<Vec<Assist>> {\n                 continue;\n             }\n             let id = first_line[\"Assist: \".len()..].to_string();\n-            assert!(id.chars().all(|it| it.is_ascii_lowercase() || it == '_'));\n+            assert!(\n+                id.chars().all(|it| it.is_ascii_lowercase() || it == '_'),\n+                \"invalid assist id: {:?}\",\n+                id\n+            );\n \n             let doc = take_until(lines.by_ref(), \"```\");\n             let before = take_until(lines.by_ref(), \"```\");"}]}