{"sha": "a50c15275f951d09f6f75c1503443424b5d71869", "node_id": "C_kwDOAAsO6NoAKGE1MGMxNTI3NWY5NTFkMDlmNmY3NWMxNTAzNDQzNDI0YjVkNzE4Njk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-06T14:09:49Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-28T23:57:14Z"}, "message": "Remove dead broken code from const zst handling in backends", "tree": {"sha": "ac399be3cc42e4c10a6058bf70321237c9228c79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac399be3cc42e4c10a6058bf70321237c9228c79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a50c15275f951d09f6f75c1503443424b5d71869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a50c15275f951d09f6f75c1503443424b5d71869", "html_url": "https://github.com/rust-lang/rust/commit/a50c15275f951d09f6f75c1503443424b5d71869", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a50c15275f951d09f6f75c1503443424b5d71869/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91cf28428e7db791e248ef44e7dc55cd20429158", "url": "https://api.github.com/repos/rust-lang/rust/commits/91cf28428e7db791e248ef44e7dc55cd20429158", "html_url": "https://github.com/rust-lang/rust/commit/91cf28428e7db791e248ef44e7dc55cd20429158"}], "stats": {"total": 4, "additions": 0, "deletions": 4}, "files": [{"sha": "102d1e5a824d9da544d66ed8c1a477af26729e58", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a50c15275f951d09f6f75c1503443424b5d71869/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50c15275f951d09f6f75c1503443424b5d71869/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a50c15275f951d09f6f75c1503443424b5d71869", "patch": "@@ -158,10 +158,6 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         None\n     }\n \n-    fn zst_to_backend(&self, _ty: Type<'gcc>) -> RValue<'gcc> {\n-        self.const_undef(self.type_ix(0))\n-    }\n-\n     fn scalar_to_backend(&self, cv: Scalar, layout: abi::Scalar, ty: Type<'gcc>) -> RValue<'gcc> {\n         let bitsize = if layout.is_bool() { 1 } else { layout.size(self).bits() };\n         match cv {"}]}