{"sha": "66f91980473db385d3560cfa4a1e9f889fb6f906", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZjkxOTgwNDczZGIzODVkMzU2MGNmYTRhMWU5Zjg4OWZiNmY5MDY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-30T14:28:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-27T18:20:28Z"}, "message": "Use Arena inside hir::TraitMethod.", "tree": {"sha": "15d994f792b7e43e46385eed4a56dee6f767b7b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d994f792b7e43e46385eed4a56dee6f767b7b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66f91980473db385d3560cfa4a1e9f889fb6f906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66f91980473db385d3560cfa4a1e9f889fb6f906", "html_url": "https://github.com/rust-lang/rust/commit/66f91980473db385d3560cfa4a1e9f889fb6f906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66f91980473db385d3560cfa4a1e9f889fb6f906/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deac631d7ff93db4d1d61ae9717444f60767003e", "url": "https://api.github.com/repos/rust-lang/rust/commits/deac631d7ff93db4d1d61ae9717444f60767003e", "html_url": "https://github.com/rust-lang/rust/commit/deac631d7ff93db4d1d61ae9717444f60767003e"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "7011a572fb1728c4288e803b06ab1034c5b34770", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=66f91980473db385d3560cfa4a1e9f889fb6f906", "patch": "@@ -850,7 +850,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_nested_body, default);\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Required(ref param_names)) => {\n+        TraitItemKind::Method(ref sig, TraitMethod::Required(param_names)) => {\n             visitor.visit_id(trait_item.hir_id);\n             visitor.visit_fn_decl(&sig.decl);\n             for &param_name in param_names {"}, {"sha": "c82de81e737f409799947c15db4c1c83a853543b", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=66f91980473db385d3560cfa4a1e9f889fb6f906", "patch": "@@ -787,6 +787,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             AssocItemKind::Fn(ref sig, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n+                let names: &[Ident] = self.arena.alloc_from_iter(names.into_iter());\n                 let (generics, sig) =\n                     self.lower_method_sig(&i.generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))"}, {"sha": "84d8fb32e2da1df9a75a62da32dd1b29f79dc2d3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=66f91980473db385d3560cfa4a1e9f889fb6f906", "patch": "@@ -1946,9 +1946,9 @@ pub struct TraitItem<'hir> {\n \n /// Represents a trait method's body (or just argument names).\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum TraitMethod {\n+pub enum TraitMethod<'hir> {\n     /// No default body in the trait, just a signature.\n-    Required(HirVec<Ident>),\n+    Required(&'hir [Ident]),\n \n     /// Both signature and body are provided in the trait.\n     Provided(BodyId),\n@@ -1960,7 +1960,7 @@ pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(&'hir Ty, Option<BodyId>),\n     /// A method with an optional body.\n-    Method(FnSig<'hir>, TraitMethod),\n+    Method(FnSig<'hir>, TraitMethod<'hir>),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds, Option<&'hir Ty>),"}, {"sha": "8cf502b3a74059b47016eca25243de9bf147afa7", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f91980473db385d3560cfa4a1e9f889fb6f906/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=66f91980473db385d3560cfa4a1e9f889fb6f906", "patch": "@@ -336,7 +336,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = &item.kind {\n+        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = item.kind {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n                 self.check_snake_case(cx, \"variable\", param_name);"}]}