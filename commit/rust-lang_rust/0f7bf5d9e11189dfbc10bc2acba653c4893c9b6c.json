{"sha": "0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmN2JmNWQ5ZTExMTg5ZGZiYzEwYmMyYWNiYTY1M2M0ODkzYzliNmM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-08T19:10:33Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:06:35Z"}, "message": "add docs", "tree": {"sha": "970c4de0b699a718b2eee85c56d71f2d08e3ad5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970c4de0b699a718b2eee85c56d71f2d08e3ad5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "html_url": "https://github.com/rust-lang/rust/commit/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443ae838742350a93326ede1f4ad7429238da644", "url": "https://api.github.com/repos/rust-lang/rust/commits/443ae838742350a93326ede1f4ad7429238da644", "html_url": "https://github.com/rust-lang/rust/commit/443ae838742350a93326ede1f4ad7429238da644"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "0ae62b0e813aff42580f266964a517b1887f7457", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "patch": "@@ -431,7 +431,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             let t = relation.relate(&a_t, &b_t)?;\n             match relation.relate(&sz_a, &sz_b) {\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n-                // FIXME(lazy_normalization_consts) Implement improved diagnostics for mismatched array\n+                // FIXME(#72219) Implement improved diagnostics for mismatched array\n                 // length?\n                 Err(err) if relation.tcx().features().const_generics => Err(err),\n                 Err(err) => {"}, {"sha": "7ff12820db8151858fbf33b6e89221ecaac237bc", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "patch": "@@ -99,6 +99,8 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         }\n     }\n \n+    // We don't have to worry about the equality of consts during borrow checking\n+    // as consts always have a static lifetime.\n     fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {}\n \n     fn normalization() -> NormalizationStrategy {"}, {"sha": "1bfcacd6ccdc12828b2dde3150e0a9db6f19ab3a", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "patch": "@@ -771,7 +771,7 @@ fn contains_illegal_self_type_reference<'tcx>(\n         }\n \n         fn visit_const(&mut self, _c: &ty::Const<'tcx>) -> bool {\n-            // FIXME Look into the unevaluated constants for object safety violations.\n+            // FIXME(#72219) Look into the unevaluated constants for object safety violations.\n             // Do not walk substitutions of unevaluated consts, as they contain `Self`, even\n             // though the const expression doesn't necessary use it. Currently type variables\n             // inside array length expressions are forbidden, so they can't break the above"}, {"sha": "d72c74e4188ee04c2826ccb593dfca5f5796cd39", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "patch": "@@ -1651,7 +1651,7 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n \n         fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n             if let ty::ConstKind::Unevaluated(..) = c.val {\n-                // FIXME(lazy_normalization_consts) We currenctly don't detect lifetimes within substs\n+                // FIXME(#72219) We currenctly don't detect lifetimes within substs\n                 // which would violate this check. Even though the particular substitution is not used\n                 // within the const, this should still be fixed.\n                 return false;"}]}