{"sha": "636933153d27a202efa247c8868f501ee368ae4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjkzMzE1M2QyN2EyMDJlZmEyNDdjODg2OGY1MDFlZTM2OGFlNGI=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-07-27T09:33:58Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-07-28T09:40:21Z"}, "message": "Small grammar fix", "tree": {"sha": "9c03c3f502b6ae7cca55c509319af00244bfc2b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c03c3f502b6ae7cca55c509319af00244bfc2b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636933153d27a202efa247c8868f501ee368ae4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636933153d27a202efa247c8868f501ee368ae4b", "html_url": "https://github.com/rust-lang/rust/commit/636933153d27a202efa247c8868f501ee368ae4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636933153d27a202efa247c8868f501ee368ae4b/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0014c500e9488d5a0e32e2c3db76fb803503bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0014c500e9488d5a0e32e2c3db76fb803503bc", "html_url": "https://github.com/rust-lang/rust/commit/ea0014c500e9488d5a0e32e2c3db76fb803503bc"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "9aa33e39bae2f473723ebb92aba3205f22b53ef0", "filename": "crates/ide_assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/636933153d27a202efa247c8868f501ee368ae4b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636933153d27a202efa247c8868f501ee368ae4b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=636933153d27a202efa247c8868f501ee368ae4b", "patch": "@@ -53,12 +53,10 @@ pub(crate) fn remove_unused_param(acc: &mut Assists, ctx: &AssistContext) -> Opt\n     }\n \n     let mut param_position = func.param_list()?.params().position(|it| it == param)?;\n-    // param_list() does not take self param into consideration, hence this additional check is\n-    // added. There are two cases to handle in this scenario, where functions are\n-    // associative(functions not associative and not containting contain self, are not allowed), in\n-    // this case param position is rightly set. If a method call is present which has self param,\n-    // that needs to be handled and is added below in process_usage function to reduce this increment and\n-    // not consider self param.\n+    // param_list() does not take the self param into consideration, hence this additional check\n+    // is required. For associated functions, param_position is incremented here. For inherent\n+    // calls we revet the increment below, in process_usage, as those calls will not have an\n+    // explicit self parameter.\n     if is_self_present {\n         param_position += 1;\n     }"}, {"sha": "00a88116cb745c194b9b499093309c3fe89db11b", "filename": "crates/ide_db/src/path_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636933153d27a202efa247c8868f501ee368ae4b/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636933153d27a202efa247c8868f501ee368ae4b/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fpath_transform.rs?ref=636933153d27a202efa247c8868f501ee368ae4b", "patch": "@@ -105,7 +105,7 @@ impl<'a> Ctx<'a> {\n             s.param_list().is_some() || (s.self_token().is_some() && path.parent_path().is_none())\n         }) {\n             // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n-            // don't try to qualify sole `self` either, they are usually locals, but are returned as modules due to namespace classing\n+            // don't try to qualify sole `self` either, they are usually locals, but are returned as modules due to namespace clashing\n             return None;\n         }\n "}]}