{"sha": "e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418", "node_id": "C_kwDOAAsO6NoAKGU4MGNjZWRiYWVlYjViOTc4ODBkODNlYTk1Yzc5ZmMxZDBkY2Y0MTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-22T17:21:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-24T22:47:59Z"}, "message": "Use write! instead of p! to avoid having to use weird scoping", "tree": {"sha": "198c2075fd657a7bbbca8be8e0e2da00779bf250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198c2075fd657a7bbbca8be8e0e2da00779bf250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418", "html_url": "https://github.com/rust-lang/rust/commit/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20cea3ebb468df74447ed3aa5e646f741208bea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/20cea3ebb468df74447ed3aa5e646f741208bea8", "html_url": "https://github.com/rust-lang/rust/commit/20cea3ebb468df74447ed3aa5e646f741208bea8"}], "stats": {"total": 39, "additions": 13, "deletions": 26}, "files": [{"sha": "c56909ba18b143559e34418c949147fda55d516f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418", "patch": "@@ -817,25 +817,18 @@ pub trait PrettyPrinter<'tcx>:\n             }\n         }\n \n-        {\n-            define_scoped_cx!(self);\n-            p!(\"impl \");\n-        }\n+        write!(self, \"impl \")?;\n \n         let mut first = true;\n         // Insert parenthesis around (Fn(A, B) -> C) if the opaque ty has more than one other trait\n         let paren_needed = fn_traits.len() > 1 || traits.len() > 0 || !is_sized;\n \n         for (fn_once_trait_ref, entry) in fn_traits {\n-            {\n-                define_scoped_cx!(self);\n-                p!(\n-                    write(\"{}\", if first { \"\" } else { \" + \" }),\n-                    write(\"{}\", if paren_needed { \"(\" } else { \"\" })\n-                );\n-            }\n+            write!(self, \"{}\", if first { \"\" } else { \" + \" })?;\n+            write!(self, \"{}\", if paren_needed { \"(\" } else { \"\" })?;\n \n-            self = self.wrap_binder(&fn_once_trait_ref, |trait_ref, mut self_| {\n+            self = self.wrap_binder(&fn_once_trait_ref, |trait_ref, mut cx| {\n+                define_scoped_cx!(cx);\n                 // Get the (single) generic ty (the args) of this FnOnce trait ref.\n                 let generics = tcx.generics_of(trait_ref.def_id);\n                 let args = generics.own_substs_no_defaults(tcx, trait_ref.substs);\n@@ -852,7 +845,6 @@ pub trait PrettyPrinter<'tcx>:\n                             \"FnOnce\"\n                         };\n \n-                        define_scoped_cx!(self_);\n                         p!(write(\"{}(\", name));\n \n                         for (idx, ty) in arg_tys.tuple_fields().iter().enumerate() {\n@@ -892,19 +884,16 @@ pub trait PrettyPrinter<'tcx>:\n                     }\n                 }\n \n-                Ok(self_)\n+                Ok(cx)\n             })?;\n         }\n \n         // Print the rest of the trait types (that aren't Fn* family of traits)\n         for (trait_ref, assoc_items) in traits {\n-            {\n-                define_scoped_cx!(self);\n-                p!(write(\"{}\", if first { \"\" } else { \" + \" }));\n-            }\n+            write!(self, \"{}\", if first { \"\" } else { \" + \" })?;\n \n-            self = self.wrap_binder(&trait_ref, |trait_ref, mut self_| {\n-                define_scoped_cx!(self_);\n+            self = self.wrap_binder(&trait_ref, |trait_ref, mut cx| {\n+                define_scoped_cx!(cx);\n                 p!(print(trait_ref.print_only_trait_name()));\n \n                 let generics = tcx.generics_of(trait_ref.def_id);\n@@ -969,16 +958,14 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n \n                 first = false;\n-                Ok(self_)\n+                Ok(cx)\n             })?;\n         }\n \n-        define_scoped_cx!(self);\n-\n         if !is_sized {\n-            p!(write(\"{}?Sized\", if first { \"\" } else { \" + \" }));\n+            write!(self, \"{}?Sized\", if first { \"\" } else { \" + \" })?;\n         } else if first {\n-            p!(\"Sized\");\n+            write!(self, \"Sized\")?;\n         }\n \n         Ok(self)"}, {"sha": "e9b76b19dc4075d32d8100dd70b29dcef7b0b6ad", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=e80ccedbaeeb5b97880d83ea95c79fc1d0dcf418", "patch": "@@ -22,7 +22,7 @@ LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n LL | |\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `impl for<'r, 's, 't0> Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:23:16\n    |"}]}