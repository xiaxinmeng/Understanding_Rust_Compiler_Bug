{"sha": "4ac91384ff124d5b6258a648df5176909ff1b780", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzkxMzg0ZmYxMjRkNWI2MjU4YTY0OGRmNTE3NjkwOWZmMWI3ODA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-23T18:24:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T08:11:47Z"}, "message": "route all path reading/writing through central read/write methods", "tree": {"sha": "dad59b90ca7dbe3ecc4607d614534285ca65eec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad59b90ca7dbe3ecc4607d614534285ca65eec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac91384ff124d5b6258a648df5176909ff1b780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac91384ff124d5b6258a648df5176909ff1b780", "html_url": "https://github.com/rust-lang/rust/commit/4ac91384ff124d5b6258a648df5176909ff1b780", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac91384ff124d5b6258a648df5176909ff1b780/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3517ce66abe20263316830f13a164aff78abc5a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3517ce66abe20263316830f13a164aff78abc5a2", "html_url": "https://github.com/rust-lang/rust/commit/3517ce66abe20263316830f13a164aff78abc5a2"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "d8731b537719b9ce229da2344f10ce669111a214", "filename": "src/helpers.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4ac91384ff124d5b6258a648df5176909ff1b780/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac91384ff124d5b6258a648df5176909ff1b780/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4ac91384ff124d5b6258a648df5176909ff1b780", "patch": "@@ -1,6 +1,8 @@\n use std::ffi::{OsStr, OsString};\n+use std::path::Path;\n use std::{iter, mem};\n use std::convert::TryFrom;\n+use std::borrow::Cow;\n \n use rustc::mir;\n use rustc::ty::{\n@@ -491,6 +493,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         bytes_to_os_str(bytes)\n     }\n \n+    /// Read a null-terminated sequence of bytes, and perform path separator conversion if needed.\n+    fn read_path_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, Cow<'a, Path>>\n+    where\n+        'tcx: 'a,\n+        'mir: 'a,\n+    {\n+        let os_str = self.read_os_str_from_c_str(scalar)?;\n+        Ok(Cow::Borrowed(Path::new(os_str)))\n+    }\n+\n     /// Helper function to read an OsString from a 0x0000-terminated sequence of u16,\n     /// which is what the Windows APIs usually handle.\n     fn read_os_str_from_wide_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString>\n@@ -513,7 +525,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         u16vec_to_osstring(u16_vec)\n     }\n \n-\n     /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n@@ -553,6 +564,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok((true, string_length))\n     }\n \n+    /// Write a Path to the machine memory, adjusting path separators if needed.\n+    fn write_path_to_c_str(\n+        &mut self,\n+        path: &Path,\n+        scalar: Scalar<Tag>,\n+        size: u64,\n+    ) -> InterpResult<'tcx, (bool, u64)> {\n+        let os_str = path.as_os_str();\n+        self.write_os_str_to_c_str(os_str, scalar, size)\n+    }\n+\n     /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what\n     /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null"}, {"sha": "192fc0d47abec40eb36a13b6e0f48a00b3e2a718", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ac91384ff124d5b6258a648df5176909ff1b780/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac91384ff124d5b6258a648df5176909ff1b780/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=4ac91384ff124d5b6258a648df5176909ff1b780", "patch": "@@ -134,7 +134,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n-                if this.write_os_str_to_c_str(&OsString::from(cwd), buf, size)?.0 {\n+                if this.write_path_to_c_str(&cwd, buf, size)?.0 {\n                     return Ok(buf);\n                 }\n                 let erange = this.eval_libc(\"ERANGE\")?;\n@@ -150,7 +150,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"chdir\")?;\n \n-        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         match env::set_current_dir(path) {\n             Ok(()) => Ok(0),"}, {"sha": "9778775fca641372e88701823301b4fd4e5928b2", "filename": "src/shims/fs.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4ac91384ff124d5b6258a648df5176909ff1b780/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac91384ff124d5b6258a648df5176909ff1b780/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=4ac91384ff124d5b6258a648df5176909ff1b780", "patch": "@@ -2,7 +2,7 @@ use std::collections::BTreeMap;\n use std::convert::{TryFrom, TryInto};\n use std::fs::{read_dir, remove_dir, remove_file, rename, DirBuilder, File, FileType, OpenOptions, ReadDir};\n use std::io::{Read, Seek, SeekFrom, Write};\n-use std::path::PathBuf;\n+use std::path::Path;\n use std::time::SystemTime;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -79,9 +79,9 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n         let this = self.eval_context_mut();\n \n         let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n-        let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n+        let path = this.read_path_from_c_str(path_scalar)?.into_owned();\n \n-        let metadata = match FileMetadata::from_path(this, path, follow_symlink)? {\n+        let metadata = match FileMetadata::from_path(this, &path, follow_symlink)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n@@ -303,7 +303,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported flags {:#x}\", flag & !mirror);\n         }\n \n-        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let fd = options.open(&path).map(|file| {\n             let fh = &mut this.machine.file_handler;\n@@ -524,10 +524,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"unlink\")?;\n \n-        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let result = remove_file(path).map(|_| 0);\n-\n         this.try_unwrap_io_result(result)\n     }\n \n@@ -537,12 +536,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         linkpath_op: OpTy<'tcx, Tag>\n     ) -> InterpResult<'tcx, i32> {\n         #[cfg(target_family = \"unix\")]\n-        fn create_link(src: PathBuf, dst: PathBuf) -> std::io::Result<()> {\n+        fn create_link(src: &Path, dst: &Path) -> std::io::Result<()> {\n             std::os::unix::fs::symlink(src, dst)\n         }\n \n         #[cfg(target_family = \"windows\")]\n-        fn create_link(src: PathBuf, dst: PathBuf) -> std::io::Result<()> {\n+        fn create_link(src: &Path, dst: &Path) -> std::io::Result<()> {\n             use std::os::windows::fs;\n             if src.is_dir() {\n                 fs::symlink_dir(src, dst)\n@@ -555,10 +554,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"symlink\")?;\n \n-        let target = this.read_os_str_from_c_str(this.read_scalar(target_op)?.not_undef()?)?.into();\n-        let linkpath = this.read_os_str_from_c_str(this.read_scalar(linkpath_op)?.not_undef()?)?.into();\n+        let target = this.read_path_from_c_str(this.read_scalar(target_op)?.not_undef()?)?;\n+        let linkpath = this.read_path_from_c_str(this.read_scalar(linkpath_op)?.not_undef()?)?;\n \n-        this.try_unwrap_io_result(create_link(target, linkpath).map(|_| 0))\n+        let result = create_link(&target, &linkpath).map(|_| 0);\n+        this.try_unwrap_io_result(result)\n     }\n \n     fn macos_stat(\n@@ -644,7 +644,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.ref_to_mplace(statxbuf_imm)?\n         };\n \n-        let path: PathBuf = this.read_os_str_from_c_str(pathname_scalar)?.into();\n+        let path = this.read_path_from_c_str(pathname_scalar)?.into_owned();\n         // `flags` should be a `c_int` but the `syscall` function provides an `isize`.\n         let flags: i32 =\n             this.read_scalar(flags_op)?.to_machine_isize(&*this.tcx)?.try_into().map_err(|e| {\n@@ -691,7 +691,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let metadata = if path.as_os_str().is_empty() && empty_path_flag {\n             FileMetadata::from_fd(this, dirfd)?\n         } else {\n-            FileMetadata::from_path(this, path, follow_symlink)?\n+            FileMetadata::from_path(this, &path, follow_symlink)?\n         };\n         let metadata = match metadata {\n             Some(metadata) => metadata,\n@@ -785,8 +785,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        let oldpath = this.read_os_str_from_c_str(oldpath_scalar)?;\n-        let newpath = this.read_os_str_from_c_str(newpath_scalar)?;\n+        let oldpath = this.read_path_from_c_str(oldpath_scalar)?;\n+        let newpath = this.read_path_from_c_str(newpath_scalar)?;\n \n         let result = rename(oldpath, newpath).map(|_| 0);\n \n@@ -808,7 +808,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.read_scalar(mode_op)?.to_u32()?\n         };\n \n-        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let mut builder = DirBuilder::new();\n \n@@ -833,7 +833,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"rmdir\")?;\n \n-        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let result = remove_dir(path).map(|_| 0i32);\n \n@@ -845,7 +845,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"opendir\")?;\n \n-        let name = this.read_os_str_from_c_str(this.read_scalar(name_op)?.not_undef()?)?;\n+        let name = this.read_path_from_c_str(this.read_scalar(name_op)?.not_undef()?)?;\n \n         let result = read_dir(name);\n \n@@ -899,7 +899,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let entry_place = this.deref_operand(entry_op)?;\n                 let name_place = this.mplace_field(entry_place, 4)?;\n \n-                let file_name = dir_entry.file_name();\n+                let file_name = dir_entry.file_name(); // not a Path as there are no separators!\n                 let (name_fits, _) = this.write_os_str_to_c_str(\n                     &file_name,\n                     name_place.ptr,\n@@ -987,7 +987,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let entry_place = this.deref_operand(entry_op)?;\n                 let name_place = this.mplace_field(entry_place, 5)?;\n \n-                let file_name = dir_entry.file_name();\n+                let file_name = dir_entry.file_name(); // not a Path as there are no separators!\n                 let (name_fits, file_name_len) = this.write_os_str_to_c_str(\n                     &file_name,\n                     name_place.ptr,\n@@ -1082,7 +1082,7 @@ struct FileMetadata {\n impl FileMetadata {\n     fn from_path<'tcx, 'mir>(\n         ecx: &mut MiriEvalContext<'mir, 'tcx>,\n-        path: PathBuf,\n+        path: &Path,\n         follow_symlink: bool\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let metadata = if follow_symlink {"}]}