{"sha": "6620949caee25128416acf285590b0d5558e4597", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MjA5NDljYWVlMjUxMjg0MTZhY2YyODU1OTBiMGQ1NTU4ZTQ1OTc=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-08-17T05:31:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-25T09:56:23Z"}, "message": "Simplify checking return type, add new test", "tree": {"sha": "089ec21abfb2df0a5d3256855973b4f878739335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/089ec21abfb2df0a5d3256855973b4f878739335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6620949caee25128416acf285590b0d5558e4597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6620949caee25128416acf285590b0d5558e4597", "html_url": "https://github.com/rust-lang/rust/commit/6620949caee25128416acf285590b0d5558e4597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6620949caee25128416acf285590b0d5558e4597/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a04e9ce147cba1ae4da177f271a29eb296a9bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a04e9ce147cba1ae4da177f271a29eb296a9bef", "html_url": "https://github.com/rust-lang/rust/commit/6a04e9ce147cba1ae4da177f271a29eb296a9bef"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "5d9d59ff89a8c903284ac0637d722e749f7e1b76", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6620949caee25128416acf285590b0d5558e4597/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6620949caee25128416acf285590b0d5558e4597/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=6620949caee25128416acf285590b0d5558e4597", "patch": "@@ -6,12 +6,11 @@ use ra_syntax::ast::{AstNode, RecordLit};\n use super::{Expr, ExprId, RecordLitField};\n use crate::{\n     adt::AdtDef,\n-    code_model::Enum,\n     diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n     name,\n     path::{PathKind, PathSegment},\n-    ty::{InferenceResult, Ty, TypeCtor},\n+    ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Function, HasSource, HirDatabase, ModuleDef, Name, Path, PerNs, Resolution,\n };\n use ra_syntax::ast;\n@@ -120,28 +119,12 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 _ => return,\n             };\n \n-        let std_result_type = std_result_enum.ty(db);\n-\n-        fn enum_from_type(ty: &Ty) -> Option<Enum> {\n-            match ty {\n-                Ty::Apply(t) => match t.ctor {\n-                    TypeCtor::Adt(AdtDef::Enum(e)) => Some(e),\n-                    _ => None,\n-                },\n-                _ => None,\n-            }\n-        }\n-\n-        if enum_from_type(&mismatch.expected) != enum_from_type(&std_result_type) {\n-            return;\n-        }\n-\n-        let ret = match &mismatch.expected {\n-            Ty::Apply(t) => t,\n+        let std_result_ctor = TypeCtor::Adt(AdtDef::Enum(std_result_enum));\n+        let params = match &mismatch.expected {\n+            Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &std_result_ctor => parameters,\n             _ => return,\n         };\n \n-        let params = &ret.parameters;\n         if params.len() == 2 && &params[0] == &mismatch.actual {\n             let source_map = self.func.body_source_map(db);\n             let file_id = self.func.source(db).file_id;"}, {"sha": "94424dc1690cdadfe02fa4de1579c79b76c64655", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6620949caee25128416acf285590b0d5558e4597/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6620949caee25128416acf285590b0d5558e4597/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=6620949caee25128416acf285590b0d5558e4597", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n         let node = d.ast(db);\n         let mut builder = TextEditBuilder::default();\n-        let replacement = format!(\"Ok({})\", node.syntax().text());\n+        let replacement = format!(\"Ok({})\", node.syntax());\n         builder.replace(node.syntax().text_range(), replacement);\n         let fix = SourceChange::source_file_edit_from(\"wrap with ok\", file_id, builder.finish());\n         res.borrow_mut().push(Diagnostic {\n@@ -353,7 +353,7 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     }\n \n     #[test]\n-    fn test_wrap_return_type_not_applicable() {\n+    fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n         let content = r#\"\n             //- /main.rs\n             use std::{string::String, result::Result::{self, Ok, Err}};\n@@ -373,6 +373,32 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n         check_no_diagnostic_for_target_file(\"/main.rs\", content);\n     }\n \n+    #[test]\n+    fn test_wrap_return_type_not_applicable_when_return_type_is_not_result() {\n+        let content = r#\"\n+            //- /main.rs\n+            use std::{string::String, result::Result::{self, Ok, Err}};\n+\n+            enum SomeOtherEnum {\n+                Ok(i32),\n+                Err(String),\n+            }\n+\n+            fn foo() -> SomeOtherEnum {\n+                0\n+            }\n+\n+            //- /std/lib.rs\n+            pub mod string {\n+                pub struct String { }\n+            }\n+            pub mod result {\n+                pub enum Result<T, E> { Ok(T), Err(E) }\n+            }\n+        \"#;\n+        check_no_diagnostic_for_target_file(\"/main.rs\", content);\n+    }\n+\n     #[test]\n     fn test_fill_struct_fields_empty() {\n         let before = r\""}]}