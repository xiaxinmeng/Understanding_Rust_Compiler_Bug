{"sha": "1e73a9eb4be45092fdd5b76cc50db00970c852f7", "node_id": "C_kwDOAAsO6NoAKDFlNzNhOWViNGJlNDUwOTJmZGQ1Yjc2Y2M1MGRiMDA5NzBjODUyZjc", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-21T21:07:30Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-21T21:07:30Z"}, "message": "do not consider `await` in nested `async` blocks", "tree": {"sha": "7705c43f75c075026f0f436e7824fe27c5637221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7705c43f75c075026f0f436e7824fe27c5637221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e73a9eb4be45092fdd5b76cc50db00970c852f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e73a9eb4be45092fdd5b76cc50db00970c852f7", "html_url": "https://github.com/rust-lang/rust/commit/1e73a9eb4be45092fdd5b76cc50db00970c852f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e73a9eb4be45092fdd5b76cc50db00970c852f7/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "html_url": "https://github.com/rust-lang/rust/commit/435a8ad86c7a33bd7ffb91c59039943408d3b6aa"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "c1339d94637265743699721fcfb7e177bb6d1184", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1e73a9eb4be45092fdd5b76cc50db00970c852f7/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e73a9eb4be45092fdd5b76cc50db00970c852f7/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=1e73a9eb4be45092fdd5b76cc50db00970c852f7", "patch": "@@ -1,5 +1,5 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_fn, FnKind, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n@@ -42,21 +42,43 @@ declare_lint_pass!(UnusedAsync => [UNUSED_ASYNC]);\n struct AsyncFnVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     found_await: bool,\n+    /// Also keep track of `await`s in nested async blocks so we can mention\n+    /// it in a note\n+    found_await_in_async_block: bool,\n+    async_depth: usize,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         if let ExprKind::Yield(_, YieldSource::Await { .. }) = ex.kind {\n-            self.found_await = true;\n+            if self.async_depth == 1 {\n+                self.found_await = true;\n+            } else {\n+                self.found_await_in_async_block = true;\n+            }\n         }\n         walk_expr(self, ex);\n     }\n \n     fn nested_visit_map(&mut self) -> Self::Map {\n         self.cx.tcx.hir()\n     }\n+\n+    fn visit_body(&mut self, b: &'tcx Body<'tcx>) {\n+        let is_async_block = matches!(b.generator_kind, Some(rustc_hir::GeneratorKind::Async(_)));\n+\n+        if is_async_block {\n+            self.async_depth += 1;\n+        }\n+\n+        walk_body(self, b);\n+\n+        if is_async_block {\n+            self.async_depth -= 1;\n+        }\n+    }\n }\n \n impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n@@ -70,9 +92,27 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         def_id: LocalDefId,\n     ) {\n         if !span.from_expansion() && fn_kind.asyncness().is_async() {\n-            let mut visitor = AsyncFnVisitor { cx, found_await: false };\n+            let mut visitor = AsyncFnVisitor {\n+                cx,\n+                found_await: false,\n+                async_depth: 0,\n+                found_await_in_async_block: false,\n+            };\n             walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), def_id);\n             if !visitor.found_await {\n+                span_lint_and_then(\n+                    cx,\n+                    UNUSED_ASYNC,\n+                    span,\n+                    \"unused `async` for function with no await statements\",\n+                    |diag| {\n+                        diag.help(\"consider removing the `async` from this function\");\n+\n+                        if visitor.found_await_in_async_block {\n+                            diag.note(\"`await` used in an async block, which does not require the enclosing function to be `async`\");\n+                        }\n+                    },\n+                );\n                 span_lint_and_help(\n                     cx,\n                     UNUSED_ASYNC,"}, {"sha": "bfaa5dadfa59ee2a56e259d84a5bf2ef41dd9584", "filename": "tests/ui/unused_async.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e73a9eb4be45092fdd5b76cc50db00970c852f7/tests%2Fui%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e73a9eb4be45092fdd5b76cc50db00970c852f7/tests%2Fui%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.rs?ref=1e73a9eb4be45092fdd5b76cc50db00970c852f7", "patch": "@@ -3,6 +3,26 @@\n use std::future::Future;\n use std::pin::Pin;\n \n+mod issue10800 {\n+    #![allow(dead_code, unused_must_use, clippy::no_effect)]\n+\n+    use std::future::ready;\n+\n+    async fn async_block_await() {\n+        async {\n+            ready(()).await;\n+        };\n+    }\n+\n+    async fn normal_block_await() {\n+        {\n+            {\n+                ready(()).await;\n+            }\n+        }\n+    }\n+}\n+\n async fn foo() -> i32 {\n     4\n }"}, {"sha": "e39f9b20b881697f32b31a0c834081f71fda712b", "filename": "tests/ui/unused_async.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e73a9eb4be45092fdd5b76cc50db00970c852f7/tests%2Fui%2Funused_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e73a9eb4be45092fdd5b76cc50db00970c852f7/tests%2Fui%2Funused_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.stderr?ref=1e73a9eb4be45092fdd5b76cc50db00970c852f7", "patch": "@@ -1,16 +1,29 @@\n error: unused `async` for function with no await statements\n-  --> $DIR/unused_async.rs:6:1\n+  --> $DIR/unused_async.rs:11:5\n+   |\n+LL | /     async fn async_block_await() {\n+LL | |         async {\n+LL | |             ready(()).await;\n+LL | |         };\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider removing the `async` from this function\n+   = note: `await` used in an async block, which does not require the enclosing function to be `async`\n+   = note: `-D clippy::unused-async` implied by `-D warnings`\n+\n+error: unused `async` for function with no await statements\n+  --> $DIR/unused_async.rs:26:1\n    |\n LL | / async fn foo() -> i32 {\n LL | |     4\n LL | | }\n    | |_^\n    |\n    = help: consider removing the `async` from this function\n-   = note: `-D clippy::unused-async` implied by `-D warnings`\n \n error: unused `async` for function with no await statements\n-  --> $DIR/unused_async.rs:17:5\n+  --> $DIR/unused_async.rs:37:5\n    |\n LL | /     async fn unused(&self) -> i32 {\n LL | |         1\n@@ -19,5 +32,5 @@ LL | |     }\n    |\n    = help: consider removing the `async` from this function\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}]}