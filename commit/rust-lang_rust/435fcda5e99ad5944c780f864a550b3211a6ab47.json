{"sha": "435fcda5e99ad5944c780f864a550b3211a6ab47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNWZjZGE1ZTk5YWQ1OTQ0Yzc4MGY4NjRhNTUwYjMyMTFhNmFiNDc=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-18T15:09:08Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T18:22:48Z"}, "message": "iterator: Add .cycle() to repeat an iterator", "tree": {"sha": "28ab4408fc76942c0581436c2ea4e6a1ba5ec94b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ab4408fc76942c0581436c2ea4e6a1ba5ec94b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435fcda5e99ad5944c780f864a550b3211a6ab47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435fcda5e99ad5944c780f864a550b3211a6ab47", "html_url": "https://github.com/rust-lang/rust/commit/435fcda5e99ad5944c780f864a550b3211a6ab47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435fcda5e99ad5944c780f864a550b3211a6ab47/comments", "author": null, "committer": null, "parents": [{"sha": "8aae6edce09a8e2a32a154acb55c9879dbebf99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aae6edce09a8e2a32a154acb55c9879dbebf99c", "html_url": "https://github.com/rust-lang/rust/commit/8aae6edce09a8e2a32a154acb55c9879dbebf99c"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "13c234d63974cb8f60d7a1e4d85b940a0d5e15f2", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/435fcda5e99ad5944c780f864a550b3211a6ab47/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435fcda5e99ad5944c780f864a550b3211a6ab47/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=435fcda5e99ad5944c780f864a550b3211a6ab47", "patch": "@@ -729,6 +729,55 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n     }\n }\n \n+/// A trait for iterators that are clonable.\n+// FIXME #6967: Dummy A parameter to get around type inference bug\n+pub trait ClonableIterator<A> {\n+    /// Repeats an iterator endlessly\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let a = Counter::new(1,1).take_(1);\n+    /// let mut cy = a.cycle();\n+    /// assert_eq!(cy.next(), Some(1));\n+    /// assert_eq!(cy.next(), Some(1));\n+    /// ~~~\n+    fn cycle(self) -> CycleIterator<A, Self>;\n+}\n+\n+impl<A, T: Clone + Iterator<A>> ClonableIterator<A> for T {\n+    #[inline]\n+    fn cycle(self) -> CycleIterator<A, T> {\n+        CycleIterator{orig: self.clone(), iter: self}\n+    }\n+}\n+\n+/// An iterator that repeats endlessly\n+pub struct CycleIterator<A, T> {\n+    priv orig: T,\n+    priv iter: T,\n+}\n+\n+impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<A, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        match self.iter.next() {\n+            None => { self.iter = self.orig.clone(); self.iter.next() }\n+            y => y\n+        }\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        // the cycle iterator is either empty or infinite\n+        match self.orig.size_hint() {\n+            sz @ (0, Some(0)) => sz,\n+            (0, _) => (0, None),\n+            _ => (uint::max_value, None)\n+        }\n+    }\n+}\n+\n /// An iterator which strings two iterators together\n // FIXME #6967: Dummy A parameter to get around type inference bug\n pub struct ChainIterator<A, T, U> {"}]}