{"sha": "e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyY2I5N2EyZmNmNTQyMTkyZmY5Nzc2ZGQ2YTZlMmIzYzdiYzY0YjI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-28T14:54:47Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-28T16:00:05Z"}, "message": "Add some missing cases for ty_res in ty.rs", "tree": {"sha": "b6f5ca6f451ddc20cae6b6adb5bf2adc4dc086c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6f5ca6f451ddc20cae6b6adb5bf2adc4dc086c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2", "html_url": "https://github.com/rust-lang/rust/commit/e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d730bb730a9bda5e2ed50bed1993352c497f7c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/d730bb730a9bda5e2ed50bed1993352c497f7c94", "html_url": "https://github.com/rust-lang/rust/commit/d730bb730a9bda5e2ed50bed1993352c497f7c94"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "486ef17bb1c8ced910e78e2988acbf31db1164e9", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=e2cb97a2fcf542192ff9776dd6a6e2b3c7bc64b2", "patch": "@@ -1047,6 +1047,7 @@ fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n                 if (type_has_pointers(cx, tup_ty)) { result = true; }\n             }\n         }\n+        case (ty_res(?did, ?inner)) { result = type_has_pointers(cx, inner); }\n         case (_) { result = true; }\n     }\n \n@@ -1517,8 +1518,7 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n                     auto len = vec::len[mt](mts_a);\n                     if (len != vec::len[mt](mts_b)) { ret false; }\n                     auto i = 0u;\n-                    while (i < len) {\n-                        if (!equal_mt(mts_a.(i), mts_b.(i))) { ret false; }\n+                    while (i < len) {                        if (!equal_mt(mts_a.(i), mts_b.(i))) { ret false; }\n                         i += 1u;\n                     }\n                     ret true;\n@@ -1587,6 +1587,14 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n                 case (_) { ret false; }\n             }\n         }\n+        case (ty_res(?id_a, ?inner_a)) {\n+            alt (b) {\n+                case (ty_res(?id_b, ?inner_b)) {\n+                    ret equal_def(id_a, id_b) && ret eq_ty(inner_a, inner_b);\n+                }\n+                case (_) { ret false; }\n+            }\n+        }\n         case (ty_var(?v_a)) {\n             alt (b) {\n                 case (ty_var(?v_b)) { ret v_a == v_b; }\n@@ -2375,6 +2383,24 @@ mod unify {\n                     case (_) { ret ures_err(terr_mismatch); }\n                 }\n             }\n+            case (ty::ty_res(?ex_id, ?ex_inner)) {\n+                alt (struct(cx.tcx, actual)) {\n+                    case (ty::ty_res(?act_id, ?act_inner)) {\n+                        if (ex_id._0 != act_id._0 || ex_id._1 != act_id._1) {\n+                            ret ures_err(terr_mismatch);\n+                        }\n+                        auto result = unify_step(cx, ex_inner, act_inner);\n+                        alt (result) {\n+                            case (ures_ok(?res_inner)) {\n+                                ret ures_ok(mk_res(cx.tcx, act_id,\n+                                                   res_inner));\n+                            }\n+                            case (_) { ret result; }\n+                        }\n+                    }\n+                    case (_) { ret ures_err(terr_mismatch); }\n+                }\n+            }\n             case (ty::ty_chan(?expected_sub)) {\n                 alt (struct(cx.tcx, actual)) {\n                     case (ty::ty_chan(?actual_sub)) {"}]}