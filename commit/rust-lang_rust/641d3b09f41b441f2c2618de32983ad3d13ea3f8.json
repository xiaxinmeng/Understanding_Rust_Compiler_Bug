{"sha": "641d3b09f41b441f2c2618de32983ad3d13ea3f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MWQzYjA5ZjQxYjQ0MWYyYzI2MThkZTMyOTgzYWQzZDEzZWEzZjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-05-03T18:39:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-05-18T18:22:04Z"}, "message": "std: Attempt again to inline thread-local-init across crates\n\nIssue #25088 has been part of `thread_local!` for quite some time now.\nHistorical attempts have been made to add `#[inline]` to `__getit`\nin #43931, #50252, and #59720, but these attempts ended up not landing\nat the time due to segfaults on Windows.\n\nIn the interim though with `const`-initialized thread locals AFAIK this\nis the only remaining bug which is why you might want to use\n`#[thread_local]` over `thread_local!`. As a result I figured it was\ntime to resubmit this and see how it fares on CI and if I can help\ndebugging any issues that crop up.\n\nCloses #25088", "tree": {"sha": "b170d00257ffb463cba8b5d235622d7aa13f0f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b170d00257ffb463cba8b5d235622d7aa13f0f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641d3b09f41b441f2c2618de32983ad3d13ea3f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641d3b09f41b441f2c2618de32983ad3d13ea3f8", "html_url": "https://github.com/rust-lang/rust/commit/641d3b09f41b441f2c2618de32983ad3d13ea3f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641d3b09f41b441f2c2618de32983ad3d13ea3f8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716394d6581b60c75cfdd88b8e5b876f2db88b62", "url": "https://api.github.com/repos/rust-lang/rust/commits/716394d6581b60c75cfdd88b8e5b876f2db88b62", "html_url": "https://github.com/rust-lang/rust/commit/716394d6581b60c75cfdd88b8e5b876f2db88b62"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "c2c7ab918985bd9d615e32f32b7cefe9795514e6", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/641d3b09f41b441f2c2618de32983ad3d13ea3f8/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d3b09f41b441f2c2618de32983ad3d13ea3f8/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=641d3b09f41b441f2c2618de32983ad3d13ea3f8", "patch": "@@ -162,6 +162,7 @@ macro_rules! thread_local {\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n+        #[cfg_attr(not(target_env = \"msvc\"), inline)] // see comments below\n         unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n             const _REQUIRE_UNSTABLE: () = $crate::thread::require_unstable_const_init_thread_local();\n \n@@ -260,6 +261,29 @@ macro_rules! __thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n+            // When reading this function you might ask \"why is this inlined\n+            // everywhere other than MSVC?\", and that's a very reasonable\n+            // question to ask. The short story is that it segfaults rustc if\n+            // this function is inlined. The longer story is that MSVC looks to\n+            // not support `extern` references to thread locals across DLL\n+            // boundaries. This appears to at least not be supported in the ABI\n+            // that LLVM implements.\n+            //\n+            // Because of this we never inline on MVSC, but we do inline on\n+            // other platforms (where external references to thread locals\n+            // across DLLs are supported). A better fix for this would be to\n+            // inline this function on MSVC, but only for \"statically linked\"\n+            // components. For example if two separately compiled rlibs end up\n+            // getting linked into a DLL then it's fine to inline this function\n+            // across that boundary. It's only not fine to inline this function\n+            // across a DLL boundary. Unfortunately rustc doesn't currently have\n+            // this sort of logic available in an attribute, and it's not clear\n+            // that rustc is even equipped to answer this (it's more of a Cargo\n+            // question kinda). This means that, unfortunately, MSVC gets the\n+            // pessimistic path for now where it's never inlined.\n+            //\n+            // The issue of \"should enable on MSVC sometimes\" is #84933\n+            #[cfg_attr(not(target_env = \"msvc\"), inline)]\n             unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n                 #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n                 static __KEY: $crate::thread::__StaticLocalKeyInner<$t> ="}, {"sha": "29b5e3ca244bf02eff41180eaf5e305d0832ac21", "filename": "src/test/codegen/auxiliary/thread_local_aux.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/641d3b09f41b441f2c2618de32983ad3d13ea3f8/src%2Ftest%2Fcodegen%2Fauxiliary%2Fthread_local_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d3b09f41b441f2c2618de32983ad3d13ea3f8/src%2Ftest%2Fcodegen%2Fauxiliary%2Fthread_local_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fauxiliary%2Fthread_local_aux.rs?ref=641d3b09f41b441f2c2618de32983ad3d13ea3f8", "patch": "@@ -0,0 +1,6 @@\n+#![crate_type = \"lib\"]\n+#![feature(thread_local_const_init)]\n+\n+use std::cell::Cell;\n+\n+thread_local!(pub static A: Cell<u64> = const { Cell::new(0) });"}, {"sha": "f14368e39902dc6b41d9e46b02688e639cf0688b", "filename": "src/test/codegen/thread-local.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/641d3b09f41b441f2c2618de32983ad3d13ea3f8/src%2Ftest%2Fcodegen%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d3b09f41b441f2c2618de32983ad3d13ea3f8/src%2Ftest%2Fcodegen%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fthread-local.rs?ref=641d3b09f41b441f2c2618de32983ad3d13ea3f8", "patch": "@@ -0,0 +1,50 @@\n+// compile-flags: -O\n+// aux-build:thread_local_aux.rs\n+// ignore-windows FIXME(#84933)\n+// ignore-wasm globals are used instead of thread locals\n+// ignore-emscripten globals are used instead of thread locals\n+// ignore-android does not use #[thread_local]\n+\n+#![crate_type = \"lib\"]\n+#![feature(thread_local_const_init)]\n+\n+extern crate thread_local_aux as aux;\n+\n+use std::cell::Cell;\n+\n+thread_local!(static A: Cell<u32> = const { Cell::new(1) });\n+\n+// CHECK: [[TLS_AUX:@.+]] = external thread_local local_unnamed_addr global i64\n+// CHECK: [[TLS:@.+]] = internal thread_local unnamed_addr global\n+\n+// CHECK-LABEL: @get\n+#[no_mangle]\n+fn get() -> u32 {\n+    // CHECK: %0 = load i32, i32* bitcast ({{.*}} [[TLS]] to i32*)\n+    // CHECK-NEXT: ret i32 %0\n+    A.with(|a| a.get())\n+}\n+\n+// CHECK-LABEL: @set\n+#[no_mangle]\n+fn set(v: u32) {\n+    // CHECK: store i32 %0, i32* bitcast ({{.*}} [[TLS]] to i32*)\n+    // CHECK-NEXT: ret void\n+    A.with(|a| a.set(v))\n+}\n+\n+// CHECK-LABEL: @get_aux\n+#[no_mangle]\n+fn get_aux() -> u64 {\n+    // CHECK: %0 = load i64, i64* [[TLS_AUX]]\n+    // CHECK-NEXT: ret i64 %0\n+    aux::A.with(|a| a.get())\n+}\n+\n+// CHECK-LABEL: @set_aux\n+#[no_mangle]\n+fn set_aux(v: u64) {\n+    // CHECK: store i64 %0, i64* [[TLS_AUX]]\n+    // CHECK-NEXT: ret void\n+    aux::A.with(|a| a.set(v))\n+}"}]}