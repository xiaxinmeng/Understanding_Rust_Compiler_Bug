{"sha": "27c8dfddac4c69a6fd399abe537e1007306c58cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzhkZmRkYWM0YzY5YTZmZDM5OWFiZTUzN2UxMDA3MzA2YzU4Y2Y=", "commit": {"author": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2019-02-04T06:38:43Z"}, "committer": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2019-02-04T06:55:56Z"}, "message": "Improve error message and docs for non-UTF-8 bytes in stdio on Windows\n\ncc #23344", "tree": {"sha": "be46054689b608f9139746724f431a7f3aa61c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be46054689b608f9139746724f431a7f3aa61c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c8dfddac4c69a6fd399abe537e1007306c58cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c8dfddac4c69a6fd399abe537e1007306c58cf", "html_url": "https://github.com/rust-lang/rust/commit/27c8dfddac4c69a6fd399abe537e1007306c58cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c8dfddac4c69a6fd399abe537e1007306c58cf/comments", "author": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "html_url": "https://github.com/rust-lang/rust/commit/4314dbaa761d463d136592ab7fc9cdae46c8cc2a"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "4068c0f9c7de5ca698f1056a004c4be31efaf9dd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/27c8dfddac4c69a6fd399abe537e1007306c58cf/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c8dfddac4c69a6fd399abe537e1007306c58cf/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=27c8dfddac4c69a6fd399abe537e1007306c58cf", "patch": "@@ -131,6 +131,11 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n ///\n /// [`io::stdin`]: fn.stdin.html\n /// [`BufRead`]: trait.BufRead.html\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdin {\n     inner: Arc<Mutex<BufReader<Maybe<StdinRaw>>>>,\n@@ -144,6 +149,11 @@ pub struct Stdin {\n /// [`Read`]: trait.Read.html\n /// [`BufRead`]: trait.BufRead.html\n /// [`Stdin::lock`]: struct.Stdin.html#method.lock\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<Maybe<StdinRaw>>>,\n@@ -157,6 +167,11 @@ pub struct StdinLock<'a> {\n ///\n /// [lock]: struct.Stdin.html#method.lock\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:\n@@ -328,6 +343,11 @@ impl<'a> fmt::Debug for StdinLock<'a> {\n ///\n /// Created by the [`io::stdout`] method.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// [`lock`]: #method.lock\n /// [`io::stdout`]: fn.stdout.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -343,6 +363,11 @@ pub struct Stdout {\n /// This handle implements the [`Write`] trait, and is constructed via\n /// the [`Stdout::lock`] method.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// [`Write`]: trait.Write.html\n /// [`Stdout::lock`]: struct.Stdout.html#method.lock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -358,6 +383,11 @@ pub struct StdoutLock<'a> {\n ///\n /// [Stdout::lock]: struct.Stdout.html#method.lock\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:\n@@ -476,6 +506,11 @@ impl<'a> fmt::Debug for StdoutLock<'a> {\n /// For more information, see the [`io::stderr`] method.\n ///\n /// [`io::stderr`]: fn.stderr.html\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stderr {\n     inner: Arc<ReentrantMutex<RefCell<Maybe<StderrRaw>>>>,\n@@ -487,6 +522,11 @@ pub struct Stderr {\n /// the [`Stderr::lock`] method.\n ///\n /// [`Stderr::lock`]: struct.Stderr.html#method.lock\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StderrLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<Maybe<StderrRaw>>>,\n@@ -496,6 +536,11 @@ pub struct StderrLock<'a> {\n ///\n /// This handle is not buffered.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:"}, {"sha": "0ea19a855257b4d8cc3a34f15d1b00f0746db03c", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c8dfddac4c69a6fd399abe537e1007306c58cf/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c8dfddac4c69a6fd399abe537e1007306c58cf/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=27c8dfddac4c69a6fd399abe537e1007306c58cf", "patch": "@@ -188,7 +188,9 @@ impl Output {\n }\n \n fn invalid_encoding() -> io::Error {\n-    io::Error::new(io::ErrorKind::InvalidData, \"text was not valid unicode\")\n+    io::Error::new(io::ErrorKind::InvalidData,\n+                   \"Windows stdio in console mode does not support non-UTF-8 byte sequences; \\\n+                    see https://github.com/rust-lang/rust/issues/23344\")\n }\n \n fn readconsole_input_control(wakeup_mask: c::ULONG) -> c::CONSOLE_READCONSOLE_CONTROL {"}]}