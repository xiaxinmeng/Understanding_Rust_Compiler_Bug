{"sha": "d9bf37a5ae75c06da4ab80a008b06de1a5e13f64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmYzN2E1YWU3NWMwNmRhNGFiODBhMDA4YjA2ZGUxYTVlMTNmNjQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-28T11:54:05Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-28T11:54:05Z"}, "message": "use --edition for doctests, rather than just the crate", "tree": {"sha": "7744a18bbc110f8d6249b5845ccd8b549ffde046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7744a18bbc110f8d6249b5845ccd8b549ffde046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64", "html_url": "https://github.com/rust-lang/rust/commit/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e48dde7c9d8cc7be9b22d7cf52a9549b5b0637", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e48dde7c9d8cc7be9b22d7cf52a9549b5b0637", "html_url": "https://github.com/rust-lang/rust/commit/a0e48dde7c9d8cc7be9b22d7cf52a9549b5b0637"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "9704a0369476e155da36033a54f7382a54b61fb5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d9bf37a5ae75c06da4ab80a008b06de1a5e13f64", "patch": "@@ -446,7 +446,7 @@ pub fn main_args(args: &[String]) -> isize {\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n-                                  display_warnings, linker)\n+                                  display_warnings, linker, edition)\n         }\n         (true, false) => {\n             return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,"}, {"sha": "daa8966b104e8d193c22925b9d426872b4d92eb1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=d9bf37a5ae75c06da4ab80a008b06de1a5e13f64", "patch": "@@ -18,6 +18,7 @@ use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n use syntax::codemap::DUMMY_SP;\n+use syntax::edition::Edition;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n@@ -139,7 +140,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            display_warnings: bool, linker: Option<PathBuf>) -> isize {\n+            display_warnings: bool, linker: Option<PathBuf>, edition: Edition) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -151,7 +152,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut collector = Collector::new(input.to_owned(), cfgs, libs, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(PathBuf::from(input)),\n-                                       linker);\n+                                       linker, edition);\n     find_testable_code(&input_str, &mut collector, DUMMY_SP, None);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests,"}, {"sha": "e2923df16999e7fdb5e7057609d7bb5a58397434", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bf37a5ae75c06da4ab80a008b06de1a5e13f64/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d9bf37a5ae75c06da4ab80a008b06de1a5e13f64", "patch": "@@ -123,7 +123,8 @@ pub fn run(input_path: &Path,\n                                        maybe_sysroot,\n                                        Some(codemap),\n                                        None,\n-                                       linker);\n+                                       linker,\n+                                       edition);\n \n     {\n         let map = hir::map::map_crate(&sess, &cstore, &mut hir_forest, &defs);\n@@ -183,8 +184,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-            maybe_sysroot: Option<PathBuf>,\n-            linker: Option<PathBuf>) {\n+            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n@@ -210,6 +210,10 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         },\n         test: as_test_harness,\n         unstable_features: UnstableFeatures::from_environment(),\n+        debugging_opts: config::DebuggingOptions {\n+            edition,\n+            ..config::basic_debugging_options()\n+        },\n         ..config::basic_options().clone()\n     };\n \n@@ -473,13 +477,14 @@ pub struct Collector {\n     codemap: Option<Lrc<CodeMap>>,\n     filename: Option<PathBuf>,\n     linker: Option<PathBuf>,\n+    edition: Edition,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n                codemap: Option<Lrc<CodeMap>>, filename: Option<PathBuf>,\n-               linker: Option<PathBuf>) -> Collector {\n+               linker: Option<PathBuf>, edition: Edition) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -494,6 +499,7 @@ impl Collector {\n             codemap,\n             filename,\n             linker,\n+            edition,\n         }\n     }\n \n@@ -513,6 +519,7 @@ impl Collector {\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         let linker = self.linker.clone();\n+        let edition = self.edition;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -543,7 +550,8 @@ impl Collector {\n                                  error_codes,\n                                  &opts,\n                                  maybe_sysroot,\n-                                 linker)\n+                                 linker,\n+                                 edition)\n                     }))\n                 } {\n                     Ok(()) => (),"}]}