{"sha": "cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMTE1YWMyZDRmNTdkOGI1OTBjOGQ0NmQ4ZjllMjk1OGVkOWE1Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T23:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T23:01:48Z"}, "message": "auto merge of #14075 : Rufflewind/rust/patch-3, r=alexcrichton\n\n- Use Unicode-aware versions of `CreateProcess` (Fixes #13815) and `Get/FreeEnvironmentStrings`.\r\n    - Includes a helper function `os::win32::as_mut_utf16_p`, which does the same thing as `os::win32::as_utf16_p` except the pointer is mutable.\r\n    - Fixed `make_command_line` to handle Unicode correctly.\r\n- Tests for the above.", "tree": {"sha": "125dfe2d8e2f62ac6ce9b51e32b80b485086f2b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125dfe2d8e2f62ac6ce9b51e32b80b485086f2b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "html_url": "https://github.com/rust-lang/rust/commit/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ad42b3ae97fd363b1a13c43305995fe139fc8ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad42b3ae97fd363b1a13c43305995fe139fc8ef", "html_url": "https://github.com/rust-lang/rust/commit/5ad42b3ae97fd363b1a13c43305995fe139fc8ef"}, {"sha": "b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e3f3a41715a7de7e32eb32456aa25132c8ff46", "html_url": "https://github.com/rust-lang/rust/commit/b8e3f3a41715a7de7e32eb32456aa25132c8ff46"}], "stats": {"total": 185, "additions": 153, "deletions": 32}, "files": [{"sha": "a35ebb06437d92533d6d54815f9c3ba5fe4523b9", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "patch": "@@ -208,7 +208,7 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use consts::os::extra::{TRUE, FALSE, INFINITE};\n #[cfg(windows)] pub use consts::os::extra::{PROCESS_TERMINATE, PROCESS_QUERY_INFORMATION};\n #[cfg(windows)] pub use consts::os::extra::{STILL_ACTIVE, DETACHED_PROCESS};\n-#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW_PROCESS_GROUP};\n+#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW_PROCESS_GROUP, CREATE_UNICODE_ENVIRONMENT};\n #[cfg(windows)] pub use consts::os::extra::{FILE_BEGIN, FILE_END, FILE_CURRENT};\n #[cfg(windows)] pub use consts::os::extra::{FILE_GENERIC_READ, FILE_GENERIC_WRITE};\n #[cfg(windows)] pub use consts::os::extra::{FILE_SHARE_READ, FILE_SHARE_WRITE, FILE_SHARE_DELETE};\n@@ -1937,6 +1937,7 @@ pub mod consts {\n \n             pub static DETACHED_PROCESS: DWORD = 0x00000008;\n             pub static CREATE_NEW_PROCESS_GROUP: DWORD = 0x00000200;\n+            pub static CREATE_UNICODE_ENVIRONMENT: DWORD = 0x00000400;\n \n             pub static PIPE_ACCESS_DUPLEX: DWORD = 0x00000003;\n             pub static PIPE_ACCESS_INBOUND: DWORD = 0x00000001;\n@@ -4193,8 +4194,8 @@ pub mod funcs {\n         pub mod kernel32 {\n             use types::os::arch::c95::{c_uint};\n             use types::os::arch::extra::{BOOL, DWORD, SIZE_T, HMODULE,\n-                                               LPCWSTR, LPWSTR, LPCSTR, LPSTR,\n-                                               LPCH, LPDWORD, LPVOID,\n+                                               LPCWSTR, LPWSTR,\n+                                               LPWCH, LPDWORD, LPVOID,\n                                                LPCVOID, LPOVERLAPPED,\n                                                LPSECURITY_ATTRIBUTES,\n                                                LPSTARTUPINFO,\n@@ -4211,8 +4212,8 @@ pub mod funcs {\n                                                -> DWORD;\n                 pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n                                                -> BOOL;\n-                pub fn GetEnvironmentStringsA() -> LPCH;\n-                pub fn FreeEnvironmentStringsA(env_ptr: LPCH) -> BOOL;\n+                pub fn GetEnvironmentStringsW() -> LPWCH;\n+                pub fn FreeEnvironmentStringsW(env_ptr: LPWCH) -> BOOL;\n                 pub fn GetModuleFileNameW(hModule: HMODULE,\n                                           lpFilename: LPWSTR,\n                                           nSize: DWORD)\n@@ -4251,16 +4252,16 @@ pub mod funcs {\n                                    dwProcessId: DWORD)\n                                    -> HANDLE;\n                 pub fn GetCurrentProcess() -> HANDLE;\n-                pub fn CreateProcessA(lpApplicationName: LPCSTR,\n-                                      lpCommandLine: LPSTR,\n+                pub fn CreateProcessW(lpApplicationName: LPCWSTR,\n+                                      lpCommandLine: LPWSTR,\n                                       lpProcessAttributes:\n                                       LPSECURITY_ATTRIBUTES,\n                                       lpThreadAttributes:\n                                       LPSECURITY_ATTRIBUTES,\n                                       bInheritHandles: BOOL,\n                                       dwCreationFlags: DWORD,\n                                       lpEnvironment: LPVOID,\n-                                      lpCurrentDirectory: LPCSTR,\n+                                      lpCurrentDirectory: LPCWSTR,\n                                       lpStartupInfo: LPSTARTUPINFO,\n                                       lpProcessInformation:\n                                       LPPROCESS_INFORMATION)"}, {"sha": "14ea1f12a5ca012a085ae53e97a4e12766bd5d3f", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "patch": "@@ -258,7 +258,7 @@ fn spawn_process_os(config: p::ProcessConfig,\n         GetCurrentProcess,\n         DuplicateHandle,\n         CloseHandle,\n-        CreateProcessA\n+        CreateProcessW\n     };\n     use libc::funcs::extra::msvcrt::get_osfhandle;\n \n@@ -318,15 +318,15 @@ fn spawn_process_os(config: p::ProcessConfig,\n         let mut create_err = None;\n \n         // stolen from the libuv code.\n-        let mut flags = 0;\n+        let mut flags = libc::CREATE_UNICODE_ENVIRONMENT;\n         if config.detach {\n             flags |= libc::DETACHED_PROCESS | libc::CREATE_NEW_PROCESS_GROUP;\n         }\n \n         with_envp(env, |envp| {\n             with_dirp(dir, |dirp| {\n-                cmd.with_c_str(|cmdp| {\n-                    let created = CreateProcessA(ptr::null(), mem::transmute(cmdp),\n+                os::win32::as_mut_utf16_p(cmd, |cmdp| {\n+                    let created = CreateProcessW(ptr::null(), cmdp,\n                                                  ptr::mut_null(), ptr::mut_null(), TRUE,\n                                                  flags, envp, dirp, &mut si,\n                                                  &mut pi);\n@@ -409,16 +409,17 @@ fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n         if quote {\n             cmd.push_char('\"');\n         }\n-        for i in range(0u, arg.len()) {\n-            append_char_at(cmd, arg, i);\n+        let argvec: Vec<char> = arg.chars().collect();\n+        for i in range(0u, argvec.len()) {\n+            append_char_at(cmd, &argvec, i);\n         }\n         if quote {\n             cmd.push_char('\"');\n         }\n     }\n \n-    fn append_char_at(cmd: &mut StrBuf, arg: &str, i: uint) {\n-        match arg[i] as char {\n+    fn append_char_at(cmd: &mut StrBuf, arg: &Vec<char>, i: uint) {\n+        match *arg.get(i) {\n             '\"' => {\n                 // Escape quotes.\n                 cmd.push_str(\"\\\\\\\"\");\n@@ -438,11 +439,11 @@ fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n         }\n     }\n \n-    fn backslash_run_ends_in_quote(s: &str, mut i: uint) -> bool {\n-        while i < s.len() && s[i] as char == '\\\\' {\n+    fn backslash_run_ends_in_quote(s: &Vec<char>, mut i: uint) -> bool {\n+        while i < s.len() && *s.get(i) == '\\\\' {\n             i += 1;\n         }\n-        return i < s.len() && s[i] as char == '\"';\n+        return i < s.len() && *s.get(i) == '\"';\n     }\n }\n \n@@ -691,7 +692,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*mut c_void| -> T) -> T {\n \n             for pair in env.iter() {\n                 let kv = format!(\"{}={}\", *pair.ref0(), *pair.ref1());\n-                blk.push_all(kv.as_bytes());\n+                blk.push_all(kv.to_utf16().as_slice());\n                 blk.push(0);\n             }\n \n@@ -704,9 +705,12 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*mut c_void| -> T) -> T {\n }\n \n #[cfg(windows)]\n-fn with_dirp<T>(d: Option<&Path>, cb: |*libc::c_char| -> T) -> T {\n+fn with_dirp<T>(d: Option<&Path>, cb: |*u16| -> T) -> T {\n     match d {\n-      Some(dir) => dir.with_c_str(|buf| cb(buf)),\n+      Some(dir) => match dir.as_str() {\n+          Some(dir_str) => os::win32::as_utf16_p(dir_str, cb),\n+          None => cb(ptr::null())\n+      },\n       None => cb(ptr::null())\n     }\n }\n@@ -860,5 +864,9 @@ mod tests {\n             make_command_line(\"echo\", [\"a b c\".to_owned()]),\n             \"echo \\\"a b c\\\"\".to_owned()\n         );\n+        assert_eq!(\n+            make_command_line(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", []),\n+            \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\".to_owned()\n+        );\n     }\n }"}, {"sha": "0a920a275acc4c575237521270041bd559cd9446", "filename": "src/libstd/os.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "patch": "@@ -31,7 +31,7 @@\n use clone::Clone;\n use container::Container;\n use libc;\n-use libc::{c_char, c_void, c_int};\n+use libc::{c_void, c_int};\n use option::{Some, None, Option};\n use os;\n use ops::Drop;\n@@ -49,6 +49,8 @@ use vec::Vec;\n \n #[cfg(unix)]\n use c_str::ToCStr;\n+#[cfg(unix)]\n+use libc::c_char;\n #[cfg(windows)]\n use str::OwnedStr;\n \n@@ -141,10 +143,14 @@ pub mod win32 {\n     }\n \n     pub fn as_utf16_p<T>(s: &str, f: |*u16| -> T) -> T {\n+        as_mut_utf16_p(s, |t| { f(t as *u16) })\n+    }\n+\n+    pub fn as_mut_utf16_p<T>(s: &str, f: |*mut u16| -> T) -> T {\n         let mut t = s.to_utf16();\n         // Null terminate before passing on.\n         t.push(0u16);\n-        f(t.as_ptr())\n+        f(t.as_mut_ptr())\n     }\n }\n \n@@ -182,22 +188,42 @@ pub fn env_as_bytes() -> Vec<(~[u8],~[u8])> {\n     unsafe {\n         #[cfg(windows)]\n         unsafe fn get_env_pairs() -> Vec<~[u8]> {\n-            use c_str;\n+            use slice::raw;\n \n             use libc::funcs::extra::kernel32::{\n-                GetEnvironmentStringsA,\n-                FreeEnvironmentStringsA\n+                GetEnvironmentStringsW,\n+                FreeEnvironmentStringsW\n             };\n-            let ch = GetEnvironmentStringsA();\n+            let ch = GetEnvironmentStringsW();\n             if ch as uint == 0 {\n                 fail!(\"os::env() failure getting env string from OS: {}\",\n                        os::last_os_error());\n             }\n+            // Here, we lossily decode the string as UTF16.\n+            //\n+            // The docs suggest that the result should be in Unicode, but\n+            // Windows doesn't guarantee it's actually UTF16 -- it doesn't\n+            // validate the environment string passed to CreateProcess nor\n+            // SetEnvironmentVariable.  Yet, it's unlikely that returning a\n+            // raw u16 buffer would be of practical use since the result would\n+            // be inherently platform-dependent and introduce additional\n+            // complexity to this code.\n+            //\n+            // Using the non-Unicode version of GetEnvironmentStrings is even\n+            // worse since the result is in an OEM code page.  Characters that\n+            // can't be encoded in the code page would be turned into question\n+            // marks.\n             let mut result = Vec::new();\n-            c_str::from_c_multistring(ch as *c_char, None, |cstr| {\n-                result.push(cstr.as_bytes_no_nul().to_owned());\n-            });\n-            FreeEnvironmentStringsA(ch);\n+            let mut i = 0;\n+            while *ch.offset(i) != 0 {\n+                let p = &*ch.offset(i);\n+                let len = ptr::position(p, |c| *c == 0);\n+                raw::buf_as_slice(p, len, |s| {\n+                    result.push(str::from_utf16_lossy(s).into_bytes());\n+                });\n+                i += len as int + 1;\n+            }\n+            FreeEnvironmentStringsW(ch);\n             result\n         }\n         #[cfg(unix)]"}, {"sha": "f9839ed39e752c4830bafbcc2180d2ea33dac960", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+// The test copies itself into a subdirectory with a non-ASCII name and then\n+// runs it as a child process within the subdirectory.  The parent process\n+// also adds an environment variable and an argument, both containing\n+// non-ASCII characters.  The child process ensures all the strings are\n+// intact.\n+\n+extern crate native;\n+\n+use std::io;\n+use std::io::fs;\n+use std::io::process::Process;\n+use std::io::process::ProcessConfig;\n+use std::os;\n+use std::path::Path;\n+\n+fn main() {\n+    let my_args = os::args();\n+    let my_cwd  = os::getcwd();\n+    let my_env  = os::env();\n+    let my_path = Path::new(os::self_exe_name().unwrap());\n+    let my_dir  = my_path.dir_path();\n+    let my_ext  = my_path.extension_str().unwrap_or(\"\");\n+\n+    // some non-ASCII characters\n+    let blah       = \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\";\n+\n+    let child_name = \"child\";\n+    let child_dir  = \"process-spawn-with-unicode-params-\" + blah;\n+\n+    // parameters sent to child / expected to be received from parent\n+    let arg = blah;\n+    let cwd = my_dir.join(Path::new(child_dir.clone()));\n+    let env = (\"RUST_TEST_PROC_SPAWN_UNICODE\".to_owned(), blah.to_owned());\n+\n+    // am I the parent or the child?\n+    if my_args.len() == 1 {             // parent\n+\n+        let child_filestem = Path::new(child_name);\n+        let child_filename = child_filestem.with_extension(my_ext);\n+        let child_path     = cwd.join(child_filename.clone());\n+\n+        // make a separate directory for the child\n+        drop(fs::mkdir(&cwd, io::UserRWX).is_ok());\n+        assert!(fs::copy(&my_path, &child_path).is_ok());\n+\n+        // run child\n+        let p = Process::configure(ProcessConfig {\n+            program: child_path.as_str().unwrap(),\n+            args: [arg.to_owned()],\n+            cwd: Some(&cwd),\n+            env: Some(my_env.append_one(env).as_slice()),\n+            .. ProcessConfig::new()\n+        }).unwrap().wait_with_output();\n+\n+        // display the output\n+        assert!(io::stdout().write(p.output.as_slice()).is_ok());\n+        assert!(io::stderr().write(p.error.as_slice()).is_ok());\n+\n+        // make sure the child succeeded\n+        assert!(p.status.success());\n+\n+    } else {                            // child\n+\n+        // check working directory (don't try to compare with `cwd` here!)\n+        assert!(my_cwd.ends_with_path(&Path::new(child_dir)));\n+\n+        // check arguments\n+        assert_eq!(my_args.get(1).as_slice(), arg);\n+\n+        // check environment variable\n+        assert!(my_env.contains(&env));\n+\n+    };\n+}"}]}