{"sha": "72531b7463db02b9e049e8ad7f095cce928ffc1e", "node_id": "C_kwDOAAsO6NoAKDcyNTMxYjc0NjNkYjAyYjllMDQ5ZThhZDdmMDk1Y2NlOTI4ZmZjMWU", "commit": {"author": {"name": "Sam Ginnett", "email": "ginnettsam@gmail.com", "date": "2023-06-14T05:59:03Z"}, "committer": {"name": "Sam Ginnett", "email": "ginnettsam@gmail.com", "date": "2023-06-14T06:04:00Z"}, "message": "Fix explicit-outlives-requirements lint span", "tree": {"sha": "8ddb869d08f45949473fe71aeac03dcfd92b6f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ddb869d08f45949473fe71aeac03dcfd92b6f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72531b7463db02b9e049e8ad7f095cce928ffc1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72531b7463db02b9e049e8ad7f095cce928ffc1e", "html_url": "https://github.com/rust-lang/rust/commit/72531b7463db02b9e049e8ad7f095cce928ffc1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72531b7463db02b9e049e8ad7f095cce928ffc1e/comments", "author": {"login": "sginnett", "id": 90643824, "node_id": "MDQ6VXNlcjkwNjQzODI0", "avatar_url": "https://avatars.githubusercontent.com/u/90643824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sginnett", "html_url": "https://github.com/sginnett", "followers_url": "https://api.github.com/users/sginnett/followers", "following_url": "https://api.github.com/users/sginnett/following{/other_user}", "gists_url": "https://api.github.com/users/sginnett/gists{/gist_id}", "starred_url": "https://api.github.com/users/sginnett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sginnett/subscriptions", "organizations_url": "https://api.github.com/users/sginnett/orgs", "repos_url": "https://api.github.com/users/sginnett/repos", "events_url": "https://api.github.com/users/sginnett/events{/privacy}", "received_events_url": "https://api.github.com/users/sginnett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sginnett", "id": 90643824, "node_id": "MDQ6VXNlcjkwNjQzODI0", "avatar_url": "https://avatars.githubusercontent.com/u/90643824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sginnett", "html_url": "https://github.com/sginnett", "followers_url": "https://api.github.com/users/sginnett/followers", "following_url": "https://api.github.com/users/sginnett/following{/other_user}", "gists_url": "https://api.github.com/users/sginnett/gists{/gist_id}", "starred_url": "https://api.github.com/users/sginnett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sginnett/subscriptions", "organizations_url": "https://api.github.com/users/sginnett/orgs", "repos_url": "https://api.github.com/users/sginnett/repos", "events_url": "https://api.github.com/users/sginnett/events{/privacy}", "received_events_url": "https://api.github.com/users/sginnett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa8762b7b6c2b75d6c83fb011ee8fa4874168829", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8762b7b6c2b75d6c83fb011ee8fa4874168829", "html_url": "https://github.com/rust-lang/rust/commit/fa8762b7b6c2b75d6c83fb011ee8fa4874168829"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "7b05bff515148342b8c700db54c0e8d599cb46b3", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72531b7463db02b9e049e8ad7f095cce928ffc1e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72531b7463db02b9e049e8ad7f095cce928ffc1e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=72531b7463db02b9e049e8ad7f095cce928ffc1e", "patch": "@@ -2124,12 +2124,16 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n             }\n \n             let ty_generics = cx.tcx.generics_of(def_id);\n+            let num_where_predicates = hir_generics\n+                .predicates\n+                .iter()\n+                .filter(|predicate| predicate.in_where_clause())\n+                .count();\n \n             let mut bound_count = 0;\n             let mut lint_spans = Vec::new();\n             let mut where_lint_spans = Vec::new();\n-            let mut dropped_predicate_count = 0;\n-            let num_predicates = hir_generics.predicates.len();\n+            let mut dropped_where_predicate_count = 0;\n             for (i, where_predicate) in hir_generics.predicates.iter().enumerate() {\n                 let (relevant_lifetimes, bounds, predicate_span, in_where_clause) =\n                     match where_predicate {\n@@ -2186,8 +2190,8 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                 bound_count += bound_spans.len();\n \n                 let drop_predicate = bound_spans.len() == bounds.len();\n-                if drop_predicate {\n-                    dropped_predicate_count += 1;\n+                if drop_predicate && in_where_clause {\n+                    dropped_where_predicate_count += 1;\n                 }\n \n                 if drop_predicate {\n@@ -2196,7 +2200,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     } else if predicate_span.from_expansion() {\n                         // Don't try to extend the span if it comes from a macro expansion.\n                         where_lint_spans.push(predicate_span);\n-                    } else if i + 1 < num_predicates {\n+                    } else if i + 1 < num_where_predicates {\n                         // If all the bounds on a predicate were inferable and there are\n                         // further predicates, we want to eat the trailing comma.\n                         let next_predicate_span = hir_generics.predicates[i + 1].span();\n@@ -2224,9 +2228,10 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                 }\n             }\n \n-            // If all predicates are inferable, drop the entire clause\n+            // If all predicates in where clause are inferable, drop the entire clause\n             // (including the `where`)\n-            if hir_generics.has_where_clause_predicates && dropped_predicate_count == num_predicates\n+            if hir_generics.has_where_clause_predicates\n+                && dropped_where_predicate_count == num_where_predicates\n             {\n                 let where_span = hir_generics.where_clause_span;\n                 // Extend the where clause back to the closing `>` of the"}, {"sha": "5058d61b5880230867044a0406284c09b9ada637", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72531b7463db02b9e049e8ad7f095cce928ffc1e/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72531b7463db02b9e049e8ad7f095cce928ffc1e/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed?ref=72531b7463db02b9e049e8ad7f095cce928ffc1e", "patch": "@@ -801,4 +801,10 @@ where\n     yoo: &'a U\n }\n \n+// https://github.com/rust-lang/rust/issues/105150\n+struct InferredWhereBoundWithInlineBound<'a, T: ?Sized>\n+{\n+    data: &'a T,\n+}\n+\n fn main() {}"}, {"sha": "3f63cb8e90030a0087926def2e175f4cfc595994", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72531b7463db02b9e049e8ad7f095cce928ffc1e/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72531b7463db02b9e049e8ad7f095cce928ffc1e/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs?ref=72531b7463db02b9e049e8ad7f095cce928ffc1e", "patch": "@@ -801,4 +801,12 @@ where\n     yoo: &'a U\n }\n \n+// https://github.com/rust-lang/rust/issues/105150\n+struct InferredWhereBoundWithInlineBound<'a, T: ?Sized>\n+//~^ ERROR outlives requirements can be inferred\n+    where T: 'a,\n+{\n+    data: &'a T,\n+}\n+\n fn main() {}"}, {"sha": "dbf301fd8a1b7b873b9092b55fc3b8d089613abd", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72531b7463db02b9e049e8ad7f095cce928ffc1e/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72531b7463db02b9e049e8ad7f095cce928ffc1e/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr?ref=72531b7463db02b9e049e8ad7f095cce928ffc1e", "patch": "@@ -10,6 +10,15 @@ note: the lint level is defined here\n LL | #![deny(explicit_outlives_requirements)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives.rs:805:56\n+   |\n+LL |   struct InferredWhereBoundWithInlineBound<'a, T: ?Sized>\n+   |  ________________________________________________________^\n+LL | |\n+LL | |     where T: 'a,\n+   | |________________^ help: remove this bound\n+\n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives.rs:26:31\n    |\n@@ -922,5 +931,5 @@ error: outlives requirements can be inferred\n LL |     union BeeWhereOutlivesAyTeeWhereDebug<'a, 'b, T> where 'b: 'a, T: Debug {\n    |                                                            ^^^^^^^^ help: remove this bound\n \n-error: aborting due to 153 previous errors\n+error: aborting due to 154 previous errors\n "}]}