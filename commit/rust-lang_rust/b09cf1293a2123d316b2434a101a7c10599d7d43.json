{"sha": "b09cf1293a2123d316b2434a101a7c10599d7d43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOWNmMTI5M2EyMTIzZDMxNmIyNDM0YTEwMWE3YzEwNTk5ZDdkNDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-14T09:58:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-15T09:01:47Z"}, "message": "astencode: convert code to use TyDecoder directly", "tree": {"sha": "06980d2a2deb5c417939bde26fde5d2983825e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06980d2a2deb5c417939bde26fde5d2983825e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b09cf1293a2123d316b2434a101a7c10599d7d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b09cf1293a2123d316b2434a101a7c10599d7d43", "html_url": "https://github.com/rust-lang/rust/commit/b09cf1293a2123d316b2434a101a7c10599d7d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b09cf1293a2123d316b2434a101a7c10599d7d43/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e6b5780e59977608f3b989410bc3b038f1ddc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e6b5780e59977608f3b989410bc3b038f1ddc9", "html_url": "https://github.com/rust-lang/rust/commit/38e6b5780e59977608f3b989410bc3b038f1ddc9"}], "stats": {"total": 135, "additions": 54, "deletions": 81}, "files": [{"sha": "52370f652a2fb162a71772d133e70885677523a9", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b09cf1293a2123d316b2434a101a7c10599d7d43/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b09cf1293a2123d316b2434a101a7c10599d7d43/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=b09cf1293a2123d316b2434a101a7c10599d7d43", "patch": "@@ -23,6 +23,7 @@ use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::{self, ToPredicate, Ty, HasTypeFlags};\n \n+use rbml;\n use std::str;\n use syntax::abi;\n use syntax::ast;\n@@ -166,6 +167,14 @@ pub struct TyDecoder<'a, 'tcx: 'a> {\n }\n \n impl<'a,'tcx> TyDecoder<'a,'tcx> {\n+    pub fn with_doc(tcx: &'a ty::ctxt<'tcx>,\n+                    crate_num: ast::CrateNum,\n+                    doc: rbml::Doc<'a>,\n+                    conv: DefIdConvert<'a>)\n+                    -> TyDecoder<'a,'tcx> {\n+        TyDecoder::new(doc.data, crate_num, doc.start, tcx, conv)\n+    }\n+\n     pub fn new(data: &'a [u8],\n                crate_num: ast::CrateNum,\n                pos: usize,\n@@ -244,7 +253,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         r\n     }\n \n-    fn parse_substs(&mut self) -> subst::Substs<'tcx> {\n+    pub fn parse_substs(&mut self) -> subst::Substs<'tcx> {\n         let regions = self.parse_region_substs();\n         let types = self.parse_vec_per_param_space(|this| this.parse_ty());\n         subst::Substs { types: types, regions: regions }\n@@ -394,13 +403,13 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         result\n     }\n \n-    fn parse_trait_ref(&mut self) -> ty::TraitRef<'tcx> {\n+    pub fn parse_trait_ref(&mut self) -> ty::TraitRef<'tcx> {\n         let def = self.parse_def(NominalType);\n         let substs = self.tcx.mk_substs(self.parse_substs());\n         ty::TraitRef {def_id: def, substs: substs}\n     }\n \n-    fn parse_ty(&mut self) -> Ty<'tcx> {\n+    pub fn parse_ty(&mut self) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         match self.next() {\n             'b' => return tcx.types.bool,\n@@ -609,7 +618,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         abi::lookup(&abi_str[..]).expect(abi_str)\n     }\n \n-    fn parse_closure_ty(&mut self) -> ty::ClosureTy<'tcx> {\n+    pub fn parse_closure_ty(&mut self) -> ty::ClosureTy<'tcx> {\n         let unsafety = parse_unsafety(self.next());\n         let sig = self.parse_sig();\n         let abi = self.parse_abi_set();\n@@ -655,7 +664,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                               variadic: variadic})\n     }\n \n-    fn parse_predicate(&mut self) -> ty::Predicate<'tcx> {\n+    pub fn parse_predicate(&mut self) -> ty::Predicate<'tcx> {\n         match self.next() {\n             't' => ty::Binder(self.parse_trait_ref()).to_predicate(),\n             'e' => ty::Binder(ty::EquatePredicate(self.parse_ty(),\n@@ -685,7 +694,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         }\n     }\n \n-    fn parse_type_param_def(&mut self) -> ty::TypeParameterDef<'tcx> {\n+    pub fn parse_type_param_def(&mut self) -> ty::TypeParameterDef<'tcx> {\n         let name = self.parse_name(':');\n         let def_id = self.parse_def(NominalType);\n         let space = self.parse_param_space();\n@@ -719,7 +728,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         }\n     }\n \n-    fn parse_existential_bounds(&mut self) -> ty::ExistentialBounds<'tcx> {\n+    pub fn parse_existential_bounds(&mut self) -> ty::ExistentialBounds<'tcx> {\n         let builtin_bounds = self.parse_builtin_bounds();\n         let region_bound = self.parse_region();\n         let mut projection_bounds = Vec::new();"}, {"sha": "e544d8d474979ac24bef90a8ce592736f9c1cdd3", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 38, "deletions": 74, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/b09cf1293a2123d316b2434a101a7c10599d7d43/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b09cf1293a2123d316b2434a101a7c10599d7d43/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=b09cf1293a2123d316b2434a101a7c10599d7d43", "patch": "@@ -1075,6 +1075,10 @@ impl<'a> doc_decoder_helpers for rbml::Doc<'a> {\n }\n \n trait rbml_decoder_decoder_helpers<'tcx> {\n+    fn read_ty_encoded<'a, 'b, F, R>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>,\n+                                     f: F) -> R\n+        where F: for<'x> FnOnce(&mut tydecode::TyDecoder<'x, 'tcx>) -> R;\n+\n     fn read_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Ty<'tcx>;\n     fn read_tys<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Vec<Ty<'tcx>>;\n     fn read_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n@@ -1123,14 +1127,14 @@ trait rbml_decoder_decoder_helpers<'tcx> {\n \n impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_ty_nodcx(&mut self,\n-                     tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata) -> Ty<'tcx> {\n+                     tcx: &ty::ctxt<'tcx>,\n+                     cdata: &cstore::crate_metadata)\n+                     -> Ty<'tcx> {\n         self.read_opaque(|_, doc| {\n-            Ok(tydecode::parse_ty_data(\n-                doc.data,\n-                cdata.cnum,\n-                doc.start,\n-                tcx,\n-                |_, id| decoder::translate_def_id(cdata, id)))\n+            Ok(\n+                tydecode::TyDecoder::with_doc(tcx, cdata.cnum, doc,\n+                                              &mut |_, id| decoder::translate_def_id(cdata, id))\n+                    .parse_ty())\n         }).unwrap()\n     }\n \n@@ -1149,32 +1153,22 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                          -> subst::Substs<'tcx>\n     {\n         self.read_opaque(|_, doc| {\n-            Ok(tydecode::parse_substs_data(\n-                doc.data,\n-                cdata.cnum,\n-                doc.start,\n-                tcx,\n-                |_, id| decoder::translate_def_id(cdata, id)))\n+            Ok(\n+                tydecode::TyDecoder::with_doc(tcx, cdata.cnum, doc,\n+                                              &mut |_, id| decoder::translate_def_id(cdata, id))\n+                    .parse_substs())\n         }).unwrap()\n     }\n \n-    fn read_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>) -> Ty<'tcx> {\n-        // Note: regions types embed local node ids.  In principle, we\n-        // should translate these node ids into the new decode\n-        // context.  However, we do not bother, because region types\n-        // are not used during trans.\n-\n+    fn read_ty_encoded<'b, 'c, F, R>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>, op: F) -> R\n+        where F: for<'x> FnOnce(&mut tydecode::TyDecoder<'x,'tcx>) -> R\n+    {\n         return self.read_opaque(|this, doc| {\n-            debug!(\"read_ty({})\", type_string(doc));\n-\n-            let ty = tydecode::parse_ty_data(\n-                doc.data,\n-                dcx.cdata.cnum,\n-                doc.start,\n-                dcx.tcx,\n-                |s, a| this.convert_def_id(dcx, s, a));\n-\n-            Ok(ty)\n+            debug!(\"read_ty_encoded({})\", type_string(doc));\n+            Ok(op(\n+                &mut tydecode::TyDecoder::with_doc(\n+                    dcx.tcx, dcx.cdata.cnum, doc,\n+                    &mut |s, a| this.convert_def_id(dcx, s, a))))\n         }).unwrap();\n \n         fn type_string(doc: rbml::Doc) -> String {\n@@ -1186,56 +1180,39 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         }\n     }\n \n+    fn read_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>) -> Ty<'tcx> {\n+        // Note: regions types embed local node ids.  In principle, we\n+        // should translate these node ids into the new decode\n+        // context.  However, we do not bother, because region types\n+        // are not used during trans.\n+\n+        return self.read_ty_encoded(dcx, |decoder| decoder.parse_ty());\n+    }\n+\n     fn read_tys<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                         -> Vec<Ty<'tcx>> {\n         self.read_to_vec(|this| Ok(this.read_ty(dcx))).unwrap().into_iter().collect()\n     }\n \n     fn read_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                               -> ty::TraitRef<'tcx> {\n-        self.read_opaque(|this, doc| {\n-            let ty = tydecode::parse_trait_ref_data(\n-                doc.data,\n-                dcx.cdata.cnum,\n-                doc.start,\n-                dcx.tcx,\n-                |s, a| this.convert_def_id(dcx, s, a));\n-            Ok(ty)\n-        }).unwrap()\n+        self.read_ty_encoded(dcx, |decoder| decoder.parse_trait_ref())\n     }\n \n     fn read_poly_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                    -> ty::PolyTraitRef<'tcx> {\n-        ty::Binder(self.read_opaque(|this, doc| {\n-            let ty = tydecode::parse_trait_ref_data(\n-                doc.data,\n-                dcx.cdata.cnum,\n-                doc.start,\n-                dcx.tcx,\n-                |s, a| this.convert_def_id(dcx, s, a));\n-            Ok(ty)\n-        }).unwrap())\n+        ty::Binder(self.read_ty_encoded(dcx, |decoder| decoder.parse_trait_ref()))\n     }\n \n     fn read_type_param_def<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                    -> ty::TypeParameterDef<'tcx> {\n-        self.read_opaque(|this, doc| {\n-            Ok(tydecode::parse_type_param_def_data(\n-                doc.data,\n-                doc.start,\n-                dcx.cdata.cnum,\n-                dcx.tcx,\n-                |s, a| this.convert_def_id(dcx, s, a)))\n-        }).unwrap()\n+        self.read_ty_encoded(dcx, |decoder| decoder.parse_type_param_def())\n     }\n \n     fn read_predicate<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                               -> ty::Predicate<'tcx>\n     {\n-        self.read_opaque(|this, doc| {\n-            Ok(tydecode::parse_predicate_data(doc.data, doc.start, dcx.cdata.cnum, dcx.tcx,\n-                                              |s, a| this.convert_def_id(dcx, s, a)))\n-        }).unwrap()\n+        self.read_ty_encoded(dcx, |decoder| decoder.parse_predicate())\n     }\n \n     fn read_type_scheme<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n@@ -1269,13 +1246,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_existential_bounds<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                        -> ty::ExistentialBounds<'tcx>\n     {\n-        self.read_opaque(|this, doc| {\n-            Ok(tydecode::parse_existential_bounds_data(doc.data,\n-                                                       dcx.cdata.cnum,\n-                                                       doc.start,\n-                                                       dcx.tcx,\n-                                                       |s, a| this.convert_def_id(dcx, s, a)))\n-        }).unwrap()\n+        self.read_ty_encoded(dcx, |decoder| decoder.parse_existential_bounds())\n     }\n \n     fn read_substs<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n@@ -1380,14 +1351,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_closure_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                -> ty::ClosureTy<'tcx>\n     {\n-        self.read_opaque(|this, doc| {\n-            Ok(tydecode::parse_ty_closure_data(\n-                doc.data,\n-                dcx.cdata.cnum,\n-                doc.start,\n-                dcx.tcx,\n-                |s, a| this.convert_def_id(dcx, s, a)))\n-        }).unwrap()\n+        self.read_ty_encoded(dcx, |decoder| decoder.parse_closure_ty())\n     }\n \n     /// Converts a def-id that appears in a type.  The correct"}]}