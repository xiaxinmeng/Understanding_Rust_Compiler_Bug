{"sha": "7d527159457420d55f1ee2f70615098a10176b91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNTI3MTU5NDU3NDIwZDU1ZjFlZTJmNzA2MTUwOThhMTAxNzZiOTE=", "commit": {"author": {"name": "zombiefungus", "email": "divmermarlav@gmail.com", "date": "2020-01-31T04:14:20Z"}, "committer": {"name": "zombiefungus", "email": "divmermarlav@gmail.com", "date": "2020-02-02T13:04:24Z"}, "message": "add new ImportAlias enum to differentiate no alias from an _ alias", "tree": {"sha": "f64ef8face72a68e5904bc6e4ddbb2c27ce5a5cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f64ef8face72a68e5904bc6e4ddbb2c27ce5a5cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d527159457420d55f1ee2f70615098a10176b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d527159457420d55f1ee2f70615098a10176b91", "html_url": "https://github.com/rust-lang/rust/commit/7d527159457420d55f1ee2f70615098a10176b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d527159457420d55f1ee2f70615098a10176b91/comments", "author": null, "committer": null, "parents": [{"sha": "dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "html_url": "https://github.com/rust-lang/rust/commit/dce7dc44be948bb6b73b79ce284ec2eb83811ae8"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "193067f73b4d165ac687dfeeec0bc9b883cdebaf", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7d527159457420d55f1ee2f70615098a10176b91", "patch": "@@ -438,7 +438,10 @@ where\n         } else {\n             match import.path.segments.last() {\n                 Some(last_segment) => {\n-                    let name = import.alias.clone().unwrap_or_else(|| last_segment.clone());\n+                    let name = match &import.alias {\n+                        raw::ImportAlias::Alias(name) => name.clone(),\n+                        _ => last_segment.clone(), // \"use as ;\" and \"use as _;\" are treated the same way\n+                    };\n                     log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n \n                     // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658"}, {"sha": "f068b4d4ed11faab77aa61fa46ec2760ef2f2cea", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=7d527159457420d55f1ee2f70615098a10176b91", "patch": "@@ -145,14 +145,21 @@ impl_arena_id!(Import);\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n     pub(super) path: ModPath,\n-    pub(super) alias: Option<Name>,\n+    pub(super) alias: ImportAlias,\n     pub(super) is_glob: bool,\n     pub(super) is_prelude: bool,\n     pub(super) is_extern_crate: bool,\n     pub(super) is_macro_use: bool,\n     pub(super) visibility: RawVisibility,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ImportAlias {\n+    NoAlias,\n+    Unnamed, // use Foo as _;\n+    Alias(Name),\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub(super) struct Def(RawId);\n impl_arena_id!(Def);\n@@ -353,7 +360,11 @@ impl RawItemsCollector {\n             let path = ModPath::from_name_ref(&name_ref);\n             let visibility =\n                 RawVisibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n-            let alias = extern_crate.alias().and_then(|a| a.name()).map(|it| it.as_name());\n+            let alias = extern_crate.alias().map_or(ImportAlias::NoAlias, |a| {\n+                a.name()\n+                    .map(|it| it.as_name())\n+                    .map_or(ImportAlias::Unnamed, |a| ImportAlias::Alias(a))\n+            });\n             let attrs = self.parse_attrs(&extern_crate);\n             // FIXME: cfg_attr\n             let is_macro_use = extern_crate.has_atom_attr(\"macro_use\");"}, {"sha": "27ccf6643029fde56b083246207a2e3ece238c2d", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=7d527159457420d55f1ee2f70615098a10176b91", "patch": "@@ -57,7 +57,12 @@ impl ModPath {\n     pub(crate) fn expand_use_item(\n         item_src: InFile<ast::UseItem>,\n         hygiene: &Hygiene,\n-        mut cb: impl FnMut(ModPath, &ast::UseTree, /* is_glob */ bool, Option<Name>),\n+        mut cb: impl FnMut(\n+            ModPath,\n+            &ast::UseTree,\n+            /* is_glob */ bool,\n+            crate::nameres::raw::ImportAlias,\n+        ),\n     ) {\n         if let Some(tree) = item_src.value.use_tree() {\n             lower::lower_use_tree(None, tree, hygiene, &mut cb);"}, {"sha": "f693cefbcd44bd2f0aa9b3c1779743df1f9ef980", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d527159457420d55f1ee2f70615098a10176b91/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=7d527159457420d55f1ee2f70615098a10176b91", "patch": "@@ -4,20 +4,18 @@\n use std::iter;\n \n use either::Either;\n-use hir_expand::{\n-    hygiene::Hygiene,\n-    name::{AsName, Name},\n-};\n+use hir_expand::{hygiene::Hygiene, name::AsName};\n use ra_syntax::ast::{self, NameOwner};\n use test_utils::tested_by;\n \n+use crate::nameres::raw::ImportAlias;\n use crate::path::{ModPath, PathKind};\n \n pub(crate) fn lower_use_tree(\n     prefix: Option<ModPath>,\n     tree: ast::UseTree,\n     hygiene: &Hygiene,\n-    cb: &mut dyn FnMut(ModPath, &ast::UseTree, bool, Option<Name>),\n+    cb: &mut dyn FnMut(ModPath, &ast::UseTree, bool, ImportAlias),\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n@@ -34,7 +32,9 @@ pub(crate) fn lower_use_tree(\n             lower_use_tree(prefix.clone(), child_tree, hygiene, cb);\n         }\n     } else {\n-        let alias = tree.alias().and_then(|a| a.name()).map(|a| a.as_name());\n+        let alias = tree.alias().map_or(ImportAlias::NoAlias, |a| {\n+            a.name().map(|it| it.as_name()).map_or(ImportAlias::Unnamed, |a| ImportAlias::Alias(a))\n+        });\n         let is_glob = tree.has_star();\n         if let Some(ast_path) = tree.path() {\n             // Handle self in a path.\n@@ -57,7 +57,7 @@ pub(crate) fn lower_use_tree(\n         } else if is_glob {\n             tested_by!(glob_enum_group);\n             if let Some(prefix) = prefix {\n-                cb(prefix, &tree, is_glob, None)\n+                cb(prefix, &tree, is_glob, ImportAlias::NoAlias)\n             }\n         }\n     }"}]}