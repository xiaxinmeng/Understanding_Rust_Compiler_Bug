{"sha": "19806e451476d9a97175d2ca0c095545e8894421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODA2ZTQ1MTQ3NmQ5YTk3MTc1ZDJjYTBjMDk1NTQ1ZTg4OTQ0MjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-11T05:35:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-11T05:35:27Z"}, "message": "Tweak stability attribute diagnostic output", "tree": {"sha": "5b312f9f893db8c07a39c7b24cf54499464a54a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b312f9f893db8c07a39c7b24cf54499464a54a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19806e451476d9a97175d2ca0c095545e8894421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19806e451476d9a97175d2ca0c095545e8894421", "html_url": "https://github.com/rust-lang/rust/commit/19806e451476d9a97175d2ca0c095545e8894421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19806e451476d9a97175d2ca0c095545e8894421/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb089bb542f30faa708c65347aacef42c2427cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb089bb542f30faa708c65347aacef42c2427cb", "html_url": "https://github.com/rust-lang/rust/commit/4cb089bb542f30faa708c65347aacef42c2427cb"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "c701441e9e5bcbb4b2a0a6f6c0e4e22911abc671", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/19806e451476d9a97175d2ca0c095545e8894421/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19806e451476d9a97175d2ca0c095545e8894421/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=19806e451476d9a97175d2ca0c095545e8894421", "patch": "@@ -176,23 +176,24 @@ pub fn find_stability(\n     sess: &Session,\n     attrs: &[Attribute],\n     item_sp: Span,\n-) -> (Option<Stability>, Option<ConstStability>) {\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>) {\n     find_stability_generic(sess, attrs.iter(), item_sp)\n }\n \n fn find_stability_generic<'a, I>(\n     sess: &Session,\n     attrs_iter: I,\n     item_sp: Span,\n-) -> (Option<Stability>, Option<ConstStability>)\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>)\n where\n     I: Iterator<Item = &'a Attribute>,\n {\n     use StabilityLevel::*;\n \n-    let mut stab: Option<Stability> = None;\n-    let mut const_stab: Option<ConstStability> = None;\n+    let mut stab: Option<(Stability, Span)> = None;\n+    let mut const_stab: Option<(ConstStability, Span)> = None;\n     let mut promotable = false;\n+\n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -356,10 +357,12 @@ where\n                             }\n                             let level = Unstable { reason, issue: issue_num, is_soft };\n                             if sym::unstable == meta_name {\n-                                stab = Some(Stability { level, feature });\n+                                stab = Some((Stability { level, feature }, attr.span));\n                             } else {\n-                                const_stab =\n-                                    Some(ConstStability { level, feature, promotable: false });\n+                                const_stab = Some((\n+                                    ConstStability { level, feature, promotable: false },\n+                                    attr.span,\n+                                ));\n                             }\n                         }\n                         (None, _, _) => {\n@@ -432,10 +435,12 @@ where\n                         (Some(feature), Some(since)) => {\n                             let level = Stable { since };\n                             if sym::stable == meta_name {\n-                                stab = Some(Stability { level, feature });\n+                                stab = Some((Stability { level, feature }, attr.span));\n                             } else {\n-                                const_stab =\n-                                    Some(ConstStability { level, feature, promotable: false });\n+                                const_stab = Some((\n+                                    ConstStability { level, feature, promotable: false },\n+                                    attr.span,\n+                                ));\n                             }\n                         }\n                         (None, _) => {\n@@ -455,7 +460,7 @@ where\n \n     // Merge the const-unstable info into the stability info\n     if promotable {\n-        if let Some(ref mut stab) = const_stab {\n+        if let Some((ref mut stab, _)) = const_stab {\n             stab.promotable = promotable;\n         } else {\n             struct_span_err!("}, {"sha": "bd93e34af680b77c5078f2e7b090f84250e59dd4", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19806e451476d9a97175d2ca0c095545e8894421/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19806e451476d9a97175d2ca0c095545e8894421/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=19806e451476d9a97175d2ca0c095545e8894421", "patch": "@@ -770,10 +770,13 @@ impl SyntaxExtension {\n             .find_by_name(attrs, sym::rustc_builtin_macro)\n             .map(|a| a.value_str().unwrap_or(name));\n         let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n-        if const_stability.is_some() {\n+        if let Some((_, sp)) = const_stability {\n             sess.parse_sess\n                 .span_diagnostic\n-                .span_err(span, \"macros cannot have const stability attributes\");\n+                .struct_span_err(sp, \"macros cannot have const stability attributes\")\n+                .span_label(sp, \"invalid stability attribute\")\n+                .span_label(span, \"in this macro\")\n+                .emit();\n         }\n \n         SyntaxExtension {\n@@ -782,7 +785,7 @@ impl SyntaxExtension {\n             allow_internal_unstable,\n             allow_internal_unsafe: sess.contains_name(attrs, sym::allow_internal_unsafe),\n             local_inner_macros,\n-            stability,\n+            stability: stability.map(|(s, _)| s),\n             deprecation: attr::find_deprecation(&sess, attrs).map(|(d, _)| d),\n             helper_attrs,\n             edition,"}, {"sha": "d698512a648aa968485300230bce0b6fdc9fa307", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/19806e451476d9a97175d2ca0c095545e8894421/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19806e451476d9a97175d2ca0c095545e8894421/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=19806e451476d9a97175d2ca0c095545e8894421", "patch": "@@ -163,7 +163,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n \n         let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n \n-        let const_stab = const_stab.map(|const_stab| {\n+        let const_stab = const_stab.map(|(const_stab, _)| {\n             let const_stab = self.tcx.intern_const_stability(const_stab);\n             self.index.const_stab_map.insert(hir_id, const_stab);\n             const_stab\n@@ -193,12 +193,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n-        let stab = stab.map(|stab| {\n+        let stab = stab.map(|(stab, span)| {\n             // Error if prohibited, or can't inherit anything from a container.\n             if kind == AnnotationKind::Prohibited\n                 || (kind == AnnotationKind::Container && stab.level.is_stable() && is_deprecated)\n             {\n-                self.tcx.sess.span_err(item_sp, \"this stability annotation is useless\");\n+                self.tcx.sess.struct_span_err(span,\"this stability annotation is useless\")\n+                    .span_label(span, \"useless stability annotation\")\n+                    .span_label(item_sp, \"the stability attribute annotates this item\")\n+                    .emit();\n             }\n \n             debug!(\"annotate: found {:?}\", stab);\n@@ -215,26 +218,30 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 {\n                     match stab_v.parse::<u64>() {\n                         Err(_) => {\n-                            self.tcx.sess.span_err(item_sp, \"invalid stability version found\");\n+                            self.tcx.sess.struct_span_err(span, \"invalid stability version found\")\n+                                .span_label(span, \"invalid stability version\")\n+                                .span_label(item_sp, \"the stability attribute annotates this item\")\n+                                .emit();\n                             break;\n                         }\n                         Ok(stab_vp) => match dep_v.parse::<u64>() {\n                             Ok(dep_vp) => match dep_vp.cmp(&stab_vp) {\n                                 Ordering::Less => {\n-                                    self.tcx.sess.span_err(\n-                                        item_sp,\n-                                        \"an API can't be stabilized after it is deprecated\",\n-                                    );\n+                                    self.tcx.sess.struct_span_err(span, \"an API can't be stabilized after it is deprecated\")\n+                                        .span_label(span, \"invalid version\")\n+                                        .span_label(item_sp, \"the stability attribute annotates this item\")\n+                                        .emit();\n                                     break;\n                                 }\n                                 Ordering::Equal => continue,\n                                 Ordering::Greater => break,\n                             },\n                             Err(_) => {\n                                 if dep_v != \"TBD\" {\n-                                    self.tcx\n-                                        .sess\n-                                        .span_err(item_sp, \"invalid deprecation version found\");\n+                                    self.tcx.sess.struct_span_err(span, \"invalid deprecation version found\")\n+                                        .span_label(span, \"invalid deprecation version\")\n+                                        .span_label(item_sp, \"the stability attribute annotates this item\")\n+                                        .emit();\n                                 }\n                                 break;\n                             }\n@@ -756,18 +763,13 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                     // error if all involved types and traits are stable, because\n                     // it will have no effect.\n                     // See: https://github.com/rust-lang/rust/issues/55436\n-                    if let (Some(Stability { level: attr::Unstable { .. }, .. }), _) =\n+                    if let (Some((Stability { level: attr::Unstable { .. }, .. }, span)), _) =\n                         attr::find_stability(&self.tcx.sess, &item.attrs, item.span)\n                     {\n                         let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n                         c.visit_ty(self_ty);\n                         c.visit_trait_ref(t);\n                         if c.fully_stable {\n-                            let span = item\n-                                .attrs\n-                                .iter()\n-                                .find(|a| a.has_name(sym::unstable))\n-                                .map_or(item.span, |a| a.span);\n                             self.tcx.struct_span_lint_hir(\n                                 INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n                                 item.hir_id,"}, {"sha": "9f8ecc262812624d7e593f9b564db7e9e03ad1fa", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19806e451476d9a97175d2ca0c095545e8894421/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19806e451476d9a97175d2ca0c095545e8894421/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=19806e451476d9a97175d2ca0c095545e8894421", "patch": "@@ -57,16 +57,16 @@ fn multiple2() { }\n #[stable(feature = \"a\", since = \"b\")] //~ ERROR multiple stability levels [E0544]\n fn multiple3() { }\n \n-#[stable(feature = \"a\", since = \"b\")]\n+#[stable(feature = \"a\", since = \"b\")] //~ ERROR invalid stability version found\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")] //~ ERROR multiple deprecated attributes\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n-pub const fn multiple4() { } //~ ERROR invalid stability version found\n+pub const fn multiple4() { }\n \n-#[stable(feature = \"a\", since = \"1.0.0\")]\n+#[stable(feature = \"a\", since = \"1.0.0\")] //~ ERROR invalid deprecation version found\n #[rustc_deprecated(since = \"invalid\", reason = \"text\")]\n-fn invalid_deprecation_version() {} //~ ERROR invalid deprecation version found\n+fn invalid_deprecation_version() {}\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]\n fn deprecated_without_unstable_or_stable() { }"}, {"sha": "bde35cca4a2899076600e33a8f38bb03a650bdbf", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19806e451476d9a97175d2ca0c095545e8894421/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19806e451476d9a97175d2ca0c095545e8894421/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=19806e451476d9a97175d2ca0c095545e8894421", "patch": "@@ -97,16 +97,22 @@ LL | #[rustc_const_unstable(feature = \"d\", issue = \"none\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid stability version found\n-  --> $DIR/stability-attribute-sanity.rs:65:1\n+  --> $DIR/stability-attribute-sanity.rs:60:1\n    |\n+LL | #[stable(feature = \"a\", since = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid stability version\n+...\n LL | pub const fn multiple4() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ---------------------------- the stability attribute annotates this item\n \n error: invalid deprecation version found\n-  --> $DIR/stability-attribute-sanity.rs:69:1\n+  --> $DIR/stability-attribute-sanity.rs:67:1\n    |\n+LL | #[stable(feature = \"a\", since = \"1.0.0\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid deprecation version\n+LL | #[rustc_deprecated(since = \"invalid\", reason = \"text\")]\n LL | fn invalid_deprecation_version() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------------------------- the stability attribute annotates this item\n \n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n   --> $DIR/stability-attribute-sanity.rs:71:1"}]}