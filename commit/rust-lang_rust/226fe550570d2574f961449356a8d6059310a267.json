{"sha": "226fe550570d2574f961449356a8d6059310a267", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNmZlNTUwNTcwZDI1NzRmOTYxNDQ5MzU2YThkNjA1OTMxMGEyNjc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-22T14:30:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-22T14:30:09Z"}, "message": "Rollup merge of #81173 - lukaslueg:intersperse_docs, r=m-ou-se\n\nExpand docs on Iterator::intersperse\n\nUnstable feature in #79524. This expands on the docs to bring them more in line with how other methods of `Iterator` are demonstrated.", "tree": {"sha": "b89a9af1282b0fd79b81f304fe1c8e87330290e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89a9af1282b0fd79b81f304fe1c8e87330290e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/226fe550570d2574f961449356a8d6059310a267", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCuFxCRBK7hj4Ov3rIwAAdHIIAAEigLTIYq/jrZoUje5aUG/S\nHtjcdTUxyqcVG7Tx0A1Vs9UG2f/dsEsY4OZKPS6BajHuKA63jezWRJ+e3uOE71wj\n8rO5qWjmKvvx+cv85akyE0PIwk2ilM2K3RRnma/kItVt59QG9fKIMkrMXPsObAb0\n66yHRAKdHK/xUBfSZFW/zzbOWhe0FPUMKkQnPIbcnUB5BYvy01LszQDt4QXcmVRH\nXPXoBTN1Z3WCZLniQci9/bA/tR1eOSVFdiIo2dX89kXR14DJdHuDnlKZfHOUbF9o\nGQ3IAtzAvDEJ9ot3A5DFKP0ifnLwLEHwpfYvv+i1IPZPxCQazTVw1Y2WNNcK2NE=\n=Tmu5\n-----END PGP SIGNATURE-----\n", "payload": "tree b89a9af1282b0fd79b81f304fe1c8e87330290e5\nparent 98c03644b191ee9b62e8d6fc6be640b5fecbbf1b\nparent c61785ea44683ca03314dd4ef7150ef98db8a2ad\nauthor Mara Bos <m-ou.se@m-ou.se> 1611325809 +0000\ncommitter GitHub <noreply@github.com> 1611325809 +0000\n\nRollup merge of #81173 - lukaslueg:intersperse_docs, r=m-ou-se\n\nExpand docs on Iterator::intersperse\n\nUnstable feature in #79524. This expands on the docs to bring them more in line with how other methods of `Iterator` are demonstrated.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/226fe550570d2574f961449356a8d6059310a267", "html_url": "https://github.com/rust-lang/rust/commit/226fe550570d2574f961449356a8d6059310a267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/226fe550570d2574f961449356a8d6059310a267/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "html_url": "https://github.com/rust-lang/rust/commit/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b"}, {"sha": "c61785ea44683ca03314dd4ef7150ef98db8a2ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c61785ea44683ca03314dd4ef7150ef98db8a2ad", "html_url": "https://github.com/rust-lang/rust/commit/c61785ea44683ca03314dd4ef7150ef98db8a2ad"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "d8bbd424cf2587d6a16abc08d168fcd585b99377", "filename": "library/core/src/iter/adapters/intersperse.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/226fe550570d2574f961449356a8d6059310a267/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226fe550570d2574f961449356a8d6059310a267/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs?ref=226fe550570d2574f961449356a8d6059310a267", "patch": "@@ -151,12 +151,10 @@ where\n {\n     let (lo, hi) = iter.size_hint();\n     let next_is_elem = !needs_sep;\n-    let lo = lo.saturating_sub(next_is_elem as usize).saturating_add(lo);\n-    let hi = match hi {\n-        Some(hi) => hi.saturating_sub(next_is_elem as usize).checked_add(hi),\n-        None => None,\n-    };\n-    (lo, hi)\n+    (\n+        lo.saturating_sub(next_is_elem as usize).saturating_add(lo),\n+        hi.and_then(|hi| hi.saturating_sub(next_is_elem as usize).checked_add(hi)),\n+    )\n }\n \n fn intersperse_fold<I, B, F, G>("}, {"sha": "9f7ced829b0ac3930652c19b9af8b61212d037a5", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/226fe550570d2574f961449356a8d6059310a267/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226fe550570d2574f961449356a8d6059310a267/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=226fe550570d2574f961449356a8d6059310a267", "patch": "@@ -567,9 +567,10 @@ pub trait Iterator {\n         Zip::new(self, other.into_iter())\n     }\n \n-    /// Places a copy of `separator` between all elements.\n+    /// Creates a new iterator which places a copy of `separator` between adjacent\n+    /// items of the original iterator.\n     ///\n-    /// In case the separator does not implement [`Clone`] or needs to be\n+    /// In case `separator` does not implement [`Clone`] or needs to be\n     /// computed every time, use [`intersperse_with`].\n     ///\n     /// # Examples\n@@ -579,6 +580,19 @@ pub trait Iterator {\n     /// ```\n     /// #![feature(iter_intersperse)]\n     ///\n+    /// let mut a = [0, 1, 2].iter().intersperse(&100);\n+    /// assert_eq!(a.next(), Some(&0));   // The first element from `a`.\n+    /// assert_eq!(a.next(), Some(&100)); // The separator.\n+    /// assert_eq!(a.next(), Some(&1));   // The next element from `a`.\n+    /// assert_eq!(a.next(), Some(&100)); // The separator.\n+    /// assert_eq!(a.next(), Some(&2));   // The last element from `a`.\n+    /// assert_eq!(a.next(), None);       // The iterator is finished.\n+    /// ```\n+    ///\n+    /// `intersperse` can be very useful to join an iterator's items using a common element:\n+    /// ```\n+    /// #![feature(iter_intersperse)]\n+    ///\n     /// let hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::<String>();\n     /// assert_eq!(hello, \"Hello World !\");\n     /// ```\n@@ -595,7 +609,16 @@ pub trait Iterator {\n         Intersperse::new(self, separator)\n     }\n \n-    /// Places an element generated by `separator` between all elements.\n+    /// Creates a new iterator which places an item generated by `separator`\n+    /// between adjacent items of the original iterator.\n+    ///\n+    /// The closure will be called exactly once each time an item is placed\n+    /// between two adjacent items from the underlying iterator; specifically,\n+    /// the closure is not called if the underlying iterator yields less than\n+    /// two items and after the last item is yielded.\n+    ///\n+    /// If the iterator's item implements [`Clone`], it may be easier to use\n+    /// [`intersperse`].\n     ///\n     /// # Examples\n     ///\n@@ -604,14 +627,36 @@ pub trait Iterator {\n     /// ```\n     /// #![feature(iter_intersperse)]\n     ///\n+    /// #[derive(PartialEq, Debug)]\n+    /// struct NotClone(usize);\n+    ///\n+    /// let v = vec![NotClone(0), NotClone(1), NotClone(2)];\n+    /// let mut it = v.into_iter().intersperse_with(|| NotClone(99));\n+    ///\n+    /// assert_eq!(it.next(), Some(NotClone(0)));  // The first element from `v`.\n+    /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n+    /// assert_eq!(it.next(), Some(NotClone(1)));  // The next element from `v`.\n+    /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n+    /// assert_eq!(it.next(), Some(NotClone(2)));  // The last element from from `v`.\n+    /// assert_eq!(it.next(), None);               // The iterator is finished.\n+    /// ```\n+    ///\n+    /// `intersperse_with` can be used in situations where the separator needs\n+    /// to be computed:\n+    /// ```\n+    /// #![feature(iter_intersperse)]\n+    ///\n     /// let src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n     ///\n+    /// // The closure mutably borrows its context to generate an item.\n     /// let mut happy_emojis = [\" \u2764\ufe0f \", \" \ud83d\ude00 \"].iter().copied();\n     /// let separator = || happy_emojis.next().unwrap_or(\" \ud83e\udd80 \");\n     ///\n     /// let result = src.intersperse_with(separator).collect::<String>();\n     /// assert_eq!(result, \"Hello \u2764\ufe0f to \ud83d\ude00 all \ud83e\udd80 people \ud83e\udd80 !!\");\n     /// ```\n+    /// [`Clone`]: crate::clone::Clone\n+    /// [`intersperse`]: Iterator::intersperse\n     #[inline]\n     #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n     fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>"}]}