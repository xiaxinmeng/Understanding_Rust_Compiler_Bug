{"sha": "a6182711efe32d4dd68da2663129e3e2e462d8cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MTgyNzExZWZlMzJkNGRkNjhkYTI2NjMxMjllM2UyZTQ2MmQ4Y2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-14T23:35:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T09:31:50Z"}, "message": "Remove `Spanned` from `{ast,hir}::FieldPat`", "tree": {"sha": "022f678d6a426f264dc06c7847542f55b531762d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022f678d6a426f264dc06c7847542f55b531762d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6182711efe32d4dd68da2663129e3e2e462d8cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6182711efe32d4dd68da2663129e3e2e462d8cb", "html_url": "https://github.com/rust-lang/rust/commit/a6182711efe32d4dd68da2663129e3e2e462d8cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6182711efe32d4dd68da2663129e3e2e462d8cb/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433b1e36e19824742175de681b8579c861217207", "url": "https://api.github.com/repos/rust-lang/rust/commits/433b1e36e19824742175de681b8579c861217207", "html_url": "https://github.com/rust-lang/rust/commit/433b1e36e19824742175de681b8579c861217207"}], "stats": {"total": 164, "additions": 72, "deletions": 92}, "files": [{"sha": "7ada56cfa76116411cf17a42dcd4efe044daa392", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             PatKind::Struct(_, ref subpats, _) => {\n-                let pats_exit = self.pats_all(subpats.iter().map(|f| &f.node.pat), pred);\n+                let pats_exit = self.pats_all(subpats.iter().map(|f| &f.pat), pred);\n                 self.add_ast_node(pat.hir_id.local_id, &[pats_exit])\n             }\n "}, {"sha": "99fe9f1682f163656c807d1313f29c962ddb0fa1", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -704,9 +704,9 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n         PatKind::Struct(ref qpath, ref fields, _) => {\n             visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n             for field in fields {\n-                visitor.visit_id(field.node.hir_id);\n-                visitor.visit_ident(field.node.ident);\n-                visitor.visit_pat(&field.node.pat)\n+                visitor.visit_id(field.hir_id);\n+                visitor.visit_ident(field.ident);\n+                visitor.visit_pat(&field.pat)\n             }\n         }\n         PatKind::Tuple(ref tuple_elements, _) => {"}, {"sha": "9e5d6378c40142a85ba1b273b28225513cfe6ede", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -2691,16 +2691,12 @@ impl<'a> LoweringContext<'a> {\n \n                 let fs = fields\n                     .iter()\n-                    .map(|f| {\n-                        Spanned {\n-                            span: f.span,\n-                            node: hir::FieldPat {\n-                                hir_id: self.next_id(),\n-                                ident: f.node.ident,\n-                                pat: self.lower_pat(&f.node.pat),\n-                                is_shorthand: f.node.is_shorthand,\n-                            },\n-                        }\n+                    .map(|f| hir::FieldPat {\n+                        hir_id: self.next_id(),\n+                        ident: f.ident,\n+                        pat: self.lower_pat(&f.pat),\n+                        is_shorthand: f.is_shorthand,\n+                        span: f.span,\n                     })\n                     .collect();\n                 hir::PatKind::Struct(qpath, fs, etc)"}, {"sha": "7c2f9907217cbaa8c897834ffc4d4c200e793982", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -877,7 +877,7 @@ impl Pat {\n         match self.node {\n             PatKind::Binding(.., Some(ref p)) => p.walk_(it),\n             PatKind::Struct(_, ref fields, _) => {\n-                fields.iter().all(|field| field.node.pat.walk_(it))\n+                fields.iter().all(|field| field.pat.walk_(it))\n             }\n             PatKind::TupleStruct(_, ref s, _) | PatKind::Tuple(ref s, _) => {\n                 s.iter().all(|p| p.walk_(it))\n@@ -923,6 +923,7 @@ pub struct FieldPat {\n     /// The pattern the field is destructured to.\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n+    pub span: Span,\n }\n \n /// Explicit binding annotations given in the HIR for a binding. Note\n@@ -968,7 +969,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(QPath, HirVec<Spanned<FieldPat>>, bool),\n+    Struct(QPath, HirVec<FieldPat>, bool),\n \n     /// A tuple struct/variant pattern `Variant(x, y, .., z)`.\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position."}, {"sha": "caf8220bbf43295d608821b1ae564dd41619baba", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -1670,14 +1670,14 @@ impl<'a> State<'a> {\n                                    &fields[..],\n                                    |s, f| {\n                                        s.cbox(INDENT_UNIT);\n-                                       if !f.node.is_shorthand {\n-                                           s.print_ident(f.node.ident);\n+                                       if !f.is_shorthand {\n+                                           s.print_ident(f.ident);\n                                            s.word_nbsp(\":\");\n                                        }\n-                                       s.print_pat(&f.node.pat);\n+                                       s.print_pat(&f.pat);\n                                        s.end()\n                                    },\n-                                   |f| f.node.pat.span);\n+                                   |f| f.pat.span);\n                 if etc {\n                     if !fields.is_empty() {\n                         self.word_space(\",\");"}, {"sha": "60b338010b0db8a729117a2a1365968aad45c16b", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -153,8 +153,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty {\n     }\n }\n \n-impl_stable_hash_for_spanned!(hir::FieldPat);\n-\n impl_stable_hash_for_spanned!(hir::BinOpKind);\n \n impl_stable_hash_for!(struct hir::Stmt {\n@@ -187,8 +185,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Expr {\n \n impl_stable_hash_for_spanned!(usize);\n \n-impl_stable_hash_for_spanned!(ast::Ident);\n-\n impl_stable_hash_for!(struct ast::Ident {\n     name,\n     span,"}, {"sha": "8ce8bb52566c6118a7b7adcf281300ba63200589", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -17,8 +17,7 @@ use crate::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-use syntax::{ast, source_map};\n-use syntax::attr;\n+use syntax::{ast, attr};\n use syntax::symbol::sym;\n use syntax_pos;\n \n@@ -119,17 +118,16 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, res: Res,\n-                                  pats: &[source_map::Spanned<hir::FieldPat>]) {\n+    fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, res: Res, pats: &[hir::FieldPat]) {\n         let variant = match self.tables.node_type(lhs.hir_id).sty {\n             ty::Adt(adt, _) => adt.variant_of_res(res),\n             _ => span_bug!(lhs.span, \"non-ADT in struct pattern\")\n         };\n         for pat in pats {\n-            if let PatKind::Wild = pat.node.pat.node {\n+            if let PatKind::Wild = pat.pat.node {\n                 continue;\n             }\n-            let index = self.tcx.field_index(pat.node.hir_id, self.tables);\n+            let index = self.tcx.field_index(pat.hir_id, self.tables);\n             self.insert_def_id(variant.fields[index].did);\n         }\n     }"}, {"sha": "9c9e8c0bca3b8f10a2e9d55a02a02686f98ccc05", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -418,8 +418,8 @@ fn add_from_pat<'tcx>(ir: &mut IrMaps<'tcx>, pat: &P<hir::Pat>) {\n             }\n             Struct(_, ref fields, _) => {\n                 for field in fields {\n-                    if field.node.is_shorthand {\n-                        shorthand_field_ids.insert(field.node.pat.hir_id);\n+                    if field.is_shorthand {\n+                        shorthand_field_ids.insert(field.pat.hir_id);\n                     }\n                 }\n             }"}, {"sha": "a55803e255bf6ee8e9ead4a77cad770fd4db36ca", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -1282,11 +1282,11 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                 };\n \n                 for fp in field_pats {\n-                    let field_ty = self.pat_ty_adjusted(&fp.node.pat)?; // see (*2)\n-                    let f_index = self.tcx.field_index(fp.node.hir_id, self.tables);\n+                    let field_ty = self.pat_ty_adjusted(&fp.pat)?; // see (*2)\n+                    let f_index = self.tcx.field_index(fp.hir_id, self.tables);\n                     let cmt_field = Rc::new(self.cat_field(pat, cmt.clone(), f_index,\n-                                                           fp.node.ident, field_ty));\n-                    self.cat_pattern_(cmt_field, &fp.node.pat, op)?;\n+                                                           fp.ident, field_ty));\n+                    self.cat_pattern_(cmt_field, &fp.pat, op)?;\n                 }\n             }\n "}, {"sha": "3d100d2fbf8331c007bd82e0fd86e4f4cff22b68", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -1207,7 +1207,7 @@ fn resolve_local<'tcx>(\n             PatKind::Binding(hir::BindingAnnotation::RefMut, ..) => true,\n \n             PatKind::Struct(_, ref field_pats, _) => {\n-                field_pats.iter().any(|fp| is_binding_pat(&fp.node.pat))\n+                field_pats.iter().any(|fp| is_binding_pat(&fp.pat))\n             }\n \n             PatKind::Slice(ref pats1, ref pats2, ref pats3) => {"}, {"sha": "47b4e7c948750ef631a2c03b6dbb416ff2bcff9c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                                    .expect(\"struct pattern type is not an ADT\")\n                                    .variant_of_res(cx.tables.qpath_res(qpath, pat.hir_id));\n             for fieldpat in field_pats {\n-                if fieldpat.node.is_shorthand {\n+                if fieldpat.is_shorthand {\n                     continue;\n                 }\n                 if fieldpat.span.ctxt().outer_expn_info().is_some() {\n@@ -173,9 +173,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                     // (Issue #49588)\n                     continue;\n                 }\n-                if let PatKind::Binding(_, _, ident, None) = fieldpat.node.pat.node {\n+                if let PatKind::Binding(_, _, ident, None) = fieldpat.pat.node {\n                     if cx.tcx.find_field_index(ident, &variant) ==\n-                       Some(cx.tcx.field_index(fieldpat.node.hir_id, cx.tables)) {\n+                       Some(cx.tcx.field_index(fieldpat.hir_id, cx.tables)) {\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n                                      fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant\", ident));"}, {"sha": "10223151f5c3ba2fb1d1059524f31567a780a68a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -645,9 +645,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     fields.iter()\n                           .map(|field| {\n                               FieldPattern {\n-                                  field: Field::new(self.tcx.field_index(field.node.hir_id,\n+                                  field: Field::new(self.tcx.field_index(field.hir_id,\n                                                                          self.tables)),\n-                                  pattern: self.lower_pattern(&field.node.pat),\n+                                  pattern: self.lower_pattern(&field.pat),\n                               }\n                           })\n                           .collect();"}, {"sha": "bca77621e553ed304bce307b2e90ed9e5045bb73", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -1075,8 +1075,8 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                 let adt = self.tables.pat_ty(pat).ty_adt_def().unwrap();\n                 let variant = adt.variant_of_res(res);\n                 for field in fields {\n-                    let use_ctxt = field.node.ident.span;\n-                    let index = self.tcx.field_index(field.node.hir_id, self.tables);\n+                    let use_ctxt = field.ident.span;\n+                    let index = self.tcx.field_index(field.hir_id, self.tables);\n                     self.check_field(use_ctxt, field.span, adt, &variant.fields[index]);\n                 }\n             }"}, {"sha": "9068605b0753c4f09fc2ebfe2101d038a067d126", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -32,7 +32,7 @@ use syntax::print::pprust::{\n     ty_to_string\n };\n use syntax::ptr::P;\n-use syntax::source_map::{Spanned, DUMMY_SP, respan};\n+use syntax::source_map::{DUMMY_SP, respan};\n use syntax::walk_list;\n use syntax_pos::*;\n \n@@ -879,7 +879,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 };\n                 let variant = adt.variant_of_res(self.save_ctxt.get_path_res(p.id));\n \n-                for &Spanned { node: ref field, .. } in fields {\n+                for field in fields {\n                     if let Some(index) = self.tcx.find_field_index(field.ident, variant) {\n                         if !self.span.filter_generated(field.ident.span) {\n                             let span = self.span_from_span(field.ident.span);"}, {"sha": "99ae777bb631bd5b890d8ccba4e23c4c43923dcf", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -12,7 +12,6 @@ use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::subst::Kind;\n use syntax::ast;\n-use syntax::source_map::Spanned;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n use syntax_pos::hygiene::DesugaringKind;\n@@ -1036,7 +1035,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         &self,\n         pat: &'tcx hir::Pat,\n         qpath: &hir::QPath,\n-        fields: &'tcx [Spanned<hir::FieldPat>],\n+        fields: &'tcx [hir::FieldPat],\n         etc: bool,\n         expected: Ty<'tcx>,\n         def_bm: ty::BindingMode,\n@@ -1048,7 +1047,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             variant_ty\n         } else {\n             for field in fields {\n-                self.check_pat_walk(&field.node.pat, self.tcx.types.err, def_bm, discrim_span);\n+                self.check_pat_walk(&field.pat, self.tcx.types.err, def_bm, discrim_span);\n             }\n             return self.tcx.types.err;\n         };\n@@ -1206,7 +1205,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         pat_id: hir::HirId,\n         span: Span,\n         variant: &'tcx ty::VariantDef,\n-        fields: &'tcx [Spanned<hir::FieldPat>],\n+        fields: &'tcx [hir::FieldPat],\n         etc: bool,\n         def_bm: ty::BindingMode,\n     ) -> bool {\n@@ -1231,7 +1230,8 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n \n         let mut inexistent_fields = vec![];\n         // Typecheck each field.\n-        for &Spanned { node: ref field, span } in fields {\n+        for field in fields {\n+            let span = field.span;\n             let ident = tcx.adjust_ident(field.ident, variant.def_id);\n             let field_ty = match used_fields.entry(ident) {\n                 Occupied(occupied) => {"}, {"sha": "a88e32eb34dcd51011beaca14c1275b3879d80f6", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -283,7 +283,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n             }\n             hir::PatKind::Struct(_, ref fields, _) => {\n                 for field in fields {\n-                    self.visit_field_id(field.node.hir_id);\n+                    self.visit_field_id(field.hir_id);\n                 }\n             }\n             _ => {}"}, {"sha": "d5becd2e1a94d7e67837aa2d5f6920cd8331ef09", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -29,7 +29,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n use syntax::ext::base::MacroKind;\n-use syntax::source_map::{DUMMY_SP, Spanned};\n+use syntax::source_map::DUMMY_SP;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::symbol::InternedString;\n use syntax_pos::{self, Pos, FileName};\n@@ -4102,8 +4102,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n         PatKind::Struct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", qpath_to_string(name),\n-                fields.iter().map(|&Spanned { node: ref fp, .. }|\n-                                  format!(\"{}: {}\", fp.ident, name_from_pat(&*fp.pat)))\n+                fields.iter().map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n                              .collect::<Vec<String>>().join(\", \"),\n                 if etc { \", ..\" } else { \"\" }\n             )"}, {"sha": "3ae37f734b77ee41cdf1007772460a9505d854ba", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -571,7 +571,7 @@ impl Pat {\n \n         match &self.node {\n             PatKind::Ident(_, _, Some(p)) => p.walk(it),\n-            PatKind::Struct(_, fields, _) => fields.iter().all(|field| field.node.pat.walk(it)),\n+            PatKind::Struct(_, fields, _) => fields.iter().all(|field| field.pat.walk(it)),\n             PatKind::TupleStruct(_, s) | PatKind::Tuple(s) | PatKind::Slice(s) => {\n                 s.iter().all(|p| p.walk(it))\n             }\n@@ -609,6 +609,7 @@ pub struct FieldPat {\n     pub is_shorthand: bool,\n     pub attrs: ThinVec<Attribute>,\n     pub id: NodeId,\n+    pub span: Span,\n }\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n@@ -642,7 +643,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Path, Vec<Spanned<FieldPat>>, /* recovered */ bool),\n+    Struct(Path, Vec<FieldPat>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     TupleStruct(Path, Vec<P<Pat>>),"}, {"sha": "38f46ee207cae823687ecf15579303bed234f161", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -575,7 +575,7 @@ impl<'a> ExtCtxt<'a> {\n         self.pat(span, PatKind::TupleStruct(path, subpats))\n     }\n     pub fn pat_struct(&self, span: Span, path: ast::Path,\n-                  field_pats: Vec<Spanned<ast::FieldPat>>) -> P<ast::Pat> {\n+                      field_pats: Vec<ast::FieldPat>) -> P<ast::Pat> {\n         self.pat(span, PatKind::Struct(path, field_pats, false))\n     }\n     pub fn pat_tuple(&self, span: Span, pats: Vec<P<ast::Pat>>) -> P<ast::Pat> {"}, {"sha": "acafe327640d028a6784bf70534b965c3e2781d9", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -1042,10 +1042,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n         }\n         PatKind::Struct(path, fields, _etc) => {\n             vis.visit_path(path);\n-            for Spanned {\n-                node: FieldPat { ident, pat, is_shorthand: _, attrs, id },\n-                span\n-            } in fields {\n+            for FieldPat { ident, pat, is_shorthand: _, attrs, id, span } in fields {\n                 vis.visit_ident(ident);\n                 vis.visit_id(id);\n                 vis.visit_pat(pat);"}, {"sha": "c3079d2da0ce7ed9efbd80f6de663d69f9d52e7e", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -488,7 +488,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the fields of a struct-like pattern.\n-    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<Spanned<FieldPat>>, bool)> {\n+    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<FieldPat>, bool)> {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut ate_comma = true;\n@@ -620,11 +620,7 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n-    fn parse_pat_field(\n-        &mut self,\n-        lo: Span,\n-        attrs: Vec<Attribute>\n-    ) -> PResult<'a, Spanned<FieldPat>> {\n+    fn parse_pat_field(&mut self, lo: Span, attrs: Vec<Attribute>) -> PResult<'a, FieldPat> {\n         // Check if a colon exists one ahead. This means we're parsing a fieldname.\n         let hi;\n         let (subpat, fieldname, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n@@ -659,15 +655,13 @@ impl<'a> Parser<'a> {\n             (subpat, fieldname, true)\n         };\n \n-        Ok(Spanned {\n+        Ok(FieldPat {\n+            ident: fieldname,\n+            pat: subpat,\n+            is_shorthand,\n+            attrs: attrs.into(),\n+            id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n-            node: FieldPat {\n-                ident: fieldname,\n-                pat: subpat,\n-                is_shorthand,\n-                attrs: attrs.into(),\n-                id: ast::DUMMY_NODE_ID,\n-           }\n         })\n     }\n "}, {"sha": "5955b91384290fce930018d0579c9f41b4c3b27b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -2367,14 +2367,14 @@ impl<'a> State<'a> {\n                     Consistent, &fields[..],\n                     |s, f| {\n                         s.cbox(INDENT_UNIT);\n-                        if !f.node.is_shorthand {\n-                            s.print_ident(f.node.ident);\n+                        if !f.is_shorthand {\n+                            s.print_ident(f.ident);\n                             s.word_nbsp(\":\");\n                         }\n-                        s.print_pat(&f.node.pat);\n+                        s.print_pat(&f.pat);\n                         s.end();\n                     },\n-                    |f| f.node.pat.span);\n+                    |f| f.pat.span);\n                 if etc {\n                     if !fields.is_empty() { self.word_space(\",\"); }\n                     self.s.word(\"..\");"}, {"sha": "6648347d4aef543aba90e9ebcb1c9794c19da6bb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -442,9 +442,9 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         PatKind::Struct(ref path, ref fields, _) => {\n             visitor.visit_path(path, pattern.id);\n             for field in fields {\n-                walk_list!(visitor, visit_attribute, field.node.attrs.iter());\n-                visitor.visit_ident(field.node.ident);\n-                visitor.visit_pat(&field.node.pat)\n+                walk_list!(visitor, visit_attribute, field.attrs.iter());\n+                visitor.visit_ident(field.ident);\n+                visitor.visit_pat(&field.pat)\n             }\n         }\n         PatKind::Tuple(ref elems) => {"}, {"sha": "d080dc37a9268fb8af78fb3682f1227ad5aeaeec", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6182711efe32d4dd68da2663129e3e2e462d8cb/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=a6182711efe32d4dd68da2663129e3e2e462d8cb", "patch": "@@ -187,7 +187,7 @@ use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt, SpecialDerives};\n-use syntax::source_map::{self, respan};\n+use syntax::source_map::respan;\n use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1610,15 +1610,13 @@ impl<'a> TraitDef<'a> {\n                         if ident.is_none() {\n                             cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");\n                         }\n-                        source_map::Spanned {\n+                        ast::FieldPat {\n+                            ident: ident.unwrap(),\n+                            is_shorthand: false,\n+                            attrs: ThinVec::new(),\n+                            id: ast::DUMMY_NODE_ID,\n                             span: pat.span.with_ctxt(self.span.ctxt()),\n-                            node: ast::FieldPat {\n-                                id: ast::DUMMY_NODE_ID,\n-                                ident: ident.unwrap(),\n-                                pat,\n-                                is_shorthand: false,\n-                                attrs: ThinVec::new(),\n-                            },\n+                            pat,\n                         }\n                     })\n                     .collect();"}]}