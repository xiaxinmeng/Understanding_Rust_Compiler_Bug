{"sha": "2216318484586fc1be1f637014d9a73c08596571", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMTYzMTg0ODQ1ODZmYzFiZTFmNjM3MDE0ZDlhNzNjMDg1OTY1NzE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-03T16:58:04Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:24Z"}, "message": "Use the default code path to list missing patterns\n\nThis uses the exact same code path that would be used for\n`match x { _ if false => {} }`, since in both cases the resulting matrix\nis empty. Since we think the behaviour in that case is ok, then we can\nremove the special case and use the default code path.", "tree": {"sha": "b9be16ff98b7c39fbe51d40950ac41b47127f4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9be16ff98b7c39fbe51d40950ac41b47127f4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2216318484586fc1be1f637014d9a73c08596571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2216318484586fc1be1f637014d9a73c08596571", "html_url": "https://github.com/rust-lang/rust/commit/2216318484586fc1be1f637014d9a73c08596571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2216318484586fc1be1f637014d9a73c08596571/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e444346b12bb7ed5176878522849e9947d518762", "url": "https://api.github.com/repos/rust-lang/rust/commits/e444346b12bb7ed5176878522849e9947d518762", "html_url": "https://github.com/rust-lang/rust/commit/e444346b12bb7ed5176878522849e9947d518762"}], "stats": {"total": 163, "additions": 81, "deletions": 82}, "files": [{"sha": "2412ed17024b74e5ba142ebda0a65e8c846faeb0", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2216318484586fc1be1f637014d9a73c08596571/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216318484586fc1be1f637014d9a73c08596571/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=2216318484586fc1be1f637014d9a73c08596571", "patch": "@@ -192,41 +192,28 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                         _ => (None, vec![]),\n                     };\n \n-                    let mut err = create_e0004(\n-                        self.tcx.sess,\n-                        scrut.span,\n-                        format!(\n-                            \"non-exhaustive patterns: {}\",\n-                            match missing_variants.len() {\n-                                0 => format!(\"type `{}` is non-empty\", pat_ty),\n-                                1 => format!(\n-                                    \"pattern `{}` of type `{}` is not handled\",\n-                                    missing_variants[0].name, pat_ty,\n-                                ),\n-                                _ => format!(\n-                                    \"multiple patterns of type `{}` are not handled\",\n-                                    pat_ty\n-                                ),\n-                            }\n-                        ),\n-                    );\n-                    err.help(\n-                        \"ensure that all possible cases are being handled, \\\n-                         possibly by adding wildcards or more match arms\",\n-                    );\n-                    if let Some(sp) = def_span {\n-                        err.span_label(sp, format!(\"`{}` defined here\", pat_ty));\n-                    }\n-                    // point at the definition of non-covered enum variants\n-                    if missing_variants.len() < 4 {\n-                        for variant in &missing_variants {\n-                            err.span_label(variant.span, \"variant not covered\");\n+                    if missing_variants.is_empty() {\n+                        let mut err = create_e0004(\n+                            self.tcx.sess,\n+                            scrut.span,\n+                            format!(\"non-exhaustive patterns: type `{}` is non-empty\", pat_ty),\n+                        );\n+                        err.help(\n+                            \"ensure that all possible cases are being handled, \\\n+                             possibly by adding wildcards or more match arms\",\n+                        );\n+                        if let Some(sp) = def_span {\n+                            err.span_label(sp, format!(\"`{}` defined here\", pat_ty));\n                         }\n+                        err.emit();\n+                        return;\n+                    } else {\n+                        // Continue to the normal code path\n                     }\n-                    err.emit();\n+                } else {\n+                    // If the type *is* uninhabited, it's vacuously exhaustive\n+                    return;\n                 }\n-                // If the type *is* uninhabited, it's vacuously exhaustive\n-                return;\n             }\n \n             let scrut_ty = self.tables.node_type(scrut.hir_id);"}, {"sha": "48d9866a9c18519f4ba05db10b8fbbb526cdcd2a", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=2216318484586fc1be1f637014d9a73c08596571", "patch": "@@ -13,15 +13,15 @@ union NonEmptyUnion2 { //~ `NonEmptyUnion2` defined here\n }\n enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n     Foo(bool),\n-    //~^ variant not covered\n+    //~^ not covered\n     //~| not covered\n }\n enum NonEmptyEnum2 { //~ `NonEmptyEnum2` defined here\n     Foo(bool),\n-    //~^ variant not covered\n+    //~^ not covered\n     //~| not covered\n     Bar,\n-    //~^ variant not covered\n+    //~^ not covered\n     //~| not covered\n }\n enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n@@ -70,11 +70,11 @@ fn main() {\n     match_empty!((NonEmptyUnion2 { foo: () }));\n     //~^ ERROR type `NonEmptyUnion2` is non-empty\n     match_empty!(NonEmptyEnum1::Foo(true));\n-    //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n+    //~^ ERROR `Foo(_)` not covered\n     match_empty!(NonEmptyEnum2::Foo(true));\n-    //~^ ERROR multiple patterns of type `NonEmptyEnum2` are not handled\n+    //~^ ERROR `Foo(_)` and `Bar` not covered\n     match_empty!(NonEmptyEnum5::V1);\n-    //~^ ERROR multiple patterns of type `NonEmptyEnum5` are not handled\n+    //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n \n     match_false!(0u8);\n     //~^ ERROR `0u8..=std::u8::MAX` not covered"}, {"sha": "f8e341373078e42249b3036e4e3e6b7c658f990c", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=2216318484586fc1be1f637014d9a73c08596571", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:41:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:47:9\n    |\n LL |         _ => {},\n    |         ^\n@@ -11,108 +11,114 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:44:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:50:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:51:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:57:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:55:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:61:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:58:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:64:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:60:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:66:18\n    |\n LL |     match_empty!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:62:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:68:18\n    |\n LL |     match_empty!((NonEmptyUnion1 { foo: () }));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:64:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:70:18\n    |\n LL |     match_empty!((NonEmptyUnion2 { foo: () }));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:66:18\n+error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:72:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n-   | |     --- variant not covered\n+   | |     --- not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n LL |       match_empty!(NonEmptyEnum1::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:68:18\n+error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:74:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n-   | |     --- variant not covered\n+   | |     --- not covered\n+LL | |\n+LL | |\n LL | |     Bar,\n-   | |     --- variant not covered\n+   | |     --- not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n LL |       match_empty!(NonEmptyEnum2::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:70:18\n+error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:76:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n LL | | }\n    | |_- `NonEmptyEnum5` defined here\n ...\n LL |       match_empty!(NonEmptyEnum5::V1);\n-   |                    ^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0u8..=std::u8::MAX` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:73:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n    |\n LL |     match_false!(0u8);\n    |                  ^^^ pattern `0u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:75:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -123,7 +129,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:77:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -136,7 +142,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -150,11 +156,13 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:87:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n    | |     --- not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n@@ -164,13 +172,17 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:89:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n    | |     --- not covered\n+LL | |\n+LL | |\n LL | |     Bar,\n    | |     --- not covered\n+LL | |\n+LL | |\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n@@ -180,7 +192,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:91:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,"}, {"sha": "3d4030eca6374a9d1fc91ef0d65d04171d1cc800", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=2216318484586fc1be1f637014d9a73c08596571", "patch": "@@ -12,15 +12,15 @@ union NonEmptyUnion2 { //~ `NonEmptyUnion2` defined here\n }\n enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n     Foo(bool),\n-    //~^ variant not covered\n+    //~^ not covered\n     //~| not covered\n }\n enum NonEmptyEnum2 { //~ `NonEmptyEnum2` defined here\n     Foo(bool),\n-    //~^ variant not covered\n+    //~^ not covered\n     //~| not covered\n     Bar,\n-    //~^ variant not covered\n+    //~^ not covered\n     //~| not covered\n }\n enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n@@ -69,11 +69,11 @@ fn main() {\n     match_empty!((NonEmptyUnion2 { foo: () }));\n     //~^ ERROR type `NonEmptyUnion2` is non-empty\n     match_empty!(NonEmptyEnum1::Foo(true));\n-    //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n+    //~^ ERROR `Foo(_)` not covered\n     match_empty!(NonEmptyEnum2::Foo(true));\n-    //~^ ERROR multiple patterns of type `NonEmptyEnum2` are not handled\n+    //~^ ERROR `Foo(_)` and `Bar` not covered\n     match_empty!(NonEmptyEnum5::V1);\n-    //~^ ERROR multiple patterns of type `NonEmptyEnum5` are not handled\n+    //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n \n     match_false!(0u8);\n     //~^ ERROR `0u8..=std::u8::MAX` not covered"}, {"sha": "91e934307a4256c8dabaa60fbbbd7ecf53347cf7", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=2216318484586fc1be1f637014d9a73c08596571", "patch": "@@ -41,43 +41,43 @@ LL |     match_empty!((NonEmptyUnion2 { foo: () }));\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n+error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/match-empty.rs:71:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n-   | |     --- variant not covered\n+   | |     --- not covered\n LL | |\n LL | |\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n LL |       match_empty!(NonEmptyEnum1::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n+error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/match-empty.rs:73:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n-   | |     --- variant not covered\n+   | |     --- not covered\n LL | |\n LL | |\n LL | |     Bar,\n-   | |     --- variant not covered\n+   | |     --- not covered\n LL | |\n LL | |\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n LL |       match_empty!(NonEmptyEnum2::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n+error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/match-empty.rs:75:18\n    |\n LL | / enum NonEmptyEnum5 {\n@@ -86,7 +86,7 @@ LL | | }\n    | |_- `NonEmptyEnum5` defined here\n ...\n LL |       match_empty!(NonEmptyEnum5::V1);\n-   |                    ^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "2fc09c81ab031915ed1b95b78822ff7feef049de", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2216318484586fc1be1f637014d9a73c08596571/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=2216318484586fc1be1f637014d9a73c08596571", "patch": "@@ -22,11 +22,11 @@ LL |     match x {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: multiple patterns of type `uninhabited::UninhabitedVariants` are not handled\n+error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/match_with_exhaustive_patterns.rs:33:11\n    |\n LL |     match x {}\n-   |           ^\n+   |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}]}