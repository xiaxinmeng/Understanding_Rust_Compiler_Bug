{"sha": "d064ed5f63b746277895ae2aad37b5fd1516cce7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjRlZDVmNjNiNzQ2Mjc3ODk1YWUyYWFkMzdiNWZkMTUxNmNjZTc=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-13T12:34:11Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-13T12:34:11Z"}, "message": "Count derefs as matched types if possible", "tree": {"sha": "c3e31fad638f1a1babf514731e8cd167b29d913d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3e31fad638f1a1babf514731e8cd167b29d913d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d064ed5f63b746277895ae2aad37b5fd1516cce7", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBMsUMACgkQ2MS9WuTZ\nzE1gwQf/bXlrVXqaC+stXPcjqAJbH2Oa2Aac5/GWq8ShclTCdnHKk8nKt4jmsgWB\ngPHTMZWqM9jiNGyXz91+xqW8xFnkiRmzceaWQtgBcP8ZzFhcnmen46TNTNg2L0E7\nkzt+yYpKcZMxW7W7RX93OsDPJt9viFpHqxxg9Wmyt7qO86UH/uClKG8o2zq1XNf6\nHxSvDANgiIlG69nGIWAwXUM4FaSIsWU5dnY9zzBJxHdlPMXlqDLtHMID41heQHlB\nJ/MMEJ///+HnXzIJynWojWJgesnMTeJ6i03NSy/vJEt90ds38/Ood+fEBVrgjXT0\nF4+TW7DaPHsuu08A4A02oj3L8x93ew==\n=AYo8\n-----END PGP SIGNATURE-----", "payload": "tree c3e31fad638f1a1babf514731e8cd167b29d913d\nparent 88f78bdb9b64e0ba4ca5924599e42a524f5c3b64\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615638851 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1615638851 +0200\n\nCount derefs as matched types if possible\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d064ed5f63b746277895ae2aad37b5fd1516cce7", "html_url": "https://github.com/rust-lang/rust/commit/d064ed5f63b746277895ae2aad37b5fd1516cce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d064ed5f63b746277895ae2aad37b5fd1516cce7/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f78bdb9b64e0ba4ca5924599e42a524f5c3b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f78bdb9b64e0ba4ca5924599e42a524f5c3b64", "html_url": "https://github.com/rust-lang/rust/commit/88f78bdb9b64e0ba4ca5924599e42a524f5c3b64"}], "stats": {"total": 130, "additions": 126, "deletions": 4}, "files": [{"sha": "027dee4f08f8d3ecb8ddd5faa48079c8e04f37df", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 125, "deletions": 3, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/d064ed5f63b746277895ae2aad37b5fd1516cce7/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d064ed5f63b746277895ae2aad37b5fd1516cce7/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=d064ed5f63b746277895ae2aad37b5fd1516cce7", "patch": "@@ -10,8 +10,10 @@ pub(crate) mod type_alias;\n \n mod builder_ext;\n \n+use base_db::Upcast;\n use hir::{\n-    AsAssocItem, Documentation, HasAttrs, HirDisplay, ModuleDef, Mutability, ScopeDef, Type,\n+    db::HirDatabase, AsAssocItem, Documentation, HasAttrs, HirDisplay, ModuleDef, Mutability,\n+    ScopeDef, Type,\n };\n use ide_db::{\n     helpers::{item_name, SnippetCap},\n@@ -325,11 +327,20 @@ impl<'a> Render<'a> {\n fn compute_relevance(ctx: &RenderContext, ty: &Type, name: &str) -> Option<CompletionRelevance> {\n     let (expected_name, expected_type) = ctx.expected_name_and_type()?;\n     let mut res = CompletionRelevance::default();\n-    res.exact_type_match = ty == &expected_type;\n+    res.exact_type_match = ty == &expected_type\n+        || autoderef_relevance(\n+            ctx.db().upcast(),\n+            ty,\n+            expected_type.remove_ref().as_ref().unwrap_or(&expected_type),\n+        );\n     res.exact_name_match = name == &expected_name;\n     Some(res)\n }\n \n+fn autoderef_relevance(db: &dyn HirDatabase, ty: &Type, expected_type: &Type) -> bool {\n+    ty.autoderef(db).any(|deref_ty| &deref_ty == expected_type)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::cmp::Reverse;\n@@ -979,12 +990,123 @@ fn main() {\n                         detail: \"S\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: true,\n-                            exact_type_match: false,\n+                            exact_type_match: true,\n                         },\n                         ref_match: \"&mut \",\n                     },\n                 ]\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn suggest_deref() {\n+        check(\n+            r#\"\n+#[lang = \"deref\"]\n+trait Deref {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct S;\n+struct T(S);\n+\n+impl Deref for T {\n+    type Target = S;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn foo(s: &S) {}\n+\n+fn main() {\n+    let t = T(S);\n+    let m = 123;\n+\n+    foo($0);\n+}\n+            \"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"Deref\",\n+                        source_range: 293..293,\n+                        delete: 293..293,\n+                        insert: \"Deref\",\n+                        kind: SymbolKind(\n+                            Trait,\n+                        ),\n+                    },\n+                    CompletionItem {\n+                        label: \"S\",\n+                        source_range: 293..293,\n+                        delete: 293..293,\n+                        insert: \"S\",\n+                        kind: SymbolKind(\n+                            Struct,\n+                        ),\n+                    },\n+                    CompletionItem {\n+                        label: \"T\",\n+                        source_range: 293..293,\n+                        delete: 293..293,\n+                        insert: \"T\",\n+                        kind: SymbolKind(\n+                            Struct,\n+                        ),\n+                    },\n+                    CompletionItem {\n+                        label: \"foo(\u2026)\",\n+                        source_range: 293..293,\n+                        delete: 293..293,\n+                        insert: \"foo(${1:s})$0\",\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        lookup: \"foo\",\n+                        detail: \"-> ()\",\n+                        trigger_call_info: true,\n+                    },\n+                    CompletionItem {\n+                        label: \"m\",\n+                        source_range: 293..293,\n+                        delete: 293..293,\n+                        insert: \"m\",\n+                        kind: SymbolKind(\n+                            Local,\n+                        ),\n+                        detail: \"i32\",\n+                    },\n+                    CompletionItem {\n+                        label: \"main()\",\n+                        source_range: 293..293,\n+                        delete: 293..293,\n+                        insert: \"main()$0\",\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        lookup: \"main\",\n+                        detail: \"-> ()\",\n+                    },\n+                    CompletionItem {\n+                        label: \"t\",\n+                        source_range: 293..293,\n+                        delete: 293..293,\n+                        insert: \"t\",\n+                        kind: SymbolKind(\n+                            Local,\n+                        ),\n+                        detail: \"T\",\n+                        relevance: CompletionRelevance {\n+                            exact_name_match: false,\n+                            exact_type_match: true,\n+                        },\n+                    },\n+                ]\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "fecae1259df4439537afaac08b2b16893ce2b3de", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d064ed5f63b746277895ae2aad37b5fd1516cce7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d064ed5f63b746277895ae2aad37b5fd1516cce7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d064ed5f63b746277895ae2aad37b5fd1516cce7", "patch": "@@ -1123,7 +1123,7 @@ mod tests {\n                 (\n                     \"arg\",\n                     Some(\n-                        \"fffffffe\",\n+                        \"fffffffd\",\n                     ),\n                 ),\n             ]"}]}