{"sha": "b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTZiNmJkOWUxNDRmYzgwMTY3ZGM3YTRmMjg0YTlkMmI0ZjFjNDU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-30T08:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-30T08:39:06Z"}, "message": "Rollup merge of #35863 - matthew-piziak:shl-example, r=steveklabnik\n\nadd evocative examples for `Shl` and `Shr`\n\nr? @steveklabnik", "tree": {"sha": "c415064b721a4eb093ec05e417a101b58b9b15b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c415064b721a4eb093ec05e417a101b58b9b15b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45", "html_url": "https://github.com/rust-lang/rust/commit/b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d33e1916ce40d16fa2c5a3f480a8a68e2c13f26d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d33e1916ce40d16fa2c5a3f480a8a68e2c13f26d", "html_url": "https://github.com/rust-lang/rust/commit/d33e1916ce40d16fa2c5a3f480a8a68e2c13f26d"}, {"sha": "ff3a761f79cc43f5465215ad1301ac1789d6e4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3a761f79cc43f5465215ad1301ac1789d6e4df", "html_url": "https://github.com/rust-lang/rust/commit/ff3a761f79cc43f5465215ad1301ac1789d6e4df"}], "stats": {"total": 94, "additions": 76, "deletions": 18}, "files": [{"sha": "ae8f192e3451964b127bc35c58fe0fb9da8feaa0", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 76, "deletions": 18, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b4a6b6bd9e144fc80167dc7a4f284a9d2b4f1c45", "patch": "@@ -1034,25 +1034,54 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Shl`. When `Foo << Foo` happens, it ends up\n-/// calling `shl`, and therefore, `main` prints `Shifting left!`.\n+/// An implementation of `Shl` that lifts the `<<` operation on integers to a\n+/// `Scalar` struct.\n ///\n /// ```\n /// use std::ops::Shl;\n ///\n-/// struct Foo;\n+/// #[derive(PartialEq, Debug)]\n+/// struct Scalar(usize);\n ///\n-/// impl Shl<Foo> for Foo {\n-///     type Output = Foo;\n+/// impl Shl<Scalar> for Scalar {\n+///     type Output = Self;\n ///\n-///     fn shl(self, _rhs: Foo) -> Foo {\n-///         println!(\"Shifting left!\");\n-///         self\n+///     fn shl(self, Scalar(rhs): Self) -> Scalar {\n+///         let Scalar(lhs) = self;\n+///         Scalar(lhs << rhs)\n+///     }\n+/// }\n+/// fn main() {\n+///     assert_eq!(Scalar(4) << Scalar(2), Scalar(16));\n+/// }\n+/// ```\n+///\n+/// An implementation of `Shl` that spins a vector leftward by a given amount.\n+///\n+/// ```\n+/// use std::ops::Shl;\n+///\n+/// #[derive(PartialEq, Debug)]\n+/// struct SpinVector<T: Clone> {\n+///     vec: Vec<T>,\n+/// }\n+///\n+/// impl<T: Clone> Shl<usize> for SpinVector<T> {\n+///     type Output = Self;\n+///\n+///     fn shl(self, rhs: usize) -> SpinVector<T> {\n+///         // rotate the vector by `rhs` places\n+///         let (a, b) = self.vec.split_at(rhs);\n+///         let mut spun_vector: Vec<T> = vec![];\n+///         spun_vector.extend_from_slice(b);\n+///         spun_vector.extend_from_slice(a);\n+///         SpinVector { vec: spun_vector }\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo << Foo;\n+///     assert_eq!(SpinVector { vec: vec![0, 1, 2, 3, 4] } << 2,\n+///                SpinVector { vec: vec![2, 3, 4, 0, 1] });\n /// }\n /// ```\n #[lang = \"shl\"]\n@@ -1106,25 +1135,54 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Shr`. When `Foo >> Foo` happens, it ends up\n-/// calling `shr`, and therefore, `main` prints `Shifting right!`.\n+/// An implementation of `Shr` that lifts the `>>` operation on integers to a\n+/// `Scalar` struct.\n ///\n /// ```\n /// use std::ops::Shr;\n ///\n-/// struct Foo;\n+/// #[derive(PartialEq, Debug)]\n+/// struct Scalar(usize);\n ///\n-/// impl Shr<Foo> for Foo {\n-///     type Output = Foo;\n+/// impl Shr<Scalar> for Scalar {\n+///     type Output = Self;\n ///\n-///     fn shr(self, _rhs: Foo) -> Foo {\n-///         println!(\"Shifting right!\");\n-///         self\n+///     fn shr(self, Scalar(rhs): Self) -> Scalar {\n+///         let Scalar(lhs) = self;\n+///         Scalar(lhs >> rhs)\n+///     }\n+/// }\n+/// fn main() {\n+///     assert_eq!(Scalar(16) >> Scalar(2), Scalar(4));\n+/// }\n+/// ```\n+///\n+/// An implementation of `Shr` that spins a vector rightward by a given amount.\n+///\n+/// ```\n+/// use std::ops::Shr;\n+///\n+/// #[derive(PartialEq, Debug)]\n+/// struct SpinVector<T: Clone> {\n+///     vec: Vec<T>,\n+/// }\n+///\n+/// impl<T: Clone> Shr<usize> for SpinVector<T> {\n+///     type Output = Self;\n+///\n+///     fn shr(self, rhs: usize) -> SpinVector<T> {\n+///         // rotate the vector by `rhs` places\n+///         let (a, b) = self.vec.split_at(self.vec.len() - rhs);\n+///         let mut spun_vector: Vec<T> = vec![];\n+///         spun_vector.extend_from_slice(b);\n+///         spun_vector.extend_from_slice(a);\n+///         SpinVector { vec: spun_vector }\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo >> Foo;\n+///     assert_eq!(SpinVector { vec: vec![0, 1, 2, 3, 4] } >> 2,\n+///                SpinVector { vec: vec![3, 4, 0, 1, 2] });\n /// }\n /// ```\n #[lang = \"shr\"]"}]}