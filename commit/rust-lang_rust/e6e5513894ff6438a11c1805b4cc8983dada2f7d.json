{"sha": "e6e5513894ff6438a11c1805b4cc8983dada2f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZTU1MTM4OTRmZjY0MzhhMTFjMTgwNWI0Y2M4OTgzZGFkYTJmN2Q=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-17T23:05:50Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-21T11:20:46Z"}, "message": "Fold away `AscribeUserType`", "tree": {"sha": "6255dac75fdb92f8885b2e54084a81cd7261cd7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6255dac75fdb92f8885b2e54084a81cd7261cd7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e5513894ff6438a11c1805b4cc8983dada2f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e5513894ff6438a11c1805b4cc8983dada2f7d", "html_url": "https://github.com/rust-lang/rust/commit/e6e5513894ff6438a11c1805b4cc8983dada2f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e5513894ff6438a11c1805b4cc8983dada2f7d/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5510f5589eac9504f7fdbd5673ff64e2bddd88ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5510f5589eac9504f7fdbd5673ff64e2bddd88ab", "html_url": "https://github.com/rust-lang/rust/commit/5510f5589eac9504f7fdbd5673ff64e2bddd88ab"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "e1c89af186a099c2e9d34c8ff44ff7127b571106", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6e5513894ff6438a11c1805b4cc8983dada2f7d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e5513894ff6438a11c1805b4cc8983dada2f7d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e6e5513894ff6438a11c1805b4cc8983dada2f7d", "patch": "@@ -347,6 +347,7 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n             ) => bug!(\"cannot deref {:#?}, {} -> {}\", val, crty, rty),\n \n             (_, &PatKind::Binding { subpattern: Some(ref s), .. }) => s.fold_with(self),\n+            (_, &PatKind::AscribeUserType { subpattern: ref s, .. }) => s.fold_with(self),\n             _ => pat.super_fold_with(self),\n         }\n     }\n@@ -1759,9 +1760,7 @@ fn pat_constructor<'tcx>(\n     pat: &Pat<'tcx>,\n ) -> Option<Constructor<'tcx>> {\n     match *pat.kind {\n-        PatKind::AscribeUserType { ref subpattern, .. } => {\n-            pat_constructor(tcx, param_env, subpattern)\n-        }\n+        PatKind::AscribeUserType { .. } => bug!(), // Handled by `expand_pattern`\n         PatKind::Binding { .. } | PatKind::Wild => None,\n         PatKind::Leaf { .. } | PatKind::Deref { .. } => Some(Single),\n         PatKind::Variant { adt_def, variant_index, .. } => {\n@@ -2262,21 +2261,17 @@ fn patterns_for_variant<'p, 'a: 'p, 'tcx>(\n /// fields filled with wild patterns.\n fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-    mut pat: &'q Pat<'tcx>,\n+    pat: &'q Pat<'tcx>,\n     constructor: &Constructor<'tcx>,\n     ctor_wild_subpatterns: &[&'p Pat<'tcx>],\n ) -> Option<PatStack<'p, 'tcx>> {\n-    while let PatKind::AscribeUserType { ref subpattern, .. } = *pat.kind {\n-        pat = subpattern;\n-    }\n-\n     if let NonExhaustive = constructor {\n         // Only a wildcard pattern can match the special extra constructor\n         return if pat.is_wildcard() { Some(PatStack::default()) } else { None };\n     }\n \n     let result = match *pat.kind {\n-        PatKind::AscribeUserType { .. } => bug!(), // Handled above\n+        PatKind::AscribeUserType { .. } => bug!(), // Handled by `expand_pattern`\n \n         PatKind::Binding { .. } | PatKind::Wild => {\n             Some(PatStack::from_slice(ctor_wild_subpatterns))"}]}