{"sha": "56fbfe56c1012a1005e0f8cfe872884850a7930a", "node_id": "C_kwDOAAsO6NoAKDU2ZmJmZTU2YzEwMTJhMTAwNWUwZjhjZmU4NzI4ODQ4NTBhNzkzMGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T10:15:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T10:15:29Z"}, "message": "Auto merge of #10448 - samueltardieu:issue-10444, r=llogiq\n\nAdd new `redundant_async_block` lint\n\nFixes #10444\n\nchangelog: [`redundant_async_block`]: new lint to detect `async { future.await }`", "tree": {"sha": "6d9ee672d4c8206664156a75eb17987e196633fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9ee672d4c8206664156a75eb17987e196633fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56fbfe56c1012a1005e0f8cfe872884850a7930a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56fbfe56c1012a1005e0f8cfe872884850a7930a", "html_url": "https://github.com/rust-lang/rust/commit/56fbfe56c1012a1005e0f8cfe872884850a7930a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56fbfe56c1012a1005e0f8cfe872884850a7930a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eefbb39a9638bdb0bfa86db400244cb1eea2eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eefbb39a9638bdb0bfa86db400244cb1eea2eb8", "html_url": "https://github.com/rust-lang/rust/commit/5eefbb39a9638bdb0bfa86db400244cb1eea2eb8"}, {"sha": "d5429eab8aee46fd2148f99b8f9ba394addb5ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5429eab8aee46fd2148f99b8f9ba394addb5ba7", "html_url": "https://github.com/rust-lang/rust/commit/d5429eab8aee46fd2148f99b8f9ba394addb5ba7"}], "stats": {"total": 272, "additions": 260, "deletions": 12}, "files": [{"sha": "d797b30f47bb34899a788a5175779419b7402cf4", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -4836,6 +4836,7 @@ Released 2018-09-13\n [`read_zero_byte_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#read_zero_byte_vec\n [`recursive_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n+[`redundant_async_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_async_block\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n [`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call"}, {"sha": "d3b9cc675795d37774ba0e2a9541cd892a4d21c3", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -519,6 +519,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::ranges::REVERSED_EMPTY_RANGES_INFO,\n     crate::rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT_INFO,\n     crate::read_zero_byte_vec::READ_ZERO_BYTE_VEC_INFO,\n+    crate::redundant_async_block::REDUNDANT_ASYNC_BLOCK_INFO,\n     crate::redundant_clone::REDUNDANT_CLONE_INFO,\n     crate::redundant_closure_call::REDUNDANT_CLOSURE_CALL_INFO,\n     crate::redundant_else::REDUNDANT_ELSE_INFO,"}, {"sha": "ea1e0ab506ccf919f4375e60080057186ac0702a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -251,6 +251,7 @@ mod question_mark_used;\n mod ranges;\n mod rc_clone_in_vec_init;\n mod read_zero_byte_vec;\n+mod redundant_async_block;\n mod redundant_clone;\n mod redundant_closure_call;\n mod redundant_else;\n@@ -928,6 +929,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n     store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n     store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n+    store.register_early_pass(|| Box::new(redundant_async_block::RedundantAsyncBlock));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "27ad43086374357b1676e685261becbd07fb2254", "filename": "clippy_lints/src/redundant_async_block.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -0,0 +1,84 @@\n+use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet};\n+use rustc_ast::ast::*;\n+use rustc_ast::visit::Visitor as AstVisitor;\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `async` block that only returns `await` on a future.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is simpler and more efficient to use the future directly.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// async fn f() -> i32 {\n+    ///     1 + 2\n+    /// }\n+    ///\n+    /// let fut = async {\n+    ///     f().await\n+    /// };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// async fn f() -> i32 {\n+    ///     1 + 2\n+    /// }\n+    ///\n+    /// let fut = f();\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub REDUNDANT_ASYNC_BLOCK,\n+    complexity,\n+    \"`async { future.await }` can be replaced by `future`\"\n+}\n+declare_lint_pass!(RedundantAsyncBlock => [REDUNDANT_ASYNC_BLOCK]);\n+\n+impl EarlyLintPass for RedundantAsyncBlock {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+        if let ExprKind::Async(_, _, block) = &expr.kind && block.stmts.len() == 1 &&\n+            let Some(Stmt { kind: StmtKind::Expr(last), .. }) = block.stmts.last() &&\n+            let ExprKind::Await(future) = &last.kind &&\n+            !future.span.from_expansion() &&\n+            !await_in_expr(future)\n+        {\n+            span_lint_and_sugg(\n+                cx,\n+                REDUNDANT_ASYNC_BLOCK,\n+                expr.span,\n+                \"this async expression only awaits a single future\",\n+                \"you can reduce it to\",\n+                snippet(cx, future.span, \"..\").into_owned(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+/// Check whether an expression contains `.await`\n+fn await_in_expr(expr: &Expr) -> bool {\n+    let mut detector = AwaitDetector::default();\n+    detector.visit_expr(expr);\n+    detector.await_found\n+}\n+\n+#[derive(Default)]\n+struct AwaitDetector {\n+    await_found: bool,\n+}\n+\n+impl<'ast> AstVisitor<'ast> for AwaitDetector {\n+    fn visit_expr(&mut self, ex: &'ast Expr) {\n+        match (&ex.kind, self.await_found) {\n+            (ExprKind::Await(_), _) => self.await_found = true,\n+            (_, false) => rustc_ast::visit::walk_expr(self, ex),\n+            _ => (),\n+        }\n+    }\n+}"}, {"sha": "579a63ea47722218362879f5dd96ad24dbcd4edc", "filename": "tests/ui/async_yields_async.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.fixed?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -2,6 +2,7 @@\n #![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n+#![allow(clippy::redundant_async_block)]\n \n use core::future::Future;\n use core::pin::Pin;"}, {"sha": "5aec2fb50f6a1d82198ca4f3749c765e4c298213", "filename": "tests/ui/async_yields_async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.rs?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -2,6 +2,7 @@\n #![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n+#![allow(clippy::redundant_async_block)]\n \n use core::future::Future;\n use core::pin::Pin;"}, {"sha": "7f72534832b4ea9e221a3faff428c640d2dc1a54", "filename": "tests/ui/async_yields_async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fasync_yields_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fasync_yields_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.stderr?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -1,5 +1,5 @@\n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:39:9\n+  --> $DIR/async_yields_async.rs:40:9\n    |\n LL |        let _h = async {\n    |  _____________________-\n@@ -19,7 +19,7 @@ LL +         }.await\n    |\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:44:9\n+  --> $DIR/async_yields_async.rs:45:9\n    |\n LL |       let _i = async {\n    |  ____________________-\n@@ -32,7 +32,7 @@ LL | |     };\n    | |_____- outer async construct\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:50:9\n+  --> $DIR/async_yields_async.rs:51:9\n    |\n LL |        let _j = async || {\n    |  ________________________-\n@@ -51,7 +51,7 @@ LL +         }.await\n    |\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:55:9\n+  --> $DIR/async_yields_async.rs:56:9\n    |\n LL |       let _k = async || {\n    |  _______________________-\n@@ -64,7 +64,7 @@ LL | |     };\n    | |_____- outer async construct\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:57:23\n+  --> $DIR/async_yields_async.rs:58:23\n    |\n LL |     let _l = async || CustomFutureType;\n    |                       ^^^^^^^^^^^^^^^^\n@@ -74,7 +74,7 @@ LL |     let _l = async || CustomFutureType;\n    |                       help: consider awaiting this value: `CustomFutureType.await`\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:63:9\n+  --> $DIR/async_yields_async.rs:64:9\n    |\n LL |       let _m = async || {\n    |  _______________________-"}, {"sha": "5f9931df45e92e1a7228a817b62fd0a8d2580026", "filename": "tests/ui/redundant_async_block.fixed", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_async_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_async_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.fixed?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::redundant_async_block)]\n+\n+async fn func1(n: usize) -> usize {\n+    n + 1\n+}\n+\n+async fn func2() -> String {\n+    let s = String::from(\"some string\");\n+    let f = async { (*s).to_owned() };\n+    let x = f;\n+    x.await\n+}\n+\n+macro_rules! await_in_macro {\n+    ($e:expr) => {\n+        std::convert::identity($e).await\n+    };\n+}\n+\n+async fn func3(n: usize) -> usize {\n+    // Do not lint (suggestion would be `std::convert::identity(func1(n))`\n+    // which copies code from inside the macro)\n+    async move { await_in_macro!(func1(n)) }.await\n+}\n+\n+// This macro should never be linted as `$e` might contain `.await`\n+macro_rules! async_await_parameter_in_macro {\n+    ($e:expr) => {\n+        async { $e.await }\n+    };\n+}\n+\n+// MISSED OPPORTUNITY: this macro could be linted as the `async` block does not\n+// contain code coming from the parameters\n+macro_rules! async_await_in_macro {\n+    ($f:expr) => {\n+        ($f)(async { func2().await })\n+    };\n+}\n+\n+fn main() {\n+    let fut1 = async { 17 };\n+    let fut2 = fut1;\n+\n+    let fut1 = async { 25 };\n+    let fut2 = fut1;\n+\n+    let fut = async { 42 };\n+\n+    // Do not lint: not a single expression\n+    let fut = async {\n+        func1(10).await;\n+        func2().await\n+    };\n+\n+    // Do not lint: expression contains `.await`\n+    let fut = async { func1(func2().await.len()).await };\n+\n+    let fut = async_await_parameter_in_macro!(func2());\n+    let fut = async_await_in_macro!(std::convert::identity);\n+}"}, {"sha": "de3c9970c65f26c99ae00ae1c46634460f8bac33", "filename": "tests/ui/redundant_async_block.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.rs?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::redundant_async_block)]\n+\n+async fn func1(n: usize) -> usize {\n+    n + 1\n+}\n+\n+async fn func2() -> String {\n+    let s = String::from(\"some string\");\n+    let f = async { (*s).to_owned() };\n+    let x = async { f.await };\n+    x.await\n+}\n+\n+macro_rules! await_in_macro {\n+    ($e:expr) => {\n+        std::convert::identity($e).await\n+    };\n+}\n+\n+async fn func3(n: usize) -> usize {\n+    // Do not lint (suggestion would be `std::convert::identity(func1(n))`\n+    // which copies code from inside the macro)\n+    async move { await_in_macro!(func1(n)) }.await\n+}\n+\n+// This macro should never be linted as `$e` might contain `.await`\n+macro_rules! async_await_parameter_in_macro {\n+    ($e:expr) => {\n+        async { $e.await }\n+    };\n+}\n+\n+// MISSED OPPORTUNITY: this macro could be linted as the `async` block does not\n+// contain code coming from the parameters\n+macro_rules! async_await_in_macro {\n+    ($f:expr) => {\n+        ($f)(async { func2().await })\n+    };\n+}\n+\n+fn main() {\n+    let fut1 = async { 17 };\n+    let fut2 = async { fut1.await };\n+\n+    let fut1 = async { 25 };\n+    let fut2 = async move { fut1.await };\n+\n+    let fut = async { async { 42 }.await };\n+\n+    // Do not lint: not a single expression\n+    let fut = async {\n+        func1(10).await;\n+        func2().await\n+    };\n+\n+    // Do not lint: expression contains `.await`\n+    let fut = async { func1(func2().await.len()).await };\n+\n+    let fut = async_await_parameter_in_macro!(func2());\n+    let fut = async_await_in_macro!(std::convert::identity);\n+}"}, {"sha": "b16d96dce84ebbf2f1e0a8f35ee8749f47127efb", "filename": "tests/ui/redundant_async_block.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_async_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_async_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.stderr?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -0,0 +1,28 @@\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:13:13\n+   |\n+LL |     let x = async { f.await };\n+   |             ^^^^^^^^^^^^^^^^^ help: you can reduce it to: `f`\n+   |\n+   = note: `-D clippy::redundant-async-block` implied by `-D warnings`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:46:16\n+   |\n+LL |     let fut2 = async { fut1.await };\n+   |                ^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:49:16\n+   |\n+LL |     let fut2 = async move { fut1.await };\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:51:15\n+   |\n+LL |     let fut = async { async { 42 }.await };\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `async { 42 }`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b987fd2ce6f08cd795726b7ac141977b2b39ef1d", "filename": "tests/ui/redundant_closure_call_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.fixed?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n+#![allow(clippy::redundant_async_block)]\n #![allow(unused)]\n \n async fn something() -> u32 {"}, {"sha": "633a2979d5da3b21dfbe0fee5f70f9f315512d3a", "filename": "tests/ui/redundant_closure_call_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_closure_call_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_closure_call_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.rs?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n+#![allow(clippy::redundant_async_block)]\n #![allow(unused)]\n \n async fn something() -> u32 {"}, {"sha": "8a1f0771659b177afeb1b6add4a922ced31376a3", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56fbfe56c1012a1005e0f8cfe872884850a7930a/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=56fbfe56c1012a1005e0f8cfe872884850a7930a", "patch": "@@ -1,13 +1,13 @@\n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:16:13\n+  --> $DIR/redundant_closure_call_fixable.rs:17:13\n    |\n LL |     let a = (|| 42)();\n    |             ^^^^^^^^^ help: try doing something like: `42`\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:17:13\n+  --> $DIR/redundant_closure_call_fixable.rs:18:13\n    |\n LL |       let b = (async || {\n    |  _____________^\n@@ -27,7 +27,7 @@ LL ~     };\n    |\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:22:13\n+  --> $DIR/redundant_closure_call_fixable.rs:23:13\n    |\n LL |       let c = (|| {\n    |  _____________^\n@@ -47,13 +47,13 @@ LL ~     };\n    |\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:27:13\n+  --> $DIR/redundant_closure_call_fixable.rs:28:13\n    |\n LL |     let d = (async || something().await)();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try doing something like: `async { something().await }`\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:36:13\n+  --> $DIR/redundant_closure_call_fixable.rs:37:13\n    |\n LL |             (|| m!())()\n    |             ^^^^^^^^^^^ help: try doing something like: `m!()`\n@@ -64,7 +64,7 @@ LL |     m2!();\n    = note: this error originates in the macro `m2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:31:13\n+  --> $DIR/redundant_closure_call_fixable.rs:32:13\n    |\n LL |             (|| 0)()\n    |             ^^^^^^^^ help: try doing something like: `0`"}]}