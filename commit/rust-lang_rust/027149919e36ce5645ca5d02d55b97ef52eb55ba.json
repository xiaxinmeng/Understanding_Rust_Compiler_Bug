{"sha": "027149919e36ce5645ca5d02d55b97ef52eb55ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzE0OTkxOWUzNmNlNTY0NWNhNWQwMmQ1NWI5N2VmNTJlYjU1YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-15T02:56:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-15T02:56:38Z"}, "message": "Auto merge of #72222 - Dylan-DPC:rollup-vaw44dg, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #71809 (Use `LocalDefId` in `DumpVisitor::nest_tables`)\n - #72062 (Add built in PSP target)\n - #72146 (Provide separate option for std debug asserts)\n - #72172 (Forbid stage arguments to check)\n - #72173 (Make intra links work inside trait impl block)\n - #72200 (Add prioritize_on attribute to triagebot)\n - #72214 (Minor fixes to comments)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3adccc771fc0ed4971b16dfcca7cb7cc87dc4d82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3adccc771fc0ed4971b16dfcca7cb7cc87dc4d82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/027149919e36ce5645ca5d02d55b97ef52eb55ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/027149919e36ce5645ca5d02d55b97ef52eb55ba", "html_url": "https://github.com/rust-lang/rust/commit/027149919e36ce5645ca5d02d55b97ef52eb55ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/027149919e36ce5645ca5d02d55b97ef52eb55ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f0da67ff31923955f7fb107fb097835bb3b6ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f0da67ff31923955f7fb107fb097835bb3b6ff", "html_url": "https://github.com/rust-lang/rust/commit/85f0da67ff31923955f7fb107fb097835bb3b6ff"}, {"sha": "49d50e6e9454cc1990ecdef9377541dbcdbf4864", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d50e6e9454cc1990ecdef9377541dbcdbf4864", "html_url": "https://github.com/rust-lang/rust/commit/49d50e6e9454cc1990ecdef9377541dbcdbf4864"}], "stats": {"total": 332, "additions": 280, "deletions": 52}, "files": [{"sha": "ffe907c9da97c97e7b046346de54c1c26ac70f40", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -314,6 +314,10 @@\n # library.\n #debug-assertions = false\n \n+# Whether or not debug assertions are enabled for the standard library.\n+# Overrides the `debug-assertions` option, if defined.\n+#debug-assertions-std = false\n+\n # Debuginfo level for most of Rust code, corresponds to the `-C debuginfo=N` option of `rustc`.\n # `0` - no debug info\n # `1` - line tables only"}, {"sha": "4bc81a7b42dc00089a95cc6e715604ecc93453cf", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -915,7 +915,14 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n             .env(\"RUSTC_REAL\", self.rustc(compiler))\n             .env(\"RUSTC_STAGE\", stage.to_string())\n-            .env(\"RUSTC_DEBUG_ASSERTIONS\", self.config.rust_debug_assertions.to_string())\n+            .env(\n+                \"RUSTC_DEBUG_ASSERTIONS\",\n+                if mode == Mode::Std {\n+                    self.config.rust_debug_assertions_std.to_string()\n+                } else {\n+                    self.config.rust_debug_assertions.to_string()\n+                },\n+            )\n             .env(\"RUSTC_SYSROOT\", &sysroot)\n             .env(\"RUSTC_LIBDIR\", &libdir)\n             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))"}, {"sha": "771f952abc013b4827ce51c25241e5eb159a19c2", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -97,6 +97,7 @@ pub struct Config {\n     pub rust_codegen_units: Option<u32>,\n     pub rust_codegen_units_std: Option<u32>,\n     pub rust_debug_assertions: bool,\n+    pub rust_debug_assertions_std: bool,\n     pub rust_debuginfo_level_rustc: u32,\n     pub rust_debuginfo_level_std: u32,\n     pub rust_debuginfo_level_tools: u32,\n@@ -314,6 +315,7 @@ struct Rust {\n     codegen_units: Option<u32>,\n     codegen_units_std: Option<u32>,\n     debug_assertions: Option<bool>,\n+    debug_assertions_std: Option<bool>,\n     debuginfo_level: Option<u32>,\n     debuginfo_level_rustc: Option<u32>,\n     debuginfo_level_std: Option<u32>,\n@@ -518,6 +520,7 @@ impl Config {\n         let mut llvm_assertions = None;\n         let mut debug = None;\n         let mut debug_assertions = None;\n+        let mut debug_assertions_std = None;\n         let mut debuginfo_level = None;\n         let mut debuginfo_level_rustc = None;\n         let mut debuginfo_level_std = None;\n@@ -560,6 +563,7 @@ impl Config {\n         if let Some(ref rust) = toml.rust {\n             debug = rust.debug;\n             debug_assertions = rust.debug_assertions;\n+            debug_assertions_std = rust.debug_assertions_std;\n             debuginfo_level = rust.debuginfo_level;\n             debuginfo_level_rustc = rust.debuginfo_level_rustc;\n             debuginfo_level_std = rust.debuginfo_level_std;\n@@ -658,6 +662,8 @@ impl Config {\n \n         let default = debug == Some(true);\n         config.rust_debug_assertions = debug_assertions.unwrap_or(default);\n+        config.rust_debug_assertions_std =\n+            debug_assertions_std.unwrap_or(config.rust_debug_assertions);\n \n         let with_defaults = |debuginfo_level_specific: Option<u32>| {\n             debuginfo_level_specific.or(debuginfo_level).unwrap_or(if debug == Some(true) {"}, {"sha": "646b9e05d99c3c25c9357c3d24f2e359dee06deb", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -503,6 +503,20 @@ Arguments:\n             }\n         };\n \n+        if let Subcommand::Check { .. } = &cmd {\n+            if matches.opt_str(\"stage\").is_some() {\n+                println!(\"{}\", \"--stage not supported for x.py check, always treated as stage 0\");\n+                process::exit(1);\n+            }\n+            if matches.opt_str(\"keep-stage\").is_some() {\n+                println!(\n+                    \"{}\",\n+                    \"--keep-stage not supported for x.py check, only one stage available\"\n+                );\n+                process::exit(1);\n+            }\n+        }\n+\n         Flags {\n             verbose: matches.opt_count(\"verbose\"),\n             stage: matches.opt_str(\"stage\").map(|j| j.parse().expect(\"`stage` should be a number\")),"}, {"sha": "34db59b1b458d67f66cbf7375e47262dc6f0c155", "filename": "src/librustc_ast_passes/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_ast_passes%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_ast_passes%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fnode_count.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -1,4 +1,4 @@\n-// Simply gives a rought count of the number of nodes in an AST.\n+// Simply gives a rough count of the number of nodes in an AST.\n \n use rustc_ast::ast::*;\n use rustc_ast::visit::*;"}, {"sha": "a54160cdd710fb9f87a6f33385651fe1a4c61844", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -1179,6 +1179,28 @@ fn add_pre_link_args(\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n \n+/// Add a link script embedded in the target, if applicable.\n+fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_type: CrateType) {\n+    match (crate_type, &sess.target.target.options.link_script) {\n+        (CrateType::Cdylib | CrateType::Executable, Some(script)) => {\n+            if !sess.target.target.options.linker_is_gnu {\n+                sess.fatal(\"can only use link script when linking with GNU-like linker\");\n+            }\n+\n+            let file_name = [\"rustc\", &sess.target.target.llvm_target, \"linkfile.ld\"].join(\"-\");\n+\n+            let path = tmpdir.join(file_name);\n+            if let Err(e) = fs::write(&path, script) {\n+                sess.fatal(&format!(\"failed to write link script to {}: {}\", path.display(), e));\n+            }\n+\n+            cmd.arg(\"--script\");\n+            cmd.arg(path);\n+        }\n+        _ => {}\n+    }\n+}\n+\n /// Add arbitrary \"user defined\" args defined from command line and by `#[link_args]` attributes.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_user_defined_link_args(\n@@ -1421,6 +1443,9 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_pre_link_args(cmd, sess, flavor, crate_type);\n \n+    // NO-OPT-OUT\n+    add_link_script(cmd, sess, tmpdir, crate_type);\n+\n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_fuchsia {\n         let prefix = match sess.opts.debugging_opts.sanitizer {"}, {"sha": "f02d8fe8ad6018278a050cbefcb487c5b4ed942a", "filename": "src/librustc_middle/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -4,7 +4,7 @@\n //! For more information about how MIR-based region-checking works,\n //! see the [rustc dev guide].\n //!\n-//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/mir/borrowck.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{self, DefIdTree, TyCtxt};\n@@ -181,7 +181,7 @@ impl Scope {\n                 // `blk`; reuse span of `blk` and shift `lo`\n                 // forward to end of indexed statement.\n                 //\n-                // (This is the special case aluded to in the\n+                // (This is the special case alluded to in the\n                 // doc-comment for this method)\n \n                 let stmt_span = blk.stmts[first_statement_index.index()].span;"}, {"sha": "3dd715f9e3df6773fb8a4bbed31ac92059901729", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 41, "deletions": 29, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -21,7 +21,7 @@ use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust::{bounds_to_string, generic_params_to_string, ty_to_string};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::config::Input;\n@@ -104,12 +104,10 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.dumper.analysis()\n     }\n \n-    fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n+    fn nest_tables<F>(&mut self, item_def_id: LocalDefId, f: F)\n     where\n         F: FnOnce(&mut Self),\n     {\n-        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n-\n         let tables = if self.tcx.has_typeck_tables(item_def_id) {\n             self.tcx.typeck_tables_of(item_def_id)\n         } else {\n@@ -272,8 +270,9 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     ) {\n         debug!(\"process_method: {}:{}\", id, ident);\n \n-        let hir_id = self.tcx.hir().node_id_to_hir_id(id);\n-        self.nest_tables(id, |v| {\n+        let map = &self.tcx.hir();\n+        let hir_id = map.node_id_to_hir_id(id);\n+        self.nest_tables(map.local_def_id(hir_id), |v| {\n             if let Some(mut method_data) = v.save_ctxt.get_method_data(id, ident, span) {\n                 v.process_formals(&sig.decl.inputs, &method_data.qualname);\n                 v.process_generic_params(&generics, &method_data.qualname, id);\n@@ -296,7 +295,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 // start walking from the newly-created definition.\n                 match sig.header.asyncness {\n                     ast::Async::Yes { return_impl_trait_id, .. } => {\n-                        v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                        let hir_id = map.node_id_to_hir_id(return_impl_trait_id);\n+                        v.nest_tables(map.local_def_id(hir_id), |v| v.visit_ty(ret_ty))\n                     }\n                     _ => v.visit_ty(ret_ty),\n                 }\n@@ -364,8 +364,9 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         ty_params: &'l ast::Generics,\n         body: Option<&'l ast::Block>,\n     ) {\n-        let hir_id = self.tcx.hir().node_id_to_hir_id(item.id);\n-        self.nest_tables(item.id, |v| {\n+        let map = &self.tcx.hir();\n+        let hir_id = map.node_id_to_hir_id(item.id);\n+        self.nest_tables(map.local_def_id(hir_id), |v| {\n             if let Some(fn_data) = v.save_ctxt.get_item_data(item) {\n                 down_cast_data!(fn_data, DefData, item.span);\n                 v.process_formals(&decl.inputs, &fn_data.qualname);\n@@ -389,7 +390,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     // start walking from the newly-created definition.\n                     match header.asyncness {\n                         ast::Async::Yes { return_impl_trait_id, .. } => {\n-                            v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                            let hir_id = map.node_id_to_hir_id(return_impl_trait_id);\n+                            v.nest_tables(map.local_def_id(hir_id), |v| v.visit_ty(ret_ty))\n                         }\n                         _ => v.visit_ty(ret_ty),\n                     }\n@@ -407,7 +409,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         expr: Option<&'l ast::Expr>,\n     ) {\n         let hir_id = self.tcx.hir().node_id_to_hir_id(item.id);\n-        self.nest_tables(item.id, |v| {\n+        self.nest_tables(self.tcx.hir().local_def_id(hir_id), |v| {\n             if let Some(var_data) = v.save_ctxt.get_item_data(item) {\n                 down_cast_data!(var_data, DefData, item.span);\n                 v.dumper.dump_def(&access_from!(v.save_ctxt, item, hir_id), var_data);\n@@ -427,15 +429,13 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         vis: ast::Visibility,\n         attrs: &'l [Attribute],\n     ) {\n-        let qualname = format!(\n-            \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n-        );\n+        let hir_id = self.tcx.hir().node_id_to_hir_id(id);\n+        let qualname =\n+            format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id(hir_id).to_def_id()));\n \n         if !self.span.filter_generated(ident.span) {\n             let sig = sig::assoc_const_signature(id, ident.name, typ, expr, &self.save_ctxt);\n             let span = self.span_from_span(ident.span);\n-            let hir_id = self.tcx.hir().node_id_to_hir_id(id);\n \n             self.dumper.dump_def(\n                 &access_from_vis!(self.save_ctxt, vis, hir_id),\n@@ -457,7 +457,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n \n         // walk type and init value\n-        self.nest_tables(id, |v| {\n+        self.nest_tables(self.tcx.hir().local_def_id(hir_id), |v| {\n             v.visit_ty(typ);\n             if let Some(expr) = expr {\n                 v.visit_expr(expr);\n@@ -474,10 +474,9 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     ) {\n         debug!(\"process_struct {:?} {:?}\", item, item.span);\n         let name = item.ident.to_string();\n-        let qualname = format!(\n-            \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id())\n-        );\n+        let hir_id = self.tcx.hir().node_id_to_hir_id(item.id);\n+        let qualname =\n+            format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id(hir_id).to_def_id()));\n \n         let kind = match item.kind {\n             ast::ItemKind::Struct(_, _) => DefKind::Struct,\n@@ -509,7 +508,6 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n         if !self.span.filter_generated(item.ident.span) {\n             let span = self.span_from_span(item.ident.span);\n-            let hir_id = self.tcx.hir().node_id_to_hir_id(item.id);\n             self.dumper.dump_def(\n                 &access_from!(self.save_ctxt, item, hir_id),\n                 Def {\n@@ -529,7 +527,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             );\n         }\n \n-        self.nest_tables(item.id, |v| {\n+        self.nest_tables(self.tcx.hir().local_def_id(hir_id), |v| {\n             for field in def.fields() {\n                 v.process_struct_field_def(field, item.id);\n                 v.visit_ty(&field.ty);\n@@ -669,14 +667,15 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n \n         let map = &self.tcx.hir();\n-        self.nest_tables(item.id, |v| {\n+        let hir_id = map.node_id_to_hir_id(item.id);\n+        self.nest_tables(map.local_def_id(hir_id), |v| {\n             v.visit_ty(&typ);\n             if let &Some(ref trait_ref) = trait_ref {\n                 v.process_path(trait_ref.ref_id, &trait_ref.path);\n             }\n             v.process_generic_params(generics, \"\", item.id);\n             for impl_item in impl_items {\n-                v.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id).to_def_id());\n+                v.process_impl_item(impl_item, map.local_def_id(hir_id).to_def_id());\n             }\n         });\n     }\n@@ -1411,7 +1410,10 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n             }\n             ast::TyKind::Array(ref element, ref length) => {\n                 self.visit_ty(element);\n-                self.nest_tables(length.id, |v| v.visit_expr(&length.value));\n+                let hir_id = self.tcx.hir().node_id_to_hir_id(length.id);\n+                self.nest_tables(self.tcx.hir().local_def_id(hir_id), |v| {\n+                    v.visit_expr(&length.value)\n+                });\n             }\n             ast::TyKind::ImplTrait(id, ref bounds) => {\n                 // FIXME: As of writing, the opaque type lowering introduces\n@@ -1423,7 +1425,13 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 // bounds...\n                 // This will panic if called on return type `impl Trait`, which\n                 // we guard against in `process_fn`.\n-                self.nest_tables(id, |v| v.process_bounds(bounds));\n+                // FIXME(#71104) Should really be using just `node_id_to_hir_id` but\n+                // some `NodeId` do not seem to have a corresponding HirId.\n+                if let Some(hir_id) = self.tcx.hir().opt_node_id_to_hir_id(id) {\n+                    self.nest_tables(self.tcx.hir().local_def_id(hir_id), |v| {\n+                        v.process_bounds(bounds)\n+                    });\n+                }\n             }\n             _ => visit::walk_ty(self, t),\n         }\n@@ -1471,7 +1479,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 }\n \n                 // walk the body\n-                self.nest_tables(ex.id, |v| {\n+                let hir_id = self.tcx.hir().node_id_to_hir_id(ex.id);\n+                self.nest_tables(self.tcx.hir().local_def_id(hir_id), |v| {\n                     v.process_formals(&decl.inputs, &id);\n                     v.visit_expr(body)\n                 });\n@@ -1488,7 +1497,10 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n             }\n             ast::ExprKind::Repeat(ref element, ref count) => {\n                 self.visit_expr(element);\n-                self.nest_tables(count.id, |v| v.visit_expr(&count.value));\n+                let hir_id = self.tcx.hir().node_id_to_hir_id(count.id);\n+                self.nest_tables(self.tcx.hir().local_def_id(hir_id), |v| {\n+                    v.visit_expr(&count.value)\n+                });\n             }\n             // In particular, we take this branch for call and path expressions,\n             // where we'll index the idents involved just by continuing to walk."}, {"sha": "0c74454d0c5fe66dafc189266e2c637350613a56", "filename": "src/librustc_target/spec/mipsel_sony_psp.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -0,0 +1,43 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n+\n+// The PSP has custom linker requirements.\n+const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n+\n+pub fn target() -> TargetResult {\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(\n+        LinkerFlavor::Lld(LldFlavor::Ld),\n+        vec![\"--eh-frame-hdr\".to_string(), \"--emit-relocs\".to_string()],\n+    );\n+\n+    Ok(Target {\n+        llvm_target: \"mipsel-sony-psp\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n+        arch: \"mips\".to_string(),\n+        target_os: \"psp\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"sony\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+\n+        options: TargetOptions {\n+            cpu: \"mips2\".to_string(),\n+            executables: true,\n+            linker: Some(\"rust-lld\".to_owned()),\n+            linker_is_gnu: true,\n+            relocation_model: RelocModel::Static,\n+\n+            // PSP FPU only supports single precision floats.\n+            features: \"+single-float\".to_string(),\n+\n+            // PSP does not support trap-on-condition instructions.\n+            llvm_args: vec![\"-mno-check-zero-division\".to_string()],\n+            pre_link_args,\n+            link_script: Some(LINKER_SCRIPT.to_string()),\n+            ..Default::default()\n+        },\n+    })\n+}"}, {"sha": "1bd436d6f94cc08614c7a2e28a1db6ec211c1e93", "filename": "src/librustc_target/spec/mipsel_sony_psp_linker_script.ld", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp_linker_script.ld", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp_linker_script.ld", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp_linker_script.ld?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -0,0 +1,34 @@\n+ENTRY(module_start)\n+SECTIONS\n+{\n+  /* PRX format requires text to begin at 0 */\n+  .text 0 : { *(.text .text.*) }\n+\n+  /* Sort stubs for convenient ordering */\n+  .sceStub.text : { *(.sceStub.text) *(SORT(.sceStub.text.*)) }\n+\n+  /* Keep these sections around, even though they may appear unused to the linker */\n+  .lib.ent.top :  { KEEP(*(.lib.ent.top)) }\n+  .lib.ent :      { KEEP(*(.lib.ent)) }\n+  .lib.ent.btm :  { KEEP(*(.lib.ent.btm)) }\n+  .lib.stub.top : { KEEP(*(.lib.stub.top)) }\n+  .lib.stub :     { KEEP(*(.lib.stub)) }\n+  .lib.stub.btm : { KEEP(*(.lib.stub.btm)) }\n+  .eh_frame_hdr : { KEEP(*(.eh_frame_hdr)) }\n+\n+  /* Add symbols for LLVM's libunwind */\n+  __eh_frame_hdr_start = SIZEOF(.eh_frame_hdr) > 0 ? ADDR(.eh_frame_hdr) : 0;\n+  __eh_frame_hdr_end = SIZEOF(.eh_frame_hdr) > 0 ? . : 0;\n+  .eh_frame :\n+  {\n+    __eh_frame_start = .;\n+    KEEP(*(.eh_frame))\n+    __eh_frame_end = .;\n+  }\n+\n+  /* These are explicitly listed to avoid being merged into .rodata */\n+  .rodata.sceResident : { *(.rodata.sceResident) }\n+  .rodata.sceModuleInfo : { *(.rodata.sceModuleInfo) }\n+  /* Sort NIDs for convenient ordering */\n+  .rodata.sceNid : { *(.rodata.sceNid) *(SORT(.rodata.sceNid.*)) }\n+}"}, {"sha": "c7b2023ddca04153feaae7c37a5c74131d043975", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -582,6 +582,8 @@ supported_targets! {\n     (\"powerpc-wrs-vxworks\", powerpc_wrs_vxworks),\n     (\"powerpc-wrs-vxworks-spe\", powerpc_wrs_vxworks_spe),\n     (\"powerpc64-wrs-vxworks\", powerpc64_wrs_vxworks),\n+\n+    (\"mipsel-sony-psp\", mipsel_sony_psp),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target.\n@@ -666,6 +668,10 @@ pub struct TargetOptions {\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n+    /// Optional link script applied to `dylib` and `executable` crate types.\n+    /// This is a string containing the script, not a path. Can only be applied\n+    /// to linkers where `linker_is_gnu` is true.\n+    pub link_script: Option<String>,\n \n     /// Environment variables to be set for the linker invocation.\n     pub link_env: Vec<(String, String)>,\n@@ -899,6 +905,7 @@ impl Default for TargetOptions {\n             pre_link_args: LinkArgs::new(),\n             pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n+            link_script: None,\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n             features: String::new(),\n@@ -1249,6 +1256,7 @@ impl Target {\n         key!(post_link_objects, list);\n         key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n+        key!(link_script, optional);\n         key!(link_env, env);\n         key!(link_env_remove, list);\n         key!(asm_args, list);\n@@ -1479,6 +1487,7 @@ impl ToJson for Target {\n         target_option_val!(post_link_objects);\n         target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n+        target_option_val!(link_script);\n         target_option_val!(env - link_env);\n         target_option_val!(link_env_remove);\n         target_option_val!(asm_args);"}, {"sha": "79dde84b8b1bce844fb93b4c78137126505c455b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -831,13 +831,6 @@ fn primary_body_of(\n }\n \n fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    // FIXME(#71104) some `LocalDefId` do not seem to have a corresponding `HirId`.\n-    if let Some(def_id) = def_id.as_local() {\n-        if tcx.hir().opt_local_def_id_to_hir_id(def_id).is_none() {\n-            return false;\n-        }\n-    }\n-\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);"}, {"sha": "a3ef350a0487e7ab4060cb0e1499873390e1ab6a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -12,7 +12,8 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n+use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n \n use std::ops::Range;\n@@ -130,6 +131,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         current_item: &Option<String>,\n         parent_id: Option<hir::HirId>,\n         extra_fragment: &Option<String>,\n+        item_opt: Option<&Item>,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -230,16 +232,44 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias,\n                     did,\n                 ) => {\n-                    let item = cx\n-                        .tcx\n-                        .inherent_impls(did)\n-                        .iter()\n-                        .flat_map(|imp| cx.tcx.associated_items(*imp).in_definition_order())\n-                        .find(|item| item.ident.name == item_name);\n+                    // We need item's parent to know if it's\n+                    // trait impl or struct/enum/etc impl\n+                    let item_parent = item_opt\n+                        .and_then(|item| self.cx.as_local_hir_id(item.def_id))\n+                        .and_then(|item_hir| {\n+                            let parent_hir = self.cx.tcx.hir().get_parent_item(item_hir);\n+                            self.cx.tcx.hir().find(parent_hir)\n+                        });\n+                    let item = match item_parent {\n+                        Some(hir::Node::Item(hir::Item {\n+                            kind: hir::ItemKind::Impl { of_trait: Some(_), self_ty, .. },\n+                            ..\n+                        })) => {\n+                            // trait impl\n+                            cx.tcx\n+                                .associated_item_def_ids(self_ty.hir_id.owner)\n+                                .iter()\n+                                .map(|child| {\n+                                    let associated_item = cx.tcx.associated_item(*child);\n+                                    associated_item\n+                                })\n+                                .find(|child| child.ident.name == item_name)\n+                        }\n+                        _ => {\n+                            // struct/enum/etc. impl\n+                            cx.tcx\n+                                .inherent_impls(did)\n+                                .iter()\n+                                .flat_map(|imp| cx.tcx.associated_items(*imp).in_definition_order())\n+                                .find(|item| item.ident.name == item_name)\n+                        }\n+                    };\n+\n                     if let Some(item) = item {\n                         let out = match item.kind {\n                             ty::AssocKind::Fn if ns == ValueNS => \"method\",\n                             ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n+                            ty::AssocKind::Type if ns == ValueNS => \"associatedtype\",\n                             _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n                         if extra_fragment.is_some() {\n@@ -484,8 +514,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n                 match kind {\n                     Some(ns @ ValueNS) => {\n-                        match self.resolve(path_str, ns, &current_item, base_node, &extra_fragment)\n-                        {\n+                        match self.resolve(\n+                            path_str,\n+                            ns,\n+                            &current_item,\n+                            base_node,\n+                            &extra_fragment,\n+                            None,\n+                        ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n                                 resolution_failure(cx, &item, path_str, &dox, link_range);\n@@ -501,8 +537,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         }\n                     }\n                     Some(ns @ TypeNS) => {\n-                        match self.resolve(path_str, ns, &current_item, base_node, &extra_fragment)\n-                        {\n+                        match self.resolve(\n+                            path_str,\n+                            ns,\n+                            &current_item,\n+                            base_node,\n+                            &extra_fragment,\n+                            None,\n+                        ) {\n                             Ok(res) => res,\n                             Err(ErrorKind::ResolutionFailure) => {\n                                 resolution_failure(cx, &item, path_str, &dox, link_range);\n@@ -526,6 +568,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n+                                None,\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);\n@@ -539,6 +582,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 &current_item,\n                                 base_node,\n                                 &extra_fragment,\n+                                Some(&item),\n                             ) {\n                                 Err(ErrorKind::AnchorFailure(msg)) => {\n                                     anchor_failure(cx, &item, &ori_link, &dox, link_range, msg);"}, {"sha": "ec6fccd34c30003a7ebf4e7a9dfe4e31f5b76e1b", "filename": "src/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdarch?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -1 +1 @@\n-Subproject commit d10eefc62284c40c5a95a2eed19fc1f414a5364d\n+Subproject commit ec6fccd34c30003a7ebf4e7a9dfe4e31f5b76e1b"}, {"sha": "fab8406d525e5f83ca18ccd341b735ae2ad05d08", "filename": "src/test/rustdoc/intra-link-trait-impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-trait-impl.rs?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -0,0 +1,35 @@\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+pub struct MyStruct;\n+\n+impl MyTrait for MyStruct {\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedtype.AssoType'\n+\n+    /// [`AssoType`]\n+    ///\n+    /// [`AssoType`]: MyStruct::AssoType\n+    type AssoType = u32;\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#associatedconstant.ASSO_CONST'\n+\n+    /// [`ASSO_CONST`]\n+    ///\n+    /// [`ASSO_CONST`]: MyStruct::ASSO_CONST\n+    const ASSO_CONST: i32 = 10;\n+\n+// @has foo/struct.MyStruct.html '//a/@href' '../foo/struct.MyStruct.html#method.trait_fn'\n+\n+    /// [`trait_fn`]\n+    ///\n+    /// [`trait_fn`]: MyStruct::trait_fn\n+    fn trait_fn() { }\n+}\n+\n+pub trait MyTrait {\n+    type AssoType;\n+    const ASSO_CONST: i32 = 1;\n+    fn trait_fn();\n+}"}, {"sha": "2210a8ff8e6562274bc0b6174246fdb5039e702c", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/027149919e36ce5645ca5d02d55b97ef52eb55ba/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/027149919e36ce5645ca5d02d55b97ef52eb55ba/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=027149919e36ce5645ca5d02d55b97ef52eb55ba", "patch": "@@ -36,4 +36,6 @@ label = \"ICEBreaker-Cleanup-Crew\"\n \n [prioritize]\n label = \"I-prioritize\"\n+prioritize_on = [\"regression-from-stable-to-stable\", \"regression-from-stable-to-beta\", \"regression-from-stable-to-nightly\"]\n+priority_labels = \"P-*\"\n zulip_stream = 227806"}]}