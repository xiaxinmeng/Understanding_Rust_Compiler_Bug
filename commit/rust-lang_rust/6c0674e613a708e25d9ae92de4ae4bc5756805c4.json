{"sha": "6c0674e613a708e25d9ae92de4ae4bc5756805c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDY3NGU2MTNhNzA4ZTI1ZDlhZTkyZGU0YWU0YmM1NzU2ODA1YzQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-06T12:17:53Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:52Z"}, "message": "trans: Remove the foreign module.", "tree": {"sha": "37428d4c59bf9344e88c6b0176641bf466d82449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37428d4c59bf9344e88c6b0176641bf466d82449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0674e613a708e25d9ae92de4ae4bc5756805c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0674e613a708e25d9ae92de4ae4bc5756805c4", "html_url": "https://github.com/rust-lang/rust/commit/6c0674e613a708e25d9ae92de4ae4bc5756805c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0674e613a708e25d9ae92de4ae4bc5756805c4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec63821d04872f9190c3d8606d0a58428005222", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec63821d04872f9190c3d8606d0a58428005222", "html_url": "https://github.com/rust-lang/rust/commit/aec63821d04872f9190c3d8606d0a58428005222"}], "stats": {"total": 232, "additions": 97, "deletions": 135}, "files": [{"sha": "eea53eabec6a4089154ba8b615e33d5b37f56e40", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=6c0674e613a708e25d9ae92de4ae4bc5756805c4", "patch": "@@ -76,7 +76,6 @@ use trans::datum;\n use trans::debuginfo::{self, DebugLoc, ToDebugLoc};\n use trans::declare;\n use trans::expr;\n-use trans::foreign;\n use trans::glue;\n use trans::intrinsic;\n use trans::machine;\n@@ -2311,7 +2310,7 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n                 return;\n             }\n             for fi in &m.items {\n-                let lname = foreign::link_name(fi.name, &fi.attrs).to_string();\n+                let lname = imported_name(fi.name, &fi.attrs).to_string();\n                 ccx.item_symbols().borrow_mut().insert(fi.id, lname);\n             }\n         }\n@@ -2434,6 +2433,16 @@ pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n+pub fn imported_name(name: ast::Name, attrs: &[ast::Attribute]) -> InternedString {\n+    match attr::first_attr_value_str_by_name(attrs, \"link_name\") {\n+        Some(ln) => ln.clone(),\n+        None => match weak_lang_items::link_name(attrs) {\n+            Some(name) => name,\n+            None => name.as_str(),\n+        }\n+    }\n+}\n+\n fn contains_null(s: &str) -> bool {\n     s.bytes().any(|b| b == 0)\n }"}, {"sha": "578d495e9b8e67bcc5a4467386199dfc2ab560a3", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=6c0674e613a708e25d9ae92de4ae4bc5756805c4", "patch": "@@ -45,7 +45,6 @@ use trans::declare;\n use trans::expr;\n use trans::glue;\n use trans::inline;\n-use trans::foreign;\n use trans::intrinsic;\n use trans::machine::{llalign_of_min, llsize_of_store};\n use trans::meth;\n@@ -529,7 +528,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         Some(hir_map::NodeForeignItem(&hir::ForeignItem {\n             ref attrs, name, node: hir::ForeignItemFn(..), ..\n         })) => {\n-            (foreign::link_name(name, attrs).to_string(), &attrs[..], None)\n+            (imported_name(name, attrs).to_string(), &attrs[..], None)\n         }\n \n         None => {"}, {"sha": "5969fa6423f243b870583edc87dedb1dce526725", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 59, "deletions": 6, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=6c0674e613a708e25d9ae92de4ae4bc5756805c4", "patch": "@@ -19,7 +19,7 @@ use middle::def::Def;\n use middle::def_id::DefId;\n use rustc::front::map as hir_map;\n use trans::{abi, adt, closure, debuginfo, expr, inline, machine};\n-use trans::base::{self, exported_name, push_ctxt};\n+use trans::base::{self, exported_name, imported_name, push_ctxt};\n use trans::callee::Callee;\n use trans::collector::{self, TransItem};\n use trans::common::{type_is_sized, C_nil, const_get_elt};\n@@ -28,7 +28,6 @@ use trans::common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, Vari\n use trans::common::{type_is_fat_ptr, Field, C_vector, C_array, C_null};\n use trans::datum::{Datum, Lvalue};\n use trans::declare;\n-use trans::foreign;\n use trans::monomorphize::{self, Instance};\n use trans::type_::Type;\n use trans::type_of;\n@@ -1029,6 +1028,7 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n     }\n \n     let g = if let Some(id) = ccx.tcx().map.as_local_node_id(def_id) {\n+        let llty = type_of::type_of(ccx, ty);\n         match ccx.tcx().map.get(id) {\n             hir_map::NodeItem(&hir::Item {\n                 ref attrs, span, node: hir::ItemStatic(..), ..\n@@ -1042,7 +1042,6 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n \n                 // Create the global before evaluating the initializer;\n                 // this is necessary to allow recursive statics.\n-                let llty = type_of::type_of(ccx, ty);\n                 let g = declare::define_global(ccx, &sym, llty).unwrap_or_else(|| {\n                     ccx.sess().span_fatal(span,\n                         &format!(\"symbol `{}` is already defined\", sym))\n@@ -1052,9 +1051,63 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n                 g\n             }\n \n-            hir_map::NodeForeignItem(ni @ &hir::ForeignItem {\n-                node: hir::ForeignItemStatic(..), ..\n-            }) => foreign::register_static(ccx, ni),\n+            hir_map::NodeForeignItem(&hir::ForeignItem {\n+                ref attrs, name, span, node: hir::ForeignItemStatic(..), ..\n+            }) => {\n+                let ident = imported_name(name, attrs);\n+                let g = if let Some(name) =\n+                        attr::first_attr_value_str_by_name(&attrs, \"linkage\") {\n+                    // If this is a static with a linkage specified, then we need to handle\n+                    // it a little specially. The typesystem prevents things like &T and\n+                    // extern \"C\" fn() from being non-null, so we can't just declare a\n+                    // static and call it a day. Some linkages (like weak) will make it such\n+                    // that the static actually has a null value.\n+                    let linkage = match base::llvm_linkage_by_name(&name) {\n+                        Some(linkage) => linkage,\n+                        None => {\n+                            ccx.sess().span_fatal(span, \"invalid linkage specified\");\n+                        }\n+                    };\n+                    let llty2 = match ty.sty {\n+                        ty::TyRawPtr(ref mt) => type_of::type_of(ccx, mt.ty),\n+                        _ => {\n+                            ccx.sess().span_fatal(span, \"must have type `*const T` or `*mut T`\");\n+                        }\n+                    };\n+                    unsafe {\n+                        // Declare a symbol `foo` with the desired linkage.\n+                        let g1 = declare::declare_global(ccx, &ident, llty2);\n+                        llvm::SetLinkage(g1, linkage);\n+\n+                        // Declare an internal global `extern_with_linkage_foo` which\n+                        // is initialized with the address of `foo`.  If `foo` is\n+                        // discarded during linking (for example, if `foo` has weak\n+                        // linkage and there are no definitions), then\n+                        // `extern_with_linkage_foo` will instead be initialized to\n+                        // zero.\n+                        let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n+                        real_name.push_str(&ident);\n+                        let g2 = declare::define_global(ccx, &real_name, llty).unwrap_or_else(||{\n+                            ccx.sess().span_fatal(span,\n+                                &format!(\"symbol `{}` is already defined\", ident))\n+                        });\n+                        llvm::SetLinkage(g2, llvm::InternalLinkage);\n+                        llvm::LLVMSetInitializer(g2, g1);\n+                        g2\n+                    }\n+                } else {\n+                    // Generate an external declaration.\n+                    declare::declare_global(ccx, &ident, llty)\n+                };\n+\n+                for attr in attrs {\n+                    if attr.check_name(\"thread_local\") {\n+                        llvm::set_thread_local(g, true);\n+                    }\n+                }\n+\n+                g\n+            }\n \n             item => unreachable!(\"get_static: expected static, found {:?}\", item)\n         }"}, {"sha": "92a50ac3181fd0487585fb0380c3619539a5b8af", "filename": "src/librustc_trans/trans/foreign.rs", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/aec63821d04872f9190c3d8606d0a58428005222/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec63821d04872f9190c3d8606d0a58428005222/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=aec63821d04872f9190c3d8606d0a58428005222", "patch": "@@ -1,100 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use llvm::{ValueRef};\n-use llvm;\n-use middle::weak_lang_items;\n-use trans::base::{llvm_linkage_by_name};\n-use trans::common::*;\n-use trans::declare;\n-use trans::type_of;\n-use middle::ty;\n-\n-use syntax::attr;\n-use syntax::parse::token::{InternedString};\n-use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n-\n-use rustc_front::hir;\n-\n-///////////////////////////////////////////////////////////////////////////\n-// Calls to external functions\n-\n-pub fn register_static(ccx: &CrateContext,\n-                       foreign_item: &hir::ForeignItem) -> ValueRef {\n-    let ty = ccx.tcx().node_id_to_type(foreign_item.id);\n-    let llty = type_of::type_of(ccx, ty);\n-\n-    let ident = link_name(foreign_item.name, &foreign_item.attrs);\n-    let c = match attr::first_attr_value_str_by_name(&foreign_item.attrs,\n-                                                     \"linkage\") {\n-        // If this is a static with a linkage specified, then we need to handle\n-        // it a little specially. The typesystem prevents things like &T and\n-        // extern \"C\" fn() from being non-null, so we can't just declare a\n-        // static and call it a day. Some linkages (like weak) will make it such\n-        // that the static actually has a null value.\n-        Some(name) => {\n-            let linkage = match llvm_linkage_by_name(&name) {\n-                Some(linkage) => linkage,\n-                None => {\n-                    ccx.sess().span_fatal(foreign_item.span,\n-                                          \"invalid linkage specified\");\n-                }\n-            };\n-            let llty2 = match ty.sty {\n-                ty::TyRawPtr(ref mt) => type_of::type_of(ccx, mt.ty),\n-                _ => {\n-                    ccx.sess().span_fatal(foreign_item.span,\n-                                          \"must have type `*T` or `*mut T`\");\n-                }\n-            };\n-            unsafe {\n-                // Declare a symbol `foo` with the desired linkage.\n-                let g1 = declare::declare_global(ccx, &ident[..], llty2);\n-                llvm::SetLinkage(g1, linkage);\n-\n-                // Declare an internal global `extern_with_linkage_foo` which\n-                // is initialized with the address of `foo`.  If `foo` is\n-                // discarded during linking (for example, if `foo` has weak\n-                // linkage and there are no definitions), then\n-                // `extern_with_linkage_foo` will instead be initialized to\n-                // zero.\n-                let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n-                real_name.push_str(&ident);\n-                let g2 = declare::define_global(ccx, &real_name[..], llty).unwrap_or_else(||{\n-                    ccx.sess().span_fatal(foreign_item.span,\n-                                          &format!(\"symbol `{}` is already defined\", ident))\n-                });\n-                llvm::SetLinkage(g2, llvm::InternalLinkage);\n-                llvm::LLVMSetInitializer(g2, g1);\n-                g2\n-            }\n-        }\n-        None => // Generate an external declaration.\n-            declare::declare_global(ccx, &ident[..], llty),\n-    }\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// General ABI Support\n-//\n-// This code is kind of a confused mess and needs to be reworked given\n-// the massive simplifications that have occurred.\n-\n-pub fn link_name(name: ast::Name, attrs: &[ast::Attribute]) -> InternedString {\n-    match attr::first_attr_value_str_by_name(attrs, \"link_name\") {\n-        Some(ln) => ln.clone(),\n-        None => match weak_lang_items::link_name(attrs) {\n-            Some(name) => name,\n-            None => name.as_str(),\n-        }\n-    }\n-}"}, {"sha": "c5ab0d4e74421b2fca47f8cb07d4e6a33e6ed495", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=6c0674e613a708e25d9ae92de4ae4bc5756805c4", "patch": "@@ -49,7 +49,6 @@ mod debuginfo;\n mod declare;\n mod disr;\n mod expr;\n-mod foreign;\n mod glue;\n mod inline;\n mod intrinsic;"}, {"sha": "3c0e545e19335d1d7b2e27b9f2f40c15c5ed47cc", "filename": "src/test/compile-fail/dupe-symbols-8.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aec63821d04872f9190c3d8606d0a58428005222/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec63821d04872f9190c3d8606d0a58428005222/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-8.rs?ref=aec63821d04872f9190c3d8606d0a58428005222", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-// error-pattern:already defined\n-\n-\n-#![allow(warnings)]\n-\n-fn main() {\n-    {\n-        extern fn fail() {}\n-    }\n-    {\n-        extern fn fail() {}\n-    }\n-}"}, {"sha": "2a127d937eaaafb39d7e2d4fdf7eca760bf36bb1", "filename": "src/test/compile-fail/linkage2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Ftest%2Fcompile-fail%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Ftest%2Fcompile-fail%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage2.rs?ref=6c0674e613a708e25d9ae92de4ae4bc5756805c4", "patch": "@@ -12,7 +12,7 @@\n \n extern {\n     #[linkage = \"extern_weak\"] static foo: i32;\n-    //~^ ERROR: must have type `*T`\n+    //~^ ERROR: must have type `*const T` or `*mut T`\n }\n \n fn main() {"}, {"sha": "81563f40e94bb2b94fe3c8760dd9afa1337ec503", "filename": "src/test/run-pass/unique-ffi-symbols.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Ftest%2Frun-pass%2Funique-ffi-symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0674e613a708e25d9ae92de4ae4bc5756805c4/src%2Ftest%2Frun-pass%2Funique-ffi-symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-ffi-symbols.rs?ref=6c0674e613a708e25d9ae92de4ae4bc5756805c4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We used to have a __rust_abi shim that resulted in duplicated symbols\n+// whenever the item path wasn't enough to disambiguate between them.\n+fn main() {\n+    let a = {\n+        extern fn good() -> i32 { return 0; }\n+        good as extern fn() -> i32\n+    };\n+    let b = {\n+        extern fn good() -> i32 { return 5; }\n+        good as extern fn() -> i32\n+    };\n+\n+    assert!(a != b);\n+    assert_eq!((a(), b()), (0, 5));\n+}"}]}