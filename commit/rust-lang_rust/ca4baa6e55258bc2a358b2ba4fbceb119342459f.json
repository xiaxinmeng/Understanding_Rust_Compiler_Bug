{"sha": "ca4baa6e55258bc2a358b2ba4fbceb119342459f", "node_id": "C_kwDOAAsO6NoAKGNhNGJhYTZlNTUyNThiYzJhMzU4YjJiYTRmYmNlYjExOTM0MjQ1OWY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T13:19:11Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T13:20:27Z"}, "message": "Use `FileAstId<ast::Adt>` in nameres where appropriate instead", "tree": {"sha": "84153402f8c7161db280bbadde339c64c1e60acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84153402f8c7161db280bbadde339c64c1e60acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca4baa6e55258bc2a358b2ba4fbceb119342459f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4baa6e55258bc2a358b2ba4fbceb119342459f", "html_url": "https://github.com/rust-lang/rust/commit/ca4baa6e55258bc2a358b2ba4fbceb119342459f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca4baa6e55258bc2a358b2ba4fbceb119342459f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08adce61a1874a725f2682c887392d5a325cab01", "url": "https://api.github.com/repos/rust-lang/rust/commits/08adce61a1874a725f2682c887392d5a325cab01", "html_url": "https://github.com/rust-lang/rust/commit/08adce61a1874a725f2682c887392d5a325cab01"}], "stats": {"total": 163, "additions": 98, "deletions": 65}, "files": [{"sha": "c6d401a6d654bf11e34cfc032f1a356e0d6e4e1d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -649,8 +649,12 @@ impl Module {\n                             let node = ast_id.to_node(db.upcast());\n                             ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n-                        MacroCallKind::Derive { ast_id, .. }\n-                        | MacroCallKind::Attr { ast_id, .. } => {\n+                        MacroCallKind::Derive { ast_id, .. } => {\n+                            // FIXME: point to the attribute instead, this creates very large diagnostics\n+                            let node = ast_id.to_node(db.upcast());\n+                            ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n+                        }\n+                        MacroCallKind::Attr { ast_id, .. } => {\n                             // FIXME: point to the attribute instead, this creates very large diagnostics\n                             let node = ast_id.to_node(db.upcast());\n                             ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))"}, {"sha": "444fb4ea54c51f6f606693f72e7259823ebcd8c4", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -18,7 +18,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n     algo::skip_trivia_token,\n-    ast::{self, HasAttrs, HasGenericParams, HasLoopBody},\n+    ast::{self, HasAttrs as _, HasGenericParams, HasLoopBody},\n     match_ast, AstNode, AstToken, Direction, SyntaxElement, SyntaxNode, SyntaxNodePtr, SyntaxToken,\n     TextSize, T,\n };\n@@ -27,9 +27,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n-    HirFileId, Impl, InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path,\n-    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasAttrs as _,\n+    HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef,\n+    Name, Path, ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -486,7 +486,7 @@ impl<'db> SemanticsImpl<'db> {\n         let adt = InFile::new(file_id, &adt);\n         let src = InFile::new(file_id, attr.clone());\n         self.with_ctx(|ctx| {\n-            let res = ctx.attr_to_derive_macro_call(adt, src)?;\n+            let (_, res) = ctx.attr_to_derive_macro_call(adt, src)?;\n             Some(res.to_vec())\n         })\n     }\n@@ -917,15 +917,14 @@ impl<'db> SemanticsImpl<'db> {\n         let tt = derive.token_tree()?;\n         let file = self.find_file(derive.syntax());\n         let adt = derive.syntax().parent().and_then(ast::Adt::cast)?;\n-\n+        let adt_def = ToDef::to_def(self, file.with_value(adt.clone()))?;\n         let res = self.with_ctx(|ctx| {\n-            let attr_def = ctx.attr_to_def(file.with_value(derive.clone()))?;\n-            let derives = ctx.attr_to_derive_macro_call(\n+            let (attr_id, derives) = ctx.attr_to_derive_macro_call(\n                 file.with_value(&adt),\n                 file.with_value(derive.clone()),\n             )?;\n-\n-            let mut derive_paths = attr_def.parse_path_comma_token_tree()?;\n+            let attrs = adt_def.attrs(self.db);\n+            let mut derive_paths = attrs[attr_id].parse_path_comma_token_tree()?;\n \n             let derive_idx = tt\n                 .syntax()\n@@ -1225,7 +1224,6 @@ to_def_impls![\n     (crate::Local, ast::SelfParam, self_param_to_def),\n     (crate::Label, ast::Label, label_to_def),\n     (crate::Adt, ast::Adt, adt_to_def),\n-    (crate::Attr, ast::Attr, attr_to_def),\n ];\n \n fn find_root(node: &SyntaxNode) -> SyntaxNode {"}, {"sha": "f9c6564d01f201c00ea28af6831e96617877977c", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -87,6 +87,7 @@\n \n use base_db::FileId;\n use hir_def::{\n+    attr::AttrId,\n     child_by_source::ChildBySource,\n     dyn_map::DynMap,\n     expr::{LabelId, PatId},\n@@ -210,19 +211,6 @@ impl SourceToDefCtx<'_, '_> {\n             ast::Adt::Union(it) => self.union_to_def(InFile::new(file_id, it)).map(AdtId::UnionId),\n         }\n     }\n-    pub(super) fn attr_to_def(\n-        &mut self,\n-        InFile { file_id, value }: InFile<ast::Attr>,\n-    ) -> Option<crate::Attr> {\n-        // FIXME: Use dynmap?\n-        let adt = value.syntax().parent().and_then(ast::Adt::cast)?;\n-        let attr_pos = ast::HasAttrs::attrs(&adt).position(|it| it == value)?;\n-        let attrs = {\n-            let def = self.adt_to_def(InFile::new(file_id, adt))?;\n-            self.db.attrs(def.into())\n-        };\n-        attrs.get(attr_pos).cloned()\n-    }\n     pub(super) fn bind_pat_to_def(\n         &mut self,\n         src: InFile<ast::IdentPat>,\n@@ -254,16 +242,16 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn item_to_macro_call(&mut self, src: InFile<ast::Item>) -> Option<MacroCallId> {\n         let map = self.dyn_map(src.as_ref())?;\n-        map[keys::ATTR_MACRO].get(&src).copied()\n+        map[keys::ATTR_MACRO_CALL].get(&src).copied()\n     }\n \n     pub(super) fn attr_to_derive_macro_call(\n         &mut self,\n         item: InFile<&ast::Adt>,\n         src: InFile<ast::Attr>,\n-    ) -> Option<&[Option<MacroCallId>]> {\n+    ) -> Option<(AttrId, &[Option<MacroCallId>])> {\n         let map = self.dyn_map(item)?;\n-        map[keys::DERIVE_MACRO].get(&src).map(AsRef::as_ref)\n+        map[keys::DERIVE_MACRO_CALL].get(&src).map(|(id, ids)| (*id, &**ids))\n     }\n \n     fn to_def<Ast: AstNode + 'static, ID: Copy + 'static>(\n@@ -328,7 +316,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn macro_to_def(&mut self, src: InFile<ast::Macro>) -> Option<MacroDefId> {\n-        let makro = self.dyn_map(src.as_ref()).and_then(|it| it[keys::MACRO].get(&src).copied());\n+        let makro =\n+            self.dyn_map(src.as_ref()).and_then(|it| it[keys::MACRO_CALL].get(&src).copied());\n         if let res @ Some(_) = makro {\n             return res;\n         }"}, {"sha": "d314b7fc0155f427d09591aeabe6e12b225b5240", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -6,7 +6,7 @@\n \n use either::Either;\n use hir_expand::HirFileId;\n-use syntax::ast::HasAttrs;\n+use syntax::ast::HasDocComments;\n \n use crate::{\n     db::DefDatabase,\n@@ -110,7 +110,7 @@ impl ChildBySource for ItemScope {\n                     // FIXME: Do we need to add proc-macros into a PROCMACRO dynmap here?\n                     Either::Right(_fn) => return,\n                 };\n-                res[keys::MACRO].insert(src, makro);\n+                res[keys::MACRO_CALL].insert(src, makro);\n             }\n         });\n         self.unnamed_consts().for_each(|konst| {\n@@ -120,13 +120,16 @@ impl ChildBySource for ItemScope {\n         self.impls().for_each(|imp| add_impl(db, file_id, res, imp));\n         self.attr_macro_invocs().for_each(|(ast_id, call_id)| {\n             let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n-            res[keys::ATTR_MACRO].insert(item, call_id);\n+            res[keys::ATTR_MACRO_CALL].insert(item, call_id);\n         });\n         self.derive_macro_invocs().for_each(|(ast_id, calls)| {\n-            let item = ast_id.to_node(db.upcast());\n+            let adt = ast_id.to_node(db.upcast());\n             for (attr_id, calls) in calls {\n-                if let Some(attr) = item.attrs().nth(attr_id.ast_index as usize) {\n-                    res[keys::DERIVE_MACRO].insert(ast_id.with_value(attr), calls.into());\n+                if let Some(Either::Right(attr)) =\n+                    adt.doc_comments_and_attrs().nth(attr_id.ast_index as usize)\n+                {\n+                    res[keys::DERIVE_MACRO_CALL]\n+                        .insert(ast_id.with_value(attr), (attr_id, calls.into()));\n                 }\n             }\n         });"}, {"sha": "258d1e0f6c5191a5c17cd97b5d3ef3ef31943344", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -67,7 +67,7 @@ pub struct ItemScope {\n     /// The derive macro invocations in this scope, keyed by the owner item over the actual derive attributes\n     /// paired with the derive macro invocations for the specific attribute.\n     derive_macros:\n-        FxHashMap<AstId<ast::Item>, SmallVec<[(AttrId, SmallVec<[Option<MacroCallId>; 1]>); 1]>>,\n+        FxHashMap<AstId<ast::Adt>, SmallVec<[(AttrId, SmallVec<[Option<MacroCallId>; 1]>); 1]>>,\n }\n \n pub(crate) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {\n@@ -204,12 +204,12 @@ impl ItemScope {\n \n     pub(crate) fn set_derive_macro_invoc(\n         &mut self,\n-        item: AstId<ast::Item>,\n+        adt: AstId<ast::Adt>,\n         call: MacroCallId,\n         attr_id: AttrId,\n         idx: usize,\n     ) {\n-        if let Some(derives) = self.derive_macros.get_mut(&item) {\n+        if let Some(derives) = self.derive_macros.get_mut(&adt) {\n             if let Some((_, invocs)) = derives.iter_mut().find(|&&mut (id, _)| id == attr_id) {\n                 invocs[idx] = Some(call);\n             }\n@@ -221,17 +221,17 @@ impl ItemScope {\n     /// independent of their indices.\n     pub(crate) fn init_derive_attribute(\n         &mut self,\n-        item: AstId<ast::Item>,\n+        adt: AstId<ast::Adt>,\n         attr_id: AttrId,\n         len: usize,\n     ) {\n-        self.derive_macros.entry(item).or_default().push((attr_id, smallvec![None; len]));\n+        self.derive_macros.entry(adt).or_default().push((attr_id, smallvec![None; len]));\n     }\n \n     pub(crate) fn derive_macro_invocs(\n         &self,\n     ) -> impl Iterator<\n-        Item = (AstId<ast::Item>, impl Iterator<Item = (AttrId, &[Option<MacroCallId>])>),\n+        Item = (AstId<ast::Adt>, impl Iterator<Item = (AttrId, &[Option<MacroCallId>])>),\n     > + '_ {\n         self.derive_macros\n             .iter()"}, {"sha": "3a9cf6eb81200b0c0d96fac62f68f9caade0e024", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -7,6 +7,7 @@ use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr};\n \n use crate::{\n+    attr::AttrId,\n     dyn_map::{DynMap, Policy},\n     ConstId, ConstParamId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, LifetimeParamId,\n     StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n@@ -31,9 +32,9 @@ pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n pub const LIFETIME_PARAM: Key<ast::LifetimeParam, LifetimeParamId> = Key::new();\n pub const CONST_PARAM: Key<ast::ConstParam, ConstParamId> = Key::new();\n \n-pub const MACRO: Key<ast::Macro, MacroDefId> = Key::new();\n-pub const ATTR_MACRO: Key<ast::Item, MacroCallId> = Key::new();\n-pub const DERIVE_MACRO: Key<ast::Attr, Box<[Option<MacroCallId>]>> = Key::new();\n+pub const MACRO_CALL: Key<ast::Macro, MacroDefId> = Key::new();\n+pub const ATTR_MACRO_CALL: Key<ast::Item, MacroCallId> = Key::new();\n+pub const DERIVE_MACRO_CALL: Key<ast::Attr, (AttrId, Box<[Option<MacroCallId>]>)> = Key::new();\n \n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object."}, {"sha": "c38b498b9c6b4bf276e48281145790c424a08b1e", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -751,7 +751,7 @@ fn macro_call_as_call_id(\n }\n \n fn derive_macro_as_call_id(\n-    item_attr: &AstIdWithPath<ast::Item>,\n+    item_attr: &AstIdWithPath<ast::Adt>,\n     derive_attr: AttrId,\n     db: &dyn db::DefDatabase,\n     krate: CrateId,"}, {"sha": "dc75dc4d91a7e3114954f84b2d130727c16ebb96", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -8,6 +8,7 @@ use std::iter;\n use base_db::{CrateId, Edition, FileId, ProcMacroId};\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::{\n+    ast_id_map::FileAstId,\n     builtin_attr_macro::find_builtin_attr,\n     builtin_derive_macro::find_builtin_derive,\n     builtin_fn_macro::find_builtin_macro,\n@@ -30,8 +31,8 @@ use crate::{\n     intern::Interned,\n     item_scope::{ImportType, PerNsGlobImports},\n     item_tree::{\n-        self, Fields, FileItemTreeId, ImportKind, ItemTree, ItemTreeId, MacroCall, MacroDef,\n-        MacroRules, Mod, ModItem, ModKind, TreeId,\n+        self, Fields, FileItemTreeId, ImportKind, ItemTree, ItemTreeId, ItemTreeNode, MacroCall,\n+        MacroDef, MacroRules, Mod, ModItem, ModKind, TreeId,\n     },\n     macro_call_as_call_id,\n     nameres::{\n@@ -217,7 +218,7 @@ struct MacroDirective {\n #[derive(Clone, Debug, Eq, PartialEq)]\n enum MacroDirectiveKind {\n     FnLike { ast_id: AstIdWithPath<ast::MacroCall>, expand_to: ExpandTo },\n-    Derive { ast_id: AstIdWithPath<ast::Item>, derive_attr: AttrId, derive_pos: usize },\n+    Derive { ast_id: AstIdWithPath<ast::Adt>, derive_attr: AttrId, derive_pos: usize },\n     Attr { ast_id: AstIdWithPath<ast::Item>, attr: Attr, mod_item: ModItem, tree: TreeId },\n }\n \n@@ -1129,8 +1130,11 @@ impl DefCollector<'_> {\n                     ) {\n                         // Resolved to `#[derive]`\n \n-                        match mod_item {\n-                            ModItem::Struct(_) | ModItem::Union(_) | ModItem::Enum(_) => (),\n+                        let item_tree = tree.item_tree(self.db);\n+                        let ast_adt_id: FileAstId<ast::Adt> = match *mod_item {\n+                            ModItem::Struct(strukt) => item_tree[strukt].ast_id().upcast(),\n+                            ModItem::Union(union) => item_tree[union].ast_id().upcast(),\n+                            ModItem::Enum(enum_) => item_tree[enum_].ast_id().upcast(),\n                             _ => {\n                                 let diag = DefDiagnostic::invalid_derive_target(\n                                     directive.module_id,\n@@ -1140,7 +1144,8 @@ impl DefCollector<'_> {\n                                 self.def_map.diagnostics.push(diag);\n                                 return recollect_without(self);\n                             }\n-                        }\n+                        };\n+                        let ast_id = ast_id.with_value(ast_adt_id);\n \n                         match attr.parse_path_comma_token_tree() {\n                             Some(derive_macros) => {\n@@ -1274,7 +1279,7 @@ impl DefCollector<'_> {\n                 if let Some(def) = def_map.exported_proc_macros.get(&loc.def) {\n                     if let ProcMacroKind::CustomDerive { helpers } = &def.kind {\n                         self.derive_helpers_in_scope\n-                            .entry(*ast_id)\n+                            .entry(ast_id.map(|it| it.upcast()))\n                             .or_default()\n                             .extend(helpers.iter().cloned());\n                     }"}, {"sha": "60b8601bdd6c87000cc7e87f659e80b1ab2a65bc", "filename": "crates/hir_def/src/nameres/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -33,7 +33,7 @@ pub enum DefDiagnosticKind {\n \n     InvalidDeriveTarget { ast: AstId<ast::Item>, id: u32 },\n \n-    MalformedDerive { ast: AstId<ast::Item>, id: u32 },\n+    MalformedDerive { ast: AstId<ast::Adt>, id: u32 },\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -121,7 +121,7 @@ impl DefDiagnostic {\n \n     pub(super) fn malformed_derive(\n         container: LocalModuleId,\n-        ast: AstId<ast::Item>,\n+        ast: AstId<ast::Adt>,\n         id: AttrId,\n     ) -> Self {\n         Self {"}, {"sha": "3e2e1ba630c7334be98a5c38d577c885113f261f", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -121,7 +121,7 @@ pub enum MacroCallKind {\n         expand_to: ExpandTo,\n     },\n     Derive {\n-        ast_id: AstId<ast::Item>,\n+        ast_id: AstId<ast::Adt>,\n         derive_name: Box<str>,\n         /// Syntactical index of the invoking `#[derive]` attribute.\n         ///\n@@ -328,11 +328,10 @@ impl MacroDefId {\n impl MacroCallKind {\n     /// Returns the file containing the macro invocation.\n     fn file_id(&self) -> HirFileId {\n-        match self {\n-            MacroCallKind::FnLike { ast_id, .. } => ast_id.file_id,\n-            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n-                ast_id.file_id\n-            }\n+        match *self {\n+            MacroCallKind::FnLike { ast_id: InFile { file_id, .. }, .. }\n+            | MacroCallKind::Derive { ast_id: InFile { file_id, .. }, .. }\n+            | MacroCallKind::Attr { ast_id: InFile { file_id, .. }, .. } => file_id,\n         }\n     }\n \n@@ -341,7 +340,10 @@ impl MacroCallKind {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n             }\n-            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n+            MacroCallKind::Derive { ast_id, .. } => {\n+                ast_id.with_value(ast_id.to_node(db).syntax().clone())\n+            }\n+            MacroCallKind::Attr { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n             }\n         }\n@@ -352,9 +354,8 @@ impl MacroCallKind {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 Some(ast_id.to_node(db).token_tree()?.syntax().clone())\n             }\n-            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n-                Some(ast_id.to_node(db).syntax().clone())\n-            }\n+            MacroCallKind::Derive { ast_id, .. } => Some(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Attr { ast_id, .. } => Some(ast_id.to_node(db).syntax().clone()),\n         }\n     }\n "}, {"sha": "46c55da1f98eb6dc1c52ec8d4432b003c4fb4622", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -80,6 +80,7 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "645e6c589dde8c937dbc13cd3450a11c682ac9ef", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "37c8b566829ceb852b7442a4a626cc160e1b52bb", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "2f96a1be85cae5d50ac288844c3668e08ae5dab1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_default_library.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "6e87147e8b35d6851caf8bfa7cf8aa8c2abc2d2f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "3208770d7f1dd0b73ab8fb73b98ff7343ec81371", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "1713306dae2ac9c492f5dc3cd3bfeb8ce6e64b0c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "07c7881a1f79a14ef657c8c0306f2bbb7b6202f6", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "25bfcb6482f11358066c1e6e1eb609b399438c16", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "793f554c6379e97fea4af7168076630613fe63bd", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }\n@@ -89,7 +90,17 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"operator\">::</span><span class=\"struct\">FooCopy</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"struct declaration\">BarCopy</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment documentation\">/// This is a doc comment</span>\n+<span class=\"comment\">// This is a normal comment</span>\n+<span class=\"comment documentation\">/// This is a doc comment</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment\">// This is another normal comment</span>\n+<span class=\"comment documentation\">/// This is another doc comment</span>\n+<span class=\"comment\">// This is another normal comment</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment\">// The reason for these being here is to test AttrIds</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "2e9ad144f19a420634b1c1334905cfeda1209958", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "e0287f11858beeecaced66bdf87fa481e8062be1", "filename": "crates/ide/src/syntax_highlighting/test_data/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -28,6 +28,7 @@\n .numeric_literal    { color: #BFEBBF; }\n .bool_literal       { color: #BFE6EB; }\n .macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n .module             { color: #AFD8AF; }\n .value_param        { color: #DCDCCC; }\n .variable           { color: #DCDCCC; }"}, {"sha": "c9c23318f59ff28cbf18001d0ea0aa45ae2cf75b", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4baa6e55258bc2a358b2ba4fbceb119342459f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=ca4baa6e55258bc2a358b2ba4fbceb119342459f", "patch": "@@ -62,7 +62,17 @@ impl Foo {\n }\n \n use self::FooCopy::{self as BarCopy};\n+\n+#[derive(Copy)]\n+/// This is a doc comment\n+// This is a normal comment\n+/// This is a doc comment\n+#[derive(Copy)]\n+// This is another normal comment\n+/// This is another doc comment\n+// This is another normal comment\n #[derive(Copy)]\n+// The reason for these being here is to test AttrIds\n struct FooCopy {\n     x: u32,\n }"}]}