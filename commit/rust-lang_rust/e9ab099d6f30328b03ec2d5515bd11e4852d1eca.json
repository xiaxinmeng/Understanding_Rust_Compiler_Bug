{"sha": "e9ab099d6f30328b03ec2d5515bd11e4852d1eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWIwOTlkNmYzMDMyOGIwM2VjMmQ1NTE1YmQxMWU0ODUyZDFlY2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-28T08:27:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-28T08:28:30Z"}, "message": "get rid of to_ptr", "tree": {"sha": "2929bf35711740c0ded866bc7b4d7d42c703e51f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2929bf35711740c0ded866bc7b4d7d42c703e51f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ab099d6f30328b03ec2d5515bd11e4852d1eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ab099d6f30328b03ec2d5515bd11e4852d1eca", "html_url": "https://github.com/rust-lang/rust/commit/e9ab099d6f30328b03ec2d5515bd11e4852d1eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ab099d6f30328b03ec2d5515bd11e4852d1eca/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9644c16f3156025d83d3dc1262ac35d9ae89588", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9644c16f3156025d83d3dc1262ac35d9ae89588", "html_url": "https://github.com/rust-lang/rust/commit/f9644c16f3156025d83d3dc1262ac35d9ae89588"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "44a6fc5fb842ca30ed0f3e367ad4c24c978bc411", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9ab099d6f30328b03ec2d5515bd11e4852d1eca/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ab099d6f30328b03ec2d5515bd11e4852d1eca/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=e9ab099d6f30328b03ec2d5515bd11e4852d1eca", "patch": "@@ -406,22 +406,14 @@ impl<'tcx, Tag> Scalar<Tag> {\n         self.to_bits(target_size).expect(\"expected Raw bits but got a Pointer\")\n     }\n \n-    /// Do not call this method!  Use either `assert_ptr` or `force_ptr`.\n-    /// This method is intentionally private, do not make it public.\n     #[inline]\n-    fn to_ptr(self) -> InterpResult<'tcx, Pointer<Tag>> {\n+    pub fn assert_ptr(self) -> Pointer<Tag> {\n         match self {\n-            Scalar::Raw { data: 0, .. } => throw_unsup!(InvalidNullPointerUsage),\n-            Scalar::Raw { .. } => throw_unsup!(ReadBytesAsPointer),\n-            Scalar::Ptr(p) => Ok(p),\n+            Scalar::Ptr(p) => p,\n+            Scalar::Raw { .. } => bug!(\"expected a Pointer but got Raw bits\")\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn assert_ptr(self) -> Pointer<Tag> {\n-        self.to_ptr().expect(\"expected a Pointer but got Raw bits\")\n-    }\n-\n     /// Do not call this method!  Dispatch based on the type instead.\n     #[inline]\n     pub fn is_bits(self) -> bool {"}]}