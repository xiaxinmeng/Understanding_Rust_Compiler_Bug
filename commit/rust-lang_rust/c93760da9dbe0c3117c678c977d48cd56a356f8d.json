{"sha": "c93760da9dbe0c3117c678c977d48cd56a356f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Mzc2MGRhOWRiZTBjMzExN2M2NzhjOTc3ZDQ4Y2Q1NmEzNTZmOGQ=", "commit": {"author": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-29T20:07:24Z"}, "committer": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-29T20:07:24Z"}, "message": "Vector can currently panic when pushing an element or reserving space\nfor only half of the maximum size available on the architecture. This\nallows vectors to keep expanding with those two methods until the amount\nof bytes exceeds usize.", "tree": {"sha": "46d0262c58f97e8cce26fd550f7202060d1e8eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d0262c58f97e8cce26fd550f7202060d1e8eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c93760da9dbe0c3117c678c977d48cd56a356f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c93760da9dbe0c3117c678c977d48cd56a356f8d", "html_url": "https://github.com/rust-lang/rust/commit/c93760da9dbe0c3117c678c977d48cd56a356f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c93760da9dbe0c3117c678c977d48cd56a356f8d/comments", "author": null, "committer": null, "parents": [{"sha": "fa3d778626c394b3242fa161e35ccdecf055a3f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3d778626c394b3242fa161e35ccdecf055a3f1", "html_url": "https://github.com/rust-lang/rust/commit/fa3d778626c394b3242fa161e35ccdecf055a3f1"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "51ad64331e29e136d3f502d1ab0af0061eff1f1a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c93760da9dbe0c3117c678c977d48cd56a356f8d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93760da9dbe0c3117c678c977d48cd56a356f8d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c93760da9dbe0c3117c678c977d48cd56a356f8d", "patch": "@@ -306,9 +306,12 @@ impl<T> Vec<T> {\n     pub fn reserve(&mut self, additional: usize) {\n         if self.cap - self.len < additional {\n             let err_msg = \"Vec::reserve: `usize` overflow\";\n-            let new_cap = self.len.checked_add(additional).expect(err_msg)\n-                .checked_next_power_of_two().expect(err_msg);\n-            self.grow_capacity(new_cap);\n+\n+            let new_min_cap = self.len.checked_add(additional).expect(err_msg);\n+            match new_min_cap.checked_next_power_of_two() {\n+                None => self.grow_capacity(new_min_cap),\n+                Some(x) => self.grow_capacity(x),\n+            }\n         }\n     }\n \n@@ -639,8 +642,11 @@ impl<T> Vec<T> {\n         #[inline(never)]\n         fn resize<T>(vec: &mut Vec<T>) {\n             let old_size = vec.cap * mem::size_of::<T>();\n-            let size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n-            if old_size > size { panic!(\"capacity overflow\") }\n+            if old_size == std::usize::MAX { panic!(\"capacity overflow\") }\n+            let mut size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n+            if old_size > size {\n+                size = std::usize::MAX;\n+            }\n             unsafe {\n                 let ptr = alloc_or_realloc(*vec.ptr, old_size, size);\n                 if ptr.is_null() { ::alloc::oom() }"}]}