{"sha": "c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NThhMmFlMzcwNTJkYzFmMTJhYTRlNDA1NzhlYjRhZTlhY2EzYjk=", "commit": {"author": {"name": "Michael Wu", "email": "mwu.code@gmail.com", "date": "2017-04-09T06:03:31Z"}, "committer": {"name": "Michael Wu", "email": "mwu.code@gmail.com", "date": "2017-04-25T05:56:44Z"}, "message": "Add Hexagon support\n\nThis requires an updated LLVM with D31999 and D32000 to build libcore.\n\nA basic hello world builds and runs successfully on the hexagon simulator.", "tree": {"sha": "42f55627b12c2a6e08ef0e55441969634a8523f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42f55627b12c2a6e08ef0e55441969634a8523f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "html_url": "https://github.com/rust-lang/rust/commit/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/comments", "author": {"login": "michaelwu", "id": 719931, "node_id": "MDQ6VXNlcjcxOTkzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/719931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwu", "html_url": "https://github.com/michaelwu", "followers_url": "https://api.github.com/users/michaelwu/followers", "following_url": "https://api.github.com/users/michaelwu/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwu/subscriptions", "organizations_url": "https://api.github.com/users/michaelwu/orgs", "repos_url": "https://api.github.com/users/michaelwu/repos", "events_url": "https://api.github.com/users/michaelwu/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwu", "id": 719931, "node_id": "MDQ6VXNlcjcxOTkzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/719931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwu", "html_url": "https://github.com/michaelwu", "followers_url": "https://api.github.com/users/michaelwu/followers", "following_url": "https://api.github.com/users/michaelwu/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwu/subscriptions", "organizations_url": "https://api.github.com/users/michaelwu/orgs", "repos_url": "https://api.github.com/users/michaelwu/repos", "events_url": "https://api.github.com/users/michaelwu/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0777c757a6832dc5f8f218377f99960f5477311f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0777c757a6832dc5f8f218377f99960f5477311f", "html_url": "https://github.com/rust-lang/rust/commit/0777c757a6832dc5f8f218377f99960f5477311f"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "3c88ae886d6f5a3e503fb6f8b8f4da4a1be8e4dd", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "patch": "@@ -94,7 +94,7 @@ fn main() {\n \n     let optional_components =\n         [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\",\n-         \"sparc\", \"nvptx\"];\n+         \"sparc\", \"nvptx\", \"hexagon\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses."}, {"sha": "c9b3a7ff3f3aac4d1880c8610c66ef2761092d47", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "patch": "@@ -382,6 +382,12 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeNVPTXTarget,\n                  LLVMInitializeNVPTXTargetMC,\n                  LLVMInitializeNVPTXAsmPrinter);\n+    init_target!(llvm_component = \"hexagon\",\n+                 LLVMInitializeHexagonTargetInfo,\n+                 LLVMInitializeHexagonTarget,\n+                 LLVMInitializeHexagonTargetMC,\n+                 LLVMInitializeHexagonAsmPrinter,\n+                 LLVMInitializeHexagonAsmParser);\n }\n \n pub fn last_error() -> Option<String> {"}, {"sha": "a6b0eb473eb8e106b2ec731843fdcd858945d127", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "patch": "@@ -29,6 +29,7 @@ use cabi_sparc;\n use cabi_sparc64;\n use cabi_nvptx;\n use cabi_nvptx64;\n+use cabi_hexagon;\n use machine::llalign_of_min;\n use type_::Type;\n use type_of;\n@@ -896,6 +897,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n             \"sparc64\" => cabi_sparc64::compute_abi_info(ccx, self),\n             \"nvptx\" => cabi_nvptx::compute_abi_info(ccx, self),\n             \"nvptx64\" => cabi_nvptx64::compute_abi_info(ccx, self),\n+            \"hexagon\" => cabi_hexagon::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "1acda72675c317a0426697f91302a162b36fd1d4", "filename": "src/librustc_trans/cabi_hexagon.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_trans%2Fcabi_hexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_trans%2Fcabi_hexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_hexagon.rs?ref=c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use abi::{FnType, ArgType, LayoutExt};\n+use context::CrateContext;\n+\n+fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+    if ret.layout.is_aggregate() && ret.layout.size(ccx).bits() > 64 {\n+        ret.make_indirect(ccx);\n+    } else {\n+        ret.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+    if arg.layout.is_aggregate() && arg.layout.size(ccx).bits() > 64 {\n+        arg.make_indirect(ccx);\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "d5fc2ee5e25e07e141bd8edc246a6c5bf54467e9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "patch": "@@ -97,6 +97,7 @@ mod builder;\n mod cabi_aarch64;\n mod cabi_arm;\n mod cabi_asmjs;\n+mod cabi_hexagon;\n mod cabi_mips;\n mod cabi_mips64;\n mod cabi_msp430;"}, {"sha": "b938f94cda2cb3596bf1cbbb8ef248b18a54cffe", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "patch": "@@ -147,6 +147,12 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n #define SUBTARGET_SPARC\n #endif\n \n+#ifdef LLVM_COMPONENT_HEXAGON\n+#define SUBTARGET_HEXAGON SUBTARGET(Hexagon)\n+#else\n+#define SUBTARGET_HEXAGON\n+#endif\n+\n #define GEN_SUBTARGETS                                                         \\\n   SUBTARGET_X86                                                                \\\n   SUBTARGET_ARM                                                                \\\n@@ -155,7 +161,8 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n   SUBTARGET_PPC                                                                \\\n   SUBTARGET_SYSTEMZ                                                            \\\n   SUBTARGET_MSP430                                                             \\\n-  SUBTARGET_SPARC\n+  SUBTARGET_SPARC                                                              \\\n+  SUBTARGET_HEXAGON\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}]}