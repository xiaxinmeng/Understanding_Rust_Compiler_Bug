{"sha": "bfaa85b73579c10252d4f0546ce59ce04dc14752", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYWE4NWI3MzU3OWMxMDI1MmQ0ZjA1NDZjZTU5Y2UwNGRjMTQ3NTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T13:32:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T13:32:16Z"}, "message": "Detect duplicate field names in record literals and types\n\nCloses #746", "tree": {"sha": "77168ff118560be835b52a25466eb41d5bcd61ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77168ff118560be835b52a25466eb41d5bcd61ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfaa85b73579c10252d4f0546ce59ce04dc14752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfaa85b73579c10252d4f0546ce59ce04dc14752", "html_url": "https://github.com/rust-lang/rust/commit/bfaa85b73579c10252d4f0546ce59ce04dc14752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfaa85b73579c10252d4f0546ce59ce04dc14752/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c1250780d9f533762f647b52b83e25fa394778e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1250780d9f533762f647b52b83e25fa394778e", "html_url": "https://github.com/rust-lang/rust/commit/2c1250780d9f533762f647b52b83e25fa394778e"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "9691a55b8554b7c1893c8b8aa8f616ff179a0d78", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bfaa85b73579c10252d4f0546ce59ce04dc14752/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfaa85b73579c10252d4f0546ce59ce04dc14752/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=bfaa85b73579c10252d4f0546ce59ce04dc14752", "patch": "@@ -1209,7 +1209,9 @@ fn check_for_collisions(&@env e, &ast::crate c) {\n     auto v =\n         @rec(visit_item=bind check_item(e, _, _, _),\n              visit_block=bind check_block(e, _, _, _),\n-             visit_arm=bind check_arm(e, _, _, _)\n+             visit_arm=bind check_arm(e, _, _, _),\n+             visit_expr=bind check_expr(e, _, _, _),\n+             visit_ty=bind check_ty(e, _, _, _)\n              with *visit::default_visitor());\n     visit::visit_crate(c, (), visit::mk_vt(v));\n }\n@@ -1255,33 +1257,33 @@ fn mie_span(&mod_index_entry mie) -> span {\n     };\n }\n \n-fn check_item(@env e, &@ast::item i, &() x, &vt[()] v) {\n+fn check_item(&@env e, &@ast::item i, &() x, &vt[()] v) {\n     visit::visit_item(i, x, v);\n     alt (i.node) {\n         case (ast::item_fn(?f, ?ty_params)) {\n             check_fn(*e, i.span, f);\n-            ensure_unique_ivec(*e, i.span, ty_params, ident_id,\n+            ensure_unique(*e, i.span, ty_params, ident_id,\n                                \"type parameter\");\n         }\n         case (ast::item_obj(?ob, ?ty_params, _)) {\n             fn field_name(&ast::obj_field field) -> ident { ret field.ident; }\n-            ensure_unique_ivec(*e, i.span, ob.fields, field_name,\n+            ensure_unique(*e, i.span, ob.fields, field_name,\n                                \"object field\");\n             for (@ast::method m in ob.methods) {\n                 check_fn(*e, m.span, m.node.meth);\n             }\n-            ensure_unique_ivec(*e, i.span, ty_params, ident_id,\n+            ensure_unique(*e, i.span, ty_params, ident_id,\n                                \"type parameter\");\n         }\n         case (ast::item_tag(_, ?ty_params)) {\n-            ensure_unique_ivec(*e, i.span, ty_params, ident_id,\n+            ensure_unique(*e, i.span, ty_params, ident_id,\n                                \"type parameter\");\n         }\n         case (_) { }\n     }\n }\n \n-fn check_arm(@env e, &ast::arm a, &() x, &vt[()] v) {\n+fn check_arm(&@env e, &ast::arm a, &() x, &vt[()] v) {\n     visit::visit_arm(a, x, v);\n     fn walk_pat(checker ch, &@ast::pat p) {\n         alt (p.node) {\n@@ -1323,7 +1325,7 @@ fn check_arm(@env e, &ast::arm a, &() x, &vt[()] v) {\n     }\n }\n \n-fn check_block(@env e, &ast::blk b, &() x, &vt[()] v) {\n+fn check_block(&@env e, &ast::blk b, &() x, &vt[()] v) {\n     visit::visit_block(b, x, v);\n     auto values = checker(*e, \"value\");\n     auto types = checker(*e, \"type\");\n@@ -1371,7 +1373,29 @@ fn check_block(@env e, &ast::blk b, &() x, &vt[()] v) {\n \n fn check_fn(&env e, &span sp, &ast::_fn f) {\n     fn arg_name(&ast::arg a) -> ident { ret a.ident; }\n-    ensure_unique_ivec(e, sp, f.decl.inputs, arg_name, \"argument\");\n+    ensure_unique(e, sp, f.decl.inputs, arg_name, \"argument\");\n+}\n+\n+fn check_expr(&@env e, &@ast::expr ex, &() x, &vt[()] v) {\n+    alt ex.node {\n+      ast::expr_rec(?fields, _) {\n+        fn field_name(&ast::field f) -> ident { ret f.node.ident; }\n+        ensure_unique(*e, ex.span, fields, field_name, \"field name\");\n+      }\n+      _ {}\n+    }\n+    visit::visit_expr(ex, x, v);\n+}\n+\n+fn check_ty(&@env e, &@ast::ty ty, &() x, &vt[()] v) {\n+    alt ty.node {\n+      ast::ty_rec(?fields) {\n+        fn field_name(&ast::ty_field f) -> ident { ret f.node.ident; }\n+        ensure_unique(*e, ty.span, fields, field_name, \"field name\");\n+      }\n+      _ {}\n+    }\n+    visit::visit_ty(ty, x, v);\n }\n \n type checker = @rec(mutable ident[] seen, str kind, session sess);\n@@ -1398,13 +1422,6 @@ fn ensure_unique[T](&env e, &span sp, &T[] elts, fn(&T) -> ident  id,\n     for (T elt in elts) { add_name(ch, sp, id(elt)); }\n }\n \n-// FIXME: Remove me.\n-fn ensure_unique_ivec[T](&env e, &span sp, &T[] elts, fn(&T) -> ident  id,\n-                         &str kind) {\n-    auto ch = checker(e, kind);\n-    for (T elt in elts) { add_name(ch, sp, id(elt)); }\n-}\n-\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}