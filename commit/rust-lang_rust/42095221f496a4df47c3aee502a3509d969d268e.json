{"sha": "42095221f496a4df47c3aee502a3509d969d268e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMDk1MjIxZjQ5NmE0ZGY0N2MzYWVlNTAyYTM1MDlkOTY5ZDI2OGU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-11T00:43:04Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-11T04:15:04Z"}, "message": "Properly suppress derived type error messages\n\nPreviously, the typechecker suppressed many but not all errors,\nby suppressing errors where the actual type was either ty_err, or\na function type whose result was ty_err. Added a has_ty_err flag\nto the type flags so as to suppress errors for any types involving\nty_err.\n\nr=nmatsakis", "tree": {"sha": "2868c491f335d77f8eb5a23de32aab25ea08f880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2868c491f335d77f8eb5a23de32aab25ea08f880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42095221f496a4df47c3aee502a3509d969d268e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42095221f496a4df47c3aee502a3509d969d268e", "html_url": "https://github.com/rust-lang/rust/commit/42095221f496a4df47c3aee502a3509d969d268e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42095221f496a4df47c3aee502a3509d969d268e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0274292bed1c1a109cc46d49e4ac685d10b43bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0274292bed1c1a109cc46d49e4ac685d10b43bb3", "html_url": "https://github.com/rust-lang/rust/commit/0274292bed1c1a109cc46d49e4ac685d10b43bb3"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "319aff924a67b3dc665e1c851b88460cb4eaa004", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42095221f496a4df47c3aee502a3509d969d268e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42095221f496a4df47c3aee502a3509d969d268e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=42095221f496a4df47c3aee502a3509d969d268e", "patch": "@@ -151,7 +151,7 @@ export re_bound, re_free, re_scope, re_static, re_infer;\n export ReVar, ReSkolemized;\n export br_self, br_anon, br_named, br_cap_avoid, br_fresh;\n export get, type_has_params, type_needs_infer, type_has_regions;\n-export type_is_region_ptr;\n+export type_contains_err, type_is_region_ptr;\n export type_id;\n export tbox_has_flag;\n export ty_var_id;\n@@ -475,6 +475,7 @@ enum tbox_flag {\n     has_self = 2,\n     needs_infer = 4,\n     has_regions = 8,\n+    has_ty_err = 16,\n \n     // a meta-flag: subst may be required if the type has parameters, a self\n     // type, or references bound regions\n@@ -508,6 +509,7 @@ pure fn type_has_params(t: t) -> bool { tbox_has_flag(get(t), has_params) }\n pure fn type_has_self(t: t) -> bool { tbox_has_flag(get(t), has_self) }\n pure fn type_needs_infer(t: t) -> bool { tbox_has_flag(get(t), needs_infer) }\n pure fn type_has_regions(t: t) -> bool { tbox_has_flag(get(t), has_regions) }\n+pure fn type_contains_err(t: t) -> bool { tbox_has_flag(get(t), has_ty_err) }\n pure fn type_def_id(t: t) -> Option<ast::def_id> { get(t).o_def_id }\n pure fn type_id(t: t) -> uint { get(t).id }\n \n@@ -1059,7 +1061,8 @@ fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: Option<ast::def_id>) -> t {\n       }\n       &ty_nil | &ty_bot | &ty_bool | &ty_int(_) | &ty_float(_) | &ty_uint(_) |\n       &ty_estr(_) | &ty_type | &ty_opaque_closure_ptr(_) |\n-      &ty_opaque_box | &ty_err => (),\n+      &ty_opaque_box => (),\n+      &ty_err => flags |= has_ty_err as uint,\n       &ty_param(_) => flags |= has_params as uint,\n       &ty_infer(_) => flags |= needs_infer as uint,\n       &ty_self => flags |= has_self as uint,"}, {"sha": "ec5de2b4f261bb6df37b1d0db6f04ebef734d2a1", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42095221f496a4df47c3aee502a3509d969d268e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42095221f496a4df47c3aee502a3509d969d268e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=42095221f496a4df47c3aee502a3509d969d268e", "patch": "@@ -744,20 +744,10 @@ impl @InferCtxt {\n     fn type_error_message(sp: span, mk_msg: fn(~str) -> ~str,\n                           actual_ty: ty::t, err: Option<&ty::type_err>) {\n         let actual_ty = self.resolve_type_vars_if_possible(actual_ty);\n-        let mut actual_sty = ty::get(copy actual_ty);\n \n         // Don't report an error if actual type is ty_err.\n-        match actual_sty.sty {\n-            ty::ty_err => return,\n-            // Should really not report an error if the type\n-            // has ty_err anywhere as a component, but that's\n-            // annoying since we haven't written a visitor for\n-            // ty::t yet\n-            ty::ty_fn(ref fty) => match ty::get(fty.sig.output).sty {\n-                ty::ty_err => return,\n-                _ => ()\n-            },\n-            _           => ()\n+        if ty::type_contains_err(actual_ty) {\n+            return;\n         }\n         let error_str = err.map_default(~\"\", |t_err|\n                          fmt!(\" (%s)\","}]}