{"sha": "9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzFkZTRjOWU4NGE1Yjg2MjVmZjFmMDY2YjNmMDVjMzk1MzFkOWQ=", "commit": {"author": {"name": "maikklein", "email": "maikklein@googlemail.com", "date": "2013-07-23T01:41:53Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-28T06:41:09Z"}, "message": "cleanup .get and .get_err", "tree": {"sha": "e18841e8c33bdd3e191f23ee27d507ca83bc00eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e18841e8c33bdd3e191f23ee27d507ca83bc00eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d", "html_url": "https://github.com/rust-lang/rust/commit/9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6bcf5d5f11a24930c8b3eea4269ba0df583b5cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bcf5d5f11a24930c8b3eea4269ba0df583b5cf", "html_url": "https://github.com/rust-lang/rust/commit/f6bcf5d5f11a24930c8b3eea4269ba0df583b5cf"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "54c901f3a24fe29060538f72f3e052f7e04e0bfa", "filename": "src/libstd/result.rs", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=9dc1de4c9e84a5b8625ff1f066b3f05c39531d9d", "patch": "@@ -31,37 +31,6 @@ pub enum Result<T, U> {\n     Err(U)\n }\n \n-/**\n- * Get the value out of a successful result\n- *\n- * # Failure\n- *\n- * If the result is an error\n- */\n-#[inline]\n-pub fn get<T:Clone,U>(res: &Result<T, U>) -> T {\n-    match *res {\n-      Ok(ref t) => (*t).clone(),\n-      Err(ref the_err) =>\n-        fail!(\"get called on error result: %?\", *the_err)\n-    }\n-}\n-\n-/**\n- * Get the value out of an error result\n- *\n- * # Failure\n- *\n- * If the result is not an error\n- */\n-#[inline]\n-pub fn get_err<T, U: Clone>(res: &Result<T, U>) -> U {\n-    match *res {\n-      Err(ref u) => (*u).clone(),\n-      Ok(_) => fail!(\"get_err called on ok result\")\n-    }\n-}\n-\n /**\n  * Convert to the `either` type\n  *\n@@ -245,8 +214,20 @@ impl<T, E> Result<T, E> {\n }\n \n impl<T:Clone,E> Result<T, E> {\n+    /**\n+     * Get the value out of a successful result\n+     *\n+     * # Failure\n+     *\n+     * If the result is an error\n+     */\n     #[inline]\n-    pub fn get(&self) -> T { get(self) }\n+    pub fn get(&self) -> T {\n+        match *self {\n+            Ok(ref t) => (*t).clone(),\n+            Err(ref e) => fail!(\"get called on error result: %?\", *e),\n+        }\n+    }\n \n     #[inline]\n     pub fn map_err<F:Clone>(&self, op: &fn(&E) -> F) -> Result<T,F> {\n@@ -255,8 +236,20 @@ impl<T:Clone,E> Result<T, E> {\n }\n \n impl<T, E:Clone> Result<T, E> {\n+    /**\n+     * Get the value out of an error result\n+     *\n+     * # Failure\n+     *\n+     * If the result is not an error\n+     */\n     #[inline]\n-    pub fn get_err(&self) -> E { get_err(self) }\n+    pub fn get_err(&self) -> E {\n+        match *self {\n+            Err(ref u) => (*u).clone(),\n+            Ok(_) => fail!(\"get_err called on ok result\"),\n+        }\n+    }\n \n     #[inline]\n     pub fn map<U:Clone>(&self, op: &fn(&T) -> U) -> Result<U,E> {\n@@ -363,7 +356,7 @@ pub fn iter_vec2<S,T,U>(ss: &[S], ts: &[T],\n \n #[cfg(test)]\n mod tests {\n-    use result::{Err, Ok, Result, get, get_err};\n+    use result::{Err, Ok, Result};\n     use result;\n \n     pub fn op1() -> result::Result<int, ~str> { result::Ok(666) }\n@@ -376,12 +369,12 @@ mod tests {\n \n     #[test]\n     pub fn chain_success() {\n-        assert_eq!(get(&(op1().chain(op2))), 667u);\n+        assert_eq!(op1().chain(op2).get(), 667u);\n     }\n \n     #[test]\n     pub fn chain_failure() {\n-        assert_eq!(get_err(&op3().chain( op2)), ~\"sadface\");\n+        assert_eq!(op3().chain( op2).get_err(), ~\"sadface\");\n     }\n \n     #[test]"}]}