{"sha": "03fe834a23eb12679352eadd89c20ba251992cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZmU4MzRhMjNlYjEyNjc5MzUyZWFkZDg5YzIwYmEyNTE5OTJjZDQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-08T15:29:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T15:29:13Z"}, "message": "Rollup merge of #67875 - dtolnay:hidden, r=GuillaumeGomez\n\nDistinguish between private items and hidden items in rustdoc\n\nI believe rustdoc should not be conflating private items (visibility lower than `pub`) and hidden items (attribute `doc(hidden)`). This matters now that Cargo is passing --document-private-items by default for bin crates. In bin crates that rely on macros, intentionally hidden implementation details of the macros can overwhelm the actual useful internal API that one would want to document.\n\nThis PR restores the strip-hidden pass when documenting private items, and introduces a separate unstable --document-hidden-items option to skip the strip-hidden pass. The two options are orthogonal to one another.\n\nFixes #67851. Closes #60884.", "tree": {"sha": "2aa9039deb54ef3cb782b078bc493d9a46345b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa9039deb54ef3cb782b078bc493d9a46345b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03fe834a23eb12679352eadd89c20ba251992cd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFfVKCRBK7hj4Ov3rIwAAdHIIADplnHEdU8J9YfPjzxxQudOA\nlegM1jWmPxuutgdsHXnHED06Rz/plMXLlNgCHxEJvPNa7S+8xKdvojM4YgpXAA5t\npgnLdvex2AMwUYvtXfakY5ACp6C2l3nT0IIKfU3fv1k2v1p4lzP2LBCM6u4pndX9\nCSQI5n4y/ugofZkIqLl+rHJLJz2HCFfNDNPjDS8xPxuN2FfkFoX56xuFJ4Arj/LK\nQSf2/1VFZdPxuZjWWOWIWRV85EFIf7yaOdhUto/lMjI60NkAUnDAsibSfLTxJSEm\nFLkgfNzbqTfkC0UiByVpJdISRk9RzWtWdaxith0kMgYGmThmQu4H81d3EJ9gUlA=\n=Xtir\n-----END PGP SIGNATURE-----\n", "payload": "tree 2aa9039deb54ef3cb782b078bc493d9a46345b99\nparent 429a7e7522fcec73ce2cbbc1ef47688276ce08d5\nparent 90adafbc9e6583fa2edae0f320e7fe51407e7f3b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578497353 +0900\ncommitter GitHub <noreply@github.com> 1578497353 +0900\n\nRollup merge of #67875 - dtolnay:hidden, r=GuillaumeGomez\n\nDistinguish between private items and hidden items in rustdoc\n\nI believe rustdoc should not be conflating private items (visibility lower than `pub`) and hidden items (attribute `doc(hidden)`). This matters now that Cargo is passing --document-private-items by default for bin crates. In bin crates that rely on macros, intentionally hidden implementation details of the macros can overwhelm the actual useful internal API that one would want to document.\n\nThis PR restores the strip-hidden pass when documenting private items, and introduces a separate unstable --document-hidden-items option to skip the strip-hidden pass. The two options are orthogonal to one another.\n\nFixes #67851. Closes #60884.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03fe834a23eb12679352eadd89c20ba251992cd4", "html_url": "https://github.com/rust-lang/rust/commit/03fe834a23eb12679352eadd89c20ba251992cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03fe834a23eb12679352eadd89c20ba251992cd4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "html_url": "https://github.com/rust-lang/rust/commit/429a7e7522fcec73ce2cbbc1ef47688276ce08d5"}, {"sha": "90adafbc9e6583fa2edae0f320e7fe51407e7f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/90adafbc9e6583fa2edae0f320e7fe51407e7f3b", "html_url": "https://github.com/rust-lang/rust/commit/90adafbc9e6583fa2edae0f320e7fe51407e7f3b"}], "stats": {"total": 216, "additions": 138, "deletions": 78}, "files": [{"sha": "26b49d2f9624e0fbe3b631727d24c45b8551e749", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -24,7 +24,7 @@ use crate::html;\n use crate::html::markdown::IdMap;\n use crate::html::static_files;\n use crate::opts;\n-use crate::passes::{self, DefaultPassOption};\n+use crate::passes::{self, Condition, DefaultPassOption};\n use crate::theme;\n \n /// Configuration options for rustdoc.\n@@ -98,6 +98,10 @@ pub struct Options {\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n     pub default_passes: DefaultPassOption,\n+    /// Document items that have lower than `pub` visibility.\n+    pub document_private: bool,\n+    /// Document items that have `doc(hidden)`.\n+    pub document_hidden: bool,\n     /// Any passes manually selected by the user.\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n@@ -146,6 +150,8 @@ impl fmt::Debug for Options {\n             .field(\"test_args\", &self.test_args)\n             .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"default_passes\", &self.default_passes)\n+            .field(\"document_private\", &self.document_private)\n+            .field(\"document_hidden\", &self.document_hidden)\n             .field(\"manual_passes\", &self.manual_passes)\n             .field(\"display_warnings\", &self.display_warnings)\n             .field(\"show_coverage\", &self.show_coverage)\n@@ -240,22 +246,26 @@ impl Options {\n                 println!(\"{:>20} - {}\", pass.name, pass.description);\n             }\n             println!(\"\\nDefault passes for rustdoc:\");\n-            for pass in passes::DEFAULT_PASSES {\n-                println!(\"{:>20}\", pass.name);\n-            }\n-            println!(\"\\nPasses run with `--document-private-items`:\");\n-            for pass in passes::DEFAULT_PRIVATE_PASSES {\n-                println!(\"{:>20}\", pass.name);\n+            for p in passes::DEFAULT_PASSES {\n+                print!(\"{:>20}\", p.pass.name);\n+                println_condition(p.condition);\n             }\n \n             if nightly_options::is_nightly_build() {\n                 println!(\"\\nPasses run with `--show-coverage`:\");\n-                for pass in passes::DEFAULT_COVERAGE_PASSES {\n-                    println!(\"{:>20}\", pass.name);\n+                for p in passes::COVERAGE_PASSES {\n+                    print!(\"{:>20}\", p.pass.name);\n+                    println_condition(p.condition);\n                 }\n-                println!(\"\\nPasses run with `--show-coverage --document-private-items`:\");\n-                for pass in passes::PRIVATE_COVERAGE_PASSES {\n-                    println!(\"{:>20}\", pass.name);\n+            }\n+\n+            fn println_condition(condition: Condition) {\n+                use Condition::*;\n+                match condition {\n+                    Always => println!(),\n+                    WhenDocumentPrivate => println!(\"  (when --document-private-items)\"),\n+                    WhenNotDocumentPrivate => println!(\"  (when not --document-private-items)\"),\n+                    WhenNotDocumentHidden => println!(\"  (when not --document-hidden-items)\"),\n                 }\n             }\n \n@@ -444,16 +454,11 @@ impl Options {\n             });\n \n         let show_coverage = matches.opt_present(\"show-coverage\");\n-        let document_private = matches.opt_present(\"document-private-items\");\n \n         let default_passes = if matches.opt_present(\"no-defaults\") {\n             passes::DefaultPassOption::None\n-        } else if show_coverage && document_private {\n-            passes::DefaultPassOption::PrivateCoverage\n         } else if show_coverage {\n             passes::DefaultPassOption::Coverage\n-        } else if document_private {\n-            passes::DefaultPassOption::Private\n         } else {\n             passes::DefaultPassOption::Default\n         };\n@@ -492,6 +497,8 @@ impl Options {\n         let runtool = matches.opt_str(\"runtool\");\n         let runtool_args = matches.opt_strs(\"runtool-arg\");\n         let enable_per_target_ignores = matches.opt_present(\"enable-per-target-ignores\");\n+        let document_private = matches.opt_present(\"document-private-items\");\n+        let document_hidden = matches.opt_present(\"document-hidden-items\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -518,6 +525,8 @@ impl Options {\n             should_test,\n             test_args,\n             default_passes,\n+            document_private,\n+            document_hidden,\n             manual_passes,\n             display_warnings,\n             show_coverage,"}, {"sha": "be7f7ea364f4705b0945cc18c2ac6c3b4335c541", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -33,7 +33,7 @@ use crate::clean::{AttributesExt, MAX_DEF_ID};\n use crate::config::{Options as RustdocOptions, RenderOptions};\n use crate::html::render::RenderInfo;\n \n-use crate::passes;\n+use crate::passes::{self, Condition::*, ConditionalPass};\n \n pub use rustc::session::config::{CodegenOptions, DebuggingOptions, Input, Options};\n pub use rustc::session::search_paths::SearchPath;\n@@ -221,6 +221,8 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         describe_lints,\n         lint_cap,\n         mut default_passes,\n+        mut document_private,\n+        document_hidden,\n         mut manual_passes,\n         display_warnings,\n         render_options,\n@@ -457,16 +459,14 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     }\n \n                     if attr.is_word() && name == sym::document_private_items {\n-                        if default_passes == passes::DefaultPassOption::Default {\n-                            default_passes = passes::DefaultPassOption::Private;\n-                        }\n+                        document_private = true;\n                     }\n                 }\n \n-                let passes = passes::defaults(default_passes).iter().chain(\n+                let passes = passes::defaults(default_passes).iter().copied().chain(\n                     manual_passes.into_iter().flat_map(|name| {\n                         if let Some(pass) = passes::find_pass(&name) {\n-                            Some(pass)\n+                            Some(ConditionalPass::always(pass))\n                         } else {\n                             error!(\"unknown pass {}, skipping\", name);\n                             None\n@@ -476,9 +476,17 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n                 info!(\"Executing passes\");\n \n-                for pass in passes {\n-                    debug!(\"running pass {}\", pass.name);\n-                    krate = (pass.pass)(krate, &ctxt);\n+                for p in passes {\n+                    let run = match p.condition {\n+                        Always => true,\n+                        WhenDocumentPrivate => document_private,\n+                        WhenNotDocumentPrivate => !document_private,\n+                        WhenNotDocumentHidden => !document_hidden,\n+                    };\n+                    if run {\n+                        debug!(\"running pass {}\", p.pass.name);\n+                        krate = (p.pass.run)(krate, &ctxt);\n+                    }\n                 }\n \n                 ctxt.sess().abort_if_errors();"}, {"sha": "91150899877febd611a45910bde27002068afc9e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -174,6 +174,9 @@ fn opts() -> Vec<RustcOptGroup> {\n         stable(\"document-private-items\", |o| {\n             o.optflag(\"\", \"document-private-items\", \"document private items\")\n         }),\n+        unstable(\"document-hidden-items\", |o| {\n+            o.optflag(\"\", \"document-hidden-items\", \"document items that have doc(hidden)\")\n+        }),\n         stable(\"test\", |o| o.optflag(\"\", \"test\", \"run code examples as tests\")),\n         stable(\"test-args\", |o| {\n             o.optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\", \"ARGS\")"}, {"sha": "7ed531c9206af0db4df96227d42aa7b150631e92", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -12,7 +12,7 @@ use std::ops;\n \n pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n     name: \"calculate-doc-coverage\",\n-    pass: calculate_doc_coverage,\n+    run: calculate_doc_coverage,\n     description: \"counts the number of items with and without documentation\",\n };\n "}, {"sha": "79548eb6d647af0d141b328229d42d1188873c2a", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -14,7 +14,7 @@ use crate::passes::Pass;\n \n pub const CHECK_CODE_BLOCK_SYNTAX: Pass = Pass {\n     name: \"check-code-block-syntax\",\n-    pass: check_code_block_syntax,\n+    run: check_code_block_syntax,\n     description: \"validates syntax inside Rust code blocks\",\n };\n "}, {"sha": "c2185592d14837846d223d070532e025692b010d", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -8,7 +8,7 @@ use std::mem::take;\n \n pub const COLLAPSE_DOCS: Pass = Pass {\n     name: \"collapse-docs\",\n-    pass: collapse_docs,\n+    run: collapse_docs,\n     description: \"concatenates all document attributes into one document attribute\",\n };\n "}, {"sha": "b1cd3deecb479996d3eeb6f07943b391d5eadabd", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -28,7 +28,7 @@ use super::span_of_attrs;\n \n pub const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n     name: \"collect-intra-doc-links\",\n-    pass: collect_intra_doc_links,\n+    run: collect_intra_doc_links,\n     description: \"reads a crate's documentation to resolve intra-doc-links\",\n };\n "}, {"sha": "da0e97f1075b00f8d50d3e185318f7cde33e6279", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n \n pub const COLLECT_TRAIT_IMPLS: Pass = Pass {\n     name: \"collect-trait-impls\",\n-    pass: collect_trait_impls,\n+    run: collect_trait_impls,\n     description: \"retrieves trait impls for items in the crate\",\n };\n "}, {"sha": "355ea15223b0c1a2a35c5fcdf8e08c11e3fcb85e", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -8,6 +8,7 @@ use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use std::mem;\n use std::ops::Range;\n \n+use self::Condition::*;\n use crate::clean::{self, GetDefId, Item};\n use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n@@ -52,10 +53,29 @@ pub use self::calculate_doc_coverage::CALCULATE_DOC_COVERAGE;\n #[derive(Copy, Clone)]\n pub struct Pass {\n     pub name: &'static str,\n-    pub pass: fn(clean::Crate, &DocContext<'_>) -> clean::Crate,\n+    pub run: fn(clean::Crate, &DocContext<'_>) -> clean::Crate,\n     pub description: &'static str,\n }\n \n+/// In a list of passes, a pass that may or may not need to be run depending on options.\n+#[derive(Copy, Clone)]\n+pub struct ConditionalPass {\n+    pub pass: Pass,\n+    pub condition: Condition,\n+}\n+\n+/// How to decide whether to run a conditional pass.\n+#[derive(Copy, Clone)]\n+pub enum Condition {\n+    Always,\n+    /// When `--document-private-items` is passed.\n+    WhenDocumentPrivate,\n+    /// When `--document-private-items` is not passed.\n+    WhenNotDocumentPrivate,\n+    /// When `--document-hidden-items` is not passed.\n+    WhenNotDocumentHidden,\n+}\n+\n /// The full list of passes.\n pub const PASSES: &[Pass] = &[\n     CHECK_PRIVATE_ITEMS_DOC_TESTS,\n@@ -72,63 +92,58 @@ pub const PASSES: &[Pass] = &[\n ];\n \n /// The list of passes run by default.\n-pub const DEFAULT_PASSES: &[Pass] = &[\n-    COLLECT_TRAIT_IMPLS,\n-    COLLAPSE_DOCS,\n-    UNINDENT_COMMENTS,\n-    CHECK_PRIVATE_ITEMS_DOC_TESTS,\n-    STRIP_HIDDEN,\n-    STRIP_PRIVATE,\n-    COLLECT_INTRA_DOC_LINKS,\n-    CHECK_CODE_BLOCK_SYNTAX,\n-    PROPAGATE_DOC_CFG,\n+pub const DEFAULT_PASSES: &[ConditionalPass] = &[\n+    ConditionalPass::always(COLLECT_TRAIT_IMPLS),\n+    ConditionalPass::always(COLLAPSE_DOCS),\n+    ConditionalPass::always(UNINDENT_COMMENTS),\n+    ConditionalPass::always(CHECK_PRIVATE_ITEMS_DOC_TESTS),\n+    ConditionalPass::new(STRIP_HIDDEN, WhenNotDocumentHidden),\n+    ConditionalPass::new(STRIP_PRIVATE, WhenNotDocumentPrivate),\n+    ConditionalPass::new(STRIP_PRIV_IMPORTS, WhenDocumentPrivate),\n+    ConditionalPass::always(COLLECT_INTRA_DOC_LINKS),\n+    ConditionalPass::always(CHECK_CODE_BLOCK_SYNTAX),\n+    ConditionalPass::always(PROPAGATE_DOC_CFG),\n ];\n \n-/// The list of default passes run with `--document-private-items` is passed to rustdoc.\n-pub const DEFAULT_PRIVATE_PASSES: &[Pass] = &[\n-    COLLECT_TRAIT_IMPLS,\n-    COLLAPSE_DOCS,\n-    UNINDENT_COMMENTS,\n-    CHECK_PRIVATE_ITEMS_DOC_TESTS,\n-    STRIP_PRIV_IMPORTS,\n-    COLLECT_INTRA_DOC_LINKS,\n-    CHECK_CODE_BLOCK_SYNTAX,\n-    PROPAGATE_DOC_CFG,\n+/// The list of default passes run when `--doc-coverage` is passed to rustdoc.\n+pub const COVERAGE_PASSES: &[ConditionalPass] = &[\n+    ConditionalPass::always(COLLECT_TRAIT_IMPLS),\n+    ConditionalPass::new(STRIP_HIDDEN, WhenNotDocumentHidden),\n+    ConditionalPass::new(STRIP_PRIVATE, WhenNotDocumentPrivate),\n+    ConditionalPass::always(CALCULATE_DOC_COVERAGE),\n ];\n \n-/// The list of default passes run when `--doc-coverage` is passed to rustdoc.\n-pub const DEFAULT_COVERAGE_PASSES: &[Pass] =\n-    &[COLLECT_TRAIT_IMPLS, STRIP_HIDDEN, STRIP_PRIVATE, CALCULATE_DOC_COVERAGE];\n+impl ConditionalPass {\n+    pub const fn always(pass: Pass) -> Self {\n+        Self::new(pass, Always)\n+    }\n \n-/// The list of default passes run when `--doc-coverage --document-private-items` is passed to\n-/// rustdoc.\n-pub const PRIVATE_COVERAGE_PASSES: &[Pass] = &[COLLECT_TRAIT_IMPLS, CALCULATE_DOC_COVERAGE];\n+    pub const fn new(pass: Pass, condition: Condition) -> Self {\n+        ConditionalPass { pass, condition }\n+    }\n+}\n \n /// A shorthand way to refer to which set of passes to use, based on the presence of\n-/// `--no-defaults` or `--document-private-items`.\n+/// `--no-defaults` and `--show-coverage`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum DefaultPassOption {\n     Default,\n-    Private,\n     Coverage,\n-    PrivateCoverage,\n     None,\n }\n \n /// Returns the given default set of passes.\n-pub fn defaults(default_set: DefaultPassOption) -> &'static [Pass] {\n+pub fn defaults(default_set: DefaultPassOption) -> &'static [ConditionalPass] {\n     match default_set {\n         DefaultPassOption::Default => DEFAULT_PASSES,\n-        DefaultPassOption::Private => DEFAULT_PRIVATE_PASSES,\n-        DefaultPassOption::Coverage => DEFAULT_COVERAGE_PASSES,\n-        DefaultPassOption::PrivateCoverage => PRIVATE_COVERAGE_PASSES,\n+        DefaultPassOption::Coverage => COVERAGE_PASSES,\n         DefaultPassOption::None => &[],\n     }\n }\n \n /// If the given name matches a known pass, returns its information.\n-pub fn find_pass(pass_name: &str) -> Option<&'static Pass> {\n-    PASSES.iter().find(|p| p.name == pass_name)\n+pub fn find_pass(pass_name: &str) -> Option<Pass> {\n+    PASSES.iter().find(|p| p.name == pass_name).copied()\n }\n \n struct Stripper<'a> {"}, {"sha": "aec5a6bd4e221f8745ce722bff640007ff0cb671", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -5,7 +5,7 @@ use crate::passes::{look_for_tests, Pass};\n \n pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n     name: \"check-private-items-doc-tests\",\n-    pass: check_private_items_doc_tests,\n+    run: check_private_items_doc_tests,\n     description: \"check private items doc tests\",\n };\n "}, {"sha": "64b0c45ba65d3a67a3ee27dc0837aca3268cfe8d", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -8,7 +8,7 @@ use crate::passes::Pass;\n \n pub const PROPAGATE_DOC_CFG: Pass = Pass {\n     name: \"propagate-doc-cfg\",\n-    pass: propagate_doc_cfg,\n+    run: propagate_doc_cfg,\n     description: \"propagates `#[doc(cfg(...))]` to child items\",\n };\n "}, {"sha": "f82e72b488bb764b753750a3273a0f3b4570871c", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -10,7 +10,7 @@ use crate::passes::{ImplStripper, Pass};\n \n pub const STRIP_HIDDEN: Pass = Pass {\n     name: \"strip-hidden\",\n-    pass: strip_hidden,\n+    run: strip_hidden,\n     description: \"strips all doc(hidden) items from the output\",\n };\n "}, {"sha": "35b26fb8ab0be6633d33c882fa419fa518fe43b2", "filename": "src/librustdoc/passes/strip_priv_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -5,7 +5,7 @@ use crate::passes::{ImportStripper, Pass};\n \n pub const STRIP_PRIV_IMPORTS: Pass = Pass {\n     name: \"strip-priv-imports\",\n-    pass: strip_priv_imports,\n+    run: strip_priv_imports,\n     description: \"strips all private import statements (`use`, `extern crate`) from a crate\",\n };\n "}, {"sha": "f244956e50336e0a24798bbff1534de76779b0d1", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -7,7 +7,7 @@ use crate::passes::{ImplStripper, ImportStripper, Pass, Stripper};\n \n pub const STRIP_PRIVATE: Pass = Pass {\n     name: \"strip-private\",\n-    pass: strip_private,\n+    run: strip_private,\n     description: \"strips all private items from a crate which cannot be seen externally, \\\n         implies strip-priv-imports\",\n };"}, {"sha": "d4e09ce47a3c1aa173e5c83e7c83664eb6d9f015", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -12,7 +12,7 @@ mod tests;\n \n pub const UNINDENT_COMMENTS: Pass = Pass {\n     name: \"unindent-comments\",\n-    pass: unindent_comments,\n+    run: unindent_comments,\n     description: \"removes excess indentation on comments in order for markdown to like it\",\n };\n "}, {"sha": "8837a6b463e8835f3fb12a91a4c3d6fc71468d09", "filename": "src/test/rustdoc/issue-46380.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Ftest%2Frustdoc%2Fissue-46380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Ftest%2Frustdoc%2Fissue-46380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46380.rs?ref=429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "patch": "@@ -1,5 +0,0 @@\n-// compile-flags: --document-private-items\n-\n-// @has issue_46380/struct.Hidden.html\n-#[doc(hidden)]\n-pub struct Hidden;"}, {"sha": "d69b943173412e18343f30d61d9013ea2f55fcbb", "filename": "src/test/rustdoc/issue-67851-both.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-67851-both.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Zunstable-options --document-private-items --document-hidden-items\n+\n+// @has issue_67851_both/struct.Hidden.html\n+#[doc(hidden)]\n+pub struct Hidden;\n+\n+// @has issue_67851_both/struct.Private.html\n+struct Private;"}, {"sha": "8a3cafe4c3dc7775621b139c7c26f50b28f176d5", "filename": "src/test/rustdoc/issue-67851-hidden.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-67851-hidden.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Zunstable-options --document-hidden-items\n+\n+// @has issue_67851_hidden/struct.Hidden.html\n+#[doc(hidden)]\n+pub struct Hidden;\n+\n+// @!has issue_67851_hidden/struct.Private.html\n+struct Private;"}, {"sha": "4e3cd832853881d0fbe4152511572308ce818815", "filename": "src/test/rustdoc/issue-67851-neither.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-neither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-neither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-67851-neither.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -0,0 +1,6 @@\n+// @!has issue_67851_neither/struct.Hidden.html\n+#[doc(hidden)]\n+pub struct Hidden;\n+\n+// @!has issue_67851_neither/struct.Private.html\n+struct Private;"}, {"sha": "8addc7f3e4b53c0d2fe138a90c50ab41f6e1dfb1", "filename": "src/test/rustdoc/issue-67851-private.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe834a23eb12679352eadd89c20ba251992cd4/src%2Ftest%2Frustdoc%2Fissue-67851-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-67851-private.rs?ref=03fe834a23eb12679352eadd89c20ba251992cd4", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --document-private-items\n+\n+// @!has issue_67851_private/struct.Hidden.html\n+#[doc(hidden)]\n+pub struct Hidden;\n+\n+// @has issue_67851_private/struct.Private.html\n+struct Private;"}]}