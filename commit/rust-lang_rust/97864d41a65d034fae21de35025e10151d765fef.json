{"sha": "97864d41a65d034fae21de35025e10151d765fef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ODY0ZDQxYTY1ZDAzNGZhZTIxZGUzNTAyNWUxMDE1MWQ3NjVmZWY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-30T06:00:04Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T16:21:33Z"}, "message": "rustc_metadata: encode miscellaneous information opaquely.", "tree": {"sha": "3757d89afb2fa6ebb6ed3f331a0128c8eaa744a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3757d89afb2fa6ebb6ed3f331a0128c8eaa744a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97864d41a65d034fae21de35025e10151d765fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97864d41a65d034fae21de35025e10151d765fef", "html_url": "https://github.com/rust-lang/rust/commit/97864d41a65d034fae21de35025e10151d765fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97864d41a65d034fae21de35025e10151d765fef/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cbe4b8bce0fafb7b11895bb8b93ff6803fa8c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cbe4b8bce0fafb7b11895bb8b93ff6803fa8c03", "html_url": "https://github.com/rust-lang/rust/commit/3cbe4b8bce0fafb7b11895bb8b93ff6803fa8c03"}], "stats": {"total": 91, "additions": 32, "deletions": 59}, "files": [{"sha": "b808aad143687437a3d3496efe8e3c01e9e84aa1", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=97864d41a65d034fae21de35025e10151d765fef", "patch": "@@ -553,16 +553,14 @@ pub fn get_type<'a, 'tcx>(cdata: Cmd, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n pub fn get_stability(cdata: Cmd, id: DefIndex) -> Option<attr::Stability> {\n     let item = cdata.lookup_item(id);\n     reader::maybe_get_doc(item, tag_items_data_item_stability).map(|doc| {\n-        let mut decoder = reader::Decoder::new(doc);\n-        Decodable::decode(&mut decoder).unwrap()\n+        Decodable::decode(&mut doc.opaque()).unwrap()\n     })\n }\n \n pub fn get_deprecation(cdata: Cmd, id: DefIndex) -> Option<attr::Deprecation> {\n     let item = cdata.lookup_item(id);\n     reader::maybe_get_doc(item, tag_items_data_item_deprecation).map(|doc| {\n-        let mut decoder = reader::Decoder::new(doc);\n-        Decodable::decode(&mut decoder).unwrap()\n+        Decodable::decode(&mut doc.opaque()).unwrap()\n     })\n }\n \n@@ -579,19 +577,12 @@ pub fn get_parent_impl(cdata: Cmd, id: DefIndex) -> Option<DefId> {\n \n pub fn get_repr_attrs(cdata: Cmd, id: DefIndex) -> Vec<attr::ReprAttr> {\n     let item = cdata.lookup_item(id);\n-    match reader::maybe_get_doc(item, tag_items_data_item_repr).map(|doc| {\n-        let mut decoder = reader::Decoder::new(doc);\n-        Decodable::decode(&mut decoder).unwrap()\n-    }) {\n-        Some(attrs) => attrs,\n-        None => Vec::new(),\n-    }\n+    reader::maybe_get_doc(item, tag_items_data_item_repr).map_or(vec![], |doc| {\n+        Decodable::decode(&mut doc.opaque()).unwrap()\n+    })\n }\n \n-pub fn get_impl_polarity<'tcx>(cdata: Cmd,\n-                               id: DefIndex)\n-                               -> Option<hir::ImplPolarity>\n-{\n+pub fn get_impl_polarity(cdata: Cmd, id: DefIndex) -> Option<hir::ImplPolarity> {\n     let item_doc = cdata.lookup_item(id);\n     let fam = item_family(item_doc);\n     match fam {\n@@ -602,15 +593,14 @@ pub fn get_impl_polarity<'tcx>(cdata: Cmd,\n     }\n }\n \n-pub fn get_custom_coerce_unsized_kind<'tcx>(\n+pub fn get_custom_coerce_unsized_kind(\n     cdata: Cmd,\n     id: DefIndex)\n     -> Option<ty::adjustment::CustomCoerceUnsized>\n {\n     let item_doc = cdata.lookup_item(id);\n     reader::maybe_get_doc(item_doc, tag_impl_coerce_unsized_kind).map(|kind_doc| {\n-        let mut decoder = reader::Decoder::new(kind_doc);\n-        Decodable::decode(&mut decoder).unwrap()\n+        Decodable::decode(&mut kind_doc.opaque()).unwrap()\n     })\n }\n \n@@ -989,8 +979,7 @@ pub fn get_trait_item_def_ids(cdata: Cmd, id: DefIndex)\n pub fn get_item_variances(cdata: Cmd, id: DefIndex) -> Vec<ty::Variance> {\n     let item_doc = cdata.lookup_item(id);\n     let variance_doc = reader::get_doc(item_doc, tag_item_variances);\n-    let mut decoder = reader::Decoder::new(variance_doc);\n-    Decodable::decode(&mut decoder).unwrap()\n+    Decodable::decode(&mut variance_doc.opaque()).unwrap()\n }\n \n pub fn get_provided_trait_methods<'a, 'tcx>(cdata: Cmd,\n@@ -1109,10 +1098,7 @@ pub fn get_struct_field_names(cdata: Cmd, id: DefIndex) -> Vec<ast::Name> {\n \n fn get_attributes(md: rbml::Doc) -> Vec<ast::Attribute> {\n     reader::maybe_get_doc(md, tag_attributes).map_or(vec![], |attrs_doc| {\n-        let mut decoder = reader::Decoder::new(attrs_doc);\n-        let mut attrs: Vec<ast::Attribute> = decoder.read_opaque(|opaque_decoder, _| {\n-            Decodable::decode(opaque_decoder)\n-        }).unwrap();\n+        let mut attrs = Vec::<ast::Attribute>::decode(&mut attrs_doc.opaque()).unwrap();\n \n         // Need new unique IDs: old thread-local IDs won't map to new threads.\n         for attr in attrs.iter_mut() {\n@@ -1575,18 +1561,14 @@ pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<syntax_pos::FileMap> {\n     let cm_doc = reader::get_doc(crate_doc, tag_codemap);\n \n     reader::tagged_docs(cm_doc, tag_codemap_filemap).map(|filemap_doc| {\n-        let mut decoder = reader::Decoder::new(filemap_doc);\n-        decoder.read_opaque(|opaque_decoder, _| {\n-            Decodable::decode(opaque_decoder)\n-        }).unwrap()\n+        Decodable::decode(&mut filemap_doc.opaque()).unwrap()\n     }).collect()\n }\n \n pub fn closure_kind(cdata: Cmd, closure_id: DefIndex) -> ty::ClosureKind {\n     let closure_doc = cdata.lookup_item(closure_id);\n     let closure_kind_doc = reader::get_doc(closure_doc, tag_items_closure_kind);\n-    let mut decoder = reader::Decoder::new(closure_kind_doc);\n-    ty::ClosureKind::decode(&mut decoder).unwrap()\n+    ty::ClosureKind::decode(&mut closure_kind_doc.opaque()).unwrap()\n }\n \n pub fn closure_ty<'a, 'tcx>(cdata: Cmd, closure_id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n@@ -1606,8 +1588,7 @@ pub fn def_key(cdata: Cmd, id: DefIndex) -> hir_map::DefKey {\n fn item_def_key(item_doc: rbml::Doc) -> hir_map::DefKey {\n     match reader::maybe_get_doc(item_doc, tag_def_key) {\n         Some(def_key_doc) => {\n-            let mut decoder = reader::Decoder::new(def_key_doc);\n-            let simple_key = def_key::DefKey::decode(&mut decoder).unwrap();\n+            let simple_key = def_key::DefKey::decode(&mut def_key_doc.opaque()).unwrap();\n             let name = reader::maybe_get_doc(item_doc, tag_paths_data_name).map(|name| {\n                 token::intern(name.as_str()).as_str()\n             });"}, {"sha": "3197d52e14d0438fb85aecda7b29a05b6e9fdcc9", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=97864d41a65d034fae21de35025e10151d765fef", "patch": "@@ -132,7 +132,7 @@ fn encode_def_id(ecx: &mut EncodeContext, id: DefId) {\n fn encode_def_key(ecx: &mut EncodeContext, key: DefKey) {\n     let simple_key = def_key::simplify_def_key(key);\n     ecx.start_tag(tag_def_key);\n-    simple_key.encode(ecx);\n+    simple_key.encode(&mut ecx.opaque());\n     ecx.end_tag();\n }\n \n@@ -171,7 +171,7 @@ pub fn def_to_string(_tcx: TyCtxt, did: DefId) -> String {\n fn encode_item_variances(ecx: &mut EncodeContext, id: NodeId) {\n     let v = ecx.tcx.item_variances(ecx.tcx.map.local_def_id(id));\n     ecx.start_tag(tag_item_variances);\n-    v.encode(ecx);\n+    v.encode(&mut ecx.opaque());\n     ecx.end_tag();\n }\n \n@@ -786,7 +786,7 @@ impl<'a, 'b, 'tcx> ItemContentBuilder<'a, 'b, 'tcx> {\n                                                     attr));\n         }\n         self.start_tag(tag_items_data_item_repr);\n-        repr_attrs.encode(self.ecx);\n+        repr_attrs.encode(&mut self.opaque());\n         self.end_tag();\n     }\n \n@@ -821,15 +821,15 @@ fn encode_inherent_implementations(ecx: &mut EncodeContext,\n fn encode_stability(ecx: &mut EncodeContext, stab_opt: Option<&attr::Stability>) {\n     stab_opt.map(|stab| {\n         ecx.start_tag(tag_items_data_item_stability);\n-        stab.encode(ecx).unwrap();\n+        stab.encode(&mut ecx.opaque()).unwrap();\n         ecx.end_tag();\n     });\n }\n \n fn encode_deprecation(ecx: &mut EncodeContext, depr_opt: Option<attr::Deprecation>) {\n     depr_opt.map(|depr| {\n         ecx.start_tag(tag_items_data_item_deprecation);\n-        depr.encode(ecx).unwrap();\n+        depr.encode(&mut ecx.opaque()).unwrap();\n         ecx.end_tag();\n     });\n }\n@@ -1068,7 +1068,7 @@ impl<'a, 'b, 'tcx> ItemContentBuilder<'a, 'b, 'tcx> {\n                 {\n                     Some(&kind) => {\n                         self.start_tag(tag_impl_coerce_unsized_kind);\n-                        kind.encode(self.ecx);\n+                        kind.encode(&mut self.opaque());\n                         self.end_tag();\n                     }\n                     None => {}\n@@ -1386,7 +1386,7 @@ impl<'a, 'b, 'tcx> ItemContentBuilder<'a, 'b, 'tcx> {\n         self.end_tag();\n \n         self.start_tag(tag_items_closure_kind);\n-        tcx.closure_kind(def_id).encode(self.ecx).unwrap();\n+        tcx.closure_kind(def_id).encode(&mut self.opaque()).unwrap();\n         self.end_tag();\n \n         assert!(self.mir_map.map.contains_key(&def_id));\n@@ -1428,9 +1428,7 @@ fn encode_item_index(ecx: &mut EncodeContext, index: IndexData) {\n \n fn encode_attributes(ecx: &mut EncodeContext, attrs: &[ast::Attribute]) {\n     ecx.start_tag(tag_attributes);\n-    ecx.emit_opaque(|opaque_encoder| {\n-        attrs.encode(opaque_encoder)\n-    }).unwrap();\n+    attrs.encode(&mut ecx.opaque()).unwrap();\n     ecx.end_tag();\n }\n \n@@ -1565,9 +1563,7 @@ fn encode_codemap(ecx: &mut EncodeContext) {\n         }\n \n         ecx.start_tag(tag_codemap_filemap);\n-        ecx.emit_opaque(|opaque_encoder| {\n-            filemap.encode(opaque_encoder)\n-        }).unwrap();\n+        filemap.encode(&mut ecx.opaque()).unwrap();\n         ecx.end_tag();\n     }\n "}, {"sha": "7878d8af98957b72b71d938ade21aab8f6f3cebc", "filename": "src/librustc_metadata/rbml/reader.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Frbml%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Frbml%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frbml%2Freader.rs?ref=97864d41a65d034fae21de35025e10151d765fef", "patch": "@@ -158,6 +158,10 @@ impl<'doc> Doc<'doc> {\n     pub fn to_string(&self) -> String {\n         self.as_str().to_string()\n     }\n+\n+    pub fn opaque(&self) -> opaque::Decoder<'doc> {\n+        opaque::Decoder::new(self.data, self.start)\n+    }\n }\n \n pub struct TaggedDoc<'a> {\n@@ -670,12 +674,7 @@ impl<'doc> Decoder<'doc> {\n         where F: FnOnce(&mut opaque::Decoder, Doc) -> DecodeResult<R>\n     {\n         let doc = self.next_doc(EsOpaque)?;\n-\n-        let result = {\n-            let mut opaque_decoder = opaque::Decoder::new(doc.data, doc.start);\n-            op(&mut opaque_decoder, doc)?\n-        };\n-\n+        let result = op(&mut doc.opaque(), doc)?;\n         Ok(result)\n     }\n "}, {"sha": "db3a51187c60dc2a1c74a478fe14094d71570ebd", "filename": "src/librustc_metadata/rbml/writer.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Frbml%2Fwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97864d41a65d034fae21de35025e10151d765fef/src%2Flibrustc_metadata%2Frbml%2Fwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frbml%2Fwriter.rs?ref=97864d41a65d034fae21de35025e10151d765fef", "patch": "@@ -241,9 +241,7 @@ impl Encoder {\n         }\n         pos\n     }\n-}\n \n-impl Encoder {\n     // used internally to emit things like the vector length and so on\n     fn _emit_tagged_sub(&mut self, v: usize) -> EncodeResult {\n         if v as u8 as usize == v {\n@@ -256,16 +254,15 @@ impl Encoder {\n         }\n     }\n \n+    pub fn opaque(&mut self) -> opaque::Encoder {\n+        opaque::Encoder::new(&mut self.writer)\n+    }\n+\n     pub fn emit_opaque<F>(&mut self, f: F) -> EncodeResult\n         where F: FnOnce(&mut opaque::Encoder) -> EncodeResult\n     {\n         self.start_tag(EsOpaque as usize)?;\n-\n-        {\n-            let mut opaque_encoder = opaque::Encoder::new(&mut self.writer);\n-            f(&mut opaque_encoder)?;\n-        }\n-\n+        f(&mut self.opaque())?;\n         self.mark_stable_position();\n         self.end_tag()\n     }"}]}