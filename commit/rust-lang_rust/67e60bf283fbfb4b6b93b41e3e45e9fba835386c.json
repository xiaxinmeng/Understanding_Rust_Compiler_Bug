{"sha": "67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZTYwYmYyODNmYmZiNGI2YjkzYjQxZTNlNDVlOWZiYTgzNTM4NmM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-09-17T09:30:04Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-01T14:43:15Z"}, "message": "remove unneeded tags from metadata\n\nstage1 release rlib sizes:\n580890 liballoc-bb943c5a.rlib\n1425558 liballoc_jemalloc-bb943c5a.rlib\n10514 liballoc_system-bb943c5a.rlib\n157192 libarena-bb943c5a.rlib\n4316234 libcollections-bb943c5a.rlib\n19580128 libcore-bb943c5a.rlib\n199498 libflate-bb943c5a.rlib\n249328 libfmt_macros-bb943c5a.rlib\n560406 libgetopts-bb943c5a.rlib\n233620 libgraphviz-bb943c5a.rlib\n442964 liblibc-bb943c5a.rlib\n190178 liblog-bb943c5a.rlib\n778488 librand-bb943c5a.rlib\n621972 librbml-bb943c5a.rlib\n1415040 librustc_back-bb943c5a.rlib\n38849082 librustc-bb943c5a.rlib\n12862 librustc_bitflags-bb943c5a.rlib\n2331690 librustc_borrowck-bb943c5a.rlib\n616880 librustc_data_structures-bb943c5a.rlib\n9386582 librustc_driver-bb943c5a.rlib\n9600440 librustc_front-bb943c5a.rlib\n1615058 librustc_lint-bb943c5a.rlib\n79218480 librustc_llvm-bb943c5a.rlib\n5020974 librustc_mir-bb943c5a.rlib\n3535448 librustc_platform_intrinsics-bb943c5a.rlib\n603640 librustc_privacy-bb943c5a.rlib\n3163628 librustc_resolve-bb943c5a.rlib\n14326646 librustc_trans-bb943c5a.rlib\n12033174 librustc_typeck-bb943c5a.rlib\n1838202 librustc_unicode-bb943c5a.rlib\n15611582 librustdoc-bb943c5a.rlib\n3056280 libserialize-bb943c5a.rlib\n8954312 libstd-bb943c5a.rlib\n30906736 libsyntax-bb943c5a.rlib\n925480 libterm-bb943c5a.rlib\n1377952 libtest-bb943c5a.rlib", "tree": {"sha": "981927d96e3f209702eb4c29a34ab60eddf31f8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981927d96e3f209702eb4c29a34ab60eddf31f8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "html_url": "https://github.com/rust-lang/rust/commit/67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8719f504ee3c6697a5e76ed65524ecf8a39be2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8719f504ee3c6697a5e76ed65524ecf8a39be2e5", "html_url": "https://github.com/rust-lang/rust/commit/8719f504ee3c6697a5e76ed65524ecf8a39be2e5"}], "stats": {"total": 80, "additions": 11, "deletions": 69}, "files": [{"sha": "5523c2840987ace4fac2b30790ed0a5533abf49c", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "patch": "@@ -74,8 +74,6 @@ pub const tag_crate_dep_crate_name: usize = 0x36;\n pub const tag_crate_dep_hash: usize = 0x37;\n pub const tag_crate_dep_explicitly_linked: usize = 0x38; // top-level only\n \n-pub const tag_mod_impl: usize = 0x39;\n-\n pub const tag_item_trait_item: usize = 0x3a;\n \n pub const tag_item_trait_ref: usize = 0x3b;\n@@ -89,7 +87,6 @@ pub const tag_path_len: usize = 0x3e;\n pub const tag_path_elem_mod: usize = 0x3f;\n pub const tag_path_elem_name: usize = 0x40;\n pub const tag_item_field: usize = 0x41;\n-pub const tag_item_field_origin: usize = 0x42;\n \n pub const tag_item_variances: usize = 0x43;\n /*\n@@ -119,8 +116,7 @@ enum_from_u32! {\n \n         tag_tree = 0x51,\n \n-        tag_id_range = 0x52,\n-\n+        // GAP 0x52\n         tag_table = 0x53,\n         // GAP 0x54, 0x55\n         tag_table_def = 0x56,\n@@ -129,30 +125,22 @@ enum_from_u32! {\n         tag_table_freevars = 0x59,\n         tag_table_tcache = 0x5a,\n         tag_table_param_defs = 0x5b,\n-        tag_table_mutbl = 0x5c,\n-        tag_table_last_use = 0x5d,\n-        tag_table_spill = 0x5e,\n+        // GAP 0x5c, 0x5d, 0x5e\n         tag_table_method_map = 0x5f,\n-        tag_table_vtable_map = 0x60,\n+        // GAP 0x60\n         tag_table_adjustments = 0x61,\n-        tag_table_moves_map = 0x62,\n-        tag_table_capture_map = 0x63,\n+        // GAP 0x62, 0x63\n         tag_table_closure_tys = 0x64,\n         tag_table_closure_kinds = 0x65,\n         tag_table_upvar_capture_map = 0x66,\n-        tag_table_capture_modes = 0x67,\n-        // GAP 0x68\n+        // GAP 0x67, 0x68\n         tag_table_const_qualif = 0x69,\n         tag_table_cast_kinds = 0x6a,\n     }\n }\n \n pub const tag_item_trait_item_sort: usize = 0x70;\n \n-pub const tag_item_trait_parent_sort: usize = 0x71;\n-\n-pub const tag_item_impl_type_basename: usize = 0x72;\n-\n pub const tag_crate_triple: usize = 0x105; // top-level only\n \n pub const tag_dylib_dependency_formats: usize = 0x106; // top-level only\n@@ -173,15 +161,15 @@ pub const tag_lang_items_missing: usize = 0x76;\n pub const tag_item_unnamed_field: usize = 0x77;\n pub const tag_items_data_item_visibility: usize = 0x78;\n \n-pub const tag_item_method_tps: usize = 0x79;\n+// GAP 0x79\n pub const tag_item_method_fty: usize = 0x7a;\n \n pub const tag_mod_child: usize = 0x7b;\n pub const tag_misc_info: usize = 0x108; // top-level only\n pub const tag_misc_info_crate_items: usize = 0x7c;\n \n // GAP 0x7d\n-pub const tag_item_impl_vtables: usize = 0x7e;\n+// GAP 0x7e\n \n pub const tag_impls: usize = 0x109; // top-level only\n pub const tag_impls_impl: usize = 0x7f;"}, {"sha": "dd6250d92aa62b2735fa6bedc1f2ad75b9e62b4d", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "patch": "@@ -171,12 +171,6 @@ pub fn get_associated_consts<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId)\n     decoder::get_associated_consts(cstore.intr.clone(), &*cdata, def.node, tcx)\n }\n \n-pub fn get_type_name_if_impl(cstore: &cstore::CStore, def: DefId)\n-                          -> Option<ast::Name> {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_type_name_if_impl(&*cdata, def.node)\n-}\n-\n pub fn get_methods_if_impl(cstore: &cstore::CStore,\n                                   def: DefId)\n                                -> Option<Vec<MethodInfo> > {"}, {"sha": "be2fe7ddf7cd212b7affb2e003ba9030cfbe9631", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "patch": "@@ -979,18 +979,6 @@ pub fn get_associated_consts<'tcx>(intr: Rc<IdentInterner>,\n     }).collect()\n }\n \n-pub fn get_type_name_if_impl(cdata: Cmd,\n-                             node_id: ast::NodeId) -> Option<ast::Name> {\n-    let item = cdata.lookup_item(node_id);\n-    if item_family(item) != Impl {\n-        return None;\n-    }\n-\n-    reader::tagged_docs(item, tag_item_impl_type_basename).nth(0).map(|doc| {\n-        token::intern(doc.as_str_slice())\n-    })\n-}\n-\n pub fn get_methods_if_impl(intr: Rc<IdentInterner>,\n                                   cdata: Cmd,\n                                   node_id: ast::NodeId)"}, {"sha": "4da94213a30ed598d1c565cfb956b318caea2700", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e60bf283fbfb4b6b93b41e3e45e9fba835386c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=67e60bf283fbfb4b6b93b41e3e45e9fba835386c", "patch": "@@ -78,10 +78,6 @@ fn encode_name(rbml_w: &mut Encoder, name: Name) {\n     rbml_w.wr_tagged_str(tag_paths_data_name, &name.as_str());\n }\n \n-fn encode_impl_type_basename(rbml_w: &mut Encoder, name: Name) {\n-    rbml_w.wr_tagged_str(tag_item_impl_type_basename, &name.as_str());\n-}\n-\n fn encode_def_id(rbml_w: &mut Encoder, id: DefId) {\n     rbml_w.wr_tagged_u64(tag_def_id, def_to_u64(id));\n }\n@@ -253,8 +249,7 @@ fn encode_parent_item(rbml_w: &mut Encoder, id: DefId) {\n }\n \n fn encode_struct_fields(rbml_w: &mut Encoder,\n-                        variant: ty::VariantDef,\n-                        origin: DefId) {\n+                        variant: ty::VariantDef) {\n     for f in &variant.fields {\n         if f.name == special_idents::unnamed_field.name {\n             rbml_w.start_tag(tag_item_unnamed_field);\n@@ -264,7 +259,6 @@ fn encode_struct_fields(rbml_w: &mut Encoder,\n         }\n         encode_struct_field_family(rbml_w, f.vis);\n         encode_def_id(rbml_w, f.did);\n-        rbml_w.wr_tagged_u64(tag_item_field_origin, def_to_u64(origin));\n         rbml_w.end_tag();\n     }\n }\n@@ -311,7 +305,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n         let stab = stability::lookup(ecx.tcx, vid);\n         encode_stability(rbml_w, stab);\n \n-        encode_struct_fields(rbml_w, variant, vid);\n+        encode_struct_fields(rbml_w, variant);\n \n         let specified_disr_val = variant.disr_val;\n         if specified_disr_val != disr_val {\n@@ -518,15 +512,6 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n                                  def_to_u64(DefId::local(auxiliary_node_id)));\n             true\n         });\n-\n-        if let hir::ItemImpl(..) = item.node {\n-            let (name, did) = (item.name, item.id);\n-            debug!(\"(encoding info for module) ... encoding impl {} ({}/{})\",\n-                   name,\n-                   did, ecx.tcx.map.node_to_string(did));\n-\n-            rbml_w.wr_tagged_u64(tag_mod_impl, def_to_u64(DefId::local(did)));\n-        }\n     }\n \n     encode_path(rbml_w, path.clone());\n@@ -605,10 +590,6 @@ fn encode_item_sort(rbml_w: &mut Encoder, sort: char) {\n     rbml_w.wr_tagged_u8(tag_item_trait_item_sort, sort as u8);\n }\n \n-fn encode_parent_sort(rbml_w: &mut Encoder, sort: char) {\n-    rbml_w.wr_tagged_u8(tag_item_trait_parent_sort, sort as u8);\n-}\n-\n fn encode_field<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                           rbml_w: &mut Encoder,\n                           field: ty::FieldDef<'tcx>,\n@@ -1147,7 +1128,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         /* Encode def_ids for each field and method\n          for methods, write all the stuff get_trait_method\n         needs to know*/\n-        encode_struct_fields(rbml_w, variant, def_id);\n+        encode_struct_fields(rbml_w, variant);\n \n         encode_inlined_item(ecx, rbml_w, InlinedItemRef::Item(item));\n \n@@ -1177,7 +1158,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n           encode_trait_ref(rbml_w, ecx, trait_ref, tag_item_trait_ref);\n           rbml_w.end_tag();\n       }\n-      hir::ItemImpl(unsafety, polarity, _, _, ref ty, ref ast_items) => {\n+      hir::ItemImpl(unsafety, polarity, _, _, _, ref ast_items) => {\n         // We need to encode information about the default methods we\n         // have inherited, so we drive this based on the impl structure.\n         let impl_items = tcx.impl_items.borrow();\n@@ -1202,13 +1183,6 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             None => {}\n         }\n \n-        match ty.node {\n-            hir::TyPath(None, ref path) if path.segments.len() == 1 => {\n-                let name = path.segments.last().unwrap().identifier.name;\n-                encode_impl_type_basename(rbml_w, name);\n-            }\n-            _ => {}\n-        }\n         for &item_def_id in items {\n             rbml_w.start_tag(tag_item_impl_item);\n             match item_def_id {\n@@ -1412,8 +1386,6 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                 }\n             }\n \n-            encode_parent_sort(rbml_w, 't');\n-\n             let trait_item = &*ms[i];\n             encode_attributes(rbml_w, &trait_item.attrs);\n             match trait_item.node {"}]}