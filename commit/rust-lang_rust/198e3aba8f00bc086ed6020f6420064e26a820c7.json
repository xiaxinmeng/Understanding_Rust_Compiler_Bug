{"sha": "198e3aba8f00bc086ed6020f6420064e26a820c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OGUzYWJhOGYwMGJjMDg2ZWQ2MDIwZjY0MjAwNjRlMjZhODIwYzc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-30T16:39:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-01T14:56:51Z"}, "message": "Put back primitives in search", "tree": {"sha": "384f82ec14569b920d0cfeb45b2b2ddac6dee71d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/384f82ec14569b920d0cfeb45b2b2ddac6dee71d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198e3aba8f00bc086ed6020f6420064e26a820c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198e3aba8f00bc086ed6020f6420064e26a820c7", "html_url": "https://github.com/rust-lang/rust/commit/198e3aba8f00bc086ed6020f6420064e26a820c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198e3aba8f00bc086ed6020f6420064e26a820c7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f8f6281817d430e20726128b739d3c6708561c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f8f6281817d430e20726128b739d3c6708561c", "html_url": "https://github.com/rust-lang/rust/commit/a2f8f6281817d430e20726128b739d3c6708561c"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "a1709226578a1eff69e8eac018cf59a656d31205", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=198e3aba8f00bc086ed6020f6420064e26a820c7", "patch": "@@ -1302,6 +1302,7 @@ crate enum TypeKind {\n     Attr,\n     Derive,\n     TraitAlias,\n+    Primitive,\n }\n \n crate trait GetDefId {\n@@ -1404,6 +1405,16 @@ impl Type {\n         matches!(self, Type::Generic(_))\n     }\n \n+    crate fn is_primitive(&self) -> bool {\n+        match self {\n+            Self::Primitive(_) => true,\n+            Self::BorrowedRef { ref type_, .. } | Self::RawPointer(_, ref type_) => {\n+                type_.is_primitive()\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     crate fn projection(&self) -> Option<(&Type, DefId, Symbol)> {\n         let (self_, trait_, name) = match self {\n             QPath { self_type, trait_, name } => (self_type, trait_, name),"}, {"sha": "695614f2702eea0f450f83a64213c4e205ad54ee", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=198e3aba8f00bc086ed6020f6420064e26a820c7", "patch": "@@ -171,11 +171,20 @@ crate fn get_real_types(\n     cx: &DocContext<'_>,\n     recurse: i32,\n ) -> FxHashSet<(Type, TypeKind)> {\n+    fn insert(res: &mut FxHashSet<(Type, TypeKind)>, cx: &DocContext<'_>, ty: Type) {\n+        if let Some(kind) = ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n+            res.insert((ty, kind));\n+        } else if ty.is_primitive() {\n+            // This is a primitive, let's store it as such.\n+            res.insert((ty, TypeKind::Primitive));\n+        }\n+    }\n     let mut res = FxHashSet::default();\n     if recurse >= 10 {\n         // FIXME: remove this whole recurse thing when the recursion bug is fixed\n         return res;\n     }\n+\n     if arg.is_full_generic() {\n         let arg_s = Symbol::intern(&arg.print(&cx.cache).to_string());\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n@@ -194,11 +203,7 @@ crate fn get_real_types(\n                             if !adds.is_empty() {\n                                 res.extend(adds);\n                             } else if !ty.is_full_generic() {\n-                                if let Some(kind) =\n-                                    ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx))\n-                                {\n-                                    res.insert((ty, kind));\n-                                }\n+                                insert(&mut res, cx, ty);\n                             }\n                         }\n                     }\n@@ -212,26 +217,22 @@ crate fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n-                        if let Some(kind) = ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n-                            res.insert((ty.clone(), kind));\n-                        }\n+                        insert(&mut res, cx, ty);\n                     }\n                 }\n             }\n         }\n     } else {\n-        if let Some(kind) = arg.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n-            res.insert((arg.clone(), kind));\n-        }\n+        insert(&mut res, cx, arg.clone());\n         if let Some(gens) = arg.generics() {\n             for gen in gens.iter() {\n                 if gen.is_full_generic() {\n                     let adds = get_real_types(generics, gen, cx, recurse + 1);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n-                } else if let Some(kind) = gen.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n-                    res.insert((gen.clone(), kind));\n+                } else {\n+                    insert(&mut res, cx, gen.clone());\n                 }\n             }\n         }"}, {"sha": "be2e419bdffa1f41206c2496d6341b2a8a658598", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=198e3aba8f00bc086ed6020f6420064e26a820c7", "patch": "@@ -119,6 +119,7 @@ impl From<clean::TypeKind> for ItemType {\n             clean::TypeKind::Attr => ItemType::ProcAttribute,\n             clean::TypeKind::Derive => ItemType::ProcDerive,\n             clean::TypeKind::TraitAlias => ItemType::TraitAlias,\n+            clean::TypeKind::Primitive => ItemType::Primitive,\n         }\n     }\n }"}, {"sha": "74a770b9548530d9b4caa460f8da31639aec6b6a", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198e3aba8f00bc086ed6020f6420064e26a820c7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=198e3aba8f00bc086ed6020f6420064e26a820c7", "patch": "@@ -78,7 +78,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 desc: item.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)),\n                 parent: Some(did),\n                 parent_idx: None,\n-                search_type: get_index_search_type(&item, None),\n+                search_type: get_index_search_type(&item, Some(cache)),\n             });\n             for alias in item.attrs.get_doc_aliases() {\n                 cache"}]}