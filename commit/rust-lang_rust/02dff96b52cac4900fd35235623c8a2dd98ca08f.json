{"sha": "02dff96b52cac4900fd35235623c8a2dd98ca08f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZGZmOTZiNTJjYWM0OTAwZmQzNTIzNTYyM2M4YTJkZDk4Y2EwOGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-04T19:28:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-04T19:28:40Z"}, "message": "Parse meta directives in crates.", "tree": {"sha": "d47452bf2290efcc0f7d1d774ac93e0f7456b570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d47452bf2290efcc0f7d1d774ac93e0f7456b570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02dff96b52cac4900fd35235623c8a2dd98ca08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02dff96b52cac4900fd35235623c8a2dd98ca08f", "html_url": "https://github.com/rust-lang/rust/commit/02dff96b52cac4900fd35235623c8a2dd98ca08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02dff96b52cac4900fd35235623c8a2dd98ca08f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "652cb484758a72811e16a574805ce60827daa153", "url": "https://api.github.com/repos/rust-lang/rust/commits/652cb484758a72811e16a574805ce60827daa153", "html_url": "https://github.com/rust-lang/rust/commit/652cb484758a72811e16a574805ce60827daa153"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "e9dee7ecda733f3e6b69218f3e2d7ece0e09cb2d", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02dff96b52cac4900fd35235623c8a2dd98ca08f/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02dff96b52cac4900fd35235623c8a2dd98ca08f/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=02dff96b52cac4900fd35235623c8a2dd98ca08f", "patch": "@@ -53,7 +53,7 @@ tag crate_directive_ {\n     cdir_src_mod(ident, option.t[filename]);\n     cdir_dir_mod(ident, option.t[filename], vec[@crate_directive]);\n     cdir_view_item(@view_item);\n-    cdir_meta(@meta_item);\n+    cdir_meta(vec[@meta_item]);\n     cdir_syntax(path);\n     cdir_auth(path, effect);\n }"}, {"sha": "f80c3bd51999c6d4a55604c0ef7fd3a47e293b75", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/02dff96b52cac4900fd35235623c8a2dd98ca08f/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02dff96b52cac4900fd35235623c8a2dd98ca08f/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=02dff96b52cac4900fd35235623c8a2dd98ca08f", "patch": "@@ -1564,14 +1564,14 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n                 case (ast.expr_if(_,_,_,_,_))   { ret false; }\n                 case (ast.expr_for(_,_,_,_))    { ret false; }\n                 case (ast.expr_for_each(_,_,_,_))\n-                                                { ret false; }\n+                    { ret false; }\n                 case (ast.expr_while(_,_,_))    { ret false; }\n                 case (ast.expr_do_while(_,_,_)) { ret false; }\n                 case (ast.expr_alt(_,_,_))      { ret false; }\n                 case (ast.expr_block(_,_))      { ret false; }\n                 case (ast.expr_assign(_,_,_))   { ret true; }\n                 case (ast.expr_assign_op(_,_,_,_))\n-                                                { ret true; }\n+                    { ret true; }\n                 case (ast.expr_field(_,_,_))    { ret true; }\n                 case (ast.expr_index(_,_,_))    { ret true; }\n                 case (ast.expr_path(_,_,_))     { ret true; }\n@@ -1583,16 +1583,8 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n                 case (ast.expr_check_expr(_))   { ret true; }\n             }\n         }\n-        case (ast.stmt_crate_directive(?cdir)) {\n-            alt (cdir.node) {\n-                case (ast.cdir_src_mod(_, _))    { ret true; }\n-                case (ast.cdir_view_item(_))     { ret true; }\n-                case (ast.cdir_meta(_))          { ret true; }\n-                case (ast.cdir_syntax(_))        { ret true; }\n-                case (ast.cdir_auth(_, _))       { ret true; }\n-                case (_)                         { ret false; }\n-            }\n-        }\n+        // We should not be calling this on a cdir.\n+        case (ast.stmt_crate_directive(?cdir))  { fail; }\n     }\n }\n \n@@ -1636,8 +1628,13 @@ impure fn parse_block(parser p) -> ast.block {\n                     case (none[@ast.expr]) {\n                         // Not an expression statement.\n                         stmts += vec(stmt);\n-                        if (stmt_ends_with_semi(stmt)) {\n-                            expect(p, token.SEMI);\n+                        // FIXME: crazy differentiation between conditions\n+                        // used in branches and binary expressions in rustboot\n+                        // means we cannot use && here. I know, right?\n+                        if (p.get_file_type() == SOURCE_FILE) {\n+                            if (stmt_ends_with_semi(stmt)) {\n+                                expect(p, token.SEMI);\n+                            }\n                         }\n                     }\n                 }\n@@ -2261,6 +2258,16 @@ impure fn parse_crate_directive(parser p) -> ast.crate_directive\n             ret spanned(lo, hi, ast.cdir_auth(n, e));\n         }\n \n+        case (token.META) {\n+            // FIXME: currently dropping meta clauses on the floor,\n+            // as there is no crate metadata system\n+            p.bump();\n+            auto mis = parse_meta(p);\n+            hi = p.get_span();\n+            expect(p, token.SEMI);\n+            ret spanned(lo, hi, ast.cdir_meta(mis));\n+        }\n+\n         case (token.MOD) {\n             p.bump();\n             auto id = parse_ident(p);"}]}