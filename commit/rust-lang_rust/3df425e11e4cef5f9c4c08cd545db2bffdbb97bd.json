{"sha": "3df425e11e4cef5f9c4c08cd545db2bffdbb97bd", "node_id": "C_kwDOAAsO6NoAKDNkZjQyNWUxMWU0Y2VmNWY5YzRjMDhjZDU0NWRiMmJmZmRiYjk3YmQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-03T18:10:28Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T17:45:59Z"}, "message": "bswap.i128 is now supported", "tree": {"sha": "604b9cf328002c4fe37ece4a96ec768433e09830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/604b9cf328002c4fe37ece4a96ec768433e09830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3df425e11e4cef5f9c4c08cd545db2bffdbb97bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3df425e11e4cef5f9c4c08cd545db2bffdbb97bd", "html_url": "https://github.com/rust-lang/rust/commit/3df425e11e4cef5f9c4c08cd545db2bffdbb97bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3df425e11e4cef5f9c4c08cd545db2bffdbb97bd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83dc7d1a123d2b2e0b0b84aa3d0ae6dc4a59fd4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/83dc7d1a123d2b2e0b0b84aa3d0ae6dc4a59fd4e", "html_url": "https://github.com/rust-lang/rust/commit/83dc7d1a123d2b2e0b0b84aa3d0ae6dc4a59fd4e"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "7a380acf798572a7606130959a7517cfecb2462b", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3df425e11e4cef5f9c4c08cd545db2bffdbb97bd/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df425e11e4cef5f9c4c08cd545db2bffdbb97bd/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=3df425e11e4cef5f9c4c08cd545db2bffdbb97bd", "patch": "@@ -636,16 +636,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n \n-            let res = match fx.bcx.func.dfg.value_type(val) {\n-                types::I8 => val,\n-                types::I128 => {\n-                    // FIXME(bytecodealliance/wasmtime#1092) bswap.i128 is not yet implemented\n-                    let (lsb, msb) = fx.bcx.ins().isplit(val);\n-                    let lsb_swap = fx.bcx.ins().bswap(lsb);\n-                    let msb_swap = fx.bcx.ins().bswap(msb);\n-                    fx.bcx.ins().iconcat(msb_swap, lsb_swap)\n-                }\n-                _ => fx.bcx.ins().bswap(val),\n+            let res = if fx.bcx.func.dfg.value_type(val) == types::I8 {\n+                val\n+            } else {\n+                fx.bcx.ins().bswap(val)\n             };\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);"}]}