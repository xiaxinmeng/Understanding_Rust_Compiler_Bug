{"sha": "0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMTBiOWRjOWM5ZDM1Mzc5YThkMzVkMDYwZmQzNTFhYjljNTY3YTg=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-09-24T18:38:15Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-09-24T18:38:15Z"}, "message": "Fix free lifetime vars in HashMap's iterators", "tree": {"sha": "a872eda0f57936a0d7c4c74d3678b7f3099a1c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a872eda0f57936a0d7c4c74d3678b7f3099a1c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "html_url": "https://github.com/rust-lang/rust/commit/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8599ecdb30de6c54852e863d748e70171c8c5f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8599ecdb30de6c54852e863d748e70171c8c5f8", "html_url": "https://github.com/rust-lang/rust/commit/b8599ecdb30de6c54852e863d748e70171c8c5f8"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "f542326d8bc402638e2028b9238fcbefbd846a59", "filename": "src/libstd/collections/hashmap/table.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs?ref=0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "patch": "@@ -663,7 +663,8 @@ impl<K, V> RawTable<K, V> {\n             raw: self.first_bucket_raw(),\n             hashes_end: unsafe {\n                 self.hashes.offset(self.capacity as int)\n-            }\n+            },\n+            marker: marker::ContravariantLifetime,\n         }\n     }\n \n@@ -682,8 +683,14 @@ impl<K, V> RawTable<K, V> {\n     }\n \n     pub fn into_iter(self) -> MoveEntries<K, V> {\n+        let RawBuckets { raw, hashes_end, .. } = self.raw_buckets();\n+        // Replace the marker regardless of lifetime bounds on parameters.\n         MoveEntries {\n-            iter: self.raw_buckets(),\n+            iter: RawBuckets {\n+                raw: raw,\n+                hashes_end: hashes_end,\n+                marker: marker::ContravariantLifetime,\n+            },\n             table: self,\n         }\n     }\n@@ -695,7 +702,8 @@ impl<K, V> RawTable<K, V> {\n         RevMoveBuckets {\n             raw: raw_bucket.offset(self.capacity as int),\n             hashes_end: raw_bucket.hash,\n-            elems_left: self.size\n+            elems_left: self.size,\n+            marker:     marker::ContravariantLifetime,\n         }\n     }\n }\n@@ -704,7 +712,8 @@ impl<K, V> RawTable<K, V> {\n /// this interface is safe, it's not used outside this module.\n struct RawBuckets<'a, K, V> {\n     raw: RawBucket<K, V>,\n-    hashes_end: *mut u64\n+    hashes_end: *mut u64,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n impl<'a, K, V> Iterator<RawBucket<K, V>> for RawBuckets<'a, K, V> {\n@@ -730,7 +739,8 @@ impl<'a, K, V> Iterator<RawBucket<K, V>> for RawBuckets<'a, K, V> {\n struct RevMoveBuckets<'a, K, V> {\n     raw: RawBucket<K, V>,\n     hashes_end: *mut u64,\n-    elems_left: uint\n+    elems_left: uint,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n impl<'a, K, V> Iterator<(K, V)> for RevMoveBuckets<'a, K, V> {"}, {"sha": "d9d7705fef6fba2a9e6729f07a28838f616c206f", "filename": "src/test/compile-fail/hashmap-iter-value-lifetime.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs?ref=0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut my_stuff = std::collections::HashMap::new();\n+    my_stuff.insert(0i, 42i);\n+\n+    let (_, thing) = my_stuff.iter().next().unwrap();\n+\n+    my_stuff.clear(); //~ ERROR cannot borrow\n+\n+    println!(\"{}\", *thing);\n+}"}, {"sha": "5bd6c73df1ab200fcc2f5ef7f483595520d85501", "filename": "src/test/compile-fail/hashmap-lifetimes.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs?ref=0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut my_stuff = std::collections::HashMap::new();\n+    my_stuff.insert(0i, 42i);\n+\n+    let mut it = my_stuff.iter();\n+    my_stuff.swap(1, 43); //~ ERROR cannot borrow\n+}"}]}