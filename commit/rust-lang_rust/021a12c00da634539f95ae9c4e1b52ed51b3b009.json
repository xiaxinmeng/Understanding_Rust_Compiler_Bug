{"sha": "021a12c00da634539f95ae9c4e1b52ed51b3b009", "node_id": "C_kwDOAAsO6NoAKDAyMWExMmMwMGRhNjM0NTM5Zjk1YWU5YzRlMWI1MmVkNTFiM2IwMDk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T17:30:05Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T17:30:05Z"}, "message": "Sprinkle some `#[inline]` in `rustc_data_structures::tagged_ptr`", "tree": {"sha": "3cc52026c53394e0650728f45188413abbcbbcfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc52026c53394e0650728f45188413abbcbbcfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/021a12c00da634539f95ae9c4e1b52ed51b3b009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/021a12c00da634539f95ae9c4e1b52ed51b3b009", "html_url": "https://github.com/rust-lang/rust/commit/021a12c00da634539f95ae9c4e1b52ed51b3b009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/021a12c00da634539f95ae9c4e1b52ed51b3b009/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b61a4ad618c1abc2af43a58695de185ef1e513", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b61a4ad618c1abc2af43a58695de185ef1e513", "html_url": "https://github.com/rust-lang/rust/commit/91b61a4ad618c1abc2af43a58695de185ef1e513"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "e893a2c7813469e745d53766674c6ea1a8d25329", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/021a12c00da634539f95ae9c4e1b52ed51b3b009/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a12c00da634539f95ae9c4e1b52ed51b3b009/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=021a12c00da634539f95ae9c4e1b52ed51b3b009", "patch": "@@ -82,11 +82,13 @@ where\n     /// drop, use [`TaggedPtr`] instead.\n     ///\n     /// [`TaggedPtr`]: crate::tagged_ptr::TaggedPtr\n+    #[inline]\n     pub fn new(pointer: P, tag: T) -> Self {\n         Self { packed: Self::pack(P::into_ptr(pointer), tag), tag_ghost: PhantomData }\n     }\n \n     /// Retrieves the pointer.\n+    #[inline]\n     pub fn pointer(self) -> P\n     where\n         P: Copy,\n@@ -123,6 +125,7 @@ where\n     /// according to `self.packed` encoding scheme.\n     ///\n     /// [`P::into_ptr`]: Pointer::into_ptr\n+    #[inline]\n     fn pack(ptr: NonNull<P::Target>, tag: T) -> NonNull<P::Target> {\n         // Trigger assert!\n         let () = Self::ASSERTION;\n@@ -145,6 +148,7 @@ where\n     }\n \n     /// Retrieves the original raw pointer from `self.packed`.\n+    #[inline]\n     pub(super) fn pointer_raw(&self) -> NonNull<P::Target> {\n         self.packed.map_addr(|addr| unsafe { NonZeroUsize::new_unchecked(addr.get() << T::BITS) })\n     }\n@@ -184,6 +188,7 @@ where\n     P: Pointer + Copy,\n     T: Tag,\n {\n+    #[inline]\n     fn clone(&self) -> Self {\n         *self\n     }\n@@ -196,6 +201,7 @@ where\n {\n     type Target = P::Target;\n \n+    #[inline]\n     fn deref(&self) -> &Self::Target {\n         // Safety:\n         // `pointer_raw` returns the original pointer from `P::into_ptr` which,\n@@ -209,6 +215,7 @@ where\n     P: Pointer + DerefMut,\n     T: Tag,\n {\n+    #[inline]\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         // Safety:\n         // `pointer_raw` returns the original pointer from `P::into_ptr` which,\n@@ -235,6 +242,7 @@ where\n     P: Pointer,\n     T: Tag,\n {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.packed == other.packed\n     }\n@@ -252,6 +260,7 @@ where\n     P: Pointer,\n     T: Tag,\n {\n+    #[inline]\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         self.packed.hash(state);\n     }"}, {"sha": "4e42b5b4afe8a87ee5f6ef3cb928f1991df762f3", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a12c00da634539f95ae9c4e1b52ed51b3b009/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a12c00da634539f95ae9c4e1b52ed51b3b009/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs?ref=021a12c00da634539f95ae9c4e1b52ed51b3b009", "patch": "@@ -30,16 +30,19 @@ where\n     T: Tag,\n {\n     /// Tags `pointer` with `tag`.\n+    #[inline]\n     pub fn new(pointer: P, tag: T) -> Self {\n         TaggedPtr { raw: CopyTaggedPtr::new(pointer, tag) }\n     }\n \n     /// Retrieves the tag.\n+    #[inline]\n     pub fn tag(&self) -> T {\n         self.raw.tag()\n     }\n \n     /// Sets the tag to a new value.\n+    #[inline]\n     pub fn set_tag(&mut self, tag: T) {\n         self.raw.set_tag(tag)\n     }\n@@ -63,6 +66,8 @@ where\n     T: Tag,\n {\n     type Target = P::Target;\n+\n+    #[inline]\n     fn deref(&self) -> &Self::Target {\n         self.raw.deref()\n     }\n@@ -73,6 +78,7 @@ where\n     P: Pointer + DerefMut,\n     T: Tag,\n {\n+    #[inline]\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         self.raw.deref_mut()\n     }\n@@ -108,6 +114,7 @@ where\n     P: Pointer,\n     T: Tag,\n {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.raw.eq(&other.raw)\n     }\n@@ -125,6 +132,7 @@ where\n     P: Pointer,\n     T: Tag,\n {\n+    #[inline]\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         self.raw.hash(state);\n     }"}]}