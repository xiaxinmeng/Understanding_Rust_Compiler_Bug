{"sha": "641c4909e4de0334c83372b4795388d98cfd257a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MWM0OTA5ZTRkZTAzMzRjODMzNzJiNDc5NTM4OGQ5OGNmZDI1N2E=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-11-15T13:23:20Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-11-20T17:22:40Z"}, "message": "Add std::iter::successors", "tree": {"sha": "01dd283299e54bf55d53ed02ccb7e24e5cb63866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01dd283299e54bf55d53ed02ccb7e24e5cb63866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641c4909e4de0334c83372b4795388d98cfd257a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641c4909e4de0334c83372b4795388d98cfd257a", "html_url": "https://github.com/rust-lang/rust/commit/641c4909e4de0334c83372b4795388d98cfd257a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641c4909e4de0334c83372b4795388d98cfd257a/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22228186c0d373774a117375c2c264024bfd4b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/22228186c0d373774a117375c2c264024bfd4b48", "html_url": "https://github.com/rust-lang/rust/commit/22228186c0d373774a117375c2c264024bfd4b48"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "5f45cd927b8973ac47965c71faeb2cd5c49260c6", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=641c4909e4de0334c83372b4795388d98cfd257a", "patch": "@@ -340,7 +340,7 @@ pub use self::sources::{Empty, empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::sources::{Once, once};\n #[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n-pub use self::sources::{Unfold, unfold};\n+pub use self::sources::{Unfold, unfold, Successors, successors};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};"}, {"sha": "7f559652392226528a833e09c4e249fd75dd723e", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=641c4909e4de0334c83372b4795388d98cfd257a", "patch": "@@ -471,3 +471,79 @@ impl<St: fmt::Debug, F> fmt::Debug for Unfold<St, F> {\n             .finish()\n     }\n }\n+\n+/// Creates a new iterator where each successive item is computed based on the preceding one.\n+///\n+/// The iterator starts with the given first item (if any)\n+/// and calls the given `FnMut(&T) -> Option<T>` closure to compute each item\u2019s successor.\n+///\n+/// ```\n+/// #![feature(iter_unfold)]\n+/// use std::iter::successors;\n+///\n+/// let powers_of_10 = successors(Some(1_u16), |n| n.checked_mul(10));\n+/// assert_eq!(powers_of_10.collect::<Vec<_>>(), &[1, 10, 100, 1_000, 10_000]);\n+/// ```\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+pub fn successors<T, F>(first: Option<T>, succ: F) -> Successors<T, F>\n+    where F: FnMut(&T) -> Option<T>\n+{\n+    // If this function returned `impl Iterator<Item=T>`\n+    // it could be based on `unfold` and not need a dedicated type.\n+    // However having a named `Successors<T, F>` type allows it to be `Clone` when `T` and `F` are.\n+    Successors {\n+        next: first,\n+        succ,\n+    }\n+}\n+\n+/// An new iterator where each successive item is computed based on the preceding one.\n+///\n+/// This `struct` is created by the [`successors`] function.\n+/// See its documentation for more.\n+///\n+/// [`successors`]: fn.successors.html\n+#[derive(Clone)]\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+pub struct Successors<T, F> {\n+    next: Option<T>,\n+    succ: F,\n+}\n+\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+impl<T, F> Iterator for Successors<T, F>\n+    where F: FnMut(&T) -> Option<T>\n+{\n+    type Item = T;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.next.take().map(|item| {\n+            self.next = (self.succ)(&item);\n+            item\n+        })\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        if self.next.is_some() {\n+            (1, None)\n+        } else {\n+            (0, Some(0))\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+impl<T, F> FusedIterator for Successors<T, F>\n+    where F: FnMut(&T) -> Option<T>\n+{}\n+\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+impl<T: fmt::Debug, F> fmt::Debug for Successors<T, F> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Successors\")\n+            .field(\"next\", &self.next)\n+            .finish()\n+    }\n+}"}, {"sha": "495483db5551cc5ff8ff792605e83f59ab8c744a", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=641c4909e4de0334c83372b4795388d98cfd257a", "patch": "@@ -1759,6 +1759,17 @@ fn test_repeat_with_take_collect() {\n     assert_eq!(v, vec![1, 2, 4, 8, 16]);\n }\n \n+#[test]\n+fn test_successors() {\n+    let mut powers_of_10 = successors(Some(1_u16), |n| n.checked_mul(10));\n+    assert_eq!(powers_of_10.by_ref().collect::<Vec<_>>(), &[1, 10, 100, 1_000, 10_000]);\n+    assert_eq!(powers_of_10.next(), None);\n+\n+    let mut empty = successors(None::<u32>, |_| unimplemented!());\n+    assert_eq!(empty.next(), None);\n+    assert_eq!(empty.next(), None);\n+}\n+\n #[test]\n fn test_fuse() {\n     let mut it = 0..3;"}, {"sha": "7d62b4fa90f203cbb4f6c682cc1a7666194ffa63", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c4909e4de0334c83372b4795388d98cfd257a/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=641c4909e4de0334c83372b4795388d98cfd257a", "patch": "@@ -19,6 +19,7 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n+#![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}]}