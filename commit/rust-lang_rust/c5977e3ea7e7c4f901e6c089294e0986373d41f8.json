{"sha": "c5977e3ea7e7c4f901e6c089294e0986373d41f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTc3ZTNlYTdlN2M0ZjkwMWU2YzA4OTI5NGUwOTg2MzczZDQxZjg=", "commit": {"author": {"name": "jD91mZM2", "email": "me@krake.one", "date": "2018-06-14T16:21:21Z"}, "committer": {"name": "jD91mZM2", "email": "me@krake.one", "date": "2018-06-26T18:31:35Z"}, "message": "Custom feature gate (I think?)", "tree": {"sha": "5b57c6f57fc8611504f4d1a6b003e44a9cf4e815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b57c6f57fc8611504f4d1a6b003e44a9cf4e815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5977e3ea7e7c4f901e6c089294e0986373d41f8", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEvF2uTsFosfm5TJhQMFXVRymnJmYFAlsyhocACgkQMFXVRymn\nJmZ2GAgAhxxsTvtYX3vdsQY0PFH7CDgZJCzKCNNOGfRpSVW0R/Ewaq0PkmrlATde\nSjfEGBDZW1WgDgqUum2t0TfibGDbErLJQ9gPbORtFIF1yDztVMLMV9b4wV8fXSxF\n/bGvbGWWKatMESK0OFy8xvjJFAvvAF4lK76+aV/wpAb+0vEHH5wcAvQtKoBfF3bE\n/O+CTfAILBrpyCntlLB+UJ47k72OkSdYo+MSDmG4cEWcHY1bQZu08QsqxTv25vc6\nLW9mOa9dCVpLyVjQYVG1QiSXKs0hk4RiWEUH4zCx41rAmzy04rVgAIZogm4ehvJx\npQHa9RW7xUH+05hIDz7YQKporDlElA==\n=7Byu\n-----END PGP SIGNATURE-----", "payload": "tree 5b57c6f57fc8611504f4d1a6b003e44a9cf4e815\nparent 419500710d40d49eadc2dbea37aa83a64b2bf6d3\nauthor jD91mZM2 <me@krake.one> 1528993281 +0200\ncommitter jD91mZM2 <me@krake.one> 1530037895 +0200\n\nCustom feature gate (I think?)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5977e3ea7e7c4f901e6c089294e0986373d41f8", "html_url": "https://github.com/rust-lang/rust/commit/c5977e3ea7e7c4f901e6c089294e0986373d41f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5977e3ea7e7c4f901e6c089294e0986373d41f8/comments", "author": {"login": "jD91mZM2", "id": 12830969, "node_id": "MDQ6VXNlcjEyODMwOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/12830969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jD91mZM2", "html_url": "https://github.com/jD91mZM2", "followers_url": "https://api.github.com/users/jD91mZM2/followers", "following_url": "https://api.github.com/users/jD91mZM2/following{/other_user}", "gists_url": "https://api.github.com/users/jD91mZM2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jD91mZM2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jD91mZM2/subscriptions", "organizations_url": "https://api.github.com/users/jD91mZM2/orgs", "repos_url": "https://api.github.com/users/jD91mZM2/repos", "events_url": "https://api.github.com/users/jD91mZM2/events{/privacy}", "received_events_url": "https://api.github.com/users/jD91mZM2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jD91mZM2", "id": 12830969, "node_id": "MDQ6VXNlcjEyODMwOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/12830969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jD91mZM2", "html_url": "https://github.com/jD91mZM2", "followers_url": "https://api.github.com/users/jD91mZM2/followers", "following_url": "https://api.github.com/users/jD91mZM2/following{/other_user}", "gists_url": "https://api.github.com/users/jD91mZM2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jD91mZM2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jD91mZM2/subscriptions", "organizations_url": "https://api.github.com/users/jD91mZM2/orgs", "repos_url": "https://api.github.com/users/jD91mZM2/repos", "events_url": "https://api.github.com/users/jD91mZM2/events{/privacy}", "received_events_url": "https://api.github.com/users/jD91mZM2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419500710d40d49eadc2dbea37aa83a64b2bf6d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/419500710d40d49eadc2dbea37aa83a64b2bf6d3", "html_url": "https://github.com/rust-lang/rust/commit/419500710d40d49eadc2dbea37aa83a64b2bf6d3"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "b95f0dd02f1e11dd3503e781b68895c16d61a0f5", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c5977e3ea7e7c4f901e6c089294e0986373d41f8/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5977e3ea7e7c4f901e6c089294e0986373d41f8/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=c5977e3ea7e7c4f901e6c089294e0986373d41f8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#![stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n \n //! Unix-specific networking functionality\n \n@@ -36,7 +36,7 @@ use sys::{cvt, fd::FileDesc, syscall};\n /// };\n /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n /// ```\n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n #[derive(Clone)]\n pub struct SocketAddr;\n \n@@ -65,12 +65,12 @@ impl SocketAddr {\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// assert_eq!(addr.as_pathname(), None);\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn as_pathname(&self) -> Option<&Path> {\n         None\n     }\n }\n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl fmt::Debug for SocketAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"SocketAddr\")\n@@ -91,10 +91,10 @@ impl fmt::Debug for SocketAddr {\n /// stream.read_to_string(&mut response).unwrap();\n /// println!(\"{}\", response);\n /// ```\n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n pub struct UnixStream(FileDesc);\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl fmt::Debug for UnixStream {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixStream\");\n@@ -125,7 +125,7 @@ impl UnixStream {\n     ///     }\n     /// };\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn connect<P: AsRef<Path>>(path: P) -> io::Result<UnixStream> {\n         if let Some(s) = path.as_ref().to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CLOEXEC))\n@@ -156,7 +156,7 @@ impl UnixStream {\n     ///     }\n     /// };\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn pair() -> io::Result<(UnixStream, UnixStream)> {\n         let server = cvt(syscall::open(\"chan:\", syscall::O_CREAT | syscall::O_CLOEXEC))\n             .map(FileDesc::new)?;\n@@ -180,7 +180,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixStream> {\n         self.0.duplicate().map(UnixStream)\n     }\n@@ -195,7 +195,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::local_addr unimplemented on redox\"))\n     }\n@@ -210,7 +210,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::peer_addr unimplemented on redox\"))\n     }\n@@ -249,7 +249,7 @@ impl UnixStream {\n     /// let err = result.unwrap_err();\n     /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn set_read_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_read_timeout unimplemented on redox\"))\n     }\n@@ -288,7 +288,7 @@ impl UnixStream {\n     /// let err = result.unwrap_err();\n     /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn set_write_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_write_timeout unimplemented on redox\"))\n     }\n@@ -305,7 +305,7 @@ impl UnixStream {\n     /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n     /// assert_eq!(socket.read_timeout().unwrap(), Some(Duration::new(1, 0)));\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::read_timeout unimplemented on redox\"))\n     }\n@@ -322,7 +322,7 @@ impl UnixStream {\n     /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n     /// assert_eq!(socket.write_timeout().unwrap(), Some(Duration::new(1, 0)));\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::write_timeout unimplemented on redox\"))\n     }\n@@ -337,7 +337,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n@@ -354,7 +354,7 @@ impl UnixStream {\n     ///     println!(\"Got error: {:?}\", err);\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n@@ -376,13 +376,13 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn shutdown(&self, _how: Shutdown) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::shutdown unimplemented on redox\"))\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl io::Read for UnixStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         io::Read::read(&mut &*self, buf)\n@@ -394,7 +394,7 @@ impl io::Read for UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl<'a> io::Read for &'a UnixStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.read(buf)\n@@ -406,7 +406,7 @@ impl<'a> io::Read for &'a UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl io::Write for UnixStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         io::Write::write(&mut &*self, buf)\n@@ -417,7 +417,7 @@ impl io::Write for UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl<'a> io::Write for &'a UnixStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n@@ -428,21 +428,21 @@ impl<'a> io::Write for &'a UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl AsRawFd for UnixStream {\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.raw()\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl FromRawFd for UnixStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixStream {\n         UnixStream(FileDesc::new(fd))\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl IntoRawFd for UnixStream {\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_raw()\n@@ -477,10 +477,10 @@ impl IntoRawFd for UnixStream {\n ///     }\n /// }\n /// ```\n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n pub struct UnixListener(FileDesc);\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl fmt::Debug for UnixListener {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixListener\");\n@@ -508,7 +508,7 @@ impl UnixListener {\n     ///     }\n     /// };\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn bind<P: AsRef<Path>>(path: P) -> io::Result<UnixListener> {\n         if let Some(s) = path.as_ref().to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CREAT | syscall::O_CLOEXEC))\n@@ -542,7 +542,7 @@ impl UnixListener {\n     ///     Err(e) => println!(\"accept function failed: {:?}\", e),\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn accept(&self) -> io::Result<(UnixStream, SocketAddr)> {\n         self.0.duplicate_path(b\"listen\").map(|fd| (UnixStream(fd), SocketAddr))\n     }\n@@ -562,7 +562,7 @@ impl UnixListener {\n     ///\n     /// let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixListener> {\n         self.0.duplicate().map(UnixListener)\n     }\n@@ -578,7 +578,7 @@ impl UnixListener {\n     ///\n     /// let addr = listener.local_addr().expect(\"Couldn't get local address\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixListener::local_addr unimplemented on redox\"))\n     }\n@@ -594,7 +594,7 @@ impl UnixListener {\n     ///\n     /// listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n@@ -612,7 +612,7 @@ impl UnixListener {\n     ///     println!(\"Got error: {:?}\", err);\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n@@ -648,34 +648,34 @@ impl UnixListener {\n     ///     }\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n     pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n         Incoming { listener: self }\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl AsRawFd for UnixListener {\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.raw()\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl FromRawFd for UnixListener {\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixListener {\n         UnixListener(FileDesc::new(fd))\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl IntoRawFd for UnixListener {\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_raw()\n     }\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl<'a> IntoIterator for &'a UnixListener {\n     type Item = io::Result<UnixStream>;\n     type IntoIter = Incoming<'a>;\n@@ -716,12 +716,12 @@ impl<'a> IntoIterator for &'a UnixListener {\n /// }\n /// ```\n #[derive(Debug)]\n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n pub struct Incoming<'a> {\n     listener: &'a UnixListener,\n }\n \n-#[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.27.0\")]\n impl<'a> Iterator for Incoming<'a> {\n     type Item = io::Result<UnixStream>;\n "}]}