{"sha": "ac80d4117562aa070717fb2ebbbc069be712d906", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjODBkNDExNzU2MmFhMDcwNzE3ZmIyZWJiYmMwNjliZTcxMmQ5MDY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-06-16T22:56:14Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-08T14:42:48Z"}, "message": "trans: Remove tracking of translation item state.\n\nThe data tracked here was meant to compare the output of the\ntranslation item collector to the set of translation items found\nby the on-demand translator.", "tree": {"sha": "96dea662d0c661073a14ab6fe243d75b9b5f34c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96dea662d0c661073a14ab6fe243d75b9b5f34c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac80d4117562aa070717fb2ebbbc069be712d906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac80d4117562aa070717fb2ebbbc069be712d906", "html_url": "https://github.com/rust-lang/rust/commit/ac80d4117562aa070717fb2ebbbc069be712d906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac80d4117562aa070717fb2ebbbc069be712d906/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b149b9d19bb4dfbda4145b2667d87168da1e57d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b149b9d19bb4dfbda4145b2667d87168da1e57d6", "html_url": "https://github.com/rust-lang/rust/commit/b149b9d19bb4dfbda4145b2667d87168da1e57d6"}], "stats": {"total": 157, "additions": 8, "deletions": 149}, "files": [{"sha": "c080d1f06d00f2a0d9a5bdc1d2f0f817f059d546", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ac80d4117562aa070717fb2ebbbc069be712d906", "patch": "@@ -58,7 +58,7 @@ use callee::{Callee, CallArgs, ArgExprs, ArgVals};\n use cleanup::{self, CleanupMethods, DropHint};\n use closure;\n use common::{Block, C_bool, C_bytes_in_context, C_i32, C_int, C_uint, C_integral};\n-use collector::{self, TransItemState, TransItemCollectionMode};\n+use collector::{self, TransItemCollectionMode};\n use common::{C_null, C_struct_in_context, C_u64, C_u8, C_undef};\n use common::{CrateContext, DropFlagHintsMap, Field, FunctionContext};\n use common::{Result, NodeIdAndSpan, VariantInfo};\n@@ -1830,10 +1830,6 @@ pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                closure_env: closure::ClosureEnv) {\n     ccx.stats().n_closures.set(ccx.stats().n_closures.get() + 1);\n \n-    if collector::collecting_debug_information(ccx.shared()) {\n-        ccx.record_translation_item_as_generated(TransItem::Fn(instance));\n-    }\n-\n     let _icx = push_ctxt(\"trans_closure\");\n     if !ccx.sess().no_landing_pads() {\n         attributes::emit_uwtable(llfndecl, true);\n@@ -2661,7 +2657,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    collector::print_collection_results(&shared_ccx);\n     symbol_names_test::report_symbol_names(&shared_ccx);\n \n     {\n@@ -2881,7 +2876,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n         let mut ccx_map = scx.translation_items().borrow_mut();\n \n         for trans_item in items.iter().cloned() {\n-            ccx_map.insert(trans_item, TransItemState::PredictedButNotGenerated);\n+            ccx_map.insert(trans_item);\n         }\n     }\n "}, {"sha": "ba2cd2ba699926ca40e274f5e015f590b2c04f19", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=ac80d4117562aa070717fb2ebbbc069be712d906", "patch": "@@ -1271,112 +1271,3 @@ fn visit_mir_and_promoted<'tcx, V: MirVisitor<'tcx>>(mut visitor: V, mir: &mir::\n         visitor.visit_mir(promoted);\n     }\n }\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum TransItemState {\n-    PredictedAndGenerated,\n-    PredictedButNotGenerated,\n-    NotPredictedButGenerated,\n-}\n-\n-pub fn collecting_debug_information(scx: &SharedCrateContext) -> bool {\n-    return cfg!(debug_assertions) &&\n-           scx.sess().opts.debugging_opts.print_trans_items.is_some();\n-}\n-\n-pub fn print_collection_results<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>) {\n-    use std::hash::{Hash, SipHasher, Hasher};\n-\n-    if !collecting_debug_information(scx) {\n-        return;\n-    }\n-\n-    fn hash<T: Hash>(t: &T) -> u64 {\n-        let mut s = SipHasher::new();\n-        t.hash(&mut s);\n-        s.finish()\n-    }\n-\n-    let trans_items = scx.translation_items().borrow();\n-\n-    {\n-        // Check for duplicate item keys\n-        let mut item_keys = FnvHashMap();\n-\n-        for (item, item_state) in trans_items.iter() {\n-            let k = item.to_string(scx.tcx());\n-\n-            if item_keys.contains_key(&k) {\n-                let prev: (TransItem, TransItemState) = item_keys[&k];\n-                debug!(\"DUPLICATE KEY: {}\", k);\n-                debug!(\" (1) {:?}, {:?}, hash: {}, raw: {}\",\n-                       prev.0,\n-                       prev.1,\n-                       hash(&prev.0),\n-                       prev.0.to_raw_string());\n-\n-                debug!(\" (2) {:?}, {:?}, hash: {}, raw: {}\",\n-                       *item,\n-                       *item_state,\n-                       hash(item),\n-                       item.to_raw_string());\n-            } else {\n-                item_keys.insert(k, (*item, *item_state));\n-            }\n-        }\n-    }\n-\n-    let mut predicted_but_not_generated = FnvHashSet();\n-    let mut not_predicted_but_generated = FnvHashSet();\n-    let mut predicted = FnvHashSet();\n-    let mut generated = FnvHashSet();\n-\n-    for (item, item_state) in trans_items.iter() {\n-        let item_key = item.to_string(scx.tcx());\n-\n-        match *item_state {\n-            TransItemState::PredictedAndGenerated => {\n-                predicted.insert(item_key.clone());\n-                generated.insert(item_key);\n-            }\n-            TransItemState::PredictedButNotGenerated => {\n-                predicted_but_not_generated.insert(item_key.clone());\n-                predicted.insert(item_key);\n-            }\n-            TransItemState::NotPredictedButGenerated => {\n-                not_predicted_but_generated.insert(item_key.clone());\n-                generated.insert(item_key);\n-            }\n-        }\n-    }\n-\n-    debug!(\"Total number of translation items predicted: {}\", predicted.len());\n-    debug!(\"Total number of translation items generated: {}\", generated.len());\n-    debug!(\"Total number of translation items predicted but not generated: {}\",\n-           predicted_but_not_generated.len());\n-    debug!(\"Total number of translation items not predicted but generated: {}\",\n-           not_predicted_but_generated.len());\n-\n-    if generated.len() > 0 {\n-        debug!(\"Failed to predict {}% of translation items\",\n-               (100 * not_predicted_but_generated.len()) / generated.len());\n-    }\n-    if generated.len() > 0 {\n-        debug!(\"Predict {}% too many translation items\",\n-               (100 * predicted_but_not_generated.len()) / generated.len());\n-    }\n-\n-    debug!(\"\");\n-    debug!(\"Not predicted but generated:\");\n-    debug!(\"============================\");\n-    for item in not_predicted_but_generated {\n-        debug!(\" - {}\", item);\n-    }\n-\n-    debug!(\"\");\n-    debug!(\"Predicted but not generated:\");\n-    debug!(\"============================\");\n-    for item in predicted_but_not_generated {\n-        debug!(\" - {}\", item);\n-    }\n-}"}, {"sha": "5732fded362f58fd132c16b8313be3ac021783b9", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=ac80d4117562aa070717fb2ebbbc069be712d906", "patch": "@@ -21,7 +21,6 @@ use rustc::hir::map as hir_map;\n use {abi, adt, closure, debuginfo, expr, machine};\n use base::{self, push_ctxt};\n use callee::Callee;\n-use collector;\n use trans_item::TransItem;\n use common::{type_is_sized, C_nil, const_get_elt};\n use common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n@@ -1140,11 +1139,6 @@ pub fn trans_static(ccx: &CrateContext,\n                     id: ast::NodeId,\n                     attrs: &[ast::Attribute])\n                     -> Result<ValueRef, ConstEvalErr> {\n-\n-    if collector::collecting_debug_information(ccx.shared()) {\n-        ccx.record_translation_item_as_generated(TransItem::Static(id));\n-    }\n-\n     unsafe {\n         let _icx = push_ctxt(\"trans_static\");\n         let def_id = ccx.tcx().map.local_def_id(id);"}, {"sha": "b8d231db40a2af48aeda9bc1061b5f3f580f20a2", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=ac80d4117562aa070717fb2ebbbc069be712d906", "patch": "@@ -28,7 +28,6 @@ use mir::CachedMir;\n use monomorphize::Instance;\n \n use partitioning::CodegenUnit;\n-use collector::TransItemState;\n use trans_item::TransItem;\n use type_::{Type, TypeNames};\n use rustc::ty::subst::{Substs, VecPerParamSpace};\n@@ -37,7 +36,7 @@ use session::config::NoDebugInfo;\n use session::Session;\n use symbol_map::SymbolMap;\n use util::sha2::Sha256;\n-use util::nodemap::{NodeMap, NodeSet, DefIdMap, FnvHashMap};\n+use util::nodemap::{NodeMap, NodeSet, DefIdMap, FnvHashMap, FnvHashSet};\n \n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n@@ -85,7 +84,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n \n     use_dll_storage_attrs: bool,\n \n-    translation_items: RefCell<FnvHashMap<TransItem<'tcx>, TransItemState>>,\n+    translation_items: RefCell<FnvHashSet<TransItem<'tcx>>>,\n     trait_cache: RefCell<DepTrackingMap<TraitSelectionCache<'tcx>>>,\n }\n \n@@ -419,7 +418,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             check_overflow: check_overflow,\n             check_drop_flag_for_sanity: check_drop_flag_for_sanity,\n             use_dll_storage_attrs: use_dll_storage_attrs,\n-            translation_items: RefCell::new(FnvHashMap()),\n+            translation_items: RefCell::new(FnvHashSet()),\n             trait_cache: RefCell::new(DepTrackingMap::new(tcx.dep_graph.clone())),\n         }\n     }\n@@ -482,7 +481,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         }\n     }\n \n-    pub fn translation_items(&self) -> &RefCell<FnvHashMap<TransItem<'tcx>, TransItemState>> {\n+    pub fn translation_items(&self) -> &RefCell<FnvHashSet<TransItem<'tcx>>> {\n         &self.translation_items\n     }\n \n@@ -902,24 +901,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &*self.local().symbol_map\n     }\n \n-    pub fn translation_items(&self) -> &RefCell<FnvHashMap<TransItem<'tcx>, TransItemState>> {\n+    pub fn translation_items(&self) -> &RefCell<FnvHashSet<TransItem<'tcx>>> {\n         &self.shared.translation_items\n     }\n \n-    pub fn record_translation_item_as_generated(&self, cgi: TransItem<'tcx>) {\n-        if self.sess().opts.debugging_opts.print_trans_items.is_none() {\n-            return;\n-        }\n-\n-        let mut codegen_items = self.translation_items().borrow_mut();\n-\n-        if codegen_items.contains_key(&cgi) {\n-            codegen_items.insert(cgi, TransItemState::PredictedAndGenerated);\n-        } else {\n-            codegen_items.insert(cgi, TransItemState::NotPredictedButGenerated);\n-        }\n-    }\n-\n     /// Given the def-id of some item that has no type parameters, make\n     /// a suitable \"empty substs\" for it.\n     pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> {"}, {"sha": "87a1d584433747c22160663fc1e267ca725d239b", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=ac80d4117562aa070717fb2ebbbc069be712d906", "patch": "@@ -27,7 +27,6 @@ use build::*;\n use callee::{Callee, ArgVals};\n use cleanup;\n use cleanup::CleanupMethods;\n-use collector;\n use common::*;\n use debuginfo::DebugLoc;\n use expr;\n@@ -482,11 +481,6 @@ pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n \n fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueKind<'tcx>)\n                               -> Block<'blk, 'tcx> {\n-    if collector::collecting_debug_information(bcx.ccx().shared()) {\n-        bcx.ccx()\n-           .record_translation_item_as_generated(TransItem::DropGlue(g));\n-    }\n-\n     let t = g.ty();\n \n     let skip_dtor = match g { DropGlueKind::Ty(_) => false, DropGlueKind::TyContents(_) => true };"}, {"sha": "a97e3e5a78dbaf6883bac4867f2155e1e6b3c150", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac80d4117562aa070717fb2ebbbc069be712d906/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=ac80d4117562aa070717fb2ebbbc069be712d906", "patch": "@@ -123,7 +123,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }) => {\n             let trans_item = TransItem::Fn(instance);\n \n-            if ccx.shared().translation_items().borrow().contains_key(&trans_item) {\n+            if ccx.shared().translation_items().borrow().contains(&trans_item) {\n                 attributes::from_fn_attrs(ccx, attrs, lldecl);\n                 llvm::SetLinkage(lldecl, llvm::ExternalLinkage);\n             } else {"}]}