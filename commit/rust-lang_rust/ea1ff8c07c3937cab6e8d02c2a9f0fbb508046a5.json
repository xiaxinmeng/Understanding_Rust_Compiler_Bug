{"sha": "ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMWZmOGMwN2MzOTM3Y2FiNmU4ZDAyYzJhOWYwZmJiNTA4MDQ2YTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-25T13:20:18Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-04T02:52:42Z"}, "message": "Utilize Resolver lint buffer during HIR lowering", "tree": {"sha": "09cfe9aa221edf5b106c3a39d3c9136460df5df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09cfe9aa221edf5b106c3a39d3c9136460df5df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "html_url": "https://github.com/rust-lang/rust/commit/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "html_url": "https://github.com/rust-lang/rust/commit/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "6b6032516ca73a12b83be7857b5468cf20ec0e6a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "patch": "@@ -43,6 +43,7 @@ use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::def::{Namespace, Res, DefKind, PartialRes, PerNS};\n use crate::hir::{GenericArg, ConstArg};\n use crate::hir::ptr::P;\n+use crate::lint;\n use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n@@ -184,6 +185,8 @@ pub trait Resolver {\n     ) -> (ast::Path, Res<NodeId>);\n \n     fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool;\n+\n+    fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n }\n \n type NtToTokenstream = fn(&Nonterminal, &ParseSess, Span) -> TokenStream;\n@@ -1857,7 +1860,7 @@ impl<'a> LoweringContext<'a> {\n                 GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n                     ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n                     ParenthesizedGenericArgs::Warn => {\n-                        self.sess.buffer_lint(\n+                        self.resolver.lint_buffer().buffer_lint(\n                             PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                             CRATE_NODE_ID,\n                             data.span,\n@@ -1953,7 +1956,7 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     AnonymousLifetimeMode::PassThrough |\n                     AnonymousLifetimeMode::ReportError => {\n-                        self.sess.buffer_lint_with_diagnostic(\n+                        self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n                             ELIDED_LIFETIMES_IN_PATHS,\n                             CRATE_NODE_ID,\n                             path_span,\n@@ -3346,15 +3349,15 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn maybe_lint_bare_trait(&self, span: Span, id: NodeId, is_global: bool) {\n+    fn maybe_lint_bare_trait(&mut self, span: Span, id: NodeId, is_global: bool) {\n         // FIXME(davidtwco): This is a hack to detect macros which produce spans of the\n         // call site which do not have a macro backtrace. See #61963.\n         let is_macro_callsite = self.sess.source_map()\n             .span_to_snippet(span)\n             .map(|snippet| snippet.starts_with(\"#[\"))\n             .unwrap_or(true);\n         if !is_macro_callsite {\n-            self.sess.buffer_lint_with_diagnostic(\n+            self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n                 builtin::BARE_TRAIT_OBJECTS,\n                 id,\n                 span,"}, {"sha": "9ab5b9f13b15072694f520db8bf6cec66b3b24c3", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "patch": "@@ -366,7 +366,7 @@ impl Session {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n \n-    pub fn buffer_lint<S: Into<MultiSpan>>(\n+    pub fn buffer_lint_late<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static lint::Lint,\n         id: ast::NodeId,\n@@ -375,13 +375,13 @@ impl Session {\n     ) {\n         match *self.buffered_lints.borrow_mut() {\n             Some(ref mut buffer) => {\n-                buffer.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n+                buffer.buffer_lint(lint, id, sp, msg);\n             }\n             None => bug!(\"can't buffer lints after HIR lowering\"),\n         }\n     }\n \n-    pub fn buffer_lint_with_diagnostic<S: Into<MultiSpan>>(\n+    pub fn buffer_lint_with_diagnostic_late<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static lint::Lint,\n         id: ast::NodeId,\n@@ -390,7 +390,9 @@ impl Session {\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         match *self.buffered_lints.borrow_mut() {\n-            Some(ref mut buffer) => buffer.add_lint(lint, id, sp.into(), msg, diagnostic),\n+            Some(ref mut buffer) => buffer.buffer_lint_with_diagnostic(\n+                lint, id, sp.into(), msg, diagnostic,\n+            ),\n             None => bug!(\"can't buffer lints after HIR lowering\"),\n         }\n     }"}, {"sha": "19674659325230388aded1d9471ebe28956b8a36", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "patch": "@@ -559,7 +559,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                                 None\n                             );\n                             if let Some(candidate) = lev_candidate {\n-                                session.buffer_lint_with_diagnostic(\n+                                session.buffer_lint_with_diagnostic_late(\n                                     lint::builtin::UNKNOWN_CRATE_TYPES,\n                                     ast::CRATE_NODE_ID,\n                                     span,\n@@ -572,7 +572,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                                         )\n                                 );\n                             } else {\n-                                session.buffer_lint(\n+                                session.buffer_lint_late(\n                                     lint::builtin::UNKNOWN_CRATE_TYPES,\n                                     ast::CRATE_NODE_ID,\n                                     span,"}, {"sha": "baeabbf3c1d180d6b4a0424fd1ed78d2c1f66ad8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ea1ff8c07c3937cab6e8d02c2a9f0fbb508046a5", "patch": "@@ -1083,6 +1083,10 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         let expn_id = self.definitions.expansion_that_defined(def_id.index);\n         self.has_derives(expn_id, derives)\n     }\n+\n+    fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+        &mut self.lint_buffer\n+    }\n }\n \n impl<'a> Resolver<'a> {"}]}