{"sha": "58d4983ba5745975446d60f2886d96f8d2adf0f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDQ5ODNiYTU3NDU5NzU0NDZkNjBmMjg4NmQ5NmY4ZDJhZGYwZjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-18T20:19:35Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-18T20:19:35Z"}, "message": "Merge #1548\n\n1548: use Parse in mbe r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2336c03a0eeef98ac375868bd27dfe7e50668869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2336c03a0eeef98ac375868bd27dfe7e50668869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d4983ba5745975446d60f2886d96f8d2adf0f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d4983ba5745975446d60f2886d96f8d2adf0f2", "html_url": "https://github.com/rust-lang/rust/commit/58d4983ba5745975446d60f2886d96f8d2adf0f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d4983ba5745975446d60f2886d96f8d2adf0f2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "abe72424a647a31840eb952d42905f83628a623c", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe72424a647a31840eb952d42905f83628a623c", "html_url": "https://github.com/rust-lang/rust/commit/abe72424a647a31840eb952d42905f83628a623c"}, {"sha": "df33e7685bdb0f63bf6aa809b9046708d563a1a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df33e7685bdb0f63bf6aa809b9046708d563a1a7", "html_url": "https://github.com/rust-lang/rust/commit/df33e7685bdb0f63bf6aa809b9046708d563a1a7"}], "stats": {"total": 184, "additions": 103, "deletions": 81}, "files": [{"sha": "b82d1bda08a304ae56dfcb2a27743143c6de52a1", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -5,7 +5,7 @@ mod input;\n use std::{panic, sync::Arc};\n \n use ra_prof::profile;\n-use ra_syntax::{Parse, SourceFile, TextRange, TextUnit};\n+use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n use relative_path::RelativePathBuf;\n \n pub use crate::{\n@@ -74,7 +74,7 @@ pub trait SourceDatabase: CheckCanceled + std::fmt::Debug {\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     // Parses the file into the syntax tree.\n     #[salsa::invoke(parse_query)]\n-    fn parse(&self, file_id: FileId) -> Parse;\n+    fn parse(&self, file_id: FileId) -> Parse<ast::SourceFile>;\n     /// Path to a file, relative to the root of its source root.\n     #[salsa::input]\n     fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n@@ -98,7 +98,7 @@ fn source_root_crates(db: &impl SourceDatabase, id: SourceRootId) -> Arc<Vec<Cra\n     Arc::new(res)\n }\n \n-fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse {\n+fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n     let _p = profile(\"parse_query\");\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)"}, {"sha": "da9f3e32da7b1355d70582988fef3385f48812ec", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use parking_lot::Mutex;\n use ra_db::{salsa, SourceDatabase};\n-use ra_syntax::{ast, SmolStr, SyntaxNode, TreeArc};\n+use ra_syntax::{ast, Parse, SmolStr, SyntaxNode, TreeArc};\n \n use crate::{\n     adt::{EnumData, StructData},\n@@ -69,7 +69,7 @@ pub trait AstDatabase: InternDatabase {\n     fn parse_or_expand(&self, file_id: HirFileId) -> Option<TreeArc<SyntaxNode>>;\n \n     #[salsa::invoke(crate::ids::HirFileId::parse_macro_query)]\n-    fn parse_macro(&self, macro_file: ids::MacroFile) -> Option<TreeArc<SyntaxNode>>;\n+    fn parse_macro(&self, macro_file: ids::MacroFile) -> Option<Parse<SyntaxNode>>;\n \n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;"}, {"sha": "83f5c3f394d16f4f58d1a503e630568285ed67e4", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -6,7 +6,7 @@ use std::{\n use mbe::MacroRules;\n use ra_db::{salsa, FileId};\n use ra_prof::profile;\n-use ra_syntax::{ast, AstNode, SyntaxNode, TreeArc};\n+use ra_syntax::{ast, AstNode, Parse, SyntaxNode, TreeArc};\n \n use crate::{AstDatabase, AstId, DefDatabase, FileAstId, InternDatabase, Module, Source};\n \n@@ -61,14 +61,16 @@ impl HirFileId {\n     ) -> Option<TreeArc<SyntaxNode>> {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree().syntax().to_owned()),\n-            HirFileIdRepr::Macro(macro_file) => db.parse_macro(macro_file),\n+            HirFileIdRepr::Macro(macro_file) => {\n+                db.parse_macro(macro_file).map(|it| it.tree().to_owned())\n+            }\n         }\n     }\n \n     pub(crate) fn parse_macro_query(\n         db: &impl AstDatabase,\n         macro_file: MacroFile,\n-    ) -> Option<TreeArc<SyntaxNode>> {\n+    ) -> Option<Parse<SyntaxNode>> {\n         let _p = profile(\"parse_macro_query\");\n         let macro_call_id = macro_file.macro_call_id;\n         let tt = db\n@@ -85,10 +87,8 @@ impl HirFileId {\n             })\n             .ok()?;\n         match macro_file.macro_file_kind {\n-            MacroFileKind::Items => Some(mbe::token_tree_to_ast_item_list(&tt).syntax().to_owned()),\n-            MacroFileKind::Expr => {\n-                mbe::token_tree_to_expr(&tt).ok().map(|it| it.syntax().to_owned())\n-            }\n+            MacroFileKind::Items => Some(Parse::to_syntax(mbe::token_tree_to_ast_item_list(&tt))),\n+            MacroFileKind::Expr => mbe::token_tree_to_expr(&tt).ok().map(Parse::to_syntax),\n         }\n     }\n }"}, {"sha": "4aa84751f42bac96fe3304be4f94f720a3c22bd8", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -43,7 +43,7 @@ pub(crate) struct CompletionContext<'a> {\n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a db::RootDatabase,\n-        original_parse: &'a Parse,\n+        original_parse: &'a Parse<ast::SourceFile>,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n@@ -83,7 +83,7 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    fn fill(&mut self, original_parse: &'a Parse, offset: TextUnit) {\n+    fn fill(&mut self, original_parse: &'a Parse<ast::SourceFile>, offset: TextUnit) {\n         // Insert a fake ident to get a valid parse tree. We will use this file\n         // to determine context, though the original_file will be used for\n         // actual completion."}, {"sha": "a31e1524547f786859c723ae7a3da7913d471a41", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -9,7 +9,7 @@ use ra_db::{\n     FileTextQuery, SourceRootId,\n };\n use ra_prof::{memory_usage, Bytes};\n-use ra_syntax::{AstNode, Parse, SyntaxNode, TreeArc};\n+use ra_syntax::{ast, AstNode, Parse, SyntaxNode};\n \n use crate::{\n     db::RootDatabase,\n@@ -79,10 +79,10 @@ impl fmt::Display for SyntaxTreeStats {\n     }\n }\n \n-impl FromIterator<TableEntry<FileId, Parse>> for SyntaxTreeStats {\n+impl FromIterator<TableEntry<FileId, Parse<ast::SourceFile>>> for SyntaxTreeStats {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<FileId, Parse>>,\n+        T: IntoIterator<Item = TableEntry<FileId, Parse<ast::SourceFile>>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {\n@@ -96,15 +96,15 @@ impl FromIterator<TableEntry<FileId, Parse>> for SyntaxTreeStats {\n     }\n }\n \n-impl FromIterator<TableEntry<MacroFile, Option<TreeArc<SyntaxNode>>>> for SyntaxTreeStats {\n+impl FromIterator<TableEntry<MacroFile, Option<Parse<SyntaxNode>>>> for SyntaxTreeStats {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<MacroFile, Option<TreeArc<SyntaxNode>>>>,\n+        T: IntoIterator<Item = TableEntry<MacroFile, Option<Parse<SyntaxNode>>>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {\n             res.total += 1;\n-            if let Some(tree) = entry.value.and_then(|it| it) {\n+            if let Some(tree) = entry.value.and_then(|it| it).map(|it| it.tree().to_owned()) {\n                 res.retained += 1;\n                 res.retained_size += tree.memory_size_of_subtree();\n             }"}, {"sha": "9b3a45319b72f2e0882589701a95adbe84d39eff", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -169,7 +169,9 @@ impl SymbolIndex {\n         self.map.as_fst().size() + self.symbols.len() * mem::size_of::<FileSymbol>()\n     }\n \n-    pub(crate) fn for_files(files: impl ParallelIterator<Item = (FileId, Parse)>) -> SymbolIndex {\n+    pub(crate) fn for_files(\n+        files: impl ParallelIterator<Item = (FileId, Parse<ast::SourceFile>)>,\n+    ) -> SymbolIndex {\n         let symbols = files\n             .flat_map(|(file_id, file)| source_file_to_file_symbols(file.tree(), file_id))\n             .collect::<Vec<_>>();"}, {"sha": "bfc351f81a63e4e37396182fe2a8d357f46fa12f", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -2,8 +2,8 @@ use crate::subtree_source::SubtreeTokenSource;\n use crate::ExpandError;\n use ra_parser::{ParseError, TreeSink};\n use ra_syntax::{\n-    ast, AstNode, SmolStr, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxNode, SyntaxTreeBuilder,\n-    TextRange, TextUnit, TreeArc, T,\n+    ast, AstNode, Parse, SmolStr, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxNode,\n+    SyntaxTreeBuilder, TextRange, TextUnit, T,\n };\n use tt::buffer::{Cursor, TokenBuffer};\n \n@@ -45,7 +45,7 @@ pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, Toke\n //\n //\n \n-fn token_tree_to_syntax_node<F>(tt: &tt::Subtree, f: F) -> Result<TreeArc<SyntaxNode>, ExpandError>\n+fn token_tree_to_syntax_node<F>(tt: &tt::Subtree, f: F) -> Result<Parse<SyntaxNode>, ExpandError>\n where\n     F: Fn(&mut dyn ra_parser::TokenSource, &mut dyn ra_parser::TreeSink),\n {\n@@ -58,50 +58,44 @@ where\n         return Err(ExpandError::ConversionError);\n     }\n     //FIXME: would be cool to report errors\n-    let (tree, _errors) = tree_sink.inner.finish();\n-    Ok(tree)\n+    let parse = tree_sink.inner.finish();\n+    Ok(parse)\n }\n \n /// Parses the token tree (result of macro expansion) to an expression\n-pub fn token_tree_to_expr(tt: &tt::Subtree) -> Result<TreeArc<ast::Expr>, ExpandError> {\n-    let syntax = token_tree_to_syntax_node(tt, ra_parser::parse_expr)?;\n-    ast::Expr::cast(&syntax)\n-        .map(|m| m.to_owned())\n-        .ok_or_else(|| crate::ExpandError::ConversionError)\n+pub fn token_tree_to_expr(tt: &tt::Subtree) -> Result<Parse<ast::Expr>, ExpandError> {\n+    let parse = token_tree_to_syntax_node(tt, ra_parser::parse_expr)?;\n+    parse.cast().ok_or_else(|| crate::ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) to a Pattern\n-pub fn token_tree_to_pat(tt: &tt::Subtree) -> Result<TreeArc<ast::Pat>, ExpandError> {\n-    let syntax = token_tree_to_syntax_node(tt, ra_parser::parse_pat)?;\n-    ast::Pat::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n+pub fn token_tree_to_pat(tt: &tt::Subtree) -> Result<Parse<ast::Pat>, ExpandError> {\n+    let parse = token_tree_to_syntax_node(tt, ra_parser::parse_pat)?;\n+    parse.cast().ok_or_else(|| crate::ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) to a Type\n-pub fn token_tree_to_ty(tt: &tt::Subtree) -> Result<TreeArc<ast::TypeRef>, ExpandError> {\n-    let syntax = token_tree_to_syntax_node(tt, ra_parser::parse_ty)?;\n-    ast::TypeRef::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n+pub fn token_tree_to_ty(tt: &tt::Subtree) -> Result<Parse<ast::TypeRef>, ExpandError> {\n+    let parse = token_tree_to_syntax_node(tt, ra_parser::parse_ty)?;\n+    parse.cast().ok_or_else(|| crate::ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of stmts\n-pub fn token_tree_to_macro_stmts(\n-    tt: &tt::Subtree,\n-) -> Result<TreeArc<ast::MacroStmts>, ExpandError> {\n-    let syntax = token_tree_to_syntax_node(tt, ra_parser::parse_macro_stmts)?;\n-    ast::MacroStmts::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n+pub fn token_tree_to_macro_stmts(tt: &tt::Subtree) -> Result<Parse<ast::MacroStmts>, ExpandError> {\n+    let parse = token_tree_to_syntax_node(tt, ra_parser::parse_macro_stmts)?;\n+    parse.cast().ok_or_else(|| crate::ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of items\n-pub fn token_tree_to_macro_items(\n-    tt: &tt::Subtree,\n-) -> Result<TreeArc<ast::MacroItems>, ExpandError> {\n-    let syntax = token_tree_to_syntax_node(tt, ra_parser::parse_macro_items)?;\n-    ast::MacroItems::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n+pub fn token_tree_to_macro_items(tt: &tt::Subtree) -> Result<Parse<ast::MacroItems>, ExpandError> {\n+    let parse = token_tree_to_syntax_node(tt, ra_parser::parse_macro_items)?;\n+    parse.cast().ok_or_else(|| crate::ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of items\n-pub fn token_tree_to_ast_item_list(tt: &tt::Subtree) -> TreeArc<ast::SourceFile> {\n-    let syntax = token_tree_to_syntax_node(tt, ra_parser::parse).unwrap();\n-    ast::SourceFile::cast(&syntax).unwrap().to_owned()\n+pub fn token_tree_to_ast_item_list(tt: &tt::Subtree) -> Parse<ast::SourceFile> {\n+    let parse = token_tree_to_syntax_node(tt, ra_parser::parse).unwrap();\n+    parse.cast().unwrap()\n }\n \n impl TokenMap {"}, {"sha": "419b2c099ca5e6174d151b953db01939d621332b", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -72,7 +72,7 @@ pub(crate) fn expand_to_items(\n     invocation: &str,\n ) -> ra_syntax::TreeArc<ast::MacroItems> {\n     let expanded = expand(rules, invocation);\n-    token_tree_to_macro_items(&expanded).unwrap()\n+    token_tree_to_macro_items(&expanded).unwrap().tree().to_owned()\n }\n \n #[allow(unused)]\n@@ -81,15 +81,15 @@ pub(crate) fn expand_to_stmts(\n     invocation: &str,\n ) -> ra_syntax::TreeArc<ast::MacroStmts> {\n     let expanded = expand(rules, invocation);\n-    token_tree_to_macro_stmts(&expanded).unwrap()\n+    token_tree_to_macro_stmts(&expanded).unwrap().tree().to_owned()\n }\n \n pub(crate) fn expand_to_expr(\n     rules: &MacroRules,\n     invocation: &str,\n ) -> ra_syntax::TreeArc<ast::Expr> {\n     let expanded = expand(rules, invocation);\n-    token_tree_to_expr(&expanded).unwrap()\n+    token_tree_to_expr(&expanded).unwrap().tree().to_owned()\n }\n \n pub(crate) fn text_to_tokentree(text: &str) -> tt::Subtree {\n@@ -164,22 +164,22 @@ pub(crate) fn assert_expansion(\n \n     let (expanded_tree, expected_tree) = match kind {\n         MacroKind::Items => {\n-            let expanded_tree = token_tree_to_macro_items(&expanded);\n-            let expected_tree = token_tree_to_macro_items(&expected);\n+            let expanded_tree = token_tree_to_macro_items(&expanded).unwrap().tree().to_owned();\n+            let expected_tree = token_tree_to_macro_items(&expected).unwrap().tree().to_owned();\n \n             (\n-                debug_dump_ignore_spaces(expanded_tree.unwrap().syntax()).trim().to_string(),\n-                debug_dump_ignore_spaces(expected_tree.unwrap().syntax()).trim().to_string(),\n+                debug_dump_ignore_spaces(expanded_tree.syntax()).trim().to_string(),\n+                debug_dump_ignore_spaces(expected_tree.syntax()).trim().to_string(),\n             )\n         }\n \n         MacroKind::Stmts => {\n-            let expanded_tree = token_tree_to_macro_stmts(&expanded);\n-            let expected_tree = token_tree_to_macro_stmts(&expected);\n+            let expanded_tree = token_tree_to_macro_stmts(&expanded).unwrap().tree().to_owned();\n+            let expected_tree = token_tree_to_macro_stmts(&expected).unwrap().tree().to_owned();\n \n             (\n-                debug_dump_ignore_spaces(expanded_tree.unwrap().syntax()).trim().to_string(),\n-                debug_dump_ignore_spaces(expected_tree.unwrap().syntax()).trim().to_string(),\n+                debug_dump_ignore_spaces(expanded_tree.syntax()).trim().to_string(),\n+                debug_dump_ignore_spaces(expected_tree.syntax()).trim().to_string(),\n             )\n         }\n     };\n@@ -419,9 +419,9 @@ fn test_expand_to_item_list() {\n             \",\n     );\n     let expansion = expand(&rules, \"structs!(Foo, Bar);\");\n-    let tree = token_tree_to_macro_items(&expansion);\n+    let tree = token_tree_to_macro_items(&expansion).unwrap().tree().to_owned();\n     assert_eq!(\n-        tree.unwrap().syntax().debug_dump().trim(),\n+        tree.syntax().debug_dump().trim(),\n         r#\"\n MACRO_ITEMS@[0; 40)\n   STRUCT_DEF@[0; 20)\n@@ -537,10 +537,10 @@ fn test_tt_to_stmts() {\n     );\n \n     let expanded = expand(&rules, \"foo!{}\");\n-    let stmts = token_tree_to_macro_stmts(&expanded);\n+    let stmts = token_tree_to_macro_stmts(&expanded).unwrap().tree().to_owned();\n \n     assert_eq!(\n-        stmts.unwrap().syntax().debug_dump().trim(),\n+        stmts.syntax().debug_dump().trim(),\n         r#\"MACRO_STMTS@[0; 15)\n   LET_STMT@[0; 7)\n     LET_KW@[0; 3) \"let\""}, {"sha": "534c206a60f661e073b06aef9c7a96f7b44bbe51", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -43,8 +43,8 @@ pub use crate::{\n     ptr::{AstPtr, SyntaxNodePtr},\n     syntax_error::{Location, SyntaxError, SyntaxErrorKind},\n     syntax_node::{\n-        Direction, InsertPosition, SyntaxElement, SyntaxNode, SyntaxToken, SyntaxTreeBuilder,\n-        TreeArc, WalkEvent,\n+        Direction, InsertPosition, SyntaxElement, SyntaxNode, SyntaxNodeWrapper, SyntaxToken,\n+        SyntaxTreeBuilder, TreeArc, WalkEvent,\n     },\n     syntax_text::SyntaxText,\n };\n@@ -57,33 +57,47 @@ pub use rowan::{SmolStr, TextRange, TextUnit};\n ///\n /// Note that we always produce a syntax tree, even for completely invalid\n /// files.\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct Parse {\n-    tree: TreeArc<SourceFile>,\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct Parse<T: SyntaxNodeWrapper> {\n+    tree: TreeArc<T>,\n     errors: Arc<Vec<SyntaxError>>,\n }\n \n-impl Parse {\n-    pub fn tree(&self) -> &SourceFile {\n+impl<T: SyntaxNodeWrapper> Clone for Parse<T> {\n+    fn clone(&self) -> Parse<T> {\n+        Parse { tree: self.tree.clone(), errors: self.errors.clone() }\n+    }\n+}\n+\n+impl<T: SyntaxNodeWrapper> Parse<T> {\n+    fn new(tree: TreeArc<T>, errors: Vec<SyntaxError>) -> Parse<T> {\n+        Parse { tree, errors: Arc::new(errors) }\n+    }\n+\n+    pub fn tree(&self) -> &T {\n         &*self.tree\n     }\n \n     pub fn errors(&self) -> &[SyntaxError] {\n         &*self.errors\n     }\n \n-    pub fn ok(self) -> Result<TreeArc<SourceFile>, Arc<Vec<SyntaxError>>> {\n+    pub fn ok(self) -> Result<TreeArc<T>, Arc<Vec<SyntaxError>>> {\n         if self.errors.is_empty() {\n             Ok(self.tree)\n         } else {\n             Err(self.errors)\n         }\n     }\n+}\n \n-    pub fn reparse(&self, edit: &AtomTextEdit) -> Parse {\n-        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n+impl<T: AstNode> Parse<T> {\n+    pub fn to_syntax(this: Self) -> Parse<SyntaxNode> {\n+        Parse { tree: this.tree().syntax().to_owned(), errors: this.errors }\n     }\n+}\n \n+impl Parse<SourceFile> {\n     pub fn debug_dump(&self) -> String {\n         let mut buf = self.tree.syntax().debug_dump();\n         for err in self.errors.iter() {\n@@ -92,7 +106,11 @@ impl Parse {\n         buf\n     }\n \n-    fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<Parse> {\n+    pub fn reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n+        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n+    }\n+\n+    fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<Parse<SourceFile>> {\n         // FIXME: validation errors are not handled here\n         parsing::incremental_reparse(self.tree.syntax(), edit, self.errors.to_vec()).map(\n             |(green_node, errors, _reparsed_range)| Parse {\n@@ -102,12 +120,19 @@ impl Parse {\n         )\n     }\n \n-    fn full_reparse(&self, edit: &AtomTextEdit) -> Parse {\n+    fn full_reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n         let text = edit.apply(self.tree.syntax().text().to_string());\n         SourceFile::parse(&text)\n     }\n }\n \n+impl Parse<SyntaxNode> {\n+    pub fn cast<T: AstNode>(self) -> Option<Parse<T>> {\n+        let node = T::cast(&self.tree)?;\n+        Some(Parse { tree: node.to_owned(), errors: self.errors })\n+    }\n+}\n+\n /// `SourceFile` represents a parse tree for a single Rust file.\n pub use crate::ast::SourceFile;\n \n@@ -121,7 +146,7 @@ impl SourceFile {\n         TreeArc::cast(root)\n     }\n \n-    pub fn parse(text: &str) -> Parse {\n+    pub fn parse(text: &str) -> Parse<SourceFile> {\n         let (green, mut errors) = parsing::parse_text(text);\n         let tree = SourceFile::new(green);\n         errors.extend(validation::validate(&tree));"}, {"sha": "e57813a94b1635477cb43051a8d39e10193fc05a", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d4983ba5745975446d60f2886d96f8d2adf0f2/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=58d4983ba5745975446d60f2886d96f8d2adf0f2", "patch": "@@ -18,7 +18,8 @@ use rowan::{GreenNodeBuilder, TransparentNewType};\n \n use crate::{\n     syntax_error::{SyntaxError, SyntaxErrorKind},\n-    AstNode, SmolStr, SourceFile, SyntaxKind, SyntaxNodePtr, SyntaxText, TextRange, TextUnit,\n+    AstNode, Parse, SmolStr, SourceFile, SyntaxKind, SyntaxNodePtr, SyntaxText, TextRange,\n+    TextUnit,\n };\n \n pub use rowan::WalkEvent;\n@@ -594,13 +595,13 @@ impl SyntaxTreeBuilder {\n         (green, self.errors)\n     }\n \n-    pub fn finish(self) -> (TreeArc<SyntaxNode>, Vec<SyntaxError>) {\n+    pub fn finish(self) -> Parse<SyntaxNode> {\n         let (green, errors) = self.finish_raw();\n         let node = SyntaxNode::new(green);\n         if cfg!(debug_assertions) {\n             crate::validation::validate_block_structure(&node);\n         }\n-        (node, errors)\n+        Parse::new(node, errors)\n     }\n \n     pub fn token(&mut self, kind: SyntaxKind, text: SmolStr) {"}]}