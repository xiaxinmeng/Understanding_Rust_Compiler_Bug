{"sha": "5d67618d4cd325263619b1af704d8929765993b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNjc2MThkNGNkMzI1MjYzNjE5YjFhZjcwNGQ4OTI5NzY1OTkzYjA=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-30T14:11:51Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-24T23:38:54Z"}, "message": "Update inferred_outlives_of", "tree": {"sha": "49903532915df9f5a24e97f92773942073fc4c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49903532915df9f5a24e97f92773942073fc4c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d67618d4cd325263619b1af704d8929765993b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d67618d4cd325263619b1af704d8929765993b0", "html_url": "https://github.com/rust-lang/rust/commit/5d67618d4cd325263619b1af704d8929765993b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d67618d4cd325263619b1af704d8929765993b0/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e305df1846a6d985315917ae0c81b74af8b4e641", "url": "https://api.github.com/repos/rust-lang/rust/commits/e305df1846a6d985315917ae0c81b74af8b4e641", "html_url": "https://github.com/rust-lang/rust/commit/e305df1846a6d985315917ae0c81b74af8b4e641"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "c22f11f662e021e6dbba7d75c35eef994e042016", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d67618d4cd325263619b1af704d8929765993b0/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d67618d4cd325263619b1af704d8929765993b0/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=5d67618d4cd325263619b1af704d8929765993b0", "patch": "@@ -174,7 +174,7 @@ rustc_queries! {\n \n         /// Returns the inferred outlives predicates (e.g., for `struct\n         /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n-        query inferred_outlives_of(_: DefId) -> Lrc<Vec<ty::Predicate<'tcx>>> {}\n+        query inferred_outlives_of(_: DefId) -> &'tcx [ty::Predicate<'tcx>] {}\n \n         /// Maps from the `DefId` of a trait to the list of\n         /// super-predicates. This is a subset of the full list of"}, {"sha": "198bd0b05843990119a6ebe26bad020485953b66", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d67618d4cd325263619b1af704d8929765993b0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d67618d4cd325263619b1af704d8929765993b0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5d67618d4cd325263619b1af704d8929765993b0", "patch": "@@ -1118,11 +1118,7 @@ pub struct CratePredicatesMap<'tcx> {\n     /// For each struct with outlive bounds, maps to a vector of the\n     /// predicate of its outlive bounds. If an item has no outlives\n     /// bounds, it will have no entry.\n-    pub predicates: FxHashMap<DefId, Lrc<Vec<ty::Predicate<'tcx>>>>,\n-\n-    /// An empty vector, useful for cloning.\n-    #[stable_hasher(ignore)]\n-    pub empty_predicate: Lrc<Vec<ty::Predicate<'tcx>>>,\n+    pub predicates: FxHashMap<DefId, &'tcx [ty::Predicate<'tcx>]>,\n }\n \n impl<'tcx> AsRef<Predicate<'tcx>> for Predicate<'tcx> {"}, {"sha": "e3e2fe7106a08560760f8aecb992078acfd75297", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d67618d4cd325263619b1af704d8929765993b0/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d67618d4cd325263619b1af704d8929765993b0/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=5d67618d4cd325263619b1af704d8929765993b0", "patch": "@@ -23,7 +23,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n fn inferred_outlives_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     item_def_id: DefId,\n-) -> Lrc<Vec<ty::Predicate<'tcx>>> {\n+) -> &'tcx [ty::Predicate<'tcx>] {\n     let id = tcx\n         .hir()\n         .as_local_hir_id(item_def_id)\n@@ -37,8 +37,8 @@ fn inferred_outlives_of<'a, 'tcx>(\n                 let predicates = crate_map\n                     .predicates\n                     .get(&item_def_id)\n-                    .unwrap_or(&crate_map.empty_predicate)\n-                    .clone();\n+                    .map(|p| *p)\n+                    .unwrap_or(&[]);\n \n                 if tcx.has_attr(item_def_id, \"rustc_outlives\") {\n                     let mut pred: Vec<String> = predicates\n@@ -63,10 +63,10 @@ fn inferred_outlives_of<'a, 'tcx>(\n                 predicates\n             }\n \n-            _ => Lrc::new(Vec::new()),\n+            _ => &[],\n         },\n \n-        _ => Lrc::new(Vec::new()),\n+        _ => &[],\n     }\n }\n \n@@ -96,7 +96,7 @@ fn inferred_outlives_crate<'tcx>(\n     let predicates = global_inferred_outlives\n         .iter()\n         .map(|(&def_id, set)| {\n-            let vec: Vec<ty::Predicate<'tcx>> = set\n+            let predicates = tcx.arena.alloc_from_iter(set\n                 .iter()\n                 .filter_map(\n                     |ty::OutlivesPredicate(kind1, region2)| match kind1.unpack() {\n@@ -115,14 +115,11 @@ fn inferred_outlives_crate<'tcx>(\n                             None\n                         }\n                     },\n-                ).collect();\n-            (def_id, Lrc::new(vec))\n+                ));\n+            (def_id, &*predicates)\n         }).collect();\n \n-    let empty_predicate = Lrc::new(Vec::new());\n-\n     Lrc::new(ty::CratePredicatesMap {\n         predicates,\n-        empty_predicate,\n     })\n }"}]}