{"sha": "3dddf6ac1e194deb3d927064e7c6d50bc9325dd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZGRmNmFjMWUxOTRkZWIzZDkyNzA2NGU3YzZkNTBiYzkzMjVkZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T17:47:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T17:47:36Z"}, "message": "Auto merge of #78414 - nox:function-sections, r=nagisa,bjorn3\n\nImplement -Z function-sections=yes|no\n\nThis lets rustc users tweak whether all functions should be put in their own TEXT section, using whatever default value the target defines if the flag is missing.\n\nI'm having fun experimenting with musl libc and trying to implement the start symbol in Rust, that means avoiding code that requires relocations, and AFAIK putting everything in its own section makes the toolchain generate `GOTPCREL` relocations for symbols that could use plain old PC-relative addressing (at least on `x86_64`) if they were all in the same section.", "tree": {"sha": "c556b1e3d4e07137fba7ae09ddcd19e4e25be060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c556b1e3d4e07137fba7ae09ddcd19e4e25be060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0", "html_url": "https://github.com/rust-lang/rust/commit/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717eb6ccea0f9e0079eab82c047bbc1ebde725c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/717eb6ccea0f9e0079eab82c047bbc1ebde725c2", "html_url": "https://github.com/rust-lang/rust/commit/717eb6ccea0f9e0079eab82c047bbc1ebde725c2"}, {"sha": "056942215cf8dc39686fa80e42b4e73657d4fed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/056942215cf8dc39686fa80e42b4e73657d4fed5", "html_url": "https://github.com/rust-lang/rust/commit/056942215cf8dc39686fa80e42b4e73657d4fed5"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "3902df8a7cac3d5d71e03d8233512432febda9c9", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=3dddf6ac1e194deb3d927064e7c6d50bc9325dd0", "patch": "@@ -128,7 +128,8 @@ pub fn target_machine_factory(\n     let (opt_level, _) = to_llvm_opt_settings(optlvl);\n     let use_softfp = sess.opts.cg.soft_float;\n \n-    let ffunction_sections = sess.target.options.function_sections;\n+    let ffunction_sections =\n+        sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.options.function_sections);\n     let fdata_sections = ffunction_sections;\n \n     let code_model = to_llvm_code_model(sess.code_model());"}, {"sha": "235e049c3f566b63f4f4a4257e83b9567c29b927", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=3dddf6ac1e194deb3d927064e7c6d50bc9325dd0", "patch": "@@ -550,6 +550,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(force_overflow_checks, Some(true));\n     tracked!(force_unstable_if_unmarked, true);\n     tracked!(fuel, Some((\"abc\".to_string(), 99)));\n+    tracked!(function_sections, Some(false));\n     tracked!(human_readable_cgu_names, true);\n     tracked!(inline_in_all_cgus, Some(true));\n     tracked!(insert_sideeffect, true);"}, {"sha": "750f2e19ee2578ea428bfec67a7f3be0f341eaca", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dddf6ac1e194deb3d927064e7c6d50bc9325dd0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3dddf6ac1e194deb3d927064e7c6d50bc9325dd0", "patch": "@@ -717,7 +717,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     // This list is in alphabetical order.\n     //\n     // If you add a new option, please update:\n-    // - src/librustc_interface/tests.rs\n+    // - compiler/rustc_interface/src/tests.rs\n     // - src/doc/rustc/src/codegen-options/index.md\n \n     ar: String = (String::new(), parse_string, [UNTRACKED],\n@@ -814,7 +814,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     // This list is in alphabetical order.\n     //\n     // If you add a new option, please update:\n-    // - src/librustc_interface/tests.rs\n+    // - compiler/rustc_interface/src/tests.rs\n     // - src/doc/rustc/src/codegen-options/index.md\n }\n \n@@ -825,7 +825,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     // This list is in alphabetical order.\n     //\n     // If you add a new option, please update:\n-    // - src/librustc_interface/tests.rs\n+    // - compiler/rustc_interface/src/tests.rs\n \n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n@@ -904,6 +904,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"force all crates to be `rustc_private` unstable (default: no)\"),\n     fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n         \"set the optimization fuel quota for a crate\"),\n+    function_sections: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"whether each function should go in its own section\"),\n     graphviz_dark_mode: bool = (false, parse_bool, [UNTRACKED],\n         \"use dark-themed colors in graphviz output (default: no)\"),\n     graphviz_font: String = (\"Courier, monospace\".to_string(), parse_string, [UNTRACKED],"}]}