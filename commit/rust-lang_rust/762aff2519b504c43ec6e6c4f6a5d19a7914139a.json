{"sha": "762aff2519b504c43ec6e6c4f6a5d19a7914139a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MmFmZjI1MTliNTA0YzQzZWM2ZTZjNGY2YTVkMTlhNzkxNDEzOWE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-31T14:53:37Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-31T14:53:37Z"}, "message": "Merge pull request #960 from oli-obk/libbin\n\ndon't require `cargo clippy` to pass a `--lib` or `--bin x` argument", "tree": {"sha": "9d7f199d765ab6a8432ec7bf6b36bdb18d154d41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d7f199d765ab6a8432ec7bf6b36bdb18d154d41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/762aff2519b504c43ec6e6c4f6a5d19a7914139a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/762aff2519b504c43ec6e6c4f6a5d19a7914139a", "html_url": "https://github.com/rust-lang/rust/commit/762aff2519b504c43ec6e6c4f6a5d19a7914139a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/762aff2519b504c43ec6e6c4f6a5d19a7914139a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc430a699f8ba0beb18036499933a5bdecbf114", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc430a699f8ba0beb18036499933a5bdecbf114", "html_url": "https://github.com/rust-lang/rust/commit/cbc430a699f8ba0beb18036499933a5bdecbf114"}, {"sha": "41e71b4f4828767c71024ba97038ce4488e8cc77", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e71b4f4828767c71024ba97038ce4488e8cc77", "html_url": "https://github.com/rust-lang/rust/commit/41e71b4f4828767c71024ba97038ce4488e8cc77"}], "stats": {"total": 142, "additions": 127, "deletions": 15}, "files": [{"sha": "c1b91fd75fe3b74afcb05eb2d707a3af316f5762", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -20,7 +20,8 @@ script:\n  - cargo build --features debugging\n  - cargo test --features debugging\n  - SYSROOT=~/rust cargo install\n- - cargo clippy --lib -- -D clippy\n+ - cargo clippy -- -D clippy\n+ - cd clippy_lints && cargo clippy -- -D clippy && cd ..\n \n after_success:\n # only test regex_macros if it compiles"}, {"sha": "828857701d5a396fb27ec216390e5632b5a79ace", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -32,12 +32,12 @@ quine-mc_cluskey = \"0.2.2\"\n # begin automatic update\n clippy_lints = { version = \"0.0.70\", path = \"clippy_lints\" }\n # end automatic update\n+rustc-serialize = \"0.3\"\n \n [dev-dependencies]\n compiletest_rs = \"0.1.0\"\n lazy_static = \"0.1.15\"\n regex = \"0.1.56\"\n-rustc-serialize = \"0.3\"\n \n [features]\n debugging = []"}, {"sha": "c309b7a63e242ee62f3996dbc6b00e9eea330188", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -21,6 +21,7 @@ semver = \"0.2.1\"\n toml = \"0.1\"\n unicode-normalization = \"0.1\"\n quine-mc_cluskey = \"0.2.2\"\n+rustc-serialize = \"0.3\"\n \n [features]\n debugging = []"}, {"sha": "944825e2bdc6f68fbf6a2ba837a58f1511af51b9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -36,6 +36,8 @@ extern crate regex_syntax;\n // for finding minimal boolean expressions\n extern crate quine_mc_cluskey;\n \n+extern crate rustc_serialize;\n+\n extern crate rustc_plugin;\n extern crate rustc_const_eval;\n extern crate rustc_const_math;"}, {"sha": "c6004864bf09455fade440b29cf7266ad2c5bc13", "filename": "clippy_lints/src/utils/cargo.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2Fsrc%2Futils%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2Fsrc%2Futils%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcargo.rs?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -0,0 +1,75 @@\n+use std::collections::HashMap;\n+use std::process::Command;\n+use std::str::{from_utf8, Utf8Error};\n+use std::io;\n+use rustc_serialize::json;\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Metadata {\n+    pub packages: Vec<Package>,\n+    resolve: Option<()>,\n+    pub version: usize,\n+}\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Package {\n+    pub name: String,\n+    pub version: String,\n+    id: String,\n+    source: Option<()>,\n+    pub dependencies: Vec<Dependency>,\n+    pub targets: Vec<Target>,\n+    features: HashMap<String, Vec<String>>,\n+    manifest_path: String,\n+}\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Dependency {\n+    pub name: String,\n+    source: Option<String>,\n+    pub req: String,\n+    kind: Option<String>,\n+    optional: bool,\n+    uses_default_features: bool,\n+    features: Vec<HashMap<String, String>>,\n+    target: Option<()>,\n+}\n+\n+#[allow(non_camel_case_types)]\n+#[derive(RustcDecodable, Debug)]\n+pub enum Kind {\n+    dylib,\n+    test,\n+    bin,\n+    lib,\n+}\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Target {\n+    pub name: String,\n+    pub kind: Vec<Kind>,\n+    src_path: String,\n+}\n+\n+#[derive(Debug)]\n+pub enum Error {\n+    Io(io::Error),\n+    Utf8(Utf8Error),\n+    Json(json::DecoderError),\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(err: io::Error) -> Self { Error::Io(err) }\n+}\n+impl From<Utf8Error> for Error {\n+    fn from(err: Utf8Error) -> Self { Error::Utf8(err) }\n+}\n+impl From<json::DecoderError> for Error {\n+    fn from(err: json::DecoderError) -> Self { Error::Json(err) }\n+}\n+\n+pub fn metadata() -> Result<Metadata, Error> {\n+    let output = Command::new(\"cargo\").args(&[\"metadata\", \"--no-deps\"]).output()?;\n+    let stdout = from_utf8(&output.stdout)?;\n+    Ok(json::decode(stdout)?)\n+}"}, {"sha": "986462b37237b9045fa8056cb4022517b279e2eb", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -23,6 +23,7 @@ pub mod conf;\n mod hir;\n pub mod paths;\n pub use self::hir::{SpanlessEq, SpanlessHash};\n+pub mod cargo;\n \n pub type MethodArgs = HirVec<P<Expr>>;\n "}, {"sha": "3ad32a540587cf39fd54422f6a66f6897ab18bfa", "filename": "src/main.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -1,13 +1,15 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n+#![feature(slice_patterns)]\n \n extern crate rustc_driver;\n extern crate getopts;\n extern crate rustc;\n extern crate syntax;\n extern crate rustc_plugin;\n extern crate clippy_lints;\n+extern crate rustc_serialize;\n \n use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n use rustc::session::{config, Session};\n@@ -16,6 +18,8 @@ use syntax::diagnostics;\n use std::path::PathBuf;\n use std::process::Command;\n \n+use clippy_lints::utils::cargo;\n+\n struct ClippyCompilerCalls(RustcDefaultCalls);\n \n impl std::default::Default for ClippyCompilerCalls {\n@@ -118,16 +122,18 @@ pub fn main() {\n     };\n \n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n-        let args = wrap_args(std::env::args().skip(2), dep_path, sys_root);\n-        let path = std::env::current_exe().expect(\"current executable path invalid\");\n-        let exit_status = std::process::Command::new(\"cargo\")\n-            .args(&args)\n-            .env(\"RUSTC\", path)\n-            .spawn().expect(\"could not run cargo\")\n-            .wait().expect(\"failed to wait for cargo?\");\n-\n-        if let Some(code) = exit_status.code() {\n-            std::process::exit(code);\n+        let mut metadata = cargo::metadata().expect(\"could not obtain cargo metadata\");\n+        assert_eq!(metadata.version, 1);\n+        for target in metadata.packages.remove(0).targets {\n+            let args = std::env::args().skip(2);\n+            assert_eq!(target.kind.len(), 1);\n+            match &target.kind[..] {\n+                [cargo::Kind::lib] |\n+                [cargo::Kind::dylib] => process(std::iter::once(\"--lib\".to_owned()).chain(args), &dep_path, &sys_root),\n+                [cargo::Kind::bin] => process(vec![\"--bin\".to_owned(), target.name].into_iter().chain(args), &dep_path, &sys_root),\n+                // don't process tests and other stuff\n+                _ => {},\n+            }\n         }\n     } else {\n         let args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n@@ -145,7 +151,7 @@ pub fn main() {\n     }\n }\n \n-fn wrap_args<P, I>(old_args: I, dep_path: P, sysroot: String) -> Vec<String>\n+fn process<P, I>(old_args: I, dep_path: P, sysroot: &str)\n     where P: AsRef<Path>, I: Iterator<Item=String> {\n \n     let mut args = vec![\"rustc\".to_owned()];\n@@ -161,7 +167,17 @@ fn wrap_args<P, I>(old_args: I, dep_path: P, sysroot: String) -> Vec<String>\n     args.push(\"-L\".to_owned());\n     args.push(dep_path.as_ref().to_string_lossy().into_owned());\n     args.push(String::from(\"--sysroot\"));\n-    args.push(sysroot);\n+    args.push(sysroot.to_owned());\n     args.push(\"-Zno-trans\".to_owned());\n-    args\n+\n+    let path = std::env::current_exe().expect(\"current executable path invalid\");\n+    let exit_status = std::process::Command::new(\"cargo\")\n+        .args(&args)\n+        .env(\"RUSTC\", path)\n+        .spawn().expect(\"could not run cargo\")\n+        .wait().expect(\"failed to wait for cargo?\");\n+\n+    if let Some(code) = exit_status.code() {\n+        std::process::exit(code);\n+    }\n }"}, {"sha": "b2a2f416a8f2a434a97e727d7ab219fe96e3c8b2", "filename": "tests/versioncheck.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/762aff2519b504c43ec6e6c4f6a5d19a7914139a/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762aff2519b504c43ec6e6c4f6a5d19a7914139a/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=762aff2519b504c43ec6e6c4f6a5d19a7914139a", "patch": "@@ -0,0 +1,16 @@\n+extern crate clippy_lints;\n+use clippy_lints::utils::cargo;\n+\n+#[test]\n+fn check_that_clippy_lints_has_the_same_version_as_clippy() {\n+    let clippy_meta = cargo::metadata().expect(\"could not obtain cargo metadata\");\n+    std::env::set_current_dir(std::env::current_dir().unwrap().join(\"clippy_lints\")).unwrap();\n+    let clippy_lints_meta = cargo::metadata().expect(\"could not obtain cargo metadata\");\n+    assert_eq!(clippy_lints_meta.packages[0].version, clippy_meta.packages[0].version);\n+    for package in &clippy_meta.packages[0].dependencies {\n+        if package.name == \"clippy_lints\" {\n+            assert_eq!(clippy_lints_meta.packages[0].version, package.req[1..]);\n+            return;\n+        }\n+    }\n+}"}]}