{"sha": "abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTdjODdlZWZlNGExNWI3ZTgzZmViNmI4OTYyYWUxNTQ1MmMxNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T06:40:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T06:40:04Z"}, "message": "Auto merge of #45297 - matthewjasper:associated-item-namespaces, r=petrochenkov\n\nCheck namespaces when resolving associated items in typeck\n\nCloses #35600\nCloses #44247\nFixes a \"cannot move a value of type...\" error in the same case as #44247 but with the associated items swapped.", "tree": {"sha": "4c579573c9bdd95bafc0022366c5e35ab11dc19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c579573c9bdd95bafc0022366c5e35ab11dc19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "html_url": "https://github.com/rust-lang/rust/commit/abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdec805d035bae722ab6b587b21d8473521997dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdec805d035bae722ab6b587b21d8473521997dd", "html_url": "https://github.com/rust-lang/rust/commit/fdec805d035bae722ab6b587b21d8473521997dd"}, {"sha": "b522ee15ce8b4cd419a4f26177694fe3200029be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b522ee15ce8b4cd419a4f26177694fe3200029be", "html_url": "https://github.com/rust-lang/rust/commit/b522ee15ce8b4cd419a4f26177694fe3200029be"}], "stats": {"total": 152, "additions": 127, "deletions": 25}, "files": [{"sha": "7c9497badfbea9925b6f3f450457e8d8bcbada11", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -18,6 +18,7 @@ use hir;\n use hir::def::Def;\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n+use namespace::Namespace;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n@@ -827,8 +828,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let trait_did = bound.0.def_id;\n         let (assoc_ident, def_scope) = tcx.adjust(assoc_name, trait_did, ref_id);\n-        let item = tcx.associated_items(trait_did).find(|i| i.name.to_ident() == assoc_ident)\n-                                                  .expect(\"missing associated type\");\n+        let item = tcx.associated_items(trait_did).find(|i| {\n+            Namespace::from(i.kind) == Namespace::Type &&\n+            i.name.to_ident() == assoc_ident\n+        })\n+        .expect(\"missing associated type\");\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, bound);\n         let ty = self.normalize_ty(span, ty);"}, {"sha": "d4eda13c6cd402c8655bd58ac34875e713247d37", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -13,6 +13,7 @@\n use check::FnCtxt;\n use hir::def::Def;\n use hir::def_id::DefId;\n+use namespace::Namespace;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n@@ -275,7 +276,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Trait must have a method named `m_name` and it should not have\n         // type parameters or early-bound regions.\n         let tcx = self.tcx;\n-        let method_item = self.associated_item(trait_def_id, m_name).unwrap();\n+        let method_item = self.associated_item(trait_def_id, m_name, Namespace::Value).unwrap();\n         let def_id = method_item.def_id;\n         let generics = tcx.generics_of(def_id);\n         assert_eq!(generics.types.len(), 0);\n@@ -371,10 +372,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     /// Find item with name `item_name` defined in impl/trait `def_id`\n     /// and return it, or `None`, if no such item was defined there.\n-    pub fn associated_item(&self, def_id: DefId, item_name: ast::Name)\n+    pub fn associated_item(&self, def_id: DefId, item_name: ast::Name, ns: Namespace)\n                            -> Option<ty::AssociatedItem> {\n         self.tcx.associated_items(def_id)\n-                .find(|item| self.tcx.hygienic_eq(item_name, item.name, def_id))\n-\n+                .find(|item| Namespace::from(item.kind) == ns &&\n+                             self.tcx.hygienic_eq(item_name, item.name, def_id))\n     }\n }"}, {"sha": "78941cb3a56868b2b1f96caabde6b6deac49ae12", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -16,6 +16,7 @@ use super::suggest;\n use check::FnCtxt;\n use hir::def_id::DefId;\n use hir::def::Def;\n+use namespace::Namespace;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::traits::{self, ObligationCause};\n use rustc::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TraitRef, TypeFoldable};\n@@ -1317,11 +1318,14 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 self.tcx.associated_items(def_id)\n                     .filter(|x| {\n                         let dist = lev_distance(&*name.as_str(), &x.name.as_str());\n-                        dist > 0 && dist <= max_dist\n+                        Namespace::from(x.kind) == Namespace::Value && dist > 0\n+                        && dist <= max_dist\n                     })\n                     .collect()\n             } else {\n-                self.fcx.associated_item(def_id, name).map_or(Vec::new(), |x| vec![x])\n+                self.fcx\n+                    .associated_item(def_id, name, Namespace::Value)\n+                    .map_or(Vec::new(), |x| vec![x])\n             }\n         } else {\n             self.tcx.associated_items(def_id).collect()"}, {"sha": "23148406a111ecb62d6a3e953e71489a68d6c7e1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -17,6 +17,7 @@ use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use hir::def::Def;\n use hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::lang_items::FnOnceTraitLangItem;\n+use namespace::Namespace;\n use rustc::traits::{Obligation, SelectionContext};\n use util::nodemap::FxHashSet;\n \n@@ -92,12 +93,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     CandidateSource::ImplSource(impl_did) => {\n                         // Provide the best span we can. Use the item, if local to crate, else\n                         // the impl, if local to crate (item may be defaulted), else nothing.\n-                        let item = self.associated_item(impl_did, item_name)\n+                        let item = self.associated_item(impl_did, item_name, Namespace::Value)\n                             .or_else(|| {\n                                 self.associated_item(\n                                     self.tcx.impl_trait_ref(impl_did).unwrap().def_id,\n-\n-                                    item_name\n+                                    item_name,\n+                                    Namespace::Value,\n                                 )\n                             }).unwrap();\n                         let note_span = self.tcx.hir.span_if_local(item.def_id).or_else(|| {\n@@ -127,7 +128,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n-                        let item = self.associated_item(trait_did, item_name).unwrap();\n+                        let item = self\n+                            .associated_item(trait_did, item_name, Namespace::Value)\n+                            .unwrap();\n                         let item_span = self.tcx.def_span(item.def_id);\n                         span_note!(err,\n                                    item_span,\n@@ -402,7 +405,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // implementing a trait would be legal but is rejected\n                 // here).\n                 (type_is_local || info.def_id.is_local())\n-                    && self.associated_item(info.def_id, item_name).is_some()\n+                    && self.associated_item(info.def_id, item_name, Namespace::Value).is_some()\n             })\n             .collect::<Vec<_>>();\n "}, {"sha": "0ebccbc835fc1bd6972af5143eec67d84d6ccfd5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -88,6 +88,7 @@ use astconv::AstConv;\n use hir::def::{Def, CtorKind};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_back::slice::ref_slice;\n+use namespace::Namespace;\n use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n@@ -1293,7 +1294,13 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for impl_item in impl_items() {\n         let ty_impl_item = tcx.associated_item(tcx.hir.local_def_id(impl_item.id));\n         let ty_trait_item = tcx.associated_items(impl_trait_ref.def_id)\n-            .find(|ac| tcx.hygienic_eq(ty_impl_item.name, ac.name, impl_trait_ref.def_id));\n+            .find(|ac| Namespace::from(&impl_item.node) == Namespace::from(ac.kind) &&\n+                         tcx.hygienic_eq(ty_impl_item.name, ac.name, impl_trait_ref.def_id))\n+            .or_else(|| {\n+                // Not compatible, but needed for the error message\n+                tcx.associated_items(impl_trait_ref.def_id)\n+                   .find(|ac| tcx.hygienic_eq(ty_impl_item.name, ac.name, impl_trait_ref.def_id))\n+            });\n \n         // Check that impl definition matches trait definition\n         if let Some(ty_trait_item) = ty_trait_item {"}, {"sha": "1355f711a4b14f5da51448743877b224d5c743e5", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use namespace::Namespace;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::TyCtxt;\n \n pub fn crate_inherent_impls_overlap_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                     crate_num: CrateNum) {\n@@ -28,19 +29,10 @@ struct InherentOverlapChecker<'a, 'tcx: 'a> {\n impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n     fn check_for_common_items_in_impls(&self, impl1: DefId, impl2: DefId,\n                                        overlap: traits::OverlapResult) {\n-        #[derive(Copy, Clone, PartialEq)]\n-        enum Namespace {\n-            Type,\n-            Value,\n-        }\n \n         let name_and_namespace = |def_id| {\n             let item = self.tcx.associated_item(def_id);\n-            (item.name, match item.kind {\n-                ty::AssociatedKind::Type => Namespace::Type,\n-                ty::AssociatedKind::Const |\n-                ty::AssociatedKind::Method => Namespace::Value,\n-            })\n+            (item.name, Namespace::from(item.kind))\n         };\n \n         let impl_items1 = self.tcx.associated_item_def_ids(impl1);"}, {"sha": "1c047ef98d831f643a1a5ee50899a8674c937c7d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -123,6 +123,7 @@ mod constrained_type_params;\n mod impl_wf_check;\n mod coherence;\n mod variance;\n+mod namespace;\n \n pub struct TypeAndSubsts<'tcx> {\n     substs: &'tcx Substs<'tcx>,"}, {"sha": "6f0e46b3afee11ba60c5445fd7e19726f6939d6d", "filename": "src/librustc_typeck/namespace.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Flibrustc_typeck%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fnamespace.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir;\n+use rustc::ty;\n+\n+// Whether an item exists in the type or value namespace.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum Namespace {\n+    Type,\n+    Value,\n+}\n+\n+impl From<ty::AssociatedKind> for Namespace {\n+    fn from(a_kind: ty::AssociatedKind) -> Self {\n+        match a_kind {\n+            ty::AssociatedKind::Type => Namespace::Type,\n+            ty::AssociatedKind::Const |\n+            ty::AssociatedKind::Method => Namespace::Value,\n+        }\n+    }\n+}\n+\n+impl<'a> From <&'a hir::ImplItemKind> for Namespace {\n+    fn from(impl_kind: &'a hir::ImplItemKind) -> Self {\n+        match *impl_kind {\n+            hir::ImplItemKind::Type(..) => Namespace::Type,\n+            hir::ImplItemKind::Const(..) |\n+            hir::ImplItemKind::Method(..) => Namespace::Value,\n+        }\n+    }\n+}"}, {"sha": "88358eff08d05c773f63f24e35865cd716adef6f", "filename": "src/test/run-pass/issue-35600.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Ftest%2Frun-pass%2Fissue-35600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Ftest%2Frun-pass%2Fissue-35600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-35600.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    type bar;\n+    fn bar();\n+}\n+\n+impl Foo for () {\n+    type bar = ();\n+    fn bar() {}\n+}\n+\n+fn main() {\n+    let x: <() as Foo>::bar = ();\n+    <()>::bar();\n+}"}, {"sha": "27b0aeaac5599a36017d021b3f201bdfe58db1ff", "filename": "src/test/run-pass/issue-44247.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Ftest%2Frun-pass%2Fissue-44247.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe7c87eefe4a15b7e83feb6b8962ae15452c16c/src%2Ftest%2Frun-pass%2Fissue-44247.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44247.rs?ref=abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait T {\n+    type X;\n+    const X: Self::X;\n+}\n+fn foo<X: T>() {\n+    let _: X::X = X::X;\n+}\n+\n+trait S {\n+    const X: Self::X;\n+    type X;\n+}\n+fn bar<X: S>() {\n+    let _: X::X = X::X;\n+}\n+\n+fn main() {}"}]}