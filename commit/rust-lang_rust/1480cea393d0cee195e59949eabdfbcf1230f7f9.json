{"sha": "1480cea393d0cee195e59949eabdfbcf1230f7f9", "node_id": "C_kwDOAAsO6NoAKDE0ODBjZWEzOTNkMGNlZTE5NWU1OTk0OWVhYmRmYmNmMTIzMGY3Zjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T19:31:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T19:31:37Z"}, "message": "Auto merge of #10242 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "2003426fe056014485d43aad8940b399c7a31966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2003426fe056014485d43aad8940b399c7a31966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1480cea393d0cee195e59949eabdfbcf1230f7f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1480cea393d0cee195e59949eabdfbcf1230f7f9", "html_url": "https://github.com/rust-lang/rust/commit/1480cea393d0cee195e59949eabdfbcf1230f7f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1480cea393d0cee195e59949eabdfbcf1230f7f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e929bddee5934c527894fabee8a2c48531a795", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e929bddee5934c527894fabee8a2c48531a795", "html_url": "https://github.com/rust-lang/rust/commit/54e929bddee5934c527894fabee8a2c48531a795"}, {"sha": "6f9c70a2015aadd1dc1b77d1e988217aeebd75c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9c70a2015aadd1dc1b77d1e988217aeebd75c5", "html_url": "https://github.com/rust-lang/rust/commit/6f9c70a2015aadd1dc1b77d1e988217aeebd75c5"}], "stats": {"total": 198, "additions": 108, "deletions": 90}, "files": [{"sha": "dc94b1045249e1a5b36db01e2dafa3ebdd166b59", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "7278ad13d568acb38432062fe2586ccebf8935b2", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "751c262673b1ca04bec420a92bddbeea88ffdf10", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -472,7 +472,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_>, name: Symbol, items: &[NestedMe\n \n fn check_lint_reason(cx: &LateContext<'_>, name: Symbol, items: &[NestedMetaItem], attr: &'_ Attribute) {\n     // Check for the feature\n-    if !cx.tcx.sess.features_untracked().lint_reasons {\n+    if !cx.tcx.features().lint_reasons {\n         return;\n     }\n "}, {"sha": "248d7388410673c3da902461a252936750345e67", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -251,7 +251,7 @@ fn check_hash_peq<'tcx>(\n \n                 // Only care about `impl PartialEq<Foo> for Foo`\n                 // For `impl PartialEq<B> for A, input_types is [A, B]\n-                if trait_ref.substs.type_at(1) == ty {\n+                if trait_ref.subst_identity().substs.type_at(1) == ty {\n                     span_lint_and_then(\n                         cx,\n                         DERIVED_HASH_WITH_MANUAL_EQ,\n@@ -299,7 +299,7 @@ fn check_ord_partial_ord<'tcx>(\n \n                 // Only care about `impl PartialOrd<Foo> for Foo`\n                 // For `impl PartialOrd<B> for A, input_types is [A, B]\n-                if trait_ref.substs.type_at(1) == ty {\n+                if trait_ref.subst_identity().substs.type_at(1) == ty {\n                     let mess = if partial_ord_is_automatically_derived {\n                         \"you are implementing `Ord` explicitly but have derived `PartialOrd`\"\n                     } else {"}, {"sha": "2ef547526d4f7961027d20dbb77f7e846435b992", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n-            if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.def_id);\n+            if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.skip_binder().def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);\n             }"}, {"sha": "ab05d4688ccf40244ab03cd6adc3fe3e9b65ca6e", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -7,14 +7,14 @@ use clippy_utils::macros::{\n };\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::ty::{implements_trait, is_type_lang_item};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_errors::{\n     Applicability,\n     SuggestionStyle::{CompletelyHidden, ShowCode},\n };\n-use rustc_hir::{Expr, ExprKind, HirId, QPath};\n+use rustc_hir::{Expr, ExprKind, HirId, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n@@ -237,7 +237,7 @@ fn check_unused_format_specifier(cx: &LateContext<'_>, arg: &FormatArg<'_>) {\n         );\n     }\n \n-    if is_type_diagnostic_item(cx, param_ty, sym::Arguments) && !arg.format.is_default_for_trait() {\n+    if is_type_lang_item(cx, param_ty, LangItem::FormatArguments) && !arg.format.is_default_for_trait() {\n         span_lint_and_then(\n             cx,\n             UNUSED_FORMAT_SPECS,"}, {"sha": "bd66ace4500a8d305f55ec1e430e1785e09d3348", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(into_trait_seg) = hir_trait_ref.path.segments.last()\n             // `impl Into<target_ty> for self_ty`\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n-            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n+            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(ty::EarlyBinder::subst_identity)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n             && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Alias(ty::Opaque, _))\n         {"}, {"sha": "2a79b18b829941c4a218843a84a135fc8b83a0ae", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -78,7 +78,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                 let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n                 let infcx = cx.tcx.infer_ctxt().build();\n-                let cause = traits::ObligationCause::misc(span, hir_id);\n+                let def_id = cx.tcx.hir().local_def_id(hir_id);\n+                let cause = traits::ObligationCause::misc(span, def_id);\n                 let send_errors = traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait);\n                 if !send_errors.is_empty() {\n                     span_lint_and_then("}, {"sha": "e9b2e31a769ad5a216a3375d9be6a52f9e4f2e24", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -52,21 +52,19 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n         // List of spans to lint. (lint_span, first_span)\n         let mut lint_spans = Vec::new();\n \n-        for (_, impl_ids) in cx\n+        let inherent_impls = cx\n             .tcx\n-            .crate_inherent_impls(())\n-            .inherent_impls\n-            .iter()\n-            .filter(|(&id, impls)| {\n-                impls.len() > 1\n-                    // Check for `#[allow]` on the type definition\n-                    && !is_lint_allowed(\n-                        cx,\n-                        MULTIPLE_INHERENT_IMPL,\n-                        cx.tcx.hir().local_def_id_to_hir_id(id),\n-                    )\n-            })\n-        {\n+            .with_stable_hashing_context(|hcx| cx.tcx.crate_inherent_impls(()).inherent_impls.to_sorted(&hcx, true));\n+\n+        for (_, impl_ids) in inherent_impls.into_iter().filter(|(&id, impls)| {\n+            impls.len() > 1\n+            // Check for `#[allow]` on the type definition\n+            && !is_lint_allowed(\n+                cx,\n+                MULTIPLE_INHERENT_IMPL,\n+                cx.tcx.hir().local_def_id_to_hir_id(id),\n+            )\n+        }) {\n             for impl_id in impl_ids.iter().map(|id| id.expect_local()) {\n                 match type_map.entry(cx.tcx.type_of(impl_id)) {\n                     Entry::Vacant(e) => {"}, {"sha": "3c70c9cf19a516ccdc00d91ef97324d6a86b5682", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -219,7 +219,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         let is_empty = sym!(is_empty);\n \n         let is_empty_method_found = current_and_super_traits\n-            .iter()\n+            .items()\n             .flat_map(|&i| cx.tcx.associated_items(i).filter_by_name_unhygienic(is_empty))\n             .any(|i| {\n                 i.kind == ty::AssocKind::Fn"}, {"sha": "d1a1f773f87b3b0878b83ab05a261a8ea89ab4c9", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'\n         } else {\n             return;\n         };\n-    let mutable_static_in_cond = var_visitor.def_ids.iter().any(|(_, v)| *v);\n+    let mutable_static_in_cond = var_visitor.def_ids.items().any(|(_, v)| *v);\n \n     let mut has_break_or_return_visitor = HasBreakOrReturnVisitor {\n         has_break_or_return: false,"}, {"sha": "b812e81cb107b35a217694df38a8fa3865889205", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -371,7 +371,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                 && let output_ty = return_ty(cx, item.hir_id())\n                 && let local_def_id = cx.tcx.hir().local_def_id(item.hir_id())\n                 && Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, item.hir_id());\n+                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, local_def_id);\n                     fn_ctxt.can_coerce(ty, output_ty)\n                 }) {\n                     if has_lifetime(output_ty) && has_lifetime(ty) {"}, {"sha": "5a459548153aab242c7a0d4b6aa800e50d522fc2", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         let container_id = assoc_item.container_id(cx.tcx);\n         let trait_def_id = match assoc_item.container {\n             TraitContainer => Some(container_id),\n-            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.def_id),\n+            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.skip_binder().def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {"}, {"sha": "e99081ad06202313b8bf2b2dd4c0f22060aaa150", "filename": "clippy_lints/src/missing_trait_methods.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -80,19 +80,21 @@ impl<'tcx> LateLintPass<'tcx> for MissingTraitMethods {\n                 }\n             }\n \n-            for assoc in provided.values() {\n-                let source_map = cx.tcx.sess.source_map();\n-                let definition_span = source_map.guess_head_span(cx.tcx.def_span(assoc.def_id));\n+            cx.tcx.with_stable_hashing_context(|hcx| {\n+                for assoc in provided.values_sorted(&hcx, true) {\n+                    let source_map = cx.tcx.sess.source_map();\n+                    let definition_span = source_map.guess_head_span(cx.tcx.def_span(assoc.def_id));\n \n-                span_lint_and_help(\n-                    cx,\n-                    MISSING_TRAIT_METHODS,\n-                    source_map.guess_head_span(item.span),\n-                    &format!(\"missing trait method provided by default: `{}`\", assoc.name),\n-                    Some(definition_span),\n-                    \"implement the method\",\n-                );\n-            }\n+                    span_lint_and_help(\n+                        cx,\n+                        MISSING_TRAIT_METHODS,\n+                        source_map.guess_head_span(item.span),\n+                        &format!(\"missing trait method provided by default: `{}`\", assoc.name),\n+                        Some(definition_span),\n+                        \"implement the method\",\n+                    );\n+                }\n+            });\n         }\n     }\n }"}, {"sha": "8c9d4c5cfe66fae84961b8ab9020b7313adc2bd3", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -24,7 +24,7 @@ use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n-use rustc_trait_selection::traits::misc::can_type_implement_copy;\n+use rustc_trait_selection::traits::misc::type_allowed_to_implement_copy;\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -200,7 +200,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                     let sugg = |diag: &mut Diagnostic| {\n                         if let ty::Adt(def, ..) = ty.kind() {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did()) {\n-                                if can_type_implement_copy(\n+                                if type_allowed_to_implement_copy(\n                                     cx.tcx,\n                                     cx.param_env,\n                                     ty,"}, {"sha": "839c3a3815c29ef5a55b0bcf877b680916a41923", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n             if send_trait == trait_id;\n             if hir_impl.polarity == ImplPolarity::Positive;\n             if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n-            if let self_ty = ty_trait_ref.self_ty();\n+            if let self_ty = ty_trait_ref.subst_identity().self_ty();\n             if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n             then {\n                 let mut non_send_fields = Vec::new();"}, {"sha": "8b77a5c99f767f3edf833e37a5d67429881d696b", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::{Body, Expr, ExprKind, HirId, ImplItem, ImplItemKind, Node, PatKind, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::ty::subst::{EarlyBinder, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, Ident};\n@@ -244,7 +244,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n             })) => {\n                 #[allow(trivial_casts)]\n                 if let Some(Node::Item(item)) = get_parent_node(cx.tcx, owner_id.into())\n-                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n+                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(EarlyBinder::subst_identity)\n                     && let Some(trait_item_id) = cx.tcx.associated_item(owner_id).trait_item_def_id\n                 {\n                     ("}, {"sha": "2d21aaa4f7fdb5606f560763c8e00dcac0a8ab93", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -190,10 +190,10 @@ impl<'tcx> PassByRefOrValue {\n                             // Don't lint if an unsafe pointer is created.\n                             // TODO: Limit the check only to unsafe pointers to the argument (or part of the argument)\n                             //       which escape the current function.\n-                            if typeck.node_types().iter().any(|(_, &ty)| ty.is_unsafe_ptr())\n+                            if typeck.node_types().items().any(|(_, &ty)| ty.is_unsafe_ptr())\n                                 || typeck\n                                     .adjustments()\n-                                    .iter()\n+                                    .items()\n                                     .flat_map(|(_, a)| a)\n                                     .any(|a| matches!(a.kind, Adjust::Pointer(PointerCast::UnsafeFnPointer)))\n                             {"}, {"sha": "cddaf9450eabcc4f54d9401371a4330b91a6b3bb", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -34,7 +34,7 @@ pub(super) fn check_cast<'tcx>(\n     let local_def_id = hir_id.owner.def_id;\n \n     Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-        let fn_ctxt = FnCtxt::new(inherited, cx.param_env, hir_id);\n+        let fn_ctxt = FnCtxt::new(inherited, cx.param_env, local_def_id);\n \n         // If we already have errors, we can't be sure we can pointer cast.\n         assert!("}, {"sha": "6ae9d9d63538006d7d4e759b17217a07d98424b5", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             then {\n                 // `self_ty` is the semantic self type of `impl <trait> for <type>`. This cannot be\n                 // `Self`.\n-                let self_ty = impl_trait_ref.self_ty();\n+                let self_ty = impl_trait_ref.subst_identity().self_ty();\n \n                 // `trait_method_sig` is the signature of the function, how it is declared in the\n                 // trait, not in the impl of the trait."}, {"sha": "173469f6cdc7d0d3bfa69993153d31ae585d85a9", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "a8f8da67b51711807ba146c7577bb4a93870086b", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -1,14 +1,13 @@\n #![allow(clippy::similar_names)] // `expr` and `expn`\n \n-use crate::is_path_diagnostic_item;\n use crate::source::snippet_opt;\n use crate::visitors::{for_each_expr, Descend};\n \n use arrayvec::ArrayVec;\n use itertools::{izip, Either, Itertools};\n use rustc_ast::ast::LitKind;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{self as hir, Expr, ExprField, ExprKind, HirId, Node, QPath};\n+use rustc_hir::{self as hir, Expr, ExprField, ExprKind, HirId, LangItem, Node, QPath, TyKind};\n use rustc_lexer::unescape::unescape_literal;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use rustc_lint::LateContext;\n@@ -439,8 +438,7 @@ impl<'tcx> FormatArgsValues<'tcx> {\n                 // ArgumentV1::from_usize(<val>)\n                 if let ExprKind::Call(callee, [val]) = expr.kind\n                     && let ExprKind::Path(QPath::TypeRelative(ty, _)) = callee.kind\n-                    && let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind\n-                    && path.segments.last().unwrap().ident.name == sym::ArgumentV1\n+                    && let TyKind::Path(QPath::LangItem(LangItem::FormatArgument, _, _)) = ty.kind\n                 {\n                     let val_idx = if val.span.ctxt() == expr.span.ctxt()\n                         && let ExprKind::Field(_, field) = val.kind\n@@ -486,20 +484,6 @@ struct ParamPosition {\n \n impl<'tcx> Visitor<'tcx> for ParamPosition {\n     fn visit_expr_field(&mut self, field: &'tcx ExprField<'tcx>) {\n-        fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n-            // ::core::fmt::rt::v1::Count::Param(1usize),\n-            if let ExprKind::Call(ctor, [val]) = expr.kind\n-                && let ExprKind::Path(QPath::Resolved(_, path)) = ctor.kind\n-                && path.segments.last()?.ident.name == sym::Param\n-                && let ExprKind::Lit(lit) = &val.kind\n-                && let LitKind::Int(pos, _) = lit.node\n-            {\n-                Some(pos as usize)\n-            } else {\n-                None\n-            }\n-        }\n-\n         match field.ident.name {\n             sym::position => {\n                 if let ExprKind::Lit(lit) = &field.expr.kind\n@@ -519,15 +503,41 @@ impl<'tcx> Visitor<'tcx> for ParamPosition {\n     }\n }\n \n+fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n+    // <::core::fmt::rt::v1::Count>::Param(1usize),\n+    if let ExprKind::Call(ctor, [val]) = expr.kind\n+        && let ExprKind::Path(QPath::TypeRelative(_, path)) = ctor.kind\n+            && path.ident.name == sym::Param\n+            && let ExprKind::Lit(lit) = &val.kind\n+            && let LitKind::Int(pos, _) = lit.node\n+    {\n+        Some(pos as usize)\n+    } else {\n+        None\n+    }\n+}\n+\n /// Parses the `fmt` arg of `Arguments::new_v1_formatted(pieces, args, fmt, _)`\n fn parse_rt_fmt<'tcx>(fmt_arg: &'tcx Expr<'tcx>) -> Option<impl Iterator<Item = ParamPosition> + 'tcx> {\n     if let ExprKind::AddrOf(.., array) = fmt_arg.kind\n         && let ExprKind::Array(specs) = array.kind\n     {\n         Some(specs.iter().map(|spec| {\n-            let mut position = ParamPosition::default();\n-            position.visit_expr(spec);\n-            position\n+            if let ExprKind::Call(f, args) = spec.kind\n+                && let ExprKind::Path(QPath::TypeRelative(ty, f)) = f.kind\n+                && let TyKind::Path(QPath::LangItem(LangItem::FormatPlaceholder, _, _)) = ty.kind\n+                && f.ident.name == sym::new\n+                && let [position, _fill, _align, _flags, precision, width] = args\n+                && let ExprKind::Lit(position) = &position.kind\n+                && let LitKind::Int(position, _) = position.node {\n+                    ParamPosition {\n+                        value: position as usize,\n+                        width: parse_count(width),\n+                        precision: parse_count(precision),\n+                    }\n+            } else {\n+                ParamPosition::default()\n+            }\n         }))\n     } else {\n         None\n@@ -890,7 +900,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         // ::core::fmt::Arguments::new_v1_formatted(pieces, args, fmt, _unsafe_arg)\n         if let ExprKind::Call(callee, [pieces, args, rest @ ..]) = expr.kind\n             && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind\n-            && is_path_diagnostic_item(cx, ty, sym::Arguments)\n+            && let TyKind::Path(QPath::LangItem(LangItem::FormatArguments, _, _)) = ty.kind\n             && matches!(seg.ident.as_str(), \"new_v1\" | \"new_v1_formatted\")\n         {\n             let format_string = FormatString::new(cx, pieces)?;"}, {"sha": "2d1044af17e8c331c0a964cb6330ff5ea2290ad4", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -219,6 +219,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Repeat(..)\n             | ast::ExprKind::Ret(..)\n             | ast::ExprKind::Yeet(..)\n+            | ast::ExprKind::FormatArgs(..)\n             | ast::ExprKind::Struct(..)\n             | ast::ExprKind::Try(..)\n             | ast::ExprKind::TryBlock(..)"}, {"sha": "f35ef56d1643501f12b2e6a973ac5b6e9a52a48b", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -647,9 +647,12 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id))\n-        },\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => sig_from_bounds(\n+            cx,\n+            ty,\n+            cx.tcx.item_bounds(def_id).subst(cx.tcx, substs),\n+            cx.tcx.opt_parent(def_id),\n+        ),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();"}, {"sha": "80eee368178e1418f1ea534a64610e73231422e0", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "4e7fc565a322ae55c12f271fea5e65633830a0f8", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-01-12\"\n+channel = \"nightly-2023-01-27\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "2a240cc249b0c768f084dab5b6f220ae53a59399", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -7,14 +7,6 @@ LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n    = help: convert all references to use `sym::Deref`\n    = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n-error: hardcoded path to a language item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n-   |\n-LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: convert all references to use `LangItem::DerefMut`\n-\n error: hardcoded path to a diagnostic item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n    |\n@@ -23,5 +15,13 @@ LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\",\n    |\n    = help: convert all references to use `sym::deref_method`\n \n+error: hardcoded path to a language item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n+   |\n+LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: convert all references to use `LangItem::DerefMut`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "efdd56dd47d396329b653c03804c8ed1db98d75c", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -17,9 +17,12 @@ error[E0412]: cannot find type `VAL` in this scope\n   --> $DIR/ice-6252.rs:10:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |          -                                                    ^^^ not found in this scope\n-   |          |\n-   |          help: you might be missing a type parameter: `, VAL`\n+   |                                                               ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<N, M, VAL> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   |          +++++\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n   --> $DIR/ice-6252.rs:10:1"}, {"sha": "1af77d1a25b2d09df7873e047e2dccffd92216d9", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1480cea393d0cee195e59949eabdfbcf1230f7f9/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480cea393d0cee195e59949eabdfbcf1230f7f9/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=1480cea393d0cee195e59949eabdfbcf1230f7f9", "patch": "@@ -15,7 +15,7 @@ pub trait Copy {}\n pub unsafe trait Freeze {}\n \n #[lang = \"start\"]\n-fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8, _sigpipe: u8) -> isize {\n     0\n }\n "}]}