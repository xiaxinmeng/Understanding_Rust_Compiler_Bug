{"sha": "1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "node_id": "C_kwDOAAsO6NoAKDFjMTFmYzY0YjE5NzRmYzVjNWVhODhlYzA2M2IxNTEyY2NlZGUxZmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T14:37:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T14:37:52Z"}, "message": "Auto merge of #2171 - RalfJung:less-dup, r=RalfJung\n\nreduce some code duplication\n\n`@saethlin` this is what I meant. I had to fiddle a bit to make the lifetimes work, but now it passes rustc. :)", "tree": {"sha": "b248435469a95f5efe003860869cd8245e73e52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b248435469a95f5efe003860869cd8245e73e52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "html_url": "https://github.com/rust-lang/rust/commit/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360186b11437b924f89064d77246e4f1eb435eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/360186b11437b924f89064d77246e4f1eb435eb0", "html_url": "https://github.com/rust-lang/rust/commit/360186b11437b924f89064d77246e4f1eb435eb0"}, {"sha": "62c48b29987cd0e01d0140fcd01185fd02a57795", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c48b29987cd0e01d0140fcd01185fd02a57795", "html_url": "https://github.com/rust-lang/rust/commit/62c48b29987cd0e01d0140fcd01185fd02a57795"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "d9a7edcc11350936ff55e5a7aa3a7155f9064a3a", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "patch": "@@ -810,12 +810,12 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n /// topmost frame which corresponds to a local crate, and returns the current span in that frame.\n /// The result of that search is cached so that later calls are approximately free.\n #[derive(Clone)]\n-pub struct CurrentSpan<'a, 'tcx, 'mir> {\n+pub struct CurrentSpan<'a, 'mir, 'tcx> {\n     span: Option<Span>,\n-    machine: &'a Evaluator<'tcx, 'mir>,\n+    machine: &'a Evaluator<'mir, 'tcx>,\n }\n \n-impl<'a, 'tcx, 'mir> CurrentSpan<'a, 'tcx, 'mir> {\n+impl<'a, 'mir, 'tcx> CurrentSpan<'a, 'mir, 'tcx> {\n     pub fn get(&mut self) -> Span {\n         *self.span.get_or_insert_with(|| Self::current_span(&self.machine))\n     }"}, {"sha": "6cb71f43118ca13605e6f01e38e02192b404b0e0", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "patch": "@@ -705,6 +705,30 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         protect: bool,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n+        let current_span = &mut this.machine.current_span();\n+\n+        let log_creation = |this: &MiriEvalContext<'mir, 'tcx>,\n+                            current_span: &mut CurrentSpan<'_, 'mir, 'tcx>,\n+                            alloc_id,\n+                            base_offset,\n+                            orig_tag|\n+         -> InterpResult<'tcx> {\n+            let extra = this.get_alloc_extra(alloc_id)?;\n+            let stacked_borrows =\n+                extra.stacked_borrows.as_ref().expect(\"we should have Stacked Borrows data\");\n+            let mut alloc_history = stacked_borrows.history.borrow_mut();\n+            alloc_history.log_creation(\n+                Some(orig_tag),\n+                new_tag,\n+                alloc_range(base_offset, size),\n+                current_span,\n+            );\n+            if protect {\n+                alloc_history.log_protector(orig_tag, new_tag, current_span);\n+            }\n+            Ok(())\n+        };\n+\n         if size == Size::ZERO {\n             // Don't update any stacks for a zero-sized access; borrow stacks are per-byte and this\n             // touches no bytes so there is no stack to put this tag in.\n@@ -714,16 +738,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Dangling slices are a common case here; it's valid to get their length but with raw\n             // pointer tagging for example all calls to get_unchecked on them are invalid.\n             if let Ok((alloc_id, base_offset, orig_tag)) = this.ptr_try_get_alloc_id(place.ptr) {\n-                let extra = this.get_alloc_extra(alloc_id)?;\n-                let stacked_borrows =\n-                    extra.stacked_borrows.as_ref().expect(\"we should have Stacked Borrows data\");\n-                let mut alloc_history = stacked_borrows.history.borrow_mut();\n-                alloc_history.log_creation(\n-                    Some(orig_tag),\n-                    new_tag,\n-                    alloc_range(base_offset, Size::ZERO),\n-                    &mut this.machine.current_span(),\n-                );\n+                log_creation(this, current_span, alloc_id, base_offset, orig_tag)?;\n             }\n \n             trace!(\n@@ -736,23 +751,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(());\n         }\n         let (alloc_id, base_offset, orig_tag) = this.ptr_get_alloc_id(place.ptr)?;\n-\n-        let mut current_span = this.machine.current_span();\n-        {\n-            let extra = this.get_alloc_extra(alloc_id)?;\n-            let stacked_borrows =\n-                extra.stacked_borrows.as_ref().expect(\"we should have Stacked Borrows data\");\n-            let mut alloc_history = stacked_borrows.history.borrow_mut();\n-            alloc_history.log_creation(\n-                Some(orig_tag),\n-                new_tag,\n-                alloc_range(base_offset, size),\n-                &mut current_span,\n-            );\n-            if protect {\n-                alloc_history.log_protector(orig_tag, new_tag, &mut current_span);\n-            }\n-        }\n+        log_creation(this, current_span, alloc_id, base_offset, orig_tag)?;\n \n         // Ensure we bail out if the pointer goes out-of-bounds (see miri#1050).\n         let (alloc_size, _) =\n@@ -819,7 +818,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             item,\n                             (alloc_id, range, offset),\n                             &mut *global,\n-                            &mut current_span,\n+                            current_span,\n                             history,\n                         )\n                     })\n@@ -836,14 +835,14 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let item = Item { perm, tag: new_tag, protector };\n         let range = alloc_range(base_offset, size);\n         let mut global = machine.stacked_borrows.as_ref().unwrap().borrow_mut();\n-        let mut current_span = machine.current_span();\n+        let current_span = &mut machine.current_span(); // `get_alloc_extra_mut` invalidated our old `current_span`\n         stacked_borrows.for_each_mut(range, |offset, stack, history| {\n             stack.grant(\n                 orig_tag,\n                 item,\n                 (alloc_id, range, offset),\n                 &mut global,\n-                &mut current_span,\n+                current_span,\n                 history,\n             )\n         })?;"}]}