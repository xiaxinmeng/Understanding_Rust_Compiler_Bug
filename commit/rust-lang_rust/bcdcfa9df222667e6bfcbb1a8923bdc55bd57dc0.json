{"sha": "bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZGNmYTlkZjIyMjY2N2U2YmZjYmIxYTg5MjNiZGM1NWJkNTdkYzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T16:24:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T16:24:58Z"}, "message": "Some import resolution boilerplate", "tree": {"sha": "09a6cab3c8ca22970a9afcf037e293b3d9ddbfa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a6cab3c8ca22970a9afcf037e293b3d9ddbfa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0", "html_url": "https://github.com/rust-lang/rust/commit/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f8068cea83b4f74ca3a9afb033a405d79727140", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8068cea83b4f74ca3a9afb033a405d79727140", "html_url": "https://github.com/rust-lang/rust/commit/5f8068cea83b4f74ca3a9afb033a405d79727140"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "9584875410a7dc96464859d459b397b5b9ed2675", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0", "patch": "@@ -1,5 +1,6 @@\n pub(super) mod imp;\n mod scope;\n+mod nameres;\n \n use std::sync::Arc;\n "}, {"sha": "137aa8b17e233fffe42a5c4faab66095848f9b38", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0", "patch": "@@ -0,0 +1,156 @@\n+//! Name resolution algorithm\n+use rustc_hash::FxHashMap;\n+\n+use ra_syntax::{\n+    SmolStr, SyntaxKind,\n+    ast::{self, NameOwner}\n+};\n+\n+use crate::{\n+    descriptors::module::ModuleId,\n+    syntax_ptr::LocalSyntaxPtr,\n+};\n+\n+/// A set of items and imports declared inside a module, without relation to\n+/// other modules.\n+///\n+/// This stands in-between raw syntax and name resolution and alow us to avoid\n+/// recomputing name res: if `InputModuleItems` are the same, we can avoid\n+/// running name resolution.\n+#[derive(Debug, Default)]\n+struct InputModuleItems {\n+    items: Vec<ModuleItem>,\n+    glob_imports: Vec<Path>,\n+    imports: Vec<Path>,\n+}\n+\n+#[derive(Debug, Clone)]\n+struct Path {\n+    kind: PathKind,\n+    segments: Vec<SmolStr>,\n+}\n+\n+#[derive(Debug, Clone, Copy)]\n+enum PathKind {\n+    Abs,\n+    Self_,\n+    Super,\n+    Crate,\n+}\n+\n+#[derive(Debug)]\n+struct ItemMap {\n+    per_module: FxHashMap<ModuleId, ModuleItems>,\n+}\n+\n+#[derive(Debug)]\n+struct ModuleItems {\n+    items: FxHashMap<SmolStr, PerNs<ModuleItem>>,\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+enum Namespace {\n+    Types,\n+    Values,\n+}\n+\n+#[derive(Debug)]\n+struct PerNs<T> {\n+    types: Option<T>,\n+    values: Option<T>,\n+}\n+\n+#[derive(Debug)]\n+struct ModuleItem {\n+    ptr: LocalSyntaxPtr,\n+    name: SmolStr,\n+    kind: SyntaxKind,\n+    vis: Vis,\n+}\n+\n+#[derive(Debug)]\n+enum Vis {\n+    Priv,\n+    Other,\n+}\n+\n+impl InputModuleItems {\n+    fn new<'a>(items: impl Iterator<Item = ast::ModuleItem<'a>>) -> InputModuleItems {\n+        let mut res = InputModuleItems::default();\n+        for item in items {\n+            res.add_item(item);\n+        }\n+        res\n+    }\n+\n+    fn add_item(&mut self, item: ast::ModuleItem) -> Option<()> {\n+        match item {\n+            ast::ModuleItem::StructDef(it) => self.items.push(ModuleItem::new(it)?),\n+            ast::ModuleItem::EnumDef(it) => self.items.push(ModuleItem::new(it)?),\n+            ast::ModuleItem::FnDef(it) => self.items.push(ModuleItem::new(it)?),\n+            ast::ModuleItem::TraitDef(it) => self.items.push(ModuleItem::new(it)?),\n+            ast::ModuleItem::TypeDef(it) => self.items.push(ModuleItem::new(it)?),\n+            ast::ModuleItem::ImplItem(it) => {\n+                // impls don't define items\n+            }\n+            ast::ModuleItem::UseItem(it) => self.add_use_item(it),\n+            ast::ModuleItem::ExternCrateItem(it) => (),\n+            ast::ModuleItem::ConstDef(it) => self.items.push(ModuleItem::new(it)?),\n+            ast::ModuleItem::StaticDef(it) => self.items.push(ModuleItem::new(it)?),\n+            ast::ModuleItem::Module(it) => self.items.push(ModuleItem::new(it)?),\n+        }\n+        Some(())\n+    }\n+\n+    fn add_use_item(&mut self, item: ast::UseItem) {\n+        if let Some(tree) = item.use_tree() {\n+            self.add_use_tree(None, tree);\n+        }\n+    }\n+\n+    fn add_use_tree(&mut self, prefix: Option<Path>, tree: ast::UseTree) {\n+        if let Some(use_tree_list) = tree.use_tree_list() {\n+            let prefix = match tree.path() {\n+                None => prefix,\n+                Some(path) => match convert_path(prefix, path) {\n+                    Some(it) => Some(it),\n+                    None => return, // TODO: report errors somewhere\n+                },\n+            };\n+            for tree in use_tree_list.use_trees() {\n+                self.add_use_tree(prefix.clone(), tree);\n+            }\n+        } else {\n+            if let Some(path) = tree.path() {\n+                if let Some(path) = convert_path(prefix, path) {\n+                    if tree.has_star() {\n+                        &mut self.glob_imports\n+                    } else {\n+                        &mut self.imports\n+                    }\n+                    .push(path);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn convert_path(prefix: Option<Path>, path: ast::Path) -> Option<Path> {\n+    prefix\n+}\n+\n+impl ModuleItem {\n+    fn new<'a>(item: impl ast::NameOwner<'a>) -> Option<ModuleItem> {\n+        let name = item.name()?.text();\n+        let ptr = LocalSyntaxPtr::new(item.syntax());\n+        let kind = item.syntax().kind();\n+        let vis = Vis::Other;\n+        let res = ModuleItem {\n+            ptr,\n+            name,\n+            kind,\n+            vis,\n+        };\n+        Some(res)\n+    }\n+}"}, {"sha": "91c67119fb880f1732cb9be3c04804c854814cbd", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=bcdcfa9df222667e6bfcbb1a8923bdc55bd57dc0", "patch": "@@ -315,6 +315,12 @@ impl<'a> PathSegment<'a> {\n     }\n }\n \n+impl<'a> UseTree<'a> {\n+    pub fn has_star(self) -> bool {\n+        self.syntax().children().any(|it| it.kind() == STAR)\n+    }\n+}\n+\n impl<'a> UseTreeList<'a> {\n     pub fn parent_use_tree(self) -> UseTree<'a> {\n         self.syntax()"}]}