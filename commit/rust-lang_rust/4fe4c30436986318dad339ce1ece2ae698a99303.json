{"sha": "4fe4c30436986318dad339ce1ece2ae698a99303", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTRjMzA0MzY5ODYzMThkYWQzMzljZTFlY2UyYWU2OThhOTkzMDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-17T21:35:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-17T21:35:21Z"}, "message": "Improve readability", "tree": {"sha": "11f576a910fda7179bb66aaa7deb30b44b28af5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f576a910fda7179bb66aaa7deb30b44b28af5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe4c30436986318dad339ce1ece2ae698a99303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe4c30436986318dad339ce1ece2ae698a99303", "html_url": "https://github.com/rust-lang/rust/commit/4fe4c30436986318dad339ce1ece2ae698a99303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe4c30436986318dad339ce1ece2ae698a99303/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783c6a333acc3c05839f8c4bfa3174665a32abc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/783c6a333acc3c05839f8c4bfa3174665a32abc6", "html_url": "https://github.com/rust-lang/rust/commit/783c6a333acc3c05839f8c4bfa3174665a32abc6"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "d51036e4f620f110164e43e174b3ccfae471be21", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4c30436986318dad339ce1ece2ae698a99303/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4c30436986318dad339ce1ece2ae698a99303/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=4fe4c30436986318dad339ce1ece2ae698a99303", "patch": "@@ -105,14 +105,16 @@ impl Expander {\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n \n-        if let Some(call_id) = macro_call.as_call_id(db, self.crate_def_map.krate, |path| {\n+        let resolver = |path: ModPath| -> Option<MacroDefId> {\n             if let Some(local_scope) = local_scope {\n                 if let Some(def) = path.as_ident().and_then(|n| local_scope.get_legacy_macro(n)) {\n                     return Some(def);\n                 }\n             }\n             self.resolve_path_as_macro(db, &path)\n-        }) {\n+        };\n+\n+        if let Some(call_id) = macro_call.as_call_id(db, self.crate_def_map.krate, resolver) {\n             let file_id = call_id.as_file();\n             if let Some(node) = db.parse_or_expand(file_id) {\n                 if let Some(expr) = T::cast(node) {"}]}