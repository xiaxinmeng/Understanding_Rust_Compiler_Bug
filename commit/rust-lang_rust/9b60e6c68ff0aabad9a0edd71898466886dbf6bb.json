{"sha": "9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "node_id": "C_kwDOAAsO6NoAKDliNjBlNmM2OGZmMGFhYmFkOWEwZWRkNzE4OTg0NjY4ODZkYmY2YmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T06:07:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T06:07:11Z"}, "message": "Auto merge of #108312 - michaelwoerister:hash-set-not-hash-stable, r=eholk\n\nDo not implement HashStable for HashSet (MCP 533)\n\nThis PR removes all occurrences of `HashSet` in query results, replacing it either with `FxIndexSet` or with `UnordSet`, and then removes the `HashStable` implementation of `HashSet`. This is part of implementing [MCP 533](https://github.com/rust-lang/compiler-team/issues/533), that is, removing the `HashStable` implementations of all collection types with unstable iteration order.\n\nThe changes are mostly mechanical. The only place where additional sorting is happening is in Miri's override implementation of the `exported_symbols` query.", "tree": {"sha": "fba306d7556866ebf4c1a1504a59be89e92f1030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba306d7556866ebf4c1a1504a59be89e92f1030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "html_url": "https://github.com/rust-lang/rust/commit/9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b96553112dce3de630890701f17d86e265f6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b96553112dce3de630890701f17d86e265f6ba", "html_url": "https://github.com/rust-lang/rust/commit/38b96553112dce3de630890701f17d86e265f6ba"}, {"sha": "b79f0261f87ff38de6fee6a6f6ce9915a8f0e6b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b79f0261f87ff38de6fee6a6f6ce9915a8f0e6b4", "html_url": "https://github.com/rust-lang/rust/commit/b79f0261f87ff38de6fee6a6f6ce9915a8f0e6b4"}], "stats": {"total": 230, "additions": 127, "deletions": 103}, "files": [{"sha": "1a94d4ab8b1d8226c21e8587bc91341a6325d93d", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -58,7 +58,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx\n         .reachable_set(())\n-        .iter()\n+        .items()\n         .filter_map(|&def_id| {\n             // We want to ignore some FFI functions that are not exposed from\n             // this crate. Reachable FFI functions can be lumped into two\n@@ -136,7 +136,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n             };\n             (def_id.to_def_id(), info)\n         })\n-        .collect();\n+        .into();\n \n     if let Some(id) = tcx.proc_macro_decls_static(()) {\n         reachable_non_generics.insert("}, {"sha": "576e90ae66b76c470244843c264b689a07eb985c", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast;\n use rustc_attr::InstructionSetAttr;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Applicability;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n@@ -418,7 +418,7 @@ pub fn from_target_feature(\n \n /// Computes the set of target features used in a function for the purposes of\n /// inline assembly.\n-fn asm_target_features(tcx: TyCtxt<'_>, did: DefId) -> &FxHashSet<Symbol> {\n+fn asm_target_features(tcx: TyCtxt<'_>, did: DefId) -> &FxIndexSet<Symbol> {\n     let mut target_features = tcx.sess.unstable_target_features.clone();\n     if tcx.def_kind(did).has_codegen_attrs() {\n         let attrs = tcx.codegen_fn_attrs(did);"}, {"sha": "de9842156d61f4588598c60f7d849437d83158cd", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -617,18 +617,10 @@ where\n     }\n }\n \n-impl<K, R, HCX> HashStable<HCX> for ::std::collections::HashSet<K, R>\n-where\n-    K: ToStableHashKey<HCX> + Eq,\n-    R: BuildHasher,\n-{\n-    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, key| {\n-            let key = key.to_stable_hash_key(hcx);\n-            key.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n+// It is not safe to implement HashStable for HashSet or any other collection type\n+// with unstable but observable iteration order.\n+// See https://github.com/rust-lang/compiler-team/issues/533 for further information.\n+impl<V, HCX> !HashStable<HCX> for std::collections::HashSet<V> {}\n \n impl<K, V, HCX> HashStable<HCX> for ::std::collections::BTreeMap<K, V>\n where"}, {"sha": "5c2435a0122ebeb161cf75f2ff8636a224b4f09c", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -109,6 +109,12 @@ impl<T, I: Iterator<Item = T>> UnordItems<T, I> {\n     }\n }\n \n+impl<T> UnordItems<T, std::iter::Empty<T>> {\n+    pub fn empty() -> Self {\n+        UnordItems(std::iter::empty())\n+    }\n+}\n+\n impl<'a, T: Clone + 'a, I: Iterator<Item = &'a T>> UnordItems<&'a T, I> {\n     #[inline]\n     pub fn cloned(self) -> UnordItems<T, impl Iterator<Item = T>> {\n@@ -133,6 +139,20 @@ impl<T: Ord, I: Iterator<Item = T>> UnordItems<T, I> {\n         items\n     }\n \n+    #[inline]\n+    pub fn into_sorted_stable_ord(self, use_stable_sort: bool) -> Vec<T>\n+    where\n+        T: Ord + StableOrd,\n+    {\n+        let mut items: Vec<T> = self.0.collect();\n+        if use_stable_sort {\n+            items.sort();\n+        } else {\n+            items.sort_unstable()\n+        }\n+        items\n+    }\n+\n     pub fn into_sorted_small_vec<HCX, const LEN: usize>(self, hcx: &HCX) -> SmallVec<[T; LEN]>\n     where\n         T: ToStableHashKey<HCX>,\n@@ -175,6 +195,11 @@ impl<V: Eq + Hash> UnordSet<V> {\n         self.inner.len()\n     }\n \n+    #[inline]\n+    pub fn is_empty(&self) -> bool {\n+        self.inner.is_empty()\n+    }\n+\n     #[inline]\n     pub fn insert(&mut self, v: V) -> bool {\n         self.inner.insert(v)\n@@ -253,7 +278,7 @@ impl<V: Eq + Hash> UnordSet<V> {\n     // We can safely extend this UnordSet from a set of unordered values because that\n     // won't expose the internal ordering anywhere.\n     #[inline]\n-    pub fn extend<I: Iterator<Item = V>>(&mut self, items: UnordItems<V, I>) {\n+    pub fn extend_unord<I: Iterator<Item = V>>(&mut self, items: UnordItems<V, I>) {\n         self.inner.extend(items.0)\n     }\n \n@@ -277,6 +302,12 @@ impl<V: Hash + Eq> FromIterator<V> for UnordSet<V> {\n     }\n }\n \n+impl<V: Hash + Eq> From<FxHashSet<V>> for UnordSet<V> {\n+    fn from(value: FxHashSet<V>) -> Self {\n+        UnordSet { inner: value }\n+    }\n+}\n+\n impl<HCX, V: Hash + Eq + HashStable<HCX>> HashStable<HCX> for UnordSet<V> {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {"}, {"sha": "172b84bafb2157aa757c263354267a603fbbd005", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast::InlineAsmTemplatePiece;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitableExt, UintTy};\n use rustc_session::lint;\n@@ -51,7 +51,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         template: &[InlineAsmTemplatePiece],\n         is_input: bool,\n         tied_input: Option<(&'tcx hir::Expr<'tcx>, Option<InlineAsmType>)>,\n-        target_features: &FxHashSet<Symbol>,\n+        target_features: &FxIndexSet<Symbol>,\n     ) -> Option<InlineAsmType> {\n         let ty = (self.get_operand_ty)(expr);\n         if ty.has_non_region_infer() {\n@@ -201,7 +201,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         // (!). In that case we still need the earlier check to verify that the\n         // register class is usable at all.\n         if let Some(feature) = feature {\n-            if !target_features.contains(&feature) {\n+            if !target_features.contains(feature) {\n                 let msg = &format!(\"`{}` target feature is not enabled\", feature);\n                 let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n                 err.note(&format!("}, {"sha": "268b9ac530f189f1999acedd0acf7c16137020b0", "filename": "compiler/rustc_hir_analysis/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -10,7 +10,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     for item_def_id in tcx.hir().body_owners() {\n         let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n-        used_trait_imports.extend(imports.items().copied());\n+        used_trait_imports.extend_unord(imports.items().copied());\n     }\n \n     for &id in tcx.maybe_unused_trait_imports(()) {"}, {"sha": "55ea78c0474e092c80c37de940db95c3f4b99c62", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -94,7 +94,8 @@ macro_rules! arena_types {\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<'tcx>,\n             [decode] attribute: rustc_ast::Attribute,\n-            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n+            [] name_set: rustc_data_structures::unord::UnordSet<rustc_span::symbol::Symbol>,\n+            [] ordered_name_set: rustc_data_structures::fx::FxIndexSet<rustc_span::symbol::Symbol>,\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types"}, {"sha": "d85d68870d7d81e123b45b1a30366e7e2a75cd71", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -2,7 +2,7 @@\n \n use crate::mir::{Body, ConstantKind, Promoted};\n use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::unord::UnordSet;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -123,7 +123,7 @@ pub struct UnsafetyCheckResult {\n     pub violations: Vec<UnsafetyViolation>,\n \n     /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n-    pub used_unsafe_blocks: FxHashSet<hir::HirId>,\n+    pub used_unsafe_blocks: UnordSet<hir::HirId>,\n \n     /// This is `Some` iff the item is not a closure.\n     pub unused_unsafes: Option<Vec<(hir::HirId, UnusedUnsafe)>>,"}, {"sha": "f15d71ba7943069642ae97f610d4f6305ed42e69", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -764,7 +764,7 @@ rustc_queries! {\n     ///\n     /// The map returned for `tcx.impl_item_implementor_ids(impl_id)` would be\n     ///`{ trait_f: impl_f, trait_g: impl_g }`\n-    query impl_item_implementor_ids(impl_id: DefId) -> &'tcx FxHashMap<DefId, DefId> {\n+    query impl_item_implementor_ids(impl_id: DefId) -> &'tcx DefIdMap<DefId> {\n         arena_cache\n         desc { |tcx| \"comparing impl items against trait for `{}`\", tcx.def_path_str(impl_id) }\n     }\n@@ -906,8 +906,8 @@ rustc_queries! {\n     /// The second return value maps from ADTs to ignored derived traits (e.g. Debug and Clone) and\n     /// their respective impl (i.e., part of the derive macro)\n     query live_symbols_and_ignored_derived_traits(_: ()) -> &'tcx (\n-        FxHashSet<LocalDefId>,\n-        FxHashMap<LocalDefId, Vec<(DefId, DefId)>>\n+        LocalDefIdSet,\n+        LocalDefIdMap<Vec<(DefId, DefId)>>\n     ) {\n         arena_cache\n         desc { \"finding live symbols in crate\" }\n@@ -1120,7 +1120,7 @@ rustc_queries! {\n         desc { \"checking for private elements in public interfaces\" }\n     }\n \n-    query reachable_set(_: ()) -> &'tcx FxHashSet<LocalDefId> {\n+    query reachable_set(_: ()) -> &'tcx LocalDefIdSet {\n         arena_cache\n         desc { \"reachability\" }\n     }\n@@ -1229,7 +1229,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query asm_target_features(def_id: DefId) -> &'tcx FxHashSet<Symbol> {\n+    query asm_target_features(def_id: DefId) -> &'tcx FxIndexSet<Symbol> {\n         desc { |tcx| \"computing target features for inline asm of `{}`\", tcx.def_path_str(def_id) }\n     }\n \n@@ -1845,7 +1845,7 @@ rustc_queries! {\n     query maybe_unused_trait_imports(_: ()) -> &'tcx FxIndexSet<LocalDefId> {\n         desc { \"fetching potentially unused trait imports\" }\n     }\n-    query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx FxHashSet<Symbol> {\n+    query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx UnordSet<Symbol> {\n         desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n "}, {"sha": "82da846ea68a5044921690ca739cdd53a1e26a67", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -36,6 +36,7 @@ use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, MappedReadGuard, ReadGuard, WorkerLocal};\n+use rustc_data_structures::unord::UnordSet;\n use rustc_errors::{\n     DecorateLint, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n };\n@@ -2486,7 +2487,9 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.names_imported_by_glob_use = |tcx, id| {\n-        tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())\n+        tcx.arena.alloc(UnordSet::from(\n+            tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default(),\n+        ))\n     };\n \n     providers.extern_mod_stmt_cnum ="}, {"sha": "9548be4c1382feae5bba9667982c806e903802fa", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -41,7 +41,7 @@ use rustc_arena::TypedArena;\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n@@ -50,7 +50,9 @@ use rustc_data_structures::unord::UnordSet;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, DocLinkResMap};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n+use rustc_hir::def_id::{\n+    CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdMap, LocalDefIdSet,\n+};\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};"}, {"sha": "71605113dd572b994dbdb03cfa97b064854640a0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::unord::{UnordItems, UnordSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -24,7 +24,7 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n \n     /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n-    used_unsafe_blocks: FxHashSet<HirId>,\n+    used_unsafe_blocks: UnordSet<HirId>,\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n@@ -129,7 +129,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     let def_id = def_id.expect_local();\n                     let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                         self.tcx.unsafety_check_result(def_id);\n-                    self.register_violations(violations, used_unsafe_blocks.iter().copied());\n+                    self.register_violations(violations, used_unsafe_blocks.items().copied());\n                 }\n             },\n             _ => {}\n@@ -151,7 +151,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                         let local_def_id = def_id.expect_local();\n                         let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                             self.tcx.unsafety_check_result(local_def_id);\n-                        self.register_violations(violations, used_unsafe_blocks.iter().copied());\n+                        self.register_violations(violations, used_unsafe_blocks.items().copied());\n                     }\n                 }\n             }\n@@ -268,14 +268,14 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n             .lint_root;\n         self.register_violations(\n             [&UnsafetyViolation { source_info, lint_root, kind, details }],\n-            [],\n+            UnordItems::empty(),\n         );\n     }\n \n     fn register_violations<'a>(\n         &mut self,\n         violations: impl IntoIterator<Item = &'a UnsafetyViolation>,\n-        new_used_unsafe_blocks: impl IntoIterator<Item = HirId>,\n+        new_used_unsafe_blocks: UnordItems<HirId, impl Iterator<Item = HirId>>,\n     ) {\n         let safety = self.body.source_scopes[self.source_info.scope]\n             .local_data\n@@ -308,9 +308,7 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n             }),\n         };\n \n-        new_used_unsafe_blocks.into_iter().for_each(|hir_id| {\n-            self.used_unsafe_blocks.insert(hir_id);\n-        });\n+        self.used_unsafe_blocks.extend_unord(new_used_unsafe_blocks);\n     }\n     fn check_mut_borrowing_layout_constrained_field(\n         &mut self,\n@@ -407,7 +405,7 @@ enum Context {\n \n struct UnusedUnsafeVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    used_unsafe_blocks: &'a FxHashSet<HirId>,\n+    used_unsafe_blocks: &'a UnordSet<HirId>,\n     context: Context,\n     unused_unsafes: &'a mut Vec<(HirId, UnusedUnsafe)>,\n }\n@@ -458,7 +456,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n fn check_unused_unsafe(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-    used_unsafe_blocks: &FxHashSet<HirId>,\n+    used_unsafe_blocks: &UnordSet<HirId>,\n ) -> Vec<(HirId, UnusedUnsafe)> {\n     let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n@@ -505,7 +503,7 @@ fn unsafety_check_result(\n     if body.is_custom_mir() {\n         return tcx.arena.alloc(UnsafetyCheckResult {\n             violations: Vec::new(),\n-            used_unsafe_blocks: FxHashSet::default(),\n+            used_unsafe_blocks: Default::default(),\n             unused_unsafes: Some(Vec::new()),\n         });\n     }"}, {"sha": "59877ebb26b703f148d05f34bdccdd0bb1df829b", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -2,8 +2,8 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n+use hir::def_id::{LocalDefIdMap, LocalDefIdSet};\n use itertools::Itertools;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::MultiSpan;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -45,17 +45,17 @@ struct MarkSymbolVisitor<'tcx> {\n     worklist: Vec<LocalDefId>,\n     tcx: TyCtxt<'tcx>,\n     maybe_typeck_results: Option<&'tcx ty::TypeckResults<'tcx>>,\n-    live_symbols: FxHashSet<LocalDefId>,\n+    live_symbols: LocalDefIdSet,\n     repr_has_repr_c: bool,\n     repr_has_repr_simd: bool,\n     in_pat: bool,\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n-    struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n+    struct_constructors: LocalDefIdMap<LocalDefId>,\n     // maps from ADTs to ignored derived traits (e.g. Debug and Clone)\n     // and the span of their respective impl (i.e., part of the derive\n     // macro)\n-    ignored_derived_traits: FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n+    ignored_derived_traits: LocalDefIdMap<Vec<(DefId, DefId)>>,\n }\n \n impl<'tcx> MarkSymbolVisitor<'tcx> {\n@@ -237,7 +237,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     }\n \n     fn mark_live_symbols(&mut self) {\n-        let mut scanned = FxHashSet::default();\n+        let mut scanned = LocalDefIdSet::default();\n         while let Some(id) = self.worklist.pop() {\n             if !scanned.insert(id) {\n                 continue;\n@@ -506,7 +506,7 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool\n fn check_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     worklist: &mut Vec<LocalDefId>,\n-    struct_constructors: &mut FxHashMap<LocalDefId, LocalDefId>,\n+    struct_constructors: &mut LocalDefIdMap<LocalDefId>,\n     id: hir::ItemId,\n ) {\n     let allow_dead_code = has_allow_dead_code_or_lang_attr(tcx, id.owner_id.def_id);\n@@ -583,9 +583,7 @@ fn check_foreign_item(tcx: TyCtxt<'_>, worklist: &mut Vec<LocalDefId>, id: hir::\n     }\n }\n \n-fn create_and_seed_worklist(\n-    tcx: TyCtxt<'_>,\n-) -> (Vec<LocalDefId>, FxHashMap<LocalDefId, LocalDefId>) {\n+fn create_and_seed_worklist(tcx: TyCtxt<'_>) -> (Vec<LocalDefId>, LocalDefIdMap<LocalDefId>) {\n     let effective_visibilities = &tcx.effective_visibilities(());\n     // see `MarkSymbolVisitor::struct_constructors`\n     let mut struct_constructors = Default::default();\n@@ -617,7 +615,7 @@ fn create_and_seed_worklist(\n fn live_symbols_and_ignored_derived_traits(\n     tcx: TyCtxt<'_>,\n     (): (),\n-) -> (FxHashSet<LocalDefId>, FxHashMap<LocalDefId, Vec<(DefId, DefId)>>) {\n+) -> (LocalDefIdSet, LocalDefIdMap<Vec<(DefId, DefId)>>) {\n     let (worklist, struct_constructors) = create_and_seed_worklist(tcx);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n@@ -629,7 +627,7 @@ fn live_symbols_and_ignored_derived_traits(\n         in_pat: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n-        ignored_derived_traits: FxHashMap::default(),\n+        ignored_derived_traits: Default::default(),\n     };\n     symbol_visitor.mark_live_symbols();\n     (symbol_visitor.live_symbols, symbol_visitor.ignored_derived_traits)\n@@ -643,8 +641,8 @@ struct DeadVariant {\n \n struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    live_symbols: &'tcx FxHashSet<LocalDefId>,\n-    ignored_derived_traits: &'tcx FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n+    live_symbols: &'tcx LocalDefIdSet,\n+    ignored_derived_traits: &'tcx LocalDefIdMap<Vec<(DefId, DefId)>>,\n }\n \n enum ShouldWarnAboutField {"}, {"sha": "a5f7b07fe5211f30fed800073ded29c38a5c09b2", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -5,7 +5,7 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc_data_structures::fx::FxHashSet;\n+use hir::def_id::LocalDefIdSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -63,7 +63,7 @@ struct ReachableContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     maybe_typeck_results: Option<&'tcx ty::TypeckResults<'tcx>>,\n     // The set of items which must be exported in the linkage sense.\n-    reachable_symbols: FxHashSet<LocalDefId>,\n+    reachable_symbols: LocalDefIdSet,\n     // A worklist of item IDs. Each item ID in this worklist will be inlined\n     // and will be scanned for further references.\n     // FIXME(eddyb) benchmark if this would be faster as a `VecDeque`.\n@@ -175,7 +175,7 @@ impl<'tcx> ReachableContext<'tcx> {\n \n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     fn propagate(&mut self) {\n-        let mut scanned = FxHashSet::default();\n+        let mut scanned = LocalDefIdSet::default();\n         while let Some(search_item) = self.worklist.pop() {\n             if !scanned.insert(search_item) {\n                 continue;\n@@ -361,7 +361,7 @@ fn has_custom_linkage(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n         || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n }\n \n-fn reachable_set(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n+fn reachable_set(tcx: TyCtxt<'_>, (): ()) -> LocalDefIdSet {\n     let effective_visibilities = &tcx.effective_visibilities(());\n \n     let any_library ="}, {"sha": "2cc25e977a901a2d9d352b6d26c3db9d59a86e77", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -11,7 +11,7 @@ use crate::{filesearch, lint};\n pub use rustc_ast::attr::MarkedAttrs;\n pub use rustc_ast::Attribute;\n use rustc_data_structures::flock;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::jobserver::{self, Client};\n use rustc_data_structures::profiling::{duration_to_secs_str, SelfProfiler, SelfProfilerRef};\n use rustc_data_structures::sync::{\n@@ -207,10 +207,10 @@ pub struct Session {\n     pub asm_arch: Option<InlineAsmArch>,\n \n     /// Set of enabled features for the current target.\n-    pub target_features: FxHashSet<Symbol>,\n+    pub target_features: FxIndexSet<Symbol>,\n \n     /// Set of enabled features for the current target, including unstable ones.\n-    pub unstable_target_features: FxHashSet<Symbol>,\n+    pub unstable_target_features: FxIndexSet<Symbol>,\n }\n \n pub struct PerfStats {\n@@ -1488,8 +1488,8 @@ pub fn build_session(\n         ctfe_backtrace,\n         miri_unleashed_features: Lock::new(Default::default()),\n         asm_arch,\n-        target_features: FxHashSet::default(),\n-        unstable_target_features: FxHashSet::default(),\n+        target_features: Default::default(),\n+        unstable_target_features: Default::default(),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "97132311a5c9ad9f56e755089174f21ea6055393", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;\n@@ -80,7 +80,7 @@ pub fn target_reserves_x18(target: &Target) -> bool {\n fn reserved_x18(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {"}, {"sha": "514e30ae0204da2860f371f5d8b4409bdd15705b", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::{sym, Symbol};\n use std::fmt;\n@@ -64,14 +64,14 @@ impl ArmInlineAsmRegClass {\n }\n \n // This uses the same logic as useR7AsFramePointer in LLVM\n-fn frame_pointer_is_r7(target_features: &FxHashSet<Symbol>, target: &Target) -> bool {\n+fn frame_pointer_is_r7(target_features: &FxIndexSet<Symbol>, target: &Target) -> bool {\n     target.is_like_osx || (!target.is_like_windows && target_features.contains(&sym::thumb_mode))\n }\n \n fn frame_pointer_r11(\n     arch: InlineAsmArch,\n     reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -87,7 +87,7 @@ fn frame_pointer_r11(\n fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -101,7 +101,7 @@ fn frame_pointer_r7(\n fn not_thumb1(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -118,7 +118,7 @@ fn not_thumb1(\n fn reserved_r9(\n     arch: InlineAsmArch,\n     reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &Target,\n     is_clobber: bool,\n ) -> Result<(), &'static str> {"}, {"sha": "0dbfd4267818b6fae1da27367fdecd8f2097c0a1", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,6 +1,6 @@\n use crate::spec::Target;\n use crate::{abi::Size, spec::RelocModel};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;\n@@ -37,13 +37,14 @@ macro_rules! def_reg_class {\n \n         pub(super) fn regclass_map() -> rustc_data_structures::fx::FxHashMap<\n             super::InlineAsmRegClass,\n-            rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n+            rustc_data_structures::fx::FxIndexSet<super::InlineAsmReg>,\n         > {\n-            use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+            use rustc_data_structures::fx::FxHashMap;\n+            use rustc_data_structures::fx::FxIndexSet;\n             use super::InlineAsmRegClass;\n             let mut map = FxHashMap::default();\n             $(\n-                map.insert(InlineAsmRegClass::$arch($arch_regclass::$class), FxHashSet::default());\n+                map.insert(InlineAsmRegClass::$arch($arch_regclass::$class), FxIndexSet::default());\n             )*\n             map\n         }\n@@ -94,7 +95,7 @@ macro_rules! def_regs {\n             pub fn validate(self,\n                 _arch: super::InlineAsmArch,\n                 _reloc_model: crate::spec::RelocModel,\n-                _target_features: &rustc_data_structures::fx::FxHashSet<Symbol>,\n+                _target_features: &rustc_data_structures::fx::FxIndexSet<Symbol>,\n                 _target: &crate::spec::Target,\n                 _is_clobber: bool,\n             ) -> Result<(), &'static str> {\n@@ -118,11 +119,11 @@ macro_rules! def_regs {\n         pub(super) fn fill_reg_map(\n             _arch: super::InlineAsmArch,\n             _reloc_model: crate::spec::RelocModel,\n-            _target_features: &rustc_data_structures::fx::FxHashSet<Symbol>,\n+            _target_features: &rustc_data_structures::fx::FxIndexSet<Symbol>,\n             _target: &crate::spec::Target,\n             _map: &mut rustc_data_structures::fx::FxHashMap<\n                 super::InlineAsmRegClass,\n-                rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n+                rustc_data_structures::fx::FxIndexSet<super::InlineAsmReg>,\n             >,\n         ) {\n             #[allow(unused_imports)]\n@@ -334,7 +335,7 @@ impl InlineAsmReg {\n         self,\n         arch: InlineAsmArch,\n         reloc_model: RelocModel,\n-        target_features: &FxHashSet<Symbol>,\n+        target_features: &FxIndexSet<Symbol>,\n         target: &Target,\n         is_clobber: bool,\n     ) -> Result<(), &'static str> {\n@@ -701,9 +702,9 @@ impl fmt::Display for InlineAsmType {\n pub fn allocatable_registers(\n     arch: InlineAsmArch,\n     reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     target: &crate::spec::Target,\n-) -> FxHashMap<InlineAsmRegClass, FxHashSet<InlineAsmReg>> {\n+) -> FxHashMap<InlineAsmRegClass, FxIndexSet<InlineAsmReg>> {\n     match arch {\n         InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n             let mut map = x86::regclass_map();"}, {"sha": "dea6d50fe2ba83239bf1139fad0beb661e0bf67a", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::{sym, Symbol};\n use std::fmt;\n@@ -55,7 +55,7 @@ impl RiscVInlineAsmRegClass {\n fn not_e(\n     _arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    target_features: &FxHashSet<Symbol>,\n+    target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {"}, {"sha": "3902dac7ff654acf5d41e0f025c3c83f0f29dd61", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;\n@@ -147,7 +147,7 @@ impl X86InlineAsmRegClass {\n fn x86_64_only(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -161,7 +161,7 @@ fn x86_64_only(\n fn high_byte(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -174,7 +174,7 @@ fn high_byte(\n fn rbx_reserved(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {\n@@ -190,7 +190,7 @@ fn rbx_reserved(\n fn esi_reserved(\n     arch: InlineAsmArch,\n     _reloc_model: RelocModel,\n-    _target_features: &FxHashSet<Symbol>,\n+    _target_features: &FxIndexSet<Symbol>,\n     _target: &Target,\n     _is_clobber: bool,\n ) -> Result<(), &'static str> {"}, {"sha": "cae7f36a2081f9f88158d9f15f000fc1b87a486f", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -1,7 +1,6 @@\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_middle::ty::{self, ImplTraitInTraitData, InternalSubsts, TyCtxt};\n@@ -97,7 +96,7 @@ fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItems {\n     }\n }\n \n-fn impl_item_implementor_ids(tcx: TyCtxt<'_>, impl_id: DefId) -> FxHashMap<DefId, DefId> {\n+fn impl_item_implementor_ids(tcx: TyCtxt<'_>, impl_id: DefId) -> DefIdMap<DefId> {\n     tcx.associated_items(impl_id)\n         .in_definition_order()\n         .filter_map(|item| item.trait_item_def_id.map(|trait_item| (trait_item, item.def_id)))"}, {"sha": "e105452e1c5f3a3bc0c95f3b05e01a1e07f13dcc", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -155,14 +155,10 @@ impl LateLintPass<'_> for WildcardImports {\n                     )\n                 };\n \n-                let imports_string = if used_imports.len() == 1 {\n-                    used_imports.iter().next().unwrap().to_string()\n+                let mut imports = used_imports.items().map(ToString::to_string).into_sorted_stable_ord(false);\n+                let imports_string = if imports.len() == 1 {\n+                    imports.pop().unwrap()\n                 } else {\n-                    let mut imports = used_imports\n-                        .iter()\n-                        .map(ToString::to_string)\n-                        .collect::<Vec<_>>();\n-                    imports.sort();\n                     if braced_glob {\n                         imports.join(\", \")\n                     } else {"}, {"sha": "a2caeb972973db358fd360a1b4cc680e4d381b50", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b60e6c68ff0aabad9a0edd71898466886dbf6bb/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "patch": "@@ -109,11 +109,14 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n                 // an empty result if `tcx.sess.opts.output_types.should_codegen()` is false.\n                 local_providers.exported_symbols = |tcx, cnum| {\n                     assert_eq!(cnum, LOCAL_CRATE);\n+                    let reachable_set = tcx.with_stable_hashing_context(|hcx| {\n+                        tcx.reachable_set(()).to_sorted(&hcx, true)\n+                    });\n                     tcx.arena.alloc_from_iter(\n                         // This is based on:\n                         // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L62-L63\n                         // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L174\n-                        tcx.reachable_set(()).iter().filter_map(|&local_def_id| {\n+                        reachable_set.into_iter().filter_map(|&local_def_id| {\n                             // Do the same filtering that rustc does:\n                             // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L84-L102\n                             // Otherwise it may cause unexpected behaviours and ICEs"}]}