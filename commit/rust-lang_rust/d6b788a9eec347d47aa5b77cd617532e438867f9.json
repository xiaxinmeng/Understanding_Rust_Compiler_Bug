{"sha": "d6b788a9eec347d47aa5b77cd617532e438867f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Yjc4OGE5ZWVjMzQ3ZDQ3YWE1Yjc3Y2Q2MTc1MzJlNDM4ODY3Zjk=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T21:26:28Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T08:27:52Z"}, "message": "Add trait codegen to `add_missing_impl_members` assist", "tree": {"sha": "6add7bc6849eb5f082d0772d70a4a1d61cf674de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6add7bc6849eb5f082d0772d70a4a1d61cf674de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b788a9eec347d47aa5b77cd617532e438867f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b788a9eec347d47aa5b77cd617532e438867f9", "html_url": "https://github.com/rust-lang/rust/commit/d6b788a9eec347d47aa5b77cd617532e438867f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b788a9eec347d47aa5b77cd617532e438867f9/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2e25a034385f57f2cfc6b4f4e725f827cff923", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2e25a034385f57f2cfc6b4f4e725f827cff923", "html_url": "https://github.com/rust-lang/rust/commit/4d2e25a034385f57f2cfc6b4f4e725f827cff923"}], "stats": {"total": 93, "additions": 74, "deletions": 19}, "files": [{"sha": "3a014545138b6b95084db84af60b201ce2ccb813", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=d6b788a9eec347d47aa5b77cd617532e438867f9", "patch": "@@ -10,8 +10,8 @@ use hir_expand::InFile;\n use syntax::ast;\n \n use crate::{\n-    db::HirDatabase, Const, ConstParam, Enum, Field, FieldSource, Function, Impl, LifetimeParam,\n-    MacroDef, Module, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n+    db::HirDatabase, Adt, Const, ConstParam, Enum, Field, FieldSource, Function, Impl,\n+    LifetimeParam, MacroDef, Module, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n };\n \n pub trait HasSource {\n@@ -56,6 +56,16 @@ impl HasSource for Field {\n         Some(field_source)\n     }\n }\n+impl HasSource for Adt {\n+    type Ast = ast::Adt;\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        match self {\n+            Adt::Struct(s) => Some(s.source(db)?.map(|s| ast::Adt::Struct(s))),\n+            Adt::Union(u) => Some(u.source(db)?.map(|u| ast::Adt::Union(u))),\n+            Adt::Enum(e) => Some(e.source(db)?.map(|e| ast::Adt::Enum(e))),\n+        }\n+    }\n+}\n impl HasSource for Struct {\n     type Ast = ast::Struct;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {"}, {"sha": "87c8f5e5482784d3924e1d9edd72e184729179ff", "filename": "crates/ide_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=d6b788a9eec347d47aa5b77cd617532e438867f9", "patch": "@@ -1,10 +1,12 @@\n+use hir::HasSource;\n use ide_db::traits::resolve_target_trait;\n-use syntax::ast::{self, AstNode};\n+use syntax::ast::{self, make, AstNode};\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::{\n-        add_trait_assoc_items_to_impl, filter_assoc_items, render_snippet, Cursor, DefaultMethods,\n+        add_trait_assoc_items_to_impl, filter_assoc_items, gen_trait_body, render_snippet, Cursor,\n+        DefaultMethods,\n     },\n     AssistId, AssistKind,\n };\n@@ -115,18 +117,26 @@ fn add_missing_impl_members_inner(\n     let target = impl_def.syntax().text_range();\n     acc.add(AssistId(assist_id, AssistKind::QuickFix), label, target, |builder| {\n         let target_scope = ctx.sema.scope(impl_def.syntax());\n-        let (new_impl_def, first_new_item) =\n-            add_trait_assoc_items_to_impl(&ctx.sema, missing_items, trait_, impl_def, target_scope);\n+        let (new_impl_def, first_new_item) = add_trait_assoc_items_to_impl(\n+            &ctx.sema,\n+            missing_items,\n+            trait_,\n+            impl_def.clone(),\n+            target_scope,\n+        );\n         match ctx.config.snippet_cap {\n             None => builder.replace(target, new_impl_def.to_string()),\n             Some(cap) => {\n                 let mut cursor = Cursor::Before(first_new_item.syntax());\n                 let placeholder;\n                 if let ast::AssocItem::Fn(func) = &first_new_item {\n-                    if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast) {\n-                        if m.syntax().text() == \"todo!()\" {\n-                            placeholder = m;\n-                            cursor = Cursor::Replace(placeholder.syntax());\n+                    if try_gen_trait_body(ctx, func, &trait_, &impl_def).is_none() {\n+                        if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast)\n+                        {\n+                            if m.syntax().text() == \"todo!()\" {\n+                                placeholder = m;\n+                                cursor = Cursor::Replace(placeholder.syntax());\n+                            }\n                         }\n                     }\n                 }\n@@ -140,6 +150,18 @@ fn add_missing_impl_members_inner(\n     })\n }\n \n+fn try_gen_trait_body(\n+    ctx: &AssistContext,\n+    func: &ast::Fn,\n+    trait_: &hir::Trait,\n+    impl_def: &ast::Impl,\n+) -> Option<()> {\n+    let trait_path = make::path_from_text(&trait_.name(ctx.db()).to_string());\n+    let hir_ty = ctx.sema.resolve_type(&impl_def.self_ty()?)?;\n+    let adt = hir_ty.as_adt()?.source(ctx.db())?;\n+    gen_trait_body(func, &trait_path, &adt.value)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -847,4 +869,28 @@ impl T for () {\n \",\n         );\n     }\n+\n+    #[test]\n+    fn test_default_body_generation() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+//- minicore: default\n+struct Foo(usize);\n+\n+impl Default for Foo {\n+    $0\n+}\n+\"#,\n+            r#\"\n+struct Foo(usize);\n+\n+impl Default for Foo {\n+    $0fn default() -> Self {\n+        Self(Default::default())\n+    }\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "77a6e1546275cc17580ede6a6be0a61d7a00f943", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=d6b788a9eec347d47aa5b77cd617532e438867f9", "patch": "@@ -168,7 +168,7 @@ fn impl_def_from_trait(\n \n     // Generate a default `impl` function body for the derived trait.\n     if let ast::AssocItem::Fn(ref func) = first_assoc_item {\n-        let _ = gen_trait_body(func, trait_path, adt, annotated_name);\n+        let _ = gen_trait_body(func, trait_path, adt);\n     };\n \n     Some((impl_def, first_assoc_item))"}, {"sha": "e8d11f42b0ec2ff5c29c358b4a35ffca19678420", "filename": "crates/ide_assists/src/utils/gen_trait_body.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_body.rs?ref=d6b788a9eec347d47aa5b77cd617532e438867f9", "patch": "@@ -1,3 +1,5 @@\n+//! This module contains functions to generate default trait impl function bodies where possible.\n+\n use syntax::ast::{self, edit::AstNodeEdit, make, AstNode, NameOwner};\n use syntax::ted;\n \n@@ -6,21 +8,17 @@ use syntax::ted;\n /// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n /// `None` means that generating a custom trait body failed, and the body will remain\n /// as `todo!` instead.\n-pub(crate) fn gen_trait_body(\n-    func: &ast::Fn,\n-    trait_path: &ast::Path,\n-    adt: &ast::Adt,\n-    annotated_name: &ast::Name,\n-) -> Option<()> {\n+pub(crate) fn gen_trait_body(func: &ast::Fn, trait_path: &ast::Path, adt: &ast::Adt) -> Option<()> {\n     match trait_path.segment()?.name_ref()?.text().as_str() {\n-        \"Debug\" => gen_debug_impl(adt, func, annotated_name),\n+        \"Debug\" => gen_debug_impl(adt, func),\n         \"Default\" => gen_default_impl(adt, func),\n         _ => None,\n     }\n }\n \n /// Generate a `Debug` impl based on the fields and members of the target type.\n-fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) -> Option<()> {\n+fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    let annotated_name = adt.name()?;\n     match adt {\n         // `Debug` cannot be derived for unions, so no default impl can be provided.\n         ast::Adt::Union(_) => None,"}, {"sha": "c895e48f3dfd1992cab3612095cfa90b6ff5c0f7", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b788a9eec347d47aa5b77cd617532e438867f9/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=d6b788a9eec347d47aa5b77cd617532e438867f9", "patch": "@@ -280,6 +280,7 @@ fn check_todo(path: &Path, text: &str) {\n         \"ast/make.rs\",\n         // The documentation in string literals may contain anything for its own purposes\n         \"ide_db/src/helpers/generated_lints.rs\",\n+        \"ide_assists/src/utils/gen_trait_body.rs\",\n         \"ide_assists/src/tests/generated.rs\",\n     ];\n     if need_todo.iter().any(|p| path.ends_with(p)) {"}]}