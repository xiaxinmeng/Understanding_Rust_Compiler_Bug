{"sha": "3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMmVkMThhNGNkODE2ZWE4ZjI5Y2RmZmUyYzZlZjA4MjY5MTlhOGM=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T03:52:56Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:21:57Z"}, "message": "RIMOV: fix issue-3563-3 test", "tree": {"sha": "01e3891c8cbf57fba1cd799e4df994db0b92ca59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e3891c8cbf57fba1cd799e4df994db0b92ca59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c", "html_url": "https://github.com/rust-lang/rust/commit/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb642350e14690746406f53e3252b937502071c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb642350e14690746406f53e3252b937502071c3", "html_url": "https://github.com/rust-lang/rust/commit/bb642350e14690746406f53e3252b937502071c3"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "1631a19fb6a551a238c371668e53b965fdfe88b2", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c", "patch": "@@ -51,7 +51,7 @@ struct AsciiArt\n     width: uint,\n     height: uint,\n     priv fill: char,\n-    priv lines: ~[~[mut char]],\n+    priv lines: ~[~[char]],\n \n     // This struct can be quite large so we'll disable copying: developers need\n     // to either pass these structs around via borrowed pointers or move them.\n@@ -65,14 +65,14 @@ fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt\n {\n     // Use an anonymous function to build a vector of vectors containing\n     // blank characters for each position in our canvas.\n-    let lines = do vec::build_sized(height)\n+    let mut lines = do vec::build_sized(height)\n         |push|\n         {\n             for height.times\n             {\n                 let mut line = ~[];   \n                 vec::grow_set(&mut line, width-1, &'.', '.');\n-                push(vec::cast_to_mut(line));\n+                push(line);\n             }\n         };\n \n@@ -84,7 +84,7 @@ fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt\n // Methods particular to the AsciiArt struct.\n impl AsciiArt\n {\n-    fn add_pt(x: int, y: int)\n+    fn add_pt(&mut self, x: int, y: int)\n     {\n         if x >= 0 && x < self.width as int\n         {\n@@ -99,7 +99,7 @@ impl AsciiArt\n                 // element is:\n                 // 1) potentially large\n                 // 2) needs to be modified\n-                let row = &self.lines[v];\n+                let row = &mut self.lines[v];\n                 row[h] = self.fill;\n             }\n         }\n@@ -125,12 +125,12 @@ impl AsciiArt : ToStr\n #[allow(default_methods)]\n trait Canvas\n {\n-    fn add_point(shape: Point);\n-    fn add_rect(shape: Rect);\n+    fn add_point(&mut self, shape: Point);\n+    fn add_rect(&mut self, shape: Rect);\n \n     // Unlike interfaces traits support default implementations.\n     // Got an ICE as soon as I added this method.\n-    fn add_points(shapes: &[Point])\n+    fn add_points(&mut self, shapes: &[Point])\n     {\n         for shapes.each |pt| {self.add_point(*pt)};\n     }\n@@ -141,12 +141,12 @@ trait Canvas\n // and code can use them polymorphically via the Canvas trait.\n impl AsciiArt : Canvas\n {\n-    fn add_point(shape: Point)\n+    fn add_point(&mut self, shape: Point)\n     {\n         self.add_pt(shape.x, shape.y);\n     }\n \n-    fn add_rect(shape: Rect)\n+    fn add_rect(&mut self, shape: Rect)\n     {\n         // Add the top and bottom lines.\n         for int::range(shape.top_left.x, shape.top_left.x + shape.size.width)\n@@ -188,7 +188,7 @@ fn test_ascii_art_ctor()\n \n fn test_add_pt()\n {\n-    let art = AsciiArt(3, 3, '*');\n+    let mut art = AsciiArt(3, 3, '*');\n     art.add_pt(0, 0);\n     art.add_pt(0, -10);\n     art.add_pt(1, 2);\n@@ -198,7 +198,7 @@ fn test_add_pt()\n \n fn test_shapes()\n {\n-    let art = AsciiArt(4, 4, '*');\n+    let mut art = AsciiArt(4, 4, '*');\n     art.add_rect(Rect {top_left: Point {x: 0, y: 0}, size: Size {width: 4, height: 4}});\n     art.add_point(Point {x: 2, y: 2});\n     assert check_strs(art.to_str(), \"****\\n*..*\\n*.**\\n****\");"}]}