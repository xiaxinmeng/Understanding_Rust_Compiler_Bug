{"sha": "81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZGQzODI0ZmY0ZjRmODVkYjJhMDkyZGFiNzhlNWU2YzA1Zjk2Y2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-11T08:12:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-11T08:12:41Z"}, "message": "Auto merge of #30265 - oli-obk:const_val_trans, r=pnkfelix\n\nr? @nagisa\n\nI'm going to need the `ConstVal` -> `ValueRef` translation to start removing trans/consts piece by piece. If you need anything implemented in the translation, feel free to assign an issue to me.", "tree": {"sha": "44058b166202cdd08e396b124344a15c751f0255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44058b166202cdd08e396b124344a15c751f0255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "html_url": "https://github.com/rust-lang/rust/commit/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01e5c48656ac41e5a83d63d9dac7473fdd63d4e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e5c48656ac41e5a83d63d9dac7473fdd63d4e0", "html_url": "https://github.com/rust-lang/rust/commit/01e5c48656ac41e5a83d63d9dac7473fdd63d4e0"}, {"sha": "9a63bb6661929ec7f3dbbd9aefcd7716220e83d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a63bb6661929ec7f3dbbd9aefcd7716220e83d6", "html_url": "https://github.com/rust-lang/rust/commit/9a63bb6661929ec7f3dbbd9aefcd7716220e83d6"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "5284911340bd744084df505dc9ad268e946968f0", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "patch": "@@ -31,6 +31,7 @@ use trans::{adt, closure, debuginfo, expr, inline, machine};\n use trans::base::{self, push_ctxt};\n use trans::common::{self, type_is_sized, ExprOrMethodCall, node_id_substs, C_nil, const_get_elt};\n use trans::common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n+use trans::common::C_floating_f64;\n use trans::common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, VariantInfo, C_uint};\n use trans::common::{type_is_fat_ptr, Field, C_vector, C_array, C_null, ExprId, MethodCallKey};\n use trans::declare;\n@@ -107,6 +108,39 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n     }\n }\n \n+pub fn trans_constval<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                                cv: &ConstVal,\n+                                ty: Ty<'tcx>,\n+                                param_substs: &'tcx Substs<'tcx>)\n+                                -> ValueRef\n+{\n+    let llty = type_of::type_of(ccx, ty);\n+    match *cv {\n+        ConstVal::Float(v) => C_floating_f64(v, llty),\n+        ConstVal::Bool(v) => C_bool(ccx, v),\n+        ConstVal::Int(v) => C_integral(llty, v as u64, true),\n+        ConstVal::Uint(v) => C_integral(llty, v, false),\n+        ConstVal::Str(ref v) => C_str_slice(ccx, v.clone()),\n+        ConstVal::ByteStr(ref v) => addr_of(ccx, C_bytes(ccx, v), 1, \"byte_str\"),\n+        ConstVal::Struct(id) | ConstVal::Tuple(id) => {\n+            let expr = ccx.tcx().map.expect_expr(id);\n+            match const_expr(ccx, expr, param_substs, None, TrueConst::Yes) {\n+                Ok((val, _)) => val,\n+                Err(e) => panic!(\"const eval failure: {}\", e.description()),\n+            }\n+        },\n+        ConstVal::Function(_) => {\n+            unimplemented!()\n+        },\n+        ConstVal::Array(..) => {\n+            unimplemented!()\n+        },\n+        ConstVal::Repeat(..) => {\n+            unimplemented!()\n+        },\n+    }\n+}\n+\n pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {\n     unsafe {\n         llvm::LLVMConstPointerCast(val, ty.to_ref())"}, {"sha": "9c23d330136ee5d5be731072dc45a3d20dce6fff", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "patch": "@@ -11,10 +11,8 @@\n use middle::ty::{Ty, HasTypeFlags};\n use rustc::middle::const_eval::ConstVal;\n use rustc::mir::repr as mir;\n-use trans::consts::{self, TrueConst};\n+use trans::consts;\n use trans::common::{self, Block};\n-use trans::common::{C_bool, C_bytes, C_floating_f64, C_integral, C_str_slice};\n-use trans::type_of;\n \n use super::operand::OperandRef;\n use super::MirContext;\n@@ -29,45 +27,11 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         use super::operand::OperandValue::{Ref, Immediate};\n \n         let ccx = bcx.ccx();\n-        let llty = type_of::type_of(ccx, ty);\n-        let val = match *cv {\n-            ConstVal::Float(v) => Immediate(C_floating_f64(v, llty)),\n-            ConstVal::Bool(v) => Immediate(C_bool(ccx, v)),\n-            ConstVal::Int(v) => Immediate(C_integral(llty, v as u64, true)),\n-            ConstVal::Uint(v) => Immediate(C_integral(llty, v, false)),\n-            ConstVal::Str(ref v) => Immediate(C_str_slice(ccx, v.clone())),\n-            ConstVal::ByteStr(ref v) => {\n-                Immediate(consts::addr_of(ccx,\n-                                          C_bytes(ccx, v),\n-                                          1,\n-                                          \"byte_str\"))\n-            }\n-\n-            ConstVal::Struct(id) | ConstVal::Tuple(id) => {\n-                let expr = bcx.tcx().map.expect_expr(id);\n-                let (llval, _) = match consts::const_expr(ccx,\n-                                                          expr,\n-                                                          bcx.fcx.param_substs,\n-                                                          None,\n-                                                          TrueConst::Yes) {\n-                    Ok(v) => v,\n-                    Err(_) => panic!(\"constant eval failure\"),\n-                };\n-                if common::type_is_immediate(bcx.ccx(), ty) {\n-                    Immediate(llval)\n-                } else {\n-                    Ref(llval)\n-                }\n-            }\n-            ConstVal::Function(_) => {\n-                unimplemented!()\n-            }\n-            ConstVal::Array(..) => {\n-                unimplemented!()\n-            }\n-            ConstVal::Repeat(..) => {\n-                unimplemented!()\n-            }\n+        let val = consts::trans_constval(ccx, cv, ty, bcx.fcx.param_substs);\n+        let val = if common::type_is_immediate(ccx, ty) {\n+            Immediate(val)\n+        } else {\n+            Ref(val)\n         };\n \n         assert!(!ty.has_erasable_regions());"}]}