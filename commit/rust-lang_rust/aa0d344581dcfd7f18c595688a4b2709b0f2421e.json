{"sha": "aa0d344581dcfd7f18c595688a4b2709b0f2421e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMGQzNDQ1ODFkY2ZkN2YxOGM1OTU2ODhhNGIyNzA5YjBmMjQyMWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T20:24:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T20:24:20Z"}, "message": "Edits with cursors", "tree": {"sha": "9846f587dcad204e6744ca5ff37faccf4251104c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9846f587dcad204e6744ca5ff37faccf4251104c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa0d344581dcfd7f18c595688a4b2709b0f2421e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0d344581dcfd7f18c595688a4b2709b0f2421e", "html_url": "https://github.com/rust-lang/rust/commit/aa0d344581dcfd7f18c595688a4b2709b0f2421e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa0d344581dcfd7f18c595688a4b2709b0f2421e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d31b55a4292f55851bc75265643b2ae2e675df", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d31b55a4292f55851bc75265643b2ae2e675df", "html_url": "https://github.com/rust-lang/rust/commit/a7d31b55a4292f55851bc75265643b2ae2e675df"}], "stats": {"total": 122, "additions": 85, "deletions": 37}, "files": [{"sha": "88c34843634a8447711400e5c6361e9107e59d31", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=aa0d344581dcfd7f18c595688a4b2709b0f2421e", "patch": "@@ -10,7 +10,17 @@ use libsyntax2::{\n     },\n };\n \n-pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> Edit + 'a> {\n+pub struct ActionResult {\n+    pub edit: Edit,\n+    pub cursor_position: CursorPosition,\n+}\n+\n+pub enum CursorPosition {\n+    Same,\n+    Offset(TextUnit),\n+}\n+\n+pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n     let syntax = file.syntax();\n     let syntax = syntax.as_ref();\n \n@@ -21,18 +31,27 @@ pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n         let mut edit = EditBuilder::new();\n         edit.replace(left.range(), right.text());\n         edit.replace(right.range(), left.text());\n-        edit.finish()\n+        ActionResult {\n+            edit: edit.finish(),\n+            cursor_position: CursorPosition::Same,\n+        }\n     })\n }\n \n-pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> Edit + 'a> {\n+pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n     let syntax = file.syntax();\n     let syntax = syntax.as_ref();\n     let nominal = find_node::<ast::NominalDef<_>>(syntax, offset)?;\n     Some(move || {\n         let mut edit = EditBuilder::new();\n-        edit.insert(nominal.syntax().range().start(), \"#[derive()]\\n\".to_string());\n-        edit.finish()\n+        let node_start = nominal.syntax().range().start();\n+        edit.insert(node_start, \"#[derive()]\\n\".to_string());\n+        ActionResult {\n+            edit: edit.finish(),\n+            cursor_position: CursorPosition::Offset(\n+                node_start + TextUnit::of_str(\"#[derive(\")\n+            ),\n+        }\n     })\n }\n "}, {"sha": "3edd0809dbf4dee36a2db902ad061530359cbfbb", "filename": "crates/libeditor/src/edit.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Fsrc%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Fsrc%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fedit.rs?ref=aa0d344581dcfd7f18c595688a4b2709b0f2421e", "patch": "@@ -67,6 +67,21 @@ impl Edit {\n         assert_eq!(buf.len(), total_len);\n         buf\n     }\n+\n+    pub fn apply_to_offset(&self, offset: TextUnit) -> Option<TextUnit> {\n+        let mut res = offset;\n+        for atom in self.atoms.iter() {\n+            if atom.delete.start() >= offset {\n+                break;\n+            }\n+            if offset < atom.delete.end() {\n+                return None\n+            }\n+            res += TextUnit::of_str(&atom.insert);\n+            res -= atom.delete.len();\n+        }\n+        Some(res)\n+    }\n }\n \n impl AtomEdit {"}, {"sha": "9e44f5d92375584ad5ad15e59ec82d137d3eeea1", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=aa0d344581dcfd7f18c595688a4b2709b0f2421e", "patch": "@@ -21,7 +21,7 @@ pub use self::{\n     extend_selection::extend_selection,\n     symbols::{StructureNode, file_structure, FileSymbol, file_symbols},\n     edit::{EditBuilder, Edit, AtomEdit},\n-    code_actions::{flip_comma, add_derive},\n+    code_actions::{flip_comma, add_derive, ActionResult, CursorPosition},\n };\n \n #[derive(Debug)]\n@@ -36,13 +36,6 @@ pub struct Diagnostic {\n     pub msg: String,\n }\n \n-#[derive(Debug)]\n-pub struct Symbol {\n-    // pub parent: ???,\n-    pub name: String,\n-    pub range: TextRange,\n-}\n-\n #[derive(Debug)]\n pub struct Runnable {\n     pub range: TextRange,"}, {"sha": "7063425ceb0729b339355de36dd288954e3d014c", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=aa0d344581dcfd7f18c595688a4b2709b0f2421e", "patch": "@@ -6,10 +6,10 @@ extern crate assert_eq_text;\n \n use std::fmt;\n use itertools::Itertools;\n-use libsyntax2::AstNode;\n use libeditor::{\n-    File, TextUnit, TextRange,\n-    highlight, runnables, extend_selection, file_structure, flip_comma,\n+    File, TextUnit, TextRange, ActionResult, CursorPosition,\n+    highlight, runnables, extend_selection, file_structure,\n+    flip_comma, add_derive,\n };\n \n #[test]\n@@ -103,13 +103,19 @@ impl fmt::Debug for E {}\n \n #[test]\n fn test_swap_comma() {\n-    check_modification(\n+    check_action(\n         \"fn foo(x: i32,<|> y: Result<(), ()>) {}\",\n-        \"fn foo(y: Result<(), ()>, x: i32) {}\",\n-        &|file, offset| {\n-            let edit = flip_comma(file, offset).unwrap()();\n-            edit.apply(&file.syntax().text())\n-        },\n+        \"fn foo(y: Result<(), ()>,<|> x: i32) {}\",\n+        |file, off| flip_comma(file, off).map(|f| f()),\n+    )\n+}\n+\n+#[test]\n+fn test_add_derive() {\n+    check_action(\n+        \"struct Foo { a: i32, <|>}\",\n+        \"#[derive(<|>)]\\nstruct Foo { a: i32, }\",\n+        |file, off| add_derive(file, off).map(|f| f()),\n     )\n }\n \n@@ -123,21 +129,36 @@ fn dbg_eq(expected: &str, actual: &impl fmt::Debug) {\n     assert_eq!(expected, actual);\n }\n \n-fn check_modification(\n+fn check_action<F: Fn(&File, TextUnit) -> Option<ActionResult>>(\n     before: &str,\n     after: &str,\n-    f: &impl Fn(&File, TextUnit) -> String,\n+    f: F,\n ) {\n+    let (before_cursor_pos, before) = extract_cursor(before);\n+    let file = file(&before);\n+    let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n+    let actual = result.edit.apply(&before);\n+    let actual_cursor_pos: u32 = match result.cursor_position {\n+        CursorPosition::Same => result.edit.apply_to_offset(before_cursor_pos).unwrap(),\n+        CursorPosition::Offset(off) => off,\n+    }.into();\n+    let actual_cursor_pos = actual_cursor_pos as usize;\n+    let mut actual_with_cursor = String::new();\n+    actual_with_cursor.push_str(&actual[..actual_cursor_pos]);\n+    actual_with_cursor.push_str(\"<|>\");\n+    actual_with_cursor.push_str(&actual[actual_cursor_pos..]);\n+    assert_eq_text!(after, &actual_with_cursor);\n+}\n+\n+fn extract_cursor(text: &str) -> (TextUnit, String) {\n     let cursor = \"<|>\";\n-    let cursor_pos = match before.find(cursor) {\n-        None => panic!(\"before text should contain cursor marker\"),\n+    let cursor_pos = match text.find(cursor) {\n+        None => panic!(\"text should contain cursor marker\"),\n         Some(pos) => pos,\n     };\n-    let mut text = String::with_capacity(before.len() - cursor.len());\n-    text.push_str(&before[..cursor_pos]);\n-    text.push_str(&before[cursor_pos + cursor.len()..]);\n+    let mut new_text = String::with_capacity(text.len() - cursor.len());\n+    new_text.push_str(&text[..cursor_pos]);\n+    new_text.push_str(&text[cursor_pos + cursor.len()..]);\n     let cursor_pos = TextUnit::from(cursor_pos as u32);\n-    let file = file(&text);\n-    let actual = f(&file, cursor_pos);\n-    assert_eq_text!(after, &actual);\n+    (cursor_pos, new_text)\n }"}, {"sha": "078abfbfab37723d83251947341782d4e8a28b1a", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0d344581dcfd7f18c595688a4b2709b0f2421e/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=aa0d344581dcfd7f18c595688a4b2709b0f2421e", "patch": "@@ -187,12 +187,12 @@ pub fn handle_execute_command(\n     let arg: ActionRequest = from_value(arg)?;\n     let file_id = arg.text_document.try_conv_with(&path_map)?;\n     let file = world.file_syntax(file_id)?;\n-    let edit = match arg.id {\n-        ActionId::FlipComma => libeditor::flip_comma(&file, arg.offset).map(|edit| edit()),\n-        ActionId::AddDerive => libeditor::add_derive(&file, arg.offset).map(|edit| edit()),\n+    let action_result = match arg.id {\n+        ActionId::FlipComma => libeditor::flip_comma(&file, arg.offset).map(|f| f()),\n+        ActionId::AddDerive => libeditor::add_derive(&file, arg.offset).map(|f| f()),\n     };\n-    let edit = match edit {\n-        Some(edit) => edit,\n+    let edit = match action_result {\n+        Some(action_result) => action_result.edit,\n         None => bail!(\"command not applicable\"),\n     };\n     let line_index = world.file_line_index(file_id)?;"}]}