{"sha": "b9e4a1cf264f9e8902ec5676a72a377ba4a9179c", "node_id": "C_kwDOAAsO6NoAKGI5ZTRhMWNmMjY0ZjllODkwMmVjNTY3NmE3MmEzNzdiYTRhOTE3OWM", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-10-08T10:55:43Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-10-08T12:40:19Z"}, "message": "use memset to initialize a readbuf", "tree": {"sha": "0c49ebb282d618f8fd8664da2a9c4148af92dc8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c49ebb282d618f8fd8664da2a9c4148af92dc8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c", "html_url": "https://github.com/rust-lang/rust/commit/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c22af267fd9337bc05382b2771dde49d2e9f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c22af267fd9337bc05382b2771dde49d2e9f26", "html_url": "https://github.com/rust-lang/rust/commit/43c22af267fd9337bc05382b2771dde49d2e9f26"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "4800eeda022bb7753ed60a1e051bb0393380086a", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=b9e4a1cf264f9e8902ec5676a72a377ba4a9179c", "patch": "@@ -3,10 +3,10 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::cmp;\n use crate::fmt::{self, Debug, Formatter};\n use crate::io::{Result, Write};\n use crate::mem::{self, MaybeUninit};\n+use crate::{cmp, ptr};\n \n /// A borrowed byte buffer which is incrementally filled and initialized.\n ///\n@@ -250,8 +250,11 @@ impl<'a> BorrowedCursor<'a> {\n     /// Initializes all bytes in the cursor.\n     #[inline]\n     pub fn ensure_init(&mut self) -> &mut Self {\n-        for byte in self.uninit_mut() {\n-            byte.write(0);\n+        let uninit = self.uninit_mut();\n+        // SAFETY: 0 is a valid value for MaybeUninit<u8> and the length matches the allocation\n+        // since it is comes from a slice reference.\n+        unsafe {\n+            ptr::write_bytes(uninit.as_mut_ptr(), 0, uninit.len());\n         }\n         self.buf.init = self.buf.capacity();\n "}]}