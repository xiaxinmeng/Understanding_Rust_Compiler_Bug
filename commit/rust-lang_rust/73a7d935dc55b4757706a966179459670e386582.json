{"sha": "73a7d935dc55b4757706a966179459670e386582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYTdkOTM1ZGM1NWI0NzU3NzA2YTk2NjE3OTQ1OTY3MGUzODY1ODI=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-12-07T00:44:04Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-12-07T01:01:21Z"}, "message": "Add tests", "tree": {"sha": "048267d74c727b7b6c170f75b85b420309e75612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048267d74c727b7b6c170f75b85b420309e75612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a7d935dc55b4757706a966179459670e386582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a7d935dc55b4757706a966179459670e386582", "html_url": "https://github.com/rust-lang/rust/commit/73a7d935dc55b4757706a966179459670e386582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a7d935dc55b4757706a966179459670e386582/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7208a01cdf8dd23264ac3236012e881402ccbbd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7208a01cdf8dd23264ac3236012e881402ccbbd5", "html_url": "https://github.com/rust-lang/rust/commit/7208a01cdf8dd23264ac3236012e881402ccbbd5"}], "stats": {"total": 209, "additions": 208, "deletions": 1}, "files": [{"sha": "50d88674328177a07ef3c1a9ce450ac4177245e3", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a7d935dc55b4757706a966179459670e386582/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7d935dc55b4757706a966179459670e386582/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=73a7d935dc55b4757706a966179459670e386582", "patch": "@@ -140,7 +140,8 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n                 // Perform a O(n^2) algorithm for small n,\n                 // otherwise switch to an allocating algorithm with\n                 // faster asymptotic runtime.\n-                if impls.len() < 30 {\n+                const ALLOCATING_ALGO_THRESHOLD: usize = 500;\n+                if impls.len() < ALLOCATING_ALGO_THRESHOLD {\n                     for (i, &(&impl1_def_id, impl_items1)) in impls_items.iter().enumerate() {\n                         for &(&impl2_def_id, impl_items2) in &impls_items[(i + 1)..] {\n                             if self.impls_have_common_items(impl_items1, impl_items2) {"}, {"sha": "42ed5d19deb8409262f8d0ed281a9bcc77594041", "filename": "src/test/ui/inherent-impls-overlap-check/auxiliary/repeat.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Fauxiliary%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Fauxiliary%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Fauxiliary%2Frepeat.rs?ref=73a7d935dc55b4757706a966179459670e386582", "patch": "@@ -0,0 +1,54 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{Ident, Group, TokenStream, TokenTree as Tt};\n+\n+// This constant has to be above the ALLOCATING_ALGO_THRESHOLD\n+// constant in inherent_impls_overlap.rs\n+const REPEAT_COUNT: u32 = 501;\n+\n+#[proc_macro]\n+/// Repeats the input many times, while replacing idents\n+/// named \"IDENT\" with \"id_$v\", where v is a counter.\n+pub fn repeat_with_idents(input: TokenStream) -> TokenStream {\n+    let mut res = Vec::new();\n+    fn visit_stream(res: &mut Vec<Tt>, stream :TokenStream, v: u32) {\n+        let mut stream_iter = stream.into_iter();\n+        while let Some(tt) = stream_iter.next() {\n+            match tt {\n+                Tt::Group(group) => {\n+                    let tt = Tt::Group(visit_group(group, v));\n+                    res.push(tt);\n+                },\n+                Tt::Ident(id) => {\n+                    let id = if &id.to_string() == \"IDENT\" {\n+                        Ident::new(&format!(\"id_{}\", v), id.span())\n+                    } else {\n+                        id\n+                    };\n+                    res.push(Tt::Ident(id));\n+                },\n+                Tt::Punct(p) => {\n+                    res.push(Tt::Punct(p));\n+                },\n+                Tt::Literal(lit) => {\n+                    res.push(Tt::Literal(lit));\n+                },\n+            }\n+        }\n+    }\n+    fn visit_group(group :Group, v: u32) -> Group {\n+        let mut res = Vec::new();\n+        visit_stream(&mut res, group.stream(), v);\n+        let stream = res.into_iter().collect();\n+        let delim = group.delimiter();\n+        Group::new(delim, stream)\n+    }\n+    for v in 0 .. REPEAT_COUNT {\n+        visit_stream(&mut res, input.clone(), v)\n+    }\n+    res.into_iter().collect()\n+}"}, {"sha": "341bfc7b605fcb0e5dd96e51649ce082c7313dff", "filename": "src/test/ui/inherent-impls-overlap-check/no-overlap.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Fno-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Fno-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Fno-overlap.rs?ref=73a7d935dc55b4757706a966179459670e386582", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+// aux-build:repeat.rs\n+\n+// This tests the allocating algo branch of the\n+// inherent impls overlap checker.\n+// This branch was added by PR:\n+// https://github.com/rust-lang/rust/pull/78317\n+// In this test, we repeat many impl blocks\n+// to trigger the allocating branch.\n+\n+#![allow(unused)]\n+\n+extern crate repeat;\n+\n+// Simple case where each impl block is distinct\n+\n+struct Foo {}\n+\n+repeat::repeat_with_idents!(impl Foo { fn IDENT() {} });\n+\n+// There are overlapping impl blocks but due to generics,\n+// they may overlap.\n+\n+struct Bar<T>(T);\n+\n+struct A;\n+struct B;\n+\n+repeat::repeat_with_idents!(impl Bar<A> { fn IDENT() {} });\n+\n+impl Bar<A> { fn foo() {} }\n+impl Bar<B> { fn foo() {} }\n+\n+fn main() {}"}, {"sha": "6f2801197e90c00aa14c63f2f5692a5489a0f604", "filename": "src/test/ui/inherent-impls-overlap-check/overlap.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Foverlap.rs?ref=73a7d935dc55b4757706a966179459670e386582", "patch": "@@ -0,0 +1,71 @@\n+// aux-build:repeat.rs\n+\n+#![allow(unused)]\n+\n+// This tests the allocating algo branch of the\n+// inherent impls overlap checker.\n+// This branch was added by PR:\n+// https://github.com/rust-lang/rust/pull/78317\n+// In this test, we repeat many impl blocks\n+// to trigger the allocating branch.\n+\n+// Simple overlap\n+\n+extern crate repeat;\n+\n+struct Foo {}\n+\n+repeat::repeat_with_idents!(impl Foo { fn IDENT() {} });\n+\n+impl Foo { fn hello() {} } //~ERROR duplicate definitions with name `hello`\n+impl Foo { fn hello() {} }\n+\n+// Transitive overlap\n+\n+struct Foo2 {}\n+\n+repeat::repeat_with_idents!(impl Foo2 { fn IDENT() {} });\n+\n+impl Foo2 {\n+    fn bar() {}\n+    fn hello2() {} //~ERROR duplicate definitions with name `hello2`\n+}\n+\n+impl Foo2 {\n+    fn baz() {}\n+    fn hello2() {}\n+}\n+\n+// Slightly stronger transitive overlap\n+\n+struct Foo3 {}\n+\n+repeat::repeat_with_idents!(impl Foo3 { fn IDENT() {} });\n+\n+impl Foo3 {\n+    fn bar() {} //~ERROR duplicate definitions with name `bar`\n+    fn hello3() {} //~ERROR duplicate definitions with name `hello3`\n+}\n+\n+impl Foo3 {\n+    fn bar() {}\n+    fn hello3() {}\n+}\n+\n+// Generic overlap\n+\n+struct Bar<T>(T);\n+\n+struct A;\n+struct B;\n+\n+repeat::repeat_with_idents!(impl Bar<A> { fn IDENT() {} });\n+\n+impl Bar<A> { fn foo() {} fn bar2() {} }\n+impl Bar<B> {\n+    fn foo() {}\n+    fn bar2() {} //~ERROR duplicate definitions with name `bar2`\n+}\n+impl Bar<B> { fn bar2() {} }\n+\n+fn main() {}"}, {"sha": "3dd2793712f580c5382f1ebfffb5b5d693c6869a", "filename": "src/test/ui/inherent-impls-overlap-check/overlap.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Foverlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a7d935dc55b4757706a966179459670e386582/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Foverlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finherent-impls-overlap-check%2Foverlap.stderr?ref=73a7d935dc55b4757706a966179459670e386582", "patch": "@@ -0,0 +1,47 @@\n+error[E0592]: duplicate definitions with name `hello`\n+  --> $DIR/overlap.rs:20:12\n+   |\n+LL | impl Foo { fn hello() {} }\n+   |            ^^^^^^^^^^ duplicate definitions for `hello`\n+LL | impl Foo { fn hello() {} }\n+   |            ---------- other definition for `hello`\n+\n+error[E0592]: duplicate definitions with name `hello2`\n+  --> $DIR/overlap.rs:31:5\n+   |\n+LL |     fn hello2() {}\n+   |     ^^^^^^^^^^^ duplicate definitions for `hello2`\n+...\n+LL |     fn hello2() {}\n+   |     ----------- other definition for `hello2`\n+\n+error[E0592]: duplicate definitions with name `bar`\n+  --> $DIR/overlap.rs:46:5\n+   |\n+LL |     fn bar() {}\n+   |     ^^^^^^^^ duplicate definitions for `bar`\n+...\n+LL |     fn bar() {}\n+   |     -------- other definition for `bar`\n+\n+error[E0592]: duplicate definitions with name `hello3`\n+  --> $DIR/overlap.rs:47:5\n+   |\n+LL |     fn hello3() {}\n+   |     ^^^^^^^^^^^ duplicate definitions for `hello3`\n+...\n+LL |     fn hello3() {}\n+   |     ----------- other definition for `hello3`\n+\n+error[E0592]: duplicate definitions with name `bar2`\n+  --> $DIR/overlap.rs:67:5\n+   |\n+LL |     fn bar2() {}\n+   |     ^^^^^^^^^ duplicate definitions for `bar2`\n+LL | }\n+LL | impl Bar<B> { fn bar2() {} }\n+   |               --------- other definition for `bar2`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0592`."}]}