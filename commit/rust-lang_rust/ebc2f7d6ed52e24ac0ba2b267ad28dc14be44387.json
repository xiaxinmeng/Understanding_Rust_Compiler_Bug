{"sha": "ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzJmN2Q2ZWQ1MmUyNGFjMGJhMmIyNjdhZDI4ZGMxNGJlNDQzODc=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-07-16T14:44:13Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-07-16T21:55:49Z"}, "message": "Support repr alignment on unions.", "tree": {"sha": "2ce16d64e26314e4d518cc80da4de7172cef4555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce16d64e26314e4d518cc80da4de7172cef4555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "html_url": "https://github.com/rust-lang/rust/commit/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1339af2e5d1b33ec9ee3c8a3c531bcd61770fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1339af2e5d1b33ec9ee3c8a3c531bcd61770fc", "html_url": "https://github.com/rust-lang/rust/commit/8f1339af2e5d1b33ec9ee3c8a3c531bcd61770fc"}], "stats": {"total": 124, "additions": 116, "deletions": 8}, "files": [{"sha": "e4b1cdabb0466f4682db62133ea05f4897578d95", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "patch": "@@ -121,9 +121,10 @@ impl<'a> CheckAttrVisitor<'a> {\n                 }\n                 \"align\" => {\n                     found_align = true;\n-                    if target != Target::Struct {\n-                        (\"attribute should be applied to struct\",\n-                         \"a struct\")\n+                    if target != Target::Struct &&\n+                            target != Target::Union {\n+                        (\"attribute should be applied to struct or union\",\n+                         \"a struct or union\")\n                     } else {\n                         continue\n                     }"}, {"sha": "009b0619bd75f11b7547c5ef285927c2054a02ba", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "patch": "@@ -908,13 +908,30 @@ pub struct Union {\n }\n \n impl<'a, 'tcx> Union {\n-    fn new(dl: &TargetDataLayout, packed: bool) -> Union {\n-        let align = if packed { dl.i8_align } else { dl.aggregate_align };\n+    fn new(dl: &TargetDataLayout, repr: &ReprOptions) -> Union {\n+        if repr.packed() && repr.align > 0 {\n+            bug!(\"Union cannot be packed and aligned\");\n+        }\n+\n+        let primitive_align = if repr.packed() {\n+            dl.i8_align\n+        } else {\n+            dl.aggregate_align\n+        };\n+\n+        let align = if repr.align > 0 {\n+            let repr_align = repr.align as u64;\n+            debug!(\"Union::new repr_align: {:?}\", repr_align);\n+            primitive_align.max(Align::from_bytes(repr_align, repr_align).unwrap())\n+        } else {\n+            primitive_align\n+        };\n+\n         Union {\n             align,\n-            primitive_align: align,\n+            primitive_align,\n             min_size: Size::from_bytes(0),\n-            packed,\n+            packed: repr.packed(),\n         }\n     }\n \n@@ -1311,7 +1328,7 @@ impl<'a, 'tcx> Layout {\n                         field.ty(tcx, substs).layout(tcx, param_env)\n                     }).collect::<Result<Vec<_>, _>>()?;\n                     let layout = if def.is_union() {\n-                        let mut un = Union::new(dl, def.repr.packed());\n+                        let mut un = Union::new(dl, &def.repr);\n                         un.extend(dl, fields.iter().map(|&f| Ok(f)), ty)?;\n                         UntaggedUnion { variants: un }\n                     } else {"}, {"sha": "e42aa868c47eecd38b304f0f0f86ad0be8db852f", "filename": "src/test/run-pass/align-struct.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Ftest%2Frun-pass%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Ftest%2Frun-pass%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falign-struct.rs?ref=ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "patch": "@@ -15,6 +15,7 @@ use std::mem;\n \n // Raising alignment\n #[repr(align(16))]\n+#[derive(Clone, Copy, Debug)]\n struct Align16(i32);\n \n // Lowering has no effect\n@@ -68,6 +69,11 @@ struct AlignLarge {\n     stuff: [u8; 0x10000],\n }\n \n+union UnionContainsAlign {\n+    a: Align16,\n+    b: f32\n+}\n+\n impl Align16 {\n     // return aligned type\n     pub fn new(i: i32) -> Align16 {\n@@ -176,6 +182,18 @@ pub fn main() {\n     }\n     assert!(is_aligned_to(&e, 16));\n \n+    // check union alignment\n+    assert_eq!(mem::align_of::<UnionContainsAlign>(), 16);\n+    assert_eq!(mem::size_of::<UnionContainsAlign>(), 16);\n+    let u = UnionContainsAlign { a: Align16(10) };\n+    unsafe {\n+        assert_eq!(mem::align_of_val(&u.a), 16);\n+        assert_eq!(mem::size_of_val(&u.a), 16);\n+        assert_eq!(u.a.0, 10);\n+        let UnionContainsAlign { a } = u;\n+        assert_eq!(a.0, 10);\n+    }\n+\n     // arrays of aligned elements should also be aligned\n     assert_eq!(mem::align_of::<[Align16;2]>(), 16);\n     assert_eq!(mem::size_of::<[Align16;2]>(), 32);"}, {"sha": "c0100df53e7c1345f7079b20a7121757eec5a1c1", "filename": "src/test/run-pass/union/union-align.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Ftest%2Frun-pass%2Funion%2Funion-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387/src%2Ftest%2Frun-pass%2Funion%2Funion-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-align.rs?ref=ebc2f7d6ed52e24ac0ba2b267ad28dc14be44387", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(attr_literals)]\n+#![feature(repr_align)]\n+#![feature(untagged_unions)]\n+\n+use std::mem::{size_of, size_of_val, align_of, align_of_val};\n+\n+#[repr(align(16))]\n+pub union U16 {\n+    a: u8,\n+    b: u32\n+}\n+\n+fn main() {\n+    assert_eq!(align_of::<U16>(), 16);\n+    assert_eq!(size_of::<U16>(), 16);\n+    let u = U16 { a: 10 };\n+    unsafe {\n+        assert_eq!(align_of_val(&u.a), 1);\n+        assert_eq!(size_of_val(&u.a), 1);\n+        assert_eq!(u.a, 10);\n+    }\n+\n+    let u = U16 { b: 11 };\n+    unsafe {\n+        assert_eq!(align_of_val(&u.b), 4);\n+        assert_eq!(size_of_val(&u.b), 4);\n+        assert_eq!(u.b, 11);\n+    }\n+\n+    hybrid::check_hybrid();\n+}\n+\n+mod hybrid {\n+    use std::mem::{size_of, align_of};\n+\n+    #[repr(align(16))]\n+    struct S1 {\n+        a: u16,\n+        b: u8,\n+    }\n+\n+    #[repr(align(32))]\n+    union U {\n+        s: S1,\n+        c: u16,\n+    }\n+\n+    #[repr(align(64))]\n+    struct S2 {\n+        d: u8,\n+        u: U,\n+    }\n+\n+    pub fn check_hybrid() {\n+        assert_eq!(align_of::<S1>(), 16);\n+        assert_eq!(size_of::<S1>(), 16);\n+        assert_eq!(align_of::<U>(), 32);\n+        assert_eq!(size_of::<U>(), 32);\n+        assert_eq!(align_of::<S2>(), 64);\n+        assert_eq!(size_of::<S2>(), 64);\n+    }\n+}"}]}