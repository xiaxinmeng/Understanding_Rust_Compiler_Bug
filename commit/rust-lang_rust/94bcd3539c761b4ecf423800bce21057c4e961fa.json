{"sha": "94bcd3539c761b4ecf423800bce21057c4e961fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YmNkMzUzOWM3NjFiNGVjZjQyMzgwMGJjZTIxMDU3YzRlOTYxZmE=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-09-13T01:55:37Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-10-03T07:39:56Z"}, "message": "Set the `non_uppercase_statics` lint to warn by default", "tree": {"sha": "51c0030bfc0a527ce57da49f0987f726ea0ed912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c0030bfc0a527ce57da49f0987f726ea0ed912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94bcd3539c761b4ecf423800bce21057c4e961fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94bcd3539c761b4ecf423800bce21057c4e961fa", "html_url": "https://github.com/rust-lang/rust/commit/94bcd3539c761b4ecf423800bce21057c4e961fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94bcd3539c761b4ecf423800bce21057c4e961fa/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa034cd3bac3155e0f6c74c399314b5ee32f88fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa034cd3bac3155e0f6c74c399314b5ee32f88fc", "html_url": "https://github.com/rust-lang/rust/commit/aa034cd3bac3155e0f6c74c399314b5ee32f88fc"}], "stats": {"total": 406, "additions": 234, "deletions": 172}, "files": [{"sha": "82d320d570223670cd16654efa1117ff5a91bcbb", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -86,9 +86,12 @@ pub mod BigDigit {\n     use super::DoubleBigDigit;\n \n     // `DoubleBigDigit` size dependent\n+    #[allow(non_uppercase_statics)]\n     pub static bits: uint = 32;\n \n+    #[allow(non_uppercase_statics)]\n     pub static base: DoubleBigDigit = 1 << bits;\n+    #[allow(non_uppercase_statics)]\n     static lo_mask: DoubleBigDigit = (-1 as DoubleBigDigit) >> bits;\n \n     #[inline]\n@@ -1841,7 +1844,7 @@ mod biguint_tests {\n               BigInt::from_biguint(Plus, BigUint::new(vec!(1,2,3))));\n     }\n \n-    static sum_triples: &'static [(&'static [BigDigit],\n+    static SUM_TRIPLES: &'static [(&'static [BigDigit],\n                                    &'static [BigDigit],\n                                    &'static [BigDigit])] = &[\n         (&[],          &[],       &[]),\n@@ -1857,7 +1860,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_add() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -1870,7 +1873,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_sub() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -1888,7 +1891,7 @@ mod biguint_tests {\n         a - b;\n     }\n \n-    static mul_triples: &'static [(&'static [BigDigit],\n+    static MUL_TRIPLES: &'static [(&'static [BigDigit],\n                                    &'static [BigDigit],\n                                    &'static [BigDigit])] = &[\n         (&[],               &[],               &[]),\n@@ -1914,7 +1917,7 @@ mod biguint_tests {\n         (&[ 0,  0,  1],     &[ 0,  0,  0,  1], &[0, 0,  0,  0,  0,  1])\n     ];\n \n-    static div_rem_quadruples: &'static [(&'static [BigDigit],\n+    static DIV_REM_QUADRUPLES: &'static [(&'static [BigDigit],\n                                            &'static [BigDigit],\n                                            &'static [BigDigit],\n                                            &'static [BigDigit])]\n@@ -1928,7 +1931,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_mul() {\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -1938,7 +1941,7 @@ mod biguint_tests {\n             assert!(b * a == c);\n         }\n \n-        for elm in div_rem_quadruples.iter() {\n+        for elm in DIV_REM_QUADRUPLES.iter() {\n             let (a_vec, b_vec, c_vec, d_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -1952,7 +1955,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_div_rem() {\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -1966,7 +1969,7 @@ mod biguint_tests {\n             }\n         }\n \n-        for elm in div_rem_quadruples.iter() {\n+        for elm in DIV_REM_QUADRUPLES.iter() {\n             let (a_vec, b_vec, c_vec, d_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -1979,7 +1982,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_checked_add() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -1992,7 +1995,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_checked_sub() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -2012,7 +2015,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_checked_mul() {\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -2022,7 +2025,7 @@ mod biguint_tests {\n             assert!(b.checked_mul(&a).unwrap() == c);\n         }\n \n-        for elm in div_rem_quadruples.iter() {\n+        for elm in DIV_REM_QUADRUPLES.iter() {\n             let (a_vec, b_vec, c_vec, d_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -2036,7 +2039,7 @@ mod biguint_tests {\n \n     #[test]\n     fn test_checked_div() {\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigUint::from_slice(a_vec);\n             let b = BigUint::from_slice(b_vec);\n@@ -2440,7 +2443,7 @@ mod bigint_tests {\n         assert_eq!(negative.to_biguint(), None);\n     }\n \n-    static sum_triples: &'static [(&'static [BigDigit],\n+    static SUM_TRIPLES: &'static [(&'static [BigDigit],\n                                    &'static [BigDigit],\n                                    &'static [BigDigit])] = &[\n         (&[],          &[],       &[]),\n@@ -2456,7 +2459,7 @@ mod bigint_tests {\n \n     #[test]\n     fn test_add() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2475,7 +2478,7 @@ mod bigint_tests {\n \n     #[test]\n     fn test_sub() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2492,7 +2495,7 @@ mod bigint_tests {\n         }\n     }\n \n-    static mul_triples: &'static [(&'static [BigDigit],\n+    static MUL_TRIPLES: &'static [(&'static [BigDigit],\n                                    &'static [BigDigit],\n                                    &'static [BigDigit])] = &[\n         (&[],               &[],               &[]),\n@@ -2518,7 +2521,7 @@ mod bigint_tests {\n         (&[ 0,  0,  1],     &[ 0,  0,  0,  1], &[0, 0,  0,  0,  0,  1])\n     ];\n \n-    static div_rem_quadruples: &'static [(&'static [BigDigit],\n+    static DIV_REM_QUADRUPLES: &'static [(&'static [BigDigit],\n                                           &'static [BigDigit],\n                                           &'static [BigDigit],\n                                           &'static [BigDigit])]\n@@ -2532,7 +2535,7 @@ mod bigint_tests {\n \n     #[test]\n     fn test_mul() {\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2545,7 +2548,7 @@ mod bigint_tests {\n             assert!((-b) * a == -c);\n         }\n \n-        for elm in div_rem_quadruples.iter() {\n+        for elm in DIV_REM_QUADRUPLES.iter() {\n             let (a_vec, b_vec, c_vec, d_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2584,7 +2587,7 @@ mod bigint_tests {\n             }\n         }\n \n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2594,7 +2597,7 @@ mod bigint_tests {\n             if !b.is_zero() { check(&c, &b, &a, &Zero::zero()); }\n         }\n \n-        for elm in div_rem_quadruples.iter() {\n+        for elm in DIV_REM_QUADRUPLES.iter() {\n             let (a_vec, b_vec, c_vec, d_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2627,7 +2630,7 @@ mod bigint_tests {\n             check_sub(&a.neg(), b, &q.neg(), &r.neg());\n             check_sub(&a.neg(), &b.neg(), q, &r.neg());\n         }\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2637,7 +2640,7 @@ mod bigint_tests {\n             if !b.is_zero() { check(&c, &b, &a, &Zero::zero()); }\n         }\n \n-        for elm in div_rem_quadruples.iter() {\n+        for elm in DIV_REM_QUADRUPLES.iter() {\n             let (a_vec, b_vec, c_vec, d_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2652,7 +2655,7 @@ mod bigint_tests {\n \n     #[test]\n     fn test_checked_add() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2671,7 +2674,7 @@ mod bigint_tests {\n \n     #[test]\n     fn test_checked_sub() {\n-        for elm in sum_triples.iter() {\n+        for elm in SUM_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2690,7 +2693,7 @@ mod bigint_tests {\n \n     #[test]\n     fn test_checked_mul() {\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2703,7 +2706,7 @@ mod bigint_tests {\n             assert!((-b).checked_mul(&a).unwrap() == -c);\n         }\n \n-        for elm in div_rem_quadruples.iter() {\n+        for elm in DIV_REM_QUADRUPLES.iter() {\n             let (a_vec, b_vec, c_vec, d_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);\n@@ -2716,7 +2719,7 @@ mod bigint_tests {\n     }\n     #[test]\n     fn test_checked_div() {\n-        for elm in mul_triples.iter() {\n+        for elm in MUL_TRIPLES.iter() {\n             let (a_vec, b_vec, c_vec) = *elm;\n             let a = BigInt::from_slice(Plus, a_vec);\n             let b = BigInt::from_slice(Plus, b_vec);"}, {"sha": "ceaf685c19a5154d03b89d1a25def253c3136635", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -406,10 +406,13 @@ mod test {\n     pub static _2: Rational = Ratio { numer: 2, denom: 1};\n     pub static _1_2: Rational = Ratio { numer: 1, denom: 2};\n     pub static _3_2: Rational = Ratio { numer: 3, denom: 2};\n+    #[allow(non_uppercase_statics)]\n     pub static _neg1_2: Rational = Ratio { numer: -1, denom: 2};\n     pub static _1_3: Rational = Ratio { numer: 1, denom: 3};\n+    #[allow(non_uppercase_statics)]\n     pub static _neg1_3: Rational = Ratio { numer: -1, denom: 3};\n     pub static _2_3: Rational = Ratio { numer: 2, denom: 3};\n+    #[allow(non_uppercase_statics)]\n     pub static _neg2_3: Rational = Ratio { numer: -2, denom: 3};\n \n     pub fn to_big(n: Rational) -> BigRational {"}, {"sha": "64c6b1739ebb1f962468af06d88da8026cb268dd", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -209,15 +209,15 @@ mod test {\n         assert_eq!(string1, string2);\n     }\n \n-    static fill_bytes_v_len: uint = 13579;\n+    static FILL_BYTES_V_LEN: uint = 13579;\n     #[test]\n     fn test_rng_fill_bytes() {\n-        let mut v = Vec::from_elem(fill_bytes_v_len, 0u8);\n+        let mut v = Vec::from_elem(FILL_BYTES_V_LEN, 0u8);\n         ::test::rng().fill_bytes(v.as_mut_slice());\n \n         // Sanity test: if we've gotten here, `fill_bytes` has not infinitely\n         // recursed.\n-        assert_eq!(v.len(), fill_bytes_v_len);\n+        assert_eq!(v.len(), FILL_BYTES_V_LEN);\n \n         // To test that `fill_bytes` actually did something, check that the\n         // average of `v` is not 0."}, {"sha": "9804382dbd91d913ddf5b0ac612517579a1e3689", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -494,6 +494,7 @@ pub fn get_os(triple: &str) -> Option<abi::Os> {\n     }\n     None\n }\n+#[allow(non_uppercase_statics)]\n static os_names : &'static [(&'static str, abi::Os)] = &[\n     (\"mingw32\",   abi::OsWindows),\n     (\"win32\",     abi::OsWindows),\n@@ -511,6 +512,7 @@ pub fn get_arch(triple: &str) -> Option<abi::Architecture> {\n     }\n     None\n }\n+#[allow(non_uppercase_statics)]\n static architecture_abis : &'static [(&'static str, abi::Architecture)] = &[\n     (\"i386\",   abi::X86),\n     (\"i486\",   abi::X86),"}, {"sha": "7a59aeb57895ddb8c28d820df38ffddb001bed2d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -961,7 +961,7 @@ impl LintPass for NonSnakeCase {\n     }\n }\n \n-declare_lint!(pub NON_UPPERCASE_STATICS, Allow,\n+declare_lint!(pub NON_UPPERCASE_STATICS, Warn,\n               \"static constants should have uppercase identifiers\")\n \n pub struct NonUppercaseStatics;"}, {"sha": "8047c12efc2917adc9b4549fb0f5a0dfcf7fafb4", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -98,6 +98,7 @@ macro_rules! declare_lint (\n #[macro_export]\n macro_rules! lint_array ( ($( $lint:expr ),*) => (\n     {\n+        #[allow(non_uppercase_statics)]\n         static array: LintArray = &[ $( $lint ),* ];\n         array\n     }"}, {"sha": "ef88795762e43617966665217885920a7612caf9", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_camel_case_types)]\n+#![allow(non_camel_case_types, non_uppercase_statics)]\n \n use std::mem;\n use back::svh::Svh;"}, {"sha": "642f66e259a6272025e28f45173a79ffa2450b3d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -2028,6 +2028,7 @@ fn encode_dylib_dependency_formats(rbml_w: &mut Encoder, ecx: &EncodeContext) {\n }\n \n // NB: Increment this as you change the metadata encoding version.\n+#[allow(non_uppercase_statics)]\n pub static metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 1 ];\n \n pub fn encode_metadata(parms: EncodeParams, krate: &Crate) -> Vec<u8> {"}, {"sha": "eda145419616ba72416e43bac6d0ae0ccaabe754", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -83,6 +83,7 @@ impl Clone for MovePathIndex {\n     }\n }\n \n+#[allow(non_uppercase_statics)]\n static InvalidMovePathIndex: MovePathIndex =\n     MovePathIndex(uint::MAX);\n \n@@ -96,6 +97,7 @@ impl MoveIndex {\n     }\n }\n \n+#[allow(non_uppercase_statics)]\n static InvalidMoveIndex: MoveIndex =\n     MoveIndex(uint::MAX);\n "}, {"sha": "9135ca07935a5d8903a79b160a9ae1223a216da8", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -57,16 +57,20 @@ pub struct Edge<E> {\n \n #[deriving(Clone, PartialEq, Show)]\n pub struct NodeIndex(pub uint);\n+#[allow(non_uppercase_statics)]\n pub static InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n #[deriving(PartialEq)]\n pub struct EdgeIndex(pub uint);\n+#[allow(non_uppercase_statics)]\n pub static InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n #[deriving(Show)]\n pub struct Direction { repr: uint }\n+#[allow(non_uppercase_statics)]\n pub static Outgoing: Direction = Direction { repr: 0 };\n+#[allow(non_uppercase_statics)]\n pub static Incoming: Direction = Direction { repr: 1 };\n \n impl NodeIndex {"}, {"sha": "f88b010c28a357d2b0d70a6189b03fd112ddb144", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -389,10 +389,12 @@ fn mk_cenum(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> Repr {\n fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntType {\n     debug!(\"range_to_inttype: {:?} {:?}\", hint, bounds);\n     // Lists of sizes to try.  u64 is always allowed as a fallback.\n+    #[allow(non_uppercase_statics)]\n     static choose_shortest: &'static[IntType] = &[\n         attr::UnsignedInt(ast::TyU8), attr::SignedInt(ast::TyI8),\n         attr::UnsignedInt(ast::TyU16), attr::SignedInt(ast::TyI16),\n         attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n+    #[allow(non_uppercase_statics)]\n     static at_least_32: &'static[IntType] = &[\n         attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n "}, {"sha": "0cd8510b750acbaf7b88cce73a841d7fa6ac433d", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -31,8 +31,8 @@ pub struct Builder<'a, 'tcx: 'a> {\n // This is a really awful way to get a zero-length c-string, but better (and a\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n pub fn noname() -> *const c_char {\n-    static cnull: c_char = 0;\n-    &cnull as *const c_char\n+    static CNULL: c_char = 0;\n+    &CNULL as *const c_char\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "55e34ad48cd0c68d4c90557a8d6cb7a6bdb045ac", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -218,13 +218,20 @@ use syntax::parse::token::special_idents;\n \n static DW_LANG_RUST: c_uint = 0x9000;\n \n+#[allow(non_uppercase_statics)]\n static DW_TAG_auto_variable: c_uint = 0x100;\n+#[allow(non_uppercase_statics)]\n static DW_TAG_arg_variable: c_uint = 0x101;\n \n+#[allow(non_uppercase_statics)]\n static DW_ATE_boolean: c_uint = 0x02;\n+#[allow(non_uppercase_statics)]\n static DW_ATE_float: c_uint = 0x04;\n+#[allow(non_uppercase_statics)]\n static DW_ATE_signed: c_uint = 0x05;\n+#[allow(non_uppercase_statics)]\n static DW_ATE_unsigned: c_uint = 0x07;\n+#[allow(non_uppercase_statics)]\n static DW_ATE_unsigned_char: c_uint = 0x08;\n \n static UNKNOWN_LINE_NUMBER: c_uint = 0;"}, {"sha": "df92251c87e303cfe02e490e0a93874730d24e07", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -2197,7 +2197,10 @@ macro_rules! def_type_content_sets(\n         #[allow(non_snake_case)]\n         mod $mname {\n             use middle::ty::TypeContents;\n-            $(pub static $name: TypeContents = TypeContents { bits: $bits };)+\n+            $(\n+                #[allow(non_uppercase_statics)]\n+                pub static $name: TypeContents = TypeContents { bits: $bits };\n+             )+\n         }\n     }\n )\n@@ -4650,6 +4653,7 @@ pub fn unboxed_closure_upvars(tcx: &ctxt, closure_id: ast::DefId)\n }\n \n pub fn is_binopable(cx: &ctxt, ty: t, op: ast::BinOp) -> bool {\n+    #![allow(non_uppercase_statics)]\n     static tycat_other: int = 0;\n     static tycat_bool: int = 1;\n     static tycat_char: int = 2;"}, {"sha": "13659d4b77e1c5e1a59e601c1eec6c55aa7b374a", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -46,6 +46,8 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n+#![allow(non_uppercase_statics)]\n+\n use middle::ty::{FloatVar, FloatVid, IntVar, IntVid, RegionVid, TyVar, TyVid};\n use middle::ty::{IntType, UintType};\n use middle::ty;"}, {"sha": "1e69ce003c557a9125d06d5a02c79e6accd3fe65", "filename": "src/librustc_back/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_uppercase_statics)]\n+\n pub static box_field_refcnt: uint = 0u;\n pub static box_field_drop_glue: uint = 1u;\n pub static box_field_body: uint = 4u;"}, {"sha": "934fb0ddd3ce43dd7a4531a0bb9fca1e437ec47e", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -733,9 +733,9 @@ mod bench {\n         }\n     }\n \n-    static s_short: &'static str = \"Mary\";\n-    static s_medium: &'static str = \"Mary had a little lamb\";\n-    static s_long: &'static str = \"\\\n+    static S_SHORT: &'static str = \"Mary\";\n+    static S_MEDIUM: &'static str = \"Mary had a little lamb\";\n+    static S_LONG: &'static str = \"\\\n         Mary had a little lamb, Little lamb\n         Mary had a little lamb, Little lamb\n         Mary had a little lamb, Little lamb\n@@ -752,17 +752,17 @@ mod bench {\n \n     #[bench]\n     fn bench_to_c_str_short(b: &mut Bencher) {\n-        bench_to_string(b, s_short)\n+        bench_to_string(b, S_SHORT)\n     }\n \n     #[bench]\n     fn bench_to_c_str_medium(b: &mut Bencher) {\n-        bench_to_string(b, s_medium)\n+        bench_to_string(b, S_MEDIUM)\n     }\n \n     #[bench]\n     fn bench_to_c_str_long(b: &mut Bencher) {\n-        bench_to_string(b, s_long)\n+        bench_to_string(b, S_LONG)\n     }\n \n     fn bench_to_c_str_unchecked(b: &mut Bencher, s: &str) {\n@@ -774,17 +774,17 @@ mod bench {\n \n     #[bench]\n     fn bench_to_c_str_unchecked_short(b: &mut Bencher) {\n-        bench_to_c_str_unchecked(b, s_short)\n+        bench_to_c_str_unchecked(b, S_SHORT)\n     }\n \n     #[bench]\n     fn bench_to_c_str_unchecked_medium(b: &mut Bencher) {\n-        bench_to_c_str_unchecked(b, s_medium)\n+        bench_to_c_str_unchecked(b, S_MEDIUM)\n     }\n \n     #[bench]\n     fn bench_to_c_str_unchecked_long(b: &mut Bencher) {\n-        bench_to_c_str_unchecked(b, s_long)\n+        bench_to_c_str_unchecked(b, S_LONG)\n     }\n \n     fn bench_with_c_str(b: &mut Bencher, s: &str) {\n@@ -795,17 +795,17 @@ mod bench {\n \n     #[bench]\n     fn bench_with_c_str_short(b: &mut Bencher) {\n-        bench_with_c_str(b, s_short)\n+        bench_with_c_str(b, S_SHORT)\n     }\n \n     #[bench]\n     fn bench_with_c_str_medium(b: &mut Bencher) {\n-        bench_with_c_str(b, s_medium)\n+        bench_with_c_str(b, S_MEDIUM)\n     }\n \n     #[bench]\n     fn bench_with_c_str_long(b: &mut Bencher) {\n-        bench_with_c_str(b, s_long)\n+        bench_with_c_str(b, S_LONG)\n     }\n \n     fn bench_with_c_str_unchecked(b: &mut Bencher, s: &str) {\n@@ -818,16 +818,16 @@ mod bench {\n \n     #[bench]\n     fn bench_with_c_str_unchecked_short(b: &mut Bencher) {\n-        bench_with_c_str_unchecked(b, s_short)\n+        bench_with_c_str_unchecked(b, S_SHORT)\n     }\n \n     #[bench]\n     fn bench_with_c_str_unchecked_medium(b: &mut Bencher) {\n-        bench_with_c_str_unchecked(b, s_medium)\n+        bench_with_c_str_unchecked(b, S_MEDIUM)\n     }\n \n     #[bench]\n     fn bench_with_c_str_unchecked_long(b: &mut Bencher) {\n-        bench_with_c_str_unchecked(b, s_long)\n+        bench_with_c_str_unchecked(b, S_LONG)\n     }\n }"}, {"sha": "bb7a1227e0e4708c1c70ffb327a1541fd04fb502", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -10,6 +10,7 @@\n \n //! Unwind library interface\n \n+#![allow(non_uppercase_statics)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)] // these are just bindings"}, {"sha": "8d5c49d767f1584f41e735acb65219397b19d9e5", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 107, "deletions": 107, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -416,37 +416,37 @@ mod tests {\n \n     #[test]\n     fn test_tls_multitask() {\n-        static my_key: Key<String> = &KeyValueKey;\n-        my_key.replace(Some(\"parent data\".to_string()));\n+        static MY_KEY: Key<String> = &KeyValueKey;\n+        MY_KEY.replace(Some(\"parent data\".to_string()));\n         task::spawn(proc() {\n             // TLD shouldn't carry over.\n-            assert!(my_key.get().is_none());\n-            my_key.replace(Some(\"child data\".to_string()));\n-            assert!(my_key.get().as_ref().unwrap().as_slice() == \"child data\");\n+            assert!(MY_KEY.get().is_none());\n+            MY_KEY.replace(Some(\"child data\".to_string()));\n+            assert!(MY_KEY.get().as_ref().unwrap().as_slice() == \"child data\");\n             // should be cleaned up for us\n         });\n \n         // Must work multiple times\n-        assert!(my_key.get().unwrap().as_slice() == \"parent data\");\n-        assert!(my_key.get().unwrap().as_slice() == \"parent data\");\n-        assert!(my_key.get().unwrap().as_slice() == \"parent data\");\n+        assert!(MY_KEY.get().unwrap().as_slice() == \"parent data\");\n+        assert!(MY_KEY.get().unwrap().as_slice() == \"parent data\");\n+        assert!(MY_KEY.get().unwrap().as_slice() == \"parent data\");\n     }\n \n     #[test]\n     fn test_tls_overwrite() {\n-        static my_key: Key<String> = &KeyValueKey;\n-        my_key.replace(Some(\"first data\".to_string()));\n-        my_key.replace(Some(\"next data\".to_string())); // Shouldn't leak.\n-        assert!(my_key.get().unwrap().as_slice() == \"next data\");\n+        static MY_KEY: Key<String> = &KeyValueKey;\n+        MY_KEY.replace(Some(\"first data\".to_string()));\n+        MY_KEY.replace(Some(\"next data\".to_string())); // Shouldn't leak.\n+        assert!(MY_KEY.get().unwrap().as_slice() == \"next data\");\n     }\n \n     #[test]\n     fn test_tls_pop() {\n-        static my_key: Key<String> = &KeyValueKey;\n-        my_key.replace(Some(\"weasel\".to_string()));\n-        assert!(my_key.replace(None).unwrap() == \"weasel\".to_string());\n+        static MY_KEY: Key<String> = &KeyValueKey;\n+        MY_KEY.replace(Some(\"weasel\".to_string()));\n+        assert!(MY_KEY.replace(None).unwrap() == \"weasel\".to_string());\n         // Pop must remove the data from the map.\n-        assert!(my_key.replace(None).is_none());\n+        assert!(MY_KEY.replace(None).is_none());\n     }\n \n     #[test]\n@@ -457,58 +457,58 @@ mod tests {\n         // to get recorded as something within a rust stack segment. Then a\n         // subsequent upcall (esp. for logging, think vsnprintf) would run on\n         // a stack smaller than 1 MB.\n-        static my_key: Key<String> = &KeyValueKey;\n+        static MY_KEY: Key<String> = &KeyValueKey;\n         task::spawn(proc() {\n-            my_key.replace(Some(\"hax\".to_string()));\n+            MY_KEY.replace(Some(\"hax\".to_string()));\n         });\n     }\n \n     #[test]\n     fn test_tls_multiple_types() {\n-        static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Box<int>> = &KeyValueKey;\n-        static int_key: Key<int> = &KeyValueKey;\n+        static STR_KEY: Key<String> = &KeyValueKey;\n+        static BOX_KEY: Key<Box<int>> = &KeyValueKey;\n+        static INT_KEY: Key<int> = &KeyValueKey;\n         task::spawn(proc() {\n-            str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(box 0));\n-            int_key.replace(Some(42));\n+            STR_KEY.replace(Some(\"string data\".to_string()));\n+            BOX_KEY.replace(Some(box 0));\n+            INT_KEY.replace(Some(42));\n         });\n     }\n \n     #[test]\n     fn test_tls_overwrite_multiple_types() {\n-        static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Box<int>> = &KeyValueKey;\n-        static int_key: Key<int> = &KeyValueKey;\n+        static STR_KEY: Key<String> = &KeyValueKey;\n+        static BOX_KEY: Key<Box<int>> = &KeyValueKey;\n+        static INT_KEY: Key<int> = &KeyValueKey;\n         task::spawn(proc() {\n-            str_key.replace(Some(\"string data\".to_string()));\n-            str_key.replace(Some(\"string data 2\".to_string()));\n-            box_key.replace(Some(box 0));\n-            box_key.replace(Some(box 1));\n-            int_key.replace(Some(42));\n+            STR_KEY.replace(Some(\"string data\".to_string()));\n+            STR_KEY.replace(Some(\"string data 2\".to_string()));\n+            BOX_KEY.replace(Some(box 0));\n+            BOX_KEY.replace(Some(box 1));\n+            INT_KEY.replace(Some(42));\n             // This could cause a segfault if overwriting-destruction is done\n             // with the crazy polymorphic transmute rather than the provided\n             // finaliser.\n-            int_key.replace(Some(31337));\n+            INT_KEY.replace(Some(31337));\n         });\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_tls_cleanup_on_failure() {\n-        static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Box<int>> = &KeyValueKey;\n-        static int_key: Key<int> = &KeyValueKey;\n-        str_key.replace(Some(\"parent data\".to_string()));\n-        box_key.replace(Some(box 0));\n+        static STR_KEY: Key<String> = &KeyValueKey;\n+        static BOX_KEY: Key<Box<int>> = &KeyValueKey;\n+        static INT_KEY: Key<int> = &KeyValueKey;\n+        STR_KEY.replace(Some(\"parent data\".to_string()));\n+        BOX_KEY.replace(Some(box 0));\n         task::spawn(proc() {\n-            str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(box 2));\n-            int_key.replace(Some(42));\n+            STR_KEY.replace(Some(\"string data\".to_string()));\n+            BOX_KEY.replace(Some(box 2));\n+            INT_KEY.replace(Some(42));\n             fail!();\n         });\n         // Not quite nondeterministic.\n-        int_key.replace(Some(31337));\n+        INT_KEY.replace(Some(31337));\n         fail!();\n     }\n \n@@ -523,9 +523,9 @@ mod tests {\n                 self.tx.send(());\n             }\n         }\n-        static key: Key<Dropper> = &KeyValueKey;\n+        static KEY: Key<Dropper> = &KeyValueKey;\n         let _ = task::try(proc() {\n-            key.replace(Some(Dropper{ tx: tx }));\n+            KEY.replace(Some(Dropper{ tx: tx }));\n         });\n         // At this point the task has been cleaned up and the TLD dropped.\n         // If the channel doesn't have a value now, then the Sender was leaked.\n@@ -534,56 +534,56 @@ mod tests {\n \n     #[test]\n     fn test_static_pointer() {\n-        static key: Key<&'static int> = &KeyValueKey;\n+        static KEY: Key<&'static int> = &KeyValueKey;\n         static VALUE: int = 0;\n-        key.replace(Some(&VALUE));\n+        KEY.replace(Some(&VALUE));\n     }\n \n     #[test]\n     fn test_owned() {\n-        static key: Key<Box<int>> = &KeyValueKey;\n-        key.replace(Some(box 1));\n+        static KEY: Key<Box<int>> = &KeyValueKey;\n+        KEY.replace(Some(box 1));\n \n         {\n-            let k1 = key.get().unwrap();\n-            let k2 = key.get().unwrap();\n-            let k3 = key.get().unwrap();\n+            let k1 = KEY.get().unwrap();\n+            let k2 = KEY.get().unwrap();\n+            let k3 = KEY.get().unwrap();\n             assert_eq!(**k1, 1);\n             assert_eq!(**k2, 1);\n             assert_eq!(**k3, 1);\n         }\n-        key.replace(Some(box 2));\n-        assert_eq!(**key.get().unwrap(), 2);\n+        KEY.replace(Some(box 2));\n+        assert_eq!(**KEY.get().unwrap(), 2);\n     }\n \n     #[test]\n     fn test_same_key_type() {\n-        static key1: Key<int> = &KeyValueKey;\n-        static key2: Key<int> = &KeyValueKey;\n-        static key3: Key<int> = &KeyValueKey;\n-        static key4: Key<int> = &KeyValueKey;\n-        static key5: Key<int> = &KeyValueKey;\n-        key1.replace(Some(1));\n-        key2.replace(Some(2));\n-        key3.replace(Some(3));\n-        key4.replace(Some(4));\n-        key5.replace(Some(5));\n-\n-        assert_eq!(*key1.get().unwrap(), 1);\n-        assert_eq!(*key2.get().unwrap(), 2);\n-        assert_eq!(*key3.get().unwrap(), 3);\n-        assert_eq!(*key4.get().unwrap(), 4);\n-        assert_eq!(*key5.get().unwrap(), 5);\n+        static KEY1: Key<int> = &KeyValueKey;\n+        static KEY2: Key<int> = &KeyValueKey;\n+        static KEY3: Key<int> = &KeyValueKey;\n+        static KEY4: Key<int> = &KeyValueKey;\n+        static KEY5: Key<int> = &KeyValueKey;\n+        KEY1.replace(Some(1));\n+        KEY2.replace(Some(2));\n+        KEY3.replace(Some(3));\n+        KEY4.replace(Some(4));\n+        KEY5.replace(Some(5));\n+\n+        assert_eq!(*KEY1.get().unwrap(), 1);\n+        assert_eq!(*KEY2.get().unwrap(), 2);\n+        assert_eq!(*KEY3.get().unwrap(), 3);\n+        assert_eq!(*KEY4.get().unwrap(), 4);\n+        assert_eq!(*KEY5.get().unwrap(), 5);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_nested_get_set1() {\n-        static key: Key<int> = &KeyValueKey;\n-        assert_eq!(key.replace(Some(4)), None);\n+        static KEY: Key<int> = &KeyValueKey;\n+        assert_eq!(KEY.replace(Some(4)), None);\n \n-        let _k = key.get();\n-        key.replace(Some(4));\n+        let _k = KEY.get();\n+        KEY.replace(Some(4));\n     }\n \n     // ClearKey is a RAII class that ensures the keys are cleared from the map.\n@@ -601,95 +601,95 @@ mod tests {\n \n     #[bench]\n     fn bench_replace_none(b: &mut test::Bencher) {\n-        static key: Key<uint> = &KeyValueKey;\n-        let _clear = ClearKey(key);\n-        key.replace(None);\n+        static KEY: Key<uint> = &KeyValueKey;\n+        let _clear = ClearKey(KEY);\n+        KEY.replace(None);\n         b.iter(|| {\n-            key.replace(None)\n+            KEY.replace(None)\n         });\n     }\n \n     #[bench]\n     fn bench_replace_some(b: &mut test::Bencher) {\n-        static key: Key<uint> = &KeyValueKey;\n-        let _clear = ClearKey(key);\n-        key.replace(Some(1u));\n+        static KEY: Key<uint> = &KeyValueKey;\n+        let _clear = ClearKey(KEY);\n+        KEY.replace(Some(1u));\n         b.iter(|| {\n-            key.replace(Some(2))\n+            KEY.replace(Some(2))\n         });\n     }\n \n     #[bench]\n     fn bench_replace_none_some(b: &mut test::Bencher) {\n-        static key: Key<uint> = &KeyValueKey;\n-        let _clear = ClearKey(key);\n-        key.replace(Some(0u));\n+        static KEY: Key<uint> = &KeyValueKey;\n+        let _clear = ClearKey(KEY);\n+        KEY.replace(Some(0u));\n         b.iter(|| {\n-            let old = key.replace(None).unwrap();\n+            let old = KEY.replace(None).unwrap();\n             let new = old + 1;\n-            key.replace(Some(new))\n+            KEY.replace(Some(new))\n         });\n     }\n \n     #[bench]\n     fn bench_100_keys_replace_last(b: &mut test::Bencher) {\n-        static keys: [KeyValue<uint>, ..100] = [KeyValueKey, ..100];\n-        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n-        for (i, key) in keys.iter().enumerate() {\n+        static KEYS: [KeyValue<uint>, ..100] = [KeyValueKey, ..100];\n+        let _clear = KEYS.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in KEYS.iter().enumerate() {\n             key.replace(Some(i));\n         }\n         b.iter(|| {\n-            let key: Key<uint> = &keys[99];\n+            let key: Key<uint> = &KEYS[99];\n             key.replace(Some(42))\n         });\n     }\n \n     #[bench]\n     fn bench_1000_keys_replace_last(b: &mut test::Bencher) {\n-        static keys: [KeyValue<uint>, ..1000] = [KeyValueKey, ..1000];\n-        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n-        for (i, key) in keys.iter().enumerate() {\n+        static KEYS: [KeyValue<uint>, ..1000] = [KeyValueKey, ..1000];\n+        let _clear = KEYS.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in KEYS.iter().enumerate() {\n             key.replace(Some(i));\n         }\n         b.iter(|| {\n-            let key: Key<uint> = &keys[999];\n+            let key: Key<uint> = &KEYS[999];\n             key.replace(Some(42))\n         });\n-        for key in keys.iter() { key.clear(); }\n+        for key in KEYS.iter() { key.clear(); }\n     }\n \n     #[bench]\n     fn bench_get(b: &mut test::Bencher) {\n-        static key: Key<uint> = &KeyValueKey;\n-        let _clear = ClearKey(key);\n-        key.replace(Some(42));\n+        static KEY: Key<uint> = &KeyValueKey;\n+        let _clear = ClearKey(KEY);\n+        KEY.replace(Some(42));\n         b.iter(|| {\n-            key.get()\n+            KEY.get()\n         });\n     }\n \n     #[bench]\n     fn bench_100_keys_get_last(b: &mut test::Bencher) {\n-        static keys: [KeyValue<uint>, ..100] = [KeyValueKey, ..100];\n-        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n-        for (i, key) in keys.iter().enumerate() {\n+        static KEYS: [KeyValue<uint>, ..100] = [KeyValueKey, ..100];\n+        let _clear = KEYS.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in KEYS.iter().enumerate() {\n             key.replace(Some(i));\n         }\n         b.iter(|| {\n-            let key: Key<uint> = &keys[99];\n+            let key: Key<uint> = &KEYS[99];\n             key.get()\n         });\n     }\n \n     #[bench]\n     fn bench_1000_keys_get_last(b: &mut test::Bencher) {\n-        static keys: [KeyValue<uint>, ..1000] = [KeyValueKey, ..1000];\n-        let _clear = keys.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n-        for (i, key) in keys.iter().enumerate() {\n+        static KEYS: [KeyValue<uint>, ..1000] = [KeyValueKey, ..1000];\n+        let _clear = KEYS.iter().map(ClearKey).collect::<Vec<ClearKey<uint>>>();\n+        for (i, key) in KEYS.iter().enumerate() {\n             key.replace(Some(i));\n         }\n         b.iter(|| {\n-            let key: Key<uint> = &keys[999];\n+            let key: Key<uint> = &KEYS[999];\n             key.get()\n         });\n     }"}, {"sha": "28b0256f2e6e378bffc4435b23f7d3f795caeeab", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -376,8 +376,8 @@ mod imp {\n         #[cfg(target_arch = \"arm\")]\n         static __PTHREAD_COND_SIZE__: uint = 24;\n \n-        static _PTHREAD_MUTEX_SIG_init: libc::c_long = 0x32AAABA7;\n-        static _PTHREAD_COND_SIG_init: libc::c_long = 0x3CB0B1BB;\n+        static _PTHREAD_MUTEX_SIG_INIT: libc::c_long = 0x32AAABA7;\n+        static _PTHREAD_COND_SIG_INIT: libc::c_long = 0x3CB0B1BB;\n \n         #[repr(C)]\n         pub struct pthread_mutex_t {\n@@ -391,11 +391,11 @@ mod imp {\n         }\n \n         pub static PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n-            __sig: _PTHREAD_MUTEX_SIG_init,\n+            __sig: _PTHREAD_MUTEX_SIG_INIT,\n             __opaque: [0, ..__PTHREAD_MUTEX_SIZE__],\n         };\n         pub static PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n-            __sig: _PTHREAD_COND_SIG_init,\n+            __sig: _PTHREAD_COND_SIG_INIT,\n             __opaque: [0, ..__PTHREAD_COND_SIZE__],\n         };\n     }"}, {"sha": "9fbf4d09cd60dbf0c689632c4a2483fe5fdedcef", "filename": "src/librustrt/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibrustrt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Futil.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -28,7 +28,9 @@ pub static ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) ||\n \n pub struct Stdio(libc::c_int);\n \n+#[allow(non_uppercase_statics)]\n pub static Stdout: Stdio = Stdio(libc::STDOUT_FILENO);\n+#[allow(non_uppercase_statics)]\n pub static Stderr: Stdio = Stdio(libc::STDERR_FILENO);\n \n impl fmt::FormatWriter for Stdio {"}, {"sha": "654278cf81baf4d9ed3296d2bf032969806f1753", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -360,7 +360,9 @@ fn escape_char(writer: &mut io::Writer, v: char) -> Result<(), io::IoError> {\n }\n \n fn spaces(wr: &mut io::Writer, mut n: uint) -> Result<(), io::IoError> {\n+    #[allow(non_uppercase_statics)]\n     static len: uint = 16;\n+    #[allow(non_uppercase_statics)]\n     static buf: [u8, ..len] = [b' ', ..len];\n \n     while n >= len {"}, {"sha": "391d099de87c6a8aa5f2983a6fb55a4a522198e6", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -123,7 +123,10 @@ macro_rules! bitflags {\n             bits: $T,\n         }\n \n-        $($(#[$Flag_attr])* pub static $Flag: $BitFlags = $BitFlags { bits: $value };)+\n+        $(\n+            #[allow(non_uppercase_statics)]\n+            $(#[$Flag_attr])* pub static $Flag: $BitFlags = $BitFlags { bits: $value };\n+         )+\n \n         impl $BitFlags {\n             /// Returns an empty set of flags.\n@@ -240,7 +243,10 @@ macro_rules! bitflags {\n         bitflags! {\n             $(#[$attr])*\n             flags $BitFlags: $T {\n-                $($(#[$Flag_attr])* static $Flag = $value),+\n+                $(\n+                    #[allow(non_uppercase_statics)]\n+                    $(#[$Flag_attr])* static $Flag = $value\n+                 ),+\n             }\n         }\n     };"}, {"sha": "73a8aa442c1fda6e21fb5b2d82210cfc3ade4601", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -11,6 +11,7 @@\n //! Bindings for executing child processes\n \n #![allow(experimental)]\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "fa356432a673158e7043c48ddf4fe7ddedbecec3", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -304,9 +304,11 @@ macro_rules! println(\n #[macro_export]\n macro_rules! local_data_key(\n     ($name:ident: $ty:ty) => (\n+        #[allow(non_uppercase_statics)]\n         static $name: ::std::local_data::Key<$ty> = &::std::local_data::KeyValueKey;\n     );\n     (pub $name:ident: $ty:ty) => (\n+        #[allow(non_uppercase_statics)]\n         pub static $name: ::std::local_data::Key<$ty> = &::std::local_data::KeyValueKey;\n     );\n )"}, {"sha": "805db000686a02856b0daaacec79973625e55cc6", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -457,7 +457,9 @@ fn normalize_helper<'a>(v: &'a [u8], is_abs: bool) -> Option<Vec<&'a [u8]>> {\n     }\n }\n \n+#[allow(non_uppercase_statics)]\n static dot_static: &'static [u8] = b\".\";\n+#[allow(non_uppercase_statics)]\n static dot_dot_static: &'static [u8] = b\"..\";\n \n #[cfg(test)]"}, {"sha": "977b3018fa74c24b182f3d630c94faacce26d4f7", "filename": "src/libstd/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -569,10 +569,10 @@ mod test {\n         // climbing the task tree to dereference each ancestor. (See #1789)\n         // (well, it would if the constant were 8000+ - I lowered it to be more\n         // valgrind-friendly. try this at home, instead..!)\n-        static generations: uint = 16;\n+        static GENERATIONS: uint = 16;\n         fn child_no(x: uint) -> proc(): Send {\n             return proc() {\n-                if x < generations {\n+                if x < GENERATIONS {\n                     TaskBuilder::new().spawn(child_no(x+1));\n                 }\n             }"}, {"sha": "3a02d74edffb752f5e553a6a0cb65f7b6944dae0", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -47,7 +47,9 @@ pub enum Architecture {\n     Mipsel\n }\n \n+#[allow(non_uppercase_statics)]\n static IntelBits: u32 = (1 << (X86 as uint)) | (1 << (X86_64 as uint));\n+#[allow(non_uppercase_statics)]\n static ArmBits: u32 = (1 << (Arm as uint));\n \n pub struct AbiData {\n@@ -70,6 +72,7 @@ pub enum AbiArchitecture {\n     Archs(u32)\n }\n \n+#[allow(non_uppercase_statics)]\n static AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs\n     AbiData {abi: Cdecl, name: \"cdecl\", abi_arch: Archs(IntelBits)},"}, {"sha": "f746e1f14822a90fbdbf4fa5e6cd1314d98dcf87", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -293,6 +293,7 @@ pub fn operator_prec(op: ast::BinOp) -> uint {\n \n /// Precedence of the `as` operator, which is a binary operator\n /// not appearing in the prior table.\n+#[allow(non_uppercase_statics)]\n pub static as_prec: uint = 12u;\n \n pub fn empty_generics() -> Generics {"}, {"sha": "a8c827439cc605a6dfc31f3e605e4b47d882f34b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -383,12 +383,15 @@ macro_rules! declare_special_idents_and_keywords {(\n \n     pub mod special_idents {\n         use ast::{Ident, Name};\n-        $( pub static $si_static: Ident = Ident { name: Name($si_name), ctxt: 0 }; )*\n+        $(\n+            #[allow(non_uppercase_statics)]\n+            pub static $si_static: Ident = Ident { name: Name($si_name), ctxt: 0 };\n+         )*\n     }\n \n     pub mod special_names {\n         use ast::Name;\n-        $( pub static $si_static: Name =  Name($si_name); )*\n+        $( #[allow(non_uppercase_statics)] pub static $si_static: Name =  Name($si_name); )*\n     }\n \n     /**"}, {"sha": "c3a3848019a5dacd862144f3575e9c93df3b6095", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -89,8 +89,10 @@ pub fn rust_printer_annotated<'a>(writer: Box<io::Writer+'static>,\n     }\n }\n \n+#[allow(non_uppercase_statics)]\n pub static indent_unit: uint = 4u;\n \n+#[allow(non_uppercase_statics)]\n pub static default_columns: uint = 78u;\n \n /// Requires you to pass an input filename and reader so that"}, {"sha": "c0c3f707ecb3c80dad0e59185a49fe55db2eeb07", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -173,6 +173,7 @@ impl fmt::Show for ParseError {\n }\n \n // Length of each hyphenated group in hex digits\n+#[allow(non_uppercase_statics)]\n static UuidGroupLens: [uint, ..5] = [8u, 4u, 4u, 4u, 12u];\n \n /// UUID support"}, {"sha": "1d14da73b7eebd80fc2339a1f10144a4c487d714", "filename": "src/test/compile-fail-fulldeps/syntax-extension-regex-unused-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -17,6 +17,7 @@ extern crate regex;\n \n #[deny(unused_variable)]\n #[deny(dead_code)]\n+#[allow(non_uppercase_statics)]\n \n // Tests to make sure that extraneous dead code warnings aren't emitted from\n // the code generated by regex!."}, {"sha": "74bfc6e6ffc1fb7777419194875c3d5e14c552d8", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(asm)]\n \n-#![allow(dead_code)]\n+#![allow(dead_code, non_uppercase_statics)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]"}, {"sha": "30d3ab17a463e6622480b0e22fbf7478b7b225a1", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -30,4 +30,4 @@ fn main() {\n \n // At least one error is needed so that compilation fails\n #[static_assert]\n-static b: bool = false; //~ ERROR static assertion failed\n+static B: bool = false; //~ ERROR static assertion failed"}, {"sha": "45380235a2a8b34aa546620e53eae95a9c92d7e7", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -11,6 +11,7 @@\n #![no_std]\n #![allow(unused_variable)]\n #![allow(non_camel_case_types)]\n+#![allow(non_uppercase_statics)]\n #![deny(dead_code)]\n #![feature(lang_items)]\n "}, {"sha": "bbd88f1f0aade81ebc1e283572bf2598235156c0", "filename": "src/test/compile-fail/lint-directives-on-use-items-issue-10534.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bcd3539c761b4ecf423800bce21057c4e961fa/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs?ref=94bcd3539c761b4ecf423800bce21057c4e961fa", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![deny(unused_imports)]\n+#![allow(non_uppercase_statics)]\n \n // The aim of this test is to ensure that deny/allow/warn directives\n // are applied to individual \"use\" statements instead of silently"}]}