{"sha": "fb160d5d3b30ad4a522149d309002fd76137b048", "node_id": "C_kwDOAAsO6NoAKGZiMTYwZDVkM2IzMGFkNGE1MjIxNDlkMzA5MDAyZmQ3NjEzN2IwNDg", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-05T13:32:56Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-05T19:33:44Z"}, "message": "Modules can be reexported and it should be handled by rustdoc", "tree": {"sha": "f262c9f60e2db5b80f48dd3f9ca1d0c4ca3df4d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f262c9f60e2db5b80f48dd3f9ca1d0c4ca3df4d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb160d5d3b30ad4a522149d309002fd76137b048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb160d5d3b30ad4a522149d309002fd76137b048", "html_url": "https://github.com/rust-lang/rust/commit/fb160d5d3b30ad4a522149d309002fd76137b048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb160d5d3b30ad4a522149d309002fd76137b048/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879f8de4096b2db4769e64e4c1af5ffb10b53a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/879f8de4096b2db4769e64e4c1af5ffb10b53a22", "html_url": "https://github.com/rust-lang/rust/commit/879f8de4096b2db4769e64e4c1af5ffb10b53a22"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "d21a8a5477f7a6950d3408456827d3e8059d5bff", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fb160d5d3b30ad4a522149d309002fd76137b048/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb160d5d3b30ad4a522149d309002fd76137b048/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fb160d5d3b30ad4a522149d309002fd76137b048", "patch": "@@ -119,7 +119,28 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     });\n \n     let kind = ModuleItem(Module { items, span });\n-    Item::from_def_id_and_parts(doc.def_id.to_def_id(), Some(doc.name), kind, cx)\n+    let def_id = doc.def_id.to_def_id();\n+    let target_attrs = inline::load_attrs(cx, def_id);\n+    let attrs = if let Some(import_id) = doc.import_id {\n+        let is_inline = inline::load_attrs(cx, import_id.to_def_id())\n+            .lists(sym::doc)\n+            .get_word_attr(sym::inline)\n+            .is_some();\n+        let mut attrs = get_all_import_attributes(cx, import_id, doc.def_id, is_inline);\n+        add_without_unwanted_attributes(&mut attrs, target_attrs, is_inline, None);\n+        attrs\n+    } else {\n+        // We only keep the item's attributes.\n+        target_attrs.iter().map(|attr| (Cow::Borrowed(attr), None)).collect()\n+    };\n+\n+    let cfg = attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n+    let attrs = Attributes::from_ast_iter(attrs.iter().map(|(attr, did)| (&**attr, *did)), false);\n+\n+    let name = doc.renamed.or_else(|| Some(doc.name));\n+    let mut item = Item::from_def_id_and_attrs_and_parts(def_id, name, kind, Box::new(attrs), cfg);\n+    item.inline_stmt_id = doc.import_id.map(|local| local.to_def_id());\n+    item\n }\n \n fn clean_generic_bound<'tcx>("}, {"sha": "10295cbd189b110357ff0f981a972b8062463a8f", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb160d5d3b30ad4a522149d309002fd76137b048/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb160d5d3b30ad4a522149d309002fd76137b048/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=fb160d5d3b30ad4a522149d309002fd76137b048", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -\n     }\n \n     if cx.tcx.is_doc_hidden(def_id.to_def_id())\n-        || inherits_doc_hidden(cx.tcx, def_id)\n+        || inherits_doc_hidden(cx.tcx, def_id, None)\n         || cx.tcx.def_span(def_id.to_def_id()).in_derive_expansion()\n     {\n         return false;"}, {"sha": "f7c525042c2aa67c045430f125d2ffb27270b527", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fb160d5d3b30ad4a522149d309002fd76137b048/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb160d5d3b30ad4a522149d309002fd76137b048/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=fb160d5d3b30ad4a522149d309002fd76137b048", "patch": "@@ -27,6 +27,8 @@ pub(crate) struct Module<'hir> {\n     pub(crate) where_inner: Span,\n     pub(crate) mods: Vec<Module<'hir>>,\n     pub(crate) def_id: LocalDefId,\n+    pub(crate) renamed: Option<Symbol>,\n+    pub(crate) import_id: Option<LocalDefId>,\n     /// The key is the item `ItemId` and the value is: (item, renamed, import_id).\n     /// We use `FxIndexMap` to keep the insert order.\n     pub(crate) items: FxIndexMap<\n@@ -37,11 +39,19 @@ pub(crate) struct Module<'hir> {\n }\n \n impl Module<'_> {\n-    pub(crate) fn new(name: Symbol, def_id: LocalDefId, where_inner: Span) -> Self {\n+    pub(crate) fn new(\n+        name: Symbol,\n+        def_id: LocalDefId,\n+        where_inner: Span,\n+        renamed: Option<Symbol>,\n+        import_id: Option<LocalDefId>,\n+    ) -> Self {\n         Module {\n             name,\n             def_id,\n             where_inner,\n+            renamed,\n+            import_id,\n             mods: Vec::new(),\n             items: FxIndexMap::default(),\n             foreigns: Vec::new(),\n@@ -60,9 +70,16 @@ fn def_id_to_path(tcx: TyCtxt<'_>, did: DefId) -> Vec<Symbol> {\n     std::iter::once(crate_name).chain(relative).collect()\n }\n \n-pub(crate) fn inherits_doc_hidden(tcx: TyCtxt<'_>, mut def_id: LocalDefId) -> bool {\n+pub(crate) fn inherits_doc_hidden(\n+    tcx: TyCtxt<'_>,\n+    mut def_id: LocalDefId,\n+    stop_at: Option<LocalDefId>,\n+) -> bool {\n     let hir = tcx.hir();\n     while let Some(id) = tcx.opt_local_parent(def_id) {\n+        if let Some(stop_at) = stop_at && id == stop_at {\n+            return false;\n+        }\n         def_id = id;\n         if tcx.is_doc_hidden(def_id.to_def_id()) {\n             return true;\n@@ -100,6 +117,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             cx.tcx.crate_name(LOCAL_CRATE),\n             CRATE_DEF_ID,\n             cx.tcx.hir().root_module().spans.inner_span,\n+            None,\n+            None,\n         );\n \n         RustdocVisitor {\n@@ -260,7 +279,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n         let is_private =\n             !self.cx.cache.effective_visibilities.is_directly_public(self.cx.tcx, ori_res_did);\n-        let is_hidden = inherits_doc_hidden(self.cx.tcx, res_did);\n+        let is_hidden = inherits_doc_hidden(self.cx.tcx, res_did, None);\n \n         // Only inline if requested or if the item would otherwise be stripped.\n         if (!please_inline && !is_private && !is_hidden) || is_no_inline {\n@@ -277,7 +296,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 .cache\n                 .effective_visibilities\n                 .is_directly_public(self.cx.tcx, item_def_id.to_def_id()) &&\n-            !inherits_doc_hidden(self.cx.tcx, item_def_id)\n+            !inherits_doc_hidden(self.cx.tcx, item_def_id, None)\n         {\n             // The imported item is public and not `doc(hidden)` so no need to inline it.\n             return false;\n@@ -426,7 +445,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                self.enter_mod(item.owner_id.def_id, m, name);\n+                self.enter_mod(item.owner_id.def_id, m, name, renamed, import_id);\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)\n@@ -479,8 +498,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     /// This method will create a new module and push it onto the \"modules stack\" then call\n     /// `visit_mod_contents`. Once done, it'll remove it from the \"modules stack\" and instead\n     /// add into the list of modules of the current module.\n-    fn enter_mod(&mut self, id: LocalDefId, m: &'tcx hir::Mod<'tcx>, name: Symbol) {\n-        self.modules.push(Module::new(name, id, m.spans.inner_span));\n+    fn enter_mod(\n+        &mut self,\n+        id: LocalDefId,\n+        m: &'tcx hir::Mod<'tcx>,\n+        name: Symbol,\n+        renamed: Option<Symbol>,\n+        import_id: Option<LocalDefId>,\n+    ) {\n+        self.modules.push(Module::new(name, id, m.spans.inner_span, renamed, import_id));\n \n         self.visit_mod_contents(id, m);\n "}]}