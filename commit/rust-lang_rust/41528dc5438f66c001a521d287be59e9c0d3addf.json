{"sha": "41528dc5438f66c001a521d287be59e9c0d3addf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTI4ZGM1NDM4ZjY2YzAwMWE1MjFkMjg3YmU1OWU5YzBkM2FkZGY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-06T10:50:24Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-07T08:41:39Z"}, "message": "Add pass-by-ref annotation to the tests to make them typecheck\n\nIssue #1008", "tree": {"sha": "79d6e1779c9f36696c31cfec33a661de6bf81ca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79d6e1779c9f36696c31cfec33a661de6bf81ca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41528dc5438f66c001a521d287be59e9c0d3addf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41528dc5438f66c001a521d287be59e9c0d3addf", "html_url": "https://github.com/rust-lang/rust/commit/41528dc5438f66c001a521d287be59e9c0d3addf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41528dc5438f66c001a521d287be59e9c0d3addf/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe916fb9f0496097f5edc2c0fb6c30eb0e1c4a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe916fb9f0496097f5edc2c0fb6c30eb0e1c4a5d", "html_url": "https://github.com/rust-lang/rust/commit/fe916fb9f0496097f5edc2c0fb6c30eb0e1c4a5d"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "b844e7308b66c25c0a377c2cf6cefb1e97f15a45", "filename": "src/test/compile-fail/fn-compare-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected fn() but found fn(int)\n+// error-pattern:expected fn() but found fn(+int)\n \n fn main() {\n     fn f() { }"}, {"sha": "1fcdd37f2711c2b65992923b6bbb36040e3a8a2e", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -1,9 +1,11 @@\n // error-pattern:assigning to upvar\n // Make sure that nesting a block within a lambda doesn't let us\n // mutate upvars from a lambda.\n+fn f2(x: block()) { x(); }\n+\n fn main() {\n     let i = 0;\n-    let ctr = lambda () -> int { block () { i = i + 1; }(); ret i; };\n+    let ctr = lambda () -> int { f2({|| i = i + 1; }); ret i; };\n     log_err ctr();\n     log_err ctr();\n     log_err ctr();"}, {"sha": "631e3301a93f502e8997ce90f421e1ae1bb2d92a", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -10,7 +10,7 @@ fn test_generic<@T>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(v1: @int, v2: @int) -> bool { ret v1 == v2; }\n+    fn compare_box(&&v1: @int, &&v2: @int) -> bool { ret v1 == v2; }\n     let eq = bind compare_box(_, _);\n     test_generic::<@int>(@1, eq);\n }"}, {"sha": "734c33a3bd4daa4d0fb325269e85766250f7ab62", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -10,7 +10,7 @@ fn test_generic<@T>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(v1: ~int, v2: ~int) -> bool { ret v1 == v2; }\n+    fn compare_box(&&v1: ~int, &&v2: ~int) -> bool { ret v1 == v2; }\n     let eq = bind compare_box(_, _);\n     test_generic::<~int>(~1, eq);\n }"}, {"sha": "528ac23fc300857f9c30d0cf33e31fd81a42f766", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -10,7 +10,7 @@ fn test_generic<@T>(expected: T, eq: compare<T>) {\n }\n \n fn test_bool() {\n-    fn compare_bool(b1: bool, b2: bool) -> bool { ret b1 == b2; }\n+    fn compare_bool(&&b1: bool, &&b2: bool) -> bool { ret b1 == b2; }\n     let eq = bind compare_bool(_, _);\n     test_generic::<bool>(true, eq);\n }"}, {"sha": "b44f3d4f7832bab5122f5f5909afc73a69ae331a", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -10,7 +10,7 @@ fn test_generic<@T>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_vec(v1: @int, v2: @int) -> bool { ret v1 == v2; }\n+    fn compare_vec(&&v1: @int, &&v2: @int) -> bool { ret v1 == v2; }\n     let eq = bind compare_vec(_, _);\n     test_generic::<@int>(@1, eq);\n }"}, {"sha": "5f3e29aba6e0bdfe212056d0e653c7c2dbb51aca", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -10,7 +10,7 @@ fn test_generic<@T>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_vec(v1: ~int, v2: ~int) -> bool { ret v1 == v2; }\n+    fn compare_vec(&&v1: ~int, &&v2: ~int) -> bool { ret v1 == v2; }\n     let eq = bind compare_vec(_, _);\n     test_generic::<~int>(~1, eq);\n }"}, {"sha": "03773bdb19db15f0ed6abbce3d4684139a22e0d3", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -12,7 +12,7 @@ fn test_generic<@T>(expected: T, eq: compare<T>) {\n }\n \n fn test_bool() {\n-    fn compare_bool(b1: bool, b2: bool) -> bool { ret b1 == b2; }\n+    fn compare_bool(&&b1: bool, &&b2: bool) -> bool { ret b1 == b2; }\n     let eq = bind compare_bool(_, _);\n     test_generic::<bool>(true, eq);\n }"}, {"sha": "ff97e564577a33ce035cfcdbf6cf75c302d47e4f", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -10,7 +10,7 @@ fn test_generic<@T>(expected: T, not_expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(v1: @int, v2: @int) -> bool { ret v1 == v2; }\n+    fn compare_box(&&v1: @int, &&v2: @int) -> bool { ret v1 == v2; }\n     let eq = bind compare_box(_, _);\n     test_generic::<@int>(@1, @2, eq);\n }"}, {"sha": "b9512657c4ca1162cf1ac182799f43b81f377375", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -12,7 +12,7 @@ fn test_generic<@T>(expected: T, not_expected: T, eq: compare<T>) {\n }\n \n fn test_bool() {\n-    fn compare_bool(b1: bool, b2: bool) -> bool { ret b1 == b2; }\n+    fn compare_bool(&&b1: bool, &&b2: bool) -> bool { ret b1 == b2; }\n     let eq = bind compare_bool(_, _);\n     test_generic::<bool>(true, false, eq);\n }"}, {"sha": "f177efb7b50d4e3227384f4d5f995ec34275e5d0", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -6,7 +6,7 @@ fn fix<A, @B>(f: fn(fn(A) -> B, A) -> B) -> fn(A) -> B {\n     ret bind fix_help(f, _);\n }\n \n-fn fact_(f: fn(int) -> int, n: int) -> int {\n+fn fact_(f: fn(&&int) -> int, &&n: int) -> int {\n     // fun fact 0 = 1\n     ret if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "7937b6b6f9570d492a590ea3e1d3527bb31f1213", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -6,7 +6,7 @@ fn fix<A, ~B>(f: fn(fn(A) -> B, A) -> B) -> fn(A) -> B {\n     ret bind fix_help(f, _);\n }\n \n-fn fact_(f: fn(int) -> int, n: int) -> int {\n+fn fact_(f: fn(&&int) -> int, &&n: int) -> int {\n     // fun fact 0 = 1\n     ret if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "9dbc5a55d20cffd70364fcfe81d1222806ab9431", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -2,12 +2,12 @@\n \n fn mk() -> int { ret 1; }\n \n-fn chk(a: int) { log a; assert (a == 1); }\n+fn chk(&&a: int) { log a; assert (a == 1); }\n \n fn apply<T>(produce: fn() -> T, consume: fn(T)) { consume(produce()); }\n \n fn main() {\n     let produce: fn() -> int = mk;\n-    let consume: fn(int) = chk;\n+    let consume: fn(&&int) = chk;\n     apply::<int>(produce, consume);\n }"}, {"sha": "18d49018923792e64014b8b62aa1e0a891c697b5", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -2,7 +2,7 @@ resource finish<T>(arg: {val: T, fin: fn(T)}) { arg.fin(arg.val); }\n \n fn main() {\n     let box = @mutable 10;\n-    fn dec_box(i: @mutable int) { *i -= 1; }\n+    fn dec_box(&&i: @mutable int) { *i -= 1; }\n \n     { let i <- finish({val: box, fin: dec_box}); }\n     assert (*box == 9);"}, {"sha": "b1412fc3963f8b519b22cd207c0e9f80fe4addff", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -12,7 +12,7 @@ fn pure_foldl<@T, @U>(ls: list<T>, u: U, f: block(T, U) -> U) -> U {\n // Shows how to use an \"unchecked\" block to call a general\n // fn from a pure fn\n pure fn pure_length<@T>(ls: list<T>) -> uint {\n-    fn count<T>(_t: T, u: uint) -> uint { u + 1u }\n+    fn count<T>(_t: T, &&u: uint) -> uint { u + 1u }\n     unchecked{ pure_foldl(ls, 0u, count) }\n }\n "}, {"sha": "1f4f2d7790e08130a227dcf9c7c1418cbf88c96c", "filename": "src/test/stdtest/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fdeque.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -119,8 +119,8 @@ type reccy = {x: int, y: int, t: taggy};\n \n #[test]\n fn test() {\n-    fn inteq(a: int, b: int) -> bool { ret a == b; }\n-    fn intboxeq(a: @int, b: @int) -> bool { ret a == b; }\n+    fn inteq(&&a: int, &&b: int) -> bool { ret a == b; }\n+    fn intboxeq(&&a: @int, &&b: @int) -> bool { ret a == b; }\n     fn taggyeq(a: taggy, b: taggy) -> bool {\n         alt a {\n           one(a1) { alt b { one(b1) { ret a1 == b1; } _ { ret false; } } }"}, {"sha": "f79db3088b1958daf8a6e709ca256d21d7e2aff3", "filename": "src/test/stdtest/either.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Feither.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -5,16 +5,16 @@ import std::vec::len;\n #[test]\n fn test_either_left() {\n     let val = left(10);\n-    fn f_left(x: int) -> bool { x == 10 }\n-    fn f_right(_x: uint) -> bool { false }\n+    fn f_left(&&x: int) -> bool { x == 10 }\n+    fn f_right(&&_x: uint) -> bool { false }\n     assert (either(f_left, f_right, val));\n }\n \n #[test]\n fn test_either_right() {\n     let val = right(10u);\n-    fn f_left(_x: int) -> bool { false }\n-    fn f_right(x: uint) -> bool { x == 10u }\n+    fn f_left(&&_x: int) -> bool { false }\n+    fn f_right(&&x: uint) -> bool { x == 10u }\n     assert (either(f_left, f_right, val));\n }\n "}, {"sha": "a53132e879c620dc96576acca65fb1dcd9183c01", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -17,15 +17,15 @@ fn test_from_vec() {\n #[test]\n fn test_foldl() {\n     let l = from_vec([0, 1, 2, 3, 4]);\n-    fn add(a: int, b: uint) -> uint { ret (a as uint) + b; }\n+    fn add(&&a: int, &&b: uint) -> uint { ret (a as uint) + b; }\n     let rs = list::foldl(l, 0u, add);\n     assert (rs == 10u);\n }\n \n #[test]\n fn test_find_success() {\n     let l = from_vec([0, 1, 2]);\n-    fn match(i: int) -> option::t<int> {\n+    fn match(&&i: int) -> option::t<int> {\n         ret if i == 2 { option::some(i) } else { option::none::<int> };\n     }\n     let rs = list::find(l, match);\n@@ -35,7 +35,7 @@ fn test_find_success() {\n #[test]\n fn test_find_fail() {\n     let l = from_vec([0, 1, 2]);\n-    fn match(_i: int) -> option::t<int> { ret option::none::<int>; }\n+    fn match(&&_i: int) -> option::t<int> { ret option::none::<int>; }\n     let rs = list::find(l, match);\n     assert (rs == option::none::<int>);\n }"}, {"sha": "18f64bf68997423f85af1d03c4254cce02fa9b43", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -11,7 +11,7 @@ import std::option;\n #[test]\n fn test_simple() {\n     log \"*** starting test_simple\";\n-    fn eq_uint(x: uint, y: uint) -> bool { ret x == y; }\n+    fn eq_uint(&&x: uint, &&y: uint) -> bool { ret x == y; }\n     let hasher_uint: map::hashfn<uint> = util::id;\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hasher_str: map::hashfn<str> = str::hash;\n@@ -83,7 +83,7 @@ fn test_simple() {\n fn test_growth() {\n     log \"*** starting test_growth\";\n     let num_to_insert: uint = 64u;\n-    fn eq_uint(x: uint, y: uint) -> bool { ret x == y; }\n+    fn eq_uint(&&x: uint, &&y: uint) -> bool { ret x == y; }\n     log \"uint -> uint\";\n     let hasher_uint: map::hashfn<uint> = util::id;\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n@@ -157,8 +157,8 @@ fn test_growth() {\n fn test_removal() {\n     log \"*** starting test_removal\";\n     let num_to_insert: uint = 64u;\n-    fn eq(x: uint, y: uint) -> bool { ret x == y; }\n-    fn hash(u: uint) -> uint {\n+    fn eq(&&x: uint, &&y: uint) -> bool { ret x == y; }\n+    fn hash(&&u: uint) -> uint {\n         // This hash function intentionally causes collisions between\n         // consecutive integer pairs.\n "}, {"sha": "e34aac7392829d5edd2d36427ca04809f86df38a", "filename": "src/test/stdtest/qsort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fqsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fqsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -7,7 +7,7 @@ import std::int;\n \n fn check_sort(v1: [mutable int], v2: [mutable int]) {\n     let len = std::vec::len::<int>(v1);\n-    fn ltequal(a: int, b: int) -> bool { ret a <= b; }\n+    fn ltequal(&&a: int, &&b: int) -> bool { ret a <= b; }\n     let f = ltequal;\n     std::sort::quick_sort::<int>(f, v1);\n     let i = 0u;\n@@ -46,7 +46,7 @@ fn test_simple() {\n \n     let expected = [1, 2, 3];\n \n-    fn lteq(a: int, b: int) -> bool { int::le(a, b) }\n+    fn lteq(&&a: int, &&b: int) -> bool { int::le(a, b) }\n     sort::quick_sort(lteq, names);\n \n     let immut_names = vec::from_mut(names);"}, {"sha": "0f86f69af36bdd2daa4472b9bccc3330aee4b521", "filename": "src/test/stdtest/qsort3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fqsort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fqsort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort3.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -3,8 +3,8 @@ use std;\n \n fn check_sort(v1: [mutable int], v2: [mutable int]) {\n     let len = std::vec::len::<int>(v1);\n-    fn lt(a: int, b: int) -> bool { ret a < b; }\n-    fn equal(a: int, b: int) -> bool { ret a == b; }\n+    fn lt(&&a: int, &&b: int) -> bool { ret a < b; }\n+    fn equal(&&a: int, &&b: int) -> bool { ret a == b; }\n     let f1 = lt;\n     let f2 = equal;\n     std::sort::quick_sort3::<int>(f1, f2, v1);"}, {"sha": "ff86042e6b11c8355ef23c387fca3cd1d74084e9", "filename": "src/test/stdtest/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsort.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -3,7 +3,7 @@ use std;\n \n fn check_sort(v1: [int], v2: [int]) {\n     let len = std::vec::len::<int>(v1);\n-    fn lteq(a: int, b: int) -> bool { ret a <= b; }\n+    fn lteq(&&a: int, &&b: int) -> bool { ret a <= b; }\n     let f = lteq;\n     let v3 = std::sort::merge_sort::<int>(f, v1);\n     let i = 0u;"}, {"sha": "1701be37901db82f5dbbfdb0fb026db599a16c9c", "filename": "src/test/stdtest/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftreemap.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -40,7 +40,7 @@ fn traverse_in_order() {\n     insert(m, 1, ());\n \n     let n = 0;\n-    fn t(&n: int, k: int, _v: ()) { assert (n == k); n += 1; }\n+    fn t(&n: int, &&k: int, &&_v: ()) { assert (n == k); n += 1; }\n     traverse(m, bind t(n, _, _));\n }\n "}, {"sha": "5e5de913914aeed78ef260d52283b143b38c687b", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41528dc5438f66c001a521d287be59e9c0d3addf/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=41528dc5438f66c001a521d287be59e9c0d3addf", "patch": "@@ -8,17 +8,17 @@ import std::option::some;\n \n fn square(n: uint) -> uint { ret n * n; }\n \n-fn square_alias(n: uint) -> uint { ret n * n; }\n+fn square_ref(&&n: uint) -> uint { ret n * n; }\n \n-pure fn is_three(n: uint) -> bool { ret n == 3u; }\n+pure fn is_three(&&n: uint) -> bool { ret n == 3u; }\n \n-pure fn is_odd(n: uint) -> bool { ret n % 2u == 1u; }\n+pure fn is_odd(&&n: uint) -> bool { ret n % 2u == 1u; }\n \n-fn square_if_odd(n: uint) -> option::t<uint> {\n+fn square_if_odd(&&n: uint) -> option::t<uint> {\n     ret if n % 2u == 1u { some(n * n) } else { none };\n }\n \n-fn add(x: uint, y: uint) -> uint { ret x + y; }\n+fn add(&&x: uint, &&y: uint) -> uint { ret x + y; }\n \n #[test]\n fn test_unsafe_ptrs() {\n@@ -211,15 +211,15 @@ fn test_grow_set() {\n fn test_map() {\n     // Test on-stack map.\n     let v = [1u, 2u, 3u];\n-    let w = vec::map(square_alias, v);\n+    let w = vec::map(square_ref, v);\n     assert (vec::len(w) == 3u);\n     assert (w[0] == 1u);\n     assert (w[1] == 4u);\n     assert (w[2] == 9u);\n \n     // Test on-heap map.\n     v = [1u, 2u, 3u, 4u, 5u];\n-    w = vec::map(square_alias, v);\n+    w = vec::map(square_ref, v);\n     assert (vec::len(w) == 5u);\n     assert (w[0] == 1u);\n     assert (w[1] == 4u);\n@@ -230,7 +230,7 @@ fn test_map() {\n \n #[test]\n fn test_map2() {\n-    fn times(x: int, y: int) -> int { ret x * y; }\n+    fn times(&&x: int, &&y: int) -> int { ret x * y; }\n     let f = times;\n     let v0 = [1, 2, 3, 4, 5];\n     let v1 = [5, 4, 3, 2, 1];\n@@ -256,12 +256,12 @@ fn test_filter_map() {\n     assert (w[1] == 9u);\n     assert (w[2] == 25u);\n \n-    fn halve(i: int) -> option::t<int> {\n+    fn halve(&&i: int) -> option::t<int> {\n         if i % 2 == 0 {\n             ret option::some::<int>(i / 2);\n         } else { ret option::none::<int>; }\n     }\n-    fn halve_for_sure(i: int) -> int { ret i / 2; }\n+    fn halve_for_sure(&&i: int) -> int { ret i / 2; }\n     let all_even: [int] = [0, 2, 8, 6];\n     let all_odd1: [int] = [1, 7, 3];\n     let all_odd2: [int] = [];\n@@ -335,8 +335,8 @@ fn test_position() {\n \n #[test]\n fn test_position_pred() {\n-    fn less_than_three(i: int) -> bool { ret i < 3; }\n-    fn is_eighteen(i: int) -> bool { ret i == 18; }\n+    fn less_than_three(&&i: int) -> bool { ret i < 3; }\n+    fn is_eighteen(&&i: int) -> bool { ret i == 18; }\n     let v1: [int] = [5, 4, 3, 2, 1];\n     assert (position_pred(less_than_three, v1) == option::some::<uint>(3u));\n     assert (position_pred(is_eighteen, v1) == option::none::<uint>);"}]}