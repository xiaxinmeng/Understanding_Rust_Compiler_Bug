{"sha": "73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "node_id": "C_kwDOAAsO6NoAKDczZTQ5NDkzYmQzMmZmMTJkYmI3MGNkZTdkM2ZlZTljZjFkZWM3Y2Q", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:39:22Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:39:22Z"}, "message": "rough, but appears to work", "tree": {"sha": "cc7ad928135b9988dbedfac29fad3f920ffbd8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc7ad928135b9988dbedfac29fad3f920ffbd8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmILuxoACgkQeO9fUvOM\nSb19jgwAtsODvGI5whM2PMRvWEIMmHOW6tm/UNkGcxsoWfjYbPzy4G9mN4NITyCy\nG/0H2XBt5rG6OtHK2rnCDFPsuqg4PQFDcMg+yR8oFqOvlALmxB3jwPJzrbe610pR\nVCT/sz0yNCSF8BT8Sc2OHqwdNVaeDBS2aDaAnDnXCFkOR26QXggYOpD/ypCDXrbH\nIQyEQNAx8H1bYEL7GdBLSlf7SMhRggzC1ri1r0D5LSeABtFRMZE8uOMLzrZBgzuB\n+2TYl3hDHoEZy5cJv3jHI+UEL4Y/cI0E7ES7fiB0gJ36zmzsNxztuLsP/ZWSLPiE\nx5qGbV34HMthtoikEJ+QoEGV3EN9UN1hHBMkI+MOjIr8DUSWgxeDkymM+VlvyUbO\noS9v5WKGiTx/LnZplW1My4l3xVQ05iVZ9DZOJbGpxkTxCfx1H388ELYho7sstEpN\nNedQEZtpP/8p0zooAeYeEdgqdc3Yq25z4igpB8W6Lw+Oaex72rl0y3JOIX607SvV\nTmvZ+nM9\n=owj4\n-----END PGP SIGNATURE-----", "payload": "tree cc7ad928135b9988dbedfac29fad3f920ffbd8d4\nparent f0210f8a43efefef93dcb9ce0cf34b083fd3d51a\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1644935962 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1644935962 +0000\n\nrough, but appears to work\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "html_url": "https://github.com/rust-lang/rust/commit/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0210f8a43efefef93dcb9ce0cf34b083fd3d51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0210f8a43efefef93dcb9ce0cf34b083fd3d51a", "html_url": "https://github.com/rust-lang/rust/commit/f0210f8a43efefef93dcb9ce0cf34b083fd3d51a"}], "stats": {"total": 96, "additions": 81, "deletions": 15}, "files": [{"sha": "1b322acdc616412d1fa5e1436bdb0cbf16764c1f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -5,7 +5,7 @@ exclude = [\"crates/proc_macro_test/imp\"]\n [profile.dev]\n # Disabling debug info speeds up builds a bunch,\n # and we don't rely on it for debugging that much.\n-debug = 0\n+debug = 2\n \n [profile.dev.package]\n # These speed up local tests."}, {"sha": "19402c1c258744a0ada3c4baae3e6a02e770d033", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -22,7 +22,9 @@ use crate::{\n \n impl HirDisplay for Function {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        println!(\"Formatting for Function\");\n         let data = f.db.function_data(self.id);\n+        println!(\"data: {:?}\", &data);\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n         if data.is_default() {\n             write!(f, \"default \")?;\n@@ -461,13 +463,15 @@ impl HirDisplay for Trait {\n \n impl HirDisplay for TypeAlias {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        println!(\"Formatting for TypeAlias\");\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n         let data = f.db.type_alias_data(self.id);\n         write!(f, \"type {}\", data.name)?;\n         if !data.bounds.is_empty() {\n             write!(f, \": \")?;\n             f.write_joined(&data.bounds, \" + \")?;\n         }\n+        println!(\"type_ref: {:?}\", &data.type_ref);\n         if let Some(ty) = &data.type_ref {\n             write!(f, \" = \")?;\n             ty.hir_fmt(f)?;"}, {"sha": "4d57e484c1f36e091073ab56495ac7073bbbc46d", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -496,11 +496,11 @@ impl<'a> Printer<'a> {\n                 let (ret, args) =\n                     args_and_ret.split_last().expect(\"TypeRef::Fn is missing return type\");\n                 w!(self, \"fn(\");\n-                for (i, arg) in args.iter().enumerate() {\n+                for (i, (name, typeref)) in args.iter().enumerate() {\n                     if i != 0 {\n                         w!(self, \", \");\n                     }\n-                    self.print_type_ref(arg);\n+                    self.print_type_ref(&typeref);\n                 }\n                 if *varargs {\n                     if !args.is_empty() {\n@@ -509,7 +509,7 @@ impl<'a> Printer<'a> {\n                     w!(self, \"...\");\n                 }\n                 w!(self, \") -> \");\n-                self.print_type_ref(ret);\n+                self.print_type_ref(&ret.1);\n             }\n             TypeRef::Macro(_ast_id) => {\n                 w!(self, \"<macro>\");"}, {"sha": "3c2e036ab95d7906ea2cd65edf19f627b94ad124", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -3,7 +3,7 @@\n \n use hir_expand::{name::Name, AstId, InFile};\n use std::convert::TryInto;\n-use syntax::ast;\n+use syntax::{ast, AstNode};\n \n use crate::{body::LowerCtx, intern::Interned, path::Path};\n \n@@ -89,7 +89,7 @@ pub enum TypeRef {\n     Array(Box<TypeRef>, ConstScalar),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n-    Fn(Vec<TypeRef>, bool /*varargs*/),\n+    Fn(Vec<(Option<String>, TypeRef)>, bool /*varargs*/),\n     // For\n     ImplTrait(Vec<Interned<TypeBound>>),\n     DynTrait(Vec<Interned<TypeBound>>),\n@@ -188,11 +188,16 @@ impl TypeRef {\n                         is_varargs = param.dotdotdot_token().is_some();\n                     }\n \n-                    pl.params().map(|p| p.ty()).map(|it| TypeRef::from_ast_opt(ctx, it)).collect()\n+                    pl.params().map(|p| (p.pat(), p.ty())).map(|it| {\n+                        println!(\"{it:?}\");\n+                        let type_ref = TypeRef::from_ast_opt(ctx, it.1);\n+                        let name = it.0.unwrap().syntax().text().to_string();\n+                        (Some(name), type_ref)\n+                    }).collect()\n                 } else {\n                     Vec::new()\n                 };\n-                params.push(ret_ty);\n+                params.push((None, ret_ty));\n                 TypeRef::Fn(params, is_varargs)\n             }\n             // for types are close enough for our purposes to the inner type for now...\n@@ -230,7 +235,10 @@ impl TypeRef {\n         fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n             f(type_ref);\n             match type_ref {\n-                TypeRef::Fn(types, _) | TypeRef::Tuple(types) => {\n+                TypeRef::Fn(types, _) => {\n+                    types.iter().for_each(|t| go(&t.1, f))\n+                }\n+                TypeRef::Tuple(types) => {\n                     types.iter().for_each(|t| go(t, f))\n                 }\n                 TypeRef::RawPtr(type_ref, _)"}, {"sha": "bca628a5c8864d6fb3f1bce939fe6504db0201ee", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -239,6 +239,7 @@ where\n     T: HirDisplay,\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        println!(\"formatting..\");\n         match self.t.hir_fmt(&mut HirFormatter {\n             db: self.db,\n             fmt: f,\n@@ -341,6 +342,9 @@ impl HirDisplay for Ty {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n+        let interner_kind = self.kind(Interner);\n+        println!(\"interner kind: {interner_kind:?}\");\n+\n         match self.kind(Interner) {\n             TyKind::Never => write!(f, \"!\")?,\n             TyKind::Str => write!(f, \"str\")?,\n@@ -1094,15 +1098,27 @@ impl HirDisplay for TypeRef {\n                 inner.hir_fmt(f)?;\n                 write!(f, \"]\")?;\n             }\n-            TypeRef::Fn(tys, is_varargs) => {\n-                // FIXME: Function pointer qualifiers.\n+            TypeRef::Fn(parameters, is_varargs) => {\n                 write!(f, \"fn(\")?;\n-                f.write_joined(&tys[..tys.len() - 1], \", \")?;\n+                for index in 0..parameters.len() - 1 {\n+                    let (param_name,param_type) = &parameters[index];\n+                    match param_name {\n+                        Some(name) => {\n+                            write!(f, \"{}: \", name)?;\n+                            param_type.hir_fmt(f)?;\n+                        },\n+                        None => write!(f, \" : {:?}\", param_type)?,\n+                    };\n+\n+                    if index != parameters.len() - 2 {\n+                        write!(f, \", \")?;\n+                    }\n+                }\n                 if *is_varargs {\n-                    write!(f, \"{}...\", if tys.len() == 1 { \"\" } else { \", \" })?;\n+                    write!(f, \"{}...\", if parameters.len() == 1 { \"\" } else { \", \" })?;\n                 }\n                 write!(f, \")\")?;\n-                let ret_ty = tys.last().unwrap();\n+                let ret_ty = &parameters.last().unwrap().1;\n                 match ret_ty {\n                     TypeRef::Tuple(tup) if tup.is_empty() => {}\n                     _ => {"}, {"sha": "4873693e8c759ffb1fa6114fcc1da5e96e573cf7", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -201,7 +201,7 @@ impl<'a> TyLoweringContext<'a> {\n             TypeRef::Placeholder => TyKind::Error.intern(Interner),\n             TypeRef::Fn(params, is_varargs) => {\n                 let substs = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-                    Substitution::from_iter(Interner, params.iter().map(|tr| ctx.lower_ty(tr)))\n+                    Substitution::from_iter(Interner, params.iter().map(|tr| ctx.lower_ty(&tr.1)))\n                 });\n                 TyKind::Function(FnPointer {\n                     num_binders: 0, // FIXME lower `for<'a> fn()` correctly"}, {"sha": "550e1c154309f2b58b911d7940fb25f20ffad78a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -172,6 +172,7 @@ pub(crate) fn hover_for_definition(\n         Definition::BuiltinType(_) => Some(FamousDefs(sema, sema.scope(node).krate())),\n         _ => None,\n     };\n+    println!(\"definition: {definition:?}\");\n     if let Some(markup) = render::definition(sema.db, definition, famous_defs.as_ref(), config) {\n         let mut res = HoverResult::default();\n         res.markup = render::process_markup(sema.db, definition, &markup, config);"}, {"sha": "0a5c335661d6b8ea7f8cb32247575a2dafe88aa8", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -411,6 +411,7 @@ where\n     D: HasAttrs + HirDisplay,\n {\n     let label = def.display(db).to_string();\n+    println!(\"label: {label:?}\");\n     let docs = def.attrs(db).docs();\n     (label, docs)\n }"}, {"sha": "ed9f6d507c6ae0682912ba3e183ccde013f7033e", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=73e49493bd32ff12dbb70cde7d3fee9cf1dec7cd", "patch": "@@ -1310,6 +1310,42 @@ fn test_hover_function_show_qualifiers() {\n     );\n }\n \n+#[test]\n+fn test_hover_function_show_types() {\n+    check(\n+        r#\"fn foo$0(a: i32, b:i32) -> i32 { 0 }\"#,\n+        expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                fn foo(a: i32, b: i32) -> i32\n+                ```\n+            \"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_hover_function_pointer_show_types() {\n+    check(\n+        r#\"type foo$0 = fn(a: i32, b: i32) -> i32;\"#,\n+        expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type foo = fn(a: i32, b: i32) -> i32\n+                ```\n+            \"#]],\n+    );\n+}\n+\n #[test]\n fn test_hover_trait_show_qualifiers() {\n     check_actions("}]}