{"sha": "1895716c885eba9aae710f80f4c29eb2b424c6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OTU3MTZjODg1ZWJhOWFhZTcxMGY4MGY0YzI5ZWIyYjQyNGM2ZjA=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-02T14:27:57Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-29T12:29:20Z"}, "message": "Do not show references CodeLens for tests.", "tree": {"sha": "f18ed9c1032465e8c715a5fdc66c7373b94bd1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f18ed9c1032465e8c715a5fdc66c7373b94bd1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1895716c885eba9aae710f80f4c29eb2b424c6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1895716c885eba9aae710f80f4c29eb2b424c6f0", "html_url": "https://github.com/rust-lang/rust/commit/1895716c885eba9aae710f80f4c29eb2b424c6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1895716c885eba9aae710f80f4c29eb2b424c6f0/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fbd6905014b90aa2efc1f67b92f31845011d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fbd6905014b90aa2efc1f67b92f31845011d76", "html_url": "https://github.com/rust-lang/rust/commit/06fbd6905014b90aa2efc1f67b92f31845011d76"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "ca91b98cf78557531ad06a137fcb754c323e0854", "filename": "crates/ide/src/fn_references.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1895716c885eba9aae710f80f4c29eb2b424c6f0/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1895716c885eba9aae710f80f4c29eb2b424c6f0/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=1895716c885eba9aae710f80f4c29eb2b424c6f0", "patch": "@@ -0,0 +1,21 @@\n+use hir::Semantics;\n+use ide_db::RootDatabase;\n+use syntax::{ast, ast::NameOwner, AstNode, SyntaxNode};\n+\n+use crate::{runnables::has_test_related_attribute, FileId, FileRange};\n+\n+pub(crate) fn find_all_methods(db: &RootDatabase, file_id: FileId) -> Vec<FileRange> {\n+    let sema = Semantics::new(db);\n+    let source_file = sema.parse(file_id);\n+    source_file.syntax().descendants().filter_map(|it| method_range(it, file_id)).collect()\n+}\n+\n+pub(crate) fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n+    ast::Fn::cast(item).and_then(|fn_def|{\n+        if has_test_related_attribute(&fn_def) {\n+            None\n+        } else {\n+            fn_def.name().map(|name| FileRange{ file_id, range: name.syntax().text_range() })\n+        }\n+    })\n+}"}, {"sha": "31f2bcba35eba8dfff1c95db3154b36aac690c40", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1895716c885eba9aae710f80f4c29eb2b424c6f0/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1895716c885eba9aae710f80f4c29eb2b424c6f0/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=1895716c885eba9aae710f80f4c29eb2b424c6f0", "patch": "@@ -38,6 +38,7 @@ mod join_lines;\n mod matching_brace;\n mod parent_module;\n mod references;\n+mod fn_references;\n mod runnables;\n mod status;\n mod syntax_highlighting;\n@@ -56,7 +57,7 @@ use ide_db::{\n     symbol_index::{self, FileSymbol},\n     LineIndexDatabase,\n };\n-use syntax::{SourceFile, SyntaxKind, TextRange, TextSize};\n+use syntax::{SourceFile, TextRange, TextSize};\n \n use crate::display::ToNav;\n \n@@ -369,19 +370,9 @@ impl Analysis {\n         })\n     }\n \n-    /// Finds all methods and free functions for the file.\n+    /// Finds all methods and free functions for the file. Does not return tests!\n     pub fn find_all_methods(&self, file_id: FileId) -> Cancelable<Vec<FileRange>> {\n-        let res = self\n-            .file_structure(file_id)?\n-            .into_iter()\n-            .filter(|it| match it.kind {\n-                SyntaxKind::FN => true,\n-                _ => false,\n-            })\n-            .filter_map(|it| Some(FileRange { file_id, range: it.navigation_range }))\n-            .collect();\n-\n-        Ok(res)\n+        self.with_db(|db| fn_references::find_all_methods(db, file_id))\n     }\n \n     /// Returns a short text describing element at position."}, {"sha": "cfeff40c1a2a54ea5ccc681198c65172c74ba49d", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1895716c885eba9aae710f80f4c29eb2b424c6f0/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1895716c885eba9aae710f80f4c29eb2b424c6f0/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=1895716c885eba9aae710f80f4c29eb2b424c6f0", "patch": "@@ -203,7 +203,7 @@ impl TestAttr {\n ///\n /// It may produce false positives, for example, `#[wasm_bindgen_test]` requires a different command to run the test,\n /// but it's better than not to have the runnables for the tests at all.\n-fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n+pub(crate) fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n     fn_def\n         .attrs()\n         .filter_map(|attr| attr.path())"}]}