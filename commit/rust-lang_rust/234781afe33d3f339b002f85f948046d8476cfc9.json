{"sha": "234781afe33d3f339b002f85f948046d8476cfc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDc4MWFmZTMzZDNmMzM5YjAwMmY4NWY5NDgwNDZkODQ3NmNmYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-07T20:23:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-07T20:23:23Z"}, "message": "Auto merge of #82285 - nhwn:nonzero-debug, r=nagisa\n\nUse u32 over Option<u32> in DebugLoc\n\n~~Changes `Option<u32>` fields in `DebugLoc` to `Option<NonZeroU32>`. Since the respective fields (`line` and `col`) are guaranteed to be 1-based, this layout optimization is a freebie.~~\n\nEDIT: Changes `Option<u32>` fields in `DebugLoc` to `u32`. As `@bugadani` pointed out, an `Option<NonZeroU32>` is probably an unnecessary layer of abstraction since the `None` variant is always used as `UNKNOWN_LINE_NUMBER` (which is just `0`).  Also, `SourceInfo` in `metadata.rs` already uses a `u32` instead of an `Option<u32>` to encode the same information, so I think this change is warranted.\n\nSince `@jyn514` raised some concerns over measuring performance in a similar PR (#82255), does this need a perf run?", "tree": {"sha": "e5830366b5a0deaa1da8e05565a5e181f222c393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5830366b5a0deaa1da8e05565a5e181f222c393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/234781afe33d3f339b002f85f948046d8476cfc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/234781afe33d3f339b002f85f948046d8476cfc9", "html_url": "https://github.com/rust-lang/rust/commit/234781afe33d3f339b002f85f948046d8476cfc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/234781afe33d3f339b002f85f948046d8476cfc9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ec64ccf31883cd2c28d045912a76179c0c6ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ec64ccf31883cd2c28d045912a76179c0c6ed2", "html_url": "https://github.com/rust-lang/rust/commit/66ec64ccf31883cd2c28d045912a76179c0c6ed2"}, {"sha": "408d4027d0c469be4ab442b8d0223565cdb09229", "url": "https://api.github.com/repos/rust-lang/rust/commits/408d4027d0c469be4ab442b8d0223565cdb09229", "html_url": "https://github.com/rust-lang/rust/commit/408d4027d0c469be4ab442b8d0223565cdb09229"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "c2725b83f50d62f32a6d9f1180da76e25fc010cc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/234781afe33d3f339b002f85f948046d8476cfc9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234781afe33d3f339b002f85f948046d8476cfc9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=234781afe33d3f339b002f85f948046d8476cfc9", "patch": "@@ -1,4 +1,4 @@\n-use super::metadata::{file_metadata, UNKNOWN_COLUMN_NUMBER, UNKNOWN_LINE_NUMBER};\n+use super::metadata::file_metadata;\n use super::utils::DIB;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext};\n use rustc_codegen_ssa::traits::*;\n@@ -102,8 +102,8 @@ fn make_mir_scope(\n                 DIB(cx),\n                 parent_scope.dbg_scope.unwrap(),\n                 file_metadata,\n-                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n-                loc.col.unwrap_or(UNKNOWN_COLUMN_NUMBER),\n+                loc.line,\n+                loc.col,\n             )\n         },\n     };"}, {"sha": "d5b32e58cc397d0508f5fd88cd803cc5eff3eed0", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/234781afe33d3f339b002f85f948046d8476cfc9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234781afe33d3f339b002f85f948046d8476cfc9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=234781afe33d3f339b002f85f948046d8476cfc9", "patch": "@@ -1842,10 +1842,7 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n                     .span;\n                 if !span.is_dummy() {\n                     let loc = cx.lookup_debug_loc(span.lo());\n-                    return Some(SourceInfo {\n-                        file: file_metadata(cx, &loc.file),\n-                        line: loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n-                    });\n+                    return Some(SourceInfo { file: file_metadata(cx, &loc.file), line: loc.line });\n                 }\n             }\n             _ => {}\n@@ -2484,7 +2481,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n         let loc = cx.lookup_debug_loc(span.lo());\n         (file_metadata(cx, &loc.file), loc.line)\n     } else {\n-        (unknown_file_metadata(cx), None)\n+        (unknown_file_metadata(cx), UNKNOWN_LINE_NUMBER)\n     };\n \n     let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n@@ -2507,7 +2504,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n             linkage_name.as_ptr().cast(),\n             linkage_name.len(),\n             file_metadata,\n-            line_number.unwrap_or(UNKNOWN_LINE_NUMBER),\n+            line_number,\n             type_metadata,\n             is_local_to_unit,\n             global,"}, {"sha": "440e4d505fc920d4becd8b63a9bbb37c2b7993f5", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/234781afe33d3f339b002f85f948046d8476cfc9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234781afe33d3f339b002f85f948046d8476cfc9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=234781afe33d3f339b002f85f948046d8476cfc9", "patch": "@@ -224,9 +224,9 @@ pub struct DebugLoc {\n     /// Information about the original source file.\n     pub file: Lrc<SourceFile>,\n     /// The (1-based) line number.\n-    pub line: Option<u32>,\n+    pub line: u32,\n     /// The (1-based) column number.\n-    pub col: Option<u32>,\n+    pub col: u32,\n }\n \n impl CodegenCx<'ll, '_> {\n@@ -243,16 +243,16 @@ impl CodegenCx<'ll, '_> {\n                 let line = (line + 1) as u32;\n                 let col = (pos - line_pos).to_u32() + 1;\n \n-                (file, Some(line), Some(col))\n+                (file, line, col)\n             }\n-            Err(file) => (file, None, None),\n+            Err(file) => (file, UNKNOWN_LINE_NUMBER, UNKNOWN_COLUMN_NUMBER),\n         };\n \n         // For MSVC, omit the column number.\n         // Otherwise, emit it. This mimics clang behaviour.\n         // See discussion in https://github.com/rust-lang/rust/issues/42921\n         if self.sess().target.is_like_msvc {\n-            DebugLoc { file, line, col: None }\n+            DebugLoc { file, line, col: UNKNOWN_COLUMN_NUMBER }\n         } else {\n             DebugLoc { file, line, col }\n         }\n@@ -358,9 +358,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 linkage_name.as_ptr().cast(),\n                 linkage_name.len(),\n                 file_metadata,\n-                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                loc.line,\n                 function_type_metadata,\n-                scope_line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                scope_line,\n                 flags,\n                 spflags,\n                 maybe_definition_llfn,\n@@ -550,14 +550,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     ) -> &'ll DILocation {\n         let DebugLoc { line, col, .. } = self.lookup_debug_loc(span.lo());\n \n-        unsafe {\n-            llvm::LLVMRustDIBuilderCreateDebugLocation(\n-                line.unwrap_or(UNKNOWN_LINE_NUMBER),\n-                col.unwrap_or(UNKNOWN_COLUMN_NUMBER),\n-                scope,\n-                inlined_at,\n-            )\n-        }\n+        unsafe { llvm::LLVMRustDIBuilderCreateDebugLocation(line, col, scope, inlined_at) }\n     }\n \n     fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value) {\n@@ -606,7 +599,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 name.as_ptr().cast(),\n                 name.len(),\n                 file_metadata,\n-                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                loc.line,\n                 type_metadata,\n                 true,\n                 DIFlags::FlagZero,"}]}