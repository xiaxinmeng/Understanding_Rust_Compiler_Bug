{"sha": "b196bec2362b1e17b15635da12cea173315e2b8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTZiZWMyMzYyYjFlMTdiMTU2MzVkYTEyY2VhMTczMzE1ZTJiOGM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-23T01:33:06Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-23T01:39:15Z"}, "message": "Add comment and remove obsolete special case", "tree": {"sha": "15152b483547f9601b03a82e84b70f2a33600945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15152b483547f9601b03a82e84b70f2a33600945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b196bec2362b1e17b15635da12cea173315e2b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b196bec2362b1e17b15635da12cea173315e2b8c", "html_url": "https://github.com/rust-lang/rust/commit/b196bec2362b1e17b15635da12cea173315e2b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b196bec2362b1e17b15635da12cea173315e2b8c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bf282d9be6a0917f950e83f1856e1c5ede1a33", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bf282d9be6a0917f950e83f1856e1c5ede1a33", "html_url": "https://github.com/rust-lang/rust/commit/f7bf282d9be6a0917f950e83f1856e1c5ede1a33"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "a470c4547851f98cb8c1352eec045dda9811ee95", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b196bec2362b1e17b15635da12cea173315e2b8c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b196bec2362b1e17b15635da12cea173315e2b8c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=b196bec2362b1e17b15635da12cea173315e2b8c", "patch": "@@ -1018,6 +1018,7 @@ macro_rules! visit_place_fns {\n \n             if !place.projection.is_empty() {\n                 if context.is_use() {\n+                    // ^ Only change the context if it is a real use, not a \"use\" in debuginfo.\n                     context = if context.is_mutating_use() {\n                         PlaceContext::MutatingUse(MutatingUseContext::Projection)\n                     } else {"}, {"sha": "037c446d82f59237d68255af27fe405c1209f07b", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b196bec2362b1e17b15635da12cea173315e2b8c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b196bec2362b1e17b15635da12cea173315e2b8c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=b196bec2362b1e17b15635da12cea173315e2b8c", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n     AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceRef,\n-    Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n+    Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeFoldable};\n@@ -198,12 +198,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_var_debug_info(&mut self, var_debug_info: &VarDebugInfo<'tcx>) {\n-        // Debuginfo can contain field projections, which count as a use of the base local. Skip\n-        // debuginfo so that we avoid the storage liveness assertion in that case.\n-        self.visit_source_info(&var_debug_info.source_info);\n-    }\n-\n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         // This check is somewhat expensive, so only run it when -Zvalidate-mir is passed.\n         if self.tcx.sess.opts.debugging_opts.validate_mir {"}]}