{"sha": "bfb556f97d47689ac110373de4986ce14fd52d30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjU1NmY5N2Q0NzY4OWFjMTEwMzczZGU0OTg2Y2UxNGZkNTJkMzA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:06:31Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:25Z"}, "message": "Move empty_match check after usefulness check", "tree": {"sha": "78dec50608e41cd934d1a94728b365c16bdda7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78dec50608e41cd934d1a94728b365c16bdda7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb556f97d47689ac110373de4986ce14fd52d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb556f97d47689ac110373de4986ce14fd52d30", "html_url": "https://github.com/rust-lang/rust/commit/bfb556f97d47689ac110373de4986ce14fd52d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb556f97d47689ac110373de4986ce14fd52d30/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6dc2b1de41971fc093c10180a405836d34ada5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6dc2b1de41971fc093c10180a405836d34ada5", "html_url": "https://github.com/rust-lang/rust/commit/3e6dc2b1de41971fc093c10180a405836d34ada5"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "4b451ad81c33556ad6195ad6ae5a91c64aff5bb8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfb556f97d47689ac110373de4986ce14fd52d30/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb556f97d47689ac110373de4986ce14fd52d30/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=bfb556f97d47689ac110373de4986ce14fd52d30", "patch": "@@ -1220,6 +1220,8 @@ impl<'tcx> Witness<'tcx> {\n ///\n /// We make sure to omit constructors that are statically impossible. E.g., for\n /// `Option<!>`, we do not include `Some(_)` in the returned list of constructors.\n+/// Invariant: this returns an empty `Vec` if and only if the type is uninhabited (as determined by\n+/// `cx.is_uninhabited()`).\n fn all_constructors<'a, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     pcx: PatCtxt<'tcx>,"}, {"sha": "d29169cb341083a8dc82c4a463da5c6a3669f5e4", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 37, "deletions": 41, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bfb556f97d47689ac110373de4986ce14fd52d30/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb556f97d47689ac110373de4986ce14fd52d30/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=bfb556f97d47689ac110373de4986ce14fd52d30", "patch": "@@ -438,56 +438,52 @@ fn check_exhaustive<'p, 'tcx>(\n     // If the match has no arms, check whether the scrutinee is uninhabited.\n     // Note: An empty match isn't the same as an empty matrix for diagnostics purposes, since an\n     // empty matrix can occur when there are arms, if those arms all have guards.\n-    if is_empty_match {\n-        let scrutinee_is_visibly_uninhabited = if cx.tcx.features().exhaustive_patterns {\n-            let module = cx.tcx.hir().get_module_parent(hir_id);\n-            cx.tcx.is_ty_uninhabited_from(module, scrut_ty)\n-        } else {\n-            match scrut_ty.kind {\n-                ty::Never => true,\n-                ty::Adt(def, _) if def.is_enum() => {\n-                    def.variants.is_empty() && !cx.is_foreign_non_exhaustive_enum(scrut_ty)\n-                }\n-                _ => false,\n-            }\n-        };\n-        if scrutinee_is_visibly_uninhabited {\n-            // If the type *is* uninhabited, it's vacuously exhaustive.\n-            // This early return is only needed here because in the absence of the\n-            // `exhaustive_patterns` feature, empty matches are not detected by `is_useful`\n-            // to exhaustively match uninhabited types.\n-            return;\n-        } else {\n-            // We know the type is inhabited, so this must be wrong\n-            let non_empty_enum = match scrut_ty.kind {\n-                ty::Adt(def, _) => def.is_enum() && !def.variants.is_empty(),\n-                _ => false,\n-            };\n-\n-            if non_empty_enum {\n-                // Continue to the normal code path to display missing variants.\n-            } else {\n-                let mut err = create_e0004(\n-                    cx.tcx.sess,\n-                    sp,\n-                    format!(\"non-exhaustive patterns: type `{}` is non-empty\", scrut_ty),\n-                );\n-                err.help(\n-                    \"ensure that all possible cases are being handled, \\\n-                     possibly by adding wildcards or more match arms\",\n-                );\n-                adt_defined_here(cx, &mut err, scrut_ty, &[]);\n-                err.emit();\n-                return;\n+    let scrutinee_is_visibly_uninhabited = if cx.tcx.features().exhaustive_patterns {\n+        let module = cx.tcx.hir().get_module_parent(hir_id);\n+        cx.tcx.is_ty_uninhabited_from(module, scrut_ty)\n+    } else {\n+        match scrut_ty.kind {\n+            ty::Never => true,\n+            ty::Adt(def, _) if def.is_enum() => {\n+                def.variants.is_empty() && !cx.is_foreign_non_exhaustive_enum(scrut_ty)\n             }\n+            _ => false,\n         }\n+    };\n+    if is_empty_match && scrutinee_is_visibly_uninhabited {\n+        // If the type *is* uninhabited, it's vacuously exhaustive.\n+        // This early return is only needed here because in the absence of the\n+        // `exhaustive_patterns` feature, empty matches are not detected by `is_useful`\n+        // to exhaustively match uninhabited types.\n+        return;\n     }\n \n     let witnesses = match check_not_useful(cx, scrut_ty, matrix, hir_id) {\n         Ok(_) => return,\n         Err(err) => err,\n     };\n \n+    let non_empty_enum = match scrut_ty.kind {\n+        ty::Adt(def, _) => def.is_enum() && !def.variants.is_empty(),\n+        _ => false,\n+    };\n+    // In the case of an empty match, replace the '`_` not covered' diagnostic with something more\n+    // informative.\n+    if is_empty_match && !non_empty_enum {\n+        let mut err = create_e0004(\n+            cx.tcx.sess,\n+            sp,\n+            format!(\"non-exhaustive patterns: type `{}` is non-empty\", scrut_ty),\n+        );\n+        err.help(\n+            \"ensure that all possible cases are being handled, \\\n+             possibly by adding wildcards or more match arms\",\n+        );\n+        adt_defined_here(cx, &mut err, scrut_ty, &[]);\n+        err.emit();\n+        return;\n+    }\n+\n     let joined_patterns = joined_uncovered_patterns(&witnesses);\n     let mut err = create_e0004(\n         cx.tcx.sess,"}]}