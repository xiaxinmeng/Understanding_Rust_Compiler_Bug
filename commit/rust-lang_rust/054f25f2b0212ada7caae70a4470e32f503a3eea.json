{"sha": "054f25f2b0212ada7caae70a4470e32f503a3eea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NGYyNWYyYjAyMTJhZGE3Y2FhZTcwYTQ0NzBlMzJmNTAzYTNlZWE=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-06T02:31:24Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-06T02:31:24Z"}, "message": "Convert all vectors to a single type", "tree": {"sha": "17ba7eebb21db3471a9210fdb93ad93b20dbffae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ba7eebb21db3471a9210fdb93ad93b20dbffae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/054f25f2b0212ada7caae70a4470e32f503a3eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/054f25f2b0212ada7caae70a4470e32f503a3eea", "html_url": "https://github.com/rust-lang/rust/commit/054f25f2b0212ada7caae70a4470e32f503a3eea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/054f25f2b0212ada7caae70a4470e32f503a3eea/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c36d17de4d87f5baba95b13d2b1ec70e652f0fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c36d17de4d87f5baba95b13d2b1ec70e652f0fe4", "html_url": "https://github.com/rust-lang/rust/commit/c36d17de4d87f5baba95b13d2b1ec70e652f0fe4"}], "stats": {"total": 171, "additions": 101, "deletions": 70}, "files": [{"sha": "ea1a732f203505b99747138c12398a9a05fd988f", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=054f25f2b0212ada7caae70a4470e32f503a3eea", "patch": "@@ -12,9 +12,85 @@ pub use uint::*;\n // Vectors of pointers are not for public use at the current time.\n pub(crate) mod ptr;\n \n+use crate::{LaneCount, SupportedLaneCount};\n+\n+/// A SIMD vector of `LANES` elements of type `Element`.\n+#[repr(simd)]\n+pub struct Simd<Element, const LANES: usize>([Element; LANES])\n+where\n+    Element: SimdElement,\n+    LaneCount<LANES>: SupportedLaneCount;\n+\n mod sealed {\n     pub trait Sealed {}\n }\n+use sealed::Sealed;\n+\n+/// Marker trait for types that may be used as SIMD vector elements.\n+pub unsafe trait SimdElement: Sealed {\n+    /// The mask element type corresponding to this element type.\n+    type Mask: SimdElement;\n+}\n+\n+impl Sealed for u8 {}\n+unsafe impl SimdElement for u8 {\n+    type Mask = u8;\n+}\n+\n+impl Sealed for u16 {}\n+unsafe impl SimdElement for u16 {\n+    type Mask = u16;\n+}\n+\n+impl Sealed for u32 {}\n+unsafe impl SimdElement for u32 {\n+    type Mask = u32;\n+}\n+\n+impl Sealed for u64 {}\n+unsafe impl SimdElement for u64 {\n+    type Mask = u64;\n+}\n+\n+impl Sealed for usize {}\n+unsafe impl SimdElement for usize {\n+    type Mask = usize;\n+}\n+\n+impl Sealed for i8 {}\n+unsafe impl SimdElement for i8 {\n+    type Mask = i8;\n+}\n+\n+impl Sealed for i16 {}\n+unsafe impl SimdElement for i16 {\n+    type Mask = i16;\n+}\n+\n+impl Sealed for i32 {}\n+unsafe impl SimdElement for i32 {\n+    type Mask = i32;\n+}\n+\n+impl Sealed for i64 {}\n+unsafe impl SimdElement for i64 {\n+    type Mask = i64;\n+}\n+\n+impl Sealed for isize {}\n+unsafe impl SimdElement for isize {\n+    type Mask = isize;\n+}\n+\n+impl Sealed for f32 {}\n+unsafe impl SimdElement for f32 {\n+    type Mask = i32;\n+}\n+\n+impl Sealed for f64 {}\n+unsafe impl SimdElement for f64 {\n+    type Mask = i64;\n+}\n \n /// A representation of a vector as an \"array\" with indices, implementing\n /// operations applicable to any vector type based solely on \"having lanes\","}, {"sha": "231fe590ada5d9c097408f48207548b0ab3af27d", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=054f25f2b0212ada7caae70a4470e32f503a3eea", "patch": "@@ -187,19 +187,12 @@ macro_rules! impl_float_vector {\n }\n \n /// A SIMD vector of containing `LANES` `f32` values.\n-#[repr(simd)]\n-pub struct SimdF32<const LANES: usize>([f32; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n-\n-impl_float_vector! { SimdF32, f32, SimdU32, Mask32, SimdI32 }\n+pub type SimdF32<const LANES: usize> = crate::Simd<f32, LANES>;\n \n /// A SIMD vector of containing `LANES` `f64` values.\n-#[repr(simd)]\n-pub struct SimdF64<const LANES: usize>([f64; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n+pub type SimdF64<const LANES: usize> = crate::Simd<f64, LANES>;\n \n+impl_float_vector! { SimdF32, f32, SimdU32, Mask32, SimdI32 }\n impl_float_vector! { SimdF64, f64, SimdU64, Mask64, SimdI64 }\n \n /// Vector of two `f32` values"}, {"sha": "88a17daa2f4bd8855af48e5685442dcf92898a96", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=054f25f2b0212ada7caae70a4470e32f503a3eea", "patch": "@@ -62,44 +62,25 @@ macro_rules! impl_integer_vector {\n     }\n }\n \n-/// A SIMD vector of containing `LANES` `isize` values.\n-#[repr(simd)]\n-pub struct SimdIsize<const LANES: usize>([isize; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n-\n-impl_integer_vector! { SimdIsize, isize, MaskSize, SimdIsize }\n+/// A SIMD vector of containing `LANES` `i8` values.\n+pub type SimdI8<const LANES: usize> = crate::Simd<i8, LANES>;\n \n /// A SIMD vector of containing `LANES` `i16` values.\n-#[repr(simd)]\n-pub struct SimdI16<const LANES: usize>([i16; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n-\n-impl_integer_vector! { SimdI16, i16, Mask16, SimdI16 }\n+pub type SimdI16<const LANES: usize> = crate::Simd<i16, LANES>;\n \n /// A SIMD vector of containing `LANES` `i32` values.\n-#[repr(simd)]\n-pub struct SimdI32<const LANES: usize>([i32; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n-\n-impl_integer_vector! { SimdI32, i32, Mask32, SimdI32 }\n+pub type SimdI32<const LANES: usize> = crate::Simd<i32, LANES>;\n \n /// A SIMD vector of containing `LANES` `i64` values.\n-#[repr(simd)]\n-pub struct SimdI64<const LANES: usize>([i64; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n+pub type SimdI64<const LANES: usize> = crate::Simd<i64, LANES>;\n \n-impl_integer_vector! { SimdI64, i64, Mask64, SimdI64 }\n-\n-/// A SIMD vector of containing `LANES` `i8` values.\n-#[repr(simd)]\n-pub struct SimdI8<const LANES: usize>([i8; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n+/// A SIMD vector of containing `LANES` `isize` values.\n+pub type SimdIsize<const LANES: usize> = crate::Simd<isize, LANES>;\n \n+impl_integer_vector! { SimdIsize, isize, MaskSize, SimdIsize }\n+impl_integer_vector! { SimdI16, i16, Mask16, SimdI16 }\n+impl_integer_vector! { SimdI32, i32, Mask32, SimdI32 }\n+impl_integer_vector! { SimdI64, i64, Mask64, SimdI64 }\n impl_integer_vector! { SimdI8, i8, Mask8, SimdI8 }\n \n /// Vector of two `isize` values"}, {"sha": "5bd1a7fd67fd2501fe1279571233cf75894e1609", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054f25f2b0212ada7caae70a4470e32f503a3eea/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=054f25f2b0212ada7caae70a4470e32f503a3eea", "patch": "@@ -33,44 +33,25 @@ macro_rules! impl_unsigned_vector {\n     }\n }\n \n-/// A SIMD vector of containing `LANES` `usize` values.\n-#[repr(simd)]\n-pub struct SimdUsize<const LANES: usize>([usize; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n-\n-impl_unsigned_vector! { SimdUsize, usize }\n+/// A SIMD vector of containing `LANES` `u8` values.\n+pub type SimdU8<const LANES: usize> = crate::Simd<u8, LANES>;\n \n /// A SIMD vector of containing `LANES` `u16` values.\n-#[repr(simd)]\n-pub struct SimdU16<const LANES: usize>([u16; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n-\n-impl_unsigned_vector! { SimdU16, u16 }\n+pub type SimdU16<const LANES: usize> = crate::Simd<u16, LANES>;\n \n /// A SIMD vector of containing `LANES` `u32` values.\n-#[repr(simd)]\n-pub struct SimdU32<const LANES: usize>([u32; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n-\n-impl_unsigned_vector! { SimdU32, u32 }\n+pub type SimdU32<const LANES: usize> = crate::Simd<u32, LANES>;\n \n /// A SIMD vector of containing `LANES` `u64` values.\n-#[repr(simd)]\n-pub struct SimdU64<const LANES: usize>([u64; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n+pub type SimdU64<const LANES: usize> = crate::Simd<u64, LANES>;\n \n-impl_unsigned_vector! { SimdU64, u64 }\n-\n-/// A SIMD vector of containing `LANES` `u8` values.\n-#[repr(simd)]\n-pub struct SimdU8<const LANES: usize>([u8; LANES])\n-where\n-    LaneCount<LANES>: SupportedLaneCount;\n+/// A SIMD vector of containing `LANES` `usize` values.\n+pub type SimdUsize<const LANES: usize> = crate::Simd<usize, LANES>;\n \n+impl_unsigned_vector! { SimdUsize, usize }\n+impl_unsigned_vector! { SimdU16, u16 }\n+impl_unsigned_vector! { SimdU32, u32 }\n+impl_unsigned_vector! { SimdU64, u64 }\n impl_unsigned_vector! { SimdU8, u8 }\n \n /// Vector of two `usize` values"}]}