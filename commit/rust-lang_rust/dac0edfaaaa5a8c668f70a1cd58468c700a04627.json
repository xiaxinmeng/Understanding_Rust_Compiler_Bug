{"sha": "dac0edfaaaa5a8c668f70a1cd58468c700a04627", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzBlZGZhYWFhNWE4YzY2OGY3MGExY2Q1ODQ2OGM3MDBhMDQ2Mjc=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-21T12:40:49Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:15Z"}, "message": "restore SpecFrom<T, TrustedLen<Item=T>> specialization by nesting\nspecializations", "tree": {"sha": "bc7fd409bf8f27f8a68338f2bf46c6b949766fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc7fd409bf8f27f8a68338f2bf46c6b949766fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac0edfaaaa5a8c668f70a1cd58468c700a04627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac0edfaaaa5a8c668f70a1cd58468c700a04627", "html_url": "https://github.com/rust-lang/rust/commit/dac0edfaaaa5a8c668f70a1cd58468c700a04627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac0edfaaaa5a8c668f70a1cd58468c700a04627/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582fbb1d62420d8d85f364d06669038f12b7e423", "url": "https://api.github.com/repos/rust-lang/rust/commits/582fbb1d62420d8d85f364d06669038f12b7e423", "html_url": "https://github.com/rust-lang/rust/commit/582fbb1d62420d8d85f364d06669038f12b7e423"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "272ad748bc756611e11c51cd0e68a8389788efe8", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dac0edfaaaa5a8c668f70a1cd58468c700a04627/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0edfaaaa5a8c668f70a1cd58468c700a04627/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=dac0edfaaaa5a8c668f70a1cd58468c700a04627", "patch": "@@ -2108,7 +2108,13 @@ trait SpecFrom<T, I> {\n     fn from_iter(iter: I) -> Self;\n }\n \n-impl<T, I> SpecFrom<T, I> for Vec<T>\n+// Another specialization trait for Vec::from_iter\n+// necessary to manually prioritize overlapping specializations\n+trait SpecFromNested<T, I> {\n+    fn from_iter(iter: I) -> Self;\n+}\n+\n+impl<T, I> SpecFromNested<T, I> for Vec<T>\n where\n     I: Iterator<Item = T>,\n {\n@@ -2137,6 +2143,28 @@ where\n     }\n }\n \n+impl<T, I> SpecFromNested<T, I> for Vec<T>\n+where\n+    I: TrustedLen<Item = T>,\n+{\n+    fn from_iter(iterator: I) -> Self {\n+        let mut vector = Vec::new();\n+        // must delegate to spec_extend() since extend() itself delegates\n+        // to spec_from for empty Vecs\n+        vector.spec_extend(iterator);\n+        vector\n+    }\n+}\n+\n+impl<T, I> SpecFrom<T, I> for Vec<T>\n+where\n+    I: Iterator<Item = T>,\n+{\n+    default fn from_iter(iterator: I) -> Self {\n+        SpecFromNested::from_iter(iterator)\n+    }\n+}\n+\n struct InPlaceDrop<T> {\n     inner: *mut T,\n     dst: *mut T,"}]}