{"sha": "d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYmM5NDEzODU4YjMzNGI2Y2RhZjM0NWJkNmI1MGNiOWFhNGNlYzI=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-07-21T12:42:32Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-07-23T07:13:05Z"}, "message": "Add regression test", "tree": {"sha": "bf4e166a334ef27fe4e9d4e5309491f44ed0a705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4e166a334ef27fe4e9d4e5309491f44ed0a705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2", "html_url": "https://github.com/rust-lang/rust/commit/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6badee1400b60b84623a3eaa65ba668ff1aa251", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6badee1400b60b84623a3eaa65ba668ff1aa251", "html_url": "https://github.com/rust-lang/rust/commit/b6badee1400b60b84623a3eaa65ba668ff1aa251"}], "stats": {"total": 337, "additions": 337, "deletions": 0}, "files": [{"sha": "a70f771e4826f14c33b4900ecbb8a76765e0df21", "filename": "src/test/ui/associated-types/issue-87261.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2", "patch": "@@ -0,0 +1,99 @@\n+trait Foo {}\n+\n+trait Trait {\n+    type Associated;\n+}\n+trait DerivedTrait: Trait {}\n+trait GenericTrait<A> {\n+    type Associated;\n+}\n+\n+struct Impl;\n+impl Foo for Impl {}\n+impl Trait for Impl {\n+    type Associated = ();\n+}\n+impl DerivedTrait for Impl {}\n+impl<A> GenericTrait<A> for Impl {\n+    type Associated = ();\n+}\n+\n+fn returns_opaque() -> impl Trait + 'static {\n+    Impl\n+}\n+fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n+    Impl\n+}\n+fn returns_opaque_foo() -> impl Trait + Foo {\n+    Impl\n+}\n+fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n+    Impl\n+}\n+fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n+    Impl\n+}\n+fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n+    Impl\n+}\n+fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n+    Impl\n+}\n+\n+fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+\n+fn check_generics<A, B, C, D, E, F, G>(a: A, b: B, c: C, d: D, e: E, f: F, g: G)\n+where\n+    A: Trait + 'static,\n+    B: DerivedTrait + 'static,\n+    C: Trait + Foo,\n+    D: DerivedTrait + Foo,\n+    E: GenericTrait<()> + 'static,\n+    F: GenericTrait<()> + Foo,\n+    G: GenericTrait<()> + GenericTrait<u8>,\n+{\n+    accepts_trait(a);\n+    //~^ ERROR type mismatch resolving `<A as Trait>::Associated == ()`\n+\n+    accepts_trait(b);\n+    //~^ ERROR type mismatch resolving `<B as Trait>::Associated == ()`\n+\n+    accepts_trait(c);\n+    //~^ ERROR type mismatch resolving `<C as Trait>::Associated == ()`\n+\n+    accepts_trait(d);\n+    //~^ ERROR type mismatch resolving `<D as Trait>::Associated == ()`\n+\n+    accepts_generic_trait(e);\n+    //~^ ERROR type mismatch resolving `<E as GenericTrait<()>>::Associated == ()`\n+\n+    accepts_generic_trait(f);\n+    //~^ ERROR type mismatch resolving `<F as GenericTrait<()>>::Associated == ()`\n+\n+    accepts_generic_trait(g);\n+    //~^ ERROR type mismatch resolving `<G as GenericTrait<()>>::Associated == ()`\n+}\n+\n+fn main() {\n+    accepts_trait(returns_opaque());\n+    //~^ ERROR type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n+\n+    accepts_trait(returns_opaque_derived());\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n+\n+    accepts_trait(returns_opaque_foo());\n+    //~^ ERROR type mismatch resolving `<impl Trait+Foo as Trait>::Associated == ()`\n+\n+    accepts_trait(returns_opaque_derived_foo());\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait+Foo as Trait>::Associated == ()`\n+\n+    accepts_generic_trait(returns_opaque_generic());\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+\n+    accepts_generic_trait(returns_opaque_generic_foo());\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated == ()`\n+\n+    accepts_generic_trait(returns_opaque_generic_duplicate());\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+}"}, {"sha": "0725acfe537dbb5022373d594bca2e4c91eff7af", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=d1bc9413858b334b6cdaf345bd6b50cb9aa4cec2", "patch": "@@ -0,0 +1,238 @@\n+error[E0271]: type mismatch resolving `<A as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:56:5\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(a);\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<A as Trait>::Associated`\n+help: consider constraining the associated type `<A as Trait>::Associated` to `()`\n+   |\n+LL |     A: Trait<Associated = ()> + 'static,\n+   |             ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<B as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:59:5\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(b);\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<B as Trait>::Associated`\n+   = help: consider constraining the associated type `<B as Trait>::Associated` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `<C as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:62:5\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(c);\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<C as Trait>::Associated`\n+help: consider constraining the associated type `<C as Trait>::Associated` to `()`\n+   |\n+LL |     C: Trait<Associated = ()> + Foo,\n+   |             ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<D as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:65:5\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(d);\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<D as Trait>::Associated`\n+   = help: consider constraining the associated type `<D as Trait>::Associated` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `<E as GenericTrait<()>>::Associated == ()`\n+  --> $DIR/issue-87261.rs:68:5\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              --------------- required by this bound in `accepts_generic_trait`\n+...\n+LL |     accepts_generic_trait(e);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<E as GenericTrait<()>>::Associated`\n+help: consider constraining the associated type `<E as GenericTrait<()>>::Associated` to `()`\n+   |\n+LL |     E: GenericTrait<(), Associated = ()> + 'static,\n+   |                       ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<F as GenericTrait<()>>::Associated == ()`\n+  --> $DIR/issue-87261.rs:71:5\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              --------------- required by this bound in `accepts_generic_trait`\n+...\n+LL |     accepts_generic_trait(f);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<F as GenericTrait<()>>::Associated`\n+help: consider constraining the associated type `<F as GenericTrait<()>>::Associated` to `()`\n+   |\n+LL |     F: GenericTrait<(), Associated = ()> + Foo,\n+   |                       ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<G as GenericTrait<()>>::Associated == ()`\n+  --> $DIR/issue-87261.rs:74:5\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              --------------- required by this bound in `accepts_generic_trait`\n+...\n+LL |     accepts_generic_trait(g);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<G as GenericTrait<()>>::Associated`\n+   = help: consider constraining the associated type `<G as GenericTrait<()>>::Associated` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:79:5\n+   |\n+LL | fn returns_opaque() -> impl Trait + 'static {\n+   |                        -------------------- the found opaque type\n+...\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(returns_opaque());\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Trait as Trait>::Associated`\n+help: consider constraining the associated type `<impl Trait as Trait>::Associated` to `()`\n+   |\n+LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n+   |                                  ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:82:5\n+   |\n+LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n+   |                                --------------------------- the found opaque type\n+...\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(returns_opaque_derived());\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl DerivedTrait as Trait>::Associated`\n+help: consider constraining the associated type `<impl DerivedTrait as Trait>::Associated` to `()`\n+   |\n+LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n+   |                                                 ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<impl Trait+Foo as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:85:5\n+   |\n+LL | fn returns_opaque_foo() -> impl Trait + Foo {\n+   |                            ---------------- the found opaque type\n+...\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(returns_opaque_foo());\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Trait+Foo as Trait>::Associated`\n+help: consider constraining the associated type `<impl Trait+Foo as Trait>::Associated` to `()`\n+   |\n+LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n+   |                                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<impl DerivedTrait+Foo as Trait>::Associated == ()`\n+  --> $DIR/issue-87261.rs:88:5\n+   |\n+LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n+   |                                    ----------------------- the found opaque type\n+...\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           --------------- required by this bound in `accepts_trait`\n+...\n+LL |     accepts_trait(returns_opaque_derived_foo());\n+   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl DerivedTrait+Foo as Trait>::Associated`\n+   = help: consider constraining the associated type `<impl DerivedTrait+Foo as Trait>::Associated` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+  --> $DIR/issue-87261.rs:91:5\n+   |\n+LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n+   |                                ------------------------------- the found opaque type\n+...\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              --------------- required by this bound in `accepts_generic_trait`\n+...\n+LL |     accepts_generic_trait(returns_opaque_generic());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n+help: consider constraining the associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n+   |\n+LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n+   |                                                    ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated == ()`\n+  --> $DIR/issue-87261.rs:94:5\n+   |\n+LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n+   |                                    --------------------------- the found opaque type\n+...\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              --------------- required by this bound in `accepts_generic_trait`\n+...\n+LL |     accepts_generic_trait(returns_opaque_generic_foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated`\n+help: consider constraining the associated type `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated` to `()`\n+   |\n+LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> + Foo {\n+   |                                                        ^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+  --> $DIR/issue-87261.rs:97:5\n+   |\n+LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n+   |                                          ---------------------------------------- the found opaque type\n+...\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              --------------- required by this bound in `accepts_generic_trait`\n+...\n+LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated`\n+   = help: consider constraining the associated type `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}]}