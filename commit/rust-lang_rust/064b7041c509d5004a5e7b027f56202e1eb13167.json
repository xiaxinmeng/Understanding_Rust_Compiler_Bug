{"sha": "064b7041c509d5004a5e7b027f56202e1eb13167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NGI3MDQxYzUwOWQ1MDA0YTVlN2IwMjdmNTYyMDJlMWViMTMxNjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-01T09:39:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-01T09:39:25Z"}, "message": "Rollup merge of #63410 - johnterickson:master, r=joshtriplett\n\nUpdate BufWriter example to include call to flush()\n\nI was playing with a writing a Huffman encoder/decoder and was getting weird corruptions and truncations.  I finally realized it was was because `BufWriter` was swallowing write errors \ud83d\ude2c.  I've found Rust to generally be explicit and err on the safe side, so I definitely found this unintuitive and not \"rustic\".\n\nhttps://twitter.com/johnterickson/status/1159514988123312128", "tree": {"sha": "bd5b5982ebbefbca002841f3cdec2d8f71b52169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5b5982ebbefbca002841f3cdec2d8f71b52169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/064b7041c509d5004a5e7b027f56202e1eb13167", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJda5HNCRBK7hj4Ov3rIwAAdHIIAAsY1ANjhtImbmudl0OukdFU\ncu0uj3RK+91YYqJBhB3WMCx8coyrB1JtQ5tn8SpldHjLRA69L2i0wb5LpqMtg6RJ\nRd636OMHkDZaq/oKPlhiLNlszhlGtyp7e4E023dahcr/MRT7xr8c0oPm6vO6A9gw\nWqYezMGJtancxqfWXAy508XUEjuPDqR51zRFJ541DDp5nalni6n9RCvXxjuBtKAv\nOE2SFEjH7Cv9+NSplXdwVenIik6stEWZMYbqkHhaVea/ADx4RrNpRoZfWBxIvYal\n/D8WXiObFRI35n/5bt15Q+hZmXAwdqTNPOm7koOE2fTK9H+UPLej0sqIWnR1lI0=\n=QBme\n-----END PGP SIGNATURE-----\n", "payload": "tree bd5b5982ebbefbca002841f3cdec2d8f71b52169\nparent 59cc53e6e708e9b9e86822c1b4d69f28f6c45eae\nparent 1b946106b7955d3dcde26719b9b62a5a2c4b78fe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567330765 +0200\ncommitter GitHub <noreply@github.com> 1567330765 +0200\n\nRollup merge of #63410 - johnterickson:master, r=joshtriplett\n\nUpdate BufWriter example to include call to flush()\n\nI was playing with a writing a Huffman encoder/decoder and was getting weird corruptions and truncations.  I finally realized it was was because `BufWriter` was swallowing write errors \ud83d\ude2c.  I've found Rust to generally be explicit and err on the safe side, so I definitely found this unintuitive and not \"rustic\".\n\nhttps://twitter.com/johnterickson/status/1159514988123312128\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/064b7041c509d5004a5e7b027f56202e1eb13167", "html_url": "https://github.com/rust-lang/rust/commit/064b7041c509d5004a5e7b027f56202e1eb13167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/064b7041c509d5004a5e7b027f56202e1eb13167/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59cc53e6e708e9b9e86822c1b4d69f28f6c45eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/59cc53e6e708e9b9e86822c1b4d69f28f6c45eae", "html_url": "https://github.com/rust-lang/rust/commit/59cc53e6e708e9b9e86822c1b4d69f28f6c45eae"}, {"sha": "1b946106b7955d3dcde26719b9b62a5a2c4b78fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b946106b7955d3dcde26719b9b62a5a2c4b78fe", "html_url": "https://github.com/rust-lang/rust/commit/1b946106b7955d3dcde26719b9b62a5a2c4b78fe"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "9593a1bae0a3c5abc2cfbfcbd2fcb5cc40c17e10", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/064b7041c509d5004a5e7b027f56202e1eb13167/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064b7041c509d5004a5e7b027f56202e1eb13167/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=064b7041c509d5004a5e7b027f56202e1eb13167", "patch": "@@ -9,21 +9,21 @@ use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom,\n         IoSliceMut};\n use crate::memchr;\n \n-/// The `BufReader` struct adds buffering to any reader.\n+/// The `BufReader<R>` struct adds buffering to any reader.\n ///\n /// It can be excessively inefficient to work directly with a [`Read`] instance.\n /// For example, every call to [`read`][`TcpStream::read`] on [`TcpStream`]\n-/// results in a system call. A `BufReader` performs large, infrequent reads on\n+/// results in a system call. A `BufReader<R>` performs large, infrequent reads on\n /// the underlying [`Read`] and maintains an in-memory buffer of the results.\n ///\n-/// `BufReader` can improve the speed of programs that make *small* and\n+/// `BufReader<R>` can improve the speed of programs that make *small* and\n /// *repeated* read calls to the same file or network socket. It does not\n /// help when reading very large amounts at once, or reading just one or a few\n /// times. It also provides no advantage when reading from a source that is\n /// already in memory, like a `Vec<u8>`.\n ///\n-/// When the `BufReader` is dropped, the contents of its buffer will be\n-/// discarded. Creating multiple instances of a `BufReader` on the same\n+/// When the `BufReader<R>` is dropped, the contents of its buffer will be\n+/// discarded. Creating multiple instances of a `BufReader<R>` on the same\n /// stream can cause data loss.\n ///\n /// [`Read`]: ../../std/io/trait.Read.html\n@@ -56,7 +56,7 @@ pub struct BufReader<R> {\n }\n \n impl<R: Read> BufReader<R> {\n-    /// Creates a new `BufReader` with a default buffer capacity. The default is currently 8 KB,\n+    /// Creates a new `BufReader<R>` with a default buffer capacity. The default is currently 8 KB,\n     /// but may change in the future.\n     ///\n     /// # Examples\n@@ -76,7 +76,7 @@ impl<R: Read> BufReader<R> {\n         BufReader::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n-    /// Creates a new `BufReader` with the specified buffer capacity.\n+    /// Creates a new `BufReader<R>` with the specified buffer capacity.\n     ///\n     /// # Examples\n     ///\n@@ -177,7 +177,7 @@ impl<R> BufReader<R> {\n         &self.buf[self.pos..self.cap]\n     }\n \n-    /// Unwraps this `BufReader`, returning the underlying reader.\n+    /// Unwraps this `BufReader<R>`, returning the underlying reader.\n     ///\n     /// Note that any leftover data in the internal buffer is lost.\n     ///\n@@ -304,7 +304,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// Seek to an offset, in bytes, in the underlying reader.\n     ///\n     /// The position used for seeking with `SeekFrom::Current(_)` is the\n-    /// position the underlying reader would be at if the `BufReader` had no\n+    /// position the underlying reader would be at if the `BufReader<R>` had no\n     /// internal buffer.\n     ///\n     /// Seeking always discards the internal buffer, even if the seek position\n@@ -355,19 +355,20 @@ impl<R: Seek> Seek for BufReader<R> {\n /// It can be excessively inefficient to work directly with something that\n /// implements [`Write`]. For example, every call to\n /// [`write`][`TcpStream::write`] on [`TcpStream`] results in a system call. A\n-/// `BufWriter` keeps an in-memory buffer of data and writes it to an underlying\n+/// `BufWriter<W>` keeps an in-memory buffer of data and writes it to an underlying\n /// writer in large, infrequent batches.\n ///\n-/// `BufWriter` can improve the speed of programs that make *small* and\n+/// `BufWriter<W>` can improve the speed of programs that make *small* and\n /// *repeated* write calls to the same file or network socket. It does not\n /// help when writing very large amounts at once, or writing just one or a few\n /// times. It also provides no advantage when writing to a destination that is\n /// in memory, like a `Vec<u8>`.\n ///\n-/// When the `BufWriter` is dropped, the contents of its buffer will be written\n-/// out. However, any errors that happen in the process of flushing the buffer\n-/// when the writer is dropped will be ignored. Code that wishes to handle such\n-/// errors must manually call [`flush`] before the writer is dropped.\n+/// It is critical to call [`flush`] before `BufWriter<W>` is dropped. Though\n+/// dropping will attempt to flush the the contents of the buffer, any errors\n+/// that happen in the process of dropping will be ignored. Calling ['flush']\n+/// ensures that the buffer is empty and thus dropping will not even attempt\n+/// file operations.\n ///\n /// # Examples\n ///\n@@ -386,7 +387,7 @@ impl<R: Seek> Seek for BufReader<R> {\n ///\n /// Because we're not buffering, we write each one in turn, incurring the\n /// overhead of a system call per byte written. We can fix this with a\n-/// `BufWriter`:\n+/// `BufWriter<W>`:\n ///\n /// ```no_run\n /// use std::io::prelude::*;\n@@ -398,11 +399,12 @@ impl<R: Seek> Seek for BufReader<R> {\n /// for i in 0..10 {\n ///     stream.write(&[i+1]).unwrap();\n /// }\n+/// stream.flush().unwrap();\n /// ```\n ///\n-/// By wrapping the stream with a `BufWriter`, these ten writes are all grouped\n-/// together by the buffer, and will all be written out in one system call when\n-/// the `stream` is dropped.\n+/// By wrapping the stream with a `BufWriter<W>`, these ten writes are all grouped\n+/// together by the buffer and will all be written out in one system call when\n+/// the `stream` is flushed.\n ///\n /// [`Write`]: ../../std/io/trait.Write.html\n /// [`TcpStream::write`]: ../../std/net/struct.TcpStream.html#method.write\n@@ -447,7 +449,7 @@ pub struct BufWriter<W: Write> {\n pub struct IntoInnerError<W>(W, Error);\n \n impl<W: Write> BufWriter<W> {\n-    /// Creates a new `BufWriter` with a default buffer capacity. The default is currently 8 KB,\n+    /// Creates a new `BufWriter<W>` with a default buffer capacity. The default is currently 8 KB,\n     /// but may change in the future.\n     ///\n     /// # Examples\n@@ -463,7 +465,7 @@ impl<W: Write> BufWriter<W> {\n         BufWriter::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n-    /// Creates a new `BufWriter` with the specified buffer capacity.\n+    /// Creates a new `BufWriter<W>` with the specified buffer capacity.\n     ///\n     /// # Examples\n     ///\n@@ -564,7 +566,7 @@ impl<W: Write> BufWriter<W> {\n         &self.buf\n     }\n \n-    /// Unwraps this `BufWriter`, returning the underlying writer.\n+    /// Unwraps this `BufWriter<W>`, returning the underlying writer.\n     ///\n     /// The buffer is written out before returning the writer.\n     ///"}]}