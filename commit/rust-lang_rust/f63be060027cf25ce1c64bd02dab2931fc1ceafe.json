{"sha": "f63be060027cf25ce1c64bd02dab2931fc1ceafe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2M2JlMDYwMDI3Y2YyNWNlMWM2NGJkMDJkYWIyOTMxZmMxY2VhZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T13:24:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T13:26:13Z"}, "message": "profile type inference", "tree": {"sha": "b3cacd977876023e045f80c20315941ed0ea6bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cacd977876023e045f80c20315941ed0ea6bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f63be060027cf25ce1c64bd02dab2931fc1ceafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f63be060027cf25ce1c64bd02dab2931fc1ceafe", "html_url": "https://github.com/rust-lang/rust/commit/f63be060027cf25ce1c64bd02dab2931fc1ceafe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f63be060027cf25ce1c64bd02dab2931fc1ceafe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f3e85002b74b45ac7862ccf7fe72650f59d679d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3e85002b74b45ac7862ccf7fe72650f59d679d", "html_url": "https://github.com/rust-lang/rust/commit/0f3e85002b74b45ac7862ccf7fe72650f59d679d"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "11cdf9c34922c93a82c8174c64ecb22a5636cf7d", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=f63be060027cf25ce1c64bd02dab2931fc1ceafe", "patch": "@@ -126,7 +126,7 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(ExprScopes::expr_scopes_query)]\n     fn expr_scopes(&self, def: DefWithBody) -> Arc<ExprScopes>;\n \n-    #[salsa::invoke(crate::ty::infer)]\n+    #[salsa::invoke(crate::ty::infer_query)]\n     fn infer(&self, def: DefWithBody) -> Arc<InferenceResult>;\n \n     #[salsa::invoke(crate::ty::type_for_def)]"}, {"sha": "3679a2242acfd630a51607bc3f7221601061efe9", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=f63be060027cf25ce1c64bd02dab2931fc1ceafe", "patch": "@@ -20,7 +20,7 @@ use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait, GenericP\n use display::{HirDisplay, HirFormatter};\n \n pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig, generic_predicates, generic_defaults};\n-pub(crate) use infer::{infer, InferenceResult, InferTy};\n+pub(crate) use infer::{infer_query, InferenceResult, InferTy};\n pub use lower::CallableDef;\n \n /// A type constructor or type name: this might be something like the primitive"}, {"sha": "a48272981f2470134d43abcf2a9c9afca15db902", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=f63be060027cf25ce1c64bd02dab2931fc1ceafe", "patch": "@@ -23,6 +23,7 @@ use ena::unify::{InPlaceUnificationTable, UnifyKey, UnifyValue, NoError};\n use rustc_hash::FxHashMap;\n \n use ra_arena::map::ArenaMap;\n+use ra_prof::profile;\n use test_utils::tested_by;\n \n use crate::{\n@@ -51,7 +52,8 @@ use super::{\n mod unify;\n \n /// The entry point of type inference.\n-pub fn infer(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResult> {\n+pub fn infer_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResult> {\n+    let _p = profile(\"infer_query\");\n     db.check_canceled();\n     let body = def.body(db);\n     let resolver = def.resolver(db);"}, {"sha": "61f2226d723ea483d989a4323ec7893f76259885", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63be060027cf25ce1c64bd02dab2931fc1ceafe/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=f63be060027cf25ce1c64bd02dab2931fc1ceafe", "patch": "@@ -198,6 +198,7 @@ fn print(lvl: usize, msgs: &[Message], out: &mut impl Write) {\n         if l != lvl {\n             continue;\n         }\n+\n         writeln!(out, \"{} {:6}ms - {}\", indent, dur.as_millis(), msg)\n             .expect(\"printing profiling info to stdout\");\n "}]}