{"sha": "4d4ec97e0a11eae5878ae6715536875c5689f074", "node_id": "C_kwDOAAsO6NoAKDRkNGVjOTdlMGExMWVhZTU4NzhhZTY3MTU1MzY4NzVjNTY4OWYwNzQ", "commit": {"author": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-30T22:16:41Z"}, "committer": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-30T22:16:41Z"}, "message": "Document char validity", "tree": {"sha": "d87510bf7ab6530e6c080e9a4d82acb51558ce4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87510bf7ab6530e6c080e9a4d82acb51558ce4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4ec97e0a11eae5878ae6715536875c5689f074", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEhCkfJ9Js3nBacaLYxBeqnEA5788FAmH3DlIACgkQxBeqnEA5\n788TOgf7B62fbR28h9N4mF2ScsJbBA2RQJS/R8Nkvse1FgeCjatTuB7zi6nUo3PN\nZOE0G/DHKNAvNwdrGnEE7sVVCiacMXuSVFO3iKQmOIX20+z0Mz/PFfwCXmcMZqAG\nJUNfNPpmLeGtS9ArLjN7ELNCuvoFTh4cRc7BRHas1S3OPp0LdPZvEIuIhpjpE8o0\no/fjGgKxOT/iaMyofEtMjvAPJcJOMxqcPxUyZe0ojAmSCLOohUO0JiTj3s49jyfO\nS3l0uylegluszDj2k7jME2GGI8yH2lXh4bJop4poM4DG15kOWJzLgsw+CtKv20g7\n442pXsSBXSzN7lF8E3IKIVa3RKRS/w==\n=iYOY\n-----END PGP SIGNATURE-----", "payload": "tree d87510bf7ab6530e6c080e9a4d82acb51558ce4d\nparent 8cdb3cd94efece1e17cbd8f6edb1dc1a482779a0\nauthor George Bateman <george.bateman16@gmail.com> 1643581001 +0000\ncommitter George Bateman <george.bateman16@gmail.com> 1643581001 +0000\n\nDocument char validity\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4ec97e0a11eae5878ae6715536875c5689f074", "html_url": "https://github.com/rust-lang/rust/commit/4d4ec97e0a11eae5878ae6715536875c5689f074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4ec97e0a11eae5878ae6715536875c5689f074/comments", "author": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cdb3cd94efece1e17cbd8f6edb1dc1a482779a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdb3cd94efece1e17cbd8f6edb1dc1a482779a0", "html_url": "https://github.com/rust-lang/rust/commit/8cdb3cd94efece1e17cbd8f6edb1dc1a482779a0"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "e8b4fffbdd2757f0459209d10a120e39e1f35bc7", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4d4ec97e0a11eae5878ae6715536875c5689f074/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4ec97e0a11eae5878ae6715536875c5689f074/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=4d4ec97e0a11eae5878ae6715536875c5689f074", "patch": "@@ -279,16 +279,44 @@ mod prim_never {}\n ///\n /// The `char` type represents a single character. More specifically, since\n /// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n-/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n-/// point]'.\n-///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// scalar value]'.\n ///\n /// This documentation describes a number of methods and trait implementations on the\n /// `char` type. For technical reasons, there is additional, separate\n /// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Validity\n+///\n+/// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n+/// other than a [surrogate code point]. This has a fixed numerical definition:\n+/// code points are in the range `'\\0'` to `char::MAX` (`'\\u{10FFFF}'`), inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range U+D800 to U+DFFF.\n+///\n+/// No `char` may be constructed, whether as a literal or at runtime, that is not a\n+/// Unicode scalar value:\n+///\n+/// ```text\n+/// let forbidden_chars = [\n+///     // Each of these is a compiler error\n+///     '\\u{D800}', '\\u{DFFF}', '\\u{110000}',\n+///\n+///     // Panics; from_u32 returns None.\n+///     char::from_u32(0xDE01).unwrap(),\n+///\n+///     // Undefined behaviour\n+///     unsafe { char::from_u32_unchecked(0x110000) },\n+/// ];\n+/// ```\n+///\n+/// Unicode is regularly updated. Many USVs are not currently assigned to a\n+/// character, but may be in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different users\n+/// (\"private use\").\n+///\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n+///\n /// # Representation\n ///\n /// `char` is always four bytes in size. This is a different representation than"}, {"sha": "e8b4fffbdd2757f0459209d10a120e39e1f35bc7", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4d4ec97e0a11eae5878ae6715536875c5689f074/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4ec97e0a11eae5878ae6715536875c5689f074/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=4d4ec97e0a11eae5878ae6715536875c5689f074", "patch": "@@ -279,16 +279,44 @@ mod prim_never {}\n ///\n /// The `char` type represents a single character. More specifically, since\n /// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n-/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n-/// point]'.\n-///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// scalar value]'.\n ///\n /// This documentation describes a number of methods and trait implementations on the\n /// `char` type. For technical reasons, there is additional, separate\n /// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Validity\n+///\n+/// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n+/// other than a [surrogate code point]. This has a fixed numerical definition:\n+/// code points are in the range `'\\0'` to `char::MAX` (`'\\u{10FFFF}'`), inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range U+D800 to U+DFFF.\n+///\n+/// No `char` may be constructed, whether as a literal or at runtime, that is not a\n+/// Unicode scalar value:\n+///\n+/// ```text\n+/// let forbidden_chars = [\n+///     // Each of these is a compiler error\n+///     '\\u{D800}', '\\u{DFFF}', '\\u{110000}',\n+///\n+///     // Panics; from_u32 returns None.\n+///     char::from_u32(0xDE01).unwrap(),\n+///\n+///     // Undefined behaviour\n+///     unsafe { char::from_u32_unchecked(0x110000) },\n+/// ];\n+/// ```\n+///\n+/// Unicode is regularly updated. Many USVs are not currently assigned to a\n+/// character, but may be in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different users\n+/// (\"private use\").\n+///\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n+///\n /// # Representation\n ///\n /// `char` is always four bytes in size. This is a different representation than"}]}