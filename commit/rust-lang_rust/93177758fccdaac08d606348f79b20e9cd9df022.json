{"sha": "93177758fccdaac08d606348f79b20e9cd9df022", "node_id": "C_kwDOAAsO6NoAKDkzMTc3NzU4ZmNjZGFhYzA4ZDYwNjM0OGY3OWIyMGU5Y2Q5ZGYwMjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-12T09:51:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-12T09:51:30Z"}, "message": "Rollup merge of #100767 - kadiwa4:escape_ascii, r=jackh726\n\nRemove manual <[u8]>::escape_ascii\n\n`@rustbot` label: +C-cleanup", "tree": {"sha": "2d40e1231d79e875258f1414f30b045d083f48c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d40e1231d79e875258f1414f30b045d083f48c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93177758fccdaac08d606348f79b20e9cd9df022", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHwEiCRBK7hj4Ov3rIwAAbO8IAKRRyCCYwbJl1JpCsWvt6ptb\n5wFIn9rbJKbb35HrgNtlen3/fVPC4j4XyNJeFynN/t/sowfvDXluMQQM9xZhJAsI\nvrbSJPBV7WOicv2qjFuONmwxIaUtRSwDmGl+pEr+jke/XlcKKDapdeKOiWTm9AdL\nWaQy+7TmSxb68hep+GaHyeUCjtA/B26Hwd2oPlTyy1NxrDZ0E8g+kL63F8o4e7qP\ndELx8NPq75Ay7KvWoV7FbpVqowRtJmBFpeKXdYJbqKzFspvekZ5H3WQ3ZXsC0Rtc\nm+05gM1sAzYIBgAFBvE8yIVPv+Xv15kkrIizjtY3E/E5bc8+7mmMgQh5weiV/HU=\n=k64z\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d40e1231d79e875258f1414f30b045d083f48c3\nparent 413703201c59f25a5a2fded13d7ee4b4be4e8545\nparent a297631bdcc7742b55cf5961fcbc505e91217c7d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662976290 +0530\ncommitter GitHub <noreply@github.com> 1662976290 +0530\n\nRollup merge of #100767 - kadiwa4:escape_ascii, r=jackh726\n\nRemove manual <[u8]>::escape_ascii\n\n`@rustbot` label: +C-cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93177758fccdaac08d606348f79b20e9cd9df022", "html_url": "https://github.com/rust-lang/rust/commit/93177758fccdaac08d606348f79b20e9cd9df022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93177758fccdaac08d606348f79b20e9cd9df022/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413703201c59f25a5a2fded13d7ee4b4be4e8545", "url": "https://api.github.com/repos/rust-lang/rust/commits/413703201c59f25a5a2fded13d7ee4b4be4e8545", "html_url": "https://github.com/rust-lang/rust/commit/413703201c59f25a5a2fded13d7ee4b4be4e8545"}, {"sha": "a297631bdcc7742b55cf5961fcbc505e91217c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a297631bdcc7742b55cf5961fcbc505e91217c7d", "html_url": "https://github.com/rust-lang/rust/commit/a297631bdcc7742b55cf5961fcbc505e91217c7d"}], "stats": {"total": 83, "additions": 16, "deletions": 67}, "files": [{"sha": "536b385606c69c5fa98c91a2c4f23eb4558d6b71", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=93177758fccdaac08d606348f79b20e9cd9df022", "patch": "@@ -163,12 +163,7 @@ impl LitKind {\n             }\n             LitKind::Str(symbol, ast::StrStyle::Raw(n)) => (token::StrRaw(n), symbol, None),\n             LitKind::ByteStr(ref bytes) => {\n-                let string = bytes\n-                    .iter()\n-                    .cloned()\n-                    .flat_map(ascii::escape_default)\n-                    .map(Into::<char>::into)\n-                    .collect::<String>();\n+                let string = bytes.escape_ascii().to_string();\n                 (token::ByteStr, Symbol::intern(&string), None)\n             }\n             LitKind::Byte(byte) => {"}, {"sha": "d7c7037ce1a783b7a2b79faecb024d864216fe5f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=93177758fccdaac08d606348f79b20e9cd9df022", "patch": "@@ -44,7 +44,7 @@ use std::io::{BufWriter, Write};\n use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n-use std::{ascii, char, env, fmt, fs, io, mem, str};\n+use std::{env, fmt, fs, io, mem, str};\n \n pub fn ensure_removed(diag_handler: &Handler, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n@@ -552,14 +552,6 @@ fn link_staticlib<'a>(\n     Ok(())\n }\n \n-fn escape_stdout_stderr_string(s: &[u8]) -> String {\n-    str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n-        let mut x = \"Non-UTF-8 output: \".to_string();\n-        x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n-        x\n-    })\n-}\n-\n /// Use `thorin` (rust implementation of a dwarf packaging utility) to link DWARF objects into a\n /// DWARF package.\n fn link_dwarf_object<'a>(\n@@ -866,7 +858,7 @@ fn link_natively<'a>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                let escaped_output = escape_stdout_stderr_string(&output);\n+                let escaped_output = escape_string(&output);\n                 let mut err = sess.struct_err(&format!(\n                     \"linking with `{}` failed: {}\",\n                     linker_path.display(),\n@@ -934,8 +926,8 @@ fn link_natively<'a>(\n \n                 sess.abort_if_errors();\n             }\n-            info!(\"linker stderr:\\n{}\", escape_stdout_stderr_string(&prog.stderr));\n-            info!(\"linker stdout:\\n{}\", escape_stdout_stderr_string(&prog.stdout));\n+            info!(\"linker stderr:\\n{}\", escape_string(&prog.stderr));\n+            info!(\"linker stdout:\\n{}\", escape_string(&prog.stdout));\n         }\n         Err(e) => {\n             let linker_not_found = e.kind() == io::ErrorKind::NotFound;\n@@ -1065,11 +1057,10 @@ fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: Opti\n }\n \n fn escape_string(s: &[u8]) -> String {\n-    str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n-        let mut x = \"Non-UTF-8 output: \".to_string();\n-        x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n-        x\n-    })\n+    match str::from_utf8(s) {\n+        Ok(s) => s.to_owned(),\n+        Err(_) => format!(\"Non-UTF-8 output: {}\", s.escape_ascii()),\n+    }\n }\n \n fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {"}, {"sha": "dd768c5358d5a14b4b341999d8fae559185b988d", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=93177758fccdaac08d606348f79b20e9cd9df022", "patch": "@@ -2633,15 +2633,7 @@ fn pretty_print_const<'tcx>(\n }\n \n fn pretty_print_byte_str(fmt: &mut Formatter<'_>, byte_str: &[u8]) -> fmt::Result {\n-    fmt.write_str(\"b\\\"\")?;\n-    for &c in byte_str {\n-        for e in std::ascii::escape_default(c) {\n-            fmt.write_char(e as char)?;\n-        }\n-    }\n-    fmt.write_str(\"\\\"\")?;\n-\n-    Ok(())\n+    write!(fmt, \"b\\\"{}\\\"\", byte_str.escape_ascii())\n }\n \n fn comma_sep<'tcx>(fmt: &mut Formatter<'_>, elems: Vec<ConstantKind<'tcx>>) -> fmt::Result {"}, {"sha": "e9eecfe78d32cf107b64b19f994af9446476fe86", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93177758fccdaac08d606348f79b20e9cd9df022/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=93177758fccdaac08d606348f79b20e9cd9df022", "patch": "@@ -1405,14 +1405,7 @@ pub trait PrettyPrinter<'tcx>:\n     }\n \n     fn pretty_print_byte_str(mut self, byte_str: &'tcx [u8]) -> Result<Self::Const, Self::Error> {\n-        define_scoped_cx!(self);\n-        p!(\"b\\\"\");\n-        for &c in byte_str {\n-            for e in std::ascii::escape_default(c) {\n-                self.write_char(e as char)?;\n-            }\n-        }\n-        p!(\"\\\"\");\n+        write!(self, \"b\\\"{}\\\"\", byte_str.escape_ascii())?;\n         Ok(self)\n     }\n "}, {"sha": "970830045b8124667964bd6e8d3dd51333b2f284", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93177758fccdaac08d606348f79b20e9cd9df022/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93177758fccdaac08d606348f79b20e9cd9df022/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=93177758fccdaac08d606348f79b20e9cd9df022", "patch": "@@ -1,7 +1,6 @@\n-use crate::ascii;\n use crate::cmp::Ordering;\n use crate::ffi::c_char;\n-use crate::fmt::{self, Write};\n+use crate::fmt;\n use crate::intrinsics;\n use crate::ops;\n use crate::slice;\n@@ -161,11 +160,7 @@ impl fmt::Display for FromBytesUntilNulError {\n #[stable(feature = \"cstr_debug\", since = \"1.3.0\")]\n impl fmt::Debug for CStr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"\\\"\")?;\n-        for byte in self.to_bytes().iter().flat_map(|&b| ascii::escape_default(b)) {\n-            f.write_char(byte as char)?;\n-        }\n-        write!(f, \"\\\"\")\n+        write!(f, \"\\\"{}\\\"\", self.to_bytes().escape_ascii())\n     }\n }\n "}, {"sha": "495c1c5ae46c155bb0877a3a22dbc5756f3b2a83", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93177758fccdaac08d606348f79b20e9cd9df022/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93177758fccdaac08d606348f79b20e9cd9df022/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=93177758fccdaac08d606348f79b20e9cd9df022", "patch": "@@ -1353,12 +1353,7 @@ impl Literal {\n     /// Byte string literal.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn byte_string(bytes: &[u8]) -> Literal {\n-        let string = bytes\n-            .iter()\n-            .cloned()\n-            .flat_map(std::ascii::escape_default)\n-            .map(Into::<char>::into)\n-            .collect::<String>();\n+        let string = bytes.escape_ascii().to_string();\n         Literal::new(bridge::LitKind::ByteStr, &string, None)\n     }\n "}, {"sha": "094085e19428c8f6f4c682dd8fe3541dab368dbf", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93177758fccdaac08d606348f79b20e9cd9df022/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93177758fccdaac08d606348f79b20e9cd9df022/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=93177758fccdaac08d606348f79b20e9cd9df022", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::OsStr;\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::Path;\n use crate::sys::cvt;\n-use crate::{ascii, fmt, io, mem, ptr};\n+use crate::{fmt, io, mem, ptr};\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n #[cfg(not(unix))]\n@@ -64,18 +64,6 @@ enum AddressKind<'a> {\n     Abstract(&'a [u8]),\n }\n \n-struct AsciiEscaped<'a>(&'a [u8]);\n-\n-impl<'a> fmt::Display for AsciiEscaped<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(fmt, \"\\\"\")?;\n-        for byte in self.0.iter().cloned().flat_map(ascii::escape_default) {\n-            write!(fmt, \"{}\", byte as char)?;\n-        }\n-        write!(fmt, \"\\\"\")\n-    }\n-}\n-\n /// An address associated with a Unix socket.\n ///\n /// # Examples\n@@ -343,7 +331,7 @@ impl fmt::Debug for SocketAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.address() {\n             AddressKind::Unnamed => write!(fmt, \"(unnamed)\"),\n-            AddressKind::Abstract(name) => write!(fmt, \"{} (abstract)\", AsciiEscaped(name)),\n+            AddressKind::Abstract(name) => write!(fmt, \"\\\"{}\\\" (abstract)\", name.escape_ascii()),\n             AddressKind::Pathname(path) => write!(fmt, \"{path:?} (pathname)\"),\n         }\n     }"}]}