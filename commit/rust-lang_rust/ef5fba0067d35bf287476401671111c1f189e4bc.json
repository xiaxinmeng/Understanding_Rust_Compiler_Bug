{"sha": "ef5fba0067d35bf287476401671111c1f189e4bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNWZiYTAwNjdkMzViZjI4NzQ3NjQwMTY3MTExMWMxZjE4OWU0YmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-25T11:05:05Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-25T11:05:05Z"}, "message": "Hide some lints which are not quite right the way they are reported to the user", "tree": {"sha": "70a724c775bf8788fec7246f5d504dd81f30997c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70a724c775bf8788fec7246f5d504dd81f30997c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5fba0067d35bf287476401671111c1f189e4bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5fba0067d35bf287476401671111c1f189e4bc", "html_url": "https://github.com/rust-lang/rust/commit/ef5fba0067d35bf287476401671111c1f189e4bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5fba0067d35bf287476401671111c1f189e4bc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13985724033467ab86da9136c43fe242092b294e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13985724033467ab86da9136c43fe242092b294e", "html_url": "https://github.com/rust-lang/rust/commit/13985724033467ab86da9136c43fe242092b294e"}], "stats": {"total": 128, "additions": 117, "deletions": 11}, "files": [{"sha": "c8d4ce88f27c14e5673e7ec2b1e6aa3e4020531f", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 93, "deletions": 11, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fba0067d35bf287476401671111c1f189e4bc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fba0067d35bf287476401671111c1f189e4bc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ef5fba0067d35bf287476401671111c1f189e4bc", "patch": "@@ -144,18 +144,100 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         };\n         let r = match f(self) {\n             Ok(val) => Some(val),\n-            Err(err) => {\n-                match err.kind {\n+            Err(error) => {\n+                let (stacktrace, span) = self.ecx.generate_stacktrace(None);\n+                let diagnostic = ConstEvalErr { span, error, stacktrace };\n+                use rustc::mir::interpret::EvalErrorKind::*;\n+                match diagnostic.error.kind {\n                     // don't report these, they make no sense in a const prop context\n-                    EvalErrorKind::MachineError(_) => {},\n-                    _ => {\n-                        let (frames, span) = self.ecx.generate_stacktrace(None);\n-                        let err = ConstEvalErr {\n-                            span,\n-                            error: err,\n-                            stacktrace: frames,\n-                        };\n-                        err.report_as_lint(\n+                    | MachineError(_)\n+                    // at runtime these transformations might make sense\n+                    // FIXME: figure out the rules and start linting\n+                    | FunctionPointerTyMismatch(..)\n+                    // fine at runtime, might be a register address or sth\n+                    | ReadBytesAsPointer\n+                    // fine at runtime\n+                    | ReadForeignStatic\n+                    | Unimplemented(_)\n+                    // don't report const evaluator limits\n+                    | StackFrameLimitReached\n+                    | NoMirFor(..)\n+                    | InlineAsm\n+                    => {},\n+\n+                    | InvalidMemoryAccess\n+                    | DanglingPointerDeref\n+                    | DoubleFree\n+                    | InvalidFunctionPointer\n+                    | InvalidBool\n+                    | InvalidDiscriminant\n+                    | PointerOutOfBounds { .. }\n+                    | InvalidNullPointerUsage\n+                    | MemoryLockViolation { .. }\n+                    | MemoryAcquireConflict { .. }\n+                    | ValidationFailure(..)\n+                    | InvalidMemoryLockRelease { .. }\n+                    | DeallocatedLockedMemory { .. }\n+                    | InvalidPointerMath\n+                    | ReadUndefBytes\n+                    | DeadLocal\n+                    | InvalidBoolOp(_)\n+                    | DerefFunctionPointer\n+                    | ExecuteMemory\n+                    | Intrinsic(..)\n+                    | InvalidChar(..)\n+                    | AbiViolation(_)\n+                    | AlignmentCheckFailed{..}\n+                    | CalledClosureAsFunction\n+                    | VtableForArgumentlessMethod\n+                    | ModifiedConstantMemory\n+                    | AssumptionNotHeld\n+                    // FIXME: should probably be removed and turned into a bug! call\n+                    | TypeNotPrimitive(_)\n+                    | ReallocatedWrongMemoryKind(_, _)\n+                    | DeallocatedWrongMemoryKind(_, _)\n+                    | ReallocateNonBasePtr\n+                    | DeallocateNonBasePtr\n+                    | IncorrectAllocationInformation(..)\n+                    | UnterminatedCString(_)\n+                    | HeapAllocZeroBytes\n+                    | HeapAllocNonPowerOfTwoAlignment(_)\n+                    | Unreachable\n+                    | ReadFromReturnPointer\n+                    | GeneratorResumedAfterReturn\n+                    | GeneratorResumedAfterPanic\n+                    | ReferencedConstant(_)\n+                    | InfiniteLoop\n+                    => {\n+                        // FIXME: report UB here\n+                    },\n+\n+                    | OutOfTls\n+                    | TlsOutOfBounds\n+                    | PathNotFound(_)\n+                    => bug!(\"these should not be in rustc, but in miri's machine errors\"),\n+\n+                    | Layout(_)\n+                    | UnimplementedTraitSelection\n+                    | TypeckError\n+                    | TooGeneric\n+                    | CheckMatchError\n+                    // these are just noise\n+                    => {},\n+\n+                    // non deterministic\n+                    | ReadPointerAsBytes\n+                    // FIXME: implement\n+                    => {},\n+\n+                    | Panic\n+                    | BoundsCheck{..}\n+                    | Overflow(_)\n+                    | OverflowNeg\n+                    | DivisionByZero\n+                    | RemainderByZero\n+                    => {\n+                        diagnostic.report_as_lint(\n                             self.ecx.tcx,\n                             \"this expression will panic at runtime\",\n                             lint_root,"}, {"sha": "bea4fb76ed166f52ff3a34c564d6ddedb4a27d09", "filename": "src/test/ui/const-eval/const_prop_errors.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fba0067d35bf287476401671111c1f189e4bc/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fba0067d35bf287476401671111c1f189e4bc/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs?ref=ef5fba0067d35bf287476401671111c1f189e4bc", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+pub trait Foo {\n+    fn foo(self) -> u32;\n+}\n+\n+impl<T> Foo for T {\n+    fn foo(self) -> u32 {\n+        fn bar<T>() { loop {} }\n+        bar::<T> as u32\n+    }\n+}\n+\n+fn main() {}"}]}