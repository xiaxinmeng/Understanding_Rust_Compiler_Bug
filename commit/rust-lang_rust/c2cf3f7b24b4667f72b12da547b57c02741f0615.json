{"sha": "c2cf3f7b24b4667f72b12da547b57c02741f0615", "node_id": "C_kwDOAAsO6NoAKGMyY2YzZjdiMjRiNDY2N2Y3MmIxMmRhNTQ3YjU3YzAyNzQxZjA2MTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-02T23:31:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-05T21:52:04Z"}, "message": "Inline `OpportunisticVarResolver::fold_ty`.", "tree": {"sha": "703fe00c5fa0871190a5a8fd2500901c59f345ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703fe00c5fa0871190a5a8fd2500901c59f345ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2cf3f7b24b4667f72b12da547b57c02741f0615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cf3f7b24b4667f72b12da547b57c02741f0615", "html_url": "https://github.com/rust-lang/rust/commit/c2cf3f7b24b4667f72b12da547b57c02741f0615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2cf3f7b24b4667f72b12da547b57c02741f0615/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f08a3371b01f6d6b01bf351f28bf0fbba2bd1b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/f08a3371b01f6d6b01bf351f28bf0fbba2bd1b87", "html_url": "https://github.com/rust-lang/rust/commit/f08a3371b01f6d6b01bf351f28bf0fbba2bd1b87"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "a39a40cf9abe242f22408b62c077e2d7ef32160e", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2cf3f7b24b4667f72b12da547b57c02741f0615/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cf3f7b24b4667f72b12da547b57c02741f0615/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=c2cf3f7b24b4667f72b12da547b57c02741f0615", "patch": "@@ -33,6 +33,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n         TypeFolder::tcx(&self.shallow_resolver)\n     }\n \n+    #[inline]\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if !t.has_non_region_infer() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects..."}]}