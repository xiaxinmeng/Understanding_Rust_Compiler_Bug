{"sha": "e1bf3a13869ceef2bd9a62f3153ba2241b0047d7", "node_id": "C_kwDOAAsO6NoAKGUxYmYzYTEzODY5Y2VlZjJiZDlhNjJmMzE1M2JhMjI0MWIwMDQ3ZDc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-03T17:34:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T17:34:50Z"}, "message": "Rollup merge of #107427 - detrumi:builtin-impl-candidates, r=compiler-errors\n\nAdd candidates for DiscriminantKind builtin\n\nPart of #107379", "tree": {"sha": "47de0e6e942b986f66c81b1e56d77adb6129d3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47de0e6e942b986f66c81b1e56d77adb6129d3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3UW6CRBK7hj4Ov3rIwAAH5EIAJf+3CljjiAfXcGPjWk3Ci/q\nPD4tuRJWn1VRKg3eWpoFpSkCxdMVagB2dLZD+sdqvnHQAQzb8ONVLGBCfzROTDqW\nYvESDEm1PbDoWXszQ6a/rV0KWtFVTDSzshV7IgVXAnvkKHiA1+X3AiaB2w4u/IjO\nPgpA6N6d4fh9qV9oB2ARS6MjK1qp7o185vxYJ0PgCrY+0E7GdP0oDArQgdKEI2Zf\nk1jCasgjuCe+7rFCcx45pYELbqdsuqBW6OZ1j2ZsNhZaMEocMAgRURSNV2Z6javx\nKI579D9jgy73puwJsoTrjwX3dkUb29Dbt5rQhYtU/BxlXtlDHgDOW/7qWgBHRRE=\n=Qt16\n-----END PGP SIGNATURE-----\n", "payload": "tree 47de0e6e942b986f66c81b1e56d77adb6129d3fa\nparent 72213832f6d9601d1777491c4990724fd5e85146\nparent f29000eba9ebd43dca5ae97bab39148cce9319bc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1675445690 +0530\ncommitter GitHub <noreply@github.com> 1675445690 +0530\n\nRollup merge of #107427 - detrumi:builtin-impl-candidates, r=compiler-errors\n\nAdd candidates for DiscriminantKind builtin\n\nPart of #107379\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7", "html_url": "https://github.com/rust-lang/rust/commit/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72213832f6d9601d1777491c4990724fd5e85146", "url": "https://api.github.com/repos/rust-lang/rust/commits/72213832f6d9601d1777491c4990724fd5e85146", "html_url": "https://github.com/rust-lang/rust/commit/72213832f6d9601d1777491c4990724fd5e85146"}, {"sha": "f29000eba9ebd43dca5ae97bab39148cce9319bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f29000eba9ebd43dca5ae97bab39148cce9319bc", "html_url": "https://github.com/rust-lang/rust/commit/f29000eba9ebd43dca5ae97bab39148cce9319bc"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "ccdf6246083cc59787129366e46b47c2748edd91", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=e1bf3a13869ceef2bd9a62f3153ba2241b0047d7", "patch": "@@ -81,6 +81,7 @@ pub(super) enum CandidateSource {\n     AliasBound,\n }\n \n+/// Methods used to assemble candidates for either trait or projection goals.\n pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n     fn self_ty(self) -> Ty<'tcx>;\n \n@@ -188,6 +189,11 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> Vec<CanonicalResponse<'tcx>>;\n+\n+    fn consider_builtin_discriminant_kind_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -320,6 +326,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_builtin_generator_candidate(self, goal)\n         } else if lang_items.unsize_trait() == Some(trait_def_id) {\n             G::consider_builtin_unsize_candidate(self, goal)\n+        } else if lang_items.discriminant_kind_trait() == Some(trait_def_id) {\n+            G::consider_builtin_discriminant_kind_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "9f62f686af647f2c1a3f6a314954e89dbd804c81", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=e1bf3a13869ceef2bd9a62f3153ba2241b0047d7", "patch": "@@ -581,6 +581,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) -> Vec<super::CanonicalResponse<'tcx>> {\n         bug!(\"`Unsize` does not have an associated type: {:?}\", goal);\n     }\n+\n+    fn consider_builtin_discriminant_kind_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        let discriminant = goal.predicate.self_ty().discriminant_ty(ecx.tcx());\n+        ecx.infcx\n+            .probe(|_| ecx.eq_term_and_make_canonical_response(goal, Certainty::Yes, discriminant))\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "0003dfeaee78117ca8a4426dfa48a052808c4ab2", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1bf3a13869ceef2bd9a62f3153ba2241b0047d7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=e1bf3a13869ceef2bd9a62f3153ba2241b0047d7", "patch": "@@ -439,6 +439,14 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n         responses\n     }\n+\n+    fn consider_builtin_discriminant_kind_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        _goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        // `DiscriminantKind` is automatically implemented for every type.\n+        ecx.make_canonical_response(Certainty::Yes)\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}]}