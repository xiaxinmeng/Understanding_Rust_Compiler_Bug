{"sha": "76c562f3b30e0d033902d004fdb0069d5584d78a", "node_id": "C_kwDOAAsO6NoAKDc2YzU2MmYzYjMwZTBkMDMzOTAyZDAwNGZkYjAwNjlkNTU4NGQ3OGE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-09T11:29:43Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-10T07:27:29Z"}, "message": "fix min_const_generics oversight", "tree": {"sha": "4e13655d303f49a7cd6cf86a5bb76972af431ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e13655d303f49a7cd6cf86a5bb76972af431ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76c562f3b30e0d033902d004fdb0069d5584d78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76c562f3b30e0d033902d004fdb0069d5584d78a", "html_url": "https://github.com/rust-lang/rust/commit/76c562f3b30e0d033902d004fdb0069d5584d78a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76c562f3b30e0d033902d004fdb0069d5584d78a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775e480722c7aba6ff4ff3ccec8c1f4639ae7889", "url": "https://api.github.com/repos/rust-lang/rust/commits/775e480722c7aba6ff4ff3ccec8c1f4639ae7889", "html_url": "https://github.com/rust-lang/rust/commit/775e480722c7aba6ff4ff3ccec8c1f4639ae7889"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "aa054043c4e886e0d9a60a0b4e2fef0286b3a3ea", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/76c562f3b30e0d033902d004fdb0069d5584d78a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c562f3b30e0d033902d004fdb0069d5584d78a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=76c562f3b30e0d033902d004fdb0069d5584d78a", "patch": "@@ -2281,8 +2281,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);\n                 // Try to evaluate any array length constants.\n-                let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n-                if forbid_generic && normalized_ty.needs_subst() {\n+                let ty = tcx.at(span).type_of(def_id);\n+                // HACK(min_const_generics): Forbid generic `Self` types\n+                // here as we can't easily do that during nameres.\n+                //\n+                // We do this before normalization as we otherwise allow\n+                // ```rust\n+                // trait AlwaysApplicable { type Assoc; }\n+                // impl<T: ?Sized> AlwaysApplicable for T { type Assoc = usize; }\n+                //\n+                // trait BindsParam<T> {\n+                //     type ArrayTy;\n+                // }\n+                // impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+                //    type ArrayTy = [u8; Self::MAX];\n+                // }\n+                // ```\n+                // Note that the normalization happens in the param env of\n+                // the anon const, which is empty. This is why the\n+                // `AlwaysApplicable` impl needs a `T: ?Sized` bound for\n+                // this to compile if we were to normalize here.\n+                if forbid_generic && ty.needs_subst() {\n                     let mut err = tcx.sess.struct_span_err(\n                         path.span,\n                         \"generic `Self` types are currently not permitted in anonymous constants\",\n@@ -2297,7 +2316,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     err.emit();\n                     tcx.ty_error()\n                 } else {\n-                    normalized_ty\n+                    self.normalize_ty(span, ty)\n                 }\n             }\n             Res::Def(DefKind::AssocTy, def_id) => {"}, {"sha": "e1cf7b579aa5a3a2336281f538c2e38bb604a6f9", "filename": "src/test/ui/const-generics/min_const_generics/forbid-self-no-normalize.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76c562f3b30e0d033902d004fdb0069d5584d78a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c562f3b30e0d033902d004fdb0069d5584d78a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs?ref=76c562f3b30e0d033902d004fdb0069d5584d78a", "patch": "@@ -0,0 +1,15 @@\n+trait AlwaysApplicable {\n+    type Assoc;\n+}\n+impl<T: ?Sized> AlwaysApplicable for T {\n+    type Assoc = usize;\n+}\n+\n+trait BindsParam<T> {\n+    type ArrayTy;\n+}\n+impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+    type ArrayTy = [u8; Self::MAX]; //~ ERROR generic `Self` types\n+}\n+\n+fn main() {}"}, {"sha": "bda88597006803a96e5e7902816205e50478f6fc", "filename": "src/test/ui/const-generics/min_const_generics/forbid-self-no-normalize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76c562f3b30e0d033902d004fdb0069d5584d78a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76c562f3b30e0d033902d004fdb0069d5584d78a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr?ref=76c562f3b30e0d033902d004fdb0069d5584d78a", "patch": "@@ -0,0 +1,14 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/forbid-self-no-normalize.rs:12:25\n+   |\n+LL |     type ArrayTy = [u8; Self::MAX];\n+   |                         ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/forbid-self-no-normalize.rs:11:27\n+   |\n+LL | impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}