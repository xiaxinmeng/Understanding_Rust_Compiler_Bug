{"sha": "64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MzcxZjFjZmVlOGQ1ZWM4NTUyYWM4ZWU0Y2JkYjRjZDI2MjliOTE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-05T22:54:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-05T22:54:25Z"}, "message": "Rollup merge of #56119 - frewsxcv:frewsxcv-option-carrier, r=TimNN\n\nUtilize `?` instead of `return None`.\n\nNone", "tree": {"sha": "87bdf3cb911fbad454292ca3383bfa6f772f3c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87bdf3cb911fbad454292ca3383bfa6f772f3c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCFchCRBK7hj4Ov3rIwAAdHIIAFF1r+li7t6aL4pob32q5oie\nZOmTZ2x44MsK5fLwgHWguUI5BuYwbuxbKKUYWxLtdmQAKs/A+kGrPZTuoLnQKPkZ\nDP6iLy3sSFmncR6z1ZkQOUHgknM9DdEurT4F4BGq6rq0FenIRNb+44PHl4IJWZ73\n4VHOZQp9J/2cjG8gONd4JQQHDxcqlPLnSuMBDy0gdQTvVMW38dFiqpsS3aG0BeKV\n2Ywn12ck+KdFK4eOlfcpkBURAqDLzSO6BVtuzJRpb4kz1XDN5LYN27thPh/+SsAc\nIWA+COFi5iCDbFiO346Mjy0Q5sb4zHBihCUiRPZVcNvJY4qQds2mErdMYnLsbN4=\n=Z+JJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 87bdf3cb911fbad454292ca3383bfa6f772f3c5c\nparent 1594a4245ba9951039bb39bf5e3484605ab5d068\nparent 9012af6f19d999869824e3b933de5f7b30986877\nauthor Pietro Albini <pietro@pietroalbini.org> 1544050465 +0100\ncommitter GitHub <noreply@github.com> 1544050465 +0100\n\nRollup merge of #56119 - frewsxcv:frewsxcv-option-carrier, r=TimNN\n\nUtilize `?` instead of `return None`.\n\nNone\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "html_url": "https://github.com/rust-lang/rust/commit/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1594a4245ba9951039bb39bf5e3484605ab5d068", "url": "https://api.github.com/repos/rust-lang/rust/commits/1594a4245ba9951039bb39bf5e3484605ab5d068", "html_url": "https://github.com/rust-lang/rust/commit/1594a4245ba9951039bb39bf5e3484605ab5d068"}, {"sha": "9012af6f19d999869824e3b933de5f7b30986877", "url": "https://api.github.com/repos/rust-lang/rust/commits/9012af6f19d999869824e3b933de5f7b30986877", "html_url": "https://github.com/rust-lang/rust/commit/9012af6f19d999869824e3b933de5f7b30986877"}], "stats": {"total": 94, "additions": 26, "deletions": 68}, "files": [{"sha": "6c953d1b9a0acefb716c3a148a2817956ffe24b9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -536,10 +536,9 @@ fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>\n     where I: DoubleEndedIterator<Item = &'a u8>,\n {\n     // Decode UTF-8\n-    let w = match bytes.next_back() {\n-        None => return None,\n-        Some(&next_byte) if next_byte < 128 => return Some(next_byte as u32),\n-        Some(&back_byte) => back_byte,\n+    let w = match *bytes.next_back()? {\n+        next_byte if next_byte < 128 => return Some(next_byte as u32),\n+        back_byte => back_byte,\n     };\n \n     // Multibyte case follows"}, {"sha": "3c2551f5cd436850cea49f8c99e9a1722cac4885", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -592,10 +592,7 @@ impl<'tcx> ScopeTree {\n                 return Some(scope.item_local_id());\n             }\n \n-            match self.opt_encl_scope(scope) {\n-                None => return None,\n-                Some(parent) => scope = parent,\n-            }\n+            scope = self.opt_encl_scope(scope)?;\n         }\n     }\n "}, {"sha": "6b0a8a0af2b9dcfb7a54f5993d0344e518a46441", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -67,14 +67,13 @@ impl<'a> Iterator for Iter<'a> {\n \n     fn next(&mut self) -> Option<(&'a Path, PathKind)> {\n         loop {\n-            match self.iter.next() {\n-                Some(&(kind, ref p)) if self.kind == PathKind::All ||\n-                                        kind == PathKind::All ||\n-                                        kind == self.kind => {\n+            match *self.iter.next()? {\n+                (kind, ref p) if self.kind == PathKind::All ||\n+                                  kind == PathKind::All ||\n+                                  kind == self.kind => {\n                     return Some((p, kind))\n                 }\n-                Some(..) => {}\n-                None => return None,\n+                _ => {}\n             }\n         }\n     }"}, {"sha": "ddd28eb5393ec273c589564c3195554e904a79b9", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -29,7 +29,7 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n         return None\n     }\n \n-    let saved_files: Option<Vec<_>> =\n+    let saved_files =\n         files.iter()\n              .map(|&(kind, ref path)| {\n                  let extension = match kind {\n@@ -51,11 +51,7 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n                      }\n                  }\n              })\n-             .collect();\n-    let saved_files = match saved_files {\n-        None => return None,\n-        Some(v) => v,\n-    };\n+             .collect::<Option<Vec<_>>>()?;\n \n     let work_product = WorkProduct {\n         cgu_name: cgu_name.to_string(),"}, {"sha": "7d583b4f541915589e48cce72a029bc618bf58dc", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -87,10 +87,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n impl<'cx, 'gcx, 'tcx> Iterator for Prefixes<'cx, 'gcx, 'tcx> {\n     type Item = &'cx Place<'tcx>;\n     fn next(&mut self) -> Option<Self::Item> {\n-        let mut cursor = match self.next {\n-            None => return None,\n-            Some(place) => place,\n-        };\n+        let mut cursor = self.next?;\n \n         // Post-processing `place`: Enqueue any remaining\n         // work. Also, `place` may not be a prefix itself, but"}, {"sha": "1d903476f16f98467ca51b7055357ee3f451f46f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -3948,10 +3948,7 @@ pub fn path_to_def_local(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n     let mut path_it = path.iter().peekable();\n \n     loop {\n-        let segment = match path_it.next() {\n-            Some(segment) => segment,\n-            None => return None,\n-        };\n+        let segment = path_it.next()?;\n \n         for item_id in mem::replace(&mut items, HirVec::new()).iter() {\n             let item = tcx.hir.expect_item(item_id.id);\n@@ -3986,10 +3983,7 @@ pub fn path_to_def(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n         let mut path_it = path.iter().skip(1).peekable();\n \n         loop {\n-            let segment = match path_it.next() {\n-                Some(segment) => segment,\n-                None => return None,\n-            };\n+            let segment = path_it.next()?;\n \n             for item in mem::replace(&mut items, Lrc::new(vec![])).iter() {\n                 if item.ident.name == *segment {"}, {"sha": "4a20e87c08129a2e477db71b9bc8e144a01f7870", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -2220,13 +2220,13 @@ impl<'a> Item<'a> {\n                 return None;\n             }\n         } else {\n-            let (krate, src_root) = match cache.extern_locations.get(&self.item.def_id.krate) {\n-                Some(&(ref name, ref src, Local)) => (name, src),\n-                Some(&(ref name, ref src, Remote(ref s))) => {\n+            let (krate, src_root) = match *cache.extern_locations.get(&self.item.def_id.krate)? {\n+                (ref name, ref src, Local) => (name, src),\n+                (ref name, ref src, Remote(ref s)) => {\n                     root = s.to_string();\n                     (name, src)\n                 }\n-                Some(&(_, _, Unknown)) | None => return None,\n+                (_, _, Unknown) => return None,\n             };\n \n             clean_srcpath(&src_root, file, false, |component| {"}, {"sha": "ff910a50226f26afe5c3026bfa639653f2059262", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -91,10 +91,7 @@ pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix> {\n     }\n \n     fn parse_two_comps(mut path: &[u8], f: fn(u8) -> bool) -> Option<(&[u8], &[u8])> {\n-        let first = match path.iter().position(|x| f(*x)) {\n-            None => return None,\n-            Some(x) => &path[..x],\n-        };\n+        let first = &path[..path.iter().position(|x| f(*x))?];\n         path = &path[(first.len() + 1)..];\n         let idx = path.iter().position(|x| f(*x));\n         let second = &path[..idx.unwrap_or(path.len())];"}, {"sha": "7373828427e98adf5ff0824189794f8bc85b7024", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -753,10 +753,7 @@ where It: Iterator {\n     type Item = Vec<It::Item>;\n \n     fn next(&mut self) -> Option<Vec<It::Item>> {\n-        let first = match self.it.next() {\n-            Some(e) => e,\n-            None => return None\n-        };\n+        let first = self.it.next()?;\n \n         let mut result = Vec::with_capacity(self.n);\n         result.push(first);"}, {"sha": "8d20a9e2717051dfd15ec7cd15615db737ecb858", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -119,10 +119,7 @@ fn parse_expected(\n     line: &str,\n     tag: &str,\n ) -> Option<(WhichLine, Error)> {\n-    let start = match line.find(tag) {\n-        Some(i) => i,\n-        None => return None,\n-    };\n+    let start = line.find(tag)?;\n     let (follow, adjusts) = if line[start + tag.len()..].chars().next().unwrap() == '|' {\n         (true, 0)\n     } else {"}, {"sha": "f4a82aeb307dc86410f8b4605525bd733dc918f1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -707,14 +707,8 @@ impl Config {\n \n     fn parse_custom_normalization(&self, mut line: &str, prefix: &str) -> Option<(String, String)> {\n         if self.parse_cfg_name_directive(line, prefix) == ParsedNameDirective::Match {\n-            let from = match parse_normalization_string(&mut line) {\n-                Some(s) => s,\n-                None => return None,\n-            };\n-            let to = match parse_normalization_string(&mut line) {\n-                Some(s) => s,\n-                None => return None,\n-            };\n+            let from = parse_normalization_string(&mut line)?;\n+            let to = parse_normalization_string(&mut line)?;\n             Some((from, to))\n         } else {\n             None\n@@ -873,14 +867,8 @@ fn expand_variables(mut value: String, config: &Config) -> String {\n /// ```\n fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     // FIXME support escapes in strings.\n-    let begin = match line.find('\"') {\n-        Some(i) => i + 1,\n-        None => return None,\n-    };\n-    let end = match line[begin..].find('\"') {\n-        Some(i) => i + begin,\n-        None => return None,\n-    };\n+    let begin = line.find('\"')? + 1;\n+    let end = line[begin..].find('\"')? + begin;\n     let result = line[begin..end].to_owned();\n     *line = &line[end + 1..];\n     Some(result)"}, {"sha": "e6bf9a285723b41ec3a5e594b2ca0d680ca38e37", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=64371f1cfee8d5ec8552ac8ee4cbdb4cd2629b91", "patch": "@@ -332,10 +332,7 @@ fn maybe_redirect(source: &str) -> Option<String> {\n     const REDIRECT: &'static str = \"<p>Redirecting to <a href=\";\n \n     let mut lines = source.lines();\n-    let redirect_line = match lines.nth(6) {\n-        Some(l) => l,\n-        None => return None,\n-    };\n+    let redirect_line = lines.nth(6)?;\n \n     redirect_line.find(REDIRECT).map(|i| {\n         let rest = &redirect_line[(i + REDIRECT.len() + 1)..];"}]}