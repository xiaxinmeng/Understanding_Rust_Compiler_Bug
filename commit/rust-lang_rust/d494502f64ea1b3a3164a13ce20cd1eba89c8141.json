{"sha": "d494502f64ea1b3a3164a13ce20cd1eba89c8141", "node_id": "C_kwDOAAsO6NoAKGQ0OTQ1MDJmNjRlYTFiM2EzMTY0YTEzY2UyMGNkMWViYTg5YzgxNDE", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-11-07T23:42:00Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-11-21T14:24:51Z"}, "message": "Fix tests", "tree": {"sha": "c0e55edbae9c993791bd8fa823af60a9798c5bb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e55edbae9c993791bd8fa823af60a9798c5bb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d494502f64ea1b3a3164a13ce20cd1eba89c8141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d494502f64ea1b3a3164a13ce20cd1eba89c8141", "html_url": "https://github.com/rust-lang/rust/commit/d494502f64ea1b3a3164a13ce20cd1eba89c8141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d494502f64ea1b3a3164a13ce20cd1eba89c8141/comments", "author": {}, "committer": {}, "parents": [{"sha": "fe212eca76f3976756e47355e4f0cb62984ec837", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe212eca76f3976756e47355e4f0cb62984ec837", "html_url": "https://github.com/rust-lang/rust/commit/fe212eca76f3976756e47355e4f0cb62984ec837"}], "stats": {"total": 328, "additions": 168, "deletions": 160}, "files": [{"sha": "c377247576917a2abfc0917c5dafafa1321791c2", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d494502f64ea1b3a3164a13ce20cd1eba89c8141/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d494502f64ea1b3a3164a13ce20cd1eba89c8141/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=d494502f64ea1b3a3164a13ce20cd1eba89c8141", "patch": "@@ -165,40 +165,48 @@ impl<'a> LintDiagnosticDerive<'a> {\n fn make_check(slug: &syn::Path) -> TokenStream {\n     quote! {\n         const _: () = {\n-            let krate = env!(\"CARGO_MANIFEST_DIR\").as_bytes();\n-\n-            let mut start = 0;\n-            while !(krate[start] == b'r'\n-                && krate[start + 1] == b'u'\n-                && krate[start + 2] == b's'\n-                && krate[start + 3] == b't'\n-                && krate[start + 4] == b'c'\n-                && krate[start + 5] == b'_')\n+            const krate_str: &str = match option_env!(\"CARGO_CRATE_NAME\") {\n+                Some(c) => c,\n+                None => \"\",\n+            };\n+            const krate: &[u8] = krate_str.as_bytes();\n+\n+            if krate.len() > 6\n+                && krate[0] == b'r'\n+                && krate[1] == b'u'\n+                && krate[2] == b's'\n+                && krate[3] == b't'\n+                && krate[4] == b'c'\n+                && krate[5] == b'_'\n             {\n-                if krate.len() == start + 5 {\n-                    panic!(concat!(\"crate does not contain \\\"rustc_\\\": \", env!(\"CARGO_MANIFEST_DIR\")));\n-                }\n-                start += 1;\n-            }\n-            start += 6;\n-\n-            let slug = stringify!(#slug).as_bytes();\n-\n-            let mut pos = 0;\n-            loop {\n-                let b = slug[pos];\n-                if krate.len() == start + pos {\n-                    if b != b'_' {\n-                        panic!(concat!(\"slug \\\"\", stringify!(#slug), \"\\\" does not match the crate (\", env!(\"CARGO_MANIFEST_DIR\") ,\") it is in\"));\n+                let slug = stringify!(#slug).as_bytes();\n+\n+                let mut pos = 0;\n+                loop {\n+                    let b = slug[pos];\n+                    if krate.len() == pos + 6 {\n+                        if b != b'_' {\n+                            panic!(concat!(\n+                                \"slug \\\"\",\n+                                stringify!(#slug),\n+                                \"\\\" does not match the crate it is in\"\n+                            ));\n+                        }\n+                        break;\n                     }\n-                    break\n-                }\n-                let a = krate[start+pos];\n-\n-                if a != b {\n-                    panic!(concat!(\"slug \\\"\", stringify!(#slug), \"\\\" does not match the crate (\", env!(\"CARGO_MANIFEST_DIR\") ,\") it is in\"));\n+                    let a = krate[pos + 6];\n+\n+                    if a != b {\n+                        panic!(concat!(\n+                            \"slug \\\"\",\n+                            stringify!(#slug),\n+                            \"\\\" does not match the crate it is in\"\n+                        ));\n+                    }\n+                    pos += 1;\n                 }\n-                pos += 1;\n+            } else {\n+                // Crate does not start with \"rustc_\"\n             }\n         };\n     }"}, {"sha": "cb4cd466590b626e5e2553dacda2df9e2047af42", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d494502f64ea1b3a3164a13ce20cd1eba89c8141/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d494502f64ea1b3a3164a13ce20cd1eba89c8141/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=d494502f64ea1b3a3164a13ce20cd1eba89c8141", "patch": "@@ -471,7 +471,7 @@ struct NoApplicability {\n }\n \n #[derive(Subdiagnostic)]\n-#[note(parser_add_paren)]\n+#[note(parse_add_paren)]\n struct Note;\n \n #[derive(Diagnostic)]"}, {"sha": "61ac456a6b649dc9bfe55a9b94bc15fdb604afe4", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/d494502f64ea1b3a3164a13ce20cd1eba89c8141/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d494502f64ea1b3a3164a13ce20cd1eba89c8141/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=d494502f64ea1b3a3164a13ce20cd1eba89c8141", "patch": "@@ -20,7 +20,7 @@ use rustc_macros::Subdiagnostic;\n use rustc_span::Span;\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct A {\n     #[primary_span]\n     span: Span,\n@@ -29,13 +29,13 @@ struct A {\n \n #[derive(Subdiagnostic)]\n enum B {\n-    #[label(parser_add_paren)]\n+    #[label(parse_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n     },\n-    #[label(parser_add_paren)]\n+    #[label(parse_add_paren)]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -44,7 +44,7 @@ enum B {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct C {\n     var: String,\n@@ -138,7 +138,7 @@ struct M {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren, code = \"...\")]\n+#[label(parse_add_paren, code = \"...\")]\n //~^ ERROR `#[label(code = ...)]` is not a valid attribute\n struct N {\n     #[primary_span]\n@@ -147,7 +147,7 @@ struct N {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren, applicability = \"machine-applicable\")]\n+#[label(parse_add_paren, applicability = \"machine-applicable\")]\n //~^ ERROR `#[label(applicability = ...)]` is not a valid attribute\n struct O {\n     #[primary_span]\n@@ -160,7 +160,7 @@ struct O {\n //~^ ERROR cannot find attribute `foo` in this scope\n //~^^ ERROR unsupported type attribute for subdiagnostic enum\n enum P {\n-    #[label(parser_add_paren)]\n+    #[label(parse_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -230,7 +230,7 @@ enum U {\n \n #[derive(Subdiagnostic)]\n enum V {\n-    #[label(parser_add_paren)]\n+    #[label(parse_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -244,7 +244,7 @@ enum V {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct W {\n     #[primary_span]\n@@ -253,7 +253,7 @@ struct W {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct X {\n     #[primary_span]\n     span: Span,\n@@ -263,7 +263,7 @@ struct X {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct Y {\n     #[primary_span]\n     span: Span,\n@@ -274,7 +274,7 @@ struct Y {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct Z {\n     #[primary_span]\n     span: Span,\n@@ -285,7 +285,7 @@ struct Z {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct AA {\n     #[primary_span]\n     span: Span,\n@@ -296,7 +296,7 @@ struct AA {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct AB {\n     #[primary_span]\n     span: Span,\n@@ -312,23 +312,23 @@ union AC {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n+#[label(parse_add_paren)]\n struct AD {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren, parser_add_paren)]\n-//~^ ERROR `#[label(parser_add_paren)]` is not a valid attribute\n+#[label(parse_add_paren, parse_add_paren)]\n+//~^ ERROR `#[label(parse_add_paren)]` is not a valid attribute\n struct AE {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct AF {\n     #[primary_span]\n     //~^ NOTE previously specified here\n@@ -346,7 +346,7 @@ struct AG {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\")]\n+#[suggestion(parse_add_paren, code = \"...\")]\n struct AH {\n     #[primary_span]\n     span: Span,\n@@ -357,15 +357,15 @@ struct AH {\n \n #[derive(Subdiagnostic)]\n enum AI {\n-    #[suggestion(parser_add_paren, code = \"...\")]\n+    #[suggestion(parse_add_paren, code = \"...\")]\n     A {\n         #[primary_span]\n         span: Span,\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n     },\n-    #[suggestion(parser_add_paren, code = \"...\")]\n+    #[suggestion(parse_add_paren, code = \"...\")]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -376,7 +376,7 @@ enum AI {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\", code = \"...\")]\n+#[suggestion(parse_add_paren, code = \"...\", code = \"...\")]\n //~^ ERROR specified multiple times\n //~^^ NOTE previously specified here\n struct AJ {\n@@ -387,7 +387,7 @@ struct AJ {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\")]\n+#[suggestion(parse_add_paren, code = \"...\")]\n struct AK {\n     #[primary_span]\n     span: Span,\n@@ -400,7 +400,7 @@ struct AK {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\")]\n+#[suggestion(parse_add_paren, code = \"...\")]\n struct AL {\n     #[primary_span]\n     span: Span,\n@@ -410,14 +410,14 @@ struct AL {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\")]\n+#[suggestion(parse_add_paren, code = \"...\")]\n struct AM {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren)]\n+#[suggestion(parse_add_paren)]\n //~^ ERROR suggestion without `code = \"...\"`\n struct AN {\n     #[primary_span]\n@@ -427,32 +427,32 @@ struct AN {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n+#[suggestion(parse_add_paren, code = \"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[help(parser_add_paren)]\n+#[help(parse_add_paren)]\n struct AP {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[note(parser_add_paren)]\n+#[note(parse_add_paren)]\n struct AQ;\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\")]\n+#[suggestion(parse_add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct AR {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+#[suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n@@ -462,7 +462,7 @@ struct AS {\n #[label]\n //~^ ERROR unsupported type attribute for subdiagnostic enum\n enum AT {\n-    #[label(parser_add_paren)]\n+    #[label(parse_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -471,15 +471,15 @@ enum AT {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n@@ -488,7 +488,7 @@ struct AV {\n \n #[derive(Subdiagnostic)]\n enum AW {\n-    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -498,7 +498,7 @@ enum AW {\n \n #[derive(Subdiagnostic)]\n enum AX {\n-    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n     //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]\n@@ -507,18 +507,18 @@ enum AX {\n }\n \n #[derive(Subdiagnostic)]\n-#[warning(parser_add_paren)]\n+#[warning(parse_add_paren)]\n struct AY {}\n \n #[derive(Subdiagnostic)]\n-#[warning(parser_add_paren)]\n+#[warning(parse_add_paren)]\n struct AZ {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"...\")]\n+#[suggestion(parse_add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct BA {\n     #[suggestion_part]\n@@ -533,31 +533,31 @@ struct BA {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n //~| ERROR `#[multipart_suggestion(code = ...)]` is not a valid attribute\n struct BBa {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n struct BBb {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n struct BBc {\n     #[suggestion_part()]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n struct BC {\n     #[primary_span]\n@@ -566,7 +566,7 @@ struct BC {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n struct BD {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n@@ -586,7 +586,7 @@ struct BD {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n struct BE {\n     #[suggestion_part(code = \"...\", code = \",,,\")]\n     //~^ ERROR specified multiple times\n@@ -595,7 +595,7 @@ struct BE {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n struct BF {\n     #[suggestion_part(code = \"(\")]\n     first: Span,\n@@ -604,7 +604,7 @@ struct BF {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n struct BG {\n     #[applicability]\n     appl: Applicability,\n@@ -615,7 +615,7 @@ struct BG {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n struct BH {\n     #[applicability]\n     //~^ ERROR `#[applicability]` has no effect\n@@ -627,14 +627,14 @@ struct BH {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n struct BI {\n     #[suggestion_part(code = \"\")]\n     spans: Vec<Span>,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct BJ {\n     #[primary_span]\n     span: Span,\n@@ -643,7 +643,7 @@ struct BJ {\n \n /// with a doc comment on the type..\n #[derive(Subdiagnostic)]\n-#[label(parser_add_paren)]\n+#[label(parse_add_paren)]\n struct BK {\n     /// ..and the field\n     #[primary_span]\n@@ -654,7 +654,7 @@ struct BK {\n #[derive(Subdiagnostic)]\n enum BL {\n     /// ..and the variant..\n-    #[label(parser_add_paren)]\n+    #[label(parse_add_paren)]\n     Foo {\n         /// ..and the field\n         #[primary_span]\n@@ -663,7 +663,7 @@ enum BL {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n struct BM {\n     #[suggestion_part(code(\"foo\"))]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -672,7 +672,7 @@ struct BM {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n struct BN {\n     #[suggestion_part(code(\"foo\", \"bar\"))]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -681,7 +681,7 @@ struct BN {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n struct BO {\n     #[suggestion_part(code(3))]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -690,7 +690,7 @@ struct BO {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n struct BP {\n     #[suggestion_part(code())]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -699,7 +699,7 @@ struct BP {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser_add_paren)]\n+#[multipart_suggestion(parse_add_paren)]\n struct BQ {\n     #[suggestion_part(code = 3)]\n     //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n@@ -708,42 +708,42 @@ struct BQ {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\")]\n+#[suggestion(parse_add_paren, code = \"\")]\n struct SuggestionStyleDefault {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style = \"short\")]\n+#[suggestion(parse_add_paren, code = \"\", style = \"short\")]\n struct SuggestionStyleShort {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style = \"hidden\")]\n+#[suggestion(parse_add_paren, code = \"\", style = \"hidden\")]\n struct SuggestionStyleHidden {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style = \"verbose\")]\n+#[suggestion(parse_add_paren, code = \"\", style = \"verbose\")]\n struct SuggestionStyleVerbose {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style = \"tool-only\")]\n+#[suggestion(parse_add_paren, code = \"\", style = \"tool-only\")]\n struct SuggestionStyleToolOnly {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+#[suggestion(parse_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n //~^ ERROR specified multiple times\n //~| NOTE previously specified here\n struct SuggestionStyleTwice {\n@@ -752,47 +752,47 @@ struct SuggestionStyleTwice {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_hidden(parser_add_paren, code = \"\")]\n+#[suggestion_hidden(parse_add_paren, code = \"\")]\n //~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n struct SuggestionStyleOldSyntax {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+#[suggestion_hidden(parse_add_paren, code = \"\", style = \"normal\")]\n //~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n struct SuggestionStyleOldAndNewSyntax {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n+#[suggestion(parse_add_paren, code = \"\", style = \"foo\")]\n //~^ ERROR invalid suggestion style\n struct SuggestionStyleInvalid1 {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style = 42)]\n+#[suggestion(parse_add_paren, code = \"\", style = 42)]\n //~^ ERROR `#[suggestion(style = ...)]` is not a valid attribute\n struct SuggestionStyleInvalid2 {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style)]\n+#[suggestion(parse_add_paren, code = \"\", style)]\n //~^ ERROR `#[suggestion(style)]` is not a valid attribute\n struct SuggestionStyleInvalid3 {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n+#[suggestion(parse_add_paren, code = \"\", style(\"foo\"))]\n //~^ ERROR `#[suggestion(style(...))]` is not a valid attribute\n struct SuggestionStyleInvalid4 {\n     #[primary_span]"}, {"sha": "b594fa6cde1e454e54600396904b3985c5624c68", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/d494502f64ea1b3a3164a13ce20cd1eba89c8141/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d494502f64ea1b3a3164a13ce20cd1eba89c8141/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=d494502f64ea1b3a3164a13ce20cd1eba89c8141", "patch": "@@ -1,7 +1,7 @@\n error: label without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:47:1\n    |\n-LL | / #[label(parser_add_paren)]\n+LL | / #[label(parse_add_paren)]\n LL | |\n LL | | struct C {\n LL | |     var: String,\n@@ -81,16 +81,16 @@ LL | #[label()]\n    | ^^^^^^^^^^\n \n error: `#[label(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:141:27\n+  --> $DIR/subdiagnostic-derive.rs:141:26\n    |\n-LL | #[label(parser_add_paren, code = \"...\")]\n-   |                           ^^^^^^^^^^^^\n+LL | #[label(parse_add_paren, code = \"...\")]\n+   |                          ^^^^^^^^^^^^\n \n error: `#[label(applicability = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:150:27\n+  --> $DIR/subdiagnostic-derive.rs:150:26\n    |\n-LL | #[label(parser_add_paren, applicability = \"machine-applicable\")]\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parse_add_paren, applicability = \"machine-applicable\")]\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n   --> $DIR/subdiagnostic-derive.rs:159:1\n@@ -143,7 +143,7 @@ LL |     #[primary_span]\n error: label without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:247:1\n    |\n-LL | / #[label(parser_add_paren)]\n+LL | / #[label(parse_add_paren)]\n LL | |\n LL | | struct W {\n LL | |     #[primary_span]\n@@ -190,11 +190,11 @@ LL | |     b: u64,\n LL | | }\n    | |_^\n \n-error: `#[label(parser_add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:323:27\n+error: `#[label(parse_add_paren)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:323:26\n    |\n-LL | #[label(parser_add_paren, parser_add_paren)]\n-   |                           ^^^^^^^^^^^^^^^^\n+LL | #[label(parse_add_paren, parse_add_paren)]\n+   |                          ^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n@@ -217,16 +217,16 @@ LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:379:46\n+  --> $DIR/subdiagnostic-derive.rs:379:45\n    |\n-LL | #[suggestion(parser_add_paren, code = \"...\", code = \"...\")]\n-   |                                              ^^^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"...\", code = \"...\")]\n+   |                                             ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:379:32\n+  --> $DIR/subdiagnostic-derive.rs:379:31\n    |\n-LL | #[suggestion(parser_add_paren, code = \"...\", code = \"...\")]\n-   |                                ^^^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"...\", code = \"...\")]\n+   |                               ^^^^^^^^^^^^\n \n error: specified multiple times\n   --> $DIR/subdiagnostic-derive.rs:397:5\n@@ -249,19 +249,19 @@ LL |     #[applicability]\n error: suggestion without `code = \"...\"`\n   --> $DIR/subdiagnostic-derive.rs:420:1\n    |\n-LL | #[suggestion(parser_add_paren)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:430:46\n+  --> $DIR/subdiagnostic-derive.rs:430:45\n    |\n-LL | #[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"...\", applicability = \"foo\")]\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:448:1\n    |\n-LL | / #[suggestion(parser_add_paren, code = \"...\")]\n+LL | / #[suggestion(parse_add_paren, code = \"...\")]\n LL | |\n LL | | struct AR {\n LL | |     var: String,\n@@ -275,16 +275,16 @@ LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:482:39\n+  --> $DIR/subdiagnostic-derive.rs:482:38\n    |\n-LL | #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n-   |                                       ^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                      ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:501:43\n+  --> $DIR/subdiagnostic-derive.rs:501:42\n    |\n-LL |     #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n-   |                                           ^^^^^^^\n+LL |     #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                          ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:524:5\n@@ -305,7 +305,7 @@ LL |     #[suggestion_part(code = \"...\")]\n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:521:1\n    |\n-LL | / #[suggestion(parser_add_paren, code = \"...\")]\n+LL | / #[suggestion(parse_add_paren, code = \"...\")]\n LL | |\n LL | | struct BA {\n LL | |     #[suggestion_part]\n@@ -315,17 +315,17 @@ LL | | }\n    | |_^\n \n error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:536:42\n+  --> $DIR/subdiagnostic-derive.rs:536:41\n    |\n-LL | #[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n-   |                                          ^^^^^^^^^^^^\n+LL | #[multipart_suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+   |                                         ^^^^^^^^^^^^\n    |\n    = help: only `style` and `applicability` are valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n   --> $DIR/subdiagnostic-derive.rs:536:1\n    |\n-LL | / #[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+LL | / #[multipart_suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n LL | |\n LL | | struct BBa {\n@@ -356,7 +356,7 @@ LL |     #[primary_span]\n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n   --> $DIR/subdiagnostic-derive.rs:560:1\n    |\n-LL | / #[multipart_suggestion(parser_add_paren)]\n+LL | / #[multipart_suggestion(parse_add_paren)]\n LL | |\n LL | | struct BC {\n LL | |     #[primary_span]\n@@ -446,60 +446,60 @@ LL |     #[suggestion_part(code = 3)]\n    |                       ^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:746:61\n+  --> $DIR/subdiagnostic-derive.rs:746:60\n    |\n-LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n-   |                                                             ^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                                            ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:746:43\n+  --> $DIR/subdiagnostic-derive.rs:746:42\n    |\n-LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n-   |                                           ^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                          ^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_hidden(...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:755:1\n    |\n-LL | #[suggestion_hidden(parser_add_paren, code = \"\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion_hidden(parse_add_paren, code = \"\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n \n error: `#[suggestion_hidden(...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:763:1\n    |\n-LL | #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion_hidden(parse_add_paren, code = \"\", style = \"normal\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n \n error: invalid suggestion style\n-  --> $DIR/subdiagnostic-derive.rs:771:51\n+  --> $DIR/subdiagnostic-derive.rs:771:50\n    |\n-LL | #[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n-   |                                                   ^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"\", style = \"foo\")]\n+   |                                                  ^^^^^\n    |\n    = help: valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\n \n error: `#[suggestion(style = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:779:43\n+  --> $DIR/subdiagnostic-derive.rs:779:42\n    |\n-LL | #[suggestion(parser_add_paren, code = \"\", style = 42)]\n-   |                                           ^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"\", style = 42)]\n+   |                                          ^^^^^^^^^^\n \n error: `#[suggestion(style)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:787:43\n+  --> $DIR/subdiagnostic-derive.rs:787:42\n    |\n-LL | #[suggestion(parser_add_paren, code = \"\", style)]\n-   |                                           ^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"\", style)]\n+   |                                          ^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[suggestion(style(...))]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:795:43\n+  --> $DIR/subdiagnostic-derive.rs:795:42\n    |\n-LL | #[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n-   |                                           ^^^^^^^^^^^^\n+LL | #[suggestion(parse_add_paren, code = \"\", style(\"foo\"))]\n+   |                                          ^^^^^^^^^^^^\n \n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3"}]}