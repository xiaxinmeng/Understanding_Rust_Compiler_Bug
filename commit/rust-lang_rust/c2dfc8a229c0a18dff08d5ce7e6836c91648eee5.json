{"sha": "c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZGZjOGEyMjljMGExOGRmZjA4ZDVjZTdlNjgzNmM5MTY0OGVlZTU=", "commit": {"author": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-13T18:33:49Z"}, "committer": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-14T08:04:38Z"}, "message": "Modifies runnables test to use multi-workspace root", "tree": {"sha": "b43609791839b9ba98f281fda2efbb8ced1168b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b43609791839b9ba98f281fda2efbb8ced1168b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "html_url": "https://github.com/rust-lang/rust/commit/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5/comments", "author": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "html_url": "https://github.com/rust-lang/rust/commit/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2"}], "stats": {"total": 97, "additions": 68, "deletions": 29}, "files": [{"sha": "6f37a980db673b53e404c2c6aaba68442b9216ad", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "patch": "@@ -14,7 +14,7 @@ use ra_lsp_server::req::{\n use serde_json::json;\n use tempfile::TempDir;\n \n-use crate::support::{project, project_with_tmpdir};\n+use crate::support::{project, Project};\n \n const LOG: &'static str = \"\";\n \n@@ -95,25 +95,34 @@ fn foo() {\n \n #[test]\n fn test_runnables_project() {\n-    let server = project(\n-        r#\"\n-//- Cargo.toml\n+    let code = r#\"\n+//- foo/Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- src/lib.rs\n+//- foo/src/lib.rs\n pub fn foo() {}\n \n-//- tests/spam.rs\n+//- foo/tests/spam.rs\n #[test]\n fn test_eggs() {}\n-\"#,\n-    );\n+\n+//- bar/Cargo.toml\n+[package]\n+name = \"bar\"\n+version = \"0.0.0\"\n+\n+//- bar/src/main.rs\n+fn main() {}\n+\"#;\n+\n+    let server = Project::with_fixture(code).root(\"foo\").root(\"bar\").server();\n+\n     server.wait_until_workspace_is_loaded();\n     server.request::<Runnables>(\n         RunnablesParams {\n-            text_document: server.doc_id(\"tests/spam.rs\"),\n+            text_document: server.doc_id(\"foo/tests/spam.rs\"),\n             position: None,\n         },\n         json!([\n@@ -126,7 +135,7 @@ fn test_eggs() {}\n               \"end\": { \"character\": 17, \"line\": 1 },\n               \"start\": { \"character\": 0, \"line\": 0 }\n             },\n-            \"cwd\": server.path()\n+            \"cwd\": server.path().join(\"foo\")\n           },\n           {\n             \"args\": [\n@@ -138,7 +147,7 @@ fn test_eggs() {}\n             ],\n             \"bin\": \"cargo\",\n             \"env\": {},\n-            \"cwd\": server.path(),\n+            \"cwd\": server.path().join(\"foo\"),\n             \"label\": \"cargo check -p foo\",\n             \"range\": {\n               \"end\": {\n@@ -287,7 +296,9 @@ fn main() {{}}\n \"#,\n         PROJECT = project.to_string(),\n     );\n-    let server = project_with_tmpdir(tmp_dir, &code);\n+\n+    let server = Project::with_fixture(&code).tmp_dir(tmp_dir).server();\n+\n     server.wait_until_workspace_is_loaded();\n     let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n     server.request::<CodeActionRequest>("}, {"sha": "b0788270026334e750859468256607295f7ff430", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "patch": "@@ -26,26 +26,51 @@ use ra_lsp_server::{\n     InitializationOptions,\n };\n \n-pub fn project(fixture: &str) -> Server {\n-    let tmp_dir = TempDir::new().unwrap();\n-    project_with_tmpdir(tmp_dir, fixture)\n+pub struct Project<'a> {\n+    fixture: &'a str,\n+    tmp_dir: Option<TempDir>,\n+    roots: Vec<PathBuf>,\n }\n \n-pub fn project_with_tmpdir(tmp_dir: TempDir, fixture: &str) -> Server {\n-    static INIT: Once = Once::new();\n-    INIT.call_once(|| {\n-        let _ = Logger::with_env_or_str(crate::LOG).start().unwrap();\n-    });\n+impl<'a> Project<'a> {\n+    pub fn with_fixture(fixture: &str) -> Project {\n+        Project { fixture, tmp_dir: None, roots: vec![] }\n+    }\n \n-    let mut paths = vec![];\n+    pub fn tmp_dir(mut self, tmp_dir: TempDir) -> Project<'a> {\n+        self.tmp_dir = Some(tmp_dir);\n+        self\n+    }\n \n-    for entry in parse_fixture(fixture) {\n-        let path = tmp_dir.path().join(entry.meta);\n-        fs::create_dir_all(path.parent().unwrap()).unwrap();\n-        fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n-        paths.push((path, entry.text));\n+    pub fn root(mut self, path: &str) -> Project<'a> {\n+        self.roots.push(path.into());\n+        self\n+    }\n+\n+    pub fn server(self) -> Server {\n+        let tmp_dir = self.tmp_dir.unwrap_or_else(|| TempDir::new().unwrap());\n+        static INIT: Once = Once::new();\n+        INIT.call_once(|| {\n+            let _ = Logger::with_env_or_str(crate::LOG).start().unwrap();\n+        });\n+\n+        let mut paths = vec![];\n+\n+        for entry in parse_fixture(self.fixture) {\n+            let path = tmp_dir.path().join(entry.meta);\n+            fs::create_dir_all(path.parent().unwrap()).unwrap();\n+            fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n+            paths.push((path, entry.text));\n+        }\n+\n+        let roots = self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect();\n+\n+        Server::new(tmp_dir, roots, paths)\n     }\n-    Server::new(tmp_dir, paths)\n+}\n+\n+pub fn project(fixture: &str) -> Server {\n+    Project::with_fixture(fixture).server()\n }\n \n pub struct Server {\n@@ -56,14 +81,17 @@ pub struct Server {\n }\n \n impl Server {\n-    fn new(dir: TempDir, files: Vec<(PathBuf, String)>) -> Server {\n+    fn new(dir: TempDir, roots: Vec<PathBuf>, files: Vec<(PathBuf, String)>) -> Server {\n         let path = dir.path().to_path_buf();\n+\n+        let roots = if roots.is_empty() { vec![path] } else { roots };\n+\n         let worker = Worker::<RawMessage, RawMessage>::spawn(\n             \"test server\",\n             128,\n             move |mut msg_receiver, mut msg_sender| {\n                 main_loop(\n-                    vec![path],\n+                    roots,\n                     InitializationOptions::default(),\n                     &mut msg_receiver,\n                     &mut msg_sender,"}]}