{"sha": "794ee03390af915898029411682357ad64662ff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NGVlMDMzOTBhZjkxNTg5ODAyOTQxMTY4MjM1N2FkNjQ2NjJmZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-28T11:26:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-28T11:26:48Z"}, "message": "auto merge of #13154 : tomassedovic/rust/patch-1, r=alexcrichton\n\nHashMap and HashSet require keys to implement TotalEq. This makes it possible to use TypeId as a HashMap key again.\r\n\r\nQuestion for reviewers: assuming we want to support `HashMap<TypeId, whatever>`, would it make sense to add a relevant test? If so, should it go to libcollections or libstd?", "tree": {"sha": "ed18ccf14fbe63f1eb00910ec350a68ae7a783ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed18ccf14fbe63f1eb00910ec350a68ae7a783ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/794ee03390af915898029411682357ad64662ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/794ee03390af915898029411682357ad64662ff4", "html_url": "https://github.com/rust-lang/rust/commit/794ee03390af915898029411682357ad64662ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/794ee03390af915898029411682357ad64662ff4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ea7962f726b30ad466c6574531c24f741adbc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ea7962f726b30ad466c6574531c24f741adbc0", "html_url": "https://github.com/rust-lang/rust/commit/b6ea7962f726b30ad466c6574531c24f741adbc0"}, {"sha": "4d6c47bcced6748f0d982ea734ccba3a815d8844", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6c47bcced6748f0d982ea734ccba3a815d8844", "html_url": "https://github.com/rust-lang/rust/commit/4d6c47bcced6748f0d982ea734ccba3a815d8844"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "72b0c303ccd067e14b2e0087b804f026e81a976f", "filename": "src/libstd/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/794ee03390af915898029411682357ad64662ff4/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794ee03390af915898029411682357ad64662ff4/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=794ee03390af915898029411682357ad64662ff4", "patch": "@@ -451,7 +451,7 @@ extern \"rust-intrinsic\" {\n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and\n                   // middle/lang_items.rs\n-#[deriving(Eq, Hash, Show)]\n+#[deriving(Eq, Hash, Show, TotalEq)]\n #[cfg(not(test))]\n pub struct TypeId {\n     priv t: u64,"}]}