{"sha": "d9aa20fb3135436706ba8b9dd387edfde9127ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YWEyMGZiMzEzNTQzNjcwNmJhOGI5ZGQzODdlZGZkZTkxMjdkZGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-21T11:24:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-21T11:24:56Z"}, "message": "add some missing trailing full stops that slipped through review", "tree": {"sha": "2c87db71e5435d4aa9eb55a081d3164832bf9438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c87db71e5435d4aa9eb55a081d3164832bf9438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9aa20fb3135436706ba8b9dd387edfde9127ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9aa20fb3135436706ba8b9dd387edfde9127ddb", "html_url": "https://github.com/rust-lang/rust/commit/d9aa20fb3135436706ba8b9dd387edfde9127ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9aa20fb3135436706ba8b9dd387edfde9127ddb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3923bebc8ff67e1053b9e6e0ba282cf2834187", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3923bebc8ff67e1053b9e6e0ba282cf2834187", "html_url": "https://github.com/rust-lang/rust/commit/af3923bebc8ff67e1053b9e6e0ba282cf2834187"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7904e1cc123b359fbc08603f7325c5abbad80b5d", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa20fb3135436706ba8b9dd387edfde9127ddb/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa20fb3135436706ba8b9dd387edfde9127ddb/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d9aa20fb3135436706ba8b9dd387edfde9127ddb", "patch": "@@ -91,7 +91,7 @@ pub struct Evaluator<'tcx> {\n     pub(crate) argv: Option<Pointer<Tag>>,\n     pub(crate) cmd_line: Option<Pointer<Tag>>,\n \n-    /// Last OS error location in memory. It is a 32-bit integer\n+    /// Last OS error location in memory. It is a 32-bit integer.\n     pub(crate) last_error: Option<MPlaceTy<'tcx, Tag>>,\n \n     /// TLS state."}, {"sha": "902f5f609d18e75e8eb5f8f0fdb3119f3930f7b2", "filename": "src/shims/fs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa20fb3135436706ba8b9dd387edfde9127ddb/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa20fb3135436706ba8b9dd387edfde9127ddb/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=d9aa20fb3135436706ba8b9dd387edfde9127ddb", "patch": "@@ -21,7 +21,7 @@ impl Default for FileHandler {\n     fn default() -> Self {\n         FileHandler {\n             handles: Default::default(),\n-            // 0, 1 and 2 are reserved for stdin, stdout and stderr\n+            // 0, 1 and 2 are reserved for stdin, stdout and stderr.\n             low: 3,\n         }\n     }\n@@ -123,7 +123,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let cmd = this.read_scalar(cmd_op)?.to_i32()?;\n-        // We only support getting the flags for a descriptor\n+        // We only support getting the flags for a descriptor.\n         if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n             // Currently this is the only flag that `F_GETFD` returns. It is OK to just return the\n             // `FD_CLOEXEC` value without checking if the flag is set for the file because `std`\n@@ -159,16 +159,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"read\")?;\n \n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n-        // Reading zero bytes should not change `buf`\n+        // Reading zero bytes should not change `buf`.\n         if count == 0 {\n             return Ok(0);\n         }\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let buf_scalar = this.read_scalar(buf_op)?.not_undef()?;\n \n-        // Remove the file handle to avoid borrowing issues\n+        // Remove the file handle to avoid borrowing issues.\n         this.remove_handle_and(fd, |mut handle, this| {\n-            // Don't use `?` to avoid returning before reinserting the handle\n+            // Don't use `?` to avoid returning before reinserting the handle.\n             let bytes = this.force_ptr(buf_scalar).and_then(|buf| {\n                 this.memory\n                     .get_mut(buf.alloc_id)?\n@@ -191,7 +191,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"write\")?;\n \n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n-        // Writing zero bytes should not change `buf`\n+        // Writing zero bytes should not change `buf`.\n         if count == 0 {\n             return Ok(0);\n         }\n@@ -232,7 +232,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// and sets `Evaluator::last_error` to `libc::EBADF` (invalid file descriptor).\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n-    /// functions return different integer types (like `read`, that returns an `i64`)\n+    /// functions return different integer types (like `read`, that returns an `i64`).\n     fn get_handle_and<F, T: From<i32>>(&mut self, fd: i32, f: F) -> InterpResult<'tcx, T>\n     where\n         F: Fn(&FileHandle) -> InterpResult<'tcx, T>,\n@@ -256,7 +256,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// and sets `Evaluator::last_error` to `libc::EBADF` (invalid file descriptor).\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n-    /// functions return different integer types (like `read`, that returns an `i64`)\n+    /// functions return different integer types (like `read`, that returns an `i64`).\n     fn remove_handle_and<F, T: From<i32>>(&mut self, fd: i32, mut f: F) -> InterpResult<'tcx, T>\n     where\n         F: FnMut(FileHandle, &mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx, T>,"}]}