{"sha": "790604adad9fd02b92c59d1f937edb902a58b036", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MDYwNGFkYWQ5ZmQwMmI5MmM1OWQxZjkzN2VkYjkwMmE1OGIwMzY=", "commit": {"author": {"name": "Sunjay Varma", "email": "sunjay@users.noreply.github.com", "date": "2017-10-18T02:51:10Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-18T03:05:45Z"}, "message": "Updating the instructions for when a tool breaks to use the new toolstate feature", "tree": {"sha": "5846bf4c37f6484e7d41077d3464d69a7a08f5a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5846bf4c37f6484e7d41077d3464d69a7a08f5a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790604adad9fd02b92c59d1f937edb902a58b036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790604adad9fd02b92c59d1f937edb902a58b036", "html_url": "https://github.com/rust-lang/rust/commit/790604adad9fd02b92c59d1f937edb902a58b036", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790604adad9fd02b92c59d1f937edb902a58b036/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f90c3a2cfb458c94d514345e701696d74d988c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f90c3a2cfb458c94d514345e701696d74d988c8", "html_url": "https://github.com/rust-lang/rust/commit/3f90c3a2cfb458c94d514345e701696d74d988c8"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "0f6cba7a95e79a7010f432c415090d278b779018", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/790604adad9fd02b92c59d1f937edb902a58b036/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/790604adad9fd02b92c59d1f937edb902a58b036/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=790604adad9fd02b92c59d1f937edb902a58b036", "patch": "@@ -363,46 +363,56 @@ outside the submodule.\n It can also be more convenient during development to set `submodules = false`\n in the `config.toml` to prevent `x.py` from resetting to the original branch.\n \n-#### Breaking rustfmt or rls\n-[breaking-rustfmt-or-rls]: #breaking-rustfmt-or-rls\n+#### Breaking Tools Built With The Compiler\n+[breaking-tools-built-with-the-compiler]: #breaking-tools-built-with-the-compiler\n \n-Rust's build system also builds the\n-[RLS](https://github.com/rust-lang-nursery/rls)\n-and [rustfmt](https://github.com/rust-lang-nursery/rustfmt). If these tools\n+Rust's build system builds a number of tools that make use of the\n+internals of the compiler. This includes clippy,\n+[RLS](https://github.com/rust-lang-nursery/rls) and\n+[rustfmt](https://github.com/rust-lang-nursery/rustfmt). If these tools\n break because of your changes, you may run into a sort of \"chicken and egg\"\n-problem. Both tools rely on the latest compiler to be built so you can't update\n-them until the changes you are making to the compiler land. In the meantime, you\n-can't land your changes to the compiler because the build won't pass until those\n-tools are fixed.\n+problem. These tools rely on the latest compiler to be built so you can't update\n+them to reflect your changes to the compiler until those changes are merged into\n+the compiler. At the same time, you can't get your changes merged into the compiler\n+because the rust-lang/rust build won't pass until those tools build and pass their\n+tests.\n \n-That means that, in the default state, you can't update the compiler without\n-fixing rustfmt and rls first.\n+That means that, in the default state, you can't update the compiler without first\n+fixing rustfmt, rls and the other tools that the compiler builds.\n \n-When this happens, follow these steps:\n+Luckily, a feature was [added to Rust's build](https://github.com/rust-lang/rust/pull/45243)\n+to make all of this easy to handle. The idea is that you mark the tools as \"broken\",\n+so that the rust-lang/rust build passes without trying to build them, then land the change\n+in the compiler, wait for a nightly, and go update the tools that you broke. Once you're done\n+and the tools are working again, you go back in the compiler and change the tools back\n+from \"broken\".\n \n-1. First, if it doesn't exist already, create a `config.toml` by copying\n+This should avoid a bunch of synchronization dances and is also much easier on contributors as\n+there's no need to block on rls/rustfmt/other tools changes going upstream.\n+\n+Here are those same steps in detail:\n+\n+1. (optional) First, if it doesn't exist already, create a `config.toml` by copying\n    `config.toml.example` in the root directory of the Rust repository.\n    Set `submodules = false` in the `[build]` section. This will prevent `x.py`\n    from resetting to the original branch after you make your changes. If you\n    need to [update any submodules to their latest versions][updating-submodules],\n    see the section of this file about that for more information.\n-2. Run `./x.py test src/tools/rustfmt`. Fix any errors in the submodule itself\n-   (the `src/tools/rustfmt` directory) until it works.\n-3. Run `./x.py test src/tools/rls`. Fix any errors in the submodule itself\n-   (the `src/tools/rls` directory) until it works.\n-4. Make a commit for `rustfmt`, if necessary, and send a PR to the master\n-   branch of rust-lang-nursery/rustfmt\n-5. Do the same, if necessary for the RLS\n-6. A maintainer of rls/rustfmt will **not** merge the PR. The PR can't be\n-   merged because CI will be broken. Instead a new branch will be created,\n-   and the PR will be pushed to the branch (the PR is left open)\n-7. On your branch, update the rls/rustfmt submodules to these branches\n-8. Commit the changes, update your PR to rust-lang/rust\n-9. Wait for the branch to merge\n-10. Wait for a nightly\n-11. A maintainer of rls/rustfmt will merge the original PRs to rls/rustfmt\n-12. Eventually the rls/rustfmt submodules will get re-updated back to the\n-    master branch\n+2. (optional) Run `./x.py test src/tools/rustfmt` (substituting the submodule\n+   that broke for `rustfmt`). Fix any errors in the submodule (and possibly others).\n+3. (optional) Make commits for your changes and send them to upstream repositories as a PR.\n+4. (optional) Maintainers of these submodules will **not** merge the PR. The PR can't be\n+   merged because CI will be broken. You'll want to write a message on the PR referencing\n+   your change, and how the PR should be merged once your change makes it into a nightly.\n+5. Update `src/tools/toolstate.toml` to indicate that the tool in question is \"broken\",\n+   that will disable building it on CI. See the documentation in that file for the exact\n+   configuration values you can use.\n+6. Commit the changes to `src/tools/toolstate.toml`, **do not update submodules in your commit**,\n+   and then update the PR you have for rust-lang/rust.\n+7. Wait for your PR to merge.\n+8. Wait for a nightly\n+9. (optional) Help land your PR on the upstream repository now that your changes are in nightly.\n+10. (optional) Send a PR to rust-lang/rust updating the submodule, reverting `src/tools/toolstate.toml` back to a \"building\" or \"testing\" state.\n \n #### Updating submodules\n [updating-submodules]: #updating-submodules"}]}