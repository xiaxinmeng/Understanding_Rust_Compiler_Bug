{"sha": "87ec3b24f62edc6324281a2b851a87cf1d94c0dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWMzYjI0ZjYyZWRjNjMyNDI4MWEyYjg1MWE4N2NmMWQ5NGMwZGM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-02T17:56:14Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-21T19:03:34Z"}, "message": "Activate two phase borrows on all uses\n\nTwo phase borrows are only used for adjustments now, so there's no need\nto not activate them for shared borrows.", "tree": {"sha": "5b4d0d2ee70451949a4e332f6d13a23a922f69d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b4d0d2ee70451949a4e332f6d13a23a922f69d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ec3b24f62edc6324281a2b851a87cf1d94c0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ec3b24f62edc6324281a2b851a87cf1d94c0dc", "html_url": "https://github.com/rust-lang/rust/commit/87ec3b24f62edc6324281a2b851a87cf1d94c0dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ec3b24f62edc6324281a2b851a87cf1d94c0dc/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c840ae18dc53d55192269adee39d77a8652b2f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c840ae18dc53d55192269adee39d77a8652b2f7", "html_url": "https://github.com/rust-lang/rust/commit/2c840ae18dc53d55192269adee39d77a8652b2f7"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "2a3a616317c172a86692d4eb7ab35545f3d44a08", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/87ec3b24f62edc6324281a2b851a87cf1d94c0dc/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ec3b24f62edc6324281a2b851a87cf1d94c0dc/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=87ec3b24f62edc6324281a2b851a87cf1d94c0dc", "patch": "@@ -3,9 +3,7 @@ use crate::borrow_check::nll::ToRegionVid;\n use crate::dataflow::indexes::BorrowIndex;\n use crate::dataflow::move_paths::MoveData;\n use rustc::mir::traversal;\n-use rustc::mir::visit::{\n-    PlaceContext, Visitor, NonUseContext, MutatingUseContext, NonMutatingUseContext\n-};\n+use rustc::mir::visit::{PlaceContext, Visitor, NonUseContext, MutatingUseContext};\n use rustc::mir::{self, Location, Mir, Local};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -257,31 +255,21 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n                 );\n             }\n \n-            // Otherwise, this is the unique later use\n-            // that we expect.\n-            borrow_data.activation_location = match context {\n-                // The use of TMP in a shared borrow does not\n-                // count as an actual activation.\n-                PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-                PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) =>\n-                    TwoPhaseActivation::NotActivated,\n-                _ => {\n-                    // Double check: This borrow is indeed a two-phase borrow (that is,\n-                    // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n-                    // we've not found any other activations (checked above).\n-                    assert_eq!(\n-                        borrow_data.activation_location,\n-                        TwoPhaseActivation::NotActivated,\n-                        \"never found an activation for this borrow!\",\n-                    );\n-\n-                    self.activation_map\n-                        .entry(location)\n-                        .or_default()\n-                        .push(borrow_index);\n-                    TwoPhaseActivation::ActivatedAt(location)\n-                }\n-            };\n+            // Otherwise, this is the unique later use that we expect.\n+            // Double check: This borrow is indeed a two-phase borrow (that is,\n+            // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n+            // we've not found any other activations (checked above).\n+            assert_eq!(\n+                borrow_data.activation_location,\n+                TwoPhaseActivation::NotActivated,\n+                \"never found an activation for this borrow!\",\n+            );\n+            self.activation_map\n+                .entry(location)\n+                .or_default()\n+                .push(borrow_index);\n+\n+            borrow_data.activation_location = TwoPhaseActivation::ActivatedAt(location);\n         }\n     }\n "}]}