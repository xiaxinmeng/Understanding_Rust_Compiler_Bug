{"sha": "997fe0d57e8cd5025011340c91f26dbc4a87a881", "node_id": "C_kwDOAAsO6NoAKDk5N2ZlMGQ1N2U4Y2Q1MDI1MDExMzQwYzkxZjI2ZGJjNGE4N2E4ODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T21:20:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T21:20:39Z"}, "message": "Auto merge of #107386 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nr? `@Manishearth`", "tree": {"sha": "407473a920ae27562396c86825d14d6f731684d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407473a920ae27562396c86825d14d6f731684d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/997fe0d57e8cd5025011340c91f26dbc4a87a881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/997fe0d57e8cd5025011340c91f26dbc4a87a881", "html_url": "https://github.com/rust-lang/rust/commit/997fe0d57e8cd5025011340c91f26dbc4a87a881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/997fe0d57e8cd5025011340c91f26dbc4a87a881/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb90528c06e1e350c77bca5ff2c0929d7f5c8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb90528c06e1e350c77bca5ff2c0929d7f5c8c3", "html_url": "https://github.com/rust-lang/rust/commit/bcb90528c06e1e350c77bca5ff2c0929d7f5c8c3"}, {"sha": "5c7a65251a178d878995b5a9cb1e6eeac7506af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7a65251a178d878995b5a9cb1e6eeac7506af2", "html_url": "https://github.com/rust-lang/rust/commit/5c7a65251a178d878995b5a9cb1e6eeac7506af2"}], "stats": {"total": 2466, "additions": 2212, "deletions": 254}, "files": [{"sha": "24e677ce8e1706bebd4def66c339c72468180845", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -157,6 +157,11 @@ jobs:\n     - name: Test metadata collection\n       run: cargo collect-metadata\n \n+    - name: Test lint_configuration.md is up-to-date\n+      run: |\n+        echo \"run \\`cargo collect-metadata\\` if this fails\"\n+        git update-index --refresh\n+\n   integration_build:\n     needs: changelog\n     runs-on: ubuntu-latest"}, {"sha": "e2cde09776f4cad76d48facb72a762f2c942063d", "filename": "CHANGELOG.md", "status": "modified", "additions": 197, "deletions": 2, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -6,11 +6,204 @@ document.\n \n ## Unreleased / Beta / In Rust Nightly\n \n-[4f142aa1...master](https://github.com/rust-lang/rust-clippy/compare/4f142aa1...master)\n+[d822110d...master](https://github.com/rust-lang/rust-clippy/compare/d822110d...master)\n+\n+## Rust 1.67\n+\n+Current stable, released 2023-01-26\n+\n+[4f142aa1...d822110d](https://github.com/rust-lang/rust-clippy/compare/4f142aa1...d822110d)\n+\n+### New Lints\n+\n+* [`seek_from_current`]\n+  [#9681](https://github.com/rust-lang/rust-clippy/pull/9681)\n+* [`from_raw_with_void_ptr`]\n+  [#9690](https://github.com/rust-lang/rust-clippy/pull/9690)\n+* [`misnamed_getters`]\n+  [#9770](https://github.com/rust-lang/rust-clippy/pull/9770)\n+* [`seek_to_start_instead_of_rewind`]\n+  [#9667](https://github.com/rust-lang/rust-clippy/pull/9667)\n+* [`suspicious_xor_used_as_pow`]\n+  [#9506](https://github.com/rust-lang/rust-clippy/pull/9506)\n+* [`unnecessary_safety_doc`]\n+  [#9822](https://github.com/rust-lang/rust-clippy/pull/9822)\n+* [`unchecked_duration_subtraction`]\n+  [#9570](https://github.com/rust-lang/rust-clippy/pull/9570)\n+* [`manual_is_ascii_check`]\n+  [#9765](https://github.com/rust-lang/rust-clippy/pull/9765)\n+* [`unnecessary_safety_comment`]\n+  [#9851](https://github.com/rust-lang/rust-clippy/pull/9851)\n+* [`let_underscore_future`]\n+  [#9760](https://github.com/rust-lang/rust-clippy/pull/9760)\n+* [`manual_let_else`]\n+  [#8437](https://github.com/rust-lang/rust-clippy/pull/8437)\n+\n+### Moves and Deprecations\n+\n+* Moved [`uninlined_format_args`] to `style` (Now warn-by-default)\n+  [#9865](https://github.com/rust-lang/rust-clippy/pull/9865)\n+* Moved [`needless_collect`] to `nursery` (Now allow-by-default)\n+  [#9705](https://github.com/rust-lang/rust-clippy/pull/9705)\n+* Moved [`or_fun_call`] to `nursery` (Now allow-by-default)\n+  [#9829](https://github.com/rust-lang/rust-clippy/pull/9829)\n+* Uplifted [`let_underscore_lock`] into rustc\n+  [#9697](https://github.com/rust-lang/rust-clippy/pull/9697)\n+* Uplifted [`let_underscore_drop`] into rustc\n+  [#9697](https://github.com/rust-lang/rust-clippy/pull/9697)\n+* Moved [`bool_to_int_with_if`] to `pedantic` (Now allow-by-default)\n+  [#9830](https://github.com/rust-lang/rust-clippy/pull/9830)\n+* Move `index_refutable_slice` to `pedantic` (Now warn-by-default)\n+  [#9975](https://github.com/rust-lang/rust-clippy/pull/9975)\n+* Moved [`manual_clamp`] to `nursery` (Now allow-by-default)\n+  [#10101](https://github.com/rust-lang/rust-clippy/pull/10101)\n+\n+### Enhancements\n+\n+* The scope of `#![clippy::msrv]` is now tracked correctly\n+  [#9924](https://github.com/rust-lang/rust-clippy/pull/9924)\n+* `#[clippy::msrv]` can now be used as an outer attribute\n+  [#9860](https://github.com/rust-lang/rust-clippy/pull/9860)\n+* Clippy will now avoid Cargo's cache, if `Cargo.toml` or `clippy.toml` have changed\n+  [#9707](https://github.com/rust-lang/rust-clippy/pull/9707)\n+* [`uninlined_format_args`]: Added a new config `allow-mixed-uninlined-format-args` to allow the\n+  lint, if only some arguments can be inlined\n+  [#9865](https://github.com/rust-lang/rust-clippy/pull/9865)\n+* [`needless_lifetimes`]: Now provides suggests for individual lifetimes\n+  [#9743](https://github.com/rust-lang/rust-clippy/pull/9743)\n+* [`needless_collect`]: Now detects needless `is_empty` and `contains` calls\n+  [#8744](https://github.com/rust-lang/rust-clippy/pull/8744)\n+* [`blanket_clippy_restriction_lints`]: Now lints, if `clippy::restriction` is enabled via the\n+  command line arguments\n+  [#9755](https://github.com/rust-lang/rust-clippy/pull/9755)\n+* [`mutable_key_type`]: Now has the `ignore-interior-mutability` configuration, to add types which\n+  should be ignored by the lint\n+  [#9692](https://github.com/rust-lang/rust-clippy/pull/9692)\n+* [`uninlined_format_args`]: Now works for multiline `format!` expressions\n+  [#9945](https://github.com/rust-lang/rust-clippy/pull/9945)\n+* [`cognitive_complexity`]: Now works for async functions\n+  [#9828](https://github.com/rust-lang/rust-clippy/pull/9828)\n+  [#9836](https://github.com/rust-lang/rust-clippy/pull/9836)\n+* [`vec_box`]: Now avoids an off-by-one error when using the `vec-box-size-threshold` configuration\n+  [#9848](https://github.com/rust-lang/rust-clippy/pull/9848)\n+* [`never_loop`]: Now correctly handles breaks in nested labeled blocks\n+  [#9858](https://github.com/rust-lang/rust-clippy/pull/9858)\n+  [#9837](https://github.com/rust-lang/rust-clippy/pull/9837)\n+* [`disallowed_methods`], [`disallowed_types`], [`disallowed_macros`]: Now correctly resolve\n+  paths, if a crate is used multiple times with different versions\n+  [#9800](https://github.com/rust-lang/rust-clippy/pull/9800)\n+* [`disallowed_methods`]: Can now be used for local methods\n+  [#9800](https://github.com/rust-lang/rust-clippy/pull/9800)\n+* [`print_stdout`], [`print_stderr`]: Can now be enabled in test with the `allow-print-in-tests`\n+  config value\n+  [#9797](https://github.com/rust-lang/rust-clippy/pull/9797)\n+* [`from_raw_with_void_ptr`]: Now works for `Rc`, `Arc`, `alloc::rc::Weak` and\n+  `alloc::sync::Weak` types.\n+  [#9700](https://github.com/rust-lang/rust-clippy/pull/9700)\n+* [`needless_borrowed_reference`]: Now works for struct and tuple patterns with wildcards\n+  [#9855](https://github.com/rust-lang/rust-clippy/pull/9855)\n+* [`or_fun_call`]: Now supports `map_or` methods\n+  [#9689](https://github.com/rust-lang/rust-clippy/pull/9689)\n+* [`unwrap_used`], [`expect_used`]: No longer lints in test code\n+  [#9686](https://github.com/rust-lang/rust-clippy/pull/9686)\n+* [`fn_params_excessive_bools`]: Is now emitted with the lint level at the linted function\n+  [#9698](https://github.com/rust-lang/rust-clippy/pull/9698)\n+\n+### False Positive Fixes\n+\n+* [`new_ret_no_self`]: No longer lints when `impl Trait<Self>` is returned\n+  [#9733](https://github.com/rust-lang/rust-clippy/pull/9733)\n+* [`unnecessary_lazy_evaluations`]: No longer lints, if the type has a significant drop\n+  [#9750](https://github.com/rust-lang/rust-clippy/pull/9750)\n+* [`option_if_let_else`]: No longer lints, if any arm has guard\n+  [#9747](https://github.com/rust-lang/rust-clippy/pull/9747)\n+* [`explicit_auto_deref`]: No longer lints, if the target type is a projection with generic\n+  arguments\n+  [#9813](https://github.com/rust-lang/rust-clippy/pull/9813)\n+* [`unnecessary_to_owned`]: No longer lints, if the suggestion effects types\n+  [#9796](https://github.com/rust-lang/rust-clippy/pull/9796)\n+* [`needless_borrow`]: No longer lints, if the suggestion is affected by `Deref`\n+  [#9674](https://github.com/rust-lang/rust-clippy/pull/9674)\n+* [`unused_unit`]: No longer lints, if lifetimes are bound to the return type\n+  [#9849](https://github.com/rust-lang/rust-clippy/pull/9849)\n+* [`mut_mut`]: No longer lints cases with unsized mutable references\n+  [#9835](https://github.com/rust-lang/rust-clippy/pull/9835)\n+* [`bool_to_int_with_if`]: No longer lints in const context\n+  [#9738](https://github.com/rust-lang/rust-clippy/pull/9738)\n+* [`use_self`]: No longer lints in macros\n+  [#9704](https://github.com/rust-lang/rust-clippy/pull/9704)\n+* [`unnecessary_operation`]: No longer lints, if multiple macros are involved\n+  [#9981](https://github.com/rust-lang/rust-clippy/pull/9981)\n+* [`allow_attributes_without_reason`]: No longer lints inside external macros\n+  [#9630](https://github.com/rust-lang/rust-clippy/pull/9630)\n+* [`question_mark`]: No longer lints for `if let Err()` with an `else` branch\n+  [#9722](https://github.com/rust-lang/rust-clippy/pull/9722)\n+* [`unnecessary_cast`]: No longer lints if the identifier and cast originate from different macros\n+  [#9980](https://github.com/rust-lang/rust-clippy/pull/9980)\n+* [`arithmetic_side_effects`]: Now detects operations with associated constants\n+  [#9592](https://github.com/rust-lang/rust-clippy/pull/9592)\n+* [`explicit_auto_deref`]: No longer lints, if the initial value is not a reference or reference\n+  receiver\n+  [#9997](https://github.com/rust-lang/rust-clippy/pull/9997)\n+* [`module_name_repetitions`], [`single_component_path_imports`]: Now handle `#[allow]`\n+  attributes correctly\n+  [#9879](https://github.com/rust-lang/rust-clippy/pull/9879)\n+* [`bool_to_int_with_if`]: No longer lints `if let` statements\n+  [#9714](https://github.com/rust-lang/rust-clippy/pull/9714)\n+* [`needless_borrow`]: No longer lints, `if`-`else`-statements that require the borrow\n+  [#9791](https://github.com/rust-lang/rust-clippy/pull/9791)\n+* [`needless_borrow`]: No longer lints borrows, if moves were illegal\n+  [#9711](https://github.com/rust-lang/rust-clippy/pull/9711)\n+* [`manual_swap`]: No longer lints in const context\n+  [#9871](https://github.com/rust-lang/rust-clippy/pull/9871)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`missing_safety_doc`], [`missing_errors_doc`], [`missing_panics_doc`]: No longer show the\n+  entire item in the lint emission.\n+  [#9772](https://github.com/rust-lang/rust-clippy/pull/9772)\n+* [`needless_lifetimes`]: Only suggests `'_` when it's applicable\n+  [#9743](https://github.com/rust-lang/rust-clippy/pull/9743)\n+* [`use_self`]: Now suggests full paths correctly\n+  [#9726](https://github.com/rust-lang/rust-clippy/pull/9726)\n+* [`redundant_closure_call`]: Now correctly deals with macros during suggestion creation\n+  [#9987](https://github.com/rust-lang/rust-clippy/pull/9987)\n+* [`unnecessary_cast`]: Suggestions now correctly deal with references\n+  [#9996](https://github.com/rust-lang/rust-clippy/pull/9996)\n+* [`unnecessary_join`]: Suggestions now correctly use [turbofish] operators\n+  [#9779](https://github.com/rust-lang/rust-clippy/pull/9779)\n+* [`equatable_if_let`]: Can now suggest `matches!` replacements\n+  [#9368](https://github.com/rust-lang/rust-clippy/pull/9368)\n+* [`string_extend_chars`]: Suggestions now correctly work for `str` slices\n+  [#9741](https://github.com/rust-lang/rust-clippy/pull/9741)\n+* [`redundant_closure_for_method_calls`]: Suggestions now include angle brackets and generic\n+  arguments if needed\n+  [#9745](https://github.com/rust-lang/rust-clippy/pull/9745)\n+* [`manual_let_else`]: Suggestions no longer expand macro calls\n+  [#9943](https://github.com/rust-lang/rust-clippy/pull/9943)\n+* [`infallible_destructuring_match`]: Suggestions now preserve references\n+  [#9850](https://github.com/rust-lang/rust-clippy/pull/9850)\n+* [`result_large_err`]: The error now shows the largest enum variant\n+  [#9662](https://github.com/rust-lang/rust-clippy/pull/9662)\n+* [`needless_return`]: Suggestions are now formatted better\n+  [#9967](https://github.com/rust-lang/rust-clippy/pull/9967)\n+* [`unused_rounding`]: The suggestion now preserves the original float literal notation\n+  [#9870](https://github.com/rust-lang/rust-clippy/pull/9870)\n+\n+[turbofish]: https://turbo.fish/::%3CClippy%3E\n+\n+### ICE Fixes\n+\n+* [`result_large_err`]: Fixed ICE for empty enums\n+  [#10007](https://github.com/rust-lang/rust-clippy/pull/10007)\n+* [`redundant_allocation`]: Fixed ICE for types with bounded variables\n+  [#9773](https://github.com/rust-lang/rust-clippy/pull/9773)\n+* [`unused_rounding`]: Fixed ICE, if `_` was used as a separator\n+  [#10001](https://github.com/rust-lang/rust-clippy/pull/10001)\n \n ## Rust 1.66\n \n-Current stable, released 2022-12-15\n+Released 2022-12-15\n \n [b52fb523...4f142aa1](https://github.com/rust-lang/rust-clippy/compare/b52fb523...4f142aa1)\n \n@@ -166,6 +359,7 @@ Current stable, released 2022-12-15\n \n * [`unnecessary_to_owned`]: Avoid ICEs in favor of false negatives if information is missing\n   [#9505](https://github.com/rust-lang/rust-clippy/pull/9505)\n+  [#10027](https://github.com/rust-lang/rust-clippy/pull/10027)\n * [`manual_range_contains`]: No longer ICEs on values behind references\n   [#9627](https://github.com/rust-lang/rust-clippy/pull/9627)\n * [`needless_pass_by_value`]: No longer ICEs on unsized `dyn Fn` arguments\n@@ -4383,6 +4577,7 @@ Released 2018-09-13\n [`multi_assignments`]: https://rust-lang.github.io/rust-clippy/master/index.html#multi_assignments\n [`multiple_crate_versions`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions\n [`multiple_inherent_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_inherent_impl\n+[`multiple_unsafe_ops_per_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_unsafe_ops_per_block\n [`must_use_candidate`]: https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\n [`must_use_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#must_use_unit\n [`mut_from_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_from_ref"}, {"sha": "2cfb47dd758aa094688b5daba9abcccbbfaef654", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "ab44db694835faac056a6a3e47060a0e0518821d", "filename": "README.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -194,11 +194,21 @@ value` mapping e.g.\n ```toml\n avoid-breaking-exported-api = false\n disallowed-names = [\"toto\", \"tata\", \"titi\"]\n-cognitive-complexity-threshold = 30\n ```\n \n-See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n-the lint descriptions contain the names and meanings of these configuration variables.\n+The [table of configurations](https://doc.rust-lang.org/nightly/clippy/lint_configuration.html)\n+contains all config values, their default, and a list of lints they affect.\n+Each [configurable lint](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration)\n+, also contains information about these values.\n+\n+For configurations that are a list type with default values such as\n+[disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),\n+you can use the unique value `\"..\"` to extend the default values instead of replacing them.\n+\n+```toml\n+# default of disallowed-names is [\"foo\", \"baz\", \"quux\"]\n+disallowed-names = [\"bar\", \"..\"] # -> [\"bar\", \"foo\", \"baz\", \"quux\"]\n+```\n \n > **Note**\n >"}, {"sha": "0649f7a631df426da94ae70da38a25879d9506b8", "filename": "book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -5,6 +5,7 @@\n - [Installation](installation.md)\n - [Usage](usage.md)\n - [Configuration](configuration.md)\n+    - [Lint Configuration](lint_configuration.md)\n - [Clippy's Lints](lints.md)\n - [Continuous Integration](continuous_integration/README.md)\n     - [GitHub Actions](continuous_integration/github_actions.md)"}, {"sha": "87f4a697af9fd1bf1a6e4ef1f49b89adda4ae3ff", "filename": "book/src/configuration.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -8,11 +8,21 @@ basic `variable = value` mapping eg.\n ```toml\n avoid-breaking-exported-api = false\n disallowed-names = [\"toto\", \"tata\", \"titi\"]\n-cognitive-complexity-threshold = 30\n ```\n \n-See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n-the lint descriptions contain the names and meanings of these configuration variables.\n+The [table of configurations](./lint_configuration.md)\n+contains all config values, their default, and a list of lints they affect.\n+Each [configurable lint](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration)\n+, also contains information about these values.\n+\n+For configurations that are a list type with default values such as\n+[disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),\n+you can use the unique value `\"..\"` to extend the default values instead of replacing them.\n+\n+```toml\n+# default of disallowed-names is [\"foo\", \"baz\", \"quux\"]\n+disallowed-names = [\"bar\", \"..\"] # -> [\"bar\", \"foo\", \"baz\", \"quux\"]\n+```\n \n To deactivate the \"for further information visit *lint-link*\" message you can define the `CLIPPY_DISABLE_DOCS_LINKS`\n environment variable."}, {"sha": "f57dc627dce4cf8c9ceb2426b59b6862e3b27983", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -146,7 +146,8 @@ For cargo lints, the process of testing differs in that we are interested in the\n manifest.\n \n If our new lint is named e.g. `foo_categories`, after running `cargo dev\n-new_lint` we will find by default two new crates, each with its manifest file:\n+new_lint --name=foo_categories --type=cargo --category=cargo` we will find by\n+default two new crates, each with its manifest file:\n \n * `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the\n   new lint to raise an error.\n@@ -699,6 +700,10 @@ for some users. Adding a configuration is done in the following steps:\n        `clippy.toml` file with the configuration value and a rust file that\n        should be linted by Clippy. The test can otherwise be written as usual.\n \n+5. Update [Lint Configuration](../lint_configuration.md)\n+\n+   Run `cargo collect-metadata` to generate documentation changes for the book.\n+\n [`clippy_lints::utils::conf`]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/conf.rs\n [`clippy_lints` lib file]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n [`tests/ui`]: https://github.com/rust-lang/rust-clippy/blob/master/tests/ui"}, {"sha": "dbd624ecd73822174e48d002c00cbbc179f613f8", "filename": "book/src/development/infrastructure/book.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -3,31 +3,31 @@\n This document explains how to make additions and changes to the Clippy book, the\n guide to Clippy that you're reading right now. The Clippy book is formatted with\n [Markdown](https://www.markdownguide.org) and generated by\n-[mdbook](https://github.com/rust-lang/mdBook).\n+[mdBook](https://github.com/rust-lang/mdBook).\n \n-- [Get mdbook](#get-mdbook)\n+- [Get mdBook](#get-mdbook)\n - [Make changes](#make-changes)\n \n-## Get mdbook\n+## Get mdBook\n \n While not strictly necessary since the book source is simply Markdown text\n-files, having mdbook locally will allow you to build, test and serve the book\n+files, having mdBook locally will allow you to build, test and serve the book\n locally to view changes before you commit them to the repository. You likely\n already have `cargo` installed, so the easiest option is to simply:\n \n ```shell\n cargo install mdbook\n ```\n \n-See the mdbook [installation](https://github.com/rust-lang/mdBook#installation)\n+See the mdBook [installation](https://github.com/rust-lang/mdBook#installation)\n instructions for other options.\n \n ## Make changes\n \n The book's\n [src](https://github.com/rust-lang/rust-clippy/tree/master/book/src)\n directory contains all of the markdown files used to generate the book. If you\n-want to see your changes in real time, you can use the mdbook `serve` command to\n+want to see your changes in real time, you can use the mdBook `serve` command to\n run a web server locally that will automatically update changes as they are\n made. From the top level of your `rust-clippy` directory:\n \n@@ -38,5 +38,5 @@ mdbook serve book --open\n Then navigate to `http://localhost:3000` to see the generated book. While the\n server is running, changes you make will automatically be updated.\n \n-For more information, see the mdbook\n+For more information, see the mdBook\n [guide](https://rust-lang.github.io/mdBook/)."}, {"sha": "d1ac7237b5e35dfcd86dfaa5659b3c14d7f76acc", "filename": "book/src/development/infrastructure/changelog_update.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -95,11 +95,23 @@ As section headers, we use:\n Please also be sure to update the Beta/Unreleased sections at the top with the\n relevant commit ranges.\n \n-If you have the time, it would be appreciated if you double-check, that the\n-`#[clippy::version]` attributes for the added lints contains the correct version.\n+#### 3.1 Include `beta-accepted` PRs\n+\n+Look for the [`beta-accepted`] label and make sure to also include the PRs with\n+that label in the changelog. If you can, remove the `beta-accepted` labels\n+**after** the changelog PR was merged.\n+\n+> _Note:_ Some of those PRs might even got backported to the previous `beta`.\n+> Those have to be included in the changelog of the _previous_ release.\n+\n+### 4. Update `clippy::version` attributes\n+\n+Next, make sure to check that the `#[clippy::version]` attributes for the added\n+lints contain the correct version.\n \n [changelog]: https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md\n [forge]: https://forge.rust-lang.org/\n [rust_master_tools]: https://github.com/rust-lang/rust/tree/master/src/tools/clippy\n [rust_beta_tools]: https://github.com/rust-lang/rust/tree/beta/src/tools/clippy\n [rust_stable_tools]: https://github.com/rust-lang/rust/releases\n+[`beta-accepted`]: https://github.com/rust-lang/rust-clippy/issues?q=label%3Abeta-accepted+"}, {"sha": "f79dbb50ff4902f64417105a1a957f3d5d35408e", "filename": "book/src/lint_configuration.md", "status": "added", "additions": 523, "deletions": 0, "changes": 523, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -0,0 +1,523 @@\n+<!--\n+This file is generated by `cargo collect-metadata`.\n+Please use that command to update the file and do not edit it by hand.\n+-->\n+\n+## Lint Configuration Options\n+| <div style=\"width:290px\">Option</div> | Default Value |\n+|--|--|\n+| [arithmetic-side-effects-allowed](#arithmetic-side-effects-allowed) | `{}` |\n+| [arithmetic-side-effects-allowed-binary](#arithmetic-side-effects-allowed-binary) | `[]` |\n+| [arithmetic-side-effects-allowed-unary](#arithmetic-side-effects-allowed-unary) | `{}` |\n+| [avoid-breaking-exported-api](#avoid-breaking-exported-api) | `true` |\n+| [msrv](#msrv) | `None` |\n+| [cognitive-complexity-threshold](#cognitive-complexity-threshold) | `25` |\n+| [disallowed-names](#disallowed-names) | `[\"foo\", \"baz\", \"quux\"]` |\n+| [doc-valid-idents](#doc-valid-idents) | `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` |\n+| [too-many-arguments-threshold](#too-many-arguments-threshold) | `7` |\n+| [type-complexity-threshold](#type-complexity-threshold) | `250` |\n+| [single-char-binding-names-threshold](#single-char-binding-names-threshold) | `4` |\n+| [too-large-for-stack](#too-large-for-stack) | `200` |\n+| [enum-variant-name-threshold](#enum-variant-name-threshold) | `3` |\n+| [enum-variant-size-threshold](#enum-variant-size-threshold) | `200` |\n+| [verbose-bit-mask-threshold](#verbose-bit-mask-threshold) | `1` |\n+| [literal-representation-threshold](#literal-representation-threshold) | `16384` |\n+| [trivial-copy-size-limit](#trivial-copy-size-limit) | `None` |\n+| [pass-by-value-size-limit](#pass-by-value-size-limit) | `256` |\n+| [too-many-lines-threshold](#too-many-lines-threshold) | `100` |\n+| [array-size-threshold](#array-size-threshold) | `512000` |\n+| [vec-box-size-threshold](#vec-box-size-threshold) | `4096` |\n+| [max-trait-bounds](#max-trait-bounds) | `3` |\n+| [max-struct-bools](#max-struct-bools) | `3` |\n+| [max-fn-params-bools](#max-fn-params-bools) | `3` |\n+| [warn-on-all-wildcard-imports](#warn-on-all-wildcard-imports) | `false` |\n+| [disallowed-macros](#disallowed-macros) | `[]` |\n+| [disallowed-methods](#disallowed-methods) | `[]` |\n+| [disallowed-types](#disallowed-types) | `[]` |\n+| [unreadable-literal-lint-fractions](#unreadable-literal-lint-fractions) | `true` |\n+| [upper-case-acronyms-aggressive](#upper-case-acronyms-aggressive) | `false` |\n+| [matches-for-let-else](#matches-for-let-else) | `WellKnownTypes` |\n+| [cargo-ignore-publish](#cargo-ignore-publish) | `false` |\n+| [standard-macro-braces](#standard-macro-braces) | `[]` |\n+| [enforced-import-renames](#enforced-import-renames) | `[]` |\n+| [allowed-scripts](#allowed-scripts) | `[\"Latin\"]` |\n+| [enable-raw-pointer-heuristic-for-send](#enable-raw-pointer-heuristic-for-send) | `true` |\n+| [max-suggested-slice-pattern-length](#max-suggested-slice-pattern-length) | `3` |\n+| [max-include-file-size](#max-include-file-size) | `1000000` |\n+| [allow-expect-in-tests](#allow-expect-in-tests) | `false` |\n+| [allow-unwrap-in-tests](#allow-unwrap-in-tests) | `false` |\n+| [allow-dbg-in-tests](#allow-dbg-in-tests) | `false` |\n+| [allow-print-in-tests](#allow-print-in-tests) | `false` |\n+| [large-error-threshold](#large-error-threshold) | `128` |\n+| [ignore-interior-mutability](#ignore-interior-mutability) | `[\"bytes::Bytes\"]` |\n+| [allow-mixed-uninlined-format-args](#allow-mixed-uninlined-format-args) | `true` |\n+| [suppress-restriction-lint-in-const](#suppress-restriction-lint-in-const) | `false` |\n+\n+### arithmetic-side-effects-allowed\n+Suppress checking of the passed type names in all types of operations.\n+\n+If a specific operation is desired, consider using `arithmetic_side_effects_allowed_binary` or `arithmetic_side_effects_allowed_unary` instead.\n+\n+#### Example\n+\n+```toml\n+arithmetic-side-effects-allowed = [\"SomeType\", \"AnotherType\"]\n+```\n+\n+#### Noteworthy\n+\n+A type, say `SomeType`, listed in this configuration has the same behavior of\n+`[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n+\n+**Default Value:** `{}` (`rustc_data_structures::fx::FxHashSet<String>`)\n+\n+* [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects)\n+\n+\n+### arithmetic-side-effects-allowed-binary\n+Suppress checking of the passed type pair names in binary operations like addition or\n+multiplication.\n+\n+Supports the \"*\" wildcard to indicate that a certain type won't trigger the lint regardless\n+of the involved counterpart. For example, `[\"SomeType\", \"*\"]` or `[\"*\", \"AnotherType\"]`.\n+\n+Pairs are asymmetric, which means that `[\"SomeType\", \"AnotherType\"]` is not the same as\n+`[\"AnotherType\", \"SomeType\"]`.\n+\n+#### Example\n+\n+```toml\n+arithmetic-side-effects-allowed-binary = [[\"SomeType\" , \"f32\"], [\"AnotherType\", \"*\"]]\n+```\n+\n+**Default Value:** `[]` (`Vec<[String; 2]>`)\n+\n+* [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects)\n+\n+\n+### arithmetic-side-effects-allowed-unary\n+Suppress checking of the passed type names in unary operations like \"negation\" (`-`).\n+\n+#### Example\n+\n+```toml\n+arithmetic-side-effects-allowed-unary = [\"SomeType\", \"AnotherType\"]\n+```\n+\n+**Default Value:** `{}` (`rustc_data_structures::fx::FxHashSet<String>`)\n+\n+* [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects)\n+\n+\n+### avoid-breaking-exported-api\n+Suppress lints whenever the suggested change would cause breakage for other crates.\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names)\n+* [large_types_passed_by_value](https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value)\n+* [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref)\n+* [unnecessary_wraps](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps)\n+* [unused_self](https://rust-lang.github.io/rust-clippy/master/index.html#unused_self)\n+* [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms)\n+* [wrong_self_convention](https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention)\n+* [box_collection](https://rust-lang.github.io/rust-clippy/master/index.html#box_collection)\n+* [redundant_allocation](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation)\n+* [rc_buffer](https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer)\n+* [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box)\n+* [option_option](https://rust-lang.github.io/rust-clippy/master/index.html#option_option)\n+* [linkedlist](https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist)\n+* [rc_mutex](https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex)\n+\n+\n+### msrv\n+The minimum rust version that the project supports\n+\n+**Default Value:** `None` (`Option<String>`)\n+\n+* [manual_split_once](https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once)\n+* [manual_str_repeat](https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat)\n+* [cloned_instead_of_copied](https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied)\n+* [redundant_field_names](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names)\n+* [redundant_static_lifetimes](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes)\n+* [filter_map_next](https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next)\n+* [checked_conversions](https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions)\n+* [manual_range_contains](https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains)\n+* [use_self](https://rust-lang.github.io/rust-clippy/master/index.html#use_self)\n+* [mem_replace_with_default](https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default)\n+* [manual_non_exhaustive](https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive)\n+* [option_as_ref_deref](https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref)\n+* [map_unwrap_or](https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or)\n+* [match_like_matches_macro](https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro)\n+* [manual_strip](https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip)\n+* [missing_const_for_fn](https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn)\n+* [unnested_or_patterns](https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns)\n+* [from_over_into](https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into)\n+* [ptr_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr)\n+* [if_then_some_else_none](https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none)\n+* [approx_constant](https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant)\n+* [deprecated_cfg_attr](https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr)\n+* [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice)\n+* [map_clone](https://rust-lang.github.io/rust-clippy/master/index.html#map_clone)\n+* [borrow_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr)\n+* [manual_bits](https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits)\n+* [err_expect](https://rust-lang.github.io/rust-clippy/master/index.html#err_expect)\n+* [cast_abs_to_unsigned](https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned)\n+* [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args)\n+* [manual_clamp](https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp)\n+* [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else)\n+* [unchecked_duration_subtraction](https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction)\n+\n+\n+### cognitive-complexity-threshold\n+The maximum cognitive complexity a function can have\n+\n+**Default Value:** `25` (`u64`)\n+\n+* [cognitive_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity)\n+\n+\n+### disallowed-names\n+The list of disallowed names to lint about. NB: `bar` is not here since it has legitimate uses. The value\n+`\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n+default configuration of Clippy. By default any configuration will replace the default value.\n+\n+**Default Value:** `[\"foo\", \"baz\", \"quux\"]` (`Vec<String>`)\n+\n+* [disallowed_names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names)\n+\n+\n+### doc-valid-idents\n+The list of words this lint should not consider as identifiers needing ticks. The value\n+`\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n+default configuration of Clippy. By default any configuraction will replace the default value. For example:\n+* `doc-valid-idents = [\"ClipPy\"]` would replace the default list with `[\"ClipPy\"]`.\n+* `doc-valid-idents = [\"ClipPy\", \"..\"]` would append `ClipPy` to the default list.\n+\n+Default list:\n+\n+**Default Value:** `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` (`Vec<String>`)\n+\n+* [doc_markdown](https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown)\n+\n+\n+### too-many-arguments-threshold\n+The maximum number of argument a function or method can have\n+\n+**Default Value:** `7` (`u64`)\n+\n+* [too_many_arguments](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments)\n+\n+\n+### type-complexity-threshold\n+The maximum complexity a type can have\n+\n+**Default Value:** `250` (`u64`)\n+\n+* [type_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity)\n+\n+\n+### single-char-binding-names-threshold\n+The maximum number of single char bindings a scope may have\n+\n+**Default Value:** `4` (`u64`)\n+\n+* [many_single_char_names](https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names)\n+\n+\n+### too-large-for-stack\n+The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n+\n+**Default Value:** `200` (`u64`)\n+\n+* [boxed_local](https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local)\n+* [useless_vec](https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec)\n+\n+\n+### enum-variant-name-threshold\n+The minimum number of enum variants for the lints about variant names to trigger\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names)\n+\n+\n+### enum-variant-size-threshold\n+The maximum size of an enum's variant to avoid box suggestion\n+\n+**Default Value:** `200` (`u64`)\n+\n+* [large_enum_variant](https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant)\n+\n+\n+### verbose-bit-mask-threshold\n+The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros'\n+\n+**Default Value:** `1` (`u64`)\n+\n+* [verbose_bit_mask](https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask)\n+\n+\n+### literal-representation-threshold\n+The lower bound for linting decimal literals\n+\n+**Default Value:** `16384` (`u64`)\n+\n+* [decimal_literal_representation](https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation)\n+\n+\n+### trivial-copy-size-limit\n+The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n+\n+**Default Value:** `None` (`Option<u64>`)\n+\n+* [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref)\n+\n+\n+### pass-by-value-size-limit\n+The minimum size (in bytes) to consider a type for passing by reference instead of by value.\n+\n+**Default Value:** `256` (`u64`)\n+\n+* [large_type_pass_by_move](https://rust-lang.github.io/rust-clippy/master/index.html#large_type_pass_by_move)\n+\n+\n+### too-many-lines-threshold\n+The maximum number of lines a function or method can have\n+\n+**Default Value:** `100` (`u64`)\n+\n+* [too_many_lines](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines)\n+\n+\n+### array-size-threshold\n+The maximum allowed size for arrays on the stack\n+\n+**Default Value:** `512000` (`u128`)\n+\n+* [large_stack_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays)\n+* [large_const_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays)\n+\n+\n+### vec-box-size-threshold\n+The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n+\n+**Default Value:** `4096` (`u64`)\n+\n+* [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box)\n+\n+\n+### max-trait-bounds\n+The maximum number of bounds a trait can have to be linted\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [type_repetition_in_bounds](https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds)\n+\n+\n+### max-struct-bools\n+The maximum number of bool fields a struct can have\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [struct_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools)\n+\n+\n+### max-fn-params-bools\n+The maximum number of bool parameters a function can have\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [fn_params_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools)\n+\n+\n+### warn-on-all-wildcard-imports\n+Whether to allow certain wildcard imports (prelude, super in tests).\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [wildcard_imports](https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports)\n+\n+\n+### disallowed-macros\n+The list of disallowed macros, written as fully qualified paths.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::DisallowedPath>`)\n+\n+* [disallowed_macros](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_macros)\n+\n+\n+### disallowed-methods\n+The list of disallowed methods, written as fully qualified paths.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::DisallowedPath>`)\n+\n+* [disallowed_methods](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods)\n+\n+\n+### disallowed-types\n+The list of disallowed types, written as fully qualified paths.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::DisallowedPath>`)\n+\n+* [disallowed_types](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types)\n+\n+\n+### unreadable-literal-lint-fractions\n+Should the fraction of a decimal be linted to include separators.\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [unreadable_literal](https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal)\n+\n+\n+### upper-case-acronyms-aggressive\n+Enables verbose mode. Triggers if there is more than one uppercase char next to each other\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms)\n+\n+\n+### matches-for-let-else\n+Whether the matches should be considered by the lint, and whether there should\n+be filtering for common types.\n+\n+**Default Value:** `WellKnownTypes` (`crate::manual_let_else::MatchLintBehaviour`)\n+\n+* [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else)\n+\n+\n+### cargo-ignore-publish\n+For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [_cargo_common_metadata](https://rust-lang.github.io/rust-clippy/master/index.html#_cargo_common_metadata)\n+\n+\n+### standard-macro-braces\n+Enforce the named macros always use the braces specified.\n+\n+A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`. If the macro\n+is could be used with a full path two `MacroMatcher`s have to be added one with the full path\n+`crate_name::macro_name` and one with just the macro name.\n+\n+**Default Value:** `[]` (`Vec<crate::nonstandard_macro_braces::MacroMatcher>`)\n+\n+* [nonstandard_macro_braces](https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces)\n+\n+\n+### enforced-import-renames\n+The list of imports to always rename, a fully qualified path followed by the rename.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::Rename>`)\n+\n+* [missing_enforced_import_renames](https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames)\n+\n+\n+### allowed-scripts\n+The list of unicode scripts allowed to be used in the scope.\n+\n+**Default Value:** `[\"Latin\"]` (`Vec<String>`)\n+\n+* [disallowed_script_idents](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents)\n+\n+\n+### enable-raw-pointer-heuristic-for-send\n+Whether to apply the raw pointer heuristic to determine if a type is `Send`.\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [non_send_fields_in_send_ty](https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty)\n+\n+\n+### max-suggested-slice-pattern-length\n+When Clippy suggests using a slice pattern, this is the maximum number of elements allowed in\n+the slice pattern that is suggested. If more elements would be necessary, the lint is suppressed.\n+For example, `[_, _, _, e, ..]` is a slice pattern with 4 elements.\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice)\n+\n+\n+### max-include-file-size\n+The maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes\n+\n+**Default Value:** `1000000` (`u64`)\n+\n+* [large_include_file](https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file)\n+\n+\n+### allow-expect-in-tests\n+Whether `expect` should be allowed within `#[cfg(test)]`\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [expect_used](https://rust-lang.github.io/rust-clippy/master/index.html#expect_used)\n+\n+\n+### allow-unwrap-in-tests\n+Whether `unwrap` should be allowed in test cfg\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [unwrap_used](https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used)\n+\n+\n+### allow-dbg-in-tests\n+Whether `dbg!` should be allowed in test functions\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [dbg_macro](https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro)\n+\n+\n+### allow-print-in-tests\n+Whether print macros (ex. `println!`) should be allowed in test functions\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [print_stdout](https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout)\n+* [print_stderr](https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr)\n+\n+\n+### large-error-threshold\n+The maximum size of the `Err`-variant in a `Result` returned from a function\n+\n+**Default Value:** `128` (`u64`)\n+\n+* [result_large_err](https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err)\n+\n+\n+### ignore-interior-mutability\n+A list of paths to types that should be treated like `Arc`, i.e. ignored but\n+for the generic parameters for determining interior mutability\n+\n+**Default Value:** `[\"bytes::Bytes\"]` (`Vec<String>`)\n+\n+* [mutable_key](https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key)\n+\n+\n+### allow-mixed-uninlined-format-args\n+Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args)\n+\n+\n+### suppress-restriction-lint-in-const\n+In same\n+cases the restructured operation might not be unavoidable, as the\n+suggested counterparts are unavailable in constant code. This\n+configuration will cause restriction lints to trigger even\n+if no suggestion can be made.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [indexing_slicing](https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing)\n+\n+\n+"}, {"sha": "4c40483e3ec948bf02a9044a24936e2e0eac7f13", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "556fa579000c6767109ba58123fed76dbd8f14ff", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,10 +1,11 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::{find_assert_eq_args, root_macro_call_first_node};\n-use clippy_utils::{diagnostics::span_lint_and_sugg, ty::implements_trait};\n+use clippy_utils::ty::{implements_trait, is_copy};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Lit};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Ident;\n \n@@ -43,9 +44,7 @@ fn is_bool_lit(e: &Expr<'_>) -> bool {\n     ) && !e.span.from_expansion()\n }\n \n-fn is_impl_not_trait_with_bool_out(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    let ty = cx.typeck_results().expr_ty(e);\n-\n+fn is_impl_not_trait_with_bool_out<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     cx.tcx\n         .lang_items()\n         .not_trait()\n@@ -77,31 +76,57 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n             return;\n         }\n         let Some ((a, b, _)) = find_assert_eq_args(cx, expr, macro_call.expn) else { return };\n-        if !(is_bool_lit(a) ^ is_bool_lit(b)) {\n+\n+        let a_span = a.span.source_callsite();\n+        let b_span = b.span.source_callsite();\n+\n+        let (lit_span, non_lit_expr) = match (is_bool_lit(a), is_bool_lit(b)) {\n+            // assert_eq!(true, b)\n+            //            ^^^^^^\n+            (true, false) => (a_span.until(b_span), b),\n+            // assert_eq!(a, true)\n+            //             ^^^^^^\n+            (false, true) => (b_span.with_lo(a_span.hi()), a),\n             // If there are two boolean arguments, we definitely don't understand\n             // what's going on, so better leave things as is...\n             //\n             // Or there is simply no boolean and then we can leave things as is!\n-            return;\n-        }\n+            _ => return,\n+        };\n \n-        if !is_impl_not_trait_with_bool_out(cx, a) || !is_impl_not_trait_with_bool_out(cx, b) {\n+        let non_lit_ty = cx.typeck_results().expr_ty(non_lit_expr);\n+\n+        if !is_impl_not_trait_with_bool_out(cx, non_lit_ty) {\n             // At this point the expression which is not a boolean\n             // literal does not implement Not trait with a bool output,\n             // so we cannot suggest to rewrite our code\n             return;\n         }\n \n+        if !is_copy(cx, non_lit_ty) {\n+            // Only lint with types that are `Copy` because `assert!(x)` takes\n+            // ownership of `x` whereas `assert_eq(x, true)` does not\n+            return;\n+        }\n+\n         let macro_name = macro_name.as_str();\n         let non_eq_mac = &macro_name[..macro_name.len() - 3];\n-        span_lint_and_sugg(\n+        span_lint_and_then(\n             cx,\n             BOOL_ASSERT_COMPARISON,\n             macro_call.span,\n             &format!(\"used `{macro_name}!` with a literal bool\"),\n-            \"replace it with\",\n-            format!(\"{non_eq_mac}!(..)\"),\n-            Applicability::MaybeIncorrect,\n+            |diag| {\n+                // assert_eq!(...)\n+                // ^^^^^^^^^\n+                let name_span = cx.sess().source_map().span_until_char(macro_call.span, '!');\n+\n+                diag.multipart_suggestion(\n+                    format!(\"replace it with `{non_eq_mac}!(..)`\"),\n+                    vec![(name_span, non_eq_mac.to_string()), (lit_span, String::new())],\n+                    Applicability::MachineApplicable,\n+                );\n+            },\n         );\n     }\n }"}, {"sha": "f3f8b8d87982e6aee6eae51bd47c6cf18fe3646a", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,11 +1,14 @@\n use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::expr_or_init;\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{get_discriminant_value, is_isize_or_usize};\n+use rustc_errors::{Applicability, SuggestionStyle};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n+use rustc_span::Span;\n use rustc_target::abi::IntegerType;\n \n use super::{utils, CAST_ENUM_TRUNCATION, CAST_POSSIBLE_TRUNCATION};\n@@ -74,7 +77,14 @@ fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: b\n     }\n }\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    cast_to_span: Span,\n+) {\n     let msg = match (cast_from.kind(), cast_to.is_integral()) {\n         (ty::Int(_) | ty::Uint(_), true) => {\n             let from_nbits = apply_reductions(\n@@ -139,7 +149,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 );\n                 return;\n             }\n-            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\",)\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\")\n         },\n \n         (ty::Float(_), true) => {\n@@ -153,5 +163,19 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         _ => return,\n     };\n \n-    span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg);\n+    let name_of_cast_from = snippet(cx, cast_expr.span, \"..\");\n+    let cast_to_snip = snippet(cx, cast_to_span, \"..\");\n+    let suggestion = format!(\"{cast_to_snip}::try_from({name_of_cast_from})\");\n+\n+    span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n+        diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\");\n+        diag.span_suggestion_with_style(\n+            expr.span,\n+            \"... or use `try_from` and handle the error accordingly\",\n+            suggestion,\n+            Applicability::Unspecified,\n+            // always show the suggestion in a separate line\n+            SuggestionStyle::ShowAlways,\n+        );\n+    });\n }"}, {"sha": "362f70d12d185344181f2e7524dcc977890488e8", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -80,7 +80,8 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for casts between numerical types that may\n     /// truncate large values. This is expected behavior, so the cast is `Allow` by\n-    /// default.\n+    /// default. It suggests user either explicitly ignore the lint,\n+    /// or use `try_from()` and handle the truncation, default, or panic explicitly.\n     ///\n     /// ### Why is this bad?\n     /// In some problem domains, it is good practice to avoid\n@@ -93,6 +94,21 @@ declare_clippy_lint! {\n     ///     x as u8\n     /// }\n     /// ```\n+    /// Use instead:\n+    /// ```\n+    /// fn as_u8(x: u64) -> u8 {\n+    ///     if let Ok(x) = u8::try_from(x) {\n+    ///         x\n+    ///     } else {\n+    ///         todo!();\n+    ///     }\n+    /// }\n+    /// // Or\n+    /// #[allow(clippy::cast_possible_truncation)]\n+    /// fn as_u16(x: u64) -> u16 {\n+    ///     x as u16\n+    /// }\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub CAST_POSSIBLE_TRUNCATION,\n     pedantic,\n@@ -712,7 +728,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n \n             if cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n+                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to, cast_to_hir.span);\n                 if cast_from.is_numeric() {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);"}, {"sha": "36a366fc97474b98ff457a6493e2fa9ecd8ef343", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -422,6 +422,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::module_style::MOD_MODULE_FILES_INFO,\n     crate::module_style::SELF_NAMED_MODULE_FILES_INFO,\n     crate::multi_assignments::MULTI_ASSIGNMENTS_INFO,\n+    crate::multiple_unsafe_ops_per_block::MULTIPLE_UNSAFE_OPS_PER_BLOCK_INFO,\n     crate::mut_key::MUTABLE_KEY_TYPE_INFO,\n     crate::mut_mut::MUT_MUT_INFO,\n     crate::mut_reference::UNNECESSARY_MUT_PASSED_INFO,"}, {"sha": "f7a3d6d53f7141c21400d1f64fa748af75a6eaf6", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -251,7 +251,7 @@ declare_clippy_lint! {\n     ///     unimplemented!();\n     /// }\n     /// ```\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub UNNECESSARY_SAFETY_DOC,\n     restriction,\n     \"`pub fn` or `pub trait` with `# Safety` docs\""}, {"sha": "4c69dacf381ad66b9ce96ca0baacd6fc3ba5fc63", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -277,7 +277,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n                                 Some(c) if is_word_beginning(c) => span_lint(\n                                     cx,\n                                     MODULE_NAME_REPETITIONS,\n-                                    item.span,\n+                                    item.ident.span,\n                                     \"item name starts with its containing module's name\",\n                                 ),\n                                 _ => (),\n@@ -287,7 +287,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n                             span_lint(\n                                 cx,\n                                 MODULE_NAME_REPETITIONS,\n-                                item.span,\n+                                item.ident.span,\n                                 \"item name ends with its containing module's name\",\n                             );\n                         }"}, {"sha": "096508dc4f11e24dd135ed9d41e8ffeca79b1f41", "filename": "clippy_lints/src/from_raw_with_void_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -31,7 +31,7 @@ declare_clippy_lint! {\n     /// let _ = unsafe { Box::from_raw(ptr as *mut usize) };\n     /// ```\n     ///\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub FROM_RAW_WITH_VOID_PTR,\n     suspicious,\n     \"creating a `Box` from a void raw pointer\""}, {"sha": "668110c7cc081c1e9da0fd1e62897c9d9d1dc757", "filename": "clippy_lints/src/instant_subtraction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -59,7 +59,7 @@ declare_clippy_lint! {\n     ///\n     /// [`Duration`]: std::time::Duration\n     /// [`Instant::now()`]: std::time::Instant::now;\n-    #[clippy::version = \"1.65.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub UNCHECKED_DURATION_SUBTRACTION,\n     pedantic,\n     \"finds unchecked subtraction of a 'Duration' from an 'Instant'\""}, {"sha": "f8e3595098088402e4414c9fb73e1f01b47fac9a", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -84,7 +84,7 @@ declare_clippy_lint! {\n     /// let _ = foo().await;\n     /// # }\n     /// ```\n-    #[clippy::version = \"1.66\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub LET_UNDERSCORE_FUTURE,\n     suspicious,\n     \"non-binding `let` on a future\""}, {"sha": "5c4b604104417e86b99c28a6d6a1f6a172c33a0f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -198,6 +198,7 @@ mod missing_trait_methods;\n mod mixed_read_write_in_expression;\n mod module_style;\n mod multi_assignments;\n+mod multiple_unsafe_ops_per_block;\n mod mut_key;\n mod mut_mut;\n mod mut_reference;\n@@ -908,6 +909,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n     store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));\n+    store.register_late_pass(|_| Box::new(multiple_unsafe_ops_per_block::MultipleUnsafeOpsPerBlock));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "2fd32c009eaa79374cbc9f5c8aabb915e41e7b84", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     ///     'A'.is_ascii_uppercase();\n     /// }\n     /// ```\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub MANUAL_IS_ASCII_CHECK,\n     style,\n     \"use dedicated method to check ascii range\""}, {"sha": "0c465e5daf9fd1bf717e89aa7a469accd89ee5e9", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -3102,7 +3102,7 @@ declare_clippy_lint! {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub SEEK_FROM_CURRENT,\n     complexity,\n     \"use dedicated method for seek from current position\"\n@@ -3133,7 +3133,7 @@ declare_clippy_lint! {\n     ///     t.rewind();\n     /// }\n     /// ```\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub SEEK_TO_START_INSTEAD_OF_REWIND,\n     complexity,\n     \"jumping to the start of stream using `seek` method\""}, {"sha": "e99081ad06202313b8bf2b2dd4c0f22060aaa150", "filename": "clippy_lints/src/missing_trait_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -94,7 +94,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingTraitMethods {\n                         \"implement the method\",\n                     );\n                 }\n-            })\n+            });\n         }\n     }\n }"}, {"sha": "2814c92e67a451cab6cdcdd9b4e28b4542828c3f", "filename": "clippy_lints/src/multiple_unsafe_ops_per_block.rs", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -0,0 +1,185 @@\n+use clippy_utils::{\n+    diagnostics::span_lint_and_then,\n+    visitors::{for_each_expr_with_closures, Descend, Visitable},\n+};\n+use core::ops::ControlFlow::Continue;\n+use hir::{\n+    def::{DefKind, Res},\n+    BlockCheckMode, ExprKind, QPath, UnOp, Unsafety,\n+};\n+use rustc_ast::Mutability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `unsafe` blocks that contain more than one unsafe operation.\n+    ///\n+    /// ### Why is this bad?\n+    /// Combined with `undocumented_unsafe_blocks`,\n+    /// this lint ensures that each unsafe operation must be independently justified.\n+    /// Combined with `unused_unsafe`, this lint also ensures\n+    /// elimination of unnecessary unsafe blocks through refactoring.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// /// Reads a `char` from the given pointer.\n+    /// ///\n+    /// /// # Safety\n+    /// ///\n+    /// /// `ptr` must point to four consecutive, initialized bytes which\n+    /// /// form a valid `char` when interpreted in the native byte order.\n+    /// fn read_char(ptr: *const u8) -> char {\n+    ///     // SAFETY: The caller has guaranteed that the value pointed\n+    ///     // to by `bytes` is a valid `char`.\n+    ///     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// /// Reads a `char` from the given pointer.\n+    /// ///\n+    /// /// # Safety\n+    /// ///\n+    /// /// - `ptr` must be 4-byte aligned, point to four consecutive\n+    /// ///   initialized bytes, and be valid for reads of 4 bytes.\n+    /// /// - The bytes pointed to by `ptr` must represent a valid\n+    /// ///   `char` when interpreted in the native byte order.\n+    /// fn read_char(ptr: *const u8) -> char {\n+    ///     // SAFETY: `ptr` is 4-byte aligned, points to four consecutive\n+    ///     // initialized bytes, and is valid for reads of 4 bytes.\n+    ///     let int_value = unsafe { *ptr.cast::<u32>() };\n+    ///\n+    ///     // SAFETY: The caller has guaranteed that the four bytes\n+    ///     // pointed to by `bytes` represent a valid `char`.\n+    ///     unsafe { char::from_u32_unchecked(int_value) }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.68.0\"]\n+    pub MULTIPLE_UNSAFE_OPS_PER_BLOCK,\n+    restriction,\n+    \"more than one unsafe operation per `unsafe` block\"\n+}\n+declare_lint_pass!(MultipleUnsafeOpsPerBlock => [MULTIPLE_UNSAFE_OPS_PER_BLOCK]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MultipleUnsafeOpsPerBlock {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n+        if !matches!(block.rules, BlockCheckMode::UnsafeBlock(_)) {\n+            return;\n+        }\n+        let mut unsafe_ops = vec![];\n+        collect_unsafe_exprs(cx, block, &mut unsafe_ops);\n+        if unsafe_ops.len() > 1 {\n+            span_lint_and_then(\n+                cx,\n+                MULTIPLE_UNSAFE_OPS_PER_BLOCK,\n+                block.span,\n+                &format!(\n+                    \"this `unsafe` block contains {} unsafe operations, expected only one\",\n+                    unsafe_ops.len()\n+                ),\n+                |diag| {\n+                    for (msg, span) in unsafe_ops {\n+                        diag.span_note(span, msg);\n+                    }\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+fn collect_unsafe_exprs<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    node: impl Visitable<'tcx>,\n+    unsafe_ops: &mut Vec<(&'static str, Span)>,\n+) {\n+    for_each_expr_with_closures(cx, node, |expr| {\n+        match expr.kind {\n+            ExprKind::InlineAsm(_) => unsafe_ops.push((\"inline assembly used here\", expr.span)),\n+\n+            ExprKind::Field(e, _) => {\n+                if cx.typeck_results().expr_ty(e).is_union() {\n+                    unsafe_ops.push((\"union field access occurs here\", expr.span));\n+                }\n+            },\n+\n+            ExprKind::Path(QPath::Resolved(\n+                _,\n+                hir::Path {\n+                    res: Res::Def(DefKind::Static(Mutability::Mut), _),\n+                    ..\n+                },\n+            )) => {\n+                unsafe_ops.push((\"access of a mutable static occurs here\", expr.span));\n+            },\n+\n+            ExprKind::Unary(UnOp::Deref, e) if cx.typeck_results().expr_ty_adjusted(e).is_unsafe_ptr() => {\n+                unsafe_ops.push((\"raw pointer dereference occurs here\", expr.span));\n+            },\n+\n+            ExprKind::Call(path_expr, _) => match path_expr.kind {\n+                ExprKind::Path(QPath::Resolved(\n+                    _,\n+                    hir::Path {\n+                        res: Res::Def(kind, def_id),\n+                        ..\n+                    },\n+                )) if kind.is_fn_like() => {\n+                    let sig = cx.tcx.fn_sig(*def_id);\n+                    if sig.0.unsafety() == Unsafety::Unsafe {\n+                        unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n+                    }\n+                },\n+\n+                ExprKind::Path(QPath::TypeRelative(..)) => {\n+                    if let Some(sig) = cx\n+                        .typeck_results()\n+                        .type_dependent_def_id(path_expr.hir_id)\n+                        .map(|def_id| cx.tcx.fn_sig(def_id))\n+                    {\n+                        if sig.0.unsafety() == Unsafety::Unsafe {\n+                            unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n+                        }\n+                    }\n+                },\n+\n+                _ => {},\n+            },\n+\n+            ExprKind::MethodCall(..) => {\n+                if let Some(sig) = cx\n+                    .typeck_results()\n+                    .type_dependent_def_id(expr.hir_id)\n+                    .map(|def_id| cx.tcx.fn_sig(def_id))\n+                {\n+                    if sig.0.unsafety() == Unsafety::Unsafe {\n+                        unsafe_ops.push((\"unsafe method call occurs here\", expr.span));\n+                    }\n+                }\n+            },\n+\n+            ExprKind::AssignOp(_, lhs, rhs) | ExprKind::Assign(lhs, rhs, _) => {\n+                if matches!(\n+                    lhs.kind,\n+                    ExprKind::Path(QPath::Resolved(\n+                        _,\n+                        hir::Path {\n+                            res: Res::Def(DefKind::Static(Mutability::Mut), _),\n+                            ..\n+                        }\n+                    ))\n+                ) {\n+                    unsafe_ops.push((\"modification of a mutable static occurs here\", expr.span));\n+                    collect_unsafe_exprs(cx, rhs, unsafe_ops);\n+                    return Continue(Descend::No);\n+                }\n+            },\n+\n+            _ => {},\n+        };\n+\n+        Continue::<(), _>(Descend::Yes)\n+    });\n+}"}, {"sha": "8b77a5c99f767f3edf833e37a5d67429881d696b", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::{Body, Expr, ExprKind, HirId, ImplItem, ImplItemKind, Node, PatKind, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::ty::subst::{EarlyBinder, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, Ident};\n@@ -244,7 +244,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n             })) => {\n                 #[allow(trivial_casts)]\n                 if let Some(Node::Item(item)) = get_parent_node(cx.tcx, owner_id.into())\n-                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(|t| t.subst_identity())\n+                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(EarlyBinder::subst_identity)\n                     && let Some(trait_item_id) = cx.tcx.associated_item(owner_id).trait_item_def_id\n                 {\n                     ("}, {"sha": "a3e0811700beeda4664cc1770cc18cfe55805af2", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::visitors::{for_each_expr, Descend};\n-use clippy_utils::{fn_def_id, path_to_local_id};\n+use clippy_utils::{fn_def_id, path_to_local_id, span_find_starting_semi};\n use core::ops::ControlFlow;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -151,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         kind: FnKind<'tcx>,\n         _: &'tcx FnDecl<'tcx>,\n         body: &'tcx Body<'tcx>,\n-        _: Span,\n+        sp: Span,\n         _: HirId,\n     ) {\n         match kind {\n@@ -166,14 +166,14 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 check_final_expr(cx, body.value, vec![], replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                check_block_return(cx, &body.value.kind, vec![]);\n+                check_block_return(cx, &body.value.kind, sp, vec![]);\n             },\n         }\n     }\n }\n \n // if `expr` is a block, check if there are needless returns in it\n-fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, semi_spans: Vec<Span>) {\n+fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, sp: Span, mut semi_spans: Vec<Span>) {\n     if let ExprKind::Block(block, _) = expr_kind {\n         if let Some(block_expr) = block.expr {\n             check_final_expr(cx, block_expr, semi_spans, RetReplacement::Empty);\n@@ -183,12 +183,14 @@ fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>,\n                     check_final_expr(cx, expr, semi_spans, RetReplacement::Empty);\n                 },\n                 StmtKind::Semi(semi_expr) => {\n-                    let mut semi_spans_and_this_one = semi_spans;\n-                    // we only want the span containing the semicolon so we can remove it later. From `entry.rs:382`\n-                    if let Some(semicolon_span) = stmt.span.trim_start(semi_expr.span) {\n-                        semi_spans_and_this_one.push(semicolon_span);\n-                        check_final_expr(cx, semi_expr, semi_spans_and_this_one, RetReplacement::Empty);\n+                    // Remove ending semicolons and any whitespace ' ' in between.\n+                    // Without `return`, the suggestion might not compile if the semicolon is retained\n+                    if let Some(semi_span) = stmt.span.trim_start(semi_expr.span) {\n+                        let semi_span_to_remove =\n+                            span_find_starting_semi(cx.sess().source_map(), semi_span.with_hi(sp.hi()));\n+                        semi_spans.push(semi_span_to_remove);\n                     }\n+                    check_final_expr(cx, semi_expr, semi_spans, RetReplacement::Empty);\n                 },\n                 _ => (),\n             }\n@@ -231,9 +233,9 @@ fn check_final_expr<'tcx>(\n             emit_return_lint(cx, ret_span, semi_spans, inner.as_ref().map(|i| i.span), replacement);\n         },\n         ExprKind::If(_, then, else_clause_opt) => {\n-            check_block_return(cx, &then.kind, semi_spans.clone());\n+            check_block_return(cx, &then.kind, peeled_drop_expr.span, semi_spans.clone());\n             if let Some(else_clause) = else_clause_opt {\n-                check_block_return(cx, &else_clause.kind, semi_spans);\n+                check_block_return(cx, &else_clause.kind, peeled_drop_expr.span, semi_spans);\n             }\n         },\n         // a match expr, check all arms\n@@ -246,7 +248,7 @@ fn check_final_expr<'tcx>(\n             }\n         },\n         // if it's a whole block, check it\n-        other_expr_kind => check_block_return(cx, other_expr_kind, semi_spans),\n+        other_expr_kind => check_block_return(cx, other_expr_kind, peeled_drop_expr.span, semi_spans),\n     }\n }\n "}, {"sha": "9c0dc8096d0dcc5174699d6a038fef806f5ed667", "filename": "clippy_lints/src/suspicious_xor_used_as_pow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fsuspicious_xor_used_as_pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fsuspicious_xor_used_as_pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_xor_used_as_pow.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -9,7 +9,7 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Warns for a Bitwise XOR (`^`) operator being probably confused as a powering. It will not trigger if any of the numbers are not in decimal.\n     /// ### Why is this bad?\n-    ///\tIt's most probably a typo and may lead to unexpected behaviours.\n+    /// It's most probably a typo and may lead to unexpected behaviours.\n     /// ### Example\n     /// ```rust\n     /// let x = 3_i32 ^ 4_i32;\n@@ -18,7 +18,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x = 3_i32.pow(4);\n     /// ```\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub SUSPICIOUS_XOR_USED_AS_POW,\n     restriction,\n     \"XOR (`^`) operator possibly used as exponentiation operator\""}, {"sha": "c0d290b5adc420692c0a0e06515283ab3c3ea38f", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -479,7 +479,10 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 // - char conversions (https://github.com/rust-lang/rust/issues/89259)\n                 let const_context = in_constant(cx, e.hir_id);\n \n-                let from_ty = cx.typeck_results().expr_ty_adjusted(arg);\n+                let (from_ty, from_ty_adjusted) = match cx.typeck_results().expr_adjustments(arg) {\n+                    [] => (cx.typeck_results().expr_ty(arg), false),\n+                    [.., a] => (a.target, true),\n+                };\n                 // Adjustments for `to_ty` happen after the call to `transmute`, so don't use them.\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n@@ -506,7 +509,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                     );\n \n                 if !linted {\n-                    transmutes_expressible_as_ptr_casts::check(cx, e, from_ty, to_ty, arg);\n+                    transmutes_expressible_as_ptr_casts::check(cx, e, from_ty, from_ty_adjusted, to_ty, arg);\n                 }\n             }\n         }"}, {"sha": "8530b43243fa36fd6a97c89650cf5f5f0b51d87b", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,36 +1,52 @@\n-use super::utils::can_be_expressed_as_pointer_cast;\n+use super::utils::check_cast;\n use super::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS;\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::sugg;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::sugg::Sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{cast::CastKind, Ty};\n \n /// Checks for `transmutes_expressible_as_ptr_casts` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n+    from_ty_adjusted: bool,\n     to_ty: Ty<'tcx>,\n     arg: &'tcx Expr<'_>,\n ) -> bool {\n-    if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) {\n-        span_lint_and_then(\n-            cx,\n-            TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-            e.span,\n-            &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n-            |diag| {\n-                if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                    let sugg = arg.as_ty(to_ty.to_string()).to_string();\n-                    diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n-                }\n-            },\n-        );\n-        true\n-    } else {\n-        false\n-    }\n+    use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n+    let mut app = Applicability::MachineApplicable;\n+    let sugg = match check_cast(cx, e, from_ty, to_ty) {\n+        Some(PtrPtrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast) => {\n+            Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app)\n+                .as_ty(to_ty.to_string())\n+                .to_string()\n+        },\n+        Some(PtrAddrCast) if !from_ty_adjusted => Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app)\n+            .as_ty(to_ty.to_string())\n+            .to_string(),\n+\n+        // The only adjustments here would be ref-to-ptr and unsize coercions. The result of an unsize coercions can't\n+        // be transmuted to a usize. For ref-to-ptr coercions, borrows need to be cast to a pointer before being cast to\n+        // a usize.\n+        Some(PtrAddrCast) => format!(\n+            \"{} as {to_ty}\",\n+            Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app).as_ty(from_ty)\n+        ),\n+        _ => return false,\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+        e.span,\n+        &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n+        \"try\",\n+        sugg,\n+        app,\n+    );\n+    true\n }"}, {"sha": "cddaf9450eabcc4f54d9401371a4330b91a6b3bb", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -20,28 +20,16 @@ pub(super) fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx\n     }\n }\n \n-/// Check if the type conversion can be expressed as a pointer cast, instead of\n-/// a transmute. In certain cases, including some invalid casts from array\n-/// references to pointers, this may cause additional errors to be emitted and/or\n-/// ICE error messages. This function will panic if that occurs.\n-pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    e: &'tcx Expr<'_>,\n-    from_ty: Ty<'tcx>,\n-    to_ty: Ty<'tcx>,\n-) -> bool {\n-    use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n-    matches!(\n-        check_cast(cx, e, from_ty, to_ty),\n-        Some(PtrPtrCast | PtrAddrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast)\n-    )\n-}\n-\n /// If a cast from `from_ty` to `to_ty` is valid, returns an Ok containing the kind of\n /// the cast. In certain cases, including some invalid casts from array references\n /// to pointers, this may cause additional errors to be emitted and/or ICE error\n /// messages. This function will panic if that occurs.\n-fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n+pub(super) fn check_cast<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+) -> Option<CastKind> {\n     let hir_id = e.hir_id;\n     let local_def_id = hir_id.owner.def_id;\n "}, {"sha": "2920684ade33cd89a98e949da70c3fa8a702694b", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -263,6 +263,18 @@ fn expr_has_unnecessary_safety_comment<'tcx>(\n     expr: &'tcx hir::Expr<'tcx>,\n     comment_pos: BytePos,\n ) -> Option<Span> {\n+    if cx.tcx.hir().parent_iter(expr.hir_id).any(|(_, ref node)| {\n+        matches!(\n+            node,\n+            Node::Block(&Block {\n+                rules: BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided),\n+                ..\n+            }),\n+        )\n+    }) {\n+        return None;\n+    }\n+\n     // this should roughly be the reverse of `block_parents_have_safety_comment`\n     if for_each_expr_with_closures(cx, expr, |expr| match expr.kind {\n         hir::ExprKind::Block("}, {"sha": "f48be27592b7e74a1bc3e30a775d70ca142258fa", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -219,7 +219,8 @@ define_Conf! {\n     ///\n     /// #### Noteworthy\n     ///\n-    /// A type, say `SomeType`, listed in this configuration has the same behavior of `[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n+    /// A type, say `SomeType`, listed in this configuration has the same behavior of\n+    /// `[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n     (arithmetic_side_effects_allowed: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n     /// Lint: ARITHMETIC_SIDE_EFFECTS.\n     ///"}, {"sha": "b1b5164ffb3efbbd8982e7de1595389abc29e17b", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -14,6 +14,7 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{match_type, walk_ptrs_ty_depth};\n use clippy_utils::{last_path_segment, match_def_path, match_function_call, match_path, paths};\n use if_chain::if_chain;\n+use itertools::Itertools;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n@@ -34,8 +35,10 @@ use std::path::Path;\n use std::path::PathBuf;\n use std::process::Command;\n \n-/// This is the output file of the lint collector.\n-const OUTPUT_FILE: &str = \"../util/gh-pages/lints.json\";\n+/// This is the json output file of the lint collector.\n+const JSON_OUTPUT_FILE: &str = \"../util/gh-pages/lints.json\";\n+/// This is the markdown output file of the lint collector.\n+const MARKDOWN_OUTPUT_FILE: &str = \"../book/src/lint_configuration.md\";\n /// These lints are excluded from the export.\n const BLACK_LISTED_LINTS: &[&str] = &[\"lint_author\", \"dump_hir\", \"internal_metadata_collector\"];\n /// These groups will be ignored by the lint group matcher. This is useful for collections like\n@@ -176,6 +179,23 @@ This lint has the following configuration variables:\n                 )\n             })\n     }\n+\n+    fn configs_to_markdown(&self, map_fn: fn(&ClippyConfiguration) -> String) -> String {\n+        self.config\n+            .iter()\n+            .filter(|config| config.deprecation_reason.is_none())\n+            .filter(|config| !config.lints.is_empty())\n+            .map(map_fn)\n+            .join(\"\\n\")\n+    }\n+\n+    fn get_markdown_docs(&self) -> String {\n+        format!(\n+            \"## Lint Configuration Options\\n| <div style=\\\"width:290px\\\">Option</div> | Default Value |\\n|--|--|\\n{}\\n\\n{}\\n\",\n+            self.configs_to_markdown(ClippyConfiguration::to_markdown_table_entry),\n+            self.configs_to_markdown(ClippyConfiguration::to_markdown_paragraph),\n+        )\n+    }\n }\n \n impl Drop for MetadataCollector {\n@@ -199,12 +219,37 @@ impl Drop for MetadataCollector {\n \n         collect_renames(&mut lints);\n \n-        // Outputting\n-        if Path::new(OUTPUT_FILE).exists() {\n-            fs::remove_file(OUTPUT_FILE).unwrap();\n+        // Outputting json\n+        if Path::new(JSON_OUTPUT_FILE).exists() {\n+            fs::remove_file(JSON_OUTPUT_FILE).unwrap();\n         }\n-        let mut file = OpenOptions::new().write(true).create(true).open(OUTPUT_FILE).unwrap();\n+        let mut file = OpenOptions::new()\n+            .write(true)\n+            .create(true)\n+            .open(JSON_OUTPUT_FILE)\n+            .unwrap();\n         writeln!(file, \"{}\", serde_json::to_string_pretty(&lints).unwrap()).unwrap();\n+\n+        // Outputting markdown\n+        if Path::new(MARKDOWN_OUTPUT_FILE).exists() {\n+            fs::remove_file(MARKDOWN_OUTPUT_FILE).unwrap();\n+        }\n+        let mut file = OpenOptions::new()\n+            .write(true)\n+            .create(true)\n+            .open(MARKDOWN_OUTPUT_FILE)\n+            .unwrap();\n+        writeln!(\n+            file,\n+            \"<!--\n+This file is generated by `cargo collect-metadata`.\n+Please use that command to update the file and do not edit it by hand.\n+-->\n+\n+{}\",\n+            self.get_markdown_docs(),\n+        )\n+        .unwrap();\n     }\n }\n \n@@ -505,6 +550,28 @@ impl ClippyConfiguration {\n             deprecation_reason,\n         }\n     }\n+\n+    fn to_markdown_paragraph(&self) -> String {\n+        format!(\n+            \"### {}\\n{}\\n\\n**Default Value:** `{}` (`{}`)\\n\\n{}\\n\\n\",\n+            self.name,\n+            self.doc\n+                .lines()\n+                .map(|line| line.strip_prefix(\"    \").unwrap_or(line))\n+                .join(\"\\n\"),\n+            self.default,\n+            self.config_type,\n+            self.lints\n+                .iter()\n+                .map(|name| name.to_string().split_whitespace().next().unwrap().to_string())\n+                .map(|name| format!(\"* [{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n+                .join(\"\\n\"),\n+        )\n+    }\n+\n+    fn to_markdown_table_entry(&self) -> String {\n+        format!(\"| [{}](#{}) | `{}` |\", self.name, self.name, self.default)\n+    }\n }\n \n fn collect_configs() -> Vec<ClippyConfiguration> {"}, {"sha": "173469f6cdc7d0d3bfa69993153d31ae585d85a9", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "e2965146cfe6dd49cebc0f62dcae9bb8e5d8f9a1", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -2491,6 +2491,10 @@ pub fn span_extract_comment(sm: &SourceMap, span: Span) -> String {\n     comments_buf.join(\"\\n\")\n }\n \n+pub fn span_find_starting_semi(sm: &SourceMap, span: Span) -> Span {\n+    sm.span_take_while(span, |&ch| ch == ' ' || ch == ';')\n+}\n+\n macro_rules! op_utils {\n     ($($name:ident $assign:ident)*) => {\n         /// Binary operation traits like `LangItem::Add`"}, {"sha": "c48d27b05f0459495d73d7d64214380789ca65ac", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -647,9 +647,12 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-            sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id).subst(cx.tcx, substs), cx.tcx.opt_parent(def_id))\n-        },\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => sig_from_bounds(\n+            cx,\n+            ty,\n+            cx.tcx.item_bounds(def_id).subst(cx.tcx, substs),\n+            cx.tcx.opt_parent(def_id),\n+        ),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();"}, {"sha": "80eee368178e1418f1ea534a64610e73231422e0", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.68\"\n+version = \"0.1.69\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "4e7fc565a322ae55c12f271fea5e65633830a0f8", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-01-12\"\n+channel = \"nightly-2023-01-27\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "82147eba33f07ac77931498c4c3f782cce896f8b", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -28,7 +28,7 @@ with:\n     -D --deny OPT       Set lint denied\n     -F --forbid OPT     Set lint forbidden\n \n-You can use tool lints to allow or deny lints from your code, eg.:\n+You can use tool lints to allow or deny lints from your code, e.g.:\n \n     #[allow(clippy::needless_lifetimes)]\n \"#;"}, {"sha": "2a240cc249b0c768f084dab5b6f220ae53a59399", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -7,14 +7,6 @@ LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n    = help: convert all references to use `sym::Deref`\n    = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n-error: hardcoded path to a language item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n-   |\n-LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: convert all references to use `LangItem::DerefMut`\n-\n error: hardcoded path to a diagnostic item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n    |\n@@ -23,5 +15,13 @@ LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\",\n    |\n    = help: convert all references to use `sym::deref_method`\n \n+error: hardcoded path to a language item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n+   |\n+LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: convert all references to use `LangItem::DerefMut`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "95f35a61bb2895e8e68bede96abd77f9c3958517", "filename": "tests/ui/bool_assert_comparison.fixed", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fbool_assert_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fbool_assert_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.fixed?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -0,0 +1,161 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::assertions_on_constants)]\n+#![warn(clippy::bool_assert_comparison)]\n+\n+use std::ops::Not;\n+\n+macro_rules! a {\n+    () => {\n+        true\n+    };\n+}\n+macro_rules! b {\n+    () => {\n+        true\n+    };\n+}\n+\n+// Implements the Not trait but with an output type\n+// that's not bool. Should not suggest a rewrite\n+#[derive(Debug, Clone, Copy)]\n+enum ImplNotTraitWithoutBool {\n+    VariantX(bool),\n+    VariantY(u32),\n+}\n+\n+impl PartialEq<bool> for ImplNotTraitWithoutBool {\n+    fn eq(&self, other: &bool) -> bool {\n+        match *self {\n+            ImplNotTraitWithoutBool::VariantX(b) => b == *other,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+impl Not for ImplNotTraitWithoutBool {\n+    type Output = Self;\n+\n+    fn not(self) -> Self::Output {\n+        match self {\n+            ImplNotTraitWithoutBool::VariantX(b) => ImplNotTraitWithoutBool::VariantX(!b),\n+            ImplNotTraitWithoutBool::VariantY(0) => ImplNotTraitWithoutBool::VariantY(1),\n+            ImplNotTraitWithoutBool::VariantY(_) => ImplNotTraitWithoutBool::VariantY(0),\n+        }\n+    }\n+}\n+\n+// This type implements the Not trait with an Output of\n+// type bool. Using assert!(..) must be suggested\n+#[derive(Debug, Clone, Copy)]\n+struct ImplNotTraitWithBool;\n+\n+impl PartialEq<bool> for ImplNotTraitWithBool {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for ImplNotTraitWithBool {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct NonCopy;\n+\n+impl PartialEq<bool> for NonCopy {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for NonCopy {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n+fn main() {\n+    let a = ImplNotTraitWithoutBool::VariantX(true);\n+    let b = ImplNotTraitWithBool;\n+\n+    assert_eq!(\"a\".len(), 1);\n+    assert!(\"a\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert_eq!(a!(), b!());\n+    assert_eq!(a!(), \"\".is_empty());\n+    assert_eq!(\"\".is_empty(), b!());\n+    assert_eq!(a, true);\n+    assert!(b);\n+\n+    assert_ne!(\"a\".len(), 1);\n+    assert!(\"a\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert_ne!(a!(), b!());\n+    assert_ne!(a!(), \"\".is_empty());\n+    assert_ne!(\"\".is_empty(), b!());\n+    assert_ne!(a, true);\n+    assert!(b);\n+\n+    debug_assert_eq!(\"a\".len(), 1);\n+    debug_assert!(\"a\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert_eq!(a!(), b!());\n+    debug_assert_eq!(a!(), \"\".is_empty());\n+    debug_assert_eq!(\"\".is_empty(), b!());\n+    debug_assert_eq!(a, true);\n+    debug_assert!(b);\n+\n+    debug_assert_ne!(\"a\".len(), 1);\n+    debug_assert!(\"a\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert_ne!(a!(), b!());\n+    debug_assert_ne!(a!(), \"\".is_empty());\n+    debug_assert_ne!(\"\".is_empty(), b!());\n+    debug_assert_ne!(a, true);\n+    debug_assert!(b);\n+\n+    // assert with error messages\n+    assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n+    assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n+    assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+    assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    assert_eq!(a, true, \"tadam {}\", false);\n+\n+    debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n+    debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n+    debug_assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+    debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert_eq!(a, true, \"tadam {}\", false);\n+\n+    assert!(a!());\n+    assert!(b!());\n+\n+    use debug_assert_eq as renamed;\n+    renamed!(a, true);\n+    debug_assert!(b);\n+\n+    let non_copy = NonCopy;\n+    assert_eq!(non_copy, true);\n+    // changing the above to `assert!(non_copy)` would cause a `borrow of moved value`\n+    println!(\"{non_copy:?}\");\n+\n+    macro_rules! in_macro {\n+        ($v:expr) => {{\n+            assert_eq!($v, true);\n+        }};\n+    }\n+    in_macro!(a);\n+}"}, {"sha": "88e7560b4f984ba863186e7695c482384d21015a", "filename": "tests/ui/bool_assert_comparison.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::assertions_on_constants)]\n #![warn(clippy::bool_assert_comparison)]\n \n use std::ops::Not;\n@@ -15,7 +18,7 @@ macro_rules! b {\n \n // Implements the Not trait but with an output type\n // that's not bool. Should not suggest a rewrite\n-#[derive(Debug)]\n+#[derive(Debug, Clone, Copy)]\n enum ImplNotTraitWithoutBool {\n     VariantX(bool),\n     VariantY(u32),\n@@ -44,7 +47,7 @@ impl Not for ImplNotTraitWithoutBool {\n \n // This type implements the Not trait with an Output of\n // type bool. Using assert!(..) must be suggested\n-#[derive(Debug)]\n+#[derive(Debug, Clone, Copy)]\n struct ImplNotTraitWithBool;\n \n impl PartialEq<bool> for ImplNotTraitWithBool {\n@@ -61,6 +64,23 @@ impl Not for ImplNotTraitWithBool {\n     }\n }\n \n+#[derive(Debug)]\n+struct NonCopy;\n+\n+impl PartialEq<bool> for NonCopy {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for NonCopy {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n fn main() {\n     let a = ImplNotTraitWithoutBool::VariantX(true);\n     let b = ImplNotTraitWithBool;\n@@ -119,4 +139,23 @@ fn main() {\n     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n     debug_assert_eq!(a, true, \"tadam {}\", false);\n+\n+    assert_eq!(a!(), true);\n+    assert_eq!(true, b!());\n+\n+    use debug_assert_eq as renamed;\n+    renamed!(a, true);\n+    renamed!(b, true);\n+\n+    let non_copy = NonCopy;\n+    assert_eq!(non_copy, true);\n+    // changing the above to `assert!(non_copy)` would cause a `borrow of moved value`\n+    println!(\"{non_copy:?}\");\n+\n+    macro_rules! in_macro {\n+        ($v:expr) => {{\n+            assert_eq!($v, true);\n+        }};\n+    }\n+    in_macro!(a);\n }"}, {"sha": "3d9f8573e617c8f93d3af887c7063511af82a814", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "modified", "additions": 212, "deletions": 45, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,136 +1,303 @@\n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:69:5\n+  --> $DIR/bool_assert_comparison.rs:89:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::bool-assert-comparison` implied by `-D warnings`\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"a\".is_empty(), false);\n+LL +     assert!(\"a\".is_empty());\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:70:5\n+  --> $DIR/bool_assert_comparison.rs:90:5\n    |\n LL |     assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"\".is_empty(), true);\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:71:5\n+  --> $DIR/bool_assert_comparison.rs:91:5\n    |\n LL |     assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(true, \"\".is_empty());\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:76:5\n+  --> $DIR/bool_assert_comparison.rs:96:5\n    |\n LL |     assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(b, true);\n+LL +     assert!(b);\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:79:5\n+  --> $DIR/bool_assert_comparison.rs:99:5\n    |\n LL |     assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(\"a\".is_empty(), false);\n+LL +     assert!(\"a\".is_empty());\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:80:5\n+  --> $DIR/bool_assert_comparison.rs:100:5\n    |\n LL |     assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(\"\".is_empty(), true);\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:81:5\n+  --> $DIR/bool_assert_comparison.rs:101:5\n    |\n LL |     assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(true, \"\".is_empty());\n+LL +     assert!(\"\".is_empty());\n+   |\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:86:5\n+  --> $DIR/bool_assert_comparison.rs:106:5\n    |\n LL |     assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(b, true);\n+LL +     assert!(b);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:89:5\n+  --> $DIR/bool_assert_comparison.rs:109:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"a\".is_empty(), false);\n+LL +     debug_assert!(\"a\".is_empty());\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:90:5\n+  --> $DIR/bool_assert_comparison.rs:110:5\n    |\n LL |     debug_assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"\".is_empty(), true);\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:91:5\n+  --> $DIR/bool_assert_comparison.rs:111:5\n    |\n LL |     debug_assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(true, \"\".is_empty());\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:96:5\n+  --> $DIR/bool_assert_comparison.rs:116:5\n    |\n LL |     debug_assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(b, true);\n+LL +     debug_assert!(b);\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:99:5\n+  --> $DIR/bool_assert_comparison.rs:119:5\n    |\n LL |     debug_assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(\"a\".is_empty(), false);\n+LL +     debug_assert!(\"a\".is_empty());\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:100:5\n+  --> $DIR/bool_assert_comparison.rs:120:5\n    |\n LL |     debug_assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(\"\".is_empty(), true);\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:101:5\n+  --> $DIR/bool_assert_comparison.rs:121:5\n    |\n LL |     debug_assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(true, \"\".is_empty());\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:106:5\n+  --> $DIR/bool_assert_comparison.rs:126:5\n    |\n LL |     debug_assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(b, true);\n+LL +     debug_assert!(b);\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:111:5\n+  --> $DIR/bool_assert_comparison.rs:131:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+LL +     assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:112:5\n+  --> $DIR/bool_assert_comparison.rs:132:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+LL +     assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:113:5\n+  --> $DIR/bool_assert_comparison.rs:133:5\n    |\n LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+LL +     assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:118:5\n+  --> $DIR/bool_assert_comparison.rs:138:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:119:5\n+  --> $DIR/bool_assert_comparison.rs:139:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:120:5\n+  --> $DIR/bool_assert_comparison.rs:140:5\n    |\n LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+   |\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:143:5\n+   |\n+LL |     assert_eq!(a!(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(a!(), true);\n+LL +     assert!(a!());\n+   |\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:144:5\n+   |\n+LL |     assert_eq!(true, b!());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(true, b!());\n+LL +     assert!(b!());\n+   |\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:148:5\n+   |\n+LL |     renamed!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     renamed!(b, true);\n+LL +     debug_assert!(b);\n+   |\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 25 previous errors\n "}, {"sha": "8b2673c2a7fdb24f15e267a76123e4284e279696", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -28,6 +28,7 @@ fn main() {\n     1i32 as u8;\n     1f64 as isize;\n     1f64 as usize;\n+    1f32 as u32 as u16;\n     // Test clippy::cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;"}, {"sha": "4af1de9aa38d354db9afdbad5172a63f7fa9132b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 144, "deletions": 19, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -42,13 +42,24 @@ error: casting `f32` to `i32` may truncate the value\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1f32);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may truncate the value\n   --> $DIR/cast.rs:25:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1f32);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:25:5\n@@ -63,148 +74,262 @@ error: casting `f64` to `f32` may truncate the value\n    |\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     f32::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `i8` may truncate the value\n   --> $DIR/cast.rs:27:5\n    |\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from(1i32);\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `u8` may truncate the value\n   --> $DIR/cast.rs:28:5\n    |\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u8::try_from(1i32);\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `isize` may truncate the value\n   --> $DIR/cast.rs:29:5\n    |\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may truncate the value\n   --> $DIR/cast.rs:30:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may lose the sign of the value\n   --> $DIR/cast.rs:30:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n+error: casting `u32` to `u16` may truncate the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u16::try_from(1f32 as u32);\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `u32` may truncate the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1f32) as u16;\n+   |     ~~~~~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `u32` may lose the sign of the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^\n+\n error: casting `u8` to `i8` may wrap around the value\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:33:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting `u16` to `i16` may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:34:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting `u32` to `i32` may wrap around the value\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:35:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting `u64` to `i64` may wrap around the value\n-  --> $DIR/cast.rs:35:5\n+  --> $DIR/cast.rs:36:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting `usize` to `isize` may wrap around the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:37:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting `i32` to `u32` may lose the sign of the value\n-  --> $DIR/cast.rs:39:5\n+  --> $DIR/cast.rs:40:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting `isize` to `usize` may lose the sign of the value\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:42:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting `i64` to `i8` may truncate the value\n-  --> $DIR/cast.rs:108:5\n+  --> $DIR/cast.rs:109:5\n    |\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because signed\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `u8` may truncate the value\n-  --> $DIR/cast.rs:120:5\n+  --> $DIR/cast.rs:121:5\n    |\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2` to `u8` may truncate the value\n-  --> $DIR/cast.rs:141:21\n+  --> $DIR/cast.rs:142:21\n    |\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = u8::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2::B` to `u8` will truncate the value\n-  --> $DIR/cast.rs:142:21\n+  --> $DIR/cast.rs:143:21\n    |\n LL |             let _ = Self::B as u8;\n    |                     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`\n \n error: casting `main::E5` to `i8` may truncate the value\n-  --> $DIR/cast.rs:178:21\n+  --> $DIR/cast.rs:179:21\n    |\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = i8::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E5::A` to `i8` will truncate the value\n-  --> $DIR/cast.rs:179:21\n+  --> $DIR/cast.rs:180:21\n    |\n LL |             let _ = Self::A as i8;\n    |                     ^^^^^^^^^^^^^\n \n error: casting `main::E6` to `i16` may truncate the value\n-  --> $DIR/cast.rs:193:21\n+  --> $DIR/cast.rs:194:21\n    |\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = i16::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:208:21\n+  --> $DIR/cast.rs:209:21\n    |\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = usize::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E10` to `u16` may truncate the value\n-  --> $DIR/cast.rs:249:21\n+  --> $DIR/cast.rs:250:21\n    |\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = u16::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:257:13\n+  --> $DIR/cast.rs:258:13\n    |\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     let c = u8::try_from((q >> 16));\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:260:13\n+  --> $DIR/cast.rs:261:13\n    |\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     let c = u8::try_from((q / 1000));\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 36 previous errors\n "}, {"sha": "8acf26049f4d15755f9163ed6b0836a59c436e8b", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -4,7 +4,12 @@ error: casting `isize` to `i8` may truncate the value\n LL |     1isize as i8;\n    |     ^^^^^^^^^^^^\n    |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~\n \n error: casting `isize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`isize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size.rs:15:5\n@@ -37,24 +42,48 @@ error: casting `isize` to `i32` may truncate the value on targets with 64-bit wi\n    |\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `isize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:20:5\n    |\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:21:5\n    |\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1usize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1usize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n@@ -69,18 +98,36 @@ error: casting `i64` to `isize` may truncate the value on targets with 32-bit wi\n    |\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1i64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:25:5\n    |\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1i64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1u64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n@@ -93,6 +140,12 @@ error: casting `u64` to `usize` may truncate the value on targets with 32-bit wi\n    |\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1u64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `isize` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:28:5"}, {"sha": "277801194a1d5d1d37a328e8236b7ba9db2e9e59", "filename": "tests/ui/module_name_repetitions.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fmodule_name_repetitions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fmodule_name_repetitions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_name_repetitions.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -1,34 +1,34 @@\n error: item name starts with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:8:5\n+  --> $DIR/module_name_repetitions.rs:8:12\n    |\n LL |     pub fn foo_bar() {}\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^\n    |\n    = note: `-D clippy::module-name-repetitions` implied by `-D warnings`\n \n error: item name ends with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:9:5\n+  --> $DIR/module_name_repetitions.rs:9:12\n    |\n LL |     pub fn bar_foo() {}\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^\n \n error: item name starts with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:10:5\n+  --> $DIR/module_name_repetitions.rs:10:16\n    |\n LL |     pub struct FooCake;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^\n \n error: item name ends with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:11:5\n+  --> $DIR/module_name_repetitions.rs:11:14\n    |\n LL |     pub enum CakeFoo {}\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^\n \n error: item name starts with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:12:5\n+  --> $DIR/module_name_repetitions.rs:12:16\n    |\n LL |     pub struct Foo7Bar;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "41263535df6736f6775cd037e9ca358a31e6d31b", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -0,0 +1,110 @@\n+#![allow(unused)]\n+#![allow(deref_nullptr)]\n+#![allow(clippy::unnecessary_operation)]\n+#![allow(clippy::drop_copy)]\n+#![warn(clippy::multiple_unsafe_ops_per_block)]\n+\n+use core::arch::asm;\n+\n+fn raw_ptr() -> *const () {\n+    core::ptr::null()\n+}\n+\n+unsafe fn not_very_safe() {}\n+\n+struct Sample;\n+\n+impl Sample {\n+    unsafe fn not_very_safe(&self) {}\n+}\n+\n+#[allow(non_upper_case_globals)]\n+const sample: Sample = Sample;\n+\n+union U {\n+    i: i32,\n+    u: u32,\n+}\n+\n+static mut STATIC: i32 = 0;\n+\n+fn test1() {\n+    unsafe {\n+        STATIC += 1;\n+        not_very_safe();\n+    }\n+}\n+\n+fn test2() {\n+    let u = U { i: 0 };\n+\n+    unsafe {\n+        drop(u.u);\n+        *raw_ptr();\n+    }\n+}\n+\n+fn test3() {\n+    unsafe {\n+        asm!(\"nop\");\n+        sample.not_very_safe();\n+        STATIC = 0;\n+    }\n+}\n+\n+fn test_all() {\n+    let u = U { i: 0 };\n+    unsafe {\n+        drop(u.u);\n+        drop(STATIC);\n+        sample.not_very_safe();\n+        not_very_safe();\n+        *raw_ptr();\n+        asm!(\"nop\");\n+    }\n+}\n+\n+// no lint\n+fn correct1() {\n+    unsafe {\n+        STATIC += 1;\n+    }\n+}\n+\n+// no lint\n+fn correct2() {\n+    unsafe {\n+        STATIC += 1;\n+    }\n+\n+    unsafe {\n+        *raw_ptr();\n+    }\n+}\n+\n+// no lint\n+fn correct3() {\n+    let u = U { u: 0 };\n+\n+    unsafe {\n+        not_very_safe();\n+    }\n+\n+    unsafe {\n+        drop(u.i);\n+    }\n+}\n+\n+// tests from the issue (https://github.com/rust-lang/rust-clippy/issues/10064)\n+\n+unsafe fn read_char_bad(ptr: *const u8) -> char {\n+    unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n+}\n+\n+// no lint\n+unsafe fn read_char_good(ptr: *const u8) -> char {\n+    let int_value = unsafe { *ptr.cast::<u32>() };\n+    unsafe { core::char::from_u32_unchecked(int_value) }\n+}\n+\n+fn main() {}"}, {"sha": "f6b8341795d235db0b6f8b48da351f2d632954b7", "filename": "tests/ui/multiple_unsafe_ops_per_block.stderr", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -0,0 +1,129 @@\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:32:5\n+   |\n+LL | /     unsafe {\n+LL | |         STATIC += 1;\n+LL | |         not_very_safe();\n+LL | |     }\n+   | |_____^\n+   |\n+note: modification of a mutable static occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:33:9\n+   |\n+LL |         STATIC += 1;\n+   |         ^^^^^^^^^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:34:9\n+   |\n+LL |         not_very_safe();\n+   |         ^^^^^^^^^^^^^^^\n+   = note: `-D clippy::multiple-unsafe-ops-per-block` implied by `-D warnings`\n+\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:41:5\n+   |\n+LL | /     unsafe {\n+LL | |         drop(u.u);\n+LL | |         *raw_ptr();\n+LL | |     }\n+   | |_____^\n+   |\n+note: union field access occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:42:14\n+   |\n+LL |         drop(u.u);\n+   |              ^^^\n+note: raw pointer dereference occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:43:9\n+   |\n+LL |         *raw_ptr();\n+   |         ^^^^^^^^^^\n+\n+error: this `unsafe` block contains 3 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:48:5\n+   |\n+LL | /     unsafe {\n+LL | |         asm!(\"nop\");\n+LL | |         sample.not_very_safe();\n+LL | |         STATIC = 0;\n+LL | |     }\n+   | |_____^\n+   |\n+note: inline assembly used here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:49:9\n+   |\n+LL |         asm!(\"nop\");\n+   |         ^^^^^^^^^^^\n+note: unsafe method call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:50:9\n+   |\n+LL |         sample.not_very_safe();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+note: modification of a mutable static occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:51:9\n+   |\n+LL |         STATIC = 0;\n+   |         ^^^^^^^^^^\n+\n+error: this `unsafe` block contains 6 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:57:5\n+   |\n+LL | /     unsafe {\n+LL | |         drop(u.u);\n+LL | |         drop(STATIC);\n+LL | |         sample.not_very_safe();\n+...  |\n+LL | |         asm!(\"nop\");\n+LL | |     }\n+   | |_____^\n+   |\n+note: union field access occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:58:14\n+   |\n+LL |         drop(u.u);\n+   |              ^^^\n+note: access of a mutable static occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:59:14\n+   |\n+LL |         drop(STATIC);\n+   |              ^^^^^^\n+note: unsafe method call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:60:9\n+   |\n+LL |         sample.not_very_safe();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:61:9\n+   |\n+LL |         not_very_safe();\n+   |         ^^^^^^^^^^^^^^^\n+note: raw pointer dereference occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:62:9\n+   |\n+LL |         *raw_ptr();\n+   |         ^^^^^^^^^^\n+note: inline assembly used here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:63:9\n+   |\n+LL |         asm!(\"nop\");\n+   |         ^^^^^^^^^^^\n+\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:101:5\n+   |\n+LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:101:14\n+   |\n+LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: raw pointer dereference occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:101:39\n+   |\n+LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n+   |                                       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "079e3531def1b04d83f6adcfba39c9dd8e270eb5", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -31,6 +31,16 @@ fn test_no_semicolon() -> bool {\n     true\n }\n \n+#[rustfmt::skip]\n+fn test_multiple_semicolon() -> bool {\n+    true\n+}\n+\n+#[rustfmt::skip]\n+fn test_multiple_semicolon_with_spaces() -> bool {\n+    true\n+}\n+\n fn test_if_block() -> bool {\n     if true {\n         true"}, {"sha": "c1c48284f086901d31e9353426684e967f52f76f", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -31,6 +31,16 @@ fn test_no_semicolon() -> bool {\n     return true;\n }\n \n+#[rustfmt::skip]\n+fn test_multiple_semicolon() -> bool {\n+    return true;;;\n+}\n+\n+#[rustfmt::skip]\n+fn test_multiple_semicolon_with_spaces() -> bool {\n+    return true;; ; ;\n+}\n+\n fn test_if_block() -> bool {\n     if true {\n         return true;"}, {"sha": "08b04bfe9d8bfb120d0ee48329fa3b9114852628", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 63, "deletions": 47, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -16,63 +16,79 @@ LL |     return true;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:36:9\n+  --> $DIR/needless_return.rs:36:5\n+   |\n+LL |     return true;;;\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:41:5\n+   |\n+LL |     return true;; ; ;\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:46:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:38:9\n+  --> $DIR/needless_return.rs:48:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:44:17\n+  --> $DIR/needless_return.rs:54:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:46:13\n+  --> $DIR/needless_return.rs:56:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:53:9\n+  --> $DIR/needless_return.rs:63:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:55:16\n+  --> $DIR/needless_return.rs:65:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:59:5\n+  --> $DIR/needless_return.rs:69:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:62:21\n+  --> $DIR/needless_return.rs:72:21\n    |\n LL |   fn test_void_fun() {\n    |  _____________________^\n@@ -82,7 +98,7 @@ LL | |     return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:67:11\n+  --> $DIR/needless_return.rs:77:11\n    |\n LL |       if b {\n    |  ___________^\n@@ -92,7 +108,7 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:69:13\n+  --> $DIR/needless_return.rs:79:13\n    |\n LL |       } else {\n    |  _____________^\n@@ -102,15 +118,15 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:77:14\n+  --> $DIR/needless_return.rs:87:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:85:24\n+  --> $DIR/needless_return.rs:95:24\n    |\n LL |               let _ = 42;\n    |  ________________________^\n@@ -120,39 +136,39 @@ LL | |             return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:88:14\n+  --> $DIR/needless_return.rs:98:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:101:9\n+  --> $DIR/needless_return.rs:111:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:103:9\n+  --> $DIR/needless_return.rs:113:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:125:32\n+  --> $DIR/needless_return.rs:135:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^\n    |\n    = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:129:21\n+  --> $DIR/needless_return.rs:139:21\n    |\n LL |           let _ = || {\n    |  _____________________^\n@@ -162,95 +178,95 @@ LL | |             return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:132:20\n+  --> $DIR/needless_return.rs:142:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^\n    |\n    = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:138:32\n+  --> $DIR/needless_return.rs:148:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:147:5\n+  --> $DIR/needless_return.rs:157:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:151:5\n+  --> $DIR/needless_return.rs:161:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:156:9\n+  --> $DIR/needless_return.rs:166:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:158:9\n+  --> $DIR/needless_return.rs:168:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:164:17\n+  --> $DIR/needless_return.rs:174:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:166:13\n+  --> $DIR/needless_return.rs:176:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:173:9\n+  --> $DIR/needless_return.rs:183:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:175:16\n+  --> $DIR/needless_return.rs:185:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:179:5\n+  --> $DIR/needless_return.rs:189:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:182:33\n+  --> $DIR/needless_return.rs:192:33\n    |\n LL |   async fn async_test_void_fun() {\n    |  _________________________________^\n@@ -260,7 +276,7 @@ LL | |     return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:187:11\n+  --> $DIR/needless_return.rs:197:11\n    |\n LL |       if b {\n    |  ___________^\n@@ -270,7 +286,7 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:189:13\n+  --> $DIR/needless_return.rs:199:13\n    |\n LL |       } else {\n    |  _____________^\n@@ -280,95 +296,95 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:197:14\n+  --> $DIR/needless_return.rs:207:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:210:9\n+  --> $DIR/needless_return.rs:220:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:212:9\n+  --> $DIR/needless_return.rs:222:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:228:5\n+  --> $DIR/needless_return.rs:238:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:239:9\n+  --> $DIR/needless_return.rs:249:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:241:9\n+  --> $DIR/needless_return.rs:251:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:248:13\n+  --> $DIR/needless_return.rs:258:13\n    |\n LL |             return 10;\n    |             ^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:251:13\n+  --> $DIR/needless_return.rs:261:13\n    |\n LL |             return 100;\n    |             ^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:259:9\n+  --> $DIR/needless_return.rs:269:9\n    |\n LL |         return 0;\n    |         ^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:266:13\n+  --> $DIR/needless_return.rs:276:13\n    |\n LL |             return *(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:268:13\n+  --> $DIR/needless_return.rs:278:13\n    |\n LL |             return !*(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:275:20\n+  --> $DIR/needless_return.rs:285:20\n    |\n LL |           let _ = 42;\n    |  ____________________^\n@@ -379,28 +395,28 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:282:20\n+  --> $DIR/needless_return.rs:292:20\n    |\n LL |         let _ = 42; return;\n    |                    ^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:294:9\n+  --> $DIR/needless_return.rs:304:9\n    |\n LL |         return Ok(format!(\"ok!\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:296:9\n+  --> $DIR/needless_return.rs:306:9\n    |\n LL |         return Err(format!(\"err!\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n-error: aborting due to 48 previous errors\n+error: aborting due to 50 previous errors\n "}, {"sha": "55307506eb3c74ca246381a58aaddf42eade4616", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -51,6 +51,8 @@ fn main() {\n     // e is a function pointer type and U is an integer; fptr-addr-cast\n     let _usize_from_fn_ptr_transmute = unsafe { foo as usize };\n     let _usize_from_fn_ptr = foo as *const usize;\n+\n+    let _usize_from_ref = unsafe { &1u32 as *const u32 as usize };\n }\n \n // If a ref-to-ptr cast of this form where the pointer type points to a type other"}, {"sha": "e7360f3f9dcbaacc48e1607b95e6bfaa8982f939", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -51,6 +51,8 @@ fn main() {\n     // e is a function pointer type and U is an integer; fptr-addr-cast\n     let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };\n     let _usize_from_fn_ptr = foo as *const usize;\n+\n+    let _usize_from_ref = unsafe { transmute::<*const u32, usize>(&1u32) };\n }\n \n // If a ref-to-ptr cast of this form where the pointer type points to a type other"}, {"sha": "e862fcb67a4a086421355728a997c318126e2594", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -46,11 +46,17 @@ error: transmute from `fn(usize) -> u8` to `usize` which could be expressed as a\n LL |     let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as usize`\n \n+error: transmute from `*const u32` to `usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:55:36\n+   |\n+LL |     let _usize_from_ref = unsafe { transmute::<*const u32, usize>(&1u32) };\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&1u32 as *const u32 as usize`\n+\n error: transmute from a reference to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:64:14\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:66:14\n    |\n LL |     unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `in_param as *const [i32; 1] as *const u8`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "89fedb145f88bd2c75748559237c58477e0fe6a3", "filename": "tests/ui/unnecessary_safety_comment.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Funnecessary_safety_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fe0d57e8cd5025011340c91f26dbc4a87a881/tests%2Fui%2Funnecessary_safety_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_safety_comment.rs?ref=997fe0d57e8cd5025011340c91f26dbc4a87a881", "patch": "@@ -48,4 +48,21 @@ fn unnecessary_on_stmt_and_expr() -> u32 {\n     24\n }\n \n+mod issue_10084 {\n+    unsafe fn bar() -> i32 {\n+        42\n+    }\n+\n+    macro_rules! foo {\n+        () => {\n+            // SAFETY: This is necessary\n+            unsafe { bar() }\n+        };\n+    }\n+\n+    fn main() {\n+        foo!();\n+    }\n+}\n+\n fn main() {}"}]}