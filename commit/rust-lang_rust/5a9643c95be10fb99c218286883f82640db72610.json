{"sha": "5a9643c95be10fb99c218286883f82640db72610", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOTY0M2M5NWJlMTBmYjk5YzIxODI4Njg4M2Y4MjY0MGRiNzI2MTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T11:15:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T11:17:21Z"}, "message": "Fix tidy", "tree": {"sha": "69f70da50ad12fa706ceaf03af4274f0a93e8a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f70da50ad12fa706ceaf03af4274f0a93e8a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a9643c95be10fb99c218286883f82640db72610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9643c95be10fb99c218286883f82640db72610", "html_url": "https://github.com/rust-lang/rust/commit/5a9643c95be10fb99c218286883f82640db72610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a9643c95be10fb99c218286883f82640db72610/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce51e653c75e0be65cb807590109c20af9513a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce51e653c75e0be65cb807590109c20af9513a5e", "html_url": "https://github.com/rust-lang/rust/commit/ce51e653c75e0be65cb807590109c20af9513a5e"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "fc092481a4a960e364c861a1cefaae272079344a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a9643c95be10fb99c218286883f82640db72610/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9643c95be10fb99c218286883f82640db72610/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5a9643c95be10fb99c218286883f82640db72610", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-filelength\n-\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command line options.\n "}, {"sha": "c698200039623e477be5c887d9984f1244b7c80c", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5a9643c95be10fb99c218286883f82640db72610/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9643c95be10fb99c218286883f82640db72610/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5a9643c95be10fb99c218286883f82640db72610", "patch": "@@ -43,25 +43,30 @@ fn opts() -> Options {\n     Options::ENABLE_TABLES | Options::ENABLE_FOOTNOTES\n }\n \n-/// A unit struct which has the `fmt::Display` trait implemented. When\n-/// formatted, this struct will emit the HTML corresponding to the rendered\n+/// A tuple struct that has the `fmt::Display` trait implemented.\n+/// When formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n-///\n-/// The second parameter is a list of link replacements.\n-///\n-/// The third is the current list of used header IDs.\n-///\n-/// The fourth is whether to allow the use of explicit error codes in doctest lang strings.\n-///\n-/// The fifth is what default edition to use when parsing doctests (to add a `fn main`).\n pub struct Markdown<'a>(\n-    pub &'a str, pub &'a [(String, String)], pub RefCell<&'a mut IdMap>, pub ErrorCodes, pub Edition);\n-/// A unit struct like `Markdown`, that renders the markdown with a\n-/// table of contents.\n-pub struct MarkdownWithToc<'a>(pub &'a str, pub RefCell<&'a mut IdMap>, pub ErrorCodes, pub Edition);\n-/// A unit struct like `Markdown`, that renders the markdown escaping HTML tags.\n+    pub &'a str,\n+    /// A list of link replacements.\n+    pub &'a [(String, String)],\n+    /// The current list of used header IDs.\n+    pub RefCell<&'a mut IdMap>,\n+    /// Whether to allow the use of explicit error codes in doctest lang strings.\n+    pub ErrorCodes,\n+    /// Default edition to use when parsing doctests (to add a `fn main`).\n+    pub Edition,\n+);\n+/// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n+pub struct MarkdownWithToc<'a>(\n+    pub &'a str,\n+    pub RefCell<&'a mut IdMap>,\n+    pub ErrorCodes,\n+    pub Edition,\n+);\n+/// A tuple struct like `Markdown` that renders the markdown escaping HTML tags.\n pub struct MarkdownHtml<'a>(pub &'a str, pub RefCell<&'a mut IdMap>, pub ErrorCodes, pub Edition);\n-/// A unit struct like `Markdown`, that renders only the first paragraph.\n+/// A tuple struct like `Markdown` that renders only the first paragraph.\n pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n \n #[derive(Copy, Clone, PartialEq, Debug)]"}]}