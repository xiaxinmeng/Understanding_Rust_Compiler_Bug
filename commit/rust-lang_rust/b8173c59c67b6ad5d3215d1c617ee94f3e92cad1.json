{"sha": "b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "node_id": "C_kwDOAAsO6NoAKGI4MTczYzU5YzY3YjZhZDVkMzIxNWQxYzYxN2VlOTRmM2U5MmNhZDE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-16T22:52:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-16T22:52:20Z"}, "message": "Rollup merge of #89943 - matthiaskrgr:clpcompl, r=oli-obk\n\nclippy::complexity fixes", "tree": {"sha": "afcc645a991606a77deb59b817312604668e6795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcc645a991606a77deb59b817312604668e6795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJha1ekCRBK7hj4Ov3rIwAAZR0IACB6FRXg3Oa+ifKf25DqAtJE\ntBrINQKZo2xwFYa6McxfJpCSrCAEAxf3MfEXdRritjPNbPpI0iiRlRFYLU2gQHva\nfZAGOlXZgxmwjnWYUY4tdec26veWjTKXOIQaHZTC0Ww3FQTTVjhIurpHyu/GC3q6\ngJskWnSEOF6hVKTj6FlbYZbz0zz88lULIrC47v6LCDS0DMgDPpaeLLdA1SZPoI8u\nZWYg57qqElbd5sf2sE44G6WjBV6w2P9AkhjpreZbuT4G9DH9R9rFbVUrMcGyDOgm\ncQLmkr81TBLswZkGFtktkxCzy74D2E3jwZBAS9If246bX5nP+neNDCExbflEMNs=\n=lWZH\n-----END PGP SIGNATURE-----\n", "payload": "tree afcc645a991606a77deb59b817312604668e6795\nparent c393f33d3580832e84e96ac93e56a8da18cc34ac\nparent c645d3f3b99da97b802b1c757fcd1a3c21c84e8a\nauthor Yuki Okushi <jtitor@2k36.org> 1634424740 +0900\ncommitter GitHub <noreply@github.com> 1634424740 +0900\n\nRollup merge of #89943 - matthiaskrgr:clpcompl, r=oli-obk\n\nclippy::complexity fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "html_url": "https://github.com/rust-lang/rust/commit/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c393f33d3580832e84e96ac93e56a8da18cc34ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c393f33d3580832e84e96ac93e56a8da18cc34ac", "html_url": "https://github.com/rust-lang/rust/commit/c393f33d3580832e84e96ac93e56a8da18cc34ac"}, {"sha": "c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "html_url": "https://github.com/rust-lang/rust/commit/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "1b123520961a6601106571a5d53e43dde4a31f33", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "patch": "@@ -171,7 +171,7 @@ fn get_features(\n             }\n \n             if let Some(allowed) = sess.opts.debugging_opts.allow_features.as_ref() {\n-                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n+                if allowed.iter().all(|f| name.as_str() != *f) {\n                     struct_span_err!(\n                         span_handler,\n                         mi.span(),"}, {"sha": "a36c9b6ed7304ba6fae8b627e84aa04c1561422b", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "patch": "@@ -1004,13 +1004,13 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Checks that a range of bytes is initialized. If not, returns the `InvalidUninitBytes`\n     /// error which will report the first range of bytes which is uninitialized.\n     fn check_init(&self, range: AllocRange) -> AllocResult {\n-        self.is_init(range).or_else(|idx_range| {\n-            Err(AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n+        self.is_init(range).map_err(|idx_range| {\n+            AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n                 access_offset: range.start,\n                 access_size: range.size,\n                 uninit_offset: idx_range.start,\n                 uninit_size: idx_range.end - idx_range.start, // `Size` subtraction\n-            })))\n+            }))\n         })\n     }\n "}, {"sha": "05675e086d777ea638c45d918ab48f9efa663929", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "patch": "@@ -1837,7 +1837,7 @@ crate fn show_candidates(\n                 .skip(1)\n                 .all(|(_, descr, _)| descr == descr_first)\n             {\n-                format!(\"{}\", descr_first)\n+                descr_first.to_string()\n             } else {\n                 \"item\".to_string()\n             };"}, {"sha": "c46439b85105070215e051af0ae0d64ec0e5da8b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "patch": "@@ -765,7 +765,7 @@ crate fn find_testable_code<T: doctest::Tester>(\n                 // If there are characters between the preceding line ending and\n                 // this code block, `str::lines` will return an additional line,\n                 // which we subtract here.\n-                if nb_lines != 0 && !&doc[prev_offset..offset.start].ends_with(\"\\n\") {\n+                if nb_lines != 0 && !&doc[prev_offset..offset.start].ends_with('\\n') {\n                     nb_lines -= 1;\n                 }\n                 let line = tests.get_line() + nb_lines + 1;"}, {"sha": "b13ab64011dc164a943451a89487b8a80dfd2061", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8173c59c67b6ad5d3215d1c617ee94f3e92cad1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=b8173c59c67b6ad5d3215d1c617ee94f3e92cad1", "patch": "@@ -113,11 +113,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     .unwrap_or(&[])\n                     .iter()\n                     .filter_map(|attr| {\n-                        Some(\n-                            Cfg::parse(attr.meta_item()?)\n-                                .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n-                                .ok()?,\n-                        )\n+                        Cfg::parse(attr.meta_item()?)\n+                            .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n+                            .ok()\n                     })\n                     .collect::<Vec<_>>()\n             })"}]}