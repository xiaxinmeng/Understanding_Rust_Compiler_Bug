{"sha": "f8b7b64bce772f21124b4790538ca97418cc23ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjdiNjRiY2U3NzJmMjExMjRiNDc5MDUzOGNhOTc0MThjYzIzY2E=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-01-31T15:05:58Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "WIP use params for APIT", "tree": {"sha": "ebc7674e044201580178210c4d36a71d530cd3fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebc7674e044201580178210c4d36a71d530cd3fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b7b64bce772f21124b4790538ca97418cc23ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b7b64bce772f21124b4790538ca97418cc23ca", "html_url": "https://github.com/rust-lang/rust/commit/f8b7b64bce772f21124b4790538ca97418cc23ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b7b64bce772f21124b4790538ca97418cc23ca/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33aa2f8e4f2b9c7c3a6b28427cb6d6f2aef7b802", "url": "https://api.github.com/repos/rust-lang/rust/commits/33aa2f8e4f2b9c7c3a6b28427cb6d6f2aef7b802", "html_url": "https://github.com/rust-lang/rust/commit/33aa2f8e4f2b9c7c3a6b28427cb6d6f2aef7b802"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "0d65984eefba36cf5912e9e5857a392b3e29f39e", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b7b64bce772f21124b4790538ca97418cc23ca/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b7b64bce772f21124b4790538ca97418cc23ca/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=f8b7b64bce772f21124b4790538ca97418cc23ca", "patch": "@@ -480,7 +480,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         for (type_ref, pat) in data.params.iter().zip(body.params.iter()) {\n-            let ty = self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Opaque);\n+            let ty = self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Param);\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }"}, {"sha": "88d962b4760c6914874ac6d6620a40b629bebb34", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8b7b64bce772f21124b4790538ca97418cc23ca/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b7b64bce772f21124b4790538ca97418cc23ca/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=f8b7b64bce772f21124b4790538ca97418cc23ca", "patch": "@@ -30,6 +30,7 @@ use crate::{\n     Binders, FnSig, GenericPredicate, PolyFnSig, ProjectionPredicate, ProjectionTy, Substs,\n     TraitEnvironment, TraitRef, Ty, TypeCtor,\n };\n+use hir_expand::name::Name;\n \n #[derive(Debug)]\n pub struct TyLoweringContext<'a, DB: HirDatabase> {\n@@ -69,6 +70,10 @@ pub enum ImplTraitLoweringMode {\n     /// i.e. for arguments of the function we're currently checking, and return\n     /// types of functions we're calling.\n     Opaque,\n+    /// `impl Trait` gets lowered into a type variable. Used for argument\n+    /// position impl Trait currently, since it allows us to support that\n+    /// without Chalk.\n+    Param,\n     /// `impl Trait` gets lowered into a variable that can unify with some\n     /// type. This is used in places where values flow 'in', i.e. for arguments\n     /// of functions we're calling, and the return type of the function we're\n@@ -137,6 +142,11 @@ impl Ty {\n                             .collect();\n                         Ty::Opaque(predicates)\n                     }\n+                    ImplTraitLoweringMode::Param => {\n+                        let idx = ctx.impl_trait_counter.get();\n+                        ctx.impl_trait_counter.set(idx + 1);\n+                        Ty::Param { idx: idx as u32, name: Name::missing() }\n+                    }\n                     ImplTraitLoweringMode::Variable => {\n                         let idx = ctx.impl_trait_counter.get();\n                         ctx.impl_trait_counter.set(idx + 1);"}, {"sha": "dc78e83cd2c6a99b379a9ee885fe8cb3ef72b369", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f8b7b64bce772f21124b4790538ca97418cc23ca/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b7b64bce772f21124b4790538ca97418cc23ca/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=f8b7b64bce772f21124b4790538ca97418cc23ca", "patch": "@@ -849,6 +849,59 @@ fn test<T: ApplyL>(t: T) {\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn argument_impl_trait() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+trait Trait<T> {\n+    fn foo(&self) -> T;\n+    fn foo2(&self) -> i64;\n+}\n+fn bar(impl Trait<u64>) {}\n+struct S<T>(T);\n+impl<T> Trait<T> for S<T> {}\n+\n+fn test(x: impl Trait<u64>, y: &impl Trait<u64>) {\n+    x;\n+    y;\n+    let z = S(1);\n+    bar(z);\n+    x.foo();\n+    y.foo();\n+    z.foo();\n+    x.foo2();\n+    y.foo2();\n+    z.foo2();\n+}\n+\"#, true),\n+        @r###\"\n+    [30; 34) 'self': &Self\n+    [55; 59) 'self': &Self\n+    [99; 101) '{}': ()\n+    [111; 112) 'x': impl Trait<u64>\n+    [131; 132) 'y': &impl Trait<u64>\n+    [152; 269) '{     ...2(); }': ()\n+    [158; 159) 'x': impl Trait<u64>\n+    [165; 166) 'y': &impl Trait<u64>\n+    [176; 177) 'z': impl Trait<u64>\n+    [180; 183) 'bar': fn bar() -> impl Trait<u64>\n+    [180; 185) 'bar()': impl Trait<u64>\n+    [191; 192) 'x': impl Trait<u64>\n+    [191; 198) 'x.foo()': u64\n+    [204; 205) 'y': &impl Trait<u64>\n+    [204; 211) 'y.foo()': u64\n+    [217; 218) 'z': impl Trait<u64>\n+    [217; 224) 'z.foo()': u64\n+    [230; 231) 'x': impl Trait<u64>\n+    [230; 238) 'x.foo2()': i64\n+    [244; 245) 'y': &impl Trait<u64>\n+    [244; 252) 'y.foo2()': i64\n+    [258; 259) 'z': impl Trait<u64>\n+    [258; 266) 'z.foo2()': i64\n+    \"###\n+    );\n+}\n+\n #[test]\n #[ignore]\n fn impl_trait() {"}]}