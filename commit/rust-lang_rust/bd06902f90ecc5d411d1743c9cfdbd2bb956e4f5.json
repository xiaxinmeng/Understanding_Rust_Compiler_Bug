{"sha": "bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "node_id": "C_kwDOAAsO6NoAKGJkMDY5MDJmOTBlY2M1ZDQxMWQxNzQzYzljZmRiZDJiYjk1NmU0ZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T12:44:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T12:44:08Z"}, "message": "Auto merge of #12395 - feniljain:fix_bugs, r=Veykril\n\nfix: f32 and f64 representation during lowering\n\nshould fix #12380", "tree": {"sha": "88b89aa9eed40ad6fea06199b576785cf4fc5086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b89aa9eed40ad6fea06199b576785cf4fc5086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "html_url": "https://github.com/rust-lang/rust/commit/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145bad473d048181affade57c3bec0e79af31d2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/145bad473d048181affade57c3bec0e79af31d2e", "html_url": "https://github.com/rust-lang/rust/commit/145bad473d048181affade57c3bec0e79af31d2e"}, {"sha": "1f4870ff1c8e2c2a5d4a0d73fc2b1c196b395f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4870ff1c8e2c2a5d4a0d73fc2b1c196b395f3e", "html_url": "https://github.com/rust-lang/rust/commit/1f4870ff1c8e2c2a5d4a0d73fc2b1c196b395f3e"}], "stats": {"total": 142, "additions": 132, "deletions": 10}, "files": [{"sha": "5d7a1100cd50c3061f693b903a6ce292589a71ab", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "patch": "@@ -29,8 +29,8 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n     db::DefDatabase,\n     expr::{\n-        dummy_expr_id, Array, BindingAnnotation, Expr, ExprId, Label, LabelId, Literal, MatchArm,\n-        Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n+        dummy_expr_id, Array, BindingAnnotation, Expr, ExprId, FloatTypeWrapper, Label, LabelId,\n+        Literal, MatchArm, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     intern::Interned,\n     item_scope::BuiltinShadowMode,\n@@ -968,7 +968,10 @@ impl From<ast::LiteralKind> for Literal {\n             // FIXME: these should have actual values filled in, but unsure on perf impact\n             LiteralKind::IntNumber(lit) => {\n                 if let builtin @ Some(_) = lit.suffix().and_then(BuiltinFloat::from_suffix) {\n-                    Literal::Float(Default::default(), builtin)\n+                    Literal::Float(\n+                        FloatTypeWrapper::new(lit.float_value().unwrap_or(Default::default())),\n+                        builtin,\n+                    )\n                 } else if let builtin @ Some(_) = lit.suffix().and_then(BuiltinInt::from_suffix) {\n                     Literal::Int(lit.value().unwrap_or(0) as i128, builtin)\n                 } else {\n@@ -978,7 +981,7 @@ impl From<ast::LiteralKind> for Literal {\n             }\n             LiteralKind::FloatNumber(lit) => {\n                 let ty = lit.suffix().and_then(BuiltinFloat::from_suffix);\n-                Literal::Float(Default::default(), ty)\n+                Literal::Float(FloatTypeWrapper::new(lit.value().unwrap_or(Default::default())), ty)\n             }\n             LiteralKind::ByteString(bs) => {\n                 let text = bs.value().map(Box::from).unwrap_or_else(Default::default);"}, {"sha": "97681abab1f4b6ad9323dc7b05c2a8c63c51686d", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "patch": "@@ -38,6 +38,24 @@ pub struct Label {\n }\n pub type LabelId = Idx<Label>;\n \n+// We convert float values into bits and that's how we don't need to deal with f32 and f64.\n+// For PartialEq, bits comparison should work, as ordering is not important\n+// https://github.com/rust-lang/rust-analyzer/issues/12380#issuecomment-1137284360\n+#[derive(Default, Debug, Clone, Eq, PartialEq)]\n+pub struct FloatTypeWrapper(u64);\n+\n+impl FloatTypeWrapper {\n+    pub fn new(value: f64) -> Self {\n+        Self(value.to_bits())\n+    }\n+}\n+\n+impl std::fmt::Display for FloatTypeWrapper {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(f, \"{}\", f64::from_bits(self.0))\n+    }\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Literal {\n     String(Box<str>),\n@@ -46,7 +64,10 @@ pub enum Literal {\n     Bool(bool),\n     Int(i128, Option<BuiltinInt>),\n     Uint(u128, Option<BuiltinUint>),\n-    Float(u64, Option<BuiltinFloat>), // FIXME: f64 is not Eq\n+    // Here we are using a wrapper around float because f32 and f64 do not implement Eq, so they\n+    // could not be used directly here, to understand how the wrapper works go to definition of\n+    // FloatTypeWrapper\n+    Float(FloatTypeWrapper, Option<BuiltinFloat>),\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "07f224da66c8f317d6ebd62b9fbee152089cb1ff", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "patch": "@@ -3595,6 +3595,72 @@ const FOO$0: u8 = b'\\x61';\n \n             ---\n \n+            This is a doc\n+        \"#]],\n+    );\n+    // show float literal\n+    check(\n+        r#\"\n+    /// This is a doc\n+    const FOO$0: f64 = 1.0234;\n+    \"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: f64 = 1.0234\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    //show float typecasted from int\n+    check(\n+        r#\"\n+/// This is a doc\n+const FOO$0: f32 = 1f32;\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: f32 = 1\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    //show f64 typecasted from float\n+    check(\n+        r#\"\n+/// This is a doc\n+const FOO$0: f64 = 1.0f64;\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: f64 = 1\n+            ```\n+\n+            ---\n+\n             This is a doc\n         \"#]],\n     );"}, {"sha": "28976d837b88a142e44d26c06a11d2108606d24c", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=bd06902f90ecc5d411d1743c9cfdbd2bb956e4f5", "patch": "@@ -319,17 +319,49 @@ impl ast::IntNumber {\n             Some(suffix)\n         }\n     }\n+\n+    pub fn float_value(&self) -> Option<f64> {\n+        let (_, text, _) = self.split_into_parts();\n+        text.parse::<f64>().ok()\n+    }\n }\n \n impl ast::FloatNumber {\n-    pub fn suffix(&self) -> Option<&str> {\n+    pub fn split_into_parts(&self) -> (&str, &str) {\n         let text = self.text();\n+        let mut float_text = self.text();\n+        let mut suffix = \"\";\n         let mut indices = text.char_indices();\n-        let (mut suffix_start, c) = indices.by_ref().find(|(_, c)| c.is_ascii_alphabetic())?;\n-        if c == 'e' || c == 'E' {\n-            suffix_start = indices.find(|(_, c)| c.is_ascii_alphabetic())?.0;\n+        if let Some((mut suffix_start, c)) = indices.by_ref().find(|(_, c)| c.is_ascii_alphabetic())\n+        {\n+            if c == 'e' || c == 'E' {\n+                if let Some(suffix_start_tuple) = indices.find(|(_, c)| c.is_ascii_alphabetic()) {\n+                    suffix_start = suffix_start_tuple.0;\n+\n+                    float_text = &text[..suffix_start];\n+                    suffix = &text[suffix_start..];\n+                }\n+            } else {\n+                float_text = &text[..suffix_start];\n+                suffix = &text[suffix_start..];\n+            }\n         }\n-        Some(&text[suffix_start..])\n+\n+        (float_text, suffix)\n+    }\n+\n+    pub fn suffix(&self) -> Option<&str> {\n+        let (_, suffix) = self.split_into_parts();\n+        if suffix.is_empty() {\n+            None\n+        } else {\n+            Some(suffix)\n+        }\n+    }\n+\n+    pub fn value(&self) -> Option<f64> {\n+        let (text, _) = self.split_into_parts();\n+        text.parse::<f64>().ok()\n     }\n }\n "}]}