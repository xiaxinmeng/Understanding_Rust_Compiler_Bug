{"sha": "37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YjVjY2EzZDU4NDEzZmFmZGY0MGFhMjMxYmNjNWFiYWJhYWEwZmU=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-02T11:42:31Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-09T10:45:32Z"}, "message": "Simplify into_key_slice_mut and document bits and bobs", "tree": {"sha": "4fe0670808208d4f466900c40e28365dba9826f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe0670808208d4f466900c40e28365dba9826f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "html_url": "https://github.com/rust-lang/rust/commit/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6468da160bd67a2ce0573427f09a98daff8c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6468da160bd67a2ce0573427f09a98daff8c07", "html_url": "https://github.com/rust-lang/rust/commit/ed6468da160bd67a2ce0573427f09a98daff8c07"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "03cb54ebce78292427ea0fca300198edc3412a62", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "patch": "@@ -397,6 +397,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     /// Borrows a view into the values stored in the node.\n     /// The caller must ensure that the node is not the shared root.\n+    /// This function is not public, so doesn't have to support shared roots like `keys` does.\n     fn vals(&self) -> &[V] {\n         self.reborrow().into_val_slice()\n     }\n@@ -514,6 +515,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     /// The caller must ensure that the node is not the shared root.\n+    /// This function is not public, so doesn't have to support shared roots like `keys` does.\n     fn keys_mut(&mut self) -> &mut [K] {\n         unsafe { self.reborrow_mut().into_key_slice_mut() }\n     }\n@@ -590,19 +592,13 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     fn into_key_slice_mut(mut self) -> &'a mut [K] {\n-        // Same as for `into_key_slice` above, we try to avoid a run-time check.\n-        if (mem::align_of::<NodeHeader<K, V, K>>() > mem::align_of::<NodeHeader<K, V>>()\n-            || mem::size_of::<NodeHeader<K, V, K>>() != mem::size_of::<NodeHeader<K, V>>())\n-            && self.is_shared_root()\n-        {\n-            &mut []\n-        } else {\n-            unsafe {\n-                slice::from_raw_parts_mut(\n-                    MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).keys),\n-                    self.len(),\n-                )\n-            }\n+        debug_assert!(!self.is_shared_root());\n+        // We cannot be the shared root, so `as_leaf_mut` is okay.\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).keys),\n+                self.len(),\n+            )\n         }\n     }\n "}, {"sha": "bdca4d186cfbdd40a6c647947e1dc045d89b705e", "filename": "src/liballoc/collections/btree/search.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "patch": "@@ -46,6 +46,11 @@ where\n     }\n }\n \n+/// Returns the index in the node at which the key (or an equivalent) exists\n+/// or could exist, and whether it exists in the node itself. If it doesn't\n+/// exist in the node itself, it may exist in the subtree with that index\n+/// (if the node has subtrees). If the key doesn't exist in node or subtree,\n+/// the returned index is the position or subtree to insert at.\n pub fn search_linear<BorrowType, K, V, Type, Q: ?Sized>(\n     node: &NodeRef<BorrowType, K, V, Type>,\n     key: &Q,\n@@ -54,6 +59,12 @@ where\n     Q: Ord,\n     K: Borrow<Q>,\n {\n+    // This function is defined over all borrow types (immutable, mutable, owned),\n+    // and may be called on the shared root in each case.\n+    // Crucially, we use `keys()` here, i.e., we work with immutable data.\n+    // We do not need to make `keys_mut()` public and require support for the shared root.\n+    // Using `keys()` is fine here even if BorrowType is mutable, as all we return\n+    // is an index -- not a reference.\n     for (i, k) in node.keys().iter().enumerate() {\n         match key.cmp(k.borrow()) {\n             Ordering::Greater => {}"}]}