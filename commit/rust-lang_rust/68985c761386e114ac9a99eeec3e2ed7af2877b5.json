{"sha": "68985c761386e114ac9a99eeec3e2ed7af2877b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTg1Yzc2MTM4NmUxMTRhYzlhOTllZWVjM2UyZWQ3YWYyODc3YjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T10:47:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T16:59:34Z"}, "message": "rustc_metadata: Move some structs from `cstore` to `decoder`\n\nThis allows to privatize their fields.", "tree": {"sha": "2f9518b2923971657970760de3859d643c520dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f9518b2923971657970760de3859d643c520dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68985c761386e114ac9a99eeec3e2ed7af2877b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68985c761386e114ac9a99eeec3e2ed7af2877b5", "html_url": "https://github.com/rust-lang/rust/commit/68985c761386e114ac9a99eeec3e2ed7af2877b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68985c761386e114ac9a99eeec3e2ed7af2877b5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6cef1e32b4f2fa44b7d8ebd7ddef0bdeaf51a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6cef1e32b4f2fa44b7d8ebd7ddef0bdeaf51a2", "html_url": "https://github.com/rust-lang/rust/commit/4b6cef1e32b4f2fa44b7d8ebd7ddef0bdeaf51a2"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "4d634661576eb3665ccdee44affb64af3e34afb1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=68985c761386e114ac9a99eeec3e2ed7af2877b5", "patch": "@@ -1,8 +1,8 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n-use crate::cstore::{self, CStore, MetadataBlob};\n+use crate::cstore::{self, CStore};\n use crate::locator::{self, CratePaths};\n-use crate::rmeta::{CrateRoot, CrateDep};\n+use crate::rmeta::{CrateRoot, CrateDep, MetadataBlob};\n use rustc_data_structures::sync::{Lock, Once, AtomicCell};\n \n use rustc::hir::def_id::CrateNum;"}, {"sha": "7d640422dfc3dcec6c7d66fd096e86e85f54bafe", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=68985c761386e114ac9a99eeec3e2ed7af2877b5", "patch": "@@ -1,21 +1,20 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use crate::rmeta;\n+use crate::rmeta::{CrateRoot, ImportedSourceFile, Lazy, MetadataBlob};\n use rustc::dep_graph::DepNodeIndex;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate};\n use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::sync::{Lrc, Lock, MetadataRef, Once, AtomicCell};\n+use rustc_data_structures::sync::{Lrc, Lock, Once, AtomicCell};\n use rustc_data_structures::svh::Svh;\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax_expand::base::SyntaxExtension;\n use syntax::expand::allocator::AllocatorKind;\n-use syntax_pos;\n use proc_macro::bridge::client::ProcMacro;\n \n pub use crate::rmeta::{provide, provide_extern};\n@@ -26,19 +25,6 @@ pub use crate::rmeta::{provide, provide_extern};\n // own crate numbers.\n crate type CrateNumMap = IndexVec<CrateNum, CrateNum>;\n \n-crate struct MetadataBlob(pub MetadataRef);\n-\n-/// Holds information about a syntax_pos::SourceFile imported from another crate.\n-/// See `imported_source_files()` for more information.\n-crate struct ImportedSourceFile {\n-    /// This SourceFile's byte-offset within the source_map of its original crate\n-    pub original_start_pos: syntax_pos::BytePos,\n-    /// The end of this SourceFile within the source_map of its original crate\n-    pub original_end_pos: syntax_pos::BytePos,\n-    /// The imported SourceFile's representation within the local source_map\n-    pub translated_source_file: Lrc<syntax_pos::SourceFile>,\n-}\n-\n crate struct CrateMetadata {\n     /// The primary crate data - binary metadata blob.\n     crate blob: MetadataBlob,\n@@ -50,7 +36,7 @@ crate struct CrateMetadata {\n     /// lifetime is only used behind `Lazy`, and therefore acts like an\n     /// universal (`for<'tcx>`), that is paired up with whichever `TyCtxt`\n     /// is being used to decode those values.\n-    crate root: rmeta::CrateRoot<'static>,\n+    crate root: CrateRoot<'static>,\n     /// For each definition in this crate, we encode a key. When the\n     /// crate is loaded, we read all the keys and put them in this\n     /// hashmap, which gives the reverse mapping. This allows us to\n@@ -60,7 +46,7 @@ crate struct CrateMetadata {\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n     /// so pre-decoding can probably be avoided.\n-    crate trait_impls: FxHashMap<(u32, DefIndex), rmeta::Lazy<[DefIndex]>>,\n+    crate trait_impls: FxHashMap<(u32, DefIndex), Lazy<[DefIndex]>>,\n     /// Proc macro descriptions for this crate, if it's a proc macro crate.\n     crate raw_proc_macros: Option<&'static [ProcMacro]>,\n     /// Source maps for code from the crate."}, {"sha": "bdb01bff3259db7450fad63110156114171f1915", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=68985c761386e114ac9a99eeec3e2ed7af2877b5", "patch": "@@ -212,9 +212,8 @@\n //! no means all of the necessary details. Take a look at the rest of\n //! metadata::locator or metadata::creader for all the juicy details!\n \n-use crate::cstore::MetadataBlob;\n use crate::creader::Library;\n-use crate::rmeta::{METADATA_HEADER, rustc_version};\n+use crate::rmeta::{METADATA_HEADER, rustc_version, MetadataBlob};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n@@ -907,7 +906,7 @@ fn get_metadata_section_imp(target: &Target,\n             rustc_erase_owner!(OwningRef::new(StableDerefMmap(mmap)).map_owner_box())\n         }\n     };\n-    let blob = MetadataBlob(raw_bytes);\n+    let blob = MetadataBlob::new(raw_bytes);\n     if blob.is_compatible() {\n         Ok(blob)\n     } else {"}, {"sha": "5ea23dc4b982152777c88fd23e92dd8a7e6a7a4d", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=68985c761386e114ac9a99eeec3e2ed7af2877b5", "patch": "@@ -1,6 +1,6 @@\n // Decoding metadata from a single crate's metadata\n \n-use crate::cstore::{self, CrateMetadata, MetadataBlob};\n+use crate::cstore::CrateMetadata;\n use crate::rmeta::*;\n use crate::rmeta::table::{FixedSizeEncoding, PerDefTable};\n \n@@ -44,6 +44,19 @@ pub use cstore_impl::{provide, provide_extern};\n \n mod cstore_impl;\n \n+crate struct MetadataBlob(MetadataRef);\n+\n+/// Holds information about a syntax_pos::SourceFile imported from another crate.\n+/// See `imported_source_files()` for more information.\n+crate struct ImportedSourceFile {\n+    /// This SourceFile's byte-offset within the source_map of its original crate\n+    original_start_pos: syntax_pos::BytePos,\n+    /// The end of this SourceFile within the source_map of its original crate\n+    original_end_pos: syntax_pos::BytePos,\n+    /// The imported SourceFile's representation within the local source_map\n+    translated_source_file: Lrc<syntax_pos::SourceFile>,\n+}\n+\n crate struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,\n     cdata: Option<&'a CrateMetadata>,\n@@ -393,7 +406,11 @@ for DecodeContext<'a, 'tcx> {\n \n implement_ty_decoder!( DecodeContext<'a, 'tcx> );\n \n-impl<'tcx> MetadataBlob {\n+impl MetadataBlob {\n+    crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {\n+        MetadataBlob(metadata_ref)\n+    }\n+\n     crate fn is_compatible(&self) -> bool {\n         self.raw_bytes().starts_with(METADATA_HEADER)\n     }\n@@ -1296,7 +1313,7 @@ impl<'a, 'tcx> CrateMetadata {\n     fn imported_source_files(\n         &'a self,\n         local_source_map: &source_map::SourceMap,\n-    ) -> &[cstore::ImportedSourceFile] {\n+    ) -> &[ImportedSourceFile] {\n         self.source_map_import_info.init_locking(|| {\n             let external_source_map = self.root.source_map.decode(self);\n \n@@ -1351,7 +1368,7 @@ impl<'a, 'tcx> CrateMetadata {\n                        local_version.name, start_pos, end_pos,\n                        local_version.start_pos, local_version.end_pos);\n \n-                cstore::ImportedSourceFile {\n+                ImportedSourceFile {\n                     original_start_pos: start_pos,\n                     original_end_pos: end_pos,\n                     translated_source_file: local_version,"}, {"sha": "c1dd8499219f8c650cba51b4771bf834edcfaa38", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68985c761386e114ac9a99eeec3e2ed7af2877b5/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=68985c761386e114ac9a99eeec3e2ed7af2877b5", "patch": "@@ -14,6 +14,7 @@ use rustc::ty::{self, Ty, ReprOptions};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::sync::MetadataRef;\n use rustc_serialize::Encodable;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n@@ -24,6 +25,7 @@ use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n \n pub use decoder::{provide, provide_extern};\n+crate use decoder::{ImportedSourceFile, MetadataBlob};\n \n mod decoder;\n mod encoder;"}]}