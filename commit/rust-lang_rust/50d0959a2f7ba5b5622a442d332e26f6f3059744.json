{"sha": "50d0959a2f7ba5b5622a442d332e26f6f3059744", "node_id": "C_kwDOAAsO6NoAKDUwZDA5NTlhMmY3YmE1YjU2MjJhNDQyZDMzMmUyNmY2ZjMwNTk3NDQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-10T10:29:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-14T19:52:42Z"}, "message": "Remove LocalKind::Var.", "tree": {"sha": "201791c92b9adaaa20e2456fa4111f9d777fd38e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/201791c92b9adaaa20e2456fa4111f9d777fd38e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d0959a2f7ba5b5622a442d332e26f6f3059744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d0959a2f7ba5b5622a442d332e26f6f3059744", "html_url": "https://github.com/rust-lang/rust/commit/50d0959a2f7ba5b5622a442d332e26f6f3059744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d0959a2f7ba5b5622a442d332e26f6f3059744/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d31386a52bc3944adbdf0e925f4764f8aa6b1875", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31386a52bc3944adbdf0e925f4764f8aa6b1875", "html_url": "https://github.com/rust-lang/rust/commit/d31386a52bc3944adbdf0e925f4764f8aa6b1875"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "7c88205da3b9a5ca40bb38d7cef3cd65922be174", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=50d0959a2f7ba5b5622a442d332e26f6f3059744", "patch": "@@ -1985,16 +1985,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let (place_desc, note) = if let Some(place_desc) = opt_place_desc {\n             let local_kind = if let Some(local) = borrow.borrowed_place.as_local() {\n                 match self.body.local_kind(local) {\n-                    LocalKind::ReturnPointer | LocalKind::Temp => {\n-                        bug!(\"temporary or return pointer with a name\")\n+                    LocalKind::Temp if self.body.local_decls[local].is_user_variable() => {\n+                        \"local variable \"\n                     }\n-                    LocalKind::Var => \"local variable \",\n                     LocalKind::Arg\n                         if !self.upvars.is_empty() && local == ty::CAPTURE_STRUCT_LOCAL =>\n                     {\n                         \"variable captured by `move` \"\n                     }\n                     LocalKind::Arg => \"function parameter \",\n+                    LocalKind::ReturnPointer | LocalKind::Temp => {\n+                        bug!(\"temporary or return pointer with a name\")\n+                    }\n                 }\n             } else {\n                 \"local data \"\n@@ -2008,16 +2010,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.prefixes(borrow.borrowed_place.as_ref(), PrefixSet::All).last().unwrap();\n             let local = root_place.local;\n             match self.body.local_kind(local) {\n-                LocalKind::ReturnPointer | LocalKind::Temp => {\n-                    (\"temporary value\".to_string(), \"temporary value created here\".to_string())\n-                }\n                 LocalKind::Arg => (\n                     \"function parameter\".to_string(),\n                     \"function parameter borrowed here\".to_string(),\n                 ),\n-                LocalKind::Var => {\n+                LocalKind::Temp if self.body.local_decls[local].is_user_variable() => {\n                     (\"local binding\".to_string(), \"local binding introduced here\".to_string())\n                 }\n+                LocalKind::ReturnPointer | LocalKind::Temp => {\n+                    (\"temporary value\".to_string(), \"temporary value created here\".to_string())\n+                }\n             }\n         };\n "}, {"sha": "53fef4d75bf67a4f2dc3dadd9813d220db1eb223", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=50d0959a2f7ba5b5622a442d332e26f6f3059744", "patch": "@@ -1681,7 +1681,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // - maybe we should make that a warning.\n                 return;\n             }\n-            LocalKind::Var | LocalKind::Temp => {}\n+            LocalKind::Temp => {}\n         }\n \n         // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls"}, {"sha": "c0f5b3725b36d355d854164931bb38b6de83b7cc", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=50d0959a2f7ba5b5622a442d332e26f6f3059744", "patch": "@@ -704,7 +704,7 @@ pub mod ty {\n \n         fn importance(&self) -> DiagnosticImportance {\n             match self.0 {\n-                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n                 mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n                     DiagnosticImportance::Primary\n                 }"}, {"sha": "648a86d32fcf33b7252d0408d05cd14b393ca359", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=50d0959a2f7ba5b5622a442d332e26f6f3059744", "patch": "@@ -106,8 +106,9 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n         // We're only interested in temporaries and the return place\n         match self.ccx.body.local_kind(index) {\n-            LocalKind::Temp | LocalKind::ReturnPointer => {}\n-            LocalKind::Arg | LocalKind::Var => return,\n+            LocalKind::Arg => return,\n+            LocalKind::Temp if self.ccx.body.local_decls[index].is_user_variable() => return,\n+            LocalKind::ReturnPointer | LocalKind::Temp => {}\n         }\n \n         // Ignore drops, if the temp gets promoted,"}, {"sha": "3ff88164c87e054b8d9a799eeb52a533e3127752", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=50d0959a2f7ba5b5622a442d332e26f6f3059744", "patch": "@@ -401,8 +401,6 @@ impl<'tcx> Body<'tcx> {\n             LocalKind::ReturnPointer\n         } else if index < self.arg_count + 1 {\n             LocalKind::Arg\n-        } else if self.local_decls[local].is_user_variable() {\n-            LocalKind::Var\n         } else {\n             LocalKind::Temp\n         }\n@@ -668,9 +666,7 @@ impl Atom for Local {\n /// Classifies locals into categories. See `Body::local_kind`.\n #[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable)]\n pub enum LocalKind {\n-    /// User-declared variable binding.\n-    Var,\n-    /// Compiler-introduced temporary.\n+    /// User-declared variable binding or compiler-introduced temporary.\n     Temp,\n     /// Function argument.\n     Arg,"}, {"sha": "35e7efed87a972ff91d7d45aa733fd22850c9978", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=50d0959a2f7ba5b5622a442d332e26f6f3059744", "patch": "@@ -788,7 +788,7 @@ impl<'tcx> Visitor<'tcx> for FindAssignments<'_, '_, 'tcx> {\n fn is_local_required(local: Local, body: &Body<'_>) -> bool {\n     match body.local_kind(local) {\n         LocalKind::Arg | LocalKind::ReturnPointer => true,\n-        LocalKind::Var | LocalKind::Temp => false,\n+        LocalKind::Temp => false,\n     }\n }\n "}, {"sha": "b6e73eaad5095904d143fdcb2f63e7d52a4ac3a3", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d0959a2f7ba5b5622a442d332e26f6f3059744/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=50d0959a2f7ba5b5622a442d332e26f6f3059744", "patch": "@@ -102,7 +102,7 @@ fn local_eligible_for_nrvo(body: &mut mir::Body<'_>) -> Option<Local> {\n             mir::LocalKind::Arg => return None,\n \n             mir::LocalKind::ReturnPointer => bug!(\"Return place was assigned to itself?\"),\n-            mir::LocalKind::Var | mir::LocalKind::Temp => {}\n+            mir::LocalKind::Temp => {}\n         }\n \n         // If multiple different locals are copied to the return place. We can't pick a"}]}