{"sha": "f71b3e2b46505fda8dea7187fa90b80472f7abfa", "node_id": "C_kwDOAAsO6NoAKGY3MWIzZTJiNDY1MDVmZGE4ZGVhNzE4N2ZhOTBiODA0NzJmN2FiZmE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T19:52:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T19:52:48Z"}, "message": "Rollup merge of #89532 - ecstatic-morse:maybe-live-locals-enum, r=oli-obk,tmiasko\n\nDocument behavior of  `MaybeLiveLocals` regarding enums and field-senstivity\n\nThis arose from a [discussion on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/MaybeLiveLocals.20and.20Discriminants) where a new contributor attempted to implement a dead-store elimination pass using this analysis. They ran into a nasty hack around `SetDiscriminant` the effect of which is to lets handle assignments of literals to enum-typed locals (e.g. `x = Some(4)`) correctly. This took me a while to figure out.\n\nDocument this oddity, so the next person will have an easier time, and add a test to enshrine the current behavior.\n\nr? ``@tmiasko``", "tree": {"sha": "fbf28a75f29d4f004795e4adf0a826fc81e01f30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf28a75f29d4f004795e4adf0a826fc81e01f30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71b3e2b46505fda8dea7187fa90b80472f7abfa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXK0RCRBK7hj4Ov3rIwAAV9QIAEG7IrwY/fJd5Maumy2DB9UV\nD0Z3wtsfUeRUVOUYgHnRg+12lBYUFKg+0pVBbuS0LIY0EjeWodCoZDCOFTPM+ZB4\neLhUd+v4OQKae4aB5ANDSyBH7bGhDfj/WAlEjzQ3I3euSQaI5vLLAGZXXKQ8HTVI\n9Vd4QRmxqk5SOhMf7yDvaNGfDpJAYQ5tCuoA54bq6jEc1WktmVlfSk35/0ORpRa7\nqv41Ewg5V4kqHHFnx4gf80hpz6Yr1NyKbMIMpnJt3iKzth4AfKlxtjYQFEZDUj8a\np6tRSJi3vYvyKqZ+hlodYjHgzySVYmuz7p2l+xp9LRS0TFJXExfiNO5rIiyKdcI=\n=4XHY\n-----END PGP SIGNATURE-----\n", "payload": "tree fbf28a75f29d4f004795e4adf0a826fc81e01f30\nparent 048b0fd98df7ed3351e4c133eda4f683cb872956\nparent 9f9f7f695a793c5ef27d219dbd00c66810f34e92\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633463568 -0700\ncommitter GitHub <noreply@github.com> 1633463568 -0700\n\nRollup merge of #89532 - ecstatic-morse:maybe-live-locals-enum, r=oli-obk,tmiasko\n\nDocument behavior of  `MaybeLiveLocals` regarding enums and field-senstivity\n\nThis arose from a [discussion on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/MaybeLiveLocals.20and.20Discriminants) where a new contributor attempted to implement a dead-store elimination pass using this analysis. They ran into a nasty hack around `SetDiscriminant` the effect of which is to lets handle assignments of literals to enum-typed locals (e.g. `x = Some(4)`) correctly. This took me a while to figure out.\n\nDocument this oddity, so the next person will have an easier time, and add a test to enshrine the current behavior.\n\nr? ``@tmiasko``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71b3e2b46505fda8dea7187fa90b80472f7abfa", "html_url": "https://github.com/rust-lang/rust/commit/f71b3e2b46505fda8dea7187fa90b80472f7abfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71b3e2b46505fda8dea7187fa90b80472f7abfa/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "048b0fd98df7ed3351e4c133eda4f683cb872956", "url": "https://api.github.com/repos/rust-lang/rust/commits/048b0fd98df7ed3351e4c133eda4f683cb872956", "html_url": "https://github.com/rust-lang/rust/commit/048b0fd98df7ed3351e4c133eda4f683cb872956"}, {"sha": "9f9f7f695a793c5ef27d219dbd00c66810f34e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9f7f695a793c5ef27d219dbd00c66810f34e92", "html_url": "https://github.com/rust-lang/rust/commit/9f9f7f695a793c5ef27d219dbd00c66810f34e92"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "3e2548845e20f693f9d4bd6031dcf2c68abdc570", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f71b3e2b46505fda8dea7187fa90b80472f7abfa/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71b3e2b46505fda8dea7187fa90b80472f7abfa/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=f71b3e2b46505fda8dea7187fa90b80472f7abfa", "patch": "@@ -11,6 +11,37 @@ use crate::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n /// exist. See [this `mir-dataflow` test][flow-test] for an example. You almost never want to use\n /// this analysis without also looking at the results of [`MaybeBorrowedLocals`].\n ///\n+/// ## Field-(in)sensitivity\n+///\n+/// As the name suggests, this analysis is field insensitive. If a projection of a variable `x` is\n+/// assigned to (e.g. `x.0 = 42`), it does not \"define\" `x` as far as liveness is concerned. In fact,\n+/// such an assignment is currently marked as a \"use\" of `x` in an attempt to be maximally\n+/// conservative.\n+///\n+/// ## Enums and `SetDiscriminant`\n+///\n+/// Assigning a literal value to an `enum` (e.g. `Option<i32>`), does not result in a simple\n+/// assignment of the form `_1 = /*...*/` in the MIR. For example, the following assignment to `x`:\n+///\n+/// ```\n+/// x = Some(4);\n+/// ```\n+///\n+/// compiles to this MIR\n+///\n+/// ```\n+/// ((_1 as Some).0: i32) = const 4_i32;\n+/// discriminant(_1) = 1;\n+/// ```\n+///\n+/// However, `MaybeLiveLocals` **does** mark `x` (`_1`) as \"killed\" after a statement like this.\n+/// That's because it treats the `SetDiscriminant` operation as a definition of `x`, even though\n+/// the writes that actually initialized the locals happened earlier.\n+///\n+/// This makes `MaybeLiveLocals` unsuitable for certain classes of optimization normally associated\n+/// with a live variables analysis, notably dead-store elimination. It's a dirty hack, but it works\n+/// okay for the generator state transform (currently the main consumuer of this analysis).\n+///\n /// [`MaybeBorrowedLocals`]: super::MaybeBorrowedLocals\n /// [flow-test]: https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src/test/ui/mir-dataflow/liveness-ptr.rs\n /// [liveness]: https://en.wikipedia.org/wiki/Live_variable_analysis"}, {"sha": "5eb04ae8c8d37a1315c3caf0946bef0a7185866a", "filename": "src/test/ui/mir-dataflow/liveness-enum.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f71b3e2b46505fda8dea7187fa90b80472f7abfa/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71b3e2b46505fda8dea7187fa90b80472f7abfa/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-enum.rs?ref=f71b3e2b46505fda8dea7187fa90b80472f7abfa", "patch": "@@ -0,0 +1,22 @@\n+#![feature(core_intrinsics, rustc_attrs)]\n+\n+use std::intrinsics::rustc_peek;\n+\n+#[rustc_mir(rustc_peek_liveness, stop_after_dataflow)]\n+fn foo() -> Option<i32> {\n+    let mut x = None;\n+\n+    // `x` is live here since it is used in the next statement...\n+    rustc_peek(x);\n+\n+    dbg!(x);\n+\n+    // But not here, since it is overwritten below\n+    rustc_peek(x); //~ ERROR rustc_peek: bit not set\n+\n+    x = Some(4);\n+\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "483944d731aed0bd9aa4ed7d65c84d2f7976424a", "filename": "src/test/ui/mir-dataflow/liveness-enum.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f71b3e2b46505fda8dea7187fa90b80472f7abfa/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f71b3e2b46505fda8dea7187fa90b80472f7abfa/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-enum.stderr?ref=f71b3e2b46505fda8dea7187fa90b80472f7abfa", "patch": "@@ -0,0 +1,10 @@\n+error: rustc_peek: bit not set\n+  --> $DIR/liveness-enum.rs:15:5\n+   |\n+LL |     rustc_peek(x);\n+   |     ^^^^^^^^^^^^^\n+\n+error: stop_after_dataflow ended compilation\n+\n+error: aborting due to 2 previous errors\n+"}]}