{"sha": "f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ODE4NzlkMmFlODJhNmY2ZWJlMzMyMDJkNGExY2ZhOGFlY2U1ZWQ=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-12T16:37:57Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-14T11:57:46Z"}, "message": "Fix a couple UI test failures", "tree": {"sha": "28a50850022d7ee3b6f4fb443ce03fe7293bdf0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a50850022d7ee3b6f4fb443ce03fe7293bdf0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed", "html_url": "https://github.com/rust-lang/rust/commit/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed/comments", "author": null, "committer": null, "parents": [{"sha": "8612838dd04ae9343088955136626b1c1b579999", "url": "https://api.github.com/repos/rust-lang/rust/commits/8612838dd04ae9343088955136626b1c1b579999", "html_url": "https://github.com/rust-lang/rust/commit/8612838dd04ae9343088955136626b1c1b579999"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "5147318d4a63d4e63716b326eb1d0c96229e8221", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed", "patch": "@@ -187,23 +187,24 @@ impl EmitterWriter {\n \n         if let Some(ref cm) = self.cm {\n             for span_label in msp.span_labels() {\n-                let lo = cm.lookup_char_pos(span_label.span.lo);\n-                let hi = cm.lookup_char_pos(span_label.span.hi);\n+                let mut lo = cm.lookup_char_pos(span_label.span.lo);\n+                let mut hi = cm.lookup_char_pos(span_label.span.hi);\n+                let mut is_minimized = false;\n \n                 // If the span is multi-line, simplify down to the span of one character\n-                let (start_col, mut end_col, is_minimized) = if lo.line != hi.line {\n-                    (lo.col, CharPos(lo.col.0 + 1), true)\n-                } else {\n-                    (lo.col, hi.col, false)\n-                };\n+                if lo.line != hi.line {\n+                    hi.line = lo.line;\n+                    hi.col = CharPos(lo.col.0 + 1);\n+                    is_minimized = true;\n+                }\n \n                 // Watch out for \"empty spans\". If we get a span like 6..6, we\n                 // want to just display a `^` at 6, so convert that to\n                 // 6..7. This is degenerate input, but it's best to degrade\n                 // gracefully -- and the parser likes to supply a span like\n                 // that for EOF, in particular.\n-                if start_col == end_col {\n-                    end_col.0 += 1;\n+                if lo.col == hi.col {\n+                    hi.col = CharPos(lo.col.0 + 1);\n                 }\n \n                 add_annotation_to_file(&mut output,\n@@ -530,7 +531,7 @@ impl EmitterWriter {\n                 buffer.prepend(buffer_msg_line_offset, \"--> \", Style::LineNumber);\n                 let loc = primary_lo.clone();\n                 buffer.append(buffer_msg_line_offset,\n-                                &format!(\"{}:{}:{}\", loc.file.name, loc.line, loc.col.0),\n+                                &format!(\"{}:{}:{}\", loc.file.name, loc.line, loc.col.0 + 1),\n                                 Style::LineAndColumn);\n                 for i in 0..max_line_num_len {\n                     buffer.prepend(buffer_msg_line_offset, \" \", Style::NoStyle);\n@@ -593,6 +594,10 @@ impl EmitterWriter {\n             }\n         }\n \n+        if let Some(ref primary_span) = msp.primary_span().as_ref() {\n+            self.render_macro_backtrace_old_school(primary_span, &mut buffer)?;\n+        }\n+\n         // final step: take our styled buffer, render it, then output it\n         emit_to_destination(&buffer.render(), level, &mut self.dst);\n \n@@ -1180,7 +1185,7 @@ impl EmitterWriter {\n                 }\n                 let snippet = cm.span_to_string(trace.call_site);\n                 buffer.append(line_offset, &format!(\"{} \", snippet), Style::NoStyle);\n-                buffer.append(line_offset, \"Note\", Style::Level(Level::Note));\n+                buffer.append(line_offset, \"note\", Style::Level(Level::Note));\n                 buffer.append(line_offset, \": \", Style::NoStyle);\n                 buffer.append(line_offset, &diag_string, Style::OldSchoolNoteText);\n             }"}, {"sha": "63f2ab4d7c6bf2db1c359587945a0de724c7db9f", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed", "patch": "@@ -1,15 +1,16 @@\n-error: mismatched types [--explain E0308]\n+error[E0308]: mismatched types\n   --> $DIR/issue-26480.rs:27:19\n-   |>\n-27 |>                   $arr.len() * size_of($arr[0]));\n-   |>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n-$DIR/issue-26480.rs:38:5: 38:19: note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n+   | \n+27 |                   $arr.len() * size_of($arr[0]));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n+$DIR/issue-26480.rs:38:5: 38:19 note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n \n error: non-scalar cast: `_` as `()`\n   --> $DIR/issue-26480.rs:33:19\n-   |>\n-33 |>     ($x:expr) => ($x as ())\n-   |>                   ^^^^^^^^\n-$DIR/issue-26480.rs:39:5: 39:14: note: in this expansion of cast! (defined in $DIR/issue-26480.rs)\n+   | \n+33 |     ($x:expr) => ($x as ())\n+   |                   ^^^^^^^^\n+$DIR/issue-26480.rs:39:5: 39:14 note: in this expansion of cast! (defined in $DIR/issue-26480.rs)\n \n error: aborting due to 2 previous errors\n+"}, {"sha": "ae1d417eca9ee938d3951a9b28e6f4a427979c65", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=f481879d2ae82a6f6ebe33202d4a1cfa8aece5ed", "patch": "@@ -1,9 +1,11 @@\n-error: mismatched types [--explain E0308]\n+error[E0308]: mismatched types\n   --> $DIR/main.rs:14:18\n-   |>\n-14 |>     let x: u32 = (\n-   |>                  ^ expected u32, found ()\n-note: expected type `u32`\n-note:    found type `()`\n+   | \n+14 |     let x: u32 = (\n+   |                  ^ expected u32, found ()\n+   | \n+   = note: expected type `u32`\n+   = note:    found type `()`\n \n error: aborting due to previous error\n+"}]}