{"sha": "607375dc206259955a386c48d88c45529c316145", "node_id": "C_kwDOAAsO6NoAKDYwNzM3NWRjMjA2MjU5OTU1YTM4NmM0OGQ4OGM0NTUyOWMzMTYxNDU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-25T17:06:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-25T17:06:06Z"}, "message": "Load proc-macros asynchronously", "tree": {"sha": "13551372dc9019aef25997b0a61808a37bc76516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13551372dc9019aef25997b0a61808a37bc76516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607375dc206259955a386c48d88c45529c316145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607375dc206259955a386c48d88c45529c316145", "html_url": "https://github.com/rust-lang/rust/commit/607375dc206259955a386c48d88c45529c316145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607375dc206259955a386c48d88c45529c316145/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9fb2ffe4572471588b6bd602521a1421baf4dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9fb2ffe4572471588b6bd602521a1421baf4dc3", "html_url": "https://github.com/rust-lang/rust/commit/e9fb2ffe4572471588b6bd602521a1421baf4dc3"}], "stats": {"total": 242, "additions": 154, "deletions": 88}, "files": [{"sha": "9580b76faa2214d51b761fba8fb086105197129a", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -6,15 +6,16 @@\n //! actual IO. See `vfs` and `project_model` in the `rust-analyzer` crate for how\n //! actual IO is done and lowered to input.\n \n-use std::{fmt, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n+use std::{fmt, mem, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n use stdx::hash::{NoHashHashMap, NoHashHashSet};\n use syntax::SmolStr;\n use tt::token_id::Subtree;\n-use vfs::{file_set::FileSet, AnchoredPath, FileId, VfsPath};\n+use vfs::{file_set::FileSet, AbsPathBuf, AnchoredPath, FileId, VfsPath};\n \n+pub type ProcMacroPaths = FxHashMap<CrateId, Result<(Option<String>, AbsPathBuf), String>>;\n pub type ProcMacros = FxHashMap<CrateId, ProcMacroLoadResult>;\n \n /// Files are grouped into source roots. A source root is a directory on the\n@@ -455,16 +456,11 @@ impl CrateGraph {\n     }\n \n     /// Extends this crate graph by adding a complete disjoint second crate\n-    /// graph.\n+    /// graph and adjust the ids in the [`ProcMacroPaths`] accordingly.\n     ///\n     /// The ids of the crates in the `other` graph are shifted by the return\n     /// amount.\n-    pub fn extend(\n-        &mut self,\n-        other: CrateGraph,\n-        proc_macros: &mut ProcMacros,\n-        other_proc_macros: ProcMacros,\n-    ) -> u32 {\n+    pub fn extend(&mut self, other: CrateGraph, proc_macros: &mut ProcMacroPaths) -> u32 {\n         let start = self.arena.len() as u32;\n         self.arena.extend(other.arena.into_iter().map(|(id, mut data)| {\n             let new_id = id.shift(start);\n@@ -473,8 +469,11 @@ impl CrateGraph {\n             }\n             (new_id, data)\n         }));\n-        proc_macros\n-            .extend(other_proc_macros.into_iter().map(|(id, macros)| (id.shift(start), macros)));\n+\n+        *proc_macros = mem::take(proc_macros)\n+            .into_iter()\n+            .map(|(id, macros)| (id.shift(start), macros))\n+            .collect();\n         start\n     }\n "}, {"sha": "f6975f2fbd75a47ee09d4f1a1a05061e3bcaff15", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -16,8 +16,8 @@ pub use crate::{\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n         Edition, Env, LangCrateOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n-        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, ProcMacros, SourceRoot, SourceRootId,\n-        TargetLayoutLoadResult,\n+        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, ProcMacroPaths, ProcMacros, SourceRoot,\n+        SourceRootId, TargetLayoutLoadResult,\n     },\n };\n pub use salsa::{self, Cancelled};"}, {"sha": "26c4c89f7646ca3e6132cb800bef1e3298133946", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -3,7 +3,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use base_db::{CrateGraph, FileId, ProcMacros};\n+use base_db::{CrateGraph, FileId, ProcMacroPaths};\n use cfg::{CfgAtom, CfgDiff};\n use expect_test::{expect, Expect};\n use paths::{AbsPath, AbsPathBuf};\n@@ -14,11 +14,14 @@ use crate::{\n     WorkspaceBuildScripts,\n };\n \n-fn load_cargo(file: &str) -> (CrateGraph, ProcMacros) {\n+fn load_cargo(file: &str) -> (CrateGraph, ProcMacroPaths) {\n     load_cargo_with_overrides(file, CfgOverrides::default())\n }\n \n-fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> (CrateGraph, ProcMacros) {\n+fn load_cargo_with_overrides(\n+    file: &str,\n+    cfg_overrides: CfgOverrides,\n+) -> (CrateGraph, ProcMacroPaths) {\n     let meta = get_test_json_file(file);\n     let cargo_workspace = CargoWorkspace::new(meta);\n     let project_workspace = ProjectWorkspace::Cargo {\n@@ -34,7 +37,7 @@ fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> (CrateG\n     to_crate_graph(project_workspace)\n }\n \n-fn load_rust_project(file: &str) -> (CrateGraph, ProcMacros) {\n+fn load_rust_project(file: &str) -> (CrateGraph, ProcMacroPaths) {\n     let data = get_test_json_file(file);\n     let project = rooted_project_json(data);\n     let sysroot = Ok(get_fake_sysroot());\n@@ -92,9 +95,8 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n     ProjectJson::new(base, data)\n }\n \n-fn to_crate_graph(project_workspace: ProjectWorkspace) -> (CrateGraph, ProcMacros) {\n+fn to_crate_graph(project_workspace: ProjectWorkspace) -> (CrateGraph, ProcMacroPaths) {\n     project_workspace.to_crate_graph(\n-        &mut |_, _| Ok(Vec::new()),\n         &mut {\n             let mut counter = 0;\n             move |_path| {"}, {"sha": "1fd7c681938e6aca8dd5d33434a13214513ca1fd", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n use anyhow::{bail, format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n-    FileId, LangCrateOrigin, ProcMacroLoadResult, ProcMacros, TargetLayoutLoadResult,\n+    FileId, LangCrateOrigin, ProcMacroPaths, TargetLayoutLoadResult,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -576,16 +576,14 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n         extra_env: &FxHashMap<String, String>,\n-    ) -> (CrateGraph, ProcMacros) {\n+    ) -> (CrateGraph, ProcMacroPaths) {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n \n         let (mut crate_graph, proc_macros) = match self {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => project_json_to_crate_graph(\n                 rustc_cfg.clone(),\n-                load_proc_macro,\n                 load,\n                 project,\n                 sysroot.as_ref().ok(),\n@@ -602,7 +600,6 @@ impl ProjectWorkspace {\n                 toolchain: _,\n                 target_layout,\n             } => cargo_to_crate_graph(\n-                load_proc_macro,\n                 load,\n                 rustc.as_ref().ok(),\n                 cargo,\n@@ -679,15 +676,14 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: Option<&Sysroot>,\n     extra_env: &FxHashMap<String, String>,\n     target_layout: TargetLayoutLoadResult,\n-) -> (CrateGraph, ProcMacros) {\n+) -> (CrateGraph, ProcMacroPaths) {\n     let mut crate_graph = CrateGraph::default();\n-    let mut proc_macros = FxHashMap::<_, _>::default();\n+    let mut proc_macros = FxHashMap::default();\n     let sysroot_deps = sysroot.as_ref().map(|sysroot| {\n         sysroot_to_crate_graph(\n             &mut crate_graph,\n@@ -708,16 +704,15 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            if let Some(it) = krate.proc_macro_dylib_path.clone() {\n+            if let Some(path) = krate.proc_macro_dylib_path.clone() {\n                 proc_macros.insert(\n                     crate_id,\n-                    load_proc_macro(\n-                        krate.display_name.as_ref().map(|it| it.canonical_name()).unwrap_or(\"\"),\n-                        &it,\n-                    ),\n+                    Ok((\n+                        krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n+                        path,\n+                    )),\n                 );\n             }\n-\n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => cfg_cache\n                     .entry(target)\n@@ -782,7 +777,6 @@ fn project_json_to_crate_graph(\n }\n \n fn cargo_to_crate_graph(\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     rustc: Option<&(CargoWorkspace, WorkspaceBuildScripts)>,\n     cargo: &CargoWorkspace,\n@@ -791,7 +785,7 @@ fn cargo_to_crate_graph(\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n     target_layout: TargetLayoutLoadResult,\n-) -> (CrateGraph, ProcMacros) {\n+) -> (CrateGraph, ProcMacroPaths) {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n     let mut proc_macros = FxHashMap::default();\n@@ -862,7 +856,6 @@ fn cargo_to_crate_graph(\n                     &cargo[pkg],\n                     build_scripts.get_output(pkg),\n                     cfg_options.clone(),\n-                    &mut |path| load_proc_macro(&cargo[tgt].name, path),\n                     file_id,\n                     &cargo[tgt].name,\n                     cargo[tgt].is_proc_macro,\n@@ -938,7 +931,6 @@ fn cargo_to_crate_graph(\n                 &mut proc_macros,\n                 &mut pkg_to_lib_crate,\n                 load,\n-                load_proc_macro,\n                 rustc_workspace,\n                 cargo,\n                 &public_deps,\n@@ -966,7 +958,7 @@ fn detached_files_to_crate_graph(\n     detached_files: &[AbsPathBuf],\n     sysroot: Option<&Sysroot>,\n     target_layout: TargetLayoutLoadResult,\n-) -> (CrateGraph, ProcMacros) {\n+) -> (CrateGraph, ProcMacroPaths) {\n     let _p = profile::span(\"detached_files_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n     let (public_deps, _libproc_macro) = match sysroot {\n@@ -1018,10 +1010,9 @@ fn detached_files_to_crate_graph(\n \n fn handle_rustc_crates(\n     crate_graph: &mut CrateGraph,\n-    proc_macros: &mut ProcMacros,\n+    proc_macros: &mut ProcMacroPaths,\n     pkg_to_lib_crate: &mut FxHashMap<Package, CrateId>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     rustc_workspace: &CargoWorkspace,\n     cargo: &CargoWorkspace,\n     public_deps: &SysrootPublicDeps,\n@@ -1084,7 +1075,6 @@ fn handle_rustc_crates(\n                         &rustc_workspace[pkg],\n                         build_scripts.get_output(pkg),\n                         cfg_options.clone(),\n-                        &mut |path| load_proc_macro(&rustc_workspace[tgt].name, path),\n                         file_id,\n                         &rustc_workspace[tgt].name,\n                         rustc_workspace[tgt].is_proc_macro,\n@@ -1146,11 +1136,10 @@ fn handle_rustc_crates(\n \n fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n-    proc_macros: &mut ProcMacros,\n+    proc_macros: &mut ProcMacroPaths,\n     pkg: &PackageData,\n     build_data: Option<&BuildScriptOutput>,\n     cfg_options: CfgOptions,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> ProcMacroLoadResult,\n     file_id: FileId,\n     cargo_name: &str,\n     is_proc_macro: bool,\n@@ -1197,11 +1186,11 @@ fn add_target_crate_root(\n         target_layout,\n     );\n     let proc_macro = match build_data.as_ref().map(|it| &it.proc_macro_dylib_path) {\n-        Some(it) => it.as_deref().map(load_proc_macro),\n+        Some(it) => it.clone().map(Ok),\n         None => Some(Err(\"crate has not (yet) been built\".into())),\n     };\n     if let Some(proc_macro) = proc_macro {\n-        proc_macros.insert(crate_id, proc_macro);\n+        proc_macros.insert(crate_id, proc_macro.map(|path| (Some(cargo_name.to_owned()), path)));\n     }\n \n     crate_id"}, {"sha": "f5bc3c12c1491c10547ceb43b62fd255ec7e3113", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -69,7 +69,7 @@ pub fn load_workspace(\n         Box::new(loader)\n     };\n \n-    let proc_macro_client = match &load_config.with_proc_macro_server {\n+    let proc_macro_server = match &load_config.with_proc_macro_server {\n         ProcMacroServerChoice::Sysroot => ws\n             .find_sysroot_proc_macro_srv()\n             .ok_or_else(|| \"failed to find sysroot proc-macro server\".to_owned())\n@@ -83,9 +83,6 @@ pub fn load_workspace(\n     };\n \n     let (crate_graph, proc_macros) = ws.to_crate_graph(\n-        &mut |_, path: &AbsPath| {\n-            load_proc_macro(proc_macro_client.as_ref().map_err(|e| &**e), path, &[])\n-        },\n         &mut |path: &AbsPath| {\n             let contents = loader.load_sync(path);\n             let path = vfs::VfsPath::from(path.to_path_buf());\n@@ -94,6 +91,21 @@ pub fn load_workspace(\n         },\n         extra_env,\n     );\n+    let proc_macros = {\n+        let proc_macro_server = match &proc_macro_server {\n+            Ok(it) => Ok(it),\n+            Err(e) => Err(e.as_str()),\n+        };\n+        proc_macros\n+            .into_iter()\n+            .map(|(crate_id, path)| {\n+                (\n+                    crate_id,\n+                    path.and_then(|(_, path)| load_proc_macro(proc_macro_server, &path, &[])),\n+                )\n+            })\n+            .collect()\n+    };\n \n     let project_folders = ProjectFolders::new(&[ws], &[]);\n     loader.set_config(vfs::loader::Config {\n@@ -114,7 +126,7 @@ pub fn load_workspace(\n     if load_config.prefill_caches {\n         host.analysis().parallel_prime_caches(1, |_| {})?;\n     }\n-    Ok((host, vfs, proc_macro_client.ok()))\n+    Ok((host, vfs, proc_macro_server.ok()))\n }\n \n fn load_crate_graph("}, {"sha": "d02714ad1ead093beb6f343d5be09cbcc29e0608", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -59,10 +59,11 @@ pub(crate) struct GlobalState {\n     pub(crate) mem_docs: MemDocs,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     pub(crate) shutdown_requested: bool,\n-    pub(crate) proc_macro_changed: bool,\n     pub(crate) last_reported_status: Option<lsp_ext::ServerStatusParams>,\n     pub(crate) source_root_config: SourceRootConfig,\n-    pub(crate) proc_macro_clients: Vec<Result<ProcMacroServer, String>>,\n+\n+    pub(crate) proc_macro_changed: bool,\n+    pub(crate) proc_macro_clients: Arc<[Result<ProcMacroServer, String>]>,\n \n     pub(crate) flycheck: Arc<[FlycheckHandle]>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n@@ -151,10 +152,11 @@ impl GlobalState {\n             mem_docs: MemDocs::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n             shutdown_requested: false,\n-            proc_macro_changed: false,\n             last_reported_status: None,\n             source_root_config: SourceRootConfig::default(),\n-            proc_macro_clients: vec![],\n+\n+            proc_macro_changed: false,\n+            proc_macro_clients: Arc::new([]),\n \n             flycheck: Arc::new([]),\n             flycheck_sender,"}, {"sha": "8866515bb94dd375c8459ad8adb28944e86f3f34", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -5,6 +5,7 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n+    sync::Arc,\n };\n \n use anyhow::Context;\n@@ -44,7 +45,7 @@ use crate::{\n };\n \n pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n-    state.proc_macro_clients.clear();\n+    state.proc_macro_clients = Arc::new([]);\n     state.proc_macro_changed = false;\n \n     state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n@@ -53,7 +54,7 @@ pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<\n }\n \n pub(crate) fn handle_proc_macros_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n-    state.proc_macro_clients.clear();\n+    state.proc_macro_clients = Arc::new([]);\n     state.proc_macro_changed = false;\n \n     state.fetch_build_data_queue.request_op(\"reload proc macros request\".to_string());"}, {"sha": "8db526e0b76dfe005e4cac0e51f194baa0fe855e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     handlers, lsp_ext,\n     lsp_utils::{apply_document_changes, notification_is, Progress},\n     mem_docs::DocumentData,\n-    reload::{self, BuildDataProgress, ProjectWorkspaceProgress},\n+    reload::{self, BuildDataProgress, ProcMacroProgress, ProjectWorkspaceProgress},\n     Result,\n };\n \n@@ -68,6 +68,7 @@ pub(crate) enum Task {\n     PrimeCaches(PrimeCachesProgress),\n     FetchWorkspace(ProjectWorkspaceProgress),\n     FetchBuildData(BuildDataProgress),\n+    LoadProcMacros(ProcMacroProgress),\n }\n \n #[derive(Debug)]\n@@ -487,6 +488,21 @@ impl GlobalState {\n                     }\n                 };\n \n+                if let Some(state) = state {\n+                    self.report_progress(\"Building\", state, msg, None, None);\n+                }\n+            }\n+            Task::LoadProcMacros(progress) => {\n+                let (state, msg) = match progress {\n+                    ProcMacroProgress::Begin => (Some(Progress::Begin), None),\n+                    ProcMacroProgress::Report(msg) => (Some(Progress::Report), Some(msg)),\n+                    ProcMacroProgress::End(proc_macro_load_result) => {\n+                        self.set_proc_macros(proc_macro_load_result);\n+\n+                        (Some(Progress::End), None)\n+                    }\n+                };\n+\n                 if let Some(state) = state {\n                     self.report_progress(\"Loading\", state, msg, None, None);\n                 }"}, {"sha": "f8f2cb093220d9328c2b533bc8cb7fe8473b4570", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 75, "deletions": 30, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -12,15 +12,15 @@\n //! correct. Instead, we try to provide a best-effort service. Even if the\n //! project is currently loading and we don't have a full project model, we\n //! still want to respond to various  requests.\n-use std::{collections::hash_map::Entry, mem, sync::Arc};\n+use std::{collections::hash_map::Entry, iter, mem, sync::Arc};\n \n use flycheck::{FlycheckConfig, FlycheckHandle};\n use hir::db::DefDatabase;\n use ide::Change;\n use ide_db::{\n     base_db::{\n         CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroKind,\n-        ProcMacroLoadResult, ProcMacros, SourceRoot, VfsPath,\n+        ProcMacroLoadResult, ProcMacroPaths, ProcMacros, SourceRoot, VfsPath,\n     },\n     FxHashMap,\n };\n@@ -54,6 +54,13 @@ pub(crate) enum BuildDataProgress {\n     End((Arc<Vec<ProjectWorkspace>>, Vec<anyhow::Result<WorkspaceBuildScripts>>)),\n }\n \n+#[derive(Debug)]\n+pub(crate) enum ProcMacroProgress {\n+    Begin,\n+    Report(String),\n+    End(ProcMacros),\n+}\n+\n impl GlobalState {\n     pub(crate) fn is_quiescent(&self) -> bool {\n         !(self.last_reported_status.is_none()\n@@ -216,6 +223,59 @@ impl GlobalState {\n         });\n     }\n \n+    pub(crate) fn load_proc_macros(&mut self, paths: Vec<ProcMacroPaths>) {\n+        tracing::info!(\"will load proc macros\");\n+        let dummy_replacements = self.config.dummy_replacements().clone();\n+        let proc_macro_clients = self.proc_macro_clients.clone();\n+\n+        self.task_pool.handle.spawn_with_sender(move |sender| {\n+            sender.send(Task::LoadProcMacros(ProcMacroProgress::Begin)).unwrap();\n+\n+            let dummy_replacements = &dummy_replacements;\n+            let progress = {\n+                let sender = sender.clone();\n+                &move |msg| {\n+                    sender.send(Task::LoadProcMacros(ProcMacroProgress::Report(msg))).unwrap()\n+                }\n+            };\n+\n+            let mut res = FxHashMap::default();\n+            for (client, paths) in proc_macro_clients\n+                .iter()\n+                .map(|res| res.as_ref().map_err(|e| &**e))\n+                .chain(iter::repeat_with(|| Err(\"Proc macros are disabled\")))\n+                .zip(paths)\n+            {\n+                res.extend(paths.into_iter().map(move |(crate_id, res)| {\n+                    (\n+                        crate_id,\n+                        res.and_then(|(crate_name, path)| {\n+                            progress(path.display().to_string());\n+                            load_proc_macro(\n+                                client,\n+                                &path,\n+                                crate_name\n+                                    .as_deref()\n+                                    .and_then(|crate_name| {\n+                                        dummy_replacements.get(crate_name).map(|v| &**v)\n+                                    })\n+                                    .unwrap_or_default(),\n+                            )\n+                        }),\n+                    )\n+                }));\n+            }\n+\n+            sender.send(Task::LoadProcMacros(ProcMacroProgress::End(res))).unwrap();\n+        });\n+    }\n+\n+    pub(crate) fn set_proc_macros(&mut self, proc_macros: ProcMacros) {\n+        let mut change = Change::new();\n+        change.set_proc_macros(proc_macros);\n+        self.analysis_host.apply_change(change);\n+    }\n+\n     pub(crate) fn switch_workspaces(&mut self, cause: Cause) {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         tracing::info!(%cause, \"will switch workspaces\");\n@@ -303,8 +363,6 @@ impl GlobalState {\n             );\n         }\n \n-        let mut change = Change::new();\n-\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n@@ -353,11 +411,10 @@ impl GlobalState {\n             watch,\n             version: self.vfs_config_version,\n         });\n+        self.source_root_config = project_folders.source_root_config;\n \n         // Create crate graph from all the workspaces\n-        let (crate_graph, proc_macros) = {\n-            let dummy_replacements = self.config.dummy_replacements();\n-\n+        let (crate_graph, proc_macro_paths) = {\n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n             let mem_docs = &self.mem_docs;\n@@ -376,34 +433,22 @@ impl GlobalState {\n             };\n \n             let mut crate_graph = CrateGraph::default();\n-            let mut proc_macros = ProcMacros::default();\n-            for (idx, ws) in self.workspaces.iter().enumerate() {\n-                let proc_macro_client = match self.proc_macro_clients.get(idx) {\n-                    Some(res) => res.as_ref().map_err(|e| &**e),\n-                    None => Err(\"Proc macros are disabled\"),\n-                };\n-                let mut load_proc_macro = move |crate_name: &str, path: &AbsPath| {\n-                    load_proc_macro(\n-                        proc_macro_client,\n-                        path,\n-                        dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n-                    )\n-                };\n-                let (other, other_proc_macros) = ws.to_crate_graph(\n-                    &mut load_proc_macro,\n-                    &mut load,\n-                    &self.config.cargo().extra_env,\n-                );\n-                crate_graph.extend(other, &mut proc_macros, other_proc_macros);\n+            let mut proc_macros = Vec::default();\n+            for ws in &**self.workspaces {\n+                let (other, mut crate_proc_macros) =\n+                    ws.to_crate_graph(&mut load, &self.config.cargo().extra_env);\n+                crate_graph.extend(other, &mut crate_proc_macros);\n+                proc_macros.push(crate_proc_macros);\n             }\n             (crate_graph, proc_macros)\n         };\n+        let mut change = Change::new();\n         change.set_crate_graph(crate_graph);\n-        change.set_proc_macros(proc_macros);\n-\n-        self.source_root_config = project_folders.source_root_config;\n-\n         self.analysis_host.apply_change(change);\n+\n+        if same_workspaces {\n+            self.load_proc_macros(proc_macro_paths);\n+        }\n         self.process_changes();\n         self.reload_flycheck();\n         tracing::info!(\"did switch workspaces\");"}, {"sha": "11eda94f5bb644707dc8ef96d6a9e1a17379345d", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607375dc206259955a386c48d88c45529c316145/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/607375dc206259955a386c48d88c45529c316145/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=607375dc206259955a386c48d88c45529c316145", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 37f31ae648632897\n+lsp_ext.rs hash: 92fe1037312754df\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}]}