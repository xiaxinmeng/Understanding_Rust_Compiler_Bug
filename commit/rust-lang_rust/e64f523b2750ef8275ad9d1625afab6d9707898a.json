{"sha": "e64f523b2750ef8275ad9d1625afab6d9707898a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NGY1MjNiMjc1MGVmODI3NWFkOWQxNjI1YWZhYjZkOTcwNzg5OGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-20T14:51:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-20T14:51:36Z"}, "message": "Evaluate all mir.required_consts and report any errors\n\nFixes #981", "tree": {"sha": "85657f7b6c4cd02f99ce9af48046ecc94148726b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85657f7b6c4cd02f99ce9af48046ecc94148726b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e64f523b2750ef8275ad9d1625afab6d9707898a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e64f523b2750ef8275ad9d1625afab6d9707898a", "html_url": "https://github.com/rust-lang/rust/commit/e64f523b2750ef8275ad9d1625afab6d9707898a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e64f523b2750ef8275ad9d1625afab6d9707898a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80d6423e68673ed3528aa5a2042a560381a2d3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80d6423e68673ed3528aa5a2042a560381a2d3d", "html_url": "https://github.com/rust-lang/rust/commit/a80d6423e68673ed3528aa5a2042a560381a2d3d"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "eed96598b1ec4d5af4e0f02b62ae6a9ee3c4b269", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e64f523b2750ef8275ad9d1625afab6d9707898a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64f523b2750ef8275ad9d1625afab6d9707898a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=e64f523b2750ef8275ad9d1625afab6d9707898a", "patch": "@@ -157,6 +157,8 @@ pub(crate) fn verify_func(tcx: TyCtxt<'_>, writer: &crate::pretty_clif::CommentW\n }\n \n fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+    crate::constant::check_constants(fx);\n+\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n         let block = fx.get_block(bb);\n         fx.bcx.switch_to_block(block);"}, {"sha": "b5c9b92100dcfe4abff1106b7cb25810fe7a3be0", "filename": "src/constant.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e64f523b2750ef8275ad9d1625afab6d9707898a/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64f523b2750ef8275ad9d1625afab6d9707898a/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e64f523b2750ef8275ad9d1625afab6d9707898a", "patch": "@@ -1,8 +1,9 @@\n use rustc_span::DUMMY_SP;\n \n+use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, Pointer, Scalar,\n+    read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer, Scalar,\n };\n use rustc_middle::ty::{Const, ConstKind};\n use rustc_target::abi::Align;\n@@ -34,6 +35,29 @@ impl ConstantCx {\n     }\n }\n \n+pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+    for constant in &fx.mir.required_consts {\n+        let const_ = fx.monomorphize(&constant.literal);\n+        match const_.val {\n+            ConstKind::Value(_) => {}\n+            ConstKind::Unevaluated(def, ref substs, promoted) => {\n+                if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None) {\n+                    match err {\n+                        ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                            fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n+                        }\n+                        ErrorHandled::TooGeneric => {\n+                            span_bug!(constant.span, \"codgen encountered polymorphic constant: {:?}\", err);\n+                        }\n+                    }\n+                }\n+            }\n+            ConstKind::Param(_) | ConstKind::Infer(_) | ConstKind::Bound(_, _)\n+            | ConstKind::Placeholder(_) | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n+        }\n+    }\n+}\n+\n pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n     constants_cx.todo.push(TodoItem::Static(def_id));\n }"}, {"sha": "6394937605a684e70b16c346cf93744b5263f1c1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e64f523b2750ef8275ad9d1625afab6d9707898a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64f523b2750ef8275ad9d1625afab6d9707898a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e64f523b2750ef8275ad9d1625afab6d9707898a", "patch": "@@ -5,6 +5,7 @@\n extern crate flate2;\n #[cfg(feature = \"jit\")]\n extern crate libc;\n+#[macro_use]\n extern crate rustc_middle;\n extern crate rustc_codegen_ssa;\n extern crate rustc_data_structures;"}]}