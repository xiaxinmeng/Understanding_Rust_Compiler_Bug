{"sha": "bb94fc00695be648f62751e8f393e11644d938ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOTRmYzAwNjk1YmU2NDhmNjI3NTFlOGYzOTNlMTE2NDRkOTM4YWU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-28T14:47:59Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-28T16:30:27Z"}, "message": "Use closure to avoid self.describe_place(...).unwrap_or_else(...) repetition", "tree": {"sha": "21b0a7fe839cee808312617f15a12828319e8746", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b0a7fe839cee808312617f15a12828319e8746"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb94fc00695be648f62751e8f393e11644d938ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb94fc00695be648f62751e8f393e11644d938ae", "html_url": "https://github.com/rust-lang/rust/commit/bb94fc00695be648f62751e8f393e11644d938ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb94fc00695be648f62751e8f393e11644d938ae/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0", "html_url": "https://github.com/rust-lang/rust/commit/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "5c5d495466cda0fbabd667f8fdace85833951dff", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bb94fc00695be648f62751e8f393e11644d938ae/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb94fc00695be648f62751e8f393e11644d938ae/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=bb94fc00695be648f62751e8f393e11644d938ae", "patch": "@@ -599,6 +599,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             let ty = place.ty(self.mir, self.infcx.tcx).ty;\n             ty.ty_adt_def().filter(|adt| adt.is_union()).map(|_| ty)\n         };\n+        let describe_place = |place| self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n \n         // Start with an empty tuple, so we can use the functions on `Option` to reduce some\n         // code duplication (particularly around returning an empty description in the failure\n@@ -633,19 +634,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     if let ProjectionElem::Field(field, _) = elem {\n                         if let Some(union_ty) = union_ty(base) {\n                             if field != target_field && base == target_base {\n-                                let desc_base =\n-                                    self.describe_place(base).unwrap_or_else(|| \"_\".to_owned());\n-                                let desc_first = self\n-                                    .describe_place(first_borrowed_place)\n-                                    .unwrap_or_else(|| \"_\".to_owned());\n-                                let desc_second = self\n-                                    .describe_place(second_borrowed_place)\n-                                    .unwrap_or_else(|| \"_\".to_owned());\n-\n                                 return Some((\n-                                    desc_base,\n-                                    desc_first,\n-                                    desc_second,\n+                                    describe_place(base),\n+                                    describe_place(first_borrowed_place),\n+                                    describe_place(second_borrowed_place),\n                                     union_ty.to_string(),\n                                 ));\n                             }\n@@ -659,9 +651,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             .unwrap_or_else(|| {\n                 // If we didn't find a field access into a union, or both places match, then\n                 // only return the description of the first place.\n-                let desc_place = self.describe_place(first_borrowed_place)\n-                    .unwrap_or_else(|| \"_\".to_owned());\n-                (desc_place, \"\".to_string(), \"\".to_string(), \"\".to_string())\n+                (\n+                    describe_place(first_borrowed_place),\n+                    \"\".to_string(),\n+                    \"\".to_string(),\n+                    \"\".to_string(),\n+                )\n             })\n     }\n "}]}