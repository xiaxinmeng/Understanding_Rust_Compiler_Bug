{"sha": "f266821d8f4f4ad37b858c894d3d52a35f55353f", "node_id": "C_kwDOAAsO6NoAKGYyNjY4MjFkOGY0ZjRhZDM3Yjg1OGM4OTRkM2Q1MmEzNWY1NTM1M2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-27T20:35:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-27T20:35:14Z"}, "message": "Rollup merge of #98587 - RalfJung:core-tests, r=thomcc\n\nlibcore tests: avoid int2ptr casts\n\nWe don't need any of these pointers to actually be dereferenceable so using `ptr::invalid` should be fine. And then we can run Miri with strict provenance enforcement on the tests.", "tree": {"sha": "039565e06271c0d5bb8d02e02b2eb80f71324a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039565e06271c0d5bb8d02e02b2eb80f71324a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f266821d8f4f4ad37b858c894d3d52a35f55353f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiuhSDCRBK7hj4Ov3rIwAAC4YIAACJBvUaeM7YuYCPcnKYvpof\n+Mg/JwkFjW7Qi0HSSNHP7wi7/mdCi/1W38DPlYzeHPcT9u2mtCVfMd/s6NGKT10X\ncvAwoturMDSqMxwVZynSb/u+3uECUtJ7JvmKTqzZWxpytV5mdSze+bt7MTpPMVps\nEDaz2KEVfoi9RaPsNczHItKMZhT7CnFAhjhfeE2QMS+I0NDWsJczvt0pqj4slB00\nx+CfqwALtP9/EXz1OLWTW4kMIMHrok9/+/fAFo3VLrTL1nPMbbEW05nypjvdxrOh\nlRNs8JNLGGVhet4Y57ez7uNIS+9+me0mbaYNq1i1keOF2LPk24g/R3sdPDzZzu8=\n=RZbq\n-----END PGP SIGNATURE-----\n", "payload": "tree 039565e06271c0d5bb8d02e02b2eb80f71324a30\nparent 19a05b56b1f39ff3aa537f16aeecee3643db3a92\nparent 8c977cfda85df9c1c71260ef7046a7511fca8c3a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656362114 +0200\ncommitter GitHub <noreply@github.com> 1656362114 +0200\n\nRollup merge of #98587 - RalfJung:core-tests, r=thomcc\n\nlibcore tests: avoid int2ptr casts\n\nWe don't need any of these pointers to actually be dereferenceable so using `ptr::invalid` should be fine. And then we can run Miri with strict provenance enforcement on the tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f266821d8f4f4ad37b858c894d3d52a35f55353f", "html_url": "https://github.com/rust-lang/rust/commit/f266821d8f4f4ad37b858c894d3d52a35f55353f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f266821d8f4f4ad37b858c894d3d52a35f55353f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a05b56b1f39ff3aa537f16aeecee3643db3a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a05b56b1f39ff3aa537f16aeecee3643db3a92", "html_url": "https://github.com/rust-lang/rust/commit/19a05b56b1f39ff3aa537f16aeecee3643db3a92"}, {"sha": "8c977cfda85df9c1c71260ef7046a7511fca8c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c977cfda85df9c1c71260ef7046a7511fca8c3a", "html_url": "https://github.com/rust-lang/rust/commit/8c977cfda85df9c1c71260ef7046a7511fca8c3a"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "8a5a06b3440f85cf33b614091b26759a442c90e9", "filename": "library/core/tests/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Falloc.rs?ref=f266821d8f4f4ad37b858c894d3d52a35f55353f", "patch": "@@ -1,5 +1,5 @@\n use core::alloc::Layout;\n-use core::ptr::NonNull;\n+use core::ptr::{self, NonNull};\n \n #[test]\n fn const_unchecked_layout() {\n@@ -9,7 +9,7 @@ fn const_unchecked_layout() {\n     const DANGLING: NonNull<u8> = LAYOUT.dangling();\n     assert_eq!(LAYOUT.size(), SIZE);\n     assert_eq!(LAYOUT.align(), ALIGN);\n-    assert_eq!(Some(DANGLING), NonNull::new(ALIGN as *mut u8));\n+    assert_eq!(Some(DANGLING), NonNull::new(ptr::invalid_mut(ALIGN)));\n }\n \n #[test]"}, {"sha": "f7934d062a3798051fbbbbf57bcefb832c5d3963", "filename": "library/core/tests/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fmod.rs?ref=f266821d8f4f4ad37b858c894d3d52a35f55353f", "patch": "@@ -2,6 +2,7 @@ mod sip;\n \n use std::default::Default;\n use std::hash::{BuildHasher, Hash, Hasher};\n+use std::ptr;\n use std::rc::Rc;\n \n struct MyHasher {\n@@ -69,10 +70,10 @@ fn test_writer_hasher() {\n     let cs: Rc<[u8]> = Rc::new([1, 2, 3]);\n     assert_eq!(hash(&cs), 9);\n \n-    let ptr = 5_usize as *const i32;\n+    let ptr = ptr::invalid::<i32>(5_usize);\n     assert_eq!(hash(&ptr), 5);\n \n-    let ptr = 5_usize as *mut i32;\n+    let ptr = ptr::invalid_mut::<i32>(5_usize);\n     assert_eq!(hash(&ptr), 5);\n \n     if cfg!(miri) {"}, {"sha": "187a7db7fcb832e229b12e12359f65525adf27fb", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=f266821d8f4f4ad37b858c894d3d52a35f55353f", "patch": "@@ -353,9 +353,9 @@ fn align_offset_zst() {\n     // all, because no amount of elements will align the pointer.\n     let mut p = 1;\n     while p < 1024 {\n-        assert_eq!((p as *const ()).align_offset(p), 0);\n+        assert_eq!(ptr::invalid::<()>(p).align_offset(p), 0);\n         if p != 1 {\n-            assert_eq!(((p + 1) as *const ()).align_offset(p), !0);\n+            assert_eq!(ptr::invalid::<()>(p + 1).align_offset(p), !0);\n         }\n         p = (p + 1).next_power_of_two();\n     }\n@@ -371,7 +371,7 @@ fn align_offset_stride1() {\n             let expected = ptr % align;\n             let offset = if expected == 0 { 0 } else { align - expected };\n             assert_eq!(\n-                (ptr as *const u8).align_offset(align),\n+                ptr::invalid::<u8>(ptr).align_offset(align),\n                 offset,\n                 \"ptr = {}, align = {}, size = 1\",\n                 ptr,\n@@ -434,14 +434,14 @@ fn align_offset_weird_strides() {\n     while align < limit {\n         for ptr in 1usize..4 * align {\n             unsafe {\n-                x |= test_weird_stride::<A3>(ptr as *const A3, align);\n-                x |= test_weird_stride::<A4>(ptr as *const A4, align);\n-                x |= test_weird_stride::<A5>(ptr as *const A5, align);\n-                x |= test_weird_stride::<A6>(ptr as *const A6, align);\n-                x |= test_weird_stride::<A7>(ptr as *const A7, align);\n-                x |= test_weird_stride::<A8>(ptr as *const A8, align);\n-                x |= test_weird_stride::<A9>(ptr as *const A9, align);\n-                x |= test_weird_stride::<A10>(ptr as *const A10, align);\n+                x |= test_weird_stride::<A3>(ptr::invalid::<A3>(ptr), align);\n+                x |= test_weird_stride::<A4>(ptr::invalid::<A4>(ptr), align);\n+                x |= test_weird_stride::<A5>(ptr::invalid::<A5>(ptr), align);\n+                x |= test_weird_stride::<A6>(ptr::invalid::<A6>(ptr), align);\n+                x |= test_weird_stride::<A7>(ptr::invalid::<A7>(ptr), align);\n+                x |= test_weird_stride::<A8>(ptr::invalid::<A8>(ptr), align);\n+                x |= test_weird_stride::<A9>(ptr::invalid::<A9>(ptr), align);\n+                x |= test_weird_stride::<A10>(ptr::invalid::<A10>(ptr), align);\n             }\n         }\n         align = (align + 1).next_power_of_two();\n@@ -479,8 +479,8 @@ fn ptr_metadata() {\n     let () = metadata(&[4, 7]);\n     let () = metadata(&(4, String::new()));\n     let () = metadata(&Pair(4, String::new()));\n-    let () = metadata(0 as *const Extern);\n-    let () = metadata(0 as *const <&u32 as std::ops::Deref>::Target);\n+    let () = metadata(ptr::null::<()>() as *const Extern);\n+    let () = metadata(ptr::null::<()>() as *const <&u32 as std::ops::Deref>::Target);\n \n     assert_eq!(metadata(\"foo\"), 3_usize);\n     assert_eq!(metadata(&[4, 7][..]), 2_usize);"}, {"sha": "38a3a0adad98ebb898f717fa7a8a87502740de7f", "filename": "library/core/tests/waker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Fwaker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f266821d8f4f4ad37b858c894d3d52a35f55353f/library%2Fcore%2Ftests%2Fwaker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fwaker.rs?ref=f266821d8f4f4ad37b858c894d3d52a35f55353f", "patch": "@@ -3,7 +3,7 @@ use std::task::{RawWaker, RawWakerVTable, Waker};\n \n #[test]\n fn test_waker_getters() {\n-    let raw_waker = RawWaker::new(42usize as *mut (), &WAKER_VTABLE);\n+    let raw_waker = RawWaker::new(ptr::invalid_mut(42usize), &WAKER_VTABLE);\n     assert_eq!(raw_waker.data() as usize, 42);\n     assert!(ptr::eq(raw_waker.vtable(), &WAKER_VTABLE));\n \n@@ -15,7 +15,7 @@ fn test_waker_getters() {\n }\n \n static WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(\n-    |data| RawWaker::new((data as usize + 1) as *mut (), &WAKER_VTABLE),\n+    |data| RawWaker::new(ptr::invalid_mut(data as usize + 1), &WAKER_VTABLE),\n     |_| {},\n     |_| {},\n     |_| {},"}]}