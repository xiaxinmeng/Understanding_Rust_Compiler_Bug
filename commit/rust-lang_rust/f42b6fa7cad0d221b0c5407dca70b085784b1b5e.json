{"sha": "f42b6fa7cad0d221b0c5407dca70b085784b1b5e", "node_id": "C_kwDOAAsO6NoAKGY0MmI2ZmE3Y2FkMGQyMjFiMGM1NDA3ZGNhNzBiMDg1Nzg0YjFiNWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-30T17:45:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-30T17:45:04Z"}, "message": "Auto merge of #103299 - nikic:usub-overflow, r=wesleywiser\n\nDon't use usub.with.overflow intrinsic\n\nThe canonical form of a usub.with.overflow check in LLVM are separate sub + icmp instructions, rather than a usub.with.overflow intrinsic. Using usub.with.overflow will generally result in worse optimization potential.\n\nThe backend will attempt to form usub.with.overflow when it comes to actual instruction selection. This is not fully reliable, but I believe this is a better tradeoff than using the intrinsic in IR.\n\nFixes #103285.", "tree": {"sha": "e59b94ba87f1853f5cea069b3d39ba0551dc55f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59b94ba87f1853f5cea069b3d39ba0551dc55f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42b6fa7cad0d221b0c5407dca70b085784b1b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42b6fa7cad0d221b0c5407dca70b085784b1b5e", "html_url": "https://github.com/rust-lang/rust/commit/f42b6fa7cad0d221b0c5407dca70b085784b1b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42b6fa7cad0d221b0c5407dca70b085784b1b5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab74459b86465e751fc8f6fa9934687423ce2a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab74459b86465e751fc8f6fa9934687423ce2a6", "html_url": "https://github.com/rust-lang/rust/commit/5ab74459b86465e751fc8f6fa9934687423ce2a6"}, {"sha": "783301298f1e151b82c1be21bc6a214b9ef525bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/783301298f1e151b82c1be21bc6a214b9ef525bd", "html_url": "https://github.com/rust-lang/rust/commit/783301298f1e151b82c1be21bc6a214b9ef525bd"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "9cb36ce7f1890b967d8ca7f4b948b98c0b4f53bd", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f42b6fa7cad0d221b0c5407dca70b085784b1b5e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b6fa7cad0d221b0c5407dca70b085784b1b5e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=f42b6fa7cad0d221b0c5407dca70b085784b1b5e", "patch": "@@ -365,11 +365,14 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 Int(I64) => \"llvm.ssub.with.overflow.i64\",\n                 Int(I128) => \"llvm.ssub.with.overflow.i128\",\n \n-                Uint(U8) => \"llvm.usub.with.overflow.i8\",\n-                Uint(U16) => \"llvm.usub.with.overflow.i16\",\n-                Uint(U32) => \"llvm.usub.with.overflow.i32\",\n-                Uint(U64) => \"llvm.usub.with.overflow.i64\",\n-                Uint(U128) => \"llvm.usub.with.overflow.i128\",\n+                Uint(_) => {\n+                    // Emit sub and icmp instead of llvm.usub.with.overflow. LLVM considers these\n+                    // to be the canonical form. It will attempt to reform llvm.usub.with.overflow\n+                    // in the backend if profitable.\n+                    let sub = self.sub(lhs, rhs);\n+                    let cmp = self.icmp(IntPredicate::IntULT, lhs, rhs);\n+                    return (sub, cmp);\n+                }\n \n                 _ => unreachable!(),\n             },"}, {"sha": "a3499babea21b07d40c2b232d14ca2b986b1ce95", "filename": "src/test/codegen/issue-103285-ptr-addr-overflow-check.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f42b6fa7cad0d221b0c5407dca70b085784b1b5e/src%2Ftest%2Fcodegen%2Fissue-103285-ptr-addr-overflow-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b6fa7cad0d221b0c5407dca70b085784b1b5e/src%2Ftest%2Fcodegen%2Fissue-103285-ptr-addr-overflow-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-103285-ptr-addr-overflow-check.rs?ref=f42b6fa7cad0d221b0c5407dca70b085784b1b5e", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -O -C debug-assertions=yes\n+\n+#![crate_type = \"lib\"]\n+#![feature(strict_provenance)]\n+\n+#[no_mangle]\n+pub fn test(src: *const u8, dst: *const u8) -> usize {\n+    // CHECK-LABEL: @test(\n+    // CHECK-NOT: panic\n+    let src_usize = src.addr();\n+    let dst_usize = dst.addr();\n+    if src_usize > dst_usize {\n+        return src_usize - dst_usize;\n+    }\n+    return 0;\n+}"}]}