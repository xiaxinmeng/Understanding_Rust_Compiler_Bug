{"sha": "93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYjJiYjAxYTk2MWZkYjYxYTRhZWFmNmJjNmJkY2FiOWNjZWRiZTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-21T23:18:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-21T23:18:06Z"}, "message": "Remove dependency on `libsyntax`", "tree": {"sha": "9a3888c5613db82e46511a9c81602fb13229646e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a3888c5613db82e46511a9c81602fb13229646e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "html_url": "https://github.com/rust-lang/rust/commit/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/comments", "author": null, "committer": null, "parents": [{"sha": "a7a68370a72cc553c8ca983fe593062235360b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a68370a72cc553c8ca983fe593062235360b9b", "html_url": "https://github.com/rust-lang/rust/commit/a7a68370a72cc553c8ca983fe593062235360b9b"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "8299dea1c4b0eec9c92b72f453dde86db4400b7f", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "patch": "@@ -715,9 +715,6 @@ dependencies = [\n [[package]]\n name = \"fmt_macros\"\n version = \"0.0.0\"\n-dependencies = [\n- \"syntax 0.0.0\",\n-]\n \n [[package]]\n name = \"fnv\""}, {"sha": "b3f4d2deae2fc7f5a13f95b83c98203485886c64", "filename": "src/libfmt_macros/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibfmt_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibfmt_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2FCargo.toml?ref=93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "patch": "@@ -7,6 +7,3 @@ version = \"0.0.0\"\n name = \"fmt_macros\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n-\n-[dependencies]\n-syntax = { path = \"../libsyntax\" }"}, {"sha": "3d17ccec12161933574d3d9cc5f99d60c89df299", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "patch": "@@ -28,8 +28,6 @@ pub use self::Alignment::*;\n pub use self::Flag::*;\n pub use self::Count::*;\n \n-extern crate syntax;\n-\n use std::str;\n use std::string;\n use std::iter;\n@@ -152,8 +150,8 @@ pub struct Parser<'a> {\n     pub errors: Vec<ParseError>,\n     /// Current position of implicit positional argument pointer\n     curarg: usize,\n-    /// The style of the string (raw or not), used to position spans correctly\n-    style: syntax::ast::StrStyle,\n+    /// `Some(raw count)` when the string is \"raw\", used to position spans correctly\n+    style: Option<usize>,\n     /// How many newlines have been seen in the string so far, to adjust the error spans\n     seen_newlines: usize,\n }\n@@ -162,10 +160,7 @@ impl<'a> Iterator for Parser<'a> {\n     type Item = Piece<'a>;\n \n     fn next(&mut self) -> Option<Piece<'a>> {\n-        let raw = match self.style {\n-            syntax::ast::StrStyle::Raw(raw) => raw as usize + self.seen_newlines,\n-            _ => 0,\n-        };\n+        let raw = self.style.map(|raw| raw + self.seen_newlines).unwrap_or(0);\n         if let Some(&(pos, c)) = self.cur.peek() {\n             match c {\n                 '{' => {\n@@ -208,7 +203,7 @@ impl<'a> Iterator for Parser<'a> {\n \n impl<'a> Parser<'a> {\n     /// Creates a new parser for the given format string\n-    pub fn new(s: &'a str, style: syntax::ast::StrStyle) -> Parser<'a> {\n+    pub fn new(s: &'a str, style: Option<usize>) -> Parser<'a> {\n         Parser {\n             input: s,\n             cur: s.char_indices().peekable(),\n@@ -278,10 +273,7 @@ impl<'a> Parser<'a> {\n     /// found, an error is emitted.\n     fn must_consume(&mut self, c: char) {\n         self.ws();\n-        let raw = match self.style {\n-            syntax::ast::StrStyle::Raw(raw) => raw as usize,\n-            _ => 0,\n-        };\n+        let raw = self.style.unwrap_or(0);\n \n         let padding = raw + self.seen_newlines;\n         if let Some(&(pos, maybe)) = self.cur.peek() {"}, {"sha": "925d3504f75fc120c2a44f1c7d2ea0ca82fc7107", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "patch": "@@ -15,7 +15,7 @@ use ty::{self, TyCtxt, GenericParamDefKind};\n use util::common::ErrorReported;\n use util::nodemap::FxHashMap;\n \n-use syntax::ast::{self, MetaItem, NestedMetaItem};\n+use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax_pos::Span;\n use syntax_pos::symbol::LocalInternedString;\n@@ -242,7 +242,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n     {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n-        let parser = Parser::new(&self.0, ast::StrStyle::Cooked);\n+        let parser = Parser::new(&self.0, None);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -298,7 +298,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n             Some((name, value))\n         }).collect::<FxHashMap<String, String>>();\n \n-        let parser = Parser::new(&self.0, ast::StrStyle::Cooked);\n+        let parser = Parser::new(&self.0, None);\n         parser.map(|p| {\n             match p {\n                 Piece::String(s) => s,"}, {"sha": "c63cc3727eda0ed753f876a8f88d2be39602da29", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=93b2bb01a961fdb61a4aeaf6bc6bdcab9ccedbe2", "patch": "@@ -778,7 +778,11 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     };\n \n     let fmt_str = &*fmt.node.0.as_str();\n-    let mut parser = parse::Parser::new(fmt_str, fmt.node.1);\n+    let str_style = match fmt.node.1 {\n+        ast::StrStyle::Cooked => None,\n+        ast::StrStyle::Raw(raw) => Some(raw as usize),\n+    };\n+    let mut parser = parse::Parser::new(fmt_str, str_style);\n     let mut pieces = vec![];\n \n     while let Some(mut piece) = parser.next() {"}]}