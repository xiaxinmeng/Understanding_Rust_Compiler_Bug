{"sha": "db0be32fec539ab57c446433cb186f979af40413", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMGJlMzJmZWM1MzlhYjU3YzQ0NjQzM2NiMTg2Zjk3OWFmNDA0MTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-05T19:54:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-04T00:09:47Z"}, "message": "resolve: Use same rules for disambiguating fresh bindings in `match` and `let`", "tree": {"sha": "4bf8e0167f0c2832ce25f1b39565367d61612915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bf8e0167f0c2832ce25f1b39565367d61612915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0be32fec539ab57c446433cb186f979af40413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0be32fec539ab57c446433cb186f979af40413", "html_url": "https://github.com/rust-lang/rust/commit/db0be32fec539ab57c446433cb186f979af40413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0be32fec539ab57c446433cb186f979af40413/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2278506f682062c7988c9e534a94366c56693981", "url": "https://api.github.com/repos/rust-lang/rust/commits/2278506f682062c7988c9e534a94366c56693981", "html_url": "https://github.com/rust-lang/rust/commit/2278506f682062c7988c9e534a94366c56693981"}], "stats": {"total": 115, "additions": 90, "deletions": 25}, "files": [{"sha": "930aebf25fb3ce4f81266d0e891d0b9d0bc60bcb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db0be32fec539ab57c446433cb186f979af40413/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0be32fec539ab57c446433cb186f979af40413/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=db0be32fec539ab57c446433cb186f979af40413", "patch": "@@ -376,12 +376,6 @@ enum PatternSource {\n }\n \n impl PatternSource {\n-    fn is_refutable(self) -> bool {\n-        match self {\n-            PatternSource::Match | PatternSource::IfLet | PatternSource::WhileLet => true,\n-            PatternSource::Let | PatternSource::For | PatternSource::FnParam  => false,\n-        }\n-    }\n     fn descr(self) -> &'static str {\n         match self {\n             PatternSource::Match => \"match binding\",\n@@ -2378,20 +2372,24 @@ impl<'a> Resolver<'a> {\n                                                                       false, pat.span)\n                                       .and_then(LexicalScopeBinding::item);\n                     let resolution = binding.map(NameBinding::def).and_then(|def| {\n-                        let ivmode = BindingMode::ByValue(Mutability::Immutable);\n-                        let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n-                                             bmode != ivmode;\n+                        let is_syntactic_ambiguity = opt_pat.is_none() &&\n+                            bmode == BindingMode::ByValue(Mutability::Immutable);\n                         match def {\n                             Def::StructCtor(_, CtorKind::Const) |\n                             Def::VariantCtor(_, CtorKind::Const) |\n-                            Def::Const(..) if !always_binding => {\n-                                // A unit struct/variant or constant pattern.\n+                            Def::Const(..) if is_syntactic_ambiguity => {\n+                                // Disambiguate in favor of a unit struct/variant\n+                                // or constant pattern.\n                                 self.record_use(ident.node, ValueNS, binding.unwrap(), ident.span);\n                                 Some(PathResolution::new(def))\n                             }\n                             Def::StructCtor(..) | Def::VariantCtor(..) |\n                             Def::Const(..) | Def::Static(..) => {\n-                                // A fresh binding that shadows something unacceptable.\n+                                // This is unambiguously a fresh binding, either syntactically\n+                                // (e.g. `IDENT @ PAT` or `ref IDENT`) or because `IDENT` resolves\n+                                // to something unusable as a pattern (e.g. constructor function),\n+                                // but we still conservatively report an error, see\n+                                // issues/33118#issuecomment-233962221 for one reason why.\n                                 resolve_error(\n                                     self,\n                                     ident.span,\n@@ -2400,7 +2398,7 @@ impl<'a> Resolver<'a> {\n                                 );\n                                 None\n                             }\n-                            Def::Local(..) | Def::Upvar(..) | Def::Fn(..) | Def::Err => {\n+                            Def::Fn(..) | Def::Err => {\n                                 // These entities are explicitly allowed\n                                 // to be shadowed by fresh bindings.\n                                 None"}, {"sha": "a501a5cd3ec4cc27197c58a54294d461301acd89", "filename": "src/test/compile-fail/blind-item-block-middle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs?ref=db0be32fec539ab57c446433cb186f979af40413", "patch": "@@ -12,6 +12,6 @@ mod foo { pub struct bar; }\n \n fn main() {\n     let bar = 5;\n-    //~^ ERROR let bindings cannot shadow unit structs\n+    //~^ ERROR mismatched types\n     use foo::bar;\n }"}, {"sha": "5aa5a92c3a79e53e4f210dd084a5eef42314434d", "filename": "src/test/compile-fail/const-pattern-irrefutable.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs?ref=db0be32fec539ab57c446433cb186f979af40413", "patch": "@@ -13,17 +13,17 @@ mod foo {\n     pub const d: u8 = 2;\n }\n \n-use foo::b as c; //~ NOTE is imported here\n-use foo::d; //~ NOTE is imported here\n+use foo::b as c;\n+use foo::d;\n \n-const a: u8 = 2; //~ NOTE is defined here\n+const a: u8 = 2;\n \n fn main() {\n-    let a = 4; //~ ERROR let bindings cannot shadow constants\n-               //~^ NOTE cannot be named the same as a constant\n-    let c = 4; //~ ERROR let bindings cannot shadow constants\n-               //~^ NOTE cannot be named the same as a constant\n-    let d = 4; //~ ERROR let bindings cannot shadow constants\n-               //~^ NOTE cannot be named the same as a constant\n+    let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+               //~^ NOTE pattern `_` not covered\n+    let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+               //~^ NOTE pattern `_` not covered\n+    let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+               //~^ NOTE pattern `_` not covered\n     fn f() {} // Check that the `NOTE`s still work with an item here (c.f. issue #35115).\n }"}, {"sha": "1e1994357c77ad3fa29ce96988188b36d63ca809", "filename": "src/test/compile-fail/issue-33504.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fissue-33504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fissue-33504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33504.rs?ref=db0be32fec539ab57c446433cb186f979af40413", "patch": "@@ -14,6 +14,6 @@ struct Test;\n \n fn main() {\n     || {\n-        let Test = 1; //~ ERROR let bindings cannot shadow unit structs\n+        let Test = 1; //~ ERROR mismatched types\n     };\n }"}, {"sha": "1b6b47137030f9c8cb750f8118815cce999b396b", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=db0be32fec539ab57c446433cb186f979af40413", "patch": "@@ -11,7 +11,7 @@\n use std::option::*;\n \n fn main() {\n-  let None: isize = 42; //~ ERROR let bindings cannot shadow unit variants\n+  let None: isize = 42; //~ ERROR mismatched types\n   log(debug, None);\n   //~^ ERROR cannot find function `log` in this scope\n   //~| ERROR cannot find value `debug` in this scope"}, {"sha": "c740f6bb47c3fa236de3fbd2e9c083c59d5e6c2d", "filename": "src/test/compile-fail/pattern-binding-disambiguation.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fpattern-binding-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0be32fec539ab57c446433cb186f979af40413/src%2Ftest%2Fcompile-fail%2Fpattern-binding-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-binding-disambiguation.rs?ref=db0be32fec539ab57c446433cb186f979af40413", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct UnitStruct;\n+struct TupleStruct();\n+struct BracedStruct{}\n+\n+enum E {\n+    UnitVariant,\n+    TupleVariant(),\n+    BracedVariant{},\n+}\n+use E::*;\n+\n+const CONST: () = ();\n+static STATIC: () = ();\n+\n+fn function() {}\n+\n+fn main() {\n+    let doesnt_matter = 0;\n+\n+    match UnitStruct {\n+        UnitStruct => {} // OK, `UnitStruct` is a unit struct pattern\n+    }\n+    match doesnt_matter {\n+        TupleStruct => {} //~ ERROR match bindings cannot shadow tuple structs\n+    }\n+    match doesnt_matter {\n+        BracedStruct => {} // OK, `BracedStruct` is a fresh binding\n+    }\n+    match UnitVariant {\n+        UnitVariant => {} // OK, `UnitVariant` is a unit variant pattern\n+    }\n+    match doesnt_matter {\n+        TupleVariant => {} //~ ERROR match bindings cannot shadow tuple variants\n+    }\n+    match doesnt_matter {\n+        BracedVariant => {} //~ ERROR match bindings cannot shadow struct variants\n+    }\n+    match CONST {\n+        CONST => {} // OK, `CONST` is a const pattern\n+    }\n+    match doesnt_matter {\n+        STATIC => {} //~ ERROR match bindings cannot shadow statics\n+    }\n+    match doesnt_matter {\n+        function => {} // OK, `function` is a fresh binding\n+    }\n+\n+    let UnitStruct = UnitStruct; // OK, `UnitStruct` is a unit struct pattern\n+    let TupleStruct = doesnt_matter; //~ ERROR let bindings cannot shadow tuple structs\n+    let BracedStruct = doesnt_matter; // OK, `BracedStruct` is a fresh binding\n+    let UnitVariant = UnitVariant; // OK, `UnitVariant` is a unit variant pattern\n+    let TupleVariant = doesnt_matter; //~ ERROR let bindings cannot shadow tuple variants\n+    let BracedVariant = doesnt_matter; //~ ERROR let bindings cannot shadow struct variants\n+    let CONST = CONST; // OK, `CONST` is a const pattern\n+    let STATIC = doesnt_matter; //~ ERROR let bindings cannot shadow statics\n+    let function = doesnt_matter; // OK, `function` is a fresh binding\n+}"}]}