{"sha": "15dcb5bfc51753aad5527888ec5a1c9381e8d1e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZGNiNWJmYzUxNzUzYWFkNTUyNzg4OGVjNWExYzkzODFlOGQxZTE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-25T22:48:59Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-30T05:21:26Z"}, "message": "Alternate method", "tree": {"sha": "a20dc2982504e900cd7d24f5ec23471b5b88ef75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20dc2982504e900cd7d24f5ec23471b5b88ef75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1", "html_url": "https://github.com/rust-lang/rust/commit/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b23ddc60e9fcb188421060a83f1af2b815fc60e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b23ddc60e9fcb188421060a83f1af2b815fc60e2", "html_url": "https://github.com/rust-lang/rust/commit/b23ddc60e9fcb188421060a83f1af2b815fc60e2"}], "stats": {"total": 230, "additions": 117, "deletions": 113}, "files": [{"sha": "800cd7e8aeea7025c3b54fa2122c09f1b48940f2", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 109, "deletions": 105, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=15dcb5bfc51753aad5527888ec5a1c9381e8d1e1", "patch": "@@ -130,19 +130,19 @@ enum MapEntry<'ast> {\n     NotPresent,\n \n     /// All the node types, with a parent and scope ID.\n-    EntryItem(NodeId, NodeId, &'ast Item),\n-    EntryForeignItem(NodeId, NodeId, &'ast ForeignItem),\n-    EntryTraitItem(NodeId, NodeId, &'ast TraitItem),\n-    EntryImplItem(NodeId, NodeId, &'ast ImplItem),\n-    EntryVariant(NodeId, NodeId, &'ast Variant),\n-    EntryExpr(NodeId, NodeId, &'ast Expr),\n-    EntryStmt(NodeId, NodeId, &'ast Stmt),\n-    EntryArg(NodeId, NodeId, &'ast Pat),\n-    EntryLocal(NodeId, NodeId, &'ast Pat),\n-    EntryPat(NodeId, NodeId, &'ast Pat),\n-    EntryBlock(NodeId, NodeId, &'ast Block),\n-    EntryStructCtor(NodeId, NodeId, &'ast StructDef),\n-    EntryLifetime(NodeId, NodeId, &'ast Lifetime),\n+    EntryItem(NodeId, &'ast Item),\n+    EntryForeignItem(NodeId, &'ast ForeignItem),\n+    EntryTraitItem(NodeId, &'ast TraitItem),\n+    EntryImplItem(NodeId, &'ast ImplItem),\n+    EntryVariant(NodeId, &'ast Variant),\n+    EntryExpr(NodeId, &'ast Expr),\n+    EntryStmt(NodeId, &'ast Stmt),\n+    EntryArg(NodeId, &'ast Pat),\n+    EntryLocal(NodeId, &'ast Pat),\n+    EntryPat(NodeId, &'ast Pat),\n+    EntryBlock(NodeId, &'ast Block),\n+    EntryStructCtor(NodeId, &'ast StructDef),\n+    EntryLifetime(NodeId, &'ast Lifetime),\n \n     /// Roots for node trees.\n     RootCrate,\n@@ -162,77 +162,58 @@ struct InlinedParent {\n }\n \n impl<'ast> MapEntry<'ast> {\n-    fn from_node(p: NodeId, s: NodeId, node: Node<'ast>) -> MapEntry<'ast> {\n+    fn from_node(s: NodeId, node: Node<'ast>) -> MapEntry<'ast> {\n         match node {\n-            NodeItem(n) => EntryItem(p, s, n),\n-            NodeForeignItem(n) => EntryForeignItem(p, s, n),\n-            NodeTraitItem(n) => EntryTraitItem(p, s, n),\n-            NodeImplItem(n) => EntryImplItem(p, s, n),\n-            NodeVariant(n) => EntryVariant(p, s, n),\n-            NodeExpr(n) => EntryExpr(p, s, n),\n-            NodeStmt(n) => EntryStmt(p, s, n),\n-            NodeArg(n) => EntryArg(p, s, n),\n-            NodeLocal(n) => EntryLocal(p, s, n),\n-            NodePat(n) => EntryPat(p, s, n),\n-            NodeBlock(n) => EntryBlock(p, s, n),\n-            NodeStructCtor(n) => EntryStructCtor(p, s, n),\n-            NodeLifetime(n) => EntryLifetime(p, s, n)\n+            NodeItem(n) => EntryItem(s, n),\n+            NodeForeignItem(n) => EntryForeignItem(s, n),\n+            NodeTraitItem(n) => EntryTraitItem(s, n),\n+            NodeImplItem(n) => EntryImplItem(s, n),\n+            NodeVariant(n) => EntryVariant(s, n),\n+            NodeExpr(n) => EntryExpr(s, n),\n+            NodeStmt(n) => EntryStmt(s, n),\n+            NodeArg(n) => EntryArg(s, n),\n+            NodeLocal(n) => EntryLocal(s, n),\n+            NodePat(n) => EntryPat(s, n),\n+            NodeBlock(n) => EntryBlock(s, n),\n+            NodeStructCtor(n) => EntryStructCtor(s, n),\n+            NodeLifetime(n) => EntryLifetime(s, n)\n         }\n     }\n \n-    fn parent(self) -> Option<NodeId> {\n-        Some(match self {\n-            EntryItem(id, _, _) => id,\n-            EntryForeignItem(id, _, _) => id,\n-            EntryTraitItem(id, _, _) => id,\n-            EntryImplItem(id, _, _) => id,\n-            EntryVariant(id, _, _) => id,\n-            EntryExpr(id, _, _) => id,\n-            EntryStmt(id, _, _) => id,\n-            EntryArg(id, _, _) => id,\n-            EntryLocal(id, _, _) => id,\n-            EntryPat(id, _, _) => id,\n-            EntryBlock(id, _, _) => id,\n-            EntryStructCtor(id, _, _) => id,\n-            EntryLifetime(id, _, _) => id,\n-            _ => return None\n-        })\n-    }\n-\n     fn parent_node(self) -> Option<NodeId> {\n         Some(match self {\n-            EntryItem(_, id, _) => id,\n-            EntryForeignItem(_, id, _) => id,\n-            EntryTraitItem(_, id, _) => id,\n-            EntryImplItem(_, id, _) => id,\n-            EntryVariant(_, id, _) => id,\n-            EntryExpr(_, id, _) => id,\n-            EntryStmt(_, id, _) => id,\n-            EntryArg(_, id, _) => id,\n-            EntryLocal(_, id, _) => id,\n-            EntryPat(_, id, _) => id,\n-            EntryBlock(_, id, _) => id,\n-            EntryStructCtor(_, id, _) => id,\n-            EntryLifetime(_, id, _) => id,\n+            EntryItem(id, _) => id,\n+            EntryForeignItem(id, _) => id,\n+            EntryTraitItem(id, _) => id,\n+            EntryImplItem(id, _) => id,\n+            EntryVariant(id, _) => id,\n+            EntryExpr(id, _) => id,\n+            EntryStmt(id, _) => id,\n+            EntryArg(id, _) => id,\n+            EntryLocal(id, _) => id,\n+            EntryPat(id, _) => id,\n+            EntryBlock(id, _) => id,\n+            EntryStructCtor(id, _) => id,\n+            EntryLifetime(id, _) => id,\n             _ => return None\n         })\n     }\n \n     fn to_node(self) -> Option<Node<'ast>> {\n         Some(match self {\n-            EntryItem(_, _, n) => NodeItem(n),\n-            EntryForeignItem(_, _, n) => NodeForeignItem(n),\n-            EntryTraitItem(_, _, n) => NodeTraitItem(n),\n-            EntryImplItem(_, _, n) => NodeImplItem(n),\n-            EntryVariant(_, _, n) => NodeVariant(n),\n-            EntryExpr(_, _, n) => NodeExpr(n),\n-            EntryStmt(_, _, n) => NodeStmt(n),\n-            EntryArg(_, _, n) => NodeArg(n),\n-            EntryLocal(_, _, n) => NodeLocal(n),\n-            EntryPat(_, _, n) => NodePat(n),\n-            EntryBlock(_, _, n) => NodeBlock(n),\n-            EntryStructCtor(_, _, n) => NodeStructCtor(n),\n-            EntryLifetime(_, _, n) => NodeLifetime(n),\n+            EntryItem(_, n) => NodeItem(n),\n+            EntryForeignItem(_, n) => NodeForeignItem(n),\n+            EntryTraitItem(_, n) => NodeTraitItem(n),\n+            EntryImplItem(_, n) => NodeImplItem(n),\n+            EntryVariant(_, n) => NodeVariant(n),\n+            EntryExpr(_, n) => NodeExpr(n),\n+            EntryStmt(_, n) => NodeStmt(n),\n+            EntryArg(_, n) => NodeArg(n),\n+            EntryLocal(_, n) => NodeLocal(n),\n+            EntryPat(_, n) => NodePat(n),\n+            EntryBlock(_, n) => NodeBlock(n),\n+            EntryStructCtor(_, n) => NodeStructCtor(n),\n+            EntryLifetime(_, n) => NodeLifetime(n),\n             _ => return None\n         })\n     }\n@@ -306,7 +287,37 @@ impl<'ast> Map<'ast> {\n     /// Retrieve the parent NodeId for `id`, or `id` itself if no\n     /// parent is registered in this map.\n     pub fn get_parent(&self, id: NodeId) -> NodeId {\n-        self.find_entry(id).and_then(|x| x.parent()).unwrap_or(id)\n+        let mut id = id;\n+        loop {\n+            let parent_node = self.get_parent_node(id);\n+            if parent_node == 0 {\n+                return parent_node;\n+            }\n+            if parent_node == id {\n+                return id;\n+            }\n+\n+            let node = self.find_entry(parent_node);\n+            if node.is_none() {\n+                return id;\n+            }\n+            let node = node.unwrap().to_node();\n+            match node {\n+                Some(node) => match node {\n+                    NodeItem(_) |\n+                    NodeForeignItem(_) |\n+                    NodeTraitItem(_) |\n+                    NodeImplItem(_) => {\n+                        return parent_node;\n+                    }\n+                    _ => {}\n+                },\n+                None => {\n+                    return parent_node;\n+                }\n+            }\n+            id = parent_node;\n+        }\n     }\n \n     /// Similar to get_parent, returns the parent node id or id if there is no\n@@ -334,6 +345,10 @@ impl<'ast> Map<'ast> {\n                 return None;\n             }\n \n+            if cur_id == 0 {\n+                return Some(0);\n+            }\n+\n             match self.get(cur_id) {\n                 NodeItem(_) |\n                 NodeForeignItem(_) |\n@@ -361,7 +376,7 @@ impl<'ast> Map<'ast> {\n     pub fn get_foreign_abi(&self, id: NodeId) -> abi::Abi {\n         let parent = self.get_parent(id);\n         let abi = match self.find_entry(parent) {\n-            Some(EntryItem(_, _, i)) => {\n+            Some(EntryItem(_, i)) => {\n                 match i.node {\n                     ItemForeignMod(ref nm) => Some(nm.abi),\n                     _ => None\n@@ -650,15 +665,15 @@ impl<'a, 'ast> Iterator for NodesMatchingSuffix<'a, 'ast> {\n                 return None;\n             }\n             self.idx += 1;\n-            let (p, name) = match self.map.find_entry(idx) {\n-                Some(EntryItem(p, _, n))       => (p, n.name()),\n-                Some(EntryForeignItem(p, _, n))=> (p, n.name()),\n-                Some(EntryTraitItem(p, _, n))  => (p, n.name()),\n-                Some(EntryImplItem(p, _, n))   => (p, n.name()),\n-                Some(EntryVariant(p, _, n))    => (p, n.name()),\n+            let name = match self.map.find_entry(idx) {\n+                Some(EntryItem(_, n))       => n.name(),\n+                Some(EntryForeignItem(_, n))=> n.name(),\n+                Some(EntryTraitItem(_, n))  => n.name(),\n+                Some(EntryImplItem(_, n))   => n.name(),\n+                Some(EntryVariant(_, n))    => n.name(),\n                 _ => continue,\n             };\n-            if self.matches_names(p, name) {\n+            if self.matches_names(self.map.get_parent(idx), name) {\n                 return Some(idx)\n             }\n         }\n@@ -707,8 +722,6 @@ impl<F: FoldOps> Folder for IdAndSpanUpdater<F> {\n /// A Visitor that walks over an AST and collects Node's into an AST Map.\n struct NodeCollector<'ast> {\n     map: Vec<MapEntry<'ast>>,\n-    /// The node in which we are currently mapping (an item or a method).\n-    parent: NodeId,\n     parent_node: NodeId,\n }\n \n@@ -723,7 +736,7 @@ impl<'ast> NodeCollector<'ast> {\n     }\n \n     fn insert(&mut self, id: NodeId, node: Node<'ast>) {\n-        let entry = MapEntry::from_node(self.parent, self.parent_node, node);\n+        let entry = MapEntry::from_node(self.parent_node, node);\n         self.insert_entry(id, entry);\n     }\n \n@@ -737,10 +750,10 @@ impl<'ast> NodeCollector<'ast> {\n impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     fn visit_item(&mut self, i: &'ast Item) {\n         self.insert(i.id, NodeItem(i));\n-        let parent = self.parent;\n-        self.parent = i.id;\n+\n         let parent_node = self.parent_node;\n         self.parent_node = i.id;\n+\n         match i.node {\n             ItemImpl(_, _, _, _, _, ref impl_items) => {\n                 for ii in impl_items {\n@@ -790,55 +803,51 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             _ => {}\n         }\n         visit::walk_item(self, i);\n-        self.parent = parent;\n         self.parent_node = parent_node;\n     }\n \n     fn visit_trait_item(&mut self, ti: &'ast TraitItem) {\n-        let parent = self.parent;\n-        self.parent = ti.id;\n         let parent_node = self.parent_node;\n         self.parent_node = ti.id;\n         visit::walk_trait_item(self, ti);\n-        self.parent = parent;\n         self.parent_node = parent_node;\n     }\n \n     fn visit_impl_item(&mut self, ii: &'ast ImplItem) {\n-        let parent = self.parent;\n-        self.parent = ii.id;\n         let parent_node = self.parent_node;\n         self.parent_node = ii.id;\n+\n         visit::walk_impl_item(self, ii);\n-        self.parent = parent;\n+\n         self.parent_node = parent_node;\n     }\n \n     fn visit_pat(&mut self, pat: &'ast Pat) {\n-        let parent_node = self.parent_node;\n-        self.parent_node = pat.id;\n         self.insert(pat.id, match pat.node {\n             // Note: this is at least *potentially* a pattern...\n             PatIdent(..) => NodeLocal(pat),\n             _ => NodePat(pat)\n         });\n+\n+        let parent_node = self.parent_node;\n+        self.parent_node = pat.id;\n         visit::walk_pat(self, pat);\n         self.parent_node = parent_node;\n     }\n \n     fn visit_expr(&mut self, expr: &'ast Expr) {\n+        self.insert(expr.id, NodeExpr(expr));\n         let parent_node = self.parent_node;\n         self.parent_node = expr.id;\n-        self.insert(expr.id, NodeExpr(expr));\n         visit::walk_expr(self, expr);\n         self.parent_node = parent_node;\n     }\n \n     fn visit_stmt(&mut self, stmt: &'ast Stmt) {\n         let id = ast_util::stmt_id(stmt);\n+        self.insert(id, NodeStmt(stmt));\n         let parent_node = self.parent_node;\n         self.parent_node = id;\n-        self.insert(id, NodeStmt(stmt));\n         visit::walk_stmt(self, stmt);\n         self.parent_node = parent_node;\n     }\n@@ -866,18 +875,15 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     }\n \n     fn visit_block(&mut self, block: &'ast Block) {\n+        self.insert(block.id, NodeBlock(block));\n         let parent_node = self.parent_node;\n         self.parent_node = block.id;\n-        self.insert(block.id, NodeBlock(block));\n         visit::walk_block(self, block);\n         self.parent_node = parent_node;\n     }\n \n     fn visit_lifetime_ref(&mut self, lifetime: &'ast Lifetime) {\n-        let parent_node = self.parent_node;\n-        self.parent_node = lifetime.id;\n         self.insert(lifetime.id, NodeLifetime(lifetime));\n-        self.parent_node = parent_node;\n     }\n \n     fn visit_lifetime_def(&mut self, def: &'ast LifetimeDef) {\n@@ -901,7 +907,6 @@ pub fn map_crate<'ast, F: FoldOps>(forest: &'ast mut Forest, fold_ops: F) -> Map\n \n     let mut collector = NodeCollector {\n         map: vec![],\n-        parent: CRATE_NODE_ID,\n         parent_node: CRATE_NODE_ID,\n     };\n     collector.insert_entry(CRATE_NODE_ID, RootCrate);\n@@ -957,12 +962,11 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n         ii: ii\n     });\n \n+    let ii_parent_id = fld.new_id(DUMMY_NODE_ID);\n     let mut collector = NodeCollector {\n         map: mem::replace(&mut *map.map.borrow_mut(), vec![]),\n-        parent: fld.new_id(DUMMY_NODE_ID),\n-        parent_node: fld.new_id(DUMMY_NODE_ID),\n+        parent_node: ii_parent_id,\n     };\n-    let ii_parent_id = collector.parent;\n     collector.insert_entry(ii_parent_id, RootInlinedParent(ii_parent));\n     visit::walk_inlined_item(&mut collector, &ii_parent.ii);\n "}, {"sha": "9d66e99df3057fd82265ab4f1ca9694812be2b8d", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dcb5bfc51753aad5527888ec5a1c9381e8d1e1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=15dcb5bfc51753aad5527888ec5a1c9381e8d1e1", "patch": "@@ -172,7 +172,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     qualname: qualname,\n                     declaration: None,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n                 })\n             }\n             ast::ItemStatic(ref typ, mt, ref expr) => {\n@@ -191,7 +191,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n                     value: value,\n                     type_value: ty_to_string(&typ),\n                 })\n@@ -205,7 +205,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n                     value: self.span_utils.snippet(expr.span),\n                     type_value: ty_to_string(&typ),\n                 })\n@@ -223,7 +223,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n                     filename: filename,\n                 })\n             },\n@@ -237,14 +237,14 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     value: val,\n                     span: sub_span.unwrap(),\n                     qualname: enum_name,\n-                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0),\n                 })\n             },\n             ast::ItemImpl(_, _, _, ref trait_ref, ref typ, _) => {\n                 let mut type_data = None;\n                 let sub_span;\n \n-                let parent = self.tcx.map.get_enclosing_scope(item.id).unwrap();\n+                let parent = self.tcx.map.get_enclosing_scope(item.id).unwrap_or(0);\n \n                 match typ.node {\n                     // Common case impl for a struct or something basic.\n@@ -337,7 +337,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                 return Some(Data::VariableRefData(VariableRefData {\n                                     name: get_ident(ident.node).to_string(),\n                                     span: sub_span.unwrap(),\n-                                    scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap(),\n+                                    scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0),\n                                     ref_id: f.id,\n                                 }));\n                             }\n@@ -360,7 +360,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n                         Some(Data::TypeRefData(TypeRefData {\n                             span: sub_span.unwrap(),\n-                            scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap(),\n+                            scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap_or(0),\n                             ref_id: def_id,\n                         }))\n                     }"}]}