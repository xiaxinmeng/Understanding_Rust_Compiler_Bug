{"sha": "7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "node_id": "C_kwDOAAsO6NoAKDdmZjY5YjQ5ZGZjYzBmN2QzN2VlMTdlMzZmNjdjNTcxNjhjNDQwNzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-06T16:28:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-06T16:28:18Z"}, "message": "Auto merge of #107727 - Dylan-DPC:rollup-b1yexcl, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #107553 (Suggest std::ptr::null if literal 0 is given to a raw pointer function argument)\n - #107580 (Recover from lifetimes with default lifetimes in generic args)\n - #107669 (rustdoc: combine duplicate rules in ayu CSS)\n - #107685 (Suggest adding a return type for async functions)\n - #107687 (Adapt SROA MIR opt for aggregated MIR)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "aa9ceee94029b1d005c5d1b0c235e0be7ea51f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9ceee94029b1d005c5d1b0c235e0be7ea51f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "html_url": "https://github.com/rust-lang/rust/commit/7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044a28a4091f2e1a5883f7fa990223f8b200a2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/044a28a4091f2e1a5883f7fa990223f8b200a2cd", "html_url": "https://github.com/rust-lang/rust/commit/044a28a4091f2e1a5883f7fa990223f8b200a2cd"}, {"sha": "e385ca25be4e6893228bcc7b9c6020e98a0742ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e385ca25be4e6893228bcc7b9c6020e98a0742ad", "html_url": "https://github.com/rust-lang/rust/commit/e385ca25be4e6893228bcc7b9c6020e98a0742ad"}], "stats": {"total": 1285, "additions": 936, "deletions": 349}, "files": [{"sha": "581bb9a766e20640b50b5a279712f27fe4d2b35c", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -475,6 +475,9 @@ parse_unexpected_token_after_struct_name_found_other = expected `where`, `{\"{\"}`\n parse_unexpected_self_in_generic_parameters = unexpected keyword `Self` in generic parameters\n     .note = you cannot use `Self` as a generic parameter because it is reserved for associated items\n \n+parse_unexpected_default_value_for_lifetime_in_generic_parameters = unexpected default lifetime parameter\n+    .label = lifetime parameters cannot have default values\n+\n parse_multiple_where_clauses = cannot define duplicate `where` clauses on an item\n     .label = previous `where` clause starts here\n     .suggestion = consider joining the two `where` clauses into one"}, {"sha": "c4905a934cb4eb7beba493edd756951ea5983a8c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -60,6 +60,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n             || self.suggest_floating_point_literal(err, expr, expected)\n+            || self.suggest_null_ptr_for_literal_zero_given_to_ptr_arg(err, expr, expected)\n             || self.note_result_coercion(err, expr, expected, expr_ty);\n         if !suggested {\n             self.point_at_expr_source_of_inferred_type(err, expr, expr_ty, expected, expr.span);"}, {"sha": "e84b3de124c58070388d3b741de2630569a215ff", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -921,6 +921,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 kind: hir::ImplItemKind::Fn(ref sig, ..),\n                 ..\n             }) => Some((&sig.decl, ident, false)),\n+            Node::Expr(&hir::Expr {\n+                hir_id,\n+                kind: hir::ExprKind::Closure(..),\n+                ..\n+            }) if let Some(Node::Expr(&hir::Expr {\n+                hir_id,\n+                kind: hir::ExprKind::Call(..),\n+                ..\n+            })) = self.tcx.hir().find_parent(hir_id) &&\n+            let Some(Node::Item(&hir::Item {\n+                ident,\n+                kind: hir::ItemKind::Fn(ref sig, ..),\n+                ..\n+            })) = self.tcx.hir().find_parent(hir_id) => {\n+                Some((&sig.decl, ident, ident.name != sym::main))\n+            },\n             _ => None,\n         }\n     }"}, {"sha": "51e3e3ec73db9d994a84c512645bd2ffbc2abca2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::{\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n     self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty,\n     TypeVisitable,\n@@ -704,10 +705,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             hir::FnRetTy::Return(ty) => {\n+                let span = ty.span;\n+\n+                if let hir::TyKind::OpaqueDef(item_id, ..) = ty.kind\n+                && let hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::OpaqueTy(op_ty),\n+                    ..\n+                }) = self.tcx.hir().get(item_id.hir_id())\n+                && let hir::OpaqueTy {\n+                    bounds: [bound], ..\n+                } = op_ty\n+                && let hir::GenericBound::LangItemTrait(\n+                    hir::LangItem::Future, _, _, generic_args) = bound\n+                && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n+                && let hir::TypeBinding { kind, .. } = ty_binding\n+                && let hir::TypeBindingKind::Equality { term } = kind\n+                && let hir::Term::Ty(term_ty) = term {\n+                    // Check if async function's return type was omitted.\n+                    // Don't emit suggestions if the found type is `impl Future<...>`.\n+                    debug!(\"suggest_missing_return_type: found = {:?}\", found);\n+                    if found.is_suggestable(self.tcx, false) {\n+                        if term_ty.span.is_empty() {\n+                            err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: found.to_string() });\n+                            return true;\n+                        } else {\n+                            err.subdiagnostic(ExpectedReturnTypeLabel::Other { span, expected });\n+                        }\n+                    }\n+                }\n+\n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n-                let span = ty.span;\n                 let ty = self.astconv().ast_ty_to_ty(ty);\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n@@ -1244,6 +1273,49 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Suggest providing `std::ptr::null()` or `std::ptr::null_mut()` if they\n+    /// pass in a literal 0 to an raw pointer.\n+    #[instrument(skip(self, err))]\n+    pub(crate) fn suggest_null_ptr_for_literal_zero_given_to_ptr_arg(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        // Expected type needs to be a raw pointer.\n+        let ty::RawPtr(ty::TypeAndMut { mutbl, .. }) = expected_ty.kind() else {\n+            return false;\n+        };\n+\n+        // Provided expression needs to be a literal `0`.\n+        let ExprKind::Lit(Spanned {\n+            node: rustc_ast::LitKind::Int(0, _),\n+            span,\n+        }) = expr.kind else {\n+            return false;\n+        };\n+\n+        // We need to find a null pointer symbol to suggest\n+        let null_sym = match mutbl {\n+            hir::Mutability::Not => sym::ptr_null,\n+            hir::Mutability::Mut => sym::ptr_null_mut,\n+        };\n+        let Some(null_did) = self.tcx.get_diagnostic_item(null_sym) else {\n+            return false;\n+        };\n+        let null_path_str = with_no_trimmed_paths!(self.tcx.def_path_str(null_did));\n+\n+        // We have satisfied all requirements to provide a suggestion. Emit it.\n+        err.span_suggestion(\n+            span,\n+            format!(\"if you meant to create a null pointer, use `{null_path_str}()`\"),\n+            null_path_str + \"()\",\n+            Applicability::MachineApplicable,\n+        );\n+\n+        true\n+    }\n+\n     pub(crate) fn suggest_associated_const(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "8bf6493be4b0168ba6e78d8be9d0cbb7c038382c", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -790,7 +790,7 @@ impl<V, T> TryFrom<ProjectionElem<V, T>> for TrackElem {\n }\n \n /// Invokes `f` on all direct fields of `ty`.\n-fn iter_fields<'tcx>(\n+pub fn iter_fields<'tcx>(\n     ty: Ty<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut f: impl FnMut(Option<VariantIdx>, Field, Ty<'tcx>),\n@@ -824,7 +824,7 @@ fn iter_fields<'tcx>(\n }\n \n /// Returns all locals with projections that have their reference or address taken.\n-fn excluded_locals(body: &Body<'_>) -> IndexVec<Local, bool> {\n+pub fn excluded_locals(body: &Body<'_>) -> IndexVec<Local, bool> {\n     struct Collector {\n         result: IndexVec<Local, bool>,\n     }"}, {"sha": "26acd406ed8a9f81616240e55d6b533d680ed79c", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 253, "deletions": 178, "changes": 431, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -1,10 +1,11 @@\n use crate::MirPass;\n-use rustc_data_structures::fx::{FxIndexMap, IndexEntry};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_mir_dataflow::value_analysis::{excluded_locals, iter_fields};\n \n pub struct ScalarReplacementOfAggregates;\n \n@@ -13,27 +14,41 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n         sess.mir_opt_level() >= 3\n     }\n \n+    #[instrument(level = \"debug\", skip(self, tcx, body))]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let escaping = escaping_locals(&*body);\n-        debug!(?escaping);\n-        let replacements = compute_flattening(tcx, body, escaping);\n-        debug!(?replacements);\n-        replace_flattened_locals(tcx, body, replacements);\n+        debug!(def_id = ?body.source.def_id());\n+        let mut excluded = excluded_locals(body);\n+        loop {\n+            debug!(?excluded);\n+            let escaping = escaping_locals(&excluded, body);\n+            debug!(?escaping);\n+            let replacements = compute_flattening(tcx, body, escaping);\n+            debug!(?replacements);\n+            let all_dead_locals = replace_flattened_locals(tcx, body, replacements);\n+            if !all_dead_locals.is_empty() {\n+                for local in excluded.indices() {\n+                    excluded[local] |= all_dead_locals.contains(local);\n+                }\n+                excluded.raw.resize(body.local_decls.len(), false);\n+            } else {\n+                break;\n+            }\n+        }\n     }\n }\n \n /// Identify all locals that are not eligible for SROA.\n ///\n /// There are 3 cases:\n-/// - the aggegated local is used or passed to other code (function parameters and arguments);\n+/// - the aggregated local is used or passed to other code (function parameters and arguments);\n /// - the locals is a union or an enum;\n /// - the local's address is taken, and thus the relative addresses of the fields are observable to\n ///   client code.\n-fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n+fn escaping_locals(excluded: &IndexVec<Local, bool>, body: &Body<'_>) -> BitSet<Local> {\n     let mut set = BitSet::new_empty(body.local_decls.len());\n     set.insert_range(RETURN_PLACE..=Local::from_usize(body.arg_count));\n     for (local, decl) in body.local_decls().iter_enumerated() {\n-        if decl.ty.is_union() || decl.ty.is_enum() {\n+        if decl.ty.is_union() || decl.ty.is_enum() || excluded[local] {\n             set.insert(local);\n         }\n     }\n@@ -58,41 +73,33 @@ fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n             self.super_place(place, context, location);\n         }\n \n-        fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n-            if let Rvalue::AddressOf(.., place) | Rvalue::Ref(.., place) = rvalue {\n-                if !place.is_indirect() {\n-                    // Raw pointers may be used to access anything inside the enclosing place.\n-                    self.set.insert(place.local);\n-                    return;\n+        fn visit_assign(\n+            &mut self,\n+            lvalue: &Place<'tcx>,\n+            rvalue: &Rvalue<'tcx>,\n+            location: Location,\n+        ) {\n+            if lvalue.as_local().is_some() {\n+                match rvalue {\n+                    // Aggregate assignments are expanded in run_pass.\n+                    Rvalue::Aggregate(..) | Rvalue::Use(..) => {\n+                        self.visit_rvalue(rvalue, location);\n+                        return;\n+                    }\n+                    _ => {}\n                 }\n             }\n-            self.super_rvalue(rvalue, location)\n+            self.super_assign(lvalue, rvalue, location)\n         }\n \n         fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n-            if let StatementKind::StorageLive(..)\n-            | StatementKind::StorageDead(..)\n-            | StatementKind::Deinit(..) = statement.kind\n-            {\n+            match statement.kind {\n                 // Storage statements are expanded in run_pass.\n-                return;\n+                StatementKind::StorageLive(..)\n+                | StatementKind::StorageDead(..)\n+                | StatementKind::Deinit(..) => return,\n+                _ => self.super_statement(statement, location),\n             }\n-            self.super_statement(statement, location)\n-        }\n-\n-        fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n-            // Drop implicitly calls `drop_in_place`, which takes a `&mut`.\n-            // This implies that `Drop` implicitly takes the address of the place.\n-            if let TerminatorKind::Drop { place, .. }\n-            | TerminatorKind::DropAndReplace { place, .. } = terminator.kind\n-            {\n-                if !place.is_indirect() {\n-                    // Raw pointers may be used to access anything inside the enclosing place.\n-                    self.set.insert(place.local);\n-                    return;\n-                }\n-            }\n-            self.super_terminator(terminator, location);\n         }\n \n         // We ignore anything that happens in debuginfo, since we expand it using\n@@ -103,7 +110,30 @@ fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n \n #[derive(Default, Debug)]\n struct ReplacementMap<'tcx> {\n-    fields: FxIndexMap<PlaceRef<'tcx>, Local>,\n+    /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n+    /// and deinit statement and debuginfo.\n+    fragments: IndexVec<Local, Option<IndexVec<Field, Option<(Ty<'tcx>, Local)>>>>,\n+}\n+\n+impl<'tcx> ReplacementMap<'tcx> {\n+    fn replace_place(&self, tcx: TyCtxt<'tcx>, place: PlaceRef<'tcx>) -> Option<Place<'tcx>> {\n+        let &[PlaceElem::Field(f, _), ref rest @ ..] = place.projection else { return None; };\n+        let fields = self.fragments[place.local].as_ref()?;\n+        let (_, new_local) = fields[f]?;\n+        Some(Place { local: new_local, projection: tcx.intern_place_elems(&rest) })\n+    }\n+\n+    fn place_fragments(\n+        &self,\n+        place: Place<'tcx>,\n+    ) -> Option<impl Iterator<Item = (Field, Ty<'tcx>, Local)> + '_> {\n+        let local = place.as_local()?;\n+        let fields = self.fragments[local].as_ref()?;\n+        Some(fields.iter_enumerated().filter_map(|(field, &opt_ty_local)| {\n+            let (ty, local) = opt_ty_local?;\n+            Some((field, ty, local))\n+        }))\n+    }\n }\n \n /// Compute the replacement of flattened places into locals.\n@@ -115,83 +145,50 @@ fn compute_flattening<'tcx>(\n     body: &mut Body<'tcx>,\n     escaping: BitSet<Local>,\n ) -> ReplacementMap<'tcx> {\n-    let mut visitor = PreFlattenVisitor {\n-        tcx,\n-        escaping,\n-        local_decls: &mut body.local_decls,\n-        map: Default::default(),\n-    };\n-    for (block, bbdata) in body.basic_blocks.iter_enumerated() {\n-        visitor.visit_basic_block_data(block, bbdata);\n-    }\n-    return visitor.map;\n-\n-    struct PreFlattenVisitor<'tcx, 'll> {\n-        tcx: TyCtxt<'tcx>,\n-        local_decls: &'ll mut LocalDecls<'tcx>,\n-        escaping: BitSet<Local>,\n-        map: ReplacementMap<'tcx>,\n-    }\n-\n-    impl<'tcx, 'll> PreFlattenVisitor<'tcx, 'll> {\n-        fn create_place(&mut self, place: PlaceRef<'tcx>) {\n-            if self.escaping.contains(place.local) {\n-                return;\n-            }\n+    let mut fragments = IndexVec::from_elem(None, &body.local_decls);\n \n-            match self.map.fields.entry(place) {\n-                IndexEntry::Occupied(_) => {}\n-                IndexEntry::Vacant(v) => {\n-                    let ty = place.ty(&*self.local_decls, self.tcx).ty;\n-                    let local = self.local_decls.push(LocalDecl {\n-                        ty,\n-                        user_ty: None,\n-                        ..self.local_decls[place.local].clone()\n-                    });\n-                    v.insert(local);\n-                }\n-            }\n-        }\n-    }\n-\n-    impl<'tcx, 'll> Visitor<'tcx> for PreFlattenVisitor<'tcx, 'll> {\n-        fn visit_place(&mut self, place: &Place<'tcx>, _: PlaceContext, _: Location) {\n-            if let &[PlaceElem::Field(..), ..] = &place.projection[..] {\n-                let pr = PlaceRef { local: place.local, projection: &place.projection[..1] };\n-                self.create_place(pr)\n-            }\n+    for local in body.local_decls.indices() {\n+        if escaping.contains(local) {\n+            continue;\n         }\n+        let decl = body.local_decls[local].clone();\n+        let ty = decl.ty;\n+        iter_fields(ty, tcx, |variant, field, field_ty| {\n+            if variant.is_some() {\n+                // Downcasts are currently not supported.\n+                return;\n+            };\n+            let new_local =\n+                body.local_decls.push(LocalDecl { ty: field_ty, user_ty: None, ..decl.clone() });\n+            fragments.get_or_insert_with(local, IndexVec::new).insert(field, (field_ty, new_local));\n+        });\n     }\n+    ReplacementMap { fragments }\n }\n \n /// Perform the replacement computed by `compute_flattening`.\n fn replace_flattened_locals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     replacements: ReplacementMap<'tcx>,\n-) {\n+) -> BitSet<Local> {\n     let mut all_dead_locals = BitSet::new_empty(body.local_decls.len());\n-    for p in replacements.fields.keys() {\n-        all_dead_locals.insert(p.local);\n+    for (local, replacements) in replacements.fragments.iter_enumerated() {\n+        if replacements.is_some() {\n+            all_dead_locals.insert(local);\n+        }\n     }\n     debug!(?all_dead_locals);\n     if all_dead_locals.is_empty() {\n-        return;\n+        return all_dead_locals;\n     }\n \n-    let mut fragments = IndexVec::new();\n-    for (k, v) in &replacements.fields {\n-        fragments.ensure_contains_elem(k.local, || Vec::new());\n-        fragments[k.local].push((k.projection, *v));\n-    }\n-    debug!(?fragments);\n-\n     let mut visitor = ReplacementVisitor {\n         tcx,\n         local_decls: &body.local_decls,\n-        replacements,\n+        replacements: &replacements,\n         all_dead_locals,\n-        fragments,\n+        patch: MirPatch::new(body),\n     };\n     for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n         visitor.visit_basic_block_data(bb, data);\n@@ -205,47 +202,33 @@ fn replace_flattened_locals<'tcx>(\n     for var_debug_info in &mut body.var_debug_info {\n         visitor.visit_var_debug_info(var_debug_info);\n     }\n+    let ReplacementVisitor { patch, all_dead_locals, .. } = visitor;\n+    patch.apply(body);\n+    all_dead_locals\n }\n \n struct ReplacementVisitor<'tcx, 'll> {\n     tcx: TyCtxt<'tcx>,\n     /// This is only used to compute the type for `VarDebugInfoContents::Composite`.\n     local_decls: &'ll LocalDecls<'tcx>,\n     /// Work to do.\n-    replacements: ReplacementMap<'tcx>,\n+    replacements: &'ll ReplacementMap<'tcx>,\n     /// This is used to check that we are not leaving references to replaced locals behind.\n     all_dead_locals: BitSet<Local>,\n-    /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n-    /// and deinit statement and debuginfo.\n-    fragments: IndexVec<Local, Vec<(&'tcx [PlaceElem<'tcx>], Local)>>,\n+    patch: MirPatch<'tcx>,\n }\n \n-impl<'tcx, 'll> ReplacementVisitor<'tcx, 'll> {\n-    fn gather_debug_info_fragments(\n-        &self,\n-        place: PlaceRef<'tcx>,\n-    ) -> Vec<VarDebugInfoFragment<'tcx>> {\n+impl<'tcx> ReplacementVisitor<'tcx, '_> {\n+    fn gather_debug_info_fragments(&self, local: Local) -> Option<Vec<VarDebugInfoFragment<'tcx>>> {\n         let mut fragments = Vec::new();\n-        let parts = &self.fragments[place.local];\n-        for (proj, replacement_local) in parts {\n-            if proj.starts_with(place.projection) {\n-                fragments.push(VarDebugInfoFragment {\n-                    projection: proj[place.projection.len()..].to_vec(),\n-                    contents: Place::from(*replacement_local),\n-                });\n-            }\n-        }\n-        fragments\n-    }\n-\n-    fn replace_place(&self, place: PlaceRef<'tcx>) -> Option<Place<'tcx>> {\n-        if let &[PlaceElem::Field(..), ref rest @ ..] = place.projection {\n-            let pr = PlaceRef { local: place.local, projection: &place.projection[..1] };\n-            let local = self.replacements.fields.get(&pr)?;\n-            Some(Place { local: *local, projection: self.tcx.intern_place_elems(&rest) })\n-        } else {\n-            None\n+        let parts = self.replacements.place_fragments(local.into())?;\n+        for (field, ty, replacement_local) in parts {\n+            fragments.push(VarDebugInfoFragment {\n+                projection: vec![PlaceElem::Field(field, ty)],\n+                contents: Place::from(replacement_local),\n+            });\n         }\n+        Some(fragments)\n     }\n }\n \n@@ -254,94 +237,186 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n         self.tcx\n     }\n \n-    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n-        if let StatementKind::StorageLive(..)\n-        | StatementKind::StorageDead(..)\n-        | StatementKind::Deinit(..) = statement.kind\n-        {\n-            // Storage statements are expanded in run_pass.\n-            return;\n-        }\n-        self.super_statement(statement, location)\n-    }\n-\n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n-        if let Some(repl) = self.replace_place(place.as_ref()) {\n+        if let Some(repl) = self.replacements.replace_place(self.tcx, place.as_ref()) {\n             *place = repl\n         } else {\n             self.super_place(place, context, location)\n         }\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n+    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n+        match statement.kind {\n+            // Duplicate storage and deinit statements, as they pretty much apply to all fields.\n+            StatementKind::StorageLive(l) => {\n+                if let Some(final_locals) = self.replacements.place_fragments(l.into()) {\n+                    for (_, _, fl) in final_locals {\n+                        self.patch.add_statement(location, StatementKind::StorageLive(fl));\n+                    }\n+                    statement.make_nop();\n+                }\n+                return;\n+            }\n+            StatementKind::StorageDead(l) => {\n+                if let Some(final_locals) = self.replacements.place_fragments(l.into()) {\n+                    for (_, _, fl) in final_locals {\n+                        self.patch.add_statement(location, StatementKind::StorageDead(fl));\n+                    }\n+                    statement.make_nop();\n+                }\n+                return;\n+            }\n+            StatementKind::Deinit(box place) => {\n+                if let Some(final_locals) = self.replacements.place_fragments(place) {\n+                    for (_, _, fl) in final_locals {\n+                        self.patch\n+                            .add_statement(location, StatementKind::Deinit(Box::new(fl.into())));\n+                    }\n+                    statement.make_nop();\n+                    return;\n+                }\n+            }\n+\n+            // We have `a = Struct { 0: x, 1: y, .. }`.\n+            // We replace it by\n+            // ```\n+            // a_0 = x\n+            // a_1 = y\n+            // ...\n+            // ```\n+            StatementKind::Assign(box (place, Rvalue::Aggregate(_, ref mut operands))) => {\n+                if let Some(local) = place.as_local()\n+                    && let Some(final_locals) = &self.replacements.fragments[local]\n+                {\n+                    // This is ok as we delete the statement later.\n+                    let operands = std::mem::take(operands);\n+                    for (&opt_ty_local, mut operand) in final_locals.iter().zip(operands) {\n+                        if let Some((_, new_local)) = opt_ty_local {\n+                            // Replace mentions of SROA'd locals that appear in the operand.\n+                            self.visit_operand(&mut operand, location);\n+\n+                            let rvalue = Rvalue::Use(operand);\n+                            self.patch.add_statement(\n+                                location,\n+                                StatementKind::Assign(Box::new((new_local.into(), rvalue))),\n+                            );\n+                        }\n+                    }\n+                    statement.make_nop();\n+                    return;\n+                }\n+            }\n+\n+            // We have `a = some constant`\n+            // We add the projections.\n+            // ```\n+            // a_0 = a.0\n+            // a_1 = a.1\n+            // ...\n+            // ```\n+            // ConstProp will pick up the pieces and replace them by actual constants.\n+            StatementKind::Assign(box (place, Rvalue::Use(Operand::Constant(_)))) => {\n+                if let Some(final_locals) = self.replacements.place_fragments(place) {\n+                    for (field, ty, new_local) in final_locals {\n+                        let rplace = self.tcx.mk_place_field(place, field, ty);\n+                        let rvalue = Rvalue::Use(Operand::Move(rplace));\n+                        self.patch.add_statement(\n+                            location,\n+                            StatementKind::Assign(Box::new((new_local.into(), rvalue))),\n+                        );\n+                    }\n+                    // We still need `place.local` to exist, so don't make it nop.\n+                    return;\n+                }\n+            }\n+\n+            // We have `a = move? place`\n+            // We replace it by\n+            // ```\n+            // a_0 = move? place.0\n+            // a_1 = move? place.1\n+            // ...\n+            // ```\n+            StatementKind::Assign(box (lhs, Rvalue::Use(ref op))) => {\n+                let (rplace, copy) = match *op {\n+                    Operand::Copy(rplace) => (rplace, true),\n+                    Operand::Move(rplace) => (rplace, false),\n+                    Operand::Constant(_) => bug!(),\n+                };\n+                if let Some(final_locals) = self.replacements.place_fragments(lhs) {\n+                    for (field, ty, new_local) in final_locals {\n+                        let rplace = self.tcx.mk_place_field(rplace, field, ty);\n+                        debug!(?rplace);\n+                        let rplace = self\n+                            .replacements\n+                            .replace_place(self.tcx, rplace.as_ref())\n+                            .unwrap_or(rplace);\n+                        debug!(?rplace);\n+                        let rvalue = if copy {\n+                            Rvalue::Use(Operand::Copy(rplace))\n+                        } else {\n+                            Rvalue::Use(Operand::Move(rplace))\n+                        };\n+                        self.patch.add_statement(\n+                            location,\n+                            StatementKind::Assign(Box::new((new_local.into(), rvalue))),\n+                        );\n+                    }\n+                    statement.make_nop();\n+                    return;\n+                }\n+            }\n+\n+            _ => {}\n+        }\n+        self.super_statement(statement, location)\n+    }\n+\n+    #[instrument(level = \"trace\", skip(self))]\n     fn visit_var_debug_info(&mut self, var_debug_info: &mut VarDebugInfo<'tcx>) {\n         match &mut var_debug_info.value {\n             VarDebugInfoContents::Place(ref mut place) => {\n-                if let Some(repl) = self.replace_place(place.as_ref()) {\n+                if let Some(repl) = self.replacements.replace_place(self.tcx, place.as_ref()) {\n                     *place = repl;\n-                } else if self.all_dead_locals.contains(place.local) {\n+                } else if let Some(local) = place.as_local()\n+                    && let Some(fragments) = self.gather_debug_info_fragments(local)\n+                {\n                     let ty = place.ty(self.local_decls, self.tcx).ty;\n-                    let fragments = self.gather_debug_info_fragments(place.as_ref());\n                     var_debug_info.value = VarDebugInfoContents::Composite { ty, fragments };\n                 }\n             }\n             VarDebugInfoContents::Composite { ty: _, ref mut fragments } => {\n                 let mut new_fragments = Vec::new();\n+                debug!(?fragments);\n                 fragments\n                     .drain_filter(|fragment| {\n-                        if let Some(repl) = self.replace_place(fragment.contents.as_ref()) {\n+                        if let Some(repl) =\n+                            self.replacements.replace_place(self.tcx, fragment.contents.as_ref())\n+                        {\n                             fragment.contents = repl;\n-                            true\n-                        } else if self.all_dead_locals.contains(fragment.contents.local) {\n-                            let frg = self.gather_debug_info_fragments(fragment.contents.as_ref());\n+                            false\n+                        } else if let Some(local) = fragment.contents.as_local()\n+                            && let Some(frg) = self.gather_debug_info_fragments(local)\n+                        {\n                             new_fragments.extend(frg.into_iter().map(|mut f| {\n                                 f.projection.splice(0..0, fragment.projection.iter().copied());\n                                 f\n                             }));\n-                            false\n-                        } else {\n                             true\n+                        } else {\n+                            false\n                         }\n                     })\n                     .for_each(drop);\n+                debug!(?fragments);\n+                debug!(?new_fragments);\n                 fragments.extend(new_fragments);\n             }\n             VarDebugInfoContents::Const(_) => {}\n         }\n     }\n \n-    fn visit_basic_block_data(&mut self, bb: BasicBlock, bbdata: &mut BasicBlockData<'tcx>) {\n-        self.super_basic_block_data(bb, bbdata);\n-\n-        #[derive(Debug)]\n-        enum Stmt {\n-            StorageLive,\n-            StorageDead,\n-            Deinit,\n-        }\n-\n-        bbdata.expand_statements(|stmt| {\n-            let source_info = stmt.source_info;\n-            let (stmt, origin_local) = match &stmt.kind {\n-                StatementKind::StorageLive(l) => (Stmt::StorageLive, *l),\n-                StatementKind::StorageDead(l) => (Stmt::StorageDead, *l),\n-                StatementKind::Deinit(p) if let Some(l) = p.as_local() => (Stmt::Deinit, l),\n-                _ => return None,\n-            };\n-            if !self.all_dead_locals.contains(origin_local) {\n-                return None;\n-            }\n-            let final_locals = self.fragments.get(origin_local)?;\n-            Some(final_locals.iter().map(move |&(_, l)| {\n-                let kind = match stmt {\n-                    Stmt::StorageLive => StatementKind::StorageLive(l),\n-                    Stmt::StorageDead => StatementKind::StorageDead(l),\n-                    Stmt::Deinit => StatementKind::Deinit(Box::new(l.into())),\n-                };\n-                Statement { source_info, kind }\n-            }))\n-        });\n-    }\n-\n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n         assert!(!self.all_dead_locals.contains(*local));\n     }"}, {"sha": "0c11e0026900e4c2f5b5c6abb931ca3a460f8cc4", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -1601,6 +1601,14 @@ pub(crate) struct UnexpectedSelfInGenericParameters {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_unexpected_default_value_for_lifetime_in_generic_parameters)]\n+pub(crate) struct UnexpectedDefaultValueForLifetimeInGenericParameters {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_multiple_where_clauses)]\n pub(crate) struct MultipleWhereClauses {"}, {"sha": "23f49ec55a18ddda7a413b3de172b7df7b05cc01", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -1,5 +1,6 @@\n use crate::errors::{\n-    MultipleWhereClauses, UnexpectedSelfInGenericParameters, WhereClauseBeforeTupleStructBody,\n+    MultipleWhereClauses, UnexpectedDefaultValueForLifetimeInGenericParameters,\n+    UnexpectedSelfInGenericParameters, WhereClauseBeforeTupleStructBody,\n     WhereClauseBeforeTupleStructBodySugg,\n };\n \n@@ -145,6 +146,20 @@ impl<'a> Parser<'a> {\n                         } else {\n                             (None, Vec::new())\n                         };\n+\n+                        if this.check_noexpect(&token::Eq)\n+                            && this.look_ahead(1, |t| t.is_lifetime())\n+                        {\n+                            let lo = this.token.span;\n+                            // Parse `= 'lifetime`.\n+                            this.bump(); // `=`\n+                            this.bump(); // `'lifetime`\n+                            let span = lo.to(this.prev_token.span);\n+                            this.sess.emit_err(\n+                                UnexpectedDefaultValueForLifetimeInGenericParameters { span },\n+                            );\n+                        }\n+\n                         Some(ast::GenericParam {\n                             ident: lifetime.ident,\n                             id: lifetime.id,"}, {"sha": "b5a2cf7f28bf310114eac2ff44f8b6ebd23ac4e4", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -105,10 +105,9 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--scrape-example-code-wrapper-background-end: rgba(15, 20, 25, 0);\n }\n \n-h1, h2, h3, h4 {\n-\tcolor: white;\n-}\n-h1 a {\n+h1, h2, h3, h4,\n+h1 a, .sidebar h2 a, .sidebar h3 a,\n+#source-sidebar > .title {\n \tcolor: #fff;\n }\n h4 {\n@@ -118,24 +117,22 @@ h4 {\n .docblock code {\n \tcolor: #ffb454;\n }\n-.code-header {\n-\tcolor: #e6e1cf;\n-}\n-.docblock pre > code, pre > code {\n-\tcolor: #e6e1cf;\n-}\n-.item-info code {\n-\tcolor: #e6e1cf;\n-}\n .docblock a > code {\n \tcolor: #39AFD7 !important;\n }\n-pre, .rustdoc.source .example-wrap {\n+.code-header,\n+.docblock pre > code,\n+pre, pre > code,\n+.item-info code,\n+.rustdoc.source .example-wrap {\n \tcolor: #e6e1cf;\n }\n \n .sidebar .current,\n-.sidebar a:hover {\n+.sidebar a:hover,\n+#source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n+#source-sidebar div.files > a:focus, details.dir-entry summary:focus,\n+#source-sidebar div.files > a.selected {\n \tcolor: #ffb44c;\n }\n \n@@ -149,27 +146,19 @@ pre, .rustdoc.source .example-wrap {\n \tborder-right: 1px solid #ffb44c;\n }\n \n-.search-results a:hover {\n-\tcolor: #fff !important;\n-\tbackground-color: #3c3c3c;\n-}\n-\n+.search-results a:hover,\n .search-results a:focus {\n \tcolor: #fff !important;\n \tbackground-color: #3c3c3c;\n }\n+\n .search-results a {\n \tcolor: #0096cf;\n }\n .search-results a div.desc {\n \tcolor: #c5c5c5;\n }\n \n-.sidebar h2 a,\n-.sidebar h3 a {\n-\tcolor: white;\n-}\n-\n .result-name .primitive > i, .result-name .keyword > i {\n \tcolor: #788797;\n }\n@@ -189,12 +178,3 @@ pre, .rustdoc.source .example-wrap {\n #settings-menu > a img {\n \tfilter: invert(100);\n }\n-\n-#source-sidebar > .title {\n-\tcolor: #fff;\n-}\n-#source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n-#source-sidebar div.files > a:focus, details.dir-entry summary:focus,\n-#source-sidebar div.files > a.selected {\n-\tcolor: #ffb44c;\n-}"}, {"sha": "f1f53a481655ca6e3ec7685527f2c440acec5ff8", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -8,8 +8,8 @@\n       let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:16\n       let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:19: +4:20\n       let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-      let mut _15: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+      let mut _12: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+      let mut _13: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n       scope 1 {\n -         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n +         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n@@ -29,18 +29,21 @@\n                       scope 5 {\n -                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n +                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n-                          let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _14: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _15: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _16: u32;    // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n                           scope 6 {\n-                              debug f => _10; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                              let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                              debug f => (bool, bool, u32){ .0 => _14, .1 => _15, .2 => _16, }; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                              let _10: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                               scope 7 {\n-                                  debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-                                  let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  debug o => _10; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                                  let _17: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  let _18: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                   scope 8 {\n-                                      debug p => _12; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                      let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+                                      debug p => Point{ .0 => _17, .1 => _18, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                      let _11: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       scope 9 {\n--                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+-                                         debug a => _11; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n +                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       }\n                                   }\n@@ -66,24 +69,23 @@\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          _10 = (const true, const false, const 123_u32); // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-          _11 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-          _12 = Point { x: const 32_u32, y: const 32_u32 }; // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n-          StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          StorageLive(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _15 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n-          StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n-          StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n-          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageLive(_14);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          StorageLive(_15);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          StorageLive(_16);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          _14 = const true;                // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _15 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _16 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          StorageLive(_10);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+          _10 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          _17 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          _18 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          StorageLive(_11);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+          _11 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n+          StorageDead(_11);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_10);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_14);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_15);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/const_debuginfo.rs:+14:2: +14:2"}, {"sha": "d088c4f662b7b21ab64582b7507623fb7a124bd1", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -3,25 +3,27 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          debug x => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          let _1: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+              debug y => (i32, i32){ .0 => _3, .1 => _2, }; // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n--         _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-+         _1 = const (42_i32, 43_i32);     // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n+          StorageLive(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          _3 = const 42_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          _4 = const 43_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          _4 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+-         _2 = _4;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          StorageDead(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "134f0c080bf8118d8a3c26ec452720bd09c7c72e", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -9,9 +9,10 @@\n           let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n           scope 2 {\n               debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+                  debug y => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               }\n           }\n       }\n@@ -23,8 +24,11 @@\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n           ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+          _3 = (_1.0: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          _4 = (_1.1: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2"}, {"sha": "4010dd6c6d0d8518a55625090c90d496455f41b9", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -4,16 +4,17 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _2: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _5: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => (i32, i32){ .0 => _5, .1 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _4: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n                       debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n@@ -30,21 +31,17 @@\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n--         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-+         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageLive(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          _5 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          _6 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _2 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _6 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _3 = _6;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "691aa01a564080d31e64c2000fbbdff0394a91b4", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -9,15 +9,15 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n           scope 2 {\n               debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n               let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+                  debug z => _9;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               }\n           }\n       }\n@@ -50,13 +50,7 @@\n +         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n-          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "691aa01a564080d31e64c2000fbbdff0394a91b4", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -9,15 +9,15 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n           scope 2 {\n               debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n               let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+                  debug z => _9;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               }\n           }\n       }\n@@ -50,13 +50,7 @@\n +         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n-          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "81cfd22db6c5078732613b9243f7e4dfacc22d2a", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -3,12 +3,12 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n                 debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n@@ -18,8 +18,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "81cfd22db6c5078732613b9243f7e4dfacc22d2a", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -3,12 +3,12 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n                 debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n@@ -18,8 +18,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "98cd020dade4ba0665d1836e53e3de6ef1d41030", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -10,6 +10,8 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -45,10 +47,20 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+-         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+-         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "98cd020dade4ba0665d1836e53e3de6ef1d41030", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -10,6 +10,8 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -45,10 +47,20 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+-         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+-         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "002e914e8fa165b75ec467e5ddc10d15522fb26e", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -3,12 +3,12 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n                 debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n@@ -18,8 +18,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "002e914e8fa165b75ec467e5ddc10d15522fb26e", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -3,12 +3,12 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n                 debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n@@ -18,8 +18,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "e338f15b4853144be1b1019369f36759a6572516", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -4,25 +4,22 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simple_option_map_e2e.rs:+0:14: +0:15\n     let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map_e2e.rs:+0:33: +0:44\n     let mut _2: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n-    let mut _7: i32;                     // in scope 0 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n     scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]>) { // at $DIR/simple_option_map_e2e.rs:14:5: 14:22\n         debug slf => _1;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:2:17: 2:20\n         debug f => _2;                   // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n         let mut _3: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n         let _4: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         let mut _5: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        let mut _6: (i32,);              // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         scope 2 {\n             debug x => _4;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n             scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-                debug n => _7;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n+                debug n => _4;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n             }\n         }\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n-        StorageLive(_4);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:5: +1:22\n         _3 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n         switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n     }\n@@ -39,20 +36,13 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     bb3: {\n         _4 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        StorageLive(_6);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _6 = (move _4,);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        StorageLive(_7);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _7 = move (_6.0: i32);           // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _5 = Add(_7, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n-        StorageDead(_7);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        StorageDead(_6);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:28: 7:29\n+        _5 = Add(_4, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n         _0 = Option::<i32>::Some(move _5); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n         StorageDead(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n         goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n     }\n \n     bb4: {\n-        StorageDead(_4);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:5: +1:22\n         StorageDead(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:21: +1:22\n         return;                          // scope 0 at $DIR/simple_option_map_e2e.rs:+2:2: +2:2\n     }"}, {"sha": "976f6d44b7521610e382b76586dfb740cb5ca0fa", "filename": "tests/mir-opt/sroa.copies.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,91 @@\n+- // MIR for `copies` before ScalarReplacementOfAggregates\n++ // MIR for `copies` after ScalarReplacementOfAggregates\n+  \n+  fn copies(_1: Foo) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:11: +0:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n+      let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _11: u8;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _12: ();                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _13: &str;                       // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _14: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _11, .1 => _12, .2 => _13, .3 => _14, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n+          let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n+          scope 2 {\n+              debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n+              let _4: &str;                // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug u => _4;           // in scope 3 at $DIR/sroa.rs:+3:9: +3:10\n+                  let _5: Foo;             // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _7: u8;              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _8: ();              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _9: &str;            // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _10: std::option::Option<isize>; // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n+                  scope 4 {\n+-                     debug z => _5;       // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n++                     debug z => Foo{ .0 => _7, .1 => _8, .2 => _9, .3 => _10, }; // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n+                      let _6: ();          // in scope 4 at $DIR/sroa.rs:+5:9: +5:10\n+                      scope 5 {\n+                          debug a => _6;   // in scope 5 at $DIR/sroa.rs:+5:9: +5:10\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_12);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_13);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_14);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         _11 = (_1.0: u8);                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         _12 = (_1.1: ());                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         _13 = (_1.2: &str);              // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         _14 = (_1.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n+-         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n++         _3 = _11;                        // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n+          StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n+-         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n+-         StorageLive(_5);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n+-         _5 = _2;                         // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _4 = _13;                        // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n++         StorageLive(_7);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         StorageLive(_8);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         StorageLive(_9);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         StorageLive(_10);                // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         nop;                             // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         _7 = _11;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _8 = _12;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _9 = _13;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _10 = _14;                       // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         nop;                             // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n+          StorageLive(_6);                 // scope 4 at $DIR/sroa.rs:+5:9: +5:10\n+-         _6 = (_5.1: ());                 // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n++         _6 = _8;                         // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +6:2\n+          StorageDead(_6);                 // scope 4 at $DIR/sroa.rs:+6:1: +6:2\n+-         StorageDead(_5);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_7);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_8);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_9);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_10);                // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         nop;                             // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+6:1: +6:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_12);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_13);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_14);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         nop;                             // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "ea7f5007224519e16759e5054db50242eb790155", "filename": "tests/mir-opt/sroa.escaping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+2:34: +2:37\n           _5 = g() -> bb1;                 // scope 0 at $DIR/sroa.rs:+2:34: +2:37\n                                            // mir::Constant\n-                                           // + span: $DIR/sroa.rs:78:34: 78:35\n+                                           // + span: $DIR/sroa.rs:73:34: 73:35\n                                            // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n       }\n   \n@@ -28,7 +28,7 @@\n           _2 = &raw const (*_3);           // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n           _1 = f(move _2) -> bb2;          // scope 0 at $DIR/sroa.rs:+2:5: +2:42\n                                            // mir::Constant\n-                                           // + span: $DIR/sroa.rs:78:5: 78:6\n+                                           // + span: $DIR/sroa.rs:73:5: 73:6\n                                            // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "69631fc0213f8f5d31ab407509bdc3beb14adf2d", "filename": "tests/mir-opt/sroa.flat.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -10,6 +10,10 @@\n       let mut _5: Foo;                     // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n       let mut _6: ();                      // in scope 0 at $DIR/sroa.rs:+1:45: +1:47\n       let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:60: +1:68\n++     let mut _8: u8;                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _9: ();                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _10: &str;                   // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/sroa.rs:+1:15: +1:16\n           debug b => _2;                   // in scope 1 at $DIR/sroa.rs:+1:18: +1:19\n@@ -26,26 +30,45 @@\n       }\n   \n       bb0: {\n-          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+-         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_9);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_10);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n           StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n           _6 = ();                         // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n           StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n           _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+-         _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _8 = const 5_u8;                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _9 = move _6;                    // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _10 = const \"a\";                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n                                            // mir::Constant\n-                                           // + span: $DIR/sroa.rs:57:52: 57:55\n+                                           // + span: $DIR/sroa.rs:53:52: 53:55\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n++         _11 = move _7;                   // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n           StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n           StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n           StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-          _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n+-         _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n++         _1 = _8;                         // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n           StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-          _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n+-         _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n++         _2 = _9;                         // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-          _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n+-         _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n++         _3 = _10;                        // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n           StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-          _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n+-         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n+-         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         _4 = _11;                        // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n++         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_9);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_10);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n           _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +6:2\n           StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2"}, {"sha": "f0d62220dd664aaf3a8ddd89bd991185ecd98497", "filename": "tests/mir-opt/sroa.ref_copies.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `ref_copies` before ScalarReplacementOfAggregates\n++ // MIR for `ref_copies` after ScalarReplacementOfAggregates\n+  \n+  fn ref_copies(_1: &Foo) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:15: +0:16\n+      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:24: +0:24\n+      let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _5: u8;                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _6: ();                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _7: &str;                        // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _8: std::option::Option<isize>;  // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _5, .1 => _6, .2 => _7, .3 => _8, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n+          let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n+          scope 2 {\n+              debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n+              let _4: &str;                // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug u => _4;           // in scope 3 at $DIR/sroa.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n+-         _2 = (*_1);                      // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         _5 = ((*_1).0: u8);              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         _6 = ((*_1).1: ());              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         _7 = ((*_1).2: &str);            // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         _8 = ((*_1).3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n+          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n+-         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n++         _3 = _5;                         // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n+          StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n+-         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n++         _4 = _7;                         // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n+          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:24: +4:2\n+          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+4:1: +4:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n++         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n++         StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n++         StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n++         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n++         nop;                             // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "471aac9f9d82d2b5103b14cacff71ba9f10ecfbe", "filename": "tests/mir-opt/sroa.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -12,17 +12,14 @@ impl Drop for Tag {\n     fn drop(&mut self) {}\n }\n \n-// EMIT_MIR sroa.dropping.ScalarReplacementOfAggregates.diff\n pub fn dropping() {\n     S(Tag(0), Tag(1), Tag(2)).1;\n }\n \n-// EMIT_MIR sroa.enums.ScalarReplacementOfAggregates.diff\n pub fn enums(a: usize) -> usize {\n     if let Some(a) = Some(a) { a } else { 0 }\n }\n \n-// EMIT_MIR sroa.structs.ScalarReplacementOfAggregates.diff\n pub fn structs(a: f32) -> f32 {\n     struct U {\n         _foo: usize,\n@@ -32,7 +29,6 @@ pub fn structs(a: f32) -> f32 {\n     U { _foo: 0, a }.a\n }\n \n-// EMIT_MIR sroa.unions.ScalarReplacementOfAggregates.diff\n pub fn unions(a: f32) -> u32 {\n     union Repr {\n         f: f32,\n@@ -41,6 +37,7 @@ pub fn unions(a: f32) -> u32 {\n     unsafe { Repr { f: a }.u }\n }\n \n+#[derive(Copy, Clone)]\n struct Foo {\n     a: u8,\n     b: (),\n@@ -52,7 +49,6 @@ fn g() -> u32 {\n     3\n }\n \n-// EMIT_MIR sroa.flat.ScalarReplacementOfAggregates.diff\n pub fn flat() {\n     let Foo { a, b, c, d } = Foo { a: 5, b: (), c: \"a\", d: Some(-4) };\n     let _ = a;\n@@ -72,17 +68,41 @@ fn f(a: *const u32) {\n     println!(\"{}\", unsafe { *a.add(2) });\n }\n \n-// EMIT_MIR sroa.escaping.ScalarReplacementOfAggregates.diff\n pub fn escaping() {\n     // Verify this struct is not flattened.\n     f(&Escaping { a: 1, b: 2, c: g() }.a);\n }\n \n+fn copies(x: Foo) {\n+    let y = x;\n+    let t = y.a;\n+    let u = y.c;\n+    let z = y;\n+    let a = z.b;\n+}\n+\n+fn ref_copies(x: &Foo) {\n+    let y = *x;\n+    let t = y.a;\n+    let u = y.c;\n+}\n+\n fn main() {\n     dropping();\n     enums(5);\n     structs(5.);\n     unions(5.);\n     flat();\n     escaping();\n+    copies(Foo { a: 5, b: (), c: \"a\", d: Some(-4) });\n+    ref_copies(&Foo { a: 5, b: (), c: \"a\", d: Some(-4) });\n }\n+\n+// EMIT_MIR sroa.dropping.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR sroa.enums.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR sroa.structs.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR sroa.unions.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR sroa.flat.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR sroa.escaping.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR sroa.copies.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR sroa.ref_copies.ScalarReplacementOfAggregates.diff"}, {"sha": "2c63d8b266dde9fffcfe0c1fb57c5fe98fcdb867", "filename": "tests/mir-opt/sroa.structs.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -6,15 +6,27 @@\n       let mut _0: f32;                     // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:30\n       let mut _2: structs::U;              // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n       let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+6:18: +6:19\n++     let mut _4: usize;                   // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++     let mut _5: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+-         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n           _3 = _1;                         // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-          _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+-         _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         _4 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         _5 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:20: +6:21\n-          _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n+-         _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n+-         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         _0 = _5;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n++         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         nop;                             // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n           return;                          // scope 0 at $DIR/sroa.rs:+7:2: +7:2\n       }\n   }"}, {"sha": "f129035d040f1ff5678af9f84b585bdc54965b76", "filename": "tests/ui/lifetimes/issue-107492-default-value-for-lifetime.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Flifetimes%2Fissue-107492-default-value-for-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Flifetimes%2Fissue-107492-default-value-for-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-107492-default-value-for-lifetime.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,6 @@\n+pub struct DefaultLifetime<'a, 'b = 'static> {\n+                                   //~^ ERROR unexpected default lifetime parameter\n+    _marker: std::marker::PhantomData<&'a &'b ()>,\n+}\n+\n+fn main(){}"}, {"sha": "c235c31809fb763f740a5cec5cda1acaf659c3f4", "filename": "tests/ui/lifetimes/issue-107492-default-value-for-lifetime.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Flifetimes%2Fissue-107492-default-value-for-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Flifetimes%2Fissue-107492-default-value-for-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-107492-default-value-for-lifetime.stderr?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected default lifetime parameter\n+  --> $DIR/issue-107492-default-value-for-lifetime.rs:1:35\n+   |\n+LL | pub struct DefaultLifetime<'a, 'b = 'static> {\n+   |                                   ^^^^^^^^^ lifetime parameters cannot have default values\n+\n+error: aborting due to previous error\n+"}, {"sha": "40f900c7d30cfb55c1c9a9163483467d979d0411", "filename": "tests/ui/suggest-null-ptr.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Fsuggest-null-ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Fsuggest-null-ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.fixed?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+// Suggest providing a std::ptr::null{,_mut}() to a function that takes in a raw\n+// pointer if a literal 0 was provided by the user.\n+\n+extern \"C\" {\n+    fn foo(ptr: *const u8);\n+\n+    fn foo_mut(ptr: *mut u8);\n+\n+    fn usize(ptr: *const usize);\n+\n+    fn usize_mut(ptr: *mut usize);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(std::ptr::null());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        foo_mut(std::ptr::null_mut());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+        usize(std::ptr::null());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        usize_mut(std::ptr::null_mut());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+    }\n+}"}, {"sha": "19b595bf769ecbd8d775dd2988bf2486fce447ab", "filename": "tests/ui/suggest-null-ptr.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Fsuggest-null-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Fsuggest-null-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+// Suggest providing a std::ptr::null{,_mut}() to a function that takes in a raw\n+// pointer if a literal 0 was provided by the user.\n+\n+extern \"C\" {\n+    fn foo(ptr: *const u8);\n+\n+    fn foo_mut(ptr: *mut u8);\n+\n+    fn usize(ptr: *const usize);\n+\n+    fn usize_mut(ptr: *mut usize);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        foo_mut(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+        usize(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        usize_mut(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+    }\n+}"}, {"sha": "66a79d0749ee8f80a788f2562355fcd60ab62bbb", "filename": "tests/ui/suggest-null-ptr.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Fsuggest-null-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Fsuggest-null-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.stderr?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,83 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:18:13\n+   |\n+LL |         foo(0);\n+   |         --- ^ expected `*const u8`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*const u8`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:7:8\n+   |\n+LL |     fn foo(ptr: *const u8);\n+   |        ^^^\n+help: if you meant to create a null pointer, use `std::ptr::null()`\n+   |\n+LL |         foo(std::ptr::null());\n+   |             ~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:21:17\n+   |\n+LL |         foo_mut(0);\n+   |         ------- ^ expected `*mut u8`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut u8`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:9:8\n+   |\n+LL |     fn foo_mut(ptr: *mut u8);\n+   |        ^^^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null_mut()`\n+   |\n+LL |         foo_mut(std::ptr::null_mut());\n+   |                 ~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:24:15\n+   |\n+LL |         usize(0);\n+   |         ----- ^ expected `*const usize`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*const usize`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:11:8\n+   |\n+LL |     fn usize(ptr: *const usize);\n+   |        ^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null()`\n+   |\n+LL |         usize(std::ptr::null());\n+   |               ~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:27:19\n+   |\n+LL |         usize_mut(0);\n+   |         --------- ^ expected `*mut usize`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut usize`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:13:8\n+   |\n+LL |     fn usize_mut(ptr: *mut usize);\n+   |        ^^^^^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null_mut()`\n+   |\n+LL |         usize_mut(std::ptr::null_mut());\n+   |                   ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8ccb15ca48a4fc8777a50d9c0d66e63c0de626b7", "filename": "tests/ui/typeck/issue-90027-async-fn-return-suggestion.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.rs?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+async fn hello() { //~ HELP try adding a return type\n+    0\n+    //~^ ERROR [E0308]\n+}\n+\n+async fn world() -> () {\n+    0\n+    //~^ ERROR [E0308]\n+}\n+\n+async fn suggest_await_in_async_fn_return() {\n+    hello()\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider `await`ing on the `Future`\n+    //~| HELP consider using a semicolon here\n+    //~| SUGGESTION .await\n+}\n+\n+fn main() {}"}, {"sha": "6a1a9f45bc62b1846dffc5b74e0eaf7a19e7d0cb", "filename": "tests/ui/typeck/issue-90027-async-fn-return-suggestion.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ff69b49dfcc0f7d37ee17e36f67c57168c44073/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr?ref=7ff69b49dfcc0f7d37ee17e36f67c57168c44073", "patch": "@@ -0,0 +1,36 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:4:5\n+   |\n+LL | async fn hello() {\n+   |                  - help: try adding a return type: `-> i32`\n+LL |     0\n+   |     ^ expected `()`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:9:5\n+   |\n+LL | async fn world() -> () {\n+   |                     -- expected `()` because of return type\n+LL |     0\n+   |     ^ expected `()`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:14:5\n+   |\n+LL |     hello()\n+   |     ^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     hello().await\n+   |            ++++++\n+help: consider using a semicolon here\n+   |\n+LL |     hello();\n+   |            +\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}