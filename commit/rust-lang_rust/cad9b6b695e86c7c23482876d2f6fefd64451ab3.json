{"sha": "cad9b6b695e86c7c23482876d2f6fefd64451ab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZDliNmI2OTVlODZjN2MyMzQ4Mjg3NmQyZjZmZWZkNjQ0NTFhYjM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-30T06:03:41Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-30T06:03:41Z"}, "message": "Apply review feedback", "tree": {"sha": "3e2463b8332138a538ee0f6e7b30d386f9ddb220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e2463b8332138a538ee0f6e7b30d386f9ddb220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cad9b6b695e86c7c23482876d2f6fefd64451ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cad9b6b695e86c7c23482876d2f6fefd64451ab3", "html_url": "https://github.com/rust-lang/rust/commit/cad9b6b695e86c7c23482876d2f6fefd64451ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cad9b6b695e86c7c23482876d2f6fefd64451ab3/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d260bfa4a31df541ff1d4c24965730660b4114", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d260bfa4a31df541ff1d4c24965730660b4114", "html_url": "https://github.com/rust-lang/rust/commit/26d260bfa4a31df541ff1d4c24965730660b4114"}], "stats": {"total": 172, "additions": 94, "deletions": 78}, "files": [{"sha": "085935b94df5024100d84c88e794a97c40bf5b53", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cad9b6b695e86c7c23482876d2f6fefd64451ab3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad9b6b695e86c7c23482876d2f6fefd64451ab3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=cad9b6b695e86c7c23482876d2f6fefd64451ab3", "patch": "@@ -549,7 +549,11 @@ pub(crate) unsafe fn optimize(\n                     continue;\n                 }\n                 if pass_name == \"insert-gcov-profiling\" || pass_name == \"instrprof\" {\n-                    // Instrumentation should be inserted before optimization.\n+                    // Instrumentation must be inserted before optimization,\n+                    // otherwise LLVM may optimize some functions away which\n+                    // breaks llvm-cov.\n+                    //\n+                    // This mirrors what Clang does in lib/CodeGen/BackendUtil.cpp.\n                     llvm::LLVMRustAddPass(mpm, find_pass(pass_name).unwrap());\n                     continue;\n                 }"}, {"sha": "cc98956e3073af92156ac696e618b3697e84646c", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 83, "deletions": 77, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/cad9b6b695e86c7c23482876d2f6fefd64451ab3/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/cad9b6b695e86c7c23482876d2f6fefd64451ab3/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=cad9b6b695e86c7c23482876d2f6fefd64451ab3", "patch": "@@ -31,103 +31,109 @@\n    29|      1|    use_this_lib_crate();\n    30|      1|}\n    31|       |\n-   32|       |#[inline(always)]\n-   33|      2|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n-   34|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n-   35|      2|}\n+   32|       |\n+   33|       |\n+   34|       |\n+   35|       |\n+   36|       |\n+   37|       |\n+   38|       |#[inline(always)]\n+   39|      2|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+   40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+   41|      2|}\n   ------------------\n   | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n-  |   33|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n-  |   34|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n-  |   35|      1|}\n+  |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   41|      1|}\n   ------------------\n   | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n-  |   33|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n-  |   34|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n-  |   35|      1|}\n+  |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   41|      1|}\n   ------------------\n   | Unexecuted instantiation: used_inline_crate::used_only_from_bin_crate_generic_function::<_>\n   ------------------\n-   36|       |// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n-   37|       |\n-   38|       |#[inline(always)]\n-   39|      4|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n-   40|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n-   41|      4|}\n+   42|       |// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n+   43|       |\n+   44|       |#[inline(always)]\n+   45|      4|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+   46|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+   47|      4|}\n   ------------------\n   | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n-  |   39|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   40|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n-  |   41|      2|}\n+  |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+  |   47|      2|}\n   ------------------\n   | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n-  |   39|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   40|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n-  |   41|      2|}\n+  |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+  |   47|      2|}\n   ------------------\n-   42|       |\n-   43|       |#[inline(always)]\n-   44|      3|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-   45|      3|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-   46|      3|}\n+   48|       |\n+   49|       |#[inline(always)]\n+   50|      3|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   51|      3|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   52|      3|}\n   ------------------\n   | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n-  |   44|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   45|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   46|      1|}\n+  |   50|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   51|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   52|      1|}\n   ------------------\n   | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n-  |   44|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   45|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   46|      2|}\n+  |   50|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   51|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   52|      2|}\n   ------------------\n-   47|       |\n-   48|       |#[inline(always)]\n-   49|      3|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-   50|      3|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-   51|      3|}\n+   53|       |\n+   54|       |#[inline(always)]\n+   55|      3|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   56|      3|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   57|      3|}\n   ------------------\n   | used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n-  |   49|      1|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   50|      1|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   51|      1|}\n+  |   55|      1|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   56|      1|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   57|      1|}\n   ------------------\n   | used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n-  |   49|      2|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   50|      2|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   51|      2|}\n+  |   55|      2|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   56|      2|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   57|      2|}\n   ------------------\n-   52|       |\n-   53|       |#[inline(always)]\n-   54|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n-   55|      0|    println!(\"unused_generic_function with {:?}\", arg);\n-   56|      0|}\n-   57|       |\n-   58|       |#[inline(always)]\n-   59|      0|pub fn unused_function() {\n-   60|      0|    let is_true = std::env::args().len() == 1;\n-   61|      0|    let mut countdown = 2;\n-   62|      0|    if !is_true {\n-   63|      0|        countdown = 20;\n-   64|      0|    }\n-   65|      0|}\n-   66|       |\n-   67|       |#[inline(always)]\n-   68|      0|fn unused_private_function() {\n-   69|      0|    let is_true = std::env::args().len() == 1;\n-   70|      0|    let mut countdown = 2;\n-   71|      0|    if !is_true {\n-   72|      0|        countdown = 20;\n-   73|      0|    }\n-   74|      0|}\n-   75|       |\n-   76|      2|fn use_this_lib_crate() {\n-   77|      2|    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n-   78|      2|    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n-   79|      2|        \"used from library used_crate.rs\",\n-   80|      2|    );\n-   81|      2|    let some_vec = vec![5, 6, 7, 8];\n-   82|      2|    used_only_from_this_lib_crate_generic_function(some_vec);\n-   83|      2|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n-   84|      2|}\n+   58|       |\n+   59|       |#[inline(always)]\n+   60|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n+   61|      0|    println!(\"unused_generic_function with {:?}\", arg);\n+   62|      0|}\n+   63|       |\n+   64|       |#[inline(always)]\n+   65|      0|pub fn unused_function() {\n+   66|      0|    let is_true = std::env::args().len() == 1;\n+   67|      0|    let mut countdown = 2;\n+   68|      0|    if !is_true {\n+   69|      0|        countdown = 20;\n+   70|      0|    }\n+   71|      0|}\n+   72|       |\n+   73|       |#[inline(always)]\n+   74|      0|fn unused_private_function() {\n+   75|      0|    let is_true = std::env::args().len() == 1;\n+   76|      0|    let mut countdown = 2;\n+   77|      0|    if !is_true {\n+   78|      0|        countdown = 20;\n+   79|      0|    }\n+   80|      0|}\n+   81|       |\n+   82|      2|fn use_this_lib_crate() {\n+   83|      2|    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n+   84|      2|    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n+   85|      2|        \"used from library used_crate.rs\",\n+   86|      2|    );\n+   87|      2|    let some_vec = vec![5, 6, 7, 8];\n+   88|      2|    used_only_from_this_lib_crate_generic_function(some_vec);\n+   89|      2|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n+   90|      2|}\n "}, {"sha": "4a052756d4e276d25a43d453a162eb565670c695", "filename": "src/test/run-make-fulldeps/coverage/lib/used_inline_crate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cad9b6b695e86c7c23482876d2f6fefd64451ab3/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad9b6b695e86c7c23482876d2f6fefd64451ab3/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs?ref=cad9b6b695e86c7c23482876d2f6fefd64451ab3", "patch": "@@ -29,6 +29,12 @@ pub fn used_inline_function() {\n     use_this_lib_crate();\n }\n \n+\n+\n+\n+\n+\n+\n #[inline(always)]\n pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n     println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);"}]}