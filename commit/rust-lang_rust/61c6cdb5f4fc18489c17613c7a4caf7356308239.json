{"sha": "61c6cdb5f4fc18489c17613c7a4caf7356308239", "node_id": "C_kwDOAAsO6NoAKDYxYzZjZGI1ZjRmYzE4NDg5YzE3NjEzYzdhNGNhZjczNTYzMDgyMzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-04T05:40:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T05:40:32Z"}, "message": "Rollup merge of #103915 - chenyukang:yukang/fix-103874, r=lcnr\n\nImprove use of ErrorGuaranteed and code cleanup\n\nPart of #103874", "tree": {"sha": "b52f3348cbf776d039c21957562b6a5e18685d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b52f3348cbf776d039c21957562b6a5e18685d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c6cdb5f4fc18489c17613c7a4caf7356308239", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZKXQCRBK7hj4Ov3rIwAA914IAAPChRlkuUzUdSwoIlUQwxDm\nLuq9e1H98aXyzusDUbEjkdqjpCwzJ+reAxVOCeNc91jmWpIkqYARtVJQmO7W2sL6\naJ5Au15rrxunpWH/z7o3WtYznQ4FaloozrJUSiLy6mWD5REmHzzX7+Gxj/FarFnQ\n5CcXi2yUR4cZd7U6pOPyK+pDjIChAjpdH4V2DE97M8HuCHIkr87pBuoWEJwwdWpy\nsUPNWAiDD7MX9z9okc+najJiH/5lt8gOf26KDG6FX3Zb/8iD6Hb6cZmrhODJdwqi\nIGs3yJTzpZO9BhkScm1ozgJTgkC8ptqvUyqB7tezTppTn2RV6oURxdJpyYr5loE=\n=fNUT\n-----END PGP SIGNATURE-----\n", "payload": "tree b52f3348cbf776d039c21957562b6a5e18685d5b\nparent 47bf74302b77e28c3f75ff1bb24557963af240c2\nparent c6d23bdd328decdb0a0e98980af4c3b7aa13d9d6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667540432 +0100\ncommitter GitHub <noreply@github.com> 1667540432 +0100\n\nRollup merge of #103915 - chenyukang:yukang/fix-103874, r=lcnr\n\nImprove use of ErrorGuaranteed and code cleanup\n\nPart of #103874\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c6cdb5f4fc18489c17613c7a4caf7356308239", "html_url": "https://github.com/rust-lang/rust/commit/61c6cdb5f4fc18489c17613c7a4caf7356308239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c6cdb5f4fc18489c17613c7a4caf7356308239/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47bf74302b77e28c3f75ff1bb24557963af240c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/47bf74302b77e28c3f75ff1bb24557963af240c2", "html_url": "https://github.com/rust-lang/rust/commit/47bf74302b77e28c3f75ff1bb24557963af240c2"}, {"sha": "c6d23bdd328decdb0a0e98980af4c3b7aa13d9d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d23bdd328decdb0a0e98980af4c3b7aa13d9d6", "html_url": "https://github.com/rust-lang/rust/commit/c6d23bdd328decdb0a0e98980af4c3b7aa13d9d6"}], "stats": {"total": 81, "additions": 30, "deletions": 51}, "files": [{"sha": "dd00678aa0ceaf0dac275d7fa7f1a48147aa9a16", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -4,7 +4,7 @@\n use rustc_hir::def::Namespace;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter};\n-use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n+use rustc_middle::ty::{ConstInt, Ty};\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{self, Abi, Align, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n@@ -567,7 +567,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n                         throw_inval!(TooGeneric)\n                     }\n-                    ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n+                    ty::ConstKind::Error(reported) => {\n                         throw_inval!(AlreadyReported(reported))\n                     }\n                     ty::ConstKind::Unevaluated(uv) => {"}, {"sha": "f48bcd9080966dafe2d693b828bb04aee3aafc69", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -45,11 +45,10 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n         // There's not really any point in promoting errorful MIR.\n         //\n         // This does not include MIR that failed const-checking, which we still try to promote.\n-        if body.return_ty().references_error() {\n-            tcx.sess.delay_span_bug(body.span, \"PromoteTemps: MIR had errors\");\n+        if let Err(_) = body.return_ty().error_reported() {\n+            debug!(\"PromoteTemps: MIR had errors\");\n             return;\n         }\n-\n         if body.source.promoted.is_some() {\n             return;\n         }"}, {"sha": "7747ae14a24b2d33826c9509746c4548d796f7cc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -1979,7 +1979,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n \n                     err.emit()\n-                } else if let Some(reported) = qself_ty.error_reported() {\n+                } else if let Err(reported) = qself_ty.error_reported() {\n                     reported\n                 } else {\n                     // Don't print `TyErr` to the user."}, {"sha": "71c932d747bca7de4f888e463f175e353c761f1d", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -23,9 +23,7 @@ pub(crate) fn orphan_check_impl(\n     impl_def_id: LocalDefId,\n ) -> Result<(), ErrorGuaranteed> {\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-    if let Some(err) = trait_ref.error_reported() {\n-        return Err(err);\n-    }\n+    trait_ref.error_reported()?;\n \n     let ret = do_orphan_check_impl(tcx, trait_ref, impl_def_id);\n     if tcx.trait_is_auto(trait_ref.def_id) {"}, {"sha": "7d3129f7ea730567e0bbaefbdc263ca0c27c5f5f", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -94,10 +94,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"pointer_kind({:?}, {:?})\", t, span);\n \n         let t = self.resolve_vars_if_possible(t);\n-\n-        if let Some(reported) = t.error_reported() {\n-            return Err(reported);\n-        }\n+        t.error_reported()?;\n \n         if self.type_is_sized_modulo_regions(self.param_env, t, span) {\n             return Ok(Some(PointerKind::Thin));\n@@ -222,8 +219,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         // inference is more completely known.\n         match cast_ty.kind() {\n             ty::Dynamic(_, _, ty::Dyn) | ty::Slice(..) => {\n-                let reported = check.report_cast_to_unsized_type(fcx);\n-                Err(reported)\n+                Err(check.report_cast_to_unsized_type(fcx))\n             }\n             _ => Ok(check),\n         }\n@@ -614,10 +610,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'tcx>) -> ErrorGuaranteed {\n-        if let Some(reported) =\n-            self.cast_ty.error_reported().or_else(|| self.expr_ty.error_reported())\n-        {\n-            return reported;\n+        if let Err(err) = self.cast_ty.error_reported() {\n+            return err;\n+        }\n+        if let Err(err) = self.expr_ty.error_reported() {\n+            return err;\n         }\n \n         let tstr = fcx.ty_to_string(self.cast_ty);"}, {"sha": "cccedc9ec6ea952c8020f12a8daca1a7b31fee7d", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -262,7 +262,7 @@ pub fn ancestors<'tcx>(\n \n     if let Some(reported) = specialization_graph.has_errored {\n         Err(reported)\n-    } else if let Some(reported) = tcx.type_of(start_from_impl).error_reported() {\n+    } else if let Err(reported) = tcx.type_of(start_from_impl).error_reported() {\n         Err(reported)\n     } else {\n         Ok(Ancestors {"}, {"sha": "e5bcd5fb27aa715baaa2b8ec22cf775631862a1b", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -1,7 +1,7 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::mir;\n use crate::ty::visit::TypeVisitable;\n-use crate::ty::{self, DelaySpanBugEmitted, EarlyBinder, SubstsRef, Ty, TyCtxt};\n+use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use std::cmp;\n@@ -43,7 +43,7 @@ impl<'tcx> AbstractConst<'tcx> {\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.kind() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv),\n-            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n+            ty::ConstKind::Error(reported) => Err(reported),\n             _ => Ok(None),\n         }\n     }"}, {"sha": "c1c613f6c602ed3d01017c3aacd74163de0f5368", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -69,7 +69,7 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(ty::DelaySpanBugEmitted),\n+    Error(ErrorGuaranteed),\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]"}, {"sha": "fc3b071684999a6649d4ef6ea650aaa547433bf5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type BoundTy = ty::BoundTy;\n     type PlaceholderType = ty::PlaceholderType;\n     type InferTy = InferTy;\n-    type DelaySpanBugEmitted = DelaySpanBugEmitted;\n+    type ErrorGuaranteed = ErrorGuaranteed;\n     type PredicateKind = ty::PredicateKind<'tcx>;\n     type AllocId = crate::mir::interpret::AllocId;\n \n@@ -128,15 +128,6 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type PlaceholderRegion = ty::PlaceholderRegion;\n }\n \n-/// A type that is not publicly constructable. This prevents people from making [`TyKind::Error`]s\n-/// except through the error-reporting functions on a [`tcx`][TyCtxt].\n-#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n-pub struct DelaySpanBugEmitted {\n-    pub reported: ErrorGuaranteed,\n-    _priv: (),\n-}\n-\n type InternedSet<'tcx, T> = ShardedHashMap<InternedInSet<'tcx, T>, ()>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -1303,7 +1294,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(DelaySpanBugEmitted { reported, _priv: () }))\n+        self.mk_ty(Error(reported))\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants.\n@@ -1325,10 +1316,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         msg: &str,\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::ConstS {\n-            kind: ty::ConstKind::Error(DelaySpanBugEmitted { reported, _priv: () }),\n-            ty,\n-        })\n+        self.mk_const(ty::ConstS { kind: ty::ConstKind::Error(reported), ty })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {"}, {"sha": "27090c62d21ed135d895f4c702651ea280a006e3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -80,7 +80,7 @@ pub use self::consts::{\n };\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n-    CtxtInterners, DeducedParamAttrs, DelaySpanBugEmitted, FreeRegionInfo, GeneratorDiagnosticData,\n+    CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GeneratorDiagnosticData,\n     GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n     UserTypeAnnotationIndex,\n };"}, {"sha": "23cd93d6af40c1d8c8ff373135fd8a8c458f952a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -240,7 +240,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n-    ty::DelaySpanBugEmitted,\n     rustc_type_ir::DebruijnIndex,\n     ty::BoundVar,\n     ty::Placeholder<ty::BoundVar>,"}, {"sha": "f0e9f990a8115e8f00bc7cefc9fc68b0408bab81", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -95,11 +95,11 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n-    fn error_reported(&self) -> Option<ErrorGuaranteed> {\n+    fn error_reported(&self) -> Result<(), ErrorGuaranteed> {\n         if self.references_error() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n-            None\n+            Ok(())\n         }\n     }\n     fn has_non_region_param(&self) -> bool {"}, {"sha": "384d03106b1e8c1cc67760bbfdf3345a741bb859", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -122,7 +122,7 @@ mod rustc {\n \n             let c = c.eval(tcx, param_env);\n \n-            if let Some(err) = c.error_reported() {\n+            if let Err(err) = c.error_reported() {\n                 return Some(Self {\n                     alignment: true,\n                     lifetimes: true,"}, {"sha": "7c3eb4efbc9844e73bda2a14e876414b7277609c", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -45,7 +45,7 @@ pub trait Interner {\n     type BoundTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type PlaceholderType: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type InferTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n-    type DelaySpanBugEmitted: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n+    type ErrorGuaranteed: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type PredicateKind: Clone + Debug + Hash + PartialEq + Eq;\n     type AllocId: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n "}, {"sha": "02cbb2e858f80ac0943792604990d8e8c15727d9", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c6cdb5f4fc18489c17613c7a4caf7356308239/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=61c6cdb5f4fc18489c17613c7a4caf7356308239", "patch": "@@ -217,7 +217,7 @@ pub enum TyKind<I: Interner> {\n \n     /// A placeholder for a type which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(I::DelaySpanBugEmitted),\n+    Error(I::ErrorGuaranteed),\n }\n \n impl<I: Interner> TyKind<I> {\n@@ -626,7 +626,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n // This is manually implemented because a derive would require `I: Encodable`\n impl<I: Interner, E: TyEncoder> Encodable<E> for TyKind<I>\n where\n-    I::DelaySpanBugEmitted: Encodable<E>,\n+    I::ErrorGuaranteed: Encodable<E>,\n     I::AdtDef: Encodable<E>,\n     I::SubstsRef: Encodable<E>,\n     I::DefId: Encodable<E>,\n@@ -645,7 +645,6 @@ where\n     I::BoundTy: Encodable<E>,\n     I::PlaceholderType: Encodable<E>,\n     I::InferTy: Encodable<E>,\n-    I::DelaySpanBugEmitted: Encodable<E>,\n     I::PredicateKind: Encodable<E>,\n     I::AllocId: Encodable<E>,\n {\n@@ -744,7 +743,7 @@ where\n // This is manually implemented because a derive would require `I: Decodable`\n impl<I: Interner, D: TyDecoder<I = I>> Decodable<D> for TyKind<I>\n where\n-    I::DelaySpanBugEmitted: Decodable<D>,\n+    I::ErrorGuaranteed: Decodable<D>,\n     I::AdtDef: Decodable<D>,\n     I::SubstsRef: Decodable<D>,\n     I::DefId: Decodable<D>,\n@@ -763,7 +762,6 @@ where\n     I::BoundTy: Decodable<D>,\n     I::PlaceholderType: Decodable<D>,\n     I::InferTy: Decodable<D>,\n-    I::DelaySpanBugEmitted: Decodable<D>,\n     I::PredicateKind: Decodable<D>,\n     I::AllocId: Decodable<D>,\n {\n@@ -829,7 +827,7 @@ where\n     I::ParamTy: HashStable<CTX>,\n     I::PlaceholderType: HashStable<CTX>,\n     I::InferTy: HashStable<CTX>,\n-    I::DelaySpanBugEmitted: HashStable<CTX>,\n+    I::ErrorGuaranteed: HashStable<CTX>,\n {\n     #[inline]\n     fn hash_stable("}]}