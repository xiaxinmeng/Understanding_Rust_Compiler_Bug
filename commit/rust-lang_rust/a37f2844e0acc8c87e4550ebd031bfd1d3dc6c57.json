{"sha": "a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzN2YyODQ0ZTBhY2M4Yzg3ZTQ1NTBlYmQwMzFiZmQxZDNkYzZjNTc=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-08-02T02:07:36Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-08-17T04:22:04Z"}, "message": "Crypto: Add little-endian versions of existing functions: read_u32v_le and write_u32_le.", "tree": {"sha": "51ed51a149c78eeb0087b79abb84c281495d14a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ed51a149c78eeb0087b79abb84c281495d14a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57", "html_url": "https://github.com/rust-lang/rust/commit/a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57/comments", "author": null, "committer": null, "parents": [{"sha": "a1674b6150b20616c954e37206012b356ff81b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1674b6150b20616c954e37206012b356ff81b1c", "html_url": "https://github.com/rust-lang/rust/commit/a1674b6150b20616c954e37206012b356ff81b1c"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "b89f77ec5c1a0559b2ca77feeaecb80e400201fd", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=a37f2844e0acc8c87e4550ebd031bfd1d3dc6c57", "patch": "@@ -36,6 +36,18 @@ pub fn write_u32_be(dst: &mut[u8], input: u32) {\n     }\n }\n \n+/// Write a u32 into a vector, which must be 4 bytes long. The value is written in little-endian\n+/// format.\n+pub fn write_u32_le(dst: &mut[u8], input: u32) {\n+    use std::cast::transmute;\n+    use std::unstable::intrinsics::to_le32;\n+    assert!(dst.len() == 4);\n+    unsafe {\n+        let x: *mut i32 = transmute(dst.unsafe_mut_ref(0));\n+        *x = to_le32(input as i32);\n+    }\n+}\n+\n /// Read a vector of bytes into a vector of u64s. The values are read in big-endian format.\n pub fn read_u64v_be(dst: &mut[u64], input: &[u8]) {\n     use std::cast::transmute;\n@@ -68,6 +80,22 @@ pub fn read_u32v_be(dst: &mut[u32], input: &[u8]) {\n     }\n }\n \n+/// Read a vector of bytes into a vector of u32s. The values are read in little-endian format.\n+pub fn read_u32v_le(dst: &mut[u32], input: &[u8]) {\n+    use std::cast::transmute;\n+    use std::unstable::intrinsics::to_le32;\n+    assert!(dst.len() * 4 == input.len());\n+    unsafe {\n+        let mut x: *mut i32 = transmute(dst.unsafe_mut_ref(0));\n+        let mut y: *i32 = transmute(input.unsafe_ref(0));\n+        do dst.len().times() {\n+            *x = to_le32(*y);\n+            x = x.offset(1);\n+            y = y.offset(1);\n+        }\n+    }\n+}\n+\n \n /// Returns true if adding the two parameters will result in integer overflow\n pub fn will_add_overflow<T: Int + Unsigned>(x: T, y: T) -> bool {"}]}