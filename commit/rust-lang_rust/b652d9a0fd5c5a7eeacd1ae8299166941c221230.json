{"sha": "b652d9a0fd5c5a7eeacd1ae8299166941c221230", "node_id": "C_kwDOAAsO6NoAKGI2NTJkOWEwZmQ1YzVhN2VlYWNkMWFlODI5OTE2Njk0MWMyMjEyMzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T16:02:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T16:02:53Z"}, "message": "Auto merge of #108062 - Zoxc:spec-incr, r=cjgillot\n\nSpecialize query execution for incremental and non-incremental\n\nThis specializes query execution for incremental and non-incremental by passing in a separate `dyn QueryEngine` types, taking advantage of the virtual dispatch to avoid a branch. This ends up duplicating `try_execute_query`, hopefully the compile time cost of that is relatively low.\n\nThis is a performance improvement for the non-incremental path:\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check</td><td align=\"right\">1.8420s</td><td align=\"right\">1.8331s</td><td align=\"right\"> -0.48%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check</td><td align=\"right\">0.2652s</td><td align=\"right\">0.2631s</td><td align=\"right\"> -0.78%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check</td><td align=\"right\">1.0161s</td><td align=\"right\">1.0062s</td><td align=\"right\"> -0.98%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check</td><td align=\"right\">1.6408s</td><td align=\"right\">1.6197s</td><td align=\"right\">\ud83d\udc9a  -1.28%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check</td><td align=\"right\">6.3939s</td><td align=\"right\">6.3558s</td><td align=\"right\"> -0.60%</td></tr><tr><td>Total</td><td align=\"right\">11.1580s</td><td align=\"right\">11.0780s</td><td align=\"right\"> -0.72%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">0.9918s</td><td align=\"right\"> -0.82%</td></tr></table>\n\nThe incremental path is more neutral:\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check:initial</td><td align=\"right\">2.2210s</td><td align=\"right\">2.2227s</td><td align=\"right\"> 0.08%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check:initial</td><td align=\"right\">0.3441s</td><td align=\"right\">0.3443s</td><td align=\"right\"> 0.05%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check:initial</td><td align=\"right\">1.2919s</td><td align=\"right\">1.2877s</td><td align=\"right\"> -0.33%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check:initial</td><td align=\"right\">2.0749s</td><td align=\"right\">2.0721s</td><td align=\"right\"> -0.14%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check:initial</td><td align=\"right\">7.9266s</td><td align=\"right\">7.9206s</td><td align=\"right\"> -0.07%</td></tr><tr><td>Total</td><td align=\"right\">13.8585s</td><td align=\"right\">13.8474s</td><td align=\"right\"> -0.08%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">0.9992s</td><td align=\"right\"> -0.08%</td></tr></table>\n\nr? `@cjgillot`", "tree": {"sha": "aa13b19ca77944c95871aabeaf26023038fb3dfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa13b19ca77944c95871aabeaf26023038fb3dfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b652d9a0fd5c5a7eeacd1ae8299166941c221230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b652d9a0fd5c5a7eeacd1ae8299166941c221230", "html_url": "https://github.com/rust-lang/rust/commit/b652d9a0fd5c5a7eeacd1ae8299166941c221230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b652d9a0fd5c5a7eeacd1ae8299166941c221230/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9239760da89cd8e9a51536beeb0a23762064037d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9239760da89cd8e9a51536beeb0a23762064037d", "html_url": "https://github.com/rust-lang/rust/commit/9239760da89cd8e9a51536beeb0a23762064037d"}, {"sha": "882a9684f9bc94afa7c97fdb5724511cd04e16fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/882a9684f9bc94afa7c97fdb5724511cd04e16fc", "html_url": "https://github.com/rust-lang/rust/commit/882a9684f9bc94afa7c97fdb5724511cd04e16fc"}], "stats": {"total": 93, "additions": 76, "deletions": 17}, "files": [{"sha": "bbf9d9d515d1ff9944012070687f6d3922c7e304", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b652d9a0fd5c5a7eeacd1ae8299166941c221230", "patch": "@@ -691,6 +691,8 @@ pub fn create_global_ctxt<'tcx>(\n         callback(sess, &mut local_providers, &mut extern_providers);\n     }\n \n+    let incremental = dep_graph.is_fully_enabled();\n+\n     sess.time(\"setup_global_ctxt\", || {\n         gcx_cell.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n@@ -705,6 +707,7 @@ pub fn create_global_ctxt<'tcx>(\n                     local_providers,\n                     extern_providers,\n                     query_result_on_disk_cache,\n+                    incremental,\n                 ),\n             )\n         })"}, {"sha": "3c542821b67ac57e472a34dab7346951525b08b0", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=b652d9a0fd5c5a7eeacd1ae8299166941c221230", "patch": "@@ -34,7 +34,8 @@ use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n-    get_query, HashResult, QueryCache, QueryConfig, QueryInfo, QueryMap, QueryMode, QueryState,\n+    get_query_incr, get_query_non_incr, HashResult, QueryCache, QueryConfig, QueryInfo, QueryMap,\n+    QueryMode, QueryState,\n };\n use rustc_query_system::HandleCycleError;\n use rustc_query_system::Value;\n@@ -203,6 +204,7 @@ pub fn query_system<'tcx>(\n     local_providers: Providers,\n     extern_providers: ExternProviders,\n     on_disk_cache: Option<OnDiskCache<'tcx>>,\n+    incremental: bool,\n ) -> QuerySystem<'tcx> {\n     QuerySystem {\n         states: Default::default(),\n@@ -211,7 +213,7 @@ pub fn query_system<'tcx>(\n         dynamic_queries: dynamic_queries(),\n         on_disk_cache,\n         fns: QuerySystemFns {\n-            engine: engine(),\n+            engine: engine(incremental),\n             local_providers,\n             extern_providers,\n             query_structs: make_dep_kind_array!(query_structs).to_vec(),"}, {"sha": "5acfeb47a12adfebbec8a015e39d1daedf0092f4", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=b652d9a0fd5c5a7eeacd1ae8299166941c221230", "patch": "@@ -494,7 +494,7 @@ macro_rules! define_queries {\n     (\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n-        mod get_query {\n+        mod get_query_incr {\n             use super::*;\n \n             $(\n@@ -506,7 +506,7 @@ macro_rules! define_queries {\n                     key: query_keys::$name<'tcx>,\n                     mode: QueryMode,\n                 ) -> Option<Erase<query_values::$name<'tcx>>> {\n-                    get_query(\n+                    get_query_incr(\n                         queries::$name::config(tcx),\n                         QueryCtxt::new(tcx),\n                         span,\n@@ -517,9 +517,37 @@ macro_rules! define_queries {\n             )*\n         }\n \n-        pub(crate) fn engine() -> QueryEngine {\n-            QueryEngine {\n-                $($name: get_query::$name,)*\n+        mod get_query_non_incr {\n+            use super::*;\n+\n+            $(\n+                #[inline(always)]\n+                #[tracing::instrument(level = \"trace\", skip(tcx))]\n+                pub(super) fn $name<'tcx>(\n+                    tcx: TyCtxt<'tcx>,\n+                    span: Span,\n+                    key: query_keys::$name<'tcx>,\n+                    __mode: QueryMode,\n+                ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                    Some(get_query_non_incr(\n+                        queries::$name::config(tcx),\n+                        QueryCtxt::new(tcx),\n+                        span,\n+                        key,\n+                    ))\n+                }\n+            )*\n+        }\n+\n+        pub(crate) fn engine(incremental: bool) -> QueryEngine {\n+            if incremental {\n+                QueryEngine {\n+                    $($name: get_query_incr::$name,)*\n+                }\n+            } else {\n+                QueryEngine {\n+                    $($name: get_query_non_incr::$name,)*\n+                }\n             }\n         }\n "}, {"sha": "dbfe62ae6e943045811a560e49aac9461198113e", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652d9a0fd5c5a7eeacd1ae8299166941c221230/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=b652d9a0fd5c5a7eeacd1ae8299166941c221230", "patch": "@@ -312,7 +312,7 @@ where\n }\n \n #[inline(never)]\n-fn try_execute_query<Q, Qcx>(\n+fn try_execute_query<Q, Qcx, const INCR: bool>(\n     query: Q,\n     qcx: Qcx,\n     span: Span,\n@@ -355,7 +355,7 @@ where\n             // Drop the lock before we start executing the query\n             drop(state_lock);\n \n-            execute_job(query, qcx, state, key, id, dep_node)\n+            execute_job::<_, _, INCR>(query, qcx, state, key, id, dep_node)\n         }\n         Entry::Occupied(mut entry) => {\n             match entry.get_mut() {\n@@ -383,7 +383,7 @@ where\n }\n \n #[inline(always)]\n-fn execute_job<Q, Qcx>(\n+fn execute_job<Q, Qcx, const INCR: bool>(\n     query: Q,\n     qcx: Qcx,\n     state: &QueryState<Q::Key, Qcx::DepKind>,\n@@ -398,9 +398,19 @@ where\n     // Use `JobOwner` so the query will be poisoned if executing it panics.\n     let job_owner = JobOwner { state, key };\n \n-    let (result, dep_node_index) = match qcx.dep_context().dep_graph().data() {\n-        None => execute_job_non_incr(query, qcx, key, id),\n-        Some(data) => execute_job_incr(query, qcx, data, key, dep_node, id),\n+    debug_assert_eq!(qcx.dep_context().dep_graph().is_fully_enabled(), INCR);\n+\n+    let (result, dep_node_index) = if INCR {\n+        execute_job_incr(\n+            query,\n+            qcx,\n+            qcx.dep_context().dep_graph().data().unwrap(),\n+            key,\n+            dep_node,\n+            id,\n+        )\n+    } else {\n+        execute_job_non_incr(query, qcx, key, id)\n     };\n \n     let cache = query.query_cache(qcx);\n@@ -784,7 +794,18 @@ pub enum QueryMode {\n }\n \n #[inline(always)]\n-pub fn get_query<Q, Qcx>(\n+pub fn get_query_non_incr<Q, Qcx>(query: Q, qcx: Qcx, span: Span, key: Q::Key) -> Q::Value\n+where\n+    Q: QueryConfig<Qcx>,\n+    Qcx: QueryContext,\n+{\n+    debug_assert!(!qcx.dep_context().dep_graph().is_fully_enabled());\n+\n+    ensure_sufficient_stack(|| try_execute_query::<Q, Qcx, false>(query, qcx, span, key, None).0)\n+}\n+\n+#[inline(always)]\n+pub fn get_query_incr<Q, Qcx>(\n     query: Q,\n     qcx: Qcx,\n     span: Span,\n@@ -795,6 +816,8 @@ where\n     Q: QueryConfig<Qcx>,\n     Qcx: QueryContext,\n {\n+    debug_assert!(qcx.dep_context().dep_graph().is_fully_enabled());\n+\n     let dep_node = if let QueryMode::Ensure { check_cache } = mode {\n         let (must_run, dep_node) = ensure_must_run(query, qcx, &key, check_cache);\n         if !must_run {\n@@ -805,8 +828,9 @@ where\n         None\n     };\n \n-    let (result, dep_node_index) =\n-        ensure_sufficient_stack(|| try_execute_query(query, qcx, span, key, dep_node));\n+    let (result, dep_node_index) = ensure_sufficient_stack(|| {\n+        try_execute_query::<_, _, true>(query, qcx, span, key, dep_node)\n+    });\n     if let Some(dep_node_index) = dep_node_index {\n         qcx.dep_context().dep_graph().read_index(dep_node_index)\n     }\n@@ -831,5 +855,7 @@ pub fn force_query<Q, Qcx>(\n \n     debug_assert!(!query.anon());\n \n-    ensure_sufficient_stack(|| try_execute_query(query, qcx, DUMMY_SP, key, Some(dep_node)));\n+    ensure_sufficient_stack(|| {\n+        try_execute_query::<_, _, true>(query, qcx, DUMMY_SP, key, Some(dep_node))\n+    });\n }"}]}