{"sha": "43d39636724616b752b18088b95d0e2e61c84844", "node_id": "C_kwDOAAsO6NoAKDQzZDM5NjM2NzI0NjE2Yjc1MmIxODA4OGI5NWQwZTJlNjFjODQ4NDQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-07T12:00:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-09T17:59:34Z"}, "message": "more detailed error message", "tree": {"sha": "2bcd5399cfd80c03fe3c1a4e4fecdf56034448b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bcd5399cfd80c03fe3c1a4e4fecdf56034448b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43d39636724616b752b18088b95d0e2e61c84844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43d39636724616b752b18088b95d0e2e61c84844", "html_url": "https://github.com/rust-lang/rust/commit/43d39636724616b752b18088b95d0e2e61c84844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43d39636724616b752b18088b95d0e2e61c84844/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927ab19cfc67f96f7543aa929bd1a01c8f226dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/927ab19cfc67f96f7543aa929bd1a01c8f226dc2", "html_url": "https://github.com/rust-lang/rust/commit/927ab19cfc67f96f7543aa929bd1a01c8f226dc2"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "410c2b9c3ddf756cf8ebafc496346d43014ca3d9", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43d39636724616b752b18088b95d0e2e61c84844/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d39636724616b752b18088b95d0e2e61c84844/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=43d39636724616b752b18088b95d0e2e61c84844", "patch": "@@ -997,14 +997,23 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         )?;\n         // Ensure the allocation is mutable. Even failing (read-only) compare_exchange need mutable\n         // memory on many targets (i.e., they segfault if taht memory is mapped read-only), and\n-        // atomic loads can be implemented via compare_exchange on some targets. See\n-        // <https://github.com/rust-lang/miri/issues/2463>.\n+        // atomic loads can be implemented via compare_exchange on some targets. There could\n+        // possibly be some very specific exceptions to this, see\n+        // <https://github.com/rust-lang/miri/pull/2464#discussion_r939636130> for details.\n         // We avoid `get_ptr_alloc` since we do *not* want to run the access hooks -- the actual\n         // access will happen later.\n         let (alloc_id, _offset, _prov) =\n             this.ptr_try_get_alloc_id(place.ptr).expect(\"there are no zero-sized atomic accesses\");\n         if this.get_alloc_mutability(alloc_id)? == Mutability::Not {\n-            throw_ub_format!(\"atomic operations cannot be performed on read-only memory\");\n+            // FIXME: make this prettier, once these messages have separate title/span/help messages.\n+            throw_ub_format!(\n+                \"atomic operations cannot be performed on read-only memory\\n\\\n+                many platforms require atomic read-modify-write instructions to be performed on writeable memory, even if the operation fails \\\n+                (and is hence nominally read-only)\\n\\\n+                some platforms implement (some) atomic loads via compare-exchange, which means they do not work on read-only memory; \\\n+                it is possible that we could have an exception permitting this for specific kinds of loads\\n\\\n+                please report an issue at <https://github.com/rust-lang/miri/issues> if this is a problem for you\"\n+            );\n         }\n         Ok(())\n     }"}, {"sha": "b90dc5c9d6cd51dab7971198363479c71bd79dc9", "filename": "tests/fail/concurrency/read_only_atomic_cmpxchg.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43d39636724616b752b18088b95d0e2e61c84844/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43d39636724616b752b18088b95d0e2e61c84844/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr?ref=43d39636724616b752b18088b95d0e2e61c84844", "patch": "@@ -1,8 +1,14 @@\n error: Undefined Behavior: atomic operations cannot be performed on read-only memory\n+       many platforms require atomic read-modify-write instructions to be performed on writeable memory, even if the operation fails (and is hence nominally read-only)\n+       some platforms implement (some) atomic loads via compare-exchange, which means they do not work on read-only memory; it is possible that we could have an exception permitting this for specific kinds of loads\n+       please report an issue at <https://github.com/rust-lang/miri/issues> if this is a problem for you\n   --> $DIR/read_only_atomic_cmpxchg.rs:LL:CC\n    |\n LL |     x.compare_exchange(1, 2, Ordering::Relaxed, Ordering::Relaxed).unwrap_err();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ atomic operations cannot be performed on read-only memory\n+many platforms require atomic read-modify-write instructions to be performed on writeable memory, even if the operation fails (and is hence nominally read-only)\n+some platforms implement (some) atomic loads via compare-exchange, which means they do not work on read-only memory; it is possible that we could have an exception permitting this for specific kinds of loads\n+please report an issue at <https://github.com/rust-lang/miri/issues> if this is a problem for you\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "b19d3755fbb04fb6b8dea810ebb7640b15ded94e", "filename": "tests/fail/concurrency/read_only_atomic_load.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43d39636724616b752b18088b95d0e2e61c84844/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43d39636724616b752b18088b95d0e2e61c84844/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr?ref=43d39636724616b752b18088b95d0e2e61c84844", "patch": "@@ -1,8 +1,14 @@\n error: Undefined Behavior: atomic operations cannot be performed on read-only memory\n+       many platforms require atomic read-modify-write instructions to be performed on writeable memory, even if the operation fails (and is hence nominally read-only)\n+       some platforms implement (some) atomic loads via compare-exchange, which means they do not work on read-only memory; it is possible that we could have an exception permitting this for specific kinds of loads\n+       please report an issue at <https://github.com/rust-lang/miri/issues> if this is a problem for you\n   --> $DIR/read_only_atomic_load.rs:LL:CC\n    |\n LL |     x.load(Ordering::Relaxed);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ atomic operations cannot be performed on read-only memory\n+many platforms require atomic read-modify-write instructions to be performed on writeable memory, even if the operation fails (and is hence nominally read-only)\n+some platforms implement (some) atomic loads via compare-exchange, which means they do not work on read-only memory; it is possible that we could have an exception permitting this for specific kinds of loads\n+please report an issue at <https://github.com/rust-lang/miri/issues> if this is a problem for you\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}]}