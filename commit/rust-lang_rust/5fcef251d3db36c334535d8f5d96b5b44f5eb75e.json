{"sha": "5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmY2VmMjUxZDNkYjM2YzMzNDUzNWQ4ZjVkOTZiNWI0NGY1ZWI3NWU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T18:36:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T12:54:36Z"}, "message": "Move basic_options to impl of Default", "tree": {"sha": "04a0c666ce12dab21b65aad600f1ee425ede6566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a0c666ce12dab21b65aad600f1ee425ede6566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "html_url": "https://github.com/rust-lang/rust/commit/5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "html_url": "https://github.com/rust-lang/rust/commit/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2"}], "stats": {"total": 138, "additions": 70, "deletions": 68}, "files": [{"sha": "f5a2b3730d51c49c812c19757eba1fe86f5d0904", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 62, "deletions": 60, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "patch": "@@ -596,37 +596,38 @@ pub fn host_triple() -> &'static str {\n     (option_env!(\"CFG_COMPILER_HOST_TRIPLE\")).expect(\"CFG_COMPILER_HOST_TRIPLE\")\n }\n \n-/// Some reasonable defaults\n-pub fn basic_options() -> Options {\n-    Options {\n-        crate_types: Vec::new(),\n-        optimize: OptLevel::No,\n-        debuginfo: DebugInfo::None,\n-        lint_opts: Vec::new(),\n-        lint_cap: None,\n-        describe_lints: false,\n-        output_types: OutputTypes(BTreeMap::new()),\n-        search_paths: SearchPaths::new(),\n-        maybe_sysroot: None,\n-        target_triple: TargetTriple::from_triple(host_triple()),\n-        test: false,\n-        incremental: None,\n-        debugging_opts: basic_debugging_options(),\n-        prints: Vec::new(),\n-        borrowck_mode: BorrowckMode::Ast,\n-        cg: basic_codegen_options(),\n-        error_format: ErrorOutputType::default(),\n-        externs: Externs(BTreeMap::new()),\n-        crate_name: None,\n-        alt_std_name: None,\n-        libs: Vec::new(),\n-        unstable_features: UnstableFeatures::Disallow,\n-        debug_assertions: true,\n-        actually_rustdoc: false,\n-        cli_forced_codegen_units: None,\n-        cli_forced_thinlto_off: false,\n-        remap_path_prefix: Vec::new(),\n-        edition: DEFAULT_EDITION,\n+impl Default for Options {\n+    fn default() -> Options {\n+        Options {\n+            crate_types: Vec::new(),\n+            optimize: OptLevel::No,\n+            debuginfo: DebugInfo::None,\n+            lint_opts: Vec::new(),\n+            lint_cap: None,\n+            describe_lints: false,\n+            output_types: OutputTypes(BTreeMap::new()),\n+            search_paths: SearchPaths::new(),\n+            maybe_sysroot: None,\n+            target_triple: TargetTriple::from_triple(host_triple()),\n+            test: false,\n+            incremental: None,\n+            debugging_opts: basic_debugging_options(),\n+            prints: Vec::new(),\n+            borrowck_mode: BorrowckMode::Ast,\n+            cg: basic_codegen_options(),\n+            error_format: ErrorOutputType::default(),\n+            externs: Externs(BTreeMap::new()),\n+            crate_name: None,\n+            alt_std_name: None,\n+            libs: Vec::new(),\n+            unstable_features: UnstableFeatures::Disallow,\n+            debug_assertions: true,\n+            actually_rustdoc: false,\n+            cli_forced_codegen_units: None,\n+            cli_forced_thinlto_off: false,\n+            remap_path_prefix: Vec::new(),\n+            edition: DEFAULT_EDITION,\n+        }\n     }\n }\n \n@@ -2529,6 +2530,7 @@ mod tests {\n     use syntax::symbol::Symbol;\n     use syntax::edition::{Edition, DEFAULT_EDITION};\n     use syntax;\n+    use super::Options;\n \n     fn optgroups() -> getopts::Options {\n         let mut opts = getopts::Options::new();\n@@ -2613,9 +2615,9 @@ mod tests {\n \n     #[test]\n     fn test_output_types_tracking_hash_different_paths() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         v1.output_types =\n             OutputTypes::new(&[(OutputType::Exe, Some(PathBuf::from(\"./some/thing\")))]);\n@@ -2635,8 +2637,8 @@ mod tests {\n \n     #[test]\n     fn test_output_types_tracking_hash_different_construction_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n \n         v1.output_types = OutputTypes::new(&[\n             (OutputType::Exe, Some(PathBuf::from(\"./some/thing\"))),\n@@ -2656,9 +2658,9 @@ mod tests {\n \n     #[test]\n     fn test_externs_tracking_hash_different_construction_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         v1.externs = Externs::new(mk_map(vec![\n             (\n@@ -2705,9 +2707,9 @@ mod tests {\n \n     #[test]\n     fn test_lints_tracking_hash_different_values() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         v1.lint_opts = vec![\n             (String::from(\"a\"), lint::Allow),\n@@ -2742,8 +2744,8 @@ mod tests {\n \n     #[test]\n     fn test_lints_tracking_hash_different_construction_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n \n         v1.lint_opts = vec![\n             (String::from(\"a\"), lint::Allow),\n@@ -2768,10 +2770,10 @@ mod tests {\n \n     #[test]\n     fn test_search_paths_tracking_hash_different_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-        let mut v4 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n+        let mut v4 = Options::default();\n \n         // Reference\n         v1.search_paths\n@@ -2831,10 +2833,10 @@ mod tests {\n \n     #[test]\n     fn test_native_libs_tracking_hash_different_values() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-        let mut v4 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n+        let mut v4 = Options::default();\n \n         // Reference\n         v1.libs = vec![\n@@ -2881,9 +2883,9 @@ mod tests {\n \n     #[test]\n     fn test_native_libs_tracking_hash_different_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         // Reference\n         v1.libs = vec![\n@@ -2916,8 +2918,8 @@ mod tests {\n \n     #[test]\n     fn test_codegen_options_tracking_hash() {\n-        let reference = super::basic_options();\n-        let mut opts = super::basic_options();\n+        let reference = Options::default();\n+        let mut opts = Options::default();\n \n         // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n         opts.cg.ar = Some(String::from(\"abc\"));\n@@ -3054,8 +3056,8 @@ mod tests {\n \n     #[test]\n     fn test_debugging_options_tracking_hash() {\n-        let reference = super::basic_options();\n-        let mut opts = super::basic_options();\n+        let reference = Options::default();\n+        let mut opts = Options::default();\n \n         // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n         opts.debugging_opts.verbose = true;\n@@ -3184,7 +3186,7 @@ mod tests {\n     #[test]\n     fn test_edition_parsing() {\n         // test default edition\n-        let options = super::basic_options();\n+        let options = Options::default();\n         assert!(options.edition == DEFAULT_EDITION);\n \n         let matches = optgroups()"}, {"sha": "03651322bc9806ae7dceacd35ca0aa2bb4bdc771", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "patch": "@@ -99,7 +99,7 @@ fn test_env<F>(source_string: &str,\n     where F: FnOnce(Env)\n {\n     syntax::with_globals(|| {\n-        let mut options = config::basic_options();\n+        let mut options = config::Options::default();\n         options.debugging_opts.verbose = true;\n         options.unstable_features = UnstableFeatures::Allow;\n "}, {"sha": "f2327ba3e88343cdc2052143b6d33be12f2c0bd0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "patch": "@@ -43,7 +43,7 @@ use clean;\n use clean::Clean;\n use html::render::RenderInfo;\n \n-pub use rustc::session::config::{Input, CodegenOptions};\n+pub use rustc::session::config::{Input, Options, CodegenOptions};\n pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n@@ -127,7 +127,7 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::C\n {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n     // stick to the defaults\n-    let sessopts = config::basic_options();\n+    let sessopts = Options::default();\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(color_config) => Box::new(\n             EmitterWriter::stderr(\n@@ -243,7 +243,7 @@ pub fn run_core(search_paths: SearchPaths,\n         error_format,\n         edition,\n         describe_lints,\n-        ..config::basic_options()\n+        ..Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, move |sessopts| {\n         let codemap = Lrc::new(codemap::CodeMap::new(sessopts.file_path_mapping()));"}, {"sha": "d8e382f6998ceb1b66e108d7770a04c8feabe92f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "patch": "@@ -83,7 +83,7 @@ pub fn run(input_path: &Path,\n             ..config::basic_debugging_options()\n         },\n         edition,\n-        ..config::basic_options().clone()\n+        ..config::Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, |sessopts| {\n         let codemap = Lrc::new(CodeMap::new(sessopts.file_path_mapping()));\n@@ -230,7 +230,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             ..config::basic_debugging_options()\n         },\n         edition,\n-        ..config::basic_options().clone()\n+        ..config::Options::default()\n     };\n \n     // Shuffle around a few input and output handles here. We're going to pass"}, {"sha": "d83b21e64415d1ddc21c9a30b8c717ad3e115a53", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcef251d3db36c334535d8f5d96b5b44f5eb75e/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=5fcef251d3db36c334535d8f5d96b5b44f5eb75e", "patch": "@@ -19,7 +19,7 @@ extern crate rustc_codegen_utils;\n extern crate syntax;\n \n use rustc::session::{build_session, Session};\n-use rustc::session::config::{basic_options, Input, Options,\n+use rustc::session::config::{Input, Options,\n                              OutputType, OutputTypes};\n use rustc_driver::driver::{self, compile_input, CompileController};\n use rustc_metadata::cstore::CStore;\n@@ -63,7 +63,7 @@ fn basic_sess(opts: Options) -> (Session, Rc<CStore>, Box<CodegenBackend>) {\n \n fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     syntax::with_globals(|| {\n-        let mut opts = basic_options();\n+        let mut opts = Options::default();\n         opts.output_types = OutputTypes::new(&[(OutputType::Exe, None)]);\n         opts.maybe_sysroot = Some(sysroot);\n         if let Ok(linker) = std::env::var(\"RUSTC_LINKER\") {"}]}