{"sha": "57dd722606028cafde656a66edc3206b82cd3bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZGQ3MjI2MDYwMjhjYWZkZTY1NmE2NmVkYzMyMDZiODJjZDNiYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-28T22:20:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-28T22:20:14Z"}, "message": "Auto merge of #51884 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #51636 (Refactor error reporting of constants)\n - #51765 (Use assert_eq! in copy_from_slice)\n - #51822 (Provide existing ref suggestions for more E0308 errors)\n - #51839 (Detect overflows of non u32 shifts)\n - #51868 (Remove process::id from 'Stabilized APIs' in 1.27.0 release notes)\n - #51875 (Explicitely disable WASM code generation for Emscripten)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8f515fb881d43a4874d3010c91b92696faafcd1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f515fb881d43a4874d3010c91b92696faafcd1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57dd722606028cafde656a66edc3206b82cd3bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57dd722606028cafde656a66edc3206b82cd3bab", "html_url": "https://github.com/rust-lang/rust/commit/57dd722606028cafde656a66edc3206b82cd3bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57dd722606028cafde656a66edc3206b82cd3bab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3bf634e060bc2f8665878288bcea02008ca346e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3bf634e060bc2f8665878288bcea02008ca346e", "html_url": "https://github.com/rust-lang/rust/commit/e3bf634e060bc2f8665878288bcea02008ca346e"}, {"sha": "3332c0c7e18a0669fd61d079e74c3d891033c32e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3332c0c7e18a0669fd61d079e74c3d891033c32e", "html_url": "https://github.com/rust-lang/rust/commit/3332c0c7e18a0669fd61d079e74c3d891033c32e"}], "stats": {"total": 1404, "additions": 577, "deletions": 827}, "files": [{"sha": "fba68ce043e261883846d6c76a5ee581bc68c064", "filename": "RELEASES.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -56,7 +56,6 @@ Stabilized APIs\n - [`Take::set_limit`]\n - [`hint::unreachable_unchecked`]\n - [`os::unix::process::parent_id`]\n-- [`process::id`]\n - [`ptr::swap_nonoverlapping`]\n - [`slice::rsplit_mut`]\n - [`slice::rsplit`]"}, {"sha": "0cbdbc4ad663af99c47a7838c2c66ff44e628641", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1642,8 +1642,8 @@ impl<T> [T] {\n     /// [`split_at_mut`]: #method.split_at_mut\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     pub fn copy_from_slice(&mut self, src: &[T]) where T: Copy {\n-        assert!(self.len() == src.len(),\n-                \"destination and source slices have different lengths\");\n+        assert_eq!(self.len(), src.len(),\n+                   \"destination and source slices have different lengths\");\n         unsafe {\n             ptr::copy_nonoverlapping(\n                 src.as_ptr(), self.as_mut_ptr(), self.len());"}, {"sha": "6cc61d748001a191f9bf4428080f1881dc2f285e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -60,7 +60,7 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use mir::interpret::{GlobalId, ConstValue};\n+use mir::interpret::GlobalId;\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use hir::map::DefPathHash;\n use hir::{HirId, ItemLocalId};\n@@ -75,7 +75,7 @@ use traits::query::{\n     CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n-         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n+         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty, self};\n use ty::subst::Substs;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n@@ -632,7 +632,7 @@ define_dep_nodes!( <'tcx>\n     // queries). Making them anonymous avoids hashing the result, which\n     // may save a bit of time.\n     [anon] EraseRegionsTy { ty: Ty<'tcx> },\n-    [anon] ConstValueToAllocation { val: ConstValue<'tcx>, ty: Ty<'tcx> },\n+    [anon] ConstValueToAllocation { val: &'tcx ty::Const<'tcx> },\n \n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),"}, {"sha": "8391cc6d9ba99e286f0e4697b8042bef0d12865d", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 8, "deletions": 45, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -364,11 +364,11 @@ impl_stable_hash_for!(struct ty::FieldDef {\n });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::middle::const_val::ConstVal<'gcx> {\n+for ::mir::interpret::ConstValue<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use middle::const_val::ConstVal::*;\n+        use mir::interpret::ConstValue::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n@@ -377,23 +377,6 @@ for ::middle::const_val::ConstVal<'gcx> {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n-            Value(ref value) => {\n-                value.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::mir::interpret::ConstValue<'gcx> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        use mir::interpret::ConstValue::*;\n-\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n             Scalar(val) => {\n                 val.hash_stable(hcx, hasher);\n             }\n@@ -497,40 +480,18 @@ impl_stable_hash_for!(struct ty::Const<'tcx> {\n     val\n });\n \n-impl_stable_hash_for!(struct ::middle::const_val::ConstEvalErr<'tcx> {\n+impl_stable_hash_for!(struct ::mir::interpret::ConstEvalErr<'tcx> {\n     span,\n-    kind\n+    stacktrace,\n+    error\n });\n \n-impl_stable_hash_for!(struct ::middle::const_val::FrameInfo {\n+impl_stable_hash_for!(struct ::mir::interpret::FrameInfo {\n     span,\n     lint_root,\n     location\n });\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::middle::const_val::ErrKind<'gcx> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        use middle::const_val::ErrKind::*;\n-\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            TypeckError |\n-            CouldNotResolve |\n-            CheckMatchError => {\n-                // nothing to do\n-            }\n-            Miri(ref err, ref trace) => {\n-                err.hash_stable(hcx, hasher);\n-                trace.hash_stable(hcx, hasher);\n-            },\n-        }\n-    }\n-}\n-\n impl_stable_hash_for!(struct ty::ClosureSubsts<'tcx> { substs });\n impl_stable_hash_for!(struct ty::GeneratorSubsts<'tcx> { substs });\n \n@@ -579,6 +540,8 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             ReadFromReturnPointer |\n             UnimplementedTraitSelection |\n             TypeckError |\n+            TooGeneric |\n+            CheckMatchError |\n             DerefFunctionPointer |\n             ExecuteMemory |\n             OverflowNeg |"}, {"sha": "c500800a30f9cd9717788a492b6e4f7e664b7ff7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -132,7 +132,6 @@ pub mod middle {\n     pub mod allocator;\n     pub mod borrowck;\n     pub mod expr_use_visitor;\n-    pub mod const_val;\n     pub mod cstore;\n     pub mod dataflow;\n     pub mod dead;"}, {"sha": "2fa77be644e312bf898427dd7435e239d81946be", "filename": "src/librustc/middle/const_val.rs", "status": "removed", "additions": 0, "deletions": 178, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/e3bf634e060bc2f8665878288bcea02008ca346e/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bf634e060bc2f8665878288bcea02008ca346e/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=e3bf634e060bc2f8665878288bcea02008ca346e", "patch": "@@ -1,178 +0,0 @@\n-// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use hir::def_id::DefId;\n-use ty;\n-use ty::subst::Substs;\n-use ty::query::TyCtxtAt;\n-use mir::interpret::ConstValue;\n-use errors::DiagnosticBuilder;\n-\n-use graphviz::IntoCow;\n-use syntax_pos::Span;\n-use syntax::ast;\n-\n-use std::borrow::Cow;\n-use rustc_data_structures::sync::Lrc;\n-\n-pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ConstEvalErr<'tcx>>;\n-\n-#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n-pub enum ConstVal<'tcx> {\n-    Unevaluated(DefId, &'tcx Substs<'tcx>),\n-    Value(ConstValue<'tcx>),\n-}\n-\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct ConstEvalErr<'tcx> {\n-    pub span: Span,\n-    pub kind: Lrc<ErrKind<'tcx>>,\n-}\n-\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum ErrKind<'tcx> {\n-\n-    CouldNotResolve,\n-    TypeckError,\n-    CheckMatchError,\n-    Miri(::mir::interpret::EvalError<'tcx>, Vec<FrameInfo>),\n-}\n-\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct FrameInfo {\n-    pub span: Span,\n-    pub location: String,\n-    pub lint_root: Option<ast::NodeId>,\n-}\n-\n-#[derive(Clone, Debug)]\n-pub enum ConstEvalErrDescription<'a, 'tcx: 'a> {\n-    Simple(Cow<'a, str>),\n-    Backtrace(&'a ::mir::interpret::EvalError<'tcx>, &'a [FrameInfo]),\n-}\n-\n-impl<'a, 'tcx> ConstEvalErrDescription<'a, 'tcx> {\n-    /// Return a one-line description of the error, for lints and such\n-    pub fn into_oneline(self) -> Cow<'a, str> {\n-        match self {\n-            ConstEvalErrDescription::Simple(simple) => simple,\n-            ConstEvalErrDescription::Backtrace(miri, _) => format!(\"{}\", miri).into_cow(),\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n-    pub fn description(&'a self) -> ConstEvalErrDescription<'a, 'tcx> {\n-        use self::ErrKind::*;\n-        use self::ConstEvalErrDescription::*;\n-\n-        macro_rules! simple {\n-            ($msg:expr) => ({ Simple($msg.into_cow()) });\n-            ($fmt:expr, $($arg:tt)+) => ({\n-                Simple(format!($fmt, $($arg)+).into_cow())\n-            })\n-        }\n-\n-        match *self.kind {\n-            CouldNotResolve => simple!(\"could not resolve\"),\n-            TypeckError => simple!(\"type-checking failed\"),\n-            CheckMatchError => simple!(\"match-checking failed\"),\n-            Miri(ref err, ref trace) => Backtrace(err, trace),\n-        }\n-    }\n-\n-    pub fn struct_error(&self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str)\n-        -> Option<DiagnosticBuilder<'tcx>>\n-    {\n-        self.struct_generic(tcx, message, None, true)\n-    }\n-\n-    pub fn report_as_error(&self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str\n-    ) {\n-        let err = self.struct_generic(tcx, message, None, true);\n-        if let Some(mut err) = err {\n-            err.emit();\n-        }\n-    }\n-\n-    pub fn report_as_lint(&self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str,\n-        lint_root: ast::NodeId,\n-    ) {\n-        let lint = self.struct_generic(\n-            tcx,\n-            message,\n-            Some(lint_root),\n-            false,\n-        );\n-        if let Some(mut lint) = lint {\n-            lint.emit();\n-        }\n-    }\n-\n-    fn struct_generic(\n-        &self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str,\n-        lint_root: Option<ast::NodeId>,\n-        as_err: bool,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n-        let (msg, frames): (_, &[_]) = match *self.kind {\n-            ErrKind::TypeckError | ErrKind::CheckMatchError => return None,\n-            ErrKind::Miri(ref miri, ref frames) => {\n-                match miri.kind {\n-                    ::mir::interpret::EvalErrorKind::TypeckError |\n-                    ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n-                    ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n-                        inner.struct_generic(tcx, \"referenced constant\", lint_root, as_err)?.emit();\n-                        (miri.to_string(), frames)\n-                    },\n-                    _ => (miri.to_string(), frames),\n-                }\n-            }\n-            _ => (self.description().into_oneline().to_string(), &[]),\n-        };\n-        trace!(\"reporting const eval failure at {:?}\", self.span);\n-        let mut err = if as_err {\n-            struct_error(tcx, message)\n-        } else {\n-            let node_id = frames\n-                .iter()\n-                .rev()\n-                .filter_map(|frame| frame.lint_root)\n-                .next()\n-                .or(lint_root)\n-                .expect(\"some part of a failing const eval must be local\");\n-            tcx.struct_span_lint_node(\n-                ::rustc::lint::builtin::CONST_ERR,\n-                node_id,\n-                tcx.span,\n-                message,\n-            )\n-        };\n-        err.span_label(self.span, msg);\n-        for FrameInfo { span, location, .. } in frames {\n-            err.span_label(*span, format!(\"inside call to `{}`\", location));\n-        }\n-        Some(err)\n-    }\n-}\n-\n-pub fn struct_error<'a, 'gcx, 'tcx>(\n-    tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-    msg: &str,\n-) -> DiagnosticBuilder<'tcx> {\n-    struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n-}"}, {"sha": "86427bb2382cb5bc7004ec8bd01b10818e289f81", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 114, "deletions": 2, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,16 +1,121 @@\n use std::{fmt, env};\n \n use mir;\n-use middle::const_val::ConstEvalErr;\n use ty::{FnSig, Ty, layout};\n use ty::layout::{Size, Align};\n+use rustc_data_structures::sync::Lrc;\n \n use super::{\n     Pointer, Lock, AccessKind\n };\n \n use backtrace::Backtrace;\n \n+use ty;\n+use ty::query::TyCtxtAt;\n+use errors::DiagnosticBuilder;\n+\n+use syntax_pos::Span;\n+use syntax::ast;\n+\n+pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>;\n+\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct ConstEvalErr<'tcx> {\n+    pub span: Span,\n+    pub error: ::mir::interpret::EvalError<'tcx>,\n+    pub stacktrace: Vec<FrameInfo>,\n+}\n+\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct FrameInfo {\n+    pub span: Span,\n+    pub location: String,\n+    pub lint_root: Option<ast::NodeId>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n+    pub fn struct_error(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str)\n+        -> Option<DiagnosticBuilder<'tcx>>\n+    {\n+        self.struct_generic(tcx, message, None)\n+    }\n+\n+    pub fn report_as_error(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str\n+    ) {\n+        let err = self.struct_generic(tcx, message, None);\n+        if let Some(mut err) = err {\n+            err.emit();\n+        }\n+    }\n+\n+    pub fn report_as_lint(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str,\n+        lint_root: ast::NodeId,\n+    ) {\n+        let lint = self.struct_generic(\n+            tcx,\n+            message,\n+            Some(lint_root),\n+        );\n+        if let Some(mut lint) = lint {\n+            lint.emit();\n+        }\n+    }\n+\n+    fn struct_generic(\n+        &self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str,\n+        lint_root: Option<ast::NodeId>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        match self.error.kind {\n+            ::mir::interpret::EvalErrorKind::TypeckError |\n+            ::mir::interpret::EvalErrorKind::TooGeneric |\n+            ::mir::interpret::EvalErrorKind::CheckMatchError |\n+            ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n+            ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n+                inner.struct_generic(tcx, \"referenced constant has errors\", lint_root)?.emit();\n+            },\n+            _ => {},\n+        }\n+        trace!(\"reporting const eval failure at {:?}\", self.span);\n+        let mut err = if let Some(lint_root) = lint_root {\n+            let node_id = self.stacktrace\n+                .iter()\n+                .rev()\n+                .filter_map(|frame| frame.lint_root)\n+                .next()\n+                .unwrap_or(lint_root);\n+            tcx.struct_span_lint_node(\n+                ::rustc::lint::builtin::CONST_ERR,\n+                node_id,\n+                tcx.span,\n+                message,\n+            )\n+        } else {\n+            struct_error(tcx, message)\n+        };\n+        err.span_label(self.span, self.error.to_string());\n+        for FrameInfo { span, location, .. } in &self.stacktrace {\n+            err.span_label(*span, format!(\"inside call to `{}`\", location));\n+        }\n+        Some(err)\n+    }\n+}\n+\n+pub fn struct_error<'a, 'gcx, 'tcx>(\n+    tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+    msg: &str,\n+) -> DiagnosticBuilder<'tcx> {\n+    struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n+}\n+\n #[derive(Debug, Clone, RustcEncodable, RustcDecodable)]\n pub struct EvalError<'tcx> {\n     pub kind: EvalErrorKind<'tcx, u64>,\n@@ -150,9 +255,12 @@ pub enum EvalErrorKind<'tcx, O> {\n     UnimplementedTraitSelection,\n     /// Abort in case type errors are reached\n     TypeckError,\n+    /// Resolution can fail if we are in a too generic context\n+    TooGeneric,\n+    CheckMatchError,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n-    ReferencedConstant(ConstEvalErr<'tcx>),\n+    ReferencedConstant(Lrc<ConstEvalErr<'tcx>>),\n     GeneratorResumedAfterReturn,\n     GeneratorResumedAfterPanic,\n }\n@@ -268,6 +376,10 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"there were unresolved type arguments during trait selection\",\n             TypeckError =>\n                 \"encountered constants with type errors, stopping evaluation\",\n+            TooGeneric =>\n+                \"encountered overly generic constant\",\n+            CheckMatchError =>\n+                \"match checking failed\",\n             ReferencedConstant(_) =>\n                 \"referenced constant has errors\",\n             Overflow(mir::BinOp::Add) => \"attempt to add with overflow\","}, {"sha": "018c2446054be5080f2870d1804f3a32be31d171", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -8,7 +8,10 @@ macro_rules! err {\n mod error;\n mod value;\n \n-pub use self::error::{EvalError, EvalResult, EvalErrorKind, AssertMessage};\n+pub use self::error::{\n+    EvalError, EvalResult, EvalErrorKind, AssertMessage, ConstEvalErr, struct_error,\n+    FrameInfo, ConstEvalResult,\n+};\n \n pub use self::value::{Scalar, Value, ConstValue};\n "}, {"sha": "24595c9328208a2a1183e1b11baad07ec9f11f17", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -2,13 +2,19 @@\n \n use ty::layout::{Align, HasDataLayout, Size};\n use ty;\n+use ty::subst::Substs;\n+use hir::def_id::DefId;\n \n use super::{EvalResult, Pointer, PointerArithmetic, Allocation};\n \n /// Represents a constant value in Rust. ByVal and ScalarPair are optimizations which\n /// matches Value's optimizations for easy conversions between these two types\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n+    /// Never returned from the `const_eval` query, but the HIR contains these frequently in order\n+    /// to allow HIR creation to happen for everything before needing to be able to run constant\n+    /// evaluation\n+    Unevaluated(DefId, &'tcx Substs<'tcx>),\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs which use Scalar::undef()\n     Scalar(Scalar),\n     /// Used only for types with layout::abi::ScalarPair\n@@ -30,6 +36,7 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn to_byval_value(&self) -> Option<Value> {\n         match *self {\n+            ConstValue::Unevaluated(..) |\n             ConstValue::ByRef(..) => None,\n             ConstValue::ScalarPair(a, b) => Some(Value::ScalarPair(a, b)),\n             ConstValue::Scalar(val) => Some(Value::Scalar(val)),\n@@ -44,7 +51,8 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn to_scalar(&self) -> Option<Scalar> {\n         match *self {\n-            ConstValue::ByRef(..) => None,\n+            ConstValue::Unevaluated(..) |\n+            ConstValue::ByRef(..) |\n             ConstValue::ScalarPair(..) => None,\n             ConstValue::Scalar(val) => Some(val),\n         }"}, {"sha": "2198e3f6b318ef1c60f2f4af577a818eff50bd41", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -2162,18 +2162,12 @@ impl<'tcx> Debug for Literal<'tcx> {\n     }\n }\n \n-/// Write a `ConstVal` in a way closer to the original source code than the `Debug` output.\n+/// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ty::Const) -> fmt::Result {\n-    use middle::const_val::ConstVal;\n-    match const_val.val {\n-        ConstVal::Unevaluated(..) => write!(fmt, \"{:?}\", const_val),\n-        ConstVal::Value(val) => {\n-            if let Some(value) = val.to_byval_value() {\n-                print_miri_value(value, const_val.ty, fmt)\n-            } else {\n-                write!(fmt, \"{:?}:{}\", val, const_val.ty)\n-            }\n-        }\n+    if let Some(value) = const_val.to_byval_value() {\n+        print_miri_value(value, const_val.ty, fmt)\n+    } else {\n+        write!(fmt, \"{:?}:{}\", const_val.val, const_val.ty)\n     }\n }\n "}, {"sha": "e97171c481f1dd25c04fea9efdb7280be14eb2f1", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -16,7 +16,8 @@ use rustc_data_structures::obligation_forest::{Error, ForestObligation, Obligati\n use rustc_data_structures::obligation_forest::{ObligationProcessor, ProcessResult};\n use std::marker::PhantomData;\n use hir::def_id::DefId;\n-use middle::const_val::{ConstEvalErr, ErrKind};\n+use mir::interpret::ConstEvalErr;\n+use mir::interpret::EvalErrorKind;\n \n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n@@ -501,8 +502,9 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                                     ProcessResult::Error(\n                                         CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n                                             span: obligation.cause.span,\n-                                            kind: ErrKind::CouldNotResolve.into(),\n-                                        }))\n+                                            error: EvalErrorKind::TooGeneric.into(),\n+                                            stacktrace: vec![],\n+                                        }.into()))\n                                     )\n                                 }\n                             },"}, {"sha": "0290f2e3b13f08e335a1319ca22b64108e9d9517", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -22,7 +22,7 @@ use hir;\n use hir::def_id::DefId;\n use infer::outlives::env::OutlivesEnvironment;\n use middle::region;\n-use middle::const_val::ConstEvalErr;\n+use mir::interpret::ConstEvalErr;\n use ty::subst::Substs;\n use ty::{self, AdtKind, Slice, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n use ty::error::{ExpectedFound, TypeError};\n@@ -381,7 +381,7 @@ pub enum SelectionError<'tcx> {\n                                 ty::PolyTraitRef<'tcx>,\n                                 ty::error::TypeError<'tcx>),\n     TraitNotObjectSafe(DefId),\n-    ConstEvalFailure(ConstEvalErr<'tcx>),\n+    ConstEvalFailure(Lrc<ConstEvalErr<'tcx>>),\n     Overflow,\n }\n "}, {"sha": "1052d029e0d648e5a0f11f2ffbf51c7bebf01f79", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -28,7 +28,7 @@ use super::util;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use infer::type_variable::TypeVariableOrigin;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast::Ident;\n@@ -426,7 +426,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n+        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.selcx.tcx().global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_skol() {"}, {"sha": "a67383fb79aa06e2267e39ed5958bf4eb51487f8", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -14,8 +14,7 @@\n \n use infer::{InferCtxt, InferOk};\n use infer::at::At;\n-use middle::const_val::ConstVal;\n-use mir::interpret::GlobalId;\n+use mir::interpret::{GlobalId, ConstValue};\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use traits::project::Normalized;\n use ty::{self, Ty, TyCtxt};\n@@ -195,7 +194,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n+        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.infcx.tcx.global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_skol() {"}, {"sha": "39e358803cbe84f7a148de58137875b746ba8af8", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -172,7 +172,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n                 })\n             }\n             super::TraitNotObjectSafe(def_id) => Some(super::TraitNotObjectSafe(def_id)),\n-            super::ConstEvalFailure(ref err) => tcx.lift(err).map(super::ConstEvalFailure),\n+            super::ConstEvalFailure(ref err) => tcx.lift(&**err).map(|err| super::ConstEvalFailure(\n+                err.into(),\n+            )),\n             super::Overflow => bug!(), // FIXME: ape ConstEvalFailure?\n         }\n     }"}, {"sha": "3718c436b3a0019fa5d42321449c0b1debabf39c", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use ty::subst::Substs;\n use ty::{self, Ty, TypeFlags, TypeFoldable};\n \n@@ -233,12 +233,9 @@ impl FlagComputation {\n \n     fn add_const(&mut self, constant: &ty::Const) {\n         self.add_ty(constant.ty);\n-        match constant.val {\n-            ConstVal::Value(_) => {}\n-            ConstVal::Unevaluated(_, substs) => {\n-                self.add_flags(TypeFlags::HAS_PROJECTION);\n-                self.add_substs(substs);\n-            }\n+        if let ConstValue::Unevaluated(_, substs) = constant.val {\n+            self.add_flags(TypeFlags::HAS_PROJECTION);\n+            self.add_substs(substs);\n         }\n     }\n "}, {"sha": "f55a512908499a4b7817bea0b576ec1414d8dabc", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -39,7 +39,7 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use hir::def_id::DefId;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n@@ -685,7 +685,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n-        if let ConstVal::Unevaluated(..) = c.val {\n+        if let ConstValue::Unevaluated(..) = c.val {\n             let projection_flags = TypeFlags::HAS_NORMALIZABLE_PROJECTION |\n                 TypeFlags::HAS_PROJECTION;\n             if projection_flags.intersects(self.flags) {"}, {"sha": "1f647d811b08931145801d1e2d974ca7a34ff68b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -2065,7 +2065,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     })\n                 } else {\n                     info!(\"invalid enum discriminant: {:#?}\", val);\n-                    ::middle::const_val::struct_error(\n+                    ::mir::interpret::struct_error(\n                         tcx.at(tcx.def_span(expr_did)),\n                         \"constant evaluation of enum discriminant resulted in non-integer\",\n                     ).emit();"}, {"sha": "229caeb95d62105d77a15051c6edacfeac18ef2e", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -11,7 +11,7 @@\n use dep_graph::SerializedDepNodeIndex;\n use dep_graph::DepNode;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n-use mir::interpret::{GlobalId, ConstValue};\n+use mir::interpret::GlobalId;\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n     CanonicalTypeOpNormalizeGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n@@ -191,8 +191,8 @@ impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_value_to_allocation<'tcx> {\n-    fn describe(_tcx: TyCtxt, (val, ty): (ConstValue<'tcx>, Ty<'tcx>)) -> String {\n-        format!(\"converting value `{:?}` ({}) to an allocation\", val, ty)\n+    fn describe(_tcx: TyCtxt, val: &'tcx ty::Const<'tcx>) -> String {\n+        format!(\"converting value `{:?}` to an allocation\", val)\n     }\n }\n "}, {"sha": "8423b02ee7582d2e73f74f30ba285592aeffba3b", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     }\n }\n \n-impl<'tcx> Key for (mir::interpret::ConstValue<'tcx>, Ty<'tcx>) {\n+impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "77644cdf02b116d63e173a9d5c9f97916da3941c", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -26,10 +26,10 @@ use middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n use middle::stability::{self, DeprecationEntry};\n use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n-use middle::const_val::EvalResult;\n+use mir::interpret::ConstEvalResult;\n use mir::mono::{CodegenUnit, Stats};\n use mir;\n-use mir::interpret::{GlobalId, Allocation, ConstValue};\n+use mir::interpret::{GlobalId, Allocation};\n use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n@@ -230,11 +230,11 @@ define_queries! { <'tcx>\n     /// Results of evaluating const items or constants embedded in\n     /// other items (such as enum variant explicit discriminants).\n     [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n-        -> EvalResult<'tcx>,\n+        -> ConstEvalResult<'tcx>,\n \n     /// Converts a constant value to an constant allocation\n     [] fn const_value_to_allocation: const_value_to_allocation(\n-        (ConstValue<'tcx>, Ty<'tcx>)\n+        &'tcx ty::Const<'tcx>\n     ) -> &'tcx Allocation,\n \n     [] fn check_match: CheckMatch(DefId)\n@@ -570,9 +570,9 @@ fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n }\n \n fn const_value_to_allocation<'tcx>(\n-    (val, ty): (ConstValue<'tcx>, Ty<'tcx>)\n+    val: &'tcx ty::Const<'tcx>,\n ) -> DepConstructor<'tcx> {\n-    DepConstructor::ConstValueToAllocation { val, ty }\n+    DepConstructor::ConstValueToAllocation { val }\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "265c6aee397266a298e134c19063f4b7719db234", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -14,7 +14,7 @@\n //! type equality, etc.\n \n use hir::def_id::DefId;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use ty::subst::{Kind, UnpackedKind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n@@ -474,7 +474,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                     return Ok(s);\n                 }\n                 match x.val {\n-                    ConstVal::Unevaluated(def_id, substs) => {\n+                    ConstValue::Unevaluated(def_id, substs) => {\n                         // FIXME(eddyb) get the right param_env.\n                         let param_env = ty::ParamEnv::empty();\n                         match tcx.lift_to_global(&substs) {"}, {"sha": "a648dc6e7e7880a166b002760c3b6d4604c2ee2b", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -13,12 +13,11 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use middle::const_val::{self, ConstVal, ConstEvalErr};\n+use mir::interpret::{ConstValue, ConstEvalErr};\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use rustc_data_structures::sync::Lrc;\n use mir::interpret;\n \n use std::rc::Rc;\n@@ -462,10 +461,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n     type Lifted = ConstEvalErr<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&*self.kind).map(|kind| {\n+        tcx.lift(&self.error).map(|error| {\n             ConstEvalErr {\n                 span: self.span,\n-                kind: Lrc::new(kind),\n+                stacktrace: self.stacktrace.clone(),\n+                error,\n             }\n         })\n     }\n@@ -577,7 +577,9 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             PathNotFound(ref v) => PathNotFound(v.clone()),\n             UnimplementedTraitSelection => UnimplementedTraitSelection,\n             TypeckError => TypeckError,\n-            ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(err)?),\n+            TooGeneric => TooGeneric,\n+            CheckMatchError => CheckMatchError,\n+            ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(&**err)?.into()),\n             OverflowNeg => OverflowNeg,\n             Overflow(op) => Overflow(op),\n             DivisionByZero => DivisionByZero,\n@@ -588,20 +590,6 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n-    type Lifted = const_val::ErrKind<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        use middle::const_val::ErrKind::*;\n-\n-        Some(match *self {\n-            CouldNotResolve => CouldNotResolve,\n-            TypeckError => TypeckError,\n-            CheckMatchError => CheckMatchError,\n-            Miri(ref e, ref frames) => return tcx.lift(e).map(|e| Miri(e, frames.clone())),\n-        })\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for ty::layout::LayoutError<'a> {\n     type Lifted = ty::layout::LayoutError<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -1139,20 +1127,24 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ConstVal<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n-            ConstVal::Value(v) => ConstVal::Value(v),\n-            ConstVal::Unevaluated(def_id, substs) => {\n-                ConstVal::Unevaluated(def_id, substs.fold_with(folder))\n+            ConstValue::Scalar(v) => ConstValue::Scalar(v),\n+            ConstValue::ScalarPair(a, b) => ConstValue::ScalarPair(a, b),\n+            ConstValue::ByRef(alloc, offset) => ConstValue::ByRef(alloc, offset),\n+            ConstValue::Unevaluated(def_id, substs) => {\n+                ConstValue::Unevaluated(def_id, substs.fold_with(folder))\n             }\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n-            ConstVal::Value(_) => false,\n-            ConstVal::Unevaluated(_, substs) => substs.visit_with(visitor),\n+            ConstValue::Scalar(_) |\n+            ConstValue::ScalarPair(_, _) |\n+            ConstValue::ByRef(_, _) => false,\n+            ConstValue::Unevaluated(_, substs) => substs.visit_with(visitor),\n         }\n     }\n }"}, {"sha": "996ebd722fd4d3bf4393a72b1bf7442a45e1dab9", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -12,15 +12,15 @@\n \n use hir::def_id::DefId;\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use middle::region;\n use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n use ty::subst::{Substs, Subst, Kind, UnpackedKind};\n use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use ty::{Slice, TyS, ParamEnvAnd, ParamEnv};\n use util::captures::Captures;\n-use mir::interpret::{Scalar, Pointer, Value, ConstValue};\n+use mir::interpret::{Scalar, Pointer, Value};\n \n use std::iter;\n use std::cmp::Ordering;\n@@ -1859,7 +1859,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n pub struct Const<'tcx> {\n     pub ty: Ty<'tcx>,\n \n-    pub val: ConstVal<'tcx>,\n+    pub val: ConstValue<'tcx>,\n }\n \n impl<'tcx> Const<'tcx> {\n@@ -1870,15 +1870,15 @@ impl<'tcx> Const<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> &'tcx Self {\n         tcx.mk_const(Const {\n-            val: ConstVal::Unevaluated(def_id, substs),\n+            val: ConstValue::Unevaluated(def_id, substs),\n             ty,\n         })\n     }\n \n     #[inline]\n-    pub fn from_const_val(\n+    pub fn from_const_value(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        val: ConstVal<'tcx>,\n+        val: ConstValue<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> &'tcx Self {\n         tcx.mk_const(Const {\n@@ -1887,15 +1887,6 @@ impl<'tcx> Const<'tcx> {\n         })\n     }\n \n-    #[inline]\n-    pub fn from_const_value(\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        val: ConstValue<'tcx>,\n-        ty: Ty<'tcx>,\n-    ) -> &'tcx Self {\n-        Self::from_const_val(tcx, ConstVal::Value(val), ty)\n-    }\n-\n     #[inline]\n     pub fn from_byval_value(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n@@ -1956,34 +1947,22 @@ impl<'tcx> Const<'tcx> {\n         }\n         let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).ok()?.size;\n-        match self.val {\n-            ConstVal::Value(val) => val.to_bits(size),\n-            _ => None,\n-        }\n+        self.val.to_bits(size)\n     }\n \n     #[inline]\n     pub fn to_ptr(&self) -> Option<Pointer> {\n-        match self.val {\n-            ConstVal::Value(val) => val.to_ptr(),\n-            _ => None,\n-        }\n+        self.val.to_ptr()\n     }\n \n     #[inline]\n     pub fn to_byval_value(&self) -> Option<Value> {\n-        match self.val {\n-            ConstVal::Value(val) => val.to_byval_value(),\n-            _ => None,\n-        }\n+        self.val.to_byval_value()\n     }\n \n     #[inline]\n     pub fn to_scalar(&self) -> Option<Scalar> {\n-        match self.val {\n-            ConstVal::Value(val) => val.to_scalar(),\n-            _ => None,\n-        }\n+        self.val.to_scalar()\n     }\n \n     #[inline]\n@@ -1995,10 +1974,7 @@ impl<'tcx> Const<'tcx> {\n         assert_eq!(self.ty, ty.value);\n         let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).ok()?.size;\n-        match self.val {\n-            ConstVal::Value(val) => val.to_bits(size),\n-            _ => None,\n-        }\n+        self.val.to_bits(size)\n     }\n \n     #[inline]"}, {"sha": "d12f73144269bf7e87676fb038526149b34d2008", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -11,7 +11,7 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use ty::{self, Ty};\n use rustc_data_structures::small_vec::SmallVec;\n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n@@ -141,11 +141,8 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n }\n \n fn push_const<'tcx>(stack: &mut TypeWalkerStack<'tcx>, constant: &'tcx ty::Const<'tcx>) {\n-    match constant.val {\n-        ConstVal::Value(_) => {}\n-        ConstVal::Unevaluated(_, substs) => {\n-            stack.extend(substs.types().rev());\n-        }\n+    if let ConstValue::Unevaluated(_, substs) = constant.val {\n+        stack.extend(substs.types().rev());\n     }\n     stack.push(constant.ty);\n }"}, {"sha": "5376acca0d8cdabf5402fc13631a2731f63abfb9", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use infer::InferCtxt;\n use ty::subst::Substs;\n use traits;\n@@ -216,18 +216,15 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n     /// into `self.out`.\n     fn compute_const(&mut self, constant: &'tcx ty::Const<'tcx>) {\n         self.require_sized(constant.ty, traits::ConstSized);\n-        match constant.val {\n-            ConstVal::Value(_) => {}\n-            ConstVal::Unevaluated(def_id, substs) => {\n-                let obligations = self.nominal_obligations(def_id, substs);\n-                self.out.extend(obligations);\n-\n-                let predicate = ty::Predicate::ConstEvaluatable(def_id, substs);\n-                let cause = self.cause(traits::MiscObligation);\n-                self.out.push(traits::Obligation::new(cause,\n-                                                      self.param_env,\n-                                                      predicate));\n-            }\n+        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n+            let obligations = self.nominal_obligations(def_id, substs);\n+            self.out.extend(obligations);\n+\n+            let predicate = ty::Predicate::ConstEvaluatable(def_id, substs);\n+            let cause = self.cause(traits::MiscObligation);\n+            self.out.push(traits::Obligation::new(cause,\n+                                                    self.param_env,\n+                                                    predicate));\n         }\n     }\n "}, {"sha": "deb8ac691fb3b2d772d6b7b17256c0bcc2d4bc8e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use hir::map::definitions::DefPathData;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstValue;\n use middle::region::{self, BlockRemainder};\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n@@ -1195,12 +1195,12 @@ define_print! {\n                 TyArray(ty, sz) => {\n                     print!(f, cx, write(\"[\"), print(ty), write(\"; \"))?;\n                     match sz.val {\n-                        ConstVal::Value(..) => ty::tls::with(|tcx| {\n-                            write!(f, \"{}\", sz.unwrap_usize(tcx))\n-                        })?,\n-                        ConstVal::Unevaluated(_def_id, _substs) => {\n+                        ConstValue::Unevaluated(_def_id, _substs) => {\n                             write!(f, \"_\")?;\n                         }\n+                        _ => ty::tls::with(|tcx| {\n+                            write!(f, \"{}\", sz.unwrap_usize(tcx))\n+                        })?,\n                     }\n                     write!(f, \"]\")\n                 }"}, {"sha": "a4709739a23ddabcbb587813975a407d82fe9af3", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1381,7 +1381,6 @@ mod temp_stable_hash_impls {\n \n fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n     use rustc::mir::interpret::GlobalId;\n-    use rustc::middle::const_val::ConstVal;\n \n     info!(\"loading wasm section {:?}\", id);\n \n@@ -1399,12 +1398,6 @@ fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     let val = tcx.const_eval(param_env.and(cid)).unwrap();\n-\n-    let const_val = match val.val {\n-        ConstVal::Value(val) => val,\n-        ConstVal::Unevaluated(..) => bug!(\"should be evaluated\"),\n-    };\n-\n-    let alloc = tcx.const_value_to_allocation((const_val, val.ty));\n+    let alloc = tcx.const_value_to_allocation(val);\n     (section.to_string(), alloc.bytes.clone())\n }"}, {"sha": "bbe0e34b48f2642bb1754c9b801b7c17de0250d2", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n use llvm::{self, ValueRef};\n-use rustc::middle::const_val::{ConstVal, ConstEvalErr};\n+use rustc::mir::interpret::ConstEvalErr;\n use rustc_mir::interpret::{read_target_uint, const_val_field};\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::sync::Lrc;\n use rustc::mir::interpret::{GlobalId, Pointer, Scalar, Allocation, ConstValue, AllocType};\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, HasDataLayout, LayoutOf, Size};\n@@ -117,7 +118,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx, alloc: &Allocation) -> ValueRef {\n pub fn codegen_static_initializer<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     def_id: DefId)\n-    -> Result<ValueRef, ConstEvalErr<'tcx>>\n+    -> Result<ValueRef, Lrc<ConstEvalErr<'tcx>>>\n {\n     let instance = ty::Instance::mono(cx.tcx, def_id);\n     let cid = GlobalId {\n@@ -128,39 +129,38 @@ pub fn codegen_static_initializer<'a, 'tcx>(\n     let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n \n     let alloc = match static_.val {\n-        ConstVal::Value(ConstValue::ByRef(alloc, n)) if n.bytes() == 0 => alloc,\n+        ConstValue::ByRef(alloc, n) if n.bytes() == 0 => alloc,\n         _ => bug!(\"static const eval returned {:#?}\", static_),\n     };\n     Ok(const_alloc_to_llvm(cx, alloc))\n }\n \n impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n-    fn const_to_const_value(\n+    fn fully_evaluate(\n         &mut self,\n         bx: &Builder<'a, 'tcx>,\n         constant: &'tcx ty::Const<'tcx>,\n-    ) -> Result<ConstValue<'tcx>, ConstEvalErr<'tcx>> {\n+    ) -> Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n         match constant.val {\n-            ConstVal::Unevaluated(def_id, ref substs) => {\n+            ConstValue::Unevaluated(def_id, ref substs) => {\n                 let tcx = bx.tcx();\n                 let param_env = ty::ParamEnv::reveal_all();\n                 let instance = ty::Instance::resolve(tcx, param_env, def_id, substs).unwrap();\n                 let cid = GlobalId {\n                     instance,\n                     promoted: None,\n                 };\n-                let c = tcx.const_eval(param_env.and(cid))?;\n-                self.const_to_const_value(bx, c)\n+                tcx.const_eval(param_env.and(cid))\n             },\n-            ConstVal::Value(val) => Ok(val),\n+            _ => Ok(constant),\n         }\n     }\n \n-    pub fn mir_constant_to_const_value(\n+    pub fn eval_mir_constant(\n         &mut self,\n         bx: &Builder<'a, 'tcx>,\n         constant: &mir::Constant<'tcx>,\n-    ) -> Result<ConstValue<'tcx>, ConstEvalErr<'tcx>> {\n+    ) -> Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n         match constant.literal {\n             mir::Literal::Promoted { index } => {\n                 let param_env = ty::ParamEnv::reveal_all();\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n             mir::Literal::Value { value } => {\n                 Ok(self.monomorphize(&value))\n             }\n-        }.and_then(|c| self.const_to_const_value(bx, c))\n+        }.and_then(|c| self.fully_evaluate(bx, c))\n     }\n \n     /// process constant containing SIMD shuffle indices\n@@ -182,22 +182,21 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         bx: &Builder<'a, 'tcx>,\n         constant: &mir::Constant<'tcx>,\n     ) -> (ValueRef, Ty<'tcx>) {\n-        self.mir_constant_to_const_value(bx, constant)\n+        self.eval_mir_constant(bx, constant)\n             .and_then(|c| {\n-                let field_ty = constant.ty.builtin_index().unwrap();\n-                let fields = match constant.ty.sty {\n+                let field_ty = c.ty.builtin_index().unwrap();\n+                let fields = match c.ty.sty {\n                     ty::TyArray(_, n) => n.unwrap_usize(bx.tcx()),\n                     ref other => bug!(\"invalid simd shuffle type: {}\", other),\n                 };\n-                let values: Result<Vec<ValueRef>, _> = (0..fields).map(|field| {\n+                let values: Result<Vec<ValueRef>, Lrc<_>> = (0..fields).map(|field| {\n                     let field = const_val_field(\n                         bx.tcx(),\n                         ty::ParamEnv::reveal_all(),\n                         self.instance,\n                         None,\n                         mir::Field::new(field as usize),\n                         c,\n-                        constant.ty,\n                     )?;\n                     if let Some(prim) = field.to_scalar() {\n                         let layout = bx.cx.layout_of(field_ty);\n@@ -214,7 +213,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     }\n                 }).collect();\n                 let llval = C_struct(bx.cx, &values?, false);\n-                Ok((llval, constant.ty))\n+                Ok((llval, c.ty))\n             })\n             .unwrap_or_else(|e| {\n                 e.report_as_error("}, {"sha": "3d3a4400bd8108abca11973e5693f839dbc5fc32", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -9,12 +9,13 @@\n // except according to those terms.\n \n use llvm::{ValueRef, LLVMConstInBoundsGEP};\n-use rustc::middle::const_val::ConstEvalErr;\n+use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n use rustc::mir::interpret::ConstValue;\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::sync::Lrc;\n \n use base;\n use common::{self, CodegenCx, C_null, C_undef, C_usize};\n@@ -95,16 +96,16 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n     }\n \n     pub fn from_const(bx: &Builder<'a, 'tcx>,\n-                      val: ConstValue<'tcx>,\n-                      ty: ty::Ty<'tcx>)\n-                      -> Result<OperandRef<'tcx>, ConstEvalErr<'tcx>> {\n-        let layout = bx.cx.layout_of(ty);\n+                      val: &'tcx ty::Const<'tcx>)\n+                      -> Result<OperandRef<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n+        let layout = bx.cx.layout_of(val.ty);\n \n         if layout.is_zst() {\n             return Ok(OperandRef::new_zst(bx.cx, layout));\n         }\n \n-        let val = match val {\n+        let val = match val.val {\n+            ConstValue::Unevaluated(..) => bug!(),\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n                     layout::Abi::Scalar(ref x) => x,\n@@ -408,8 +409,8 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n \n             mir::Operand::Constant(ref constant) => {\n                 let ty = self.monomorphize(&constant.ty);\n-                self.mir_constant_to_const_value(bx, constant)\n-                    .and_then(|c| OperandRef::from_const(bx, c, ty))\n+                self.eval_mir_constant(bx, constant)\n+                    .and_then(|c| OperandRef::from_const(bx, c))\n                     .unwrap_or_else(|err| {\n                         match constant.literal {\n                             mir::Literal::Promoted { .. } => {"}, {"sha": "83361ea57c371e49aac538747b06130ed0351874", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -12,8 +12,6 @@ use self::Constructor::*;\n use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n-use rustc::middle::const_val::ConstVal;\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -544,14 +542,9 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n \n     for row in patterns {\n         match *row.kind {\n-            PatternKind::Constant {\n-                value: const_val @ &ty::Const {\n-                    val: ConstVal::Value(..),\n-                    ..\n-                }\n-            } => {\n-                if let Some(ptr) = const_val.to_ptr() {\n-                    let is_array_ptr = const_val.ty\n+            PatternKind::Constant { value } => {\n+                if let Some(ptr) = value.to_ptr() {\n+                    let is_array_ptr = value.ty\n                         .builtin_deref(true)\n                         .and_then(|t| t.ty.builtin_index())\n                         .map_or(false, |t| t == cx.tcx.types.u8);\n@@ -933,13 +926,14 @@ fn slice_pat_covered_by_constructor<'tcx>(\n     suffix: &[Pattern<'tcx>]\n ) -> Result<bool, ErrorReported> {\n     let data: &[u8] = match *ctor {\n-        ConstantValue(&ty::Const { val: ConstVal::Value(const_val), ty }) => {\n-            let val = match const_val {\n-                ConstValue::ByRef(..) => bug!(\"unexpected ConstValue::ByRef\"),\n+        ConstantValue(const_val) => {\n+            let val = match const_val.val {\n+                ConstValue::Unevaluated(..) |\n+                ConstValue::ByRef(..) => bug!(\"unexpected ConstValue: {:?}\", const_val),\n                 ConstValue::Scalar(val) | ConstValue::ScalarPair(val, _) => val,\n             };\n             if let Ok(ptr) = val.to_ptr() {\n-                let is_array_ptr = ty\n+                let is_array_ptr = const_val.ty\n                     .builtin_deref(true)\n                     .and_then(|t| t.ty.builtin_index())\n                     .map_or(false, |t| t == tcx.types.u8);"}, {"sha": "e04cdcfa02773f520d4d0c1c06b78b133f78b775", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -140,13 +140,13 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n                 PatternError::FloatBug => {\n                     // FIXME(#31407) this is only necessary because float parsing is buggy\n-                    ::rustc::middle::const_val::struct_error(\n+                    ::rustc::mir::interpret::struct_error(\n                         self.tcx.at(pat_span),\n                         \"could not evaluate float literal (see issue #31407)\",\n                     ).emit();\n                 }\n                 PatternError::NonConstPath(span) => {\n-                    ::rustc::middle::const_val::struct_error(\n+                    ::rustc::mir::interpret::struct_error(\n                         self.tcx.at(span),\n                         \"runtime values cannot be referenced in patterns\",\n                     ).emit();"}, {"sha": "4d0e3e826e8789f01efa54b5c2328aea90093929", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -18,7 +18,6 @@ pub(crate) use self::check_match::check_match;\n \n use interpret::{const_val_field, const_variant_index, self};\n \n-use rustc::middle::const_val::ConstVal;\n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, Value};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, Region};\n@@ -122,13 +121,6 @@ pub enum PatternKind<'tcx> {\n     },\n }\n \n-fn print_const_val(value: &ty::Const, f: &mut fmt::Formatter) -> fmt::Result {\n-    match value.val {\n-        ConstVal::Value(..) => fmt_const_val(f, value),\n-        ConstVal::Unevaluated(..) => bug!(\"{:?} not printable in a pattern\", value)\n-    }\n-}\n-\n impl<'tcx> fmt::Display for Pattern<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.kind {\n@@ -236,15 +228,15 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                 write!(f, \"{}\", subpattern)\n             }\n             PatternKind::Constant { value } => {\n-                print_const_val(value, f)\n+                fmt_const_val(f, value)\n             }\n             PatternKind::Range { lo, hi, end } => {\n-                print_const_val(lo, f)?;\n+                fmt_const_val(f, lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"...\")?,\n                     RangeEnd::Excluded => write!(f, \"..\")?,\n                 }\n-                print_const_val(hi, f)\n+                fmt_const_val(f, hi)\n             }\n             PatternKind::Slice { ref prefix, ref slice, ref suffix } |\n             PatternKind::Array { ref prefix, ref slice, ref suffix } => {\n@@ -795,13 +787,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         debug!(\"const_to_pat: cv={:#?}\", cv);\n         let adt_subpattern = |i, variant_opt| {\n             let field = Field::new(i);\n-            let val = match cv.val {\n-                ConstVal::Value(miri) => const_val_field(\n-                    self.tcx, self.param_env, instance,\n-                    variant_opt, field, miri, cv.ty,\n-                ).expect(\"field access failed\"),\n-                _ => bug!(\"{:#?} is not a valid adt\", cv),\n-            };\n+            let val = const_val_field(\n+                self.tcx, self.param_env, instance,\n+                variant_opt, field, cv,\n+            ).expect(\"field access failed\");\n             self.const_to_pat(instance, val, id, span)\n         };\n         let adt_subpatterns = |n, variant_opt| {\n@@ -840,24 +829,18 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternKind::Wild\n             },\n             ty::TyAdt(adt_def, substs) if adt_def.is_enum() => {\n-                match cv.val {\n-                    ConstVal::Value(val) => {\n-                        let variant_index = const_variant_index(\n-                            self.tcx, self.param_env, instance, val, cv.ty\n-                        ).expect(\"const_variant_index failed\");\n-                        let subpatterns = adt_subpatterns(\n-                            adt_def.variants[variant_index].fields.len(),\n-                            Some(variant_index),\n-                        );\n-                        PatternKind::Variant {\n-                            adt_def,\n-                            substs,\n-                            variant_index,\n-                            subpatterns,\n-                        }\n-                    },\n-                    ConstVal::Unevaluated(..) =>\n-                        span_bug!(span, \"{:#?} is not a valid enum constant\", cv),\n+                let variant_index = const_variant_index(\n+                    self.tcx, self.param_env, instance, cv\n+                ).expect(\"const_variant_index failed\");\n+                let subpatterns = adt_subpatterns(\n+                    adt_def.variants[variant_index].fields.len(),\n+                    Some(variant_index),\n+                );\n+                PatternKind::Variant {\n+                    adt_def,\n+                    substs,\n+                    variant_index,\n+                    subpatterns,\n                 }\n             },\n             ty::TyAdt(adt_def, _) => {"}, {"sha": "35422b11bd733714524b7aa9c24289079b654a0c", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,6 +1,5 @@\n use rustc::hir;\n-use rustc::middle::const_val::{ConstEvalErr, ErrKind};\n-use rustc::middle::const_val::ErrKind::{TypeckError, CheckMatchError};\n+use rustc::mir::interpret::{ConstEvalErr};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n use rustc::ty::layout::{self, LayoutOf, Primitive};\n@@ -18,7 +17,6 @@ use super::{Place, EvalContext, StackPopCleanup, ValTy, PlaceExtra, Memory, Memo\n \n use std::fmt;\n use std::error::Error;\n-use rustc_data_structures::sync::Lrc;\n \n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -106,7 +104,8 @@ pub fn value_to_const_value<'tcx>(\n             let (frames, span) = ecx.generate_stacktrace(None);\n             let err = ConstEvalErr {\n                 span,\n-                kind: ErrKind::Miri(err, frames).into(),\n+                error: err,\n+                stacktrace: frames,\n             };\n             err.report_as_error(\n                 ecx.tcx,\n@@ -426,13 +425,13 @@ pub fn const_val_field<'a, 'tcx>(\n     instance: ty::Instance<'tcx>,\n     variant: Option<usize>,\n     field: mir::Field,\n-    value: ConstValue<'tcx>,\n-    ty: Ty<'tcx>,\n-) -> ::rustc::middle::const_val::EvalResult<'tcx> {\n-    trace!(\"const_val_field: {:?}, {:?}, {:?}, {:?}\", instance, field, value, ty);\n+    value: &'tcx ty::Const<'tcx>,\n+) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n+    trace!(\"const_val_field: {:?}, {:?}, {:?}\", instance, field, value);\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let result = (|| {\n-        let value = ecx.const_value_to_value(value, ty)?;\n+        let ty = value.ty;\n+        let value = ecx.const_to_value(value.val)?;\n         let layout = ecx.layout_of(ty)?;\n         let (ptr, align) = match value {\n             Value::ByRef(ptr, align) => (ptr, align),\n@@ -467,42 +466,41 @@ pub fn const_val_field<'a, 'tcx>(\n     })();\n     result.map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n-        let err = ErrKind::Miri(err, trace);\n         ConstEvalErr {\n-            kind: err.into(),\n+            error: err,\n+            stacktrace: trace,\n             span,\n-        }\n+        }.into()\n     })\n }\n \n pub fn const_variant_index<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n-    val: ConstValue<'tcx>,\n-    ty: Ty<'tcx>,\n+    val: &'tcx ty::Const<'tcx>,\n ) -> EvalResult<'tcx, usize> {\n-    trace!(\"const_variant_index: {:?}, {:?}, {:?}\", instance, val, ty);\n+    trace!(\"const_variant_index: {:?}, {:?}\", instance, val);\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n-    let value = ecx.const_value_to_value(val, ty)?;\n+    let value = ecx.const_to_value(val.val)?;\n     let (ptr, align) = match value {\n         Value::ScalarPair(..) | Value::Scalar(_) => {\n-            let layout = ecx.layout_of(ty)?;\n+            let layout = ecx.layout_of(val.ty)?;\n             let ptr = ecx.memory.allocate(layout.size, layout.align, Some(MemoryKind::Stack))?.into();\n-            ecx.write_value_to_ptr(value, ptr, layout.align, ty)?;\n+            ecx.write_value_to_ptr(value, ptr, layout.align, val.ty)?;\n             (ptr, layout.align)\n         },\n         Value::ByRef(ptr, align) => (ptr, align),\n     };\n     let place = Place::from_scalar_ptr(ptr, align);\n-    ecx.read_discriminant_as_variant_index(place, ty)\n+    ecx.read_discriminant_as_variant_index(place, val.ty)\n }\n \n pub fn const_value_to_allocation_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    (val, ty): (ConstValue<'tcx>, Ty<'tcx>),\n+    val: &'tcx ty::Const<'tcx>,\n ) -> &'tcx Allocation {\n-    match val {\n+    match val.val {\n         ConstValue::ByRef(alloc, offset) => {\n             assert_eq!(offset.bytes(), 0);\n             return alloc;\n@@ -515,20 +513,20 @@ pub fn const_value_to_allocation_provider<'a, 'tcx>(\n             ty::ParamEnv::reveal_all(),\n             CompileTimeEvaluator,\n             ());\n-        let value = ecx.const_value_to_value(val, ty)?;\n-        let layout = ecx.layout_of(ty)?;\n+        let value = ecx.const_to_value(val.val)?;\n+        let layout = ecx.layout_of(val.ty)?;\n         let ptr = ecx.memory.allocate(layout.size, layout.align, Some(MemoryKind::Stack))?;\n-        ecx.write_value_to_ptr(value, ptr.into(), layout.align, ty)?;\n+        ecx.write_value_to_ptr(value, ptr.into(), layout.align, val.ty)?;\n         let alloc = ecx.memory.get(ptr.alloc_id)?;\n         Ok(tcx.intern_const_alloc(alloc.clone()))\n     };\n-    result().expect(\"unable to convert ConstVal to Allocation\")\n+    result().expect(\"unable to convert ConstValue to Allocation\")\n }\n \n pub fn const_eval_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n-) -> ::rustc::middle::const_val::EvalResult<'tcx> {\n+) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     trace!(\"const eval: {:?}\", key);\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n@@ -540,9 +538,10 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n             return Err(ConstEvalErr {\n-                kind: Lrc::new(CheckMatchError),\n+                error: EvalErrorKind::CheckMatchError.into(),\n+                stacktrace: vec![],\n                 span,\n-            });\n+            }.into());\n         }\n \n         if let hir::BodyOwnerKind::Const = tcx.hir.body_owner_kind(id) {\n@@ -552,9 +551,10 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do not continue into miri if typeck errors occurred; it will fail horribly\n         if tables.tainted_by_errors {\n             return Err(ConstEvalErr {\n-                kind: Lrc::new(TypeckError),\n+                error: EvalErrorKind::CheckMatchError.into(),\n+                stacktrace: vec![],\n                 span,\n-            });\n+            }.into());\n         }\n     };\n \n@@ -566,15 +566,15 @@ pub fn const_eval_provider<'a, 'tcx>(\n         Ok(value_to_const_value(&ecx, val, miri_ty))\n     }).map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n-        let err = ErrKind::Miri(err, trace);\n         let err = ConstEvalErr {\n-            kind: err.into(),\n+            error: err,\n+            stacktrace: trace,\n             span,\n         };\n         if tcx.is_static(def_id).is_some() {\n             err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n         }\n-        err\n+        err.into()\n     })\n }\n "}, {"sha": "6dc65a2404d11ab9d0c947ffb05181856cbcffe4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -3,14 +3,13 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::hir::map::definitions::DefPathData;\n-use rustc::middle::const_val::ConstVal;\n use rustc::mir;\n use rustc::ty::layout::{self, Size, Align, HasDataLayout, IntegerExt, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeAndMut};\n use rustc::ty::query::TyCtxtAt;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use rustc::middle::const_val::FrameInfo;\n+use rustc::mir::interpret::FrameInfo;\n use syntax::codemap::{self, Span};\n use syntax::ast::Mutability;\n use rustc::mir::interpret::{\n@@ -233,12 +232,18 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(Scalar::Ptr(ptr).to_value_with_len(s.len() as u64, self.tcx.tcx))\n     }\n \n-    pub fn const_value_to_value(\n+    pub fn const_to_value(\n         &mut self,\n         val: ConstValue<'tcx>,\n-        _ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Value> {\n         match val {\n+            ConstValue::Unevaluated(def_id, substs) => {\n+                let instance = self.resolve(def_id, substs)?;\n+                self.read_global_as_value(GlobalId {\n+                    instance,\n+                    promoted: None,\n+                })\n+            }\n             ConstValue::ByRef(alloc, offset) => {\n                 // FIXME: Allocate new AllocId for all constants inside\n                 let id = self.memory.allocate_value(alloc.clone(), Some(MemoryKind::Stack))?;\n@@ -249,23 +254,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    pub(super) fn const_to_value(\n-        &mut self,\n-        const_val: &ConstVal<'tcx>,\n-        ty: Ty<'tcx>\n-    ) -> EvalResult<'tcx, Value> {\n-        match *const_val {\n-            ConstVal::Unevaluated(def_id, substs) => {\n-                let instance = self.resolve(def_id, substs)?;\n-                self.read_global_as_value(GlobalId {\n-                    instance,\n-                    promoted: None,\n-                }, ty)\n-            }\n-            ConstVal::Value(val) => self.const_value_to_value(val, ty)\n-        }\n-    }\n-\n     pub(super) fn resolve(&self, def_id: DefId, substs: &'tcx Substs<'tcx>) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"substs: {:#?}\", self.substs());\n@@ -280,7 +268,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or_else(|| EvalErrorKind::TypeckError.into()) // turn error prop into a panic to expose associated type in const issue\n+        ).ok_or_else(|| EvalErrorKind::TooGeneric.into())\n     }\n \n     pub(super) fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n@@ -739,7 +727,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                     self.param_env,\n                                     def_id,\n                                     substs,\n-                                ).ok_or_else(|| EvalErrorKind::TypeckError.into());\n+                                ).ok_or_else(|| EvalErrorKind::TooGeneric.into());\n                                 let fn_ptr = self.memory.create_fn_alloc(instance?);\n                                 let valty = ValTy {\n                                     value: Value::Scalar(fn_ptr.into()),\n@@ -849,14 +837,14 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 use rustc::mir::Literal;\n                 let mir::Constant { ref literal, .. } = **constant;\n                 let value = match *literal {\n-                    Literal::Value { ref value } => self.const_to_value(&value.val, ty)?,\n+                    Literal::Value { ref value } => self.const_to_value(value.val)?,\n \n                     Literal::Promoted { index } => {\n                         let instance = self.frame().instance;\n                         self.read_global_as_value(GlobalId {\n                             instance,\n                             promoted: Some(index),\n-                        }, ty)?\n+                        })?\n                     }\n                 };\n \n@@ -1036,18 +1024,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(())\n     }\n \n-    pub fn read_global_as_value(&mut self, gid: GlobalId<'tcx>, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n-        if self.tcx.is_static(gid.instance.def_id()).is_some() {\n-            let alloc_id = self\n-                .tcx\n-                .alloc_map\n-                .lock()\n-                .intern_static(gid.instance.def_id());\n-            let layout = self.layout_of(ty)?;\n-            return Ok(Value::ByRef(Scalar::Ptr(alloc_id.into()), layout.align))\n-        }\n+    pub fn read_global_as_value(&mut self, gid: GlobalId<'tcx>) -> EvalResult<'tcx, Value> {\n         let cv = self.const_eval(gid)?;\n-        self.const_to_value(&cv.val, ty)\n+        self.const_to_value(cv.val)\n     }\n \n     pub fn const_eval(&self, gid: GlobalId<'tcx>) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {"}, {"sha": "9e5b6be3e9122eff1ff95d39bcf8e458002e7fb6", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -7,7 +7,6 @@ use rustc::ty::ParamEnv;\n use rustc::ty::query::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size};\n use syntax::ast::Mutability;\n-use rustc::middle::const_val::ConstVal;\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::{Pointer, AllocId, Allocation, AccessKind, Value,\n@@ -285,16 +284,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             instance,\n             promoted: None,\n         };\n-        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|_| {\n+        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|err| {\n             // no need to report anything, the const_eval call takes care of that for statics\n             assert!(self.tcx.is_static(def_id).is_some());\n-            EvalErrorKind::TypeckError.into()\n+            EvalErrorKind::ReferencedConstant(err).into()\n         }).map(|val| {\n-            let const_val = match val.val {\n-                ConstVal::Value(val) => val,\n-                ConstVal::Unevaluated(..) => bug!(\"should be evaluated\"),\n-            };\n-            self.tcx.const_value_to_allocation((const_val, val.ty))\n+            self.tcx.const_value_to_allocation(val)\n         })\n     }\n "}, {"sha": "8320add715769580611c146e197b535233f98e21", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -95,9 +95,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         // These ops can have an RHS with a different numeric type.\n         if right_kind.is_int() && (bin_op == Shl || bin_op == Shr) {\n             let signed = left_layout.abi.is_signed();\n+            let mut oflo = (r as u32 as u128) != r;\n             let mut r = r as u32;\n             let size = left_layout.size.bits() as u32;\n-            let oflo = r >= size;\n+            oflo |= r >= size;\n             if oflo {\n                 r %= size;\n             }"}, {"sha": "3a046cd800a3e1db0419999a10f86ed804c40d61", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -193,7 +193,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::const_val::ConstVal;\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n@@ -1210,15 +1209,12 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => collect_const(tcx, val, instance.substs, output),\n             Err(err) => {\n-                use rustc::middle::const_val::ErrKind;\n                 use rustc::mir::interpret::EvalErrorKind;\n-                if let ErrKind::Miri(ref miri, ..) = *err.kind {\n-                    if let EvalErrorKind::ReferencedConstant(_) = miri.kind {\n-                        err.report_as_error(\n-                            tcx.at(mir.promoted[i].span),\n-                            \"erroneous constant used\",\n-                        );\n-                    }\n+                if let EvalErrorKind::ReferencedConstant(_) = err.error.kind {\n+                    err.report_as_error(\n+                        tcx.at(mir.promoted[i].span),\n+                        \"erroneous constant used\",\n+                    );\n                 }\n             },\n         }\n@@ -1243,7 +1239,7 @@ fn collect_const<'a, 'tcx>(\n     debug!(\"visiting const {:?}\", *constant);\n \n     let val = match constant.val {\n-        ConstVal::Unevaluated(def_id, substs) => {\n+        ConstValue::Unevaluated(def_id, substs) => {\n             let param_env = ty::ParamEnv::reveal_all();\n             let substs = tcx.subst_and_normalize_erasing_regions(\n                 param_substs,\n@@ -1274,16 +1270,16 @@ fn collect_const<'a, 'tcx>(\n         _ => constant.val,\n     };\n     match val {\n-        ConstVal::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n-        ConstVal::Value(ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b))) => {\n+        ConstValue::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n+        ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {\n             collect_miri(tcx, a.alloc_id, output);\n             collect_miri(tcx, b.alloc_id, output);\n         }\n-        ConstVal::Value(ConstValue::ScalarPair(_, Scalar::Ptr(ptr))) |\n-        ConstVal::Value(ConstValue::ScalarPair(Scalar::Ptr(ptr), _)) |\n-        ConstVal::Value(ConstValue::Scalar(Scalar::Ptr(ptr))) =>\n+        ConstValue::ScalarPair(_, Scalar::Ptr(ptr)) |\n+        ConstValue::ScalarPair(Scalar::Ptr(ptr), _) |\n+        ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n-        ConstVal::Value(ConstValue::ByRef(alloc, _offset)) => {\n+        ConstValue::ByRef(alloc, _offset) => {\n             for &id in alloc.relocations.values() {\n                 collect_miri(tcx, id, output);\n             }"}, {"sha": "3b3c28f6ae2655c2dbd9df61e247ad1be3e33b81", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n-use rustc::middle::const_val::{ConstVal, ConstEvalErr, ErrKind};\n+use rustc::mir::interpret::ConstEvalErr;\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, Scalar, GlobalId, EvalResult};\n use interpret::EvalContext;\n@@ -45,8 +45,11 @@ impl MirPass for ConstProp {\n             return;\n         }\n         match tcx.describe_def(source.def_id) {\n-            // skip statics because they'll be evaluated by miri anyway\n+            // skip statics/consts because they'll be evaluated by miri anyway\n+            Some(Def::Const(..)) |\n             Some(Def::Static(..)) => return,\n+            // we still run on associated constants, because they might not get evaluated\n+            // within the current crate\n             _ => {},\n         }\n         trace!(\"ConstProp starting for {:?}\", source.def_id);\n@@ -145,7 +148,8 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 let (frames, span) = self.ecx.generate_stacktrace(None);\n                 let err = ConstEvalErr {\n                     span,\n-                    kind: ErrKind::Miri(err, frames).into(),\n+                    error: err,\n+                    stacktrace: frames,\n                 };\n                 err.report_as_lint(\n                     self.ecx.tcx,\n@@ -159,54 +163,30 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         r\n     }\n \n-    fn const_eval(&mut self, cid: GlobalId<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n-        let value = match self.tcx.const_eval(self.param_env.and(cid)) {\n-            Ok(val) => val,\n-            Err(err) => {\n-                err.report_as_error(\n-                    self.tcx.at(err.span),\n-                    \"constant evaluation error\",\n-                );\n-                return None;\n-            },\n-        };\n-        let val = match value.val {\n-            ConstVal::Value(v) => {\n-                self.use_ecx(source_info, |this| this.ecx.const_value_to_value(v, value.ty))?\n-            },\n-            _ => bug!(\"eval produced: {:?}\", value),\n-        };\n-        let val = (val, value.ty, source_info.span);\n-        trace!(\"evaluated {:?} to {:?}\", cid, val);\n-        Some(val)\n-    }\n-\n     fn eval_constant(\n         &mut self,\n         c: &Constant<'tcx>,\n         source_info: SourceInfo,\n     ) -> Option<Const<'tcx>> {\n         match c.literal {\n-            Literal::Value { value } => match value.val {\n-                ConstVal::Value(v) => {\n-                    let v = self.use_ecx(source_info, |this| {\n-                        this.ecx.const_value_to_value(v, value.ty)\n-                    })?;\n-                    Some((v, value.ty, c.span))\n-                },\n-                ConstVal::Unevaluated(did, substs) => {\n-                    let instance = Instance::resolve(\n-                        self.tcx,\n-                        self.param_env,\n-                        did,\n-                        substs,\n-                    )?;\n-                    let cid = GlobalId {\n-                        instance,\n-                        promoted: None,\n-                    };\n-                    self.const_eval(cid, source_info)\n-                },\n+            Literal::Value { value } => {\n+                self.ecx.tcx.span = source_info.span;\n+                match self.ecx.const_to_value(value.val) {\n+                    Ok(val) => Some((val, value.ty, c.span)),\n+                    Err(error) => {\n+                        let (stacktrace, span) = self.ecx.generate_stacktrace(None);\n+                        let err = ConstEvalErr {\n+                            span,\n+                            error,\n+                            stacktrace,\n+                        };\n+                        err.report_as_error(\n+                            self.tcx.at(source_info.span),\n+                            \"could not evaluate constant\",\n+                        );\n+                        None\n+                    },\n+                }\n             },\n             // evaluate the promoted and replace the constant with the evaluated result\n             Literal::Promoted { index } => {"}, {"sha": "144ebce76e14cbe01f5137a041c4d77249ae76c1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstValue;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n@@ -611,7 +611,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n             Operand::Constant(ref constant) => {\n                 if let Literal::Value {\n-                    value: &ty::Const { val: ConstVal::Unevaluated(def_id, _), ty, .. }\n+                    value: &ty::Const { val: ConstValue::Unevaluated(def_id, _), ty, .. }\n                 } = constant.literal {\n                     // Don't peek inside trait associated constants.\n                     if self.tcx.trait_of_item(def_id).is_some() {"}, {"sha": "4e716fb207fab080b4f8287f3cfe47ceea865e92", "filename": "src/librustc_target/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -16,7 +16,9 @@ pub fn target() -> Result<Target, String> {\n                 vec![\"-s\".to_string(),\n                      \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n                      \"-s\".to_string(),\n-                     \"ABORTING_MALLOC=0\".to_string()]);\n+                     \"ABORTING_MALLOC=0\".to_string(),\n+                     \"-s\".to_string(),\n+                     \"WASM=0\".to_string()]);\n \n     let opts = TargetOptions {\n         dynamic_linking: false,"}, {"sha": "e276dcff0601dca195a53556bd141d68365b28bc", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1203,9 +1203,14 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                                       \"supposed to be part of a block tail expression, but the \\\n                                        expression is empty\");\n                         });\n-                        fcx.suggest_mismatched_types_on_tail(&mut db, expr,\n-                                                             expected, found,\n-                                                             cause.span, blk_id);\n+                        fcx.suggest_mismatched_types_on_tail(\n+                            &mut db,\n+                            expr,\n+                            expected,\n+                            found,\n+                            cause.span,\n+                            blk_id,\n+                        );\n                     }\n                     _ => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);"}, {"sha": "08d8dd2e498b68ff67c437929978b883bd124abe", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::iter;\n-\n use check::FnCtxt;\n use rustc::infer::InferOk;\n use rustc::traits::ObligationCause;\n@@ -140,25 +138,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        if let Some((sp, msg, suggestion)) = self.check_ref(expr, checked_ty, expected) {\n-            err.span_suggestion(sp, msg, suggestion);\n-        } else if !self.check_for_cast(&mut err, expr, expr_ty, expected) {\n-            let methods = self.get_conversion_methods(expr.span, expected, checked_ty);\n-            if let Ok(expr_text) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n-                let suggestions = iter::repeat(expr_text).zip(methods.iter())\n-                    .map(|(receiver, method)| format!(\"{}.{}()\", receiver, method.ident))\n-                    .collect::<Vec<_>>();\n-                if !suggestions.is_empty() {\n-                    err.span_suggestions(expr.span,\n-                                         \"try using a conversion method\",\n-                                         suggestions);\n-                }\n-            }\n-        }\n+        self.suggest_ref_or_into(&mut err, expr, expected, expr_ty);\n+\n         (expected, Some(err))\n     }\n \n-    fn get_conversion_methods(&self, span: Span, expected: Ty<'tcx>, checked_ty: Ty<'tcx>)\n+    pub fn get_conversion_methods(&self, span: Span, expected: Ty<'tcx>, checked_ty: Ty<'tcx>)\n                               -> Vec<AssociatedItem> {\n         let mut methods = self.probe_for_return_type(span,\n                                                      probe::Mode::MethodCall,\n@@ -261,19 +246,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// In addition of this check, it also checks between references mutability state. If the\n     /// expected is mutable but the provided isn't, maybe we could just say \"Hey, try with\n     /// `&mut`!\".\n-    fn check_ref(&self,\n+    pub fn check_ref(&self,\n                  expr: &hir::Expr,\n                  checked_ty: Ty<'tcx>,\n                  expected: Ty<'tcx>)\n                  -> Option<(Span, &'static str, String)> {\n-        let sp = expr.span;\n+        let cm = self.sess().codemap();\n+        // Use the callsite's span if this is a macro call. #41858\n+        let sp = cm.call_span_if_macro(expr.span);\n+        if !cm.span_to_filename(sp).is_real() {\n+            return None;\n+        }\n+\n         match (&expected.sty, &checked_ty.sty) {\n             (&ty::TyRef(_, exp, _), &ty::TyRef(_, check, _)) => match (&exp.sty, &check.sty) {\n                 (&ty::TyStr, &ty::TyArray(arr, _)) |\n                 (&ty::TyStr, &ty::TySlice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprLit(_) = expr.node {\n-                        let sp = self.sess().codemap().call_span_if_macro(expr.span);\n-                        if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n+                        if let Ok(src) = cm.span_to_snippet(sp) {\n                             return Some((sp,\n                                          \"consider removing the leading `b`\",\n                                          src[1..].to_string()));\n@@ -283,8 +273,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 (&ty::TyArray(arr, _), &ty::TyStr) |\n                 (&ty::TySlice(arr), &ty::TyStr) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprLit(_) = expr.node {\n-                        let sp = self.sess().codemap().call_span_if_macro(expr.span);\n-                        if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n+                        if let Ok(src) = cm.span_to_snippet(sp) {\n                             return Some((sp,\n                                          \"consider adding a leading `b`\",\n                                          format!(\"b{}\", src)));\n@@ -311,9 +300,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                        checked_ty),\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n-                    // Use the callsite's span if this is a macro call. #41858\n-                    let sp = self.sess().codemap().call_span_if_macro(expr.span);\n-                    if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n+                    if let Ok(src) = cm.span_to_snippet(sp) {\n                         let sugg_expr = match expr.node { // parenthesize if needed (Issue #46756)\n                             hir::ExprCast(_, _) | hir::ExprBinary(_, _, _) => format!(\"({})\", src),\n                             _ => src,\n@@ -342,11 +329,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // a macro; if so, it's hard to extract the text and make a good\n                 // suggestion, so don't bother.)\n                 if self.infcx.can_sub(self.param_env, checked, &expected).is_ok() &&\n-                   expr.span.ctxt().outer().expn_info().is_none() {\n+                   sp.ctxt().outer().expn_info().is_none() {\n                     match expr.node {\n                         // Maybe remove `&`?\n                         hir::ExprAddrOf(_, ref expr) => {\n-                            if let Ok(code) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n+                            if !cm.span_to_filename(expr.span).is_real() {\n+                                return None;\n+                            }\n+                            if let Ok(code) = cm.span_to_snippet(expr.span) {\n                                 return Some((sp, \"consider removing the borrow\", code));\n                             }\n                         }\n@@ -355,9 +345,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         _ => {\n                             if !self.infcx.type_moves_by_default(self.param_env,\n                                                                 checked,\n-                                                                expr.span) {\n-                                let sp = self.sess().codemap().call_span_if_macro(expr.span);\n-                                if let Ok(code) = self.tcx.sess.codemap().span_to_snippet(sp) {\n+                                                                sp) {\n+                                let sp = cm.call_span_if_macro(sp);\n+                                if let Ok(code) = cm.span_to_snippet(sp) {\n                                     return Some((sp,\n                                                  \"consider dereferencing the borrow\",\n                                                  format!(\"*{}\", code)));\n@@ -372,7 +362,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n-    fn check_for_cast(&self,\n+    pub fn check_for_cast(&self,\n                       err: &mut DiagnosticBuilder<'tcx>,\n                       expr: &hir::Expr,\n                       checked_ty: Ty<'tcx>,"}, {"sha": "0185d00518699b0b53cc09681b665ce8dba83034", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -116,6 +116,7 @@ use rustc_data_structures::sync::Lrc;\n use std::collections::hash_map::Entry;\n use std::cmp;\n use std::fmt::Display;\n+use std::iter;\n use std::mem::replace;\n use std::ops::{self, Deref};\n use rustc_target::spec::abi::Abi;\n@@ -4539,10 +4540,32 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             cause_span: Span,\n                                             blk_id: ast::NodeId) {\n         self.suggest_missing_semicolon(err, expression, expected, cause_span);\n-\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n         }\n+        self.suggest_ref_or_into(err, expression, expected, found);\n+    }\n+\n+    pub fn suggest_ref_or_into(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expr: &hir::Expr,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if let Some((sp, msg, suggestion)) = self.check_ref(expr, found, expected) {\n+            err.span_suggestion(sp, msg, suggestion);\n+        } else if !self.check_for_cast(err, expr, found, expected) {\n+            let methods = self.get_conversion_methods(expr.span, expected, found);\n+            if let Ok(expr_text) = self.sess().codemap().span_to_snippet(expr.span) {\n+                let suggestions = iter::repeat(expr_text).zip(methods.iter())\n+                    .map(|(receiver, method)| format!(\"{}.{}()\", receiver, method.ident))\n+                    .collect::<Vec<_>>();\n+                if !suggestions.is_empty() {\n+                    err.span_suggestions(expr.span, \"try using a conversion method\", suggestions);\n+                }\n+            }\n+        }\n     }\n \n     /// A common error is to forget to add a semicolon at the end of a block:"}, {"sha": "8cdffcd558d75cff4c1c5ab6e2ab82945fe776fa", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -29,7 +29,7 @@ use syntax::symbol::keywords::{self, Keyword};\n use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{self, DUMMY_SP, Pos, FileName};\n \n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstValue;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::resolve_lifetime as rl;\n use rustc::ty::fold::TypeFolder;\n@@ -3014,7 +3014,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::TySlice(ty) => Slice(box ty.clean(cx)),\n             ty::TyArray(ty, n) => {\n                 let mut n = cx.tcx.lift(&n).unwrap();\n-                if let ConstVal::Unevaluated(def_id, substs) = n.val {\n+                if let ConstValue::Unevaluated(def_id, substs) = n.val {\n                     let param_env = cx.tcx.param_env(def_id);\n                     let cid = GlobalId {\n                         instance: ty::Instance::new(def_id, substs),\n@@ -4096,14 +4096,14 @@ fn name_from_pat(p: &hir::Pat) -> String {\n \n fn print_const(cx: &DocContext, n: &ty::Const) -> String {\n     match n.val {\n-        ConstVal::Unevaluated(def_id, _) => {\n+        ConstValue::Unevaluated(def_id, _) => {\n             if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n                 print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n             } else {\n                 inline::print_inlined_const(cx, def_id)\n             }\n         },\n-        ConstVal::Value(..) => {\n+        _ => {\n             let mut s = String::new();\n             ::rustc::mir::fmt_const_val(&mut s, n).unwrap();\n             // array lengths are obviously usize"}, {"sha": "39b1b342eac3149752718d55ad5d48e24e3669c9", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -11,16 +11,10 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n-//~^ ERROR this constant cannot be used\n-//~| ERROR this expression will panic at runtime\n pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n-//~^ ERROR this constant cannot be used\n pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n-//~^ ERROR this constant cannot be used\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n-//~^ ERROR this constant cannot be used\n pub const E: u8 = [5u8][1]; //~ ERROR const_err\n-//~| ERROR this constant cannot be used\n \n fn main() {\n     let _a = A;"}, {"sha": "f2ee8a7078c7c0d9f94dbeb3a2c874be32da4055", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -11,10 +11,7 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN;\n-//~^ ERROR E0080\n-//~| ERROR attempt to negate with overflow\n-//~| ERROR this expression will panic at runtime\n-//~| ERROR this constant cannot be used\n+//~^ ERROR this constant cannot be used\n pub const B: i8 = A;\n //~^ ERROR const_err\n //~| ERROR const_err"}, {"sha": "8683f6a0231921c0e89d84a9dc36fe68edfc6e58", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -23,9 +23,10 @@ fn black_box<T>(_: T) {\n // Make sure that the two uses get two errors.\n const FOO: u8 = [5u8][1];\n //~^ ERROR constant evaluation error\n-//~| ERROR constant evaluation error\n //~| index out of bounds: the len is 1 but the index is 1\n \n fn main() {\n     black_box((FOO, FOO));\n+    //~^ ERROR referenced constant has errors\n+    //~| ERROR could not evaluate constant\n }"}, {"sha": "88fc51827753532d7107dc574df8d298f8b086fa", "filename": "src/test/compile-fail/const-eval-overflow2.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -25,54 +25,46 @@ const VALS_I8: (i8,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i8::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n const VALS_I16: (i16,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i16::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n const VALS_I32: (i32,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i32::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n const VALS_I64: (i64,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i64::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n const VALS_U8: (u8,) =\n      //~^ ERROR this constant cannot be used\n     (\n      u8::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n const VALS_U16: (u16,) = (\n      //~^ ERROR this constant cannot be used\n      u16::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n const VALS_U32: (u32,) = (\n      //~^ ERROR this constant cannot be used\n      u32::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n const VALS_U64: (u64,) =\n      //~^ ERROR this constant cannot be used\n     (\n      u64::MIN - 1,\n-     //~^ ERROR attempt to subtract with overflow\n      );\n \n fn main() {"}, {"sha": "1878daea93198a40cf169e407b43f3c33fd2cc2a", "filename": "src/test/compile-fail/const-eval-overflow2b.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -25,54 +25,46 @@ const VALS_I8: (i8,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i8::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n const VALS_I16: (i16,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i16::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n const VALS_I32: (i32,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i32::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n const VALS_I64: (i64,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i64::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n const VALS_U8: (u8,) =\n      //~^ ERROR this constant cannot be used\n     (\n      u8::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n const VALS_U16: (u16,) = (\n      //~^ ERROR this constant cannot be used\n      u16::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n const VALS_U32: (u32,) = (\n      //~^ ERROR this constant cannot be used\n      u32::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n const VALS_U64: (u64,) =\n      //~^ ERROR this constant cannot be used\n     (\n      u64::MAX + 1,\n-     //~^ ERROR attempt to add with overflow\n      );\n \n fn main() {"}, {"sha": "f3d28295bf81ce19a0116590d5d796c3884aad62", "filename": "src/test/compile-fail/const-eval-overflow2c.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -25,54 +25,46 @@ const VALS_I8: (i8,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i8::MIN * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n const VALS_I16: (i16,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i16::MIN * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n const VALS_I32: (i32,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i32::MIN * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n const VALS_I64: (i64,) =\n      //~^ ERROR this constant cannot be used\n     (\n      i64::MIN * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n const VALS_U8: (u8,) =\n      //~^ ERROR this constant cannot be used\n     (\n      u8::MAX * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n const VALS_U16: (u16,) = (\n      //~^ ERROR this constant cannot be used\n      u16::MAX * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n const VALS_U32: (u32,) = (\n      //~^ ERROR this constant cannot be used\n      u32::MAX * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n const VALS_U64: (u64,) =\n      //~^ ERROR this constant cannot be used\n     (\n      u64::MAX * 2,\n-     //~^ ERROR attempt to multiply with overflow\n      );\n \n fn main() {"}, {"sha": "8bc302a2befa4fca221547969703380a6e194c38", "filename": "src/test/ui/const-eval/conditional_array_execution.nll.stderr", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,25 +1,19 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/conditional_array_execution.rs:15:19\n+warning: this constant cannot be used\n+  --> $DIR/conditional_array_execution.rs:15:1\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   |                   ^^^^^\n+   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   |\n+   |                   attempt to subtract with overflow\n    |\n note: lint level defined here\n   --> $DIR/conditional_array_execution.rs:11:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: this constant cannot be used\n-  --> $DIR/conditional_array_execution.rs:15:1\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   attempt to subtract with overflow\n-\n-warning: referenced constant\n-  --> $DIR/conditional_array_execution.rs:20:20\n+warning: referenced constant has errors\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n@@ -28,13 +22,13 @@ LL |     println!(\"{}\", FOO);\n    |                    ^^^\n \n warning: this expression will panic at runtime\n-  --> $DIR/conditional_array_execution.rs:20:20\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error[E0080]: referenced constant\n-  --> $DIR/conditional_array_execution.rs:20:5\n+error[E0080]: referenced constant has errors\n+  --> $DIR/conditional_array_execution.rs:19:5\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n@@ -45,7 +39,7 @@ LL |     println!(\"{}\", FOO);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:20:5\n+  --> $DIR/conditional_array_execution.rs:19:5\n    |\n LL |     println!(\"{}\", FOO);\n    |     ^^^^^^^^^^^^^^^---^^\n@@ -54,8 +48,8 @@ LL |     println!(\"{}\", FOO);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0080]: referenced constant\n-  --> $DIR/conditional_array_execution.rs:20:20\n+error[E0080]: referenced constant has errors\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n@@ -64,7 +58,7 @@ LL |     println!(\"{}\", FOO);\n    |                    ^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:20:20\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors"}, {"sha": "99487eb49792324137d03fea2eae59ee674e757a", "filename": "src/test/ui/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -13,8 +13,7 @@\n const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-//~^ WARN attempt to subtract with overflow\n-//~| WARN this constant cannot be used\n+//~^ WARN this constant cannot be used\n \n fn main() {\n     println!(\"{}\", FOO);"}, {"sha": "649da03a5e7fae60d713e0f1eb96805432233e56", "filename": "src/test/ui/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,25 +1,19 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/conditional_array_execution.rs:15:19\n+warning: this constant cannot be used\n+  --> $DIR/conditional_array_execution.rs:15:1\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   |                   ^^^^^\n+   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   |\n+   |                   attempt to subtract with overflow\n    |\n note: lint level defined here\n   --> $DIR/conditional_array_execution.rs:11:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: this constant cannot be used\n-  --> $DIR/conditional_array_execution.rs:15:1\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   attempt to subtract with overflow\n-\n-warning: referenced constant\n-  --> $DIR/conditional_array_execution.rs:20:20\n+warning: referenced constant has errors\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n@@ -28,13 +22,13 @@ LL |     println!(\"{}\", FOO);\n    |                    ^^^\n \n warning: this expression will panic at runtime\n-  --> $DIR/conditional_array_execution.rs:20:20\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error[E0080]: referenced constant\n-  --> $DIR/conditional_array_execution.rs:20:20\n+error[E0080]: referenced constant has errors\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n@@ -43,7 +37,7 @@ LL |     println!(\"{}\", FOO);\n    |                    ^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:20:20\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors"}, {"sha": "5819e6a9254a759bcb63a8c2d0cdf89740824b02", "filename": "src/test/ui/const-eval/issue-43197.nll.stderr", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,39 +1,27 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:20:20\n-   |\n-LL |     const X: u32 = 0-1;\n-   |                    ^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-43197.rs:11:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n warning: this constant cannot be used\n   --> $DIR/issue-43197.rs:20:5\n    |\n LL |     const X: u32 = 0-1;\n    |     ^^^^^^^^^^^^^^^---^\n    |                    |\n    |                    attempt to subtract with overflow\n-\n-warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:23:24\n    |\n-LL |     const Y: u32 = foo(0-1);\n-   |                        ^^^\n+note: lint level defined here\n+  --> $DIR/issue-43197.rs:11:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n \n warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:23:5\n+  --> $DIR/issue-43197.rs:22:5\n    |\n LL |     const Y: u32 = foo(0-1);\n    |     ^^^^^^^^^^^^^^^^^^^---^^\n    |                        |\n    |                        attempt to subtract with overflow\n \n-warning: referenced constant\n-  --> $DIR/issue-43197.rs:26:23\n+warning: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n@@ -42,28 +30,28 @@ LL |     println!(\"{} {}\", X, Y);\n    |                       ^\n \n warning: this expression will panic at runtime\n-  --> $DIR/issue-43197.rs:26:23\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-warning: referenced constant\n-  --> $DIR/issue-43197.rs:26:26\n+warning: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     const Y: u32 = foo(0-1);\n    |                        --- attempt to subtract with overflow\n-...\n+LL |     //~^ WARN this constant cannot be used\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^\n \n warning: this expression will panic at runtime\n-  --> $DIR/issue-43197.rs:26:26\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error[E0080]: referenced constant\n-  --> $DIR/issue-43197.rs:26:5\n+error[E0080]: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:5\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n@@ -74,7 +62,7 @@ LL |     println!(\"{} {}\", X, Y);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:26:5\n+  --> $DIR/issue-43197.rs:24:5\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |     ^^^^^^^^^^^^^^^^^^-^^^^^\n@@ -83,23 +71,23 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0080]: referenced constant\n-  --> $DIR/issue-43197.rs:26:26\n+error[E0080]: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     const Y: u32 = foo(0-1);\n    |                        --- attempt to subtract with overflow\n-...\n+LL |     //~^ WARN this constant cannot be used\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:26:26\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error[E0080]: referenced constant\n-  --> $DIR/issue-43197.rs:26:23\n+error[E0080]: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n@@ -108,7 +96,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |                       ^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:26:23\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors"}, {"sha": "9304af7b811cf7832ce7f494a96f63140fe878c2", "filename": "src/test/ui/const-eval/issue-43197.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -18,11 +18,9 @@ const fn foo(x: u32) -> u32 {\n \n fn main() {\n     const X: u32 = 0-1;\n-    //~^ WARN attempt to subtract with overflow\n-    //~| WARN this constant cannot be used\n+    //~^ WARN this constant cannot be used\n     const Y: u32 = foo(0-1);\n-    //~^ WARN attempt to subtract with overflow\n-    //~| WARN this constant cannot be used\n+    //~^ WARN this constant cannot be used\n     println!(\"{} {}\", X, Y);\n     //~^ WARN this expression will panic at runtime\n     //~| WARN this expression will panic at runtime"}, {"sha": "bf864d81ea3ca179f34825c5b01ab59f13daf2de", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,39 +1,27 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:20:20\n-   |\n-LL |     const X: u32 = 0-1;\n-   |                    ^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-43197.rs:11:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n warning: this constant cannot be used\n   --> $DIR/issue-43197.rs:20:5\n    |\n LL |     const X: u32 = 0-1;\n    |     ^^^^^^^^^^^^^^^---^\n    |                    |\n    |                    attempt to subtract with overflow\n-\n-warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:23:24\n    |\n-LL |     const Y: u32 = foo(0-1);\n-   |                        ^^^\n+note: lint level defined here\n+  --> $DIR/issue-43197.rs:11:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n \n warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:23:5\n+  --> $DIR/issue-43197.rs:22:5\n    |\n LL |     const Y: u32 = foo(0-1);\n    |     ^^^^^^^^^^^^^^^^^^^---^^\n    |                        |\n    |                        attempt to subtract with overflow\n \n-warning: referenced constant\n-  --> $DIR/issue-43197.rs:26:23\n+warning: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n@@ -42,43 +30,43 @@ LL |     println!(\"{} {}\", X, Y);\n    |                       ^\n \n warning: this expression will panic at runtime\n-  --> $DIR/issue-43197.rs:26:23\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-warning: referenced constant\n-  --> $DIR/issue-43197.rs:26:26\n+warning: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     const Y: u32 = foo(0-1);\n    |                        --- attempt to subtract with overflow\n-...\n+LL |     //~^ WARN this constant cannot be used\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^\n \n warning: this expression will panic at runtime\n-  --> $DIR/issue-43197.rs:26:26\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error[E0080]: referenced constant\n-  --> $DIR/issue-43197.rs:26:26\n+error[E0080]: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     const Y: u32 = foo(0-1);\n    |                        --- attempt to subtract with overflow\n-...\n+LL |     //~^ WARN this constant cannot be used\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:26:26\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error[E0080]: referenced constant\n-  --> $DIR/issue-43197.rs:26:23\n+error[E0080]: referenced constant has errors\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n@@ -87,7 +75,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |                       ^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:26:23\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors"}, {"sha": "eeb152e00ea477d2c5d5ea7095acfe69648e824a", "filename": "src/test/ui/const-eval/issue-44578.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: referenced constant\n+error[E0080]: referenced constant has errors\n   --> $DIR/issue-44578.rs:35:5\n    |\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n@@ -19,7 +19,7 @@ LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0080]: referenced constant\n+error[E0080]: referenced constant has errors\n   --> $DIR/issue-44578.rs:35:20\n    |\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];"}, {"sha": "06174f37dcad1145896f92a9d2fa78e3e68a5c7f", "filename": "src/test/ui/const-eval/issue-44578.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: referenced constant\n+error[E0080]: referenced constant has errors\n   --> $DIR/issue-44578.rs:35:20\n    |\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];"}, {"sha": "1e37e9498120fb64da6ba57d8feb4f03c1381103", "filename": "src/test/ui/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: referenced constant\n+error[E0080]: referenced constant has errors\n   --> $DIR/issue-50814-2.rs:26:5\n    |\n LL |     const BAR: usize = [5, 6, 7][T::BOO];"}, {"sha": "16160207c573ba20d39f923db33cf0d30d687d6d", "filename": "src/test/ui/const-eval/issue-50814.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: referenced constant\n+error[E0080]: referenced constant has errors\n   --> $DIR/issue-50814.rs:27:5\n    |\n LL |     const MAX: u8 = A::MAX + B::MAX;"}, {"sha": "b7cfa949bac957f76432f4be129acd12838f1bad", "filename": "src/test/ui/const-eval/pub_const_err.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -14,8 +14,7 @@\n #![crate_type = \"lib\"]\n \n pub const Z: u32 = 0 - 1;\n-//~^ WARN attempt to subtract with overflow\n-//~| WARN this constant cannot be used\n+//~^ WARN this constant cannot be used\n \n pub type Foo = [i32; 0 - 1];\n //~^ WARN attempt to subtract with overflow"}, {"sha": "fa3a79a5f1790b09de082fbcb3e3b21d5c8875dc", "filename": "src/test/ui/const-eval/pub_const_err.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,31 +1,25 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/pub_const_err.rs:16:20\n+warning: this constant cannot be used\n+  --> $DIR/pub_const_err.rs:16:1\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   |                    ^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^-----^\n+   |                    |\n+   |                    attempt to subtract with overflow\n    |\n note: lint level defined here\n   --> $DIR/pub_const_err.rs:12:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: this constant cannot be used\n-  --> $DIR/pub_const_err.rs:16:1\n-   |\n-LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^-----^\n-   |                    |\n-   |                    attempt to subtract with overflow\n-\n warning: attempt to subtract with overflow\n-  --> $DIR/pub_const_err.rs:20:22\n+  --> $DIR/pub_const_err.rs:19:22\n    |\n LL | pub type Foo = [i32; 0 - 1];\n    |                      ^^^^^\n \n warning: this array length cannot be used\n-  --> $DIR/pub_const_err.rs:20:22\n+  --> $DIR/pub_const_err.rs:19:22\n    |\n LL | pub type Foo = [i32; 0 - 1];\n    |                      ^^^^^ attempt to subtract with overflow"}, {"sha": "bafa5b2f4da12ffa0efd556ac84d7bff591170ef", "filename": "src/test/ui/const-eval/pub_const_err_bin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -12,8 +12,7 @@\n #![warn(const_err)]\n \n pub const Z: u32 = 0 - 1;\n-//~^ WARN attempt to subtract with overflow\n-//~| WARN this constant cannot be used\n+//~^ WARN this constant cannot be used\n \n pub type Foo = [i32; 0 - 1];\n //~^ WARN attempt to subtract with overflow"}, {"sha": "73229c60d14dbe45a07d7d2be07afc3b25ac6ed8", "filename": "src/test/ui/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,31 +1,25 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/pub_const_err_bin.rs:14:20\n+warning: this constant cannot be used\n+  --> $DIR/pub_const_err_bin.rs:14:1\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   |                    ^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^-----^\n+   |                    |\n+   |                    attempt to subtract with overflow\n    |\n note: lint level defined here\n   --> $DIR/pub_const_err_bin.rs:12:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: this constant cannot be used\n-  --> $DIR/pub_const_err_bin.rs:14:1\n-   |\n-LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^-----^\n-   |                    |\n-   |                    attempt to subtract with overflow\n-\n warning: attempt to subtract with overflow\n-  --> $DIR/pub_const_err_bin.rs:18:22\n+  --> $DIR/pub_const_err_bin.rs:17:22\n    |\n LL | pub type Foo = [i32; 0 - 1];\n    |                      ^^^^^\n \n warning: this array length cannot be used\n-  --> $DIR/pub_const_err_bin.rs:18:22\n+  --> $DIR/pub_const_err_bin.rs:17:22\n    |\n LL | pub type Foo = [i32; 0 - 1];\n    |                      ^^^^^ attempt to subtract with overflow"}, {"sha": "a2c6ed36d30c24456e46b77c8a52b0e90b25ee10", "filename": "src/test/ui/const-eval/shift_overflow.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fshift_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fshift_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fshift_overflow.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    // test that we detect overflows for non-u32 discriminants\n+    X = 1 << ((u32::max_value() as u64) + 1), //~ ERROR E0080\n+    Y = 42,\n+}\n+\n+\n+fn main() {\n+}"}, {"sha": "00a748249ea0ad067a00782cabe3f5c20cd5e251", "filename": "src/test/ui/const-eval/shift_overflow.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fshift_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-eval%2Fshift_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fshift_overflow.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: could not evaluate enum discriminant\n+  --> $DIR/shift_overflow.rs:13:9\n+   |\n+LL |     X = 1 << ((u32::max_value() as u64) + 1), //~ ERROR E0080\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8db1411005e5772daa8548a395adc18fd16205f2", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -15,11 +15,11 @@\n const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n-//~^ ERROR E0080\n-//~| ERROR attempt to subtract with overflow\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n //~^ ERROR E0080\n //~| ERROR E0080\n+//~| ERROR E0080\n+//~| ERROR E0080\n }"}, {"sha": "cf97a0dc5557866a674705f84fffc56b41ce1dac", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -1,19 +1,20 @@\n-error: attempt to subtract with overflow\n-  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+error[E0080]: referenced constant has errors\n+  --> $DIR/const-len-underflow-separate-spans.rs:20:17\n    |\n LL | const LEN: usize = ONE - TWO;\n-   |                    ^^^^^^^^^\n-   |\n-   = note: #[deny(const_err)] on by default\n+   |                    --------- attempt to subtract with overflow\n+...\n+LL |     let a: [i8; LEN] = unimplemented!();\n+   |                 ^^^\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+error[E0080]: could not evaluate constant\n+  --> $DIR/const-len-underflow-separate-spans.rs:20:17\n    |\n-LL | const LEN: usize = ONE - TWO;\n-   |                    ^^^^^^^^^ attempt to subtract with overflow\n+LL |     let a: [i8; LEN] = unimplemented!();\n+   |                 ^^^ referenced constant has errors\n \n-error[E0080]: referenced constant\n-  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+error[E0080]: referenced constant has errors\n+  --> $DIR/const-len-underflow-separate-spans.rs:20:12\n    |\n LL | const LEN: usize = ONE - TWO;\n    |                    --------- attempt to subtract with overflow\n@@ -22,7 +23,7 @@ LL |     let a: [i8; LEN] = unimplemented!();\n    |            ^^^^^^^^^\n \n error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+  --> $DIR/const-len-underflow-separate-spans.rs:20:12\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n    |            ^^^^^---^"}, {"sha": "041bae4a421080644c088473bf386227040f847c", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd722606028cafde656a66edc3206b82cd3bab/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=57dd722606028cafde656a66edc3206b82cd3bab", "patch": "@@ -14,7 +14,10 @@ LL | fn main() {\n    |           - expected `()` because of default return type\n ...\n LL |   let u: &str = if true { s[..2] } else { s };\n-   |                           ^^^^^^ expected &str, found str\n+   |                           ^^^^^^\n+   |                           |\n+   |                           expected &str, found str\n+   |                           help: consider borrowing here: `&s[..2]`\n    |\n    = note: expected type `&str`\n               found type `str`"}]}