{"sha": "9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNGQwMmZhZjljNDdmNDAxYjg3NTZjM2Y3ZmNhYjIxOThmNWY5Y2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-27T00:05:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-27T00:05:02Z"}, "message": "Merge #5088\n\n5088: Better exe probing r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "690249f8406f074866604ffa98045e5f476e83d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690249f8406f074866604ffa98045e5f476e83d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9o0uCRBK7hj4Ov3rIwAAdHIIADrztH9Xzyl9jms//2ud79kt\nCjDIpLNUYSjLm1wo8vJ7z2YGFiRM8bZHJJtyIF00Dd0dCionLtQgExD9/FyrLOLh\nT7uDKMMs8i+d4VFqmgqHCtNm+OWj+wnWq0G4PYvn/6NhavR0qEMvTHvKahHaL/3u\n4pTucTJaRyQx3fzw6yt620tgCnZcfx2h09O3qtXZLAuQa15X9r42RgJP+ucTW+Id\nN/bRSPldi7B3PvhPwfG58i37xkUOfB+FK0V1WNjwvhbdwHWguSXSrEXlDq2ytWs2\nfSnKvVhPdkSC/Xr5bbUt1noAVfpIzCa7McdkLdRmLcuS26JKj+MX4hwQwyaMe2Q=\n=kb4W\n-----END PGP SIGNATURE-----\n", "payload": "tree 690249f8406f074866604ffa98045e5f476e83d5\nparent b1a4e810a4909c36eabf6f4b746a021c2074c2c3\nparent f89722f3571bcdcd7f5e9b6d22d4d8d82dffc332\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593216302 +0000\ncommitter GitHub <noreply@github.com> 1593216302 +0000\n\nMerge #5088\n\n5088: Better exe probing r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd", "html_url": "https://github.com/rust-lang/rust/commit/9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a4e810a4909c36eabf6f4b746a021c2074c2c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a4e810a4909c36eabf6f4b746a021c2074c2c3", "html_url": "https://github.com/rust-lang/rust/commit/b1a4e810a4909c36eabf6f4b746a021c2074c2c3"}, {"sha": "f89722f3571bcdcd7f5e9b6d22d4d8d82dffc332", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89722f3571bcdcd7f5e9b6d22d4d8d82dffc332", "html_url": "https://github.com/rust-lang/rust/commit/f89722f3571bcdcd7f5e9b6d22d4d8d82dffc332"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "9916e52c48090eb966af85b3b02707b7e6b7c1b7", "filename": "crates/ra_toolchain/src/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd/crates%2Fra_toolchain%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd/crates%2Fra_toolchain%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_toolchain%2Fsrc%2Flib.rs?ref=9a4d02faf9c47f401b8756c3f7fcab2198f5f9cd", "patch": "@@ -46,22 +46,23 @@ fn get_path_for_executable(executable_name: &'static str) -> PathBuf {\n         path.push(\".cargo\");\n         path.push(\"bin\");\n         path.push(executable_name);\n-        if path.is_file() {\n+        if let Some(path) = probe(path) {\n             return path;\n         }\n     }\n+\n     executable_name.into()\n }\n \n fn lookup_in_path(exec: &str) -> bool {\n     let paths = env::var_os(\"PATH\").unwrap_or_default();\n-    let mut candidates = env::split_paths(&paths).flat_map(|path| {\n-        let candidate = path.join(&exec);\n-        let with_exe = match env::consts::EXE_EXTENSION {\n-            \"\" => None,\n-            it => Some(candidate.with_extension(it)),\n-        };\n-        iter::once(candidate).chain(with_exe)\n-    });\n-    candidates.any(|it| it.is_file())\n+    env::split_paths(&paths).map(|path| path.join(exec)).find_map(probe).is_some()\n+}\n+\n+fn probe(path: PathBuf) -> Option<PathBuf> {\n+    let with_extension = match env::consts::EXE_EXTENSION {\n+        \"\" => None,\n+        it => Some(path.with_extension(it)),\n+    };\n+    iter::once(path).chain(with_extension).find(|it| it.is_file())\n }"}]}