{"sha": "fc3ea494ac73aee782a903849c09bb011fe18e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjM2VhNDk0YWM3M2FlZTc4MmE5MDM4NDljMDliYjAxMWZlMThlMzc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T04:54:28Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T04:54:28Z"}, "message": "Make children list in-order\n\ninstead of working on reveresed list.", "tree": {"sha": "3909b5a7e505c3122a7d3d018d689d5538b6fe68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3909b5a7e505c3122a7d3d018d689d5538b6fe68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc3ea494ac73aee782a903849c09bb011fe18e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3ea494ac73aee782a903849c09bb011fe18e37", "html_url": "https://github.com/rust-lang/rust/commit/fc3ea494ac73aee782a903849c09bb011fe18e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc3ea494ac73aee782a903849c09bb011fe18e37/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c480309aade9ad5704bca6763f3daf267b81d580", "url": "https://api.github.com/repos/rust-lang/rust/commits/c480309aade9ad5704bca6763f3daf267b81d580", "html_url": "https://github.com/rust-lang/rust/commit/c480309aade9ad5704bca6763f3daf267b81d580"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "f6b1384b6b45bc601fb6748b1689b58396943e9a", "filename": "src/chains.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fc3ea494ac73aee782a903849c09bb011fe18e37/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3ea494ac73aee782a903849c09bb011fe18e37/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=fc3ea494ac73aee782a903849c09bb011fe18e37", "patch": "@@ -71,7 +71,6 @@ use expr::rewrite_call;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n-use spanned::Spanned;\n use utils::{\n     first_line_width, last_line_extendable, last_line_width, mk_sp, trimmed_last_line_width,\n     wrap_str,\n@@ -243,7 +242,7 @@ impl Chain {\n \n         Chain {\n             parent: children.pop().unwrap(),\n-            children,\n+            children: children.into_iter().rev().collect(),\n         }\n     }\n \n@@ -417,10 +416,9 @@ impl<'a> ChainFormatterShared<'a> {\n         shape: Shape,\n         child_shape: Shape,\n     ) -> Option<()> {\n-        let last = &self.children[0];\n-        let extendable =\n-            may_extend && last_line_extendable(&self.rewrites[self.rewrites.len() - 1]);\n-        let prev_last_line_width = last_line_width(&self.rewrites[self.rewrites.len() - 1]);\n+        let last = self.children.last()?;\n+        let extendable = may_extend && last_line_extendable(&self.rewrites[0]);\n+        let prev_last_line_width = last_line_width(&self.rewrites[0]);\n \n         // Total of all items excluding the last.\n         let almost_total = if extendable {\n@@ -551,7 +549,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n         let tab_width = context.config.tab_spaces().saturating_sub(shape.offset);\n \n         while root_rewrite.len() <= tab_width && !root_rewrite.contains('\\n') {\n-            let item = &self.shared.children[self.shared.children.len() - 1];\n+            let item = &self.shared.children[0];\n             let shape = shape.offset_left(root_rewrite.len())?;\n             match &item.rewrite(context, shape) {\n                 Some(rewrite) => root_rewrite.push_str(rewrite),\n@@ -560,7 +558,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n \n             root_ends_with_block = item.kind.is_block_like(context, &root_rewrite);\n \n-            self.shared.children = &self.shared.children[..self.shared.children.len() - 1];\n+            self.shared.children = &self.shared.children[1..];\n             if self.shared.children.is_empty() {\n                 break;\n             }\n@@ -581,7 +579,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n     }\n \n     fn format_children(&mut self, context: &RewriteContext, child_shape: Shape) -> Option<()> {\n-        for item in self.shared.children[1..].iter().rev() {\n+        for item in &self.shared.children[..self.shared.children.len() - 1] {\n             let rewrite = item.rewrite(context, child_shape)?;\n             self.is_block_like\n                 .push(item.kind.is_block_like(context, &rewrite));\n@@ -643,7 +641,7 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n         };\n \n         if !multiline || parent.kind.is_block_like(context, &root_rewrite) {\n-            let item = &self.shared.children[self.shared.children.len() - 1];\n+            let item = &self.shared.children[0];\n             let child_shape = parent_shape\n                 .visual_indent(self.offset)\n                 .sub_width(self.offset)?;\n@@ -659,7 +657,7 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n                 }\n             }\n \n-            self.shared.children = &self.shared.children[..self.shared.children.len() - 1];\n+            self.shared.children = &self.shared.children[1..];\n         }\n \n         self.shared.rewrites.push(root_rewrite);\n@@ -674,7 +672,7 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n     }\n \n     fn format_children(&mut self, context: &RewriteContext, child_shape: Shape) -> Option<()> {\n-        for item in self.shared.children[1..].iter().rev() {\n+        for item in &self.shared.children[..self.shared.children.len() - 1] {\n             let rewrite = item.rewrite(context, child_shape)?;\n             self.shared.rewrites.push(rewrite);\n         }"}]}