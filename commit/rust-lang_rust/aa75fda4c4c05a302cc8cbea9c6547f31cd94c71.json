{"sha": "aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzVmZGE0YzRjMDVhMzAyY2M4Y2JlYTljNjU0N2YzMWNkOTRjNzE=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-07-12T13:27:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T13:27:19Z"}, "message": "Merge pull request #1083 from Manishearth/allow-large-arrays\n\nDon't warn when boxing large arrays r? @mcarton", "tree": {"sha": "6486adafe8958d53dbe99afc2e54329e44719016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6486adafe8958d53dbe99afc2e54329e44719016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "html_url": "https://github.com/rust-lang/rust/commit/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14114f2537b06731b3be4ecbeea1e4c47d3eb12", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14114f2537b06731b3be4ecbeea1e4c47d3eb12", "html_url": "https://github.com/rust-lang/rust/commit/b14114f2537b06731b3be4ecbeea1e4c47d3eb12"}, {"sha": "c1421c6e820c147c1572b98bbcac9c05e51fd066", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1421c6e820c147c1572b98bbcac9c05e51fd066", "html_url": "https://github.com/rust-lang/rust/commit/c1421c6e820c147c1572b98bbcac9c05e51fd066"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "d98420a69f6cdefa07cb6d1fae9d34ee121e8d8e", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "patch": "@@ -1,17 +1,21 @@\n use rustc::hir::*;\n use rustc::hir::intravisit as visit;\n use rustc::hir::map::Node::{NodeExpr, NodeStmt};\n+use rustc::infer::InferCtxt;\n use rustc::lint::*;\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::{cmt, Categorization};\n use rustc::ty::adjustment::AutoAdjustment;\n use rustc::ty;\n+use rustc::ty::layout::TargetDataLayout;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use utils::span_lint;\n \n-pub struct Pass;\n+pub struct Pass {\n+    pub too_large_for_stack: u64,\n+}\n \n /// **What it does:** This lint checks for usage of `Box<T>` where an unboxed `T` would work fine.\n ///\n@@ -39,9 +43,12 @@ fn is_non_trait_box(ty: ty::Ty) -> bool {\n     }\n }\n \n-struct EscapeDelegate<'a, 'tcx: 'a> {\n+struct EscapeDelegate<'a, 'tcx: 'a+'gcx, 'gcx: 'a> {\n     tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n     set: NodeSet,\n+    infcx: &'a InferCtxt<'a, 'gcx, 'gcx>,\n+    target: TargetDataLayout,\n+    too_large_for_stack: u64,\n }\n \n impl LintPass for Pass {\n@@ -55,9 +62,15 @@ impl LateLintPass for Pass {\n         let param_env = ty::ParameterEnvironment::for_item(cx.tcx, id);\n \n         let infcx = cx.tcx.borrowck_fake_infer_ctxt(param_env);\n+\n+        // we store the infcx because it is expensive to recreate\n+        // the context each time.\n         let mut v = EscapeDelegate {\n             tcx: cx.tcx,\n             set: NodeSet(),\n+            infcx: &infcx,\n+            target: TargetDataLayout::parse(cx.sess()),\n+            too_large_for_stack: self.too_large_for_stack,\n         };\n \n         {\n@@ -74,7 +87,7 @@ impl LateLintPass for Pass {\n     }\n }\n \n-impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n+impl<'a, 'tcx: 'a+'gcx, 'gcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx, 'gcx> {\n     fn consume(&mut self, _: NodeId, _: Span, cmt: cmt<'tcx>, mode: ConsumeMode) {\n         if let Categorization::Local(lid) = cmt.cat {\n             if self.set.contains(&lid) {\n@@ -93,7 +106,7 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             if let Some(NodeExpr(..)) = map.find(map.get_parent_node(consume_pat.id)) {\n                 return;\n             }\n-            if is_non_trait_box(cmt.ty) {\n+            if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n                 self.set.insert(consume_pat.id);\n             }\n             return;\n@@ -104,7 +117,7 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                     if let DeclLocal(ref loc) = decl.node {\n                         if let Some(ref ex) = loc.init {\n                             if let ExprBox(..) = ex.node {\n-                                if is_non_trait_box(cmt.ty) {\n+                                if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n                                     // let x = box (...)\n                                     self.set.insert(consume_pat.id);\n                                 }\n@@ -170,3 +183,21 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n     fn decl_without_init(&mut self, _: NodeId, _: Span) {}\n     fn mutate(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: MutateMode) {}\n }\n+\n+impl<'a, 'tcx: 'a+'gcx, 'gcx: 'a> EscapeDelegate<'a, 'tcx, 'gcx> {\n+    fn is_large_box(&self, ty: ty::Ty<'gcx>) -> bool {\n+        // Large types need to be boxed to avoid stack\n+        // overflows.\n+        match ty.sty {\n+            ty::TyBox(ref inner) => {\n+                if let Ok(layout) = inner.layout(self.infcx) {\n+                    let size = layout.size(&self.target);\n+                    size.bytes() > self.too_large_for_stack\n+                } else {\n+                    false\n+                }\n+            },\n+            _ => false,\n+        }\n+    }\n+}"}, {"sha": "5549e19ccb1093d7af1d9cfede15150188107dac", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "patch": "@@ -9,6 +9,7 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(type_macros)]\n+#![feature(iter_arith)]\n \n #![allow(indexing_slicing, shadow_reuse, unknown_lints)]\n \n@@ -219,7 +220,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box temporary_assignment::Pass);\n     reg.register_late_lint_pass(box transmute::Transmute);\n     reg.register_late_lint_pass(box cyclomatic_complexity::CyclomaticComplexity::new(conf.cyclomatic_complexity_threshold));\n-    reg.register_late_lint_pass(box escape::Pass);\n+    reg.register_late_lint_pass(box escape::Pass{too_large_for_stack: conf.too_large_for_stack});\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n     reg.register_late_lint_pass(box misc::UsedUnderscoreBinding);\n     reg.register_late_lint_pass(box array_indexing::ArrayIndexing);"}, {"sha": "5d335c8c12c9e2e6c31637eca5326ebfcb31fbd2", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "patch": "@@ -158,6 +158,8 @@ define_Conf! {\n     (\"type-complexity-threshold\", type_complexity_threshold, 250 => u64),\n     /// Lint: MANY_SINGLE_CHAR_NAMES. The maximum number of single char bindings a scope may have\n     (\"single-char-binding-names-threshold\", max_single_char_names, 5 => u64),\n+    /// Lint: BOXED_LOCAL. The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n+    (\"too-large-for-stack\", too_large_for_stack, 200 => u64),\n }\n \n /// Read the `toml` configuration file. The function will ignore \u201cFile not found\u201d errors iif"}, {"sha": "cb4f2b0a65533760a29c8de5c4f21fdf415cf369", "filename": "tests/compile-fail/escape_analysis.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/tests%2Fcompile-fail%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa75fda4c4c05a302cc8cbea9c6547f31cd94c71/tests%2Fcompile-fail%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fescape_analysis.rs?ref=aa75fda4c4c05a302cc8cbea9c6547f31cd94c71", "patch": "@@ -103,3 +103,12 @@ fn warn_match() {\n         ref y => ()\n     }\n }\n+\n+fn nowarn_large_array() {\n+    // should not warn, is large array\n+    // and should not be on stack\n+    let x = box [1; 10000];\n+    match &x { // not moved\n+        ref y => ()\n+    }\n+}"}]}