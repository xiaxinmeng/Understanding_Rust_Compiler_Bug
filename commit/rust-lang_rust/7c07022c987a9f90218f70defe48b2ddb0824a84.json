{"sha": "7c07022c987a9f90218f70defe48b2ddb0824a84", "node_id": "C_kwDOAAsO6NoAKDdjMDcwMjJjOTg3YTlmOTAyMThmNzBkZWZlNDhiMmRkYjA4MjRhODQ", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-16T15:45:49Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-18T20:02:28Z"}, "message": "Allow transmuting fat pointers to some types in `transmute_undefined_repr`", "tree": {"sha": "1f96234e809f9ea28b3d8b5d65f0c9358a4178f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f96234e809f9ea28b3d8b5d65f0c9358a4178f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c07022c987a9f90218f70defe48b2ddb0824a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c07022c987a9f90218f70defe48b2ddb0824a84", "html_url": "https://github.com/rust-lang/rust/commit/7c07022c987a9f90218f70defe48b2ddb0824a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c07022c987a9f90218f70defe48b2ddb0824a84/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "447a24588a865142aeaf9153952485d1cd6b9c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/447a24588a865142aeaf9153952485d1cd6b9c67", "html_url": "https://github.com/rust-lang/rust/commit/447a24588a865142aeaf9153952485d1cd6b9c67"}], "stats": {"total": 82, "additions": 50, "deletions": 32}, "files": [{"sha": "2630bc4e9ab34d94f6c3f9607ba63659cc471244", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7c07022c987a9f90218f70defe48b2ddb0824a84/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c07022c987a9f90218f70defe48b2ddb0824a84/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=7c07022c987a9f90218f70defe48b2ddb0824a84", "patch": "@@ -19,33 +19,39 @@ pub(super) fn check<'tcx>(\n \n     while from_ty != to_ty {\n         match reduce_refs(cx, e.span, from_ty, to_ty) {\n-            ReducedTys::FromFatPtr { unsized_ty, .. } => {\n-                span_lint_and_then(\n-                    cx,\n-                    TRANSMUTE_UNDEFINED_REPR,\n-                    e.span,\n-                    &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n-                    |diag| {\n-                        if from_ty_orig.peel_refs() != unsized_ty {\n-                            diag.note(&format!(\"the contained type `&{}` has an undefined layout\", unsized_ty));\n-                        }\n-                    },\n-                );\n-                return true;\n+            ReducedTys::FromFatPtr { unsized_ty, to_ty } => match reduce_ty(cx, to_ty) {\n+                ReducedTy::IntArray | ReducedTy::TypeErasure => break,\n+                _ => {\n+                    span_lint_and_then(\n+                        cx,\n+                        TRANSMUTE_UNDEFINED_REPR,\n+                        e.span,\n+                        &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n+                        |diag| {\n+                            if from_ty_orig.peel_refs() != unsized_ty {\n+                                diag.note(&format!(\"the contained type `&{}` has an undefined layout\", unsized_ty));\n+                            }\n+                        },\n+                    );\n+                    return true;\n+                },\n             },\n-            ReducedTys::ToFatPtr { unsized_ty, .. } => {\n-                span_lint_and_then(\n-                    cx,\n-                    TRANSMUTE_UNDEFINED_REPR,\n-                    e.span,\n-                    &format!(\"transmute to `{}` which has an undefined layout\", to_ty_orig),\n-                    |diag| {\n-                        if to_ty_orig.peel_refs() != unsized_ty {\n-                            diag.note(&format!(\"the contained type `&{}` has an undefined layout\", unsized_ty));\n-                        }\n-                    },\n-                );\n-                return true;\n+            ReducedTys::ToFatPtr { unsized_ty, from_ty } => match reduce_ty(cx, from_ty) {\n+                ReducedTy::IntArray | ReducedTy::TypeErasure => break,\n+                _ => {\n+                    span_lint_and_then(\n+                        cx,\n+                        TRANSMUTE_UNDEFINED_REPR,\n+                        e.span,\n+                        &format!(\"transmute to `{}` which has an undefined layout\", to_ty_orig),\n+                        |diag| {\n+                            if to_ty_orig.peel_refs() != unsized_ty {\n+                                diag.note(&format!(\"the contained type `&{}` has an undefined layout\", unsized_ty));\n+                            }\n+                        },\n+                    );\n+                    return true;\n+                },\n             },\n             ReducedTys::ToPtr {\n                 from_ty: from_sub_ty,\n@@ -184,8 +190,8 @@ pub(super) fn check<'tcx>(\n }\n \n enum ReducedTys<'tcx> {\n-    FromFatPtr { unsized_ty: Ty<'tcx> },\n-    ToFatPtr { unsized_ty: Ty<'tcx> },\n+    FromFatPtr { unsized_ty: Ty<'tcx>, to_ty: Ty<'tcx> },\n+    ToFatPtr { unsized_ty: Ty<'tcx>, from_ty: Ty<'tcx> },\n     ToPtr { from_ty: Ty<'tcx>, to_ty: Ty<'tcx> },\n     FromPtr { from_ty: Ty<'tcx>, to_ty: Ty<'tcx> },\n     Other { from_ty: Ty<'tcx>, to_ty: Ty<'tcx> },\n@@ -211,12 +217,12 @@ fn reduce_refs<'tcx>(\n             (ty::Ref(_, unsized_ty, _) | ty::RawPtr(TypeAndMut { ty: unsized_ty, .. }), _)\n                 if !unsized_ty.is_sized(cx.tcx.at(span), cx.param_env) =>\n             {\n-                ReducedTys::FromFatPtr { unsized_ty }\n+                ReducedTys::FromFatPtr { unsized_ty, to_ty }\n             },\n             (_, ty::Ref(_, unsized_ty, _) | ty::RawPtr(TypeAndMut { ty: unsized_ty, .. }))\n                 if !unsized_ty.is_sized(cx.tcx.at(span), cx.param_env) =>\n             {\n-                ReducedTys::ToFatPtr { unsized_ty }\n+                ReducedTys::ToFatPtr { unsized_ty, from_ty }\n             },\n             (ty::Ref(_, from_ty, _) | ty::RawPtr(TypeAndMut { ty: from_ty, .. }), _) => {\n                 ReducedTys::FromPtr { from_ty, to_ty }"}, {"sha": "84dd1ada8c3dd35ab513ed7e90de518725c6590c", "filename": "tests/ui/transmute_undefined_repr.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c07022c987a9f90218f70defe48b2ddb0824a84/tests%2Fui%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c07022c987a9f90218f70defe48b2ddb0824a84/tests%2Fui%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.rs?ref=7c07022c987a9f90218f70defe48b2ddb0824a84", "patch": "@@ -1,8 +1,8 @@\n #![warn(clippy::transmute_undefined_repr)]\n-#![allow(clippy::unit_arg)]\n+#![allow(clippy::unit_arg, clippy::transmute_ptr_to_ref)]\n \n use core::ffi::c_void;\n-use core::mem::transmute;\n+use core::mem::{size_of, transmute};\n \n fn value<T>() -> T {\n     unimplemented!()\n@@ -72,5 +72,17 @@ fn main() {\n         );\n         let _: *const Erase2 = transmute(value::<Ty<&Ty2<u32, f32>>>()); // Ok, type erasure\n         let _: Ty<&Ty2<u32, f32>> = transmute(value::<*const Erase2>()); // Ok, reverse type erasure\n+\n+        let _: *const () = transmute(value::<&&[u8]>()); // Ok, type erasure\n+        let _: &&[u8] = transmute(value::<*const ()>()); // Ok, reverse type erasure\n+\n+        let _: *mut c_void = transmute(value::<&mut &[u8]>()); // Ok, type erasure\n+        let _: &mut &[u8] = transmute(value::<*mut c_void>()); // Ok, reverse type erasure\n+\n+        let _: [u8; size_of::<&[u8]>()] = transmute(value::<&[u8]>()); // Ok, transmute to byte array\n+        let _: &[u8] = transmute(value::<[u8; size_of::<&[u8]>()]>()); // Ok, transmute from byte array\n+\n+        let _: [usize; 2] = transmute(value::<&[u8]>()); // Ok, transmute to int array\n+        let _: &[u8] = transmute(value::<[usize; 2]>()); // Ok, transmute from int array\n     }\n }"}]}