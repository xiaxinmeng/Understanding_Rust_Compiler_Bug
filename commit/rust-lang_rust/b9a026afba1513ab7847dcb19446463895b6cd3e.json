{"sha": "b9a026afba1513ab7847dcb19446463895b6cd3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YTAyNmFmYmExNTEzYWI3ODQ3ZGNiMTk0NDY0NjM4OTViNmNkM2U=", "commit": {"author": {"name": "Virgile Andreani", "email": "virgile.andreani@anbuco.fr", "date": "2014-01-30T18:29:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-01T05:43:07Z"}, "message": "Fix minor doc typos", "tree": {"sha": "6a9b43ab5dae8dde8ef45ddc093d33ec88f28efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a9b43ab5dae8dde8ef45ddc093d33ec88f28efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9a026afba1513ab7847dcb19446463895b6cd3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a026afba1513ab7847dcb19446463895b6cd3e", "html_url": "https://github.com/rust-lang/rust/commit/b9a026afba1513ab7847dcb19446463895b6cd3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9a026afba1513ab7847dcb19446463895b6cd3e/comments", "author": {"login": "Armavica", "id": 5855503, "node_id": "MDQ6VXNlcjU4NTU1MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5855503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Armavica", "html_url": "https://github.com/Armavica", "followers_url": "https://api.github.com/users/Armavica/followers", "following_url": "https://api.github.com/users/Armavica/following{/other_user}", "gists_url": "https://api.github.com/users/Armavica/gists{/gist_id}", "starred_url": "https://api.github.com/users/Armavica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Armavica/subscriptions", "organizations_url": "https://api.github.com/users/Armavica/orgs", "repos_url": "https://api.github.com/users/Armavica/repos", "events_url": "https://api.github.com/users/Armavica/events{/privacy}", "received_events_url": "https://api.github.com/users/Armavica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c8b1125804b5666d0cc0139c205a6aa0be95eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8b1125804b5666d0cc0139c205a6aa0be95eaa", "html_url": "https://github.com/rust-lang/rust/commit/2c8b1125804b5666d0cc0139c205a6aa0be95eaa"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "4fd59bb3aa503c0820d469922a0f87276b2d4305", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -60,7 +60,7 @@ pub trait FromHex {\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, uint),\n-    /// The input had a invalid length\n+    /// The input had an invalid length\n     InvalidHexLength,\n }\n "}, {"sha": "c1959843d598b300ee6bdf2d11634b63495831a2", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1292,7 +1292,7 @@ impl ToStrRadix for BigInt {\n }\n \n impl FromStrRadix for BigInt {\n-    /// Creates and initializes an BigInt.\n+    /// Creates and initializes a BigInt.\n     #[inline]\n     fn from_str_radix(s: &str, radix: uint) -> Option<BigInt> {\n         BigInt::parse_bytes(s.as_bytes(), radix)\n@@ -1385,7 +1385,7 @@ impl<R: Rng> RandBigInt for R {\n }\n \n impl BigInt {\n-    /// Creates and initializes an BigInt.\n+    /// Creates and initializes a BigInt.\n     #[inline]\n     pub fn new(sign: Sign, v: ~[BigDigit]) -> BigInt {\n         BigInt::from_biguint(sign, BigUint::new(v))"}, {"sha": "c05ca3e87695067d716a1254d30d53b6b0a322e5", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -485,7 +485,7 @@ pub fn check_durable(tcx: ty::ctxt, ty: ty::t, sp: Span) -> bool {\n     }\n }\n \n-/// This is rather subtle.  When we are casting a value to a instantiated\n+/// This is rather subtle.  When we are casting a value to an instantiated\n /// trait like `a as trait<'r>`, regionck already ensures that any references\n /// that appear in the type of `a` are bounded by `'r` (ed.: rem\n /// FIXME(#5723)).  However, it is possible that there are *type parameters*\n@@ -516,7 +516,7 @@ pub fn check_cast_for_escaping_regions(\n     target_ty: ty::t,\n     source_span: Span)\n {\n-    // Determine what type we are casting to; if it is not an trait, then no\n+    // Determine what type we are casting to; if it is not a trait, then no\n     // worries.\n     match ty::get(target_ty).sty {\n         ty::ty_trait(..) => {}"}, {"sha": "7cb549d91a8a10d193c07004f5b78446953e2026", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -371,7 +371,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n     (\"unused_must_use\",\n     LintSpec {\n         lint: UnusedMustUse,\n-        desc: \"unused result of an type flagged as #[must_use]\",\n+        desc: \"unused result of a type flagged as #[must_use]\",\n         default: warn,\n     }),\n "}, {"sha": "7bc37d4e695127df31f180d120855baff87c1a14", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -244,7 +244,7 @@ pub enum VecLenOpt {\n     vec_len_ge(/* length of prefix */uint)\n }\n \n-// An option identifying a branch (either a literal, a enum variant or a\n+// An option identifying a branch (either a literal, an enum variant or a\n // range)\n enum Opt {\n     lit(Lit),"}, {"sha": "317df481335ccf13c954a01e638b5a1cf691897c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -2591,7 +2591,7 @@ pub fn type_is_sized(cx: ctxt, ty: ty::t) -> bool {\n     }\n }\n \n-// Whether a type is enum like, that is a enum type with only nullary\n+// Whether a type is enum like, that is an enum type with only nullary\n // constructors\n pub fn type_is_c_like_enum(cx: ctxt, ty: t) -> bool {\n     match get(ty).sty {"}, {"sha": "9f44aa1a0237e8d0ee8d4a2940075c4d43789553", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -385,7 +385,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n     }\n \n     // Handle @, ~, and & being able to mean strs and vecs.\n-    // If a_seq_ty is a str or a vec, make it an str/vec.\n+    // If a_seq_ty is a str or a vec, make it a str/vec.\n     // Also handle first-class trait types.\n     fn mk_pointer<AC:AstConv,\n                   RS:RegionScope>("}, {"sha": "7e8fa4e66713c5204bb019a96149b08502a106d6", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -2008,7 +2008,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         }\n     }\n \n-    // could be either a expr_binop or an expr_assign_binop\n+    // could be either an expr_binop or an expr_assign_binop\n     fn check_binop(fcx: @FnCtxt,\n                    callee_id: ast::NodeId,\n                    expr: &ast::Expr,"}, {"sha": "d9a9d9f8fe1239fe9bb39b4073a1a91fd8b2d009", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -737,7 +737,7 @@ pub fn instantiate_trait_ref(ccx: &CrateCtxt,\n     /*!\n      * Instantiates the path for the given trait reference, assuming that\n      * it's bound to a valid trait type. Returns the def_id for the defining\n-     * trait. Fails if the type is a type other than an trait type.\n+     * trait. Fails if the type is a type other than a trait type.\n      */\n \n     // FIXME(#5121) -- distinguish early vs late lifetime params"}, {"sha": "74fefe4168369e60d30535843218e1acbfdf7103", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -476,7 +476,7 @@ pub struct Sha256 {\n }\n \n impl Sha256 {\n-    /// Construct an new instance of a SHA-256 digest.\n+    /// Construct a new instance of a SHA-256 digest.\n     pub fn new() -> Sha256 {\n         Sha256 {\n             engine: Engine256::new(&H256)"}, {"sha": "2885d05a5bd5c32fef4bfa4a243ff57505ecc958", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -101,7 +101,7 @@ pub enum ExternalLocation {\n enum Implementor {\n     /// Paths are displayed specially by omitting the `impl XX for` cruft\n     PathType(clean::Type),\n-    /// This is the generic representation of an trait implementor, used for\n+    /// This is the generic representation of a trait implementor, used for\n     /// primitive types and otherwise non-path types.\n     OtherType(clean::Generics, /* trait */ clean::Type, /* for */ clean::Type),\n }"}, {"sha": "72ccf6be023eac4d2734d21f161a2d325ad04a29", "filename": "src/libstd/any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -118,7 +118,7 @@ impl<'a> AnyMutRefExt<'a> for &'a mut Any {\n     }\n }\n \n-/// Extension methods for a owning `Any` trait object\n+/// Extension methods for an owning `Any` trait object\n pub trait AnyOwnExt {\n     /// Returns the boxed value if it is of type `T`, or\n     /// `Err(Self)` if it isn't."}, {"sha": "83aec9d0aa639b13c482ecacead126bbfcf44da2", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -27,13 +27,13 @@ use option::{Option, Some, None};\n pub struct Ascii { priv chr: u8 }\n \n impl Ascii {\n-    /// Converts a ascii character into a `u8`.\n+    /// Converts an ascii character into a `u8`.\n     #[inline]\n     pub fn to_byte(self) -> u8 {\n         self.chr\n     }\n \n-    /// Converts a ascii character into a `char`.\n+    /// Converts an ascii character into a `char`.\n     #[inline]\n     pub fn to_char(self) -> char {\n         self.chr as char\n@@ -314,9 +314,9 @@ impl IterBytes for Ascii {\n     }\n }\n \n-/// Trait to convert to a owned byte array by consuming self\n+/// Trait to convert to an owned byte array by consuming self\n pub trait IntoBytes {\n-    /// Converts to a owned byte array by consuming self\n+    /// Converts to an owned byte array by consuming self\n     fn into_bytes(self) -> ~[u8];\n }\n "}, {"sha": "69f0cf96ffc345b124e1a40b4ec25a98fce1faba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -83,7 +83,7 @@ Some examples of obvious things you might want to do\n     let lines: ~[~str] = file.lines().collect();\n     ```\n \n-* Make an simple HTTP request\n+* Make a simple HTTP request\n   FIXME This needs more improvement: TcpStream constructor taking &str,\n   `write_str` and `write_line` methods.\n "}, {"sha": "df7b04dcd1976e606c63416c84d76b0ebbc55037", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -213,7 +213,7 @@ pub trait Iterator<A> {\n \n \n     /// Creates an iterator that has a `.peek()` method\n-    /// that returns a optional reference to the next element.\n+    /// that returns an optional reference to the next element.\n     ///\n     /// # Example\n     ///"}, {"sha": "a4b6aca86f7f15e6040091bd4290be9815dc5649", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -812,7 +812,7 @@ impl num::ToStrRadix for f32 {\n }\n \n /// Convert a string in base 16 to a float.\n-/// Accepts a optional binary exponent.\n+/// Accepts an optional binary exponent.\n ///\n /// This function accepts strings such as\n ///\n@@ -844,7 +844,7 @@ pub fn from_str_hex(num: &str) -> Option<f32> {\n \n impl FromStr for f32 {\n     /// Convert a string in base 10 to a float.\n-    /// Accepts a optional decimal exponent.\n+    /// Accepts an optional decimal exponent.\n     ///\n     /// This function accepts strings such as\n     ///\n@@ -876,7 +876,7 @@ impl FromStr for f32 {\n }\n \n impl num::FromStrRadix for f32 {\n-    /// Convert a string in an given base to a float.\n+    /// Convert a string in a given base to a float.\n     ///\n     /// Due to possible conflicts, this function does **not** accept\n     /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**"}, {"sha": "d51f6b602d72b73d69fd770d89d2f1eec2221865", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -814,7 +814,7 @@ impl num::ToStrRadix for f64 {\n }\n \n /// Convert a string in base 16 to a float.\n-/// Accepts a optional binary exponent.\n+/// Accepts an optional binary exponent.\n ///\n /// This function accepts strings such as\n ///\n@@ -846,7 +846,7 @@ pub fn from_str_hex(num: &str) -> Option<f64> {\n \n impl FromStr for f64 {\n     /// Convert a string in base 10 to a float.\n-    /// Accepts a optional decimal exponent.\n+    /// Accepts an optional decimal exponent.\n     ///\n     /// This function accepts strings such as\n     ///\n@@ -878,7 +878,7 @@ impl FromStr for f64 {\n }\n \n impl num::FromStrRadix for f64 {\n-    /// Convert a string in an given base to a float.\n+    /// Convert a string in a given base to a float.\n     ///\n     /// Due to possible conflicts, this function does **not** accept\n     /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**"}, {"sha": "1ecabff875872d90dace565ff20f4ced22311c23", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -517,7 +517,7 @@ static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n  *     - `ExpBin`:  Accepts numbers with a binary exponent like `42P-8` or\n  *                  `FFp128`. The exponent string itself is always base 10.\n  *                  Can conflict with `radix`, see Failure.\n- * - `empty_zero` - Whether to accept a empty `buf` as a 0 or not.\n+ * - `empty_zero` - Whether to accept an empty `buf` as a 0 or not.\n  * - `ignore_underscores` - Whether all underscores within the string should\n  *                          be ignored.\n  *"}, {"sha": "fd5f3a233e6bfbe1d6348e1d23a91c2cfb64b74c", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -121,7 +121,7 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps a option, yielding the content of a `Some`\n+    /// Unwraps an option, yielding the content of a `Some`\n     /// Fails if the value is a `None` with a custom failure message provided by `msg`.\n     #[inline]\n     pub fn expect<M: Any + Send>(self, msg: M) -> T {"}, {"sha": "4783c983d00f93e31cb685b420c48cb2d6c7f79e", "filename": "src/libstd/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -102,7 +102,7 @@ impl<T, E> Result<T, E> {\n     // Transforming contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Maps an `Result<T, E>` to `Result<U, E>` by applying a function to an\n+    /// Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\n     /// contained `Ok` value, leaving an `Err` value untouched.\n     ///\n     /// This function can be used to compose the results of two functions.\n@@ -120,7 +120,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Maps an `Result<T, E>` to `Result<T, F>` by applying a function to an\n+    /// Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\n     /// contained `Err` value, leaving an `Ok` value untouched.\n     ///\n     /// This function can be used to pass through a successful result while handling"}, {"sha": "2599a74a748cbe74b37fa1017baf5bd88649d5b1", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -38,7 +38,7 @@ impl SendStr {\n         }\n     }\n \n-    /// Returns `true` if this `SendStr` wraps an static string\n+    /// Returns `true` if this `SendStr` wraps a static string\n     #[inline]\n     pub fn is_static(&self) -> bool {\n         match *self {"}, {"sha": "16af8367edf3d2c0c088191a745ae9f61f479c6f", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -417,7 +417,7 @@ pub struct CharSplitsN<'a, Sep> {\n     priv invert: bool,\n }\n \n-/// An iterator over the words of a string, separated by an sequence of whitespace\n+/// An iterator over the words of a string, separated by a sequence of whitespace\n pub type Words<'a> =\n     Filter<'a, &'a str, CharSplits<'a, extern \"Rust\" fn(char) -> bool>>;\n "}, {"sha": "8e73368647271566cb67dae6a0e14ad837b4c955", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -804,7 +804,7 @@ pub trait CloneableVector<T> {\n     /// Copy `self` into a new owned vector\n     fn to_owned(&self) -> ~[T];\n \n-    /// Convert `self` into a owned vector, not making a copy if possible.\n+    /// Convert `self` into an owned vector, not making a copy if possible.\n     fn into_owned(self) -> ~[T];\n }\n "}, {"sha": "1513946e401d3b784cb3299ceb6c1b9e2f59a7b3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -680,7 +680,7 @@ pub enum TokenTree {\n //\n // As a final, horrifying aside, note that macro-by-example's input is\n // also matched by one of these matchers. Holy self-referential! It is matched\n-// by an MatchSeq, specifically this one:\n+// by a MatchSeq, specifically this one:\n //\n //                   $( $lhs:matchers => $rhs:tt );+\n //"}, {"sha": "6449d0aab5e54d75f6c39f9d546d5698a72597c9", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -42,7 +42,7 @@ arguments:\n   the same variant (e.g. `None`, `Some(1)` and `None`). If\n   `const_nonmatching` is true, this will contain an empty list.\n - `StaticEnum` and `StaticStruct` for static methods, where the type\n-  being derived upon is either a enum or struct respectively. (Any\n+  being derived upon is either an enum or struct respectively. (Any\n   argument with type Self is just grouped among the non-self\n   arguments.)\n "}, {"sha": "46215d6b164364a2c543c42755f0849ec0c8774f", "filename": "src/test/compile-fail/borrowck-anon-fields-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,5 +1,5 @@\n // Tests that we are able to distinguish when loans borrow different\n-// anonymous fields of an tuple vs the same anonymous field.\n+// anonymous fields of a tuple vs the same anonymous field.\n \n struct Y(uint, uint);\n "}, {"sha": "5c83e81d8be2cbb73eefb506d4d67c43e5d0a41b", "filename": "src/test/run-pass/expr-match-fail-all.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a026afba1513ab7847dcb19446463895b6cd3e/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs?ref=b9a026afba1513ab7847dcb19446463895b6cd3e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,7 +11,7 @@\n \n \n \n-// When all branches of an match expression result in fail, the entire\n+// When all branches of a match expression result in fail, the entire\n // match expression results in fail.\n pub fn main() {\n     let _x ="}]}