{"sha": "5058e58676bd6c3af63fc4e35a327c07fce2a276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNThlNTg2NzZiZDZjM2FmNjNmYzRlMzVhMzI3YzA3ZmNlMmEyNzY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-11T11:54:10Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-11T11:54:10Z"}, "message": "vec: Write the .extend() specialization in cleaner style\n\nAs far as possible, use regular `default fn` specialization in favour of\nad-hoc conditionals.", "tree": {"sha": "2aa80020b75639ccb8ed0bc21c9898cf3c426ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa80020b75639ccb8ed0bc21c9898cf3c426ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5058e58676bd6c3af63fc4e35a327c07fce2a276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5058e58676bd6c3af63fc4e35a327c07fce2a276", "html_url": "https://github.com/rust-lang/rust/commit/5058e58676bd6c3af63fc4e35a327c07fce2a276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5058e58676bd6c3af63fc4e35a327c07fce2a276/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9f16bbc419d1a945823d91419bbb1fc75bfbc79", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f16bbc419d1a945823d91419bbb1fc75bfbc79", "html_url": "https://github.com/rust-lang/rust/commit/c9f16bbc419d1a945823d91419bbb1fc75bfbc79"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "53b7ae0703bf4819e29f50a11ca3bbce6c7f99eb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5058e58676bd6c3af63fc4e35a327c07fce2a276/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5058e58676bd6c3af63fc4e35a327c07fce2a276/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=5058e58676bd6c3af63fc4e35a327c07fce2a276", "patch": "@@ -1586,36 +1586,34 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        self.extend_desugared(iter.into_iter())\n+        self.spec_extend(iter.into_iter())\n     }\n }\n \n-trait IsTrustedLen : Iterator {\n-    fn trusted_len(&self) -> Option<usize> { None }\n+trait SpecExtend<I> {\n+    fn spec_extend(&mut self, iter: I);\n }\n-impl<I> IsTrustedLen for I where I: Iterator { }\n \n-impl<I> IsTrustedLen for I where I: TrustedLen\n+impl<I, T> SpecExtend<I> for Vec<T>\n+    where I: Iterator<Item=T>,\n {\n-    fn trusted_len(&self) -> Option<usize> {\n-        let (low, high) = self.size_hint();\n+    default fn spec_extend(&mut self, iter: I) {\n+        self.extend_desugared(iter)\n+    }\n+}\n+\n+impl<I, T> SpecExtend<I> for Vec<T>\n+    where I: TrustedLen<Item=T>,\n+{\n+    fn spec_extend(&mut self, iterator: I) {\n+        // This is the case for a TrustedLen iterator.\n+        let (low, high) = iterator.size_hint();\n         if let Some(high_value) = high {\n             debug_assert_eq!(low, high_value,\n                              \"TrustedLen iterator's size hint is not exact: {:?}\",\n                              (low, high));\n         }\n-        high\n-    }\n-}\n-\n-impl<T> Vec<T> {\n-    fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {\n-        // This function should be the moral equivalent of:\n-        //\n-        //      for item in iterator {\n-        //          self.push(item);\n-        //      }\n-        if let Some(additional) = iterator.trusted_len() {\n+        if let Some(additional) = high {\n             self.reserve(additional);\n             unsafe {\n                 let mut ptr = self.as_mut_ptr().offset(self.len() as isize);\n@@ -1628,17 +1626,30 @@ impl<T> Vec<T> {\n                 }\n             }\n         } else {\n-            while let Some(element) = iterator.next() {\n-                let len = self.len();\n-                if len == self.capacity() {\n-                    let (lower, _) = iterator.size_hint();\n-                    self.reserve(lower.saturating_add(1));\n-                }\n-                unsafe {\n-                    ptr::write(self.get_unchecked_mut(len), element);\n-                    // NB can't overflow since we would have had to alloc the address space\n-                    self.set_len(len + 1);\n-                }\n+            self.extend_desugared(iterator)\n+        }\n+    }\n+}\n+\n+impl<T> Vec<T> {\n+    fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {\n+        // This is the case for a general iterator.\n+        //\n+        // This function should be the moral equivalent of:\n+        //\n+        //      for item in iterator {\n+        //          self.push(item);\n+        //      }\n+        while let Some(element) = iterator.next() {\n+            let len = self.len();\n+            if len == self.capacity() {\n+                let (lower, _) = iterator.size_hint();\n+                self.reserve(lower.saturating_add(1));\n+            }\n+            unsafe {\n+                ptr::write(self.get_unchecked_mut(len), element);\n+                // NB can't overflow since we would have had to alloc the address space\n+                self.set_len(len + 1);\n             }\n         }\n     }"}]}