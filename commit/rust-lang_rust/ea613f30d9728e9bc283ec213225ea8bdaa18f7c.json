{"sha": "ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjEzZjMwZDk3MjhlOWJjMjgzZWMyMTMyMjVlYThiZGFhMThmN2M=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-06T13:11:09Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-13T19:41:31Z"}, "message": "Buffer and migrate nice region errors", "tree": {"sha": "4d4b6779f59aeba976c48e015b743226ef24de90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d4b6779f59aeba976c48e015b743226ef24de90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "html_url": "https://github.com/rust-lang/rust/commit/ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "168c14a1a59de279534c09a1b4e23b3b7f8f774d", "url": "https://api.github.com/repos/rust-lang/rust/commits/168c14a1a59de279534c09a1b4e23b3b7f8f774d", "html_url": "https://github.com/rust-lang/rust/commit/168c14a1a59de279534c09a1b4e23b3b7f8f774d"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "d995fe92337c4f66d398b0bedaaf14f7f8db817d", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "patch": "@@ -1,9 +1,10 @@\n use crate::infer::InferCtxt;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError::*;\n-use syntax::source_map::Span;\n use crate::ty::{self, TyCtxt};\n use crate::util::common::ErrorReported;\n+use errors::DiagnosticBuilder;\n+use syntax::source_map::Span;\n \n mod different_lifetimes;\n mod find_anon_type;\n@@ -59,7 +60,7 @@ impl<'cx, 'gcx, 'tcx> NiceRegionError<'cx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn try_report_from_nll(&self) -> Option<ErrorReported> {\n+    pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'cx>> {\n         // Due to the improved diagnostics returned by the MIR borrow checker, only a subset of\n         // the nice region errors are required when running under the MIR borrow checker.\n         self.try_report_named_anon_conflict()\n@@ -68,6 +69,7 @@ impl<'cx, 'gcx, 'tcx> NiceRegionError<'cx, 'gcx, 'tcx> {\n \n     pub fn try_report(&self) -> Option<ErrorReported> {\n         self.try_report_from_nll()\n+            .map(|mut diag| { diag.emit(); ErrorReported })\n             .or_else(|| self.try_report_anon_anon_conflict())\n             .or_else(|| self.try_report_outlives_closure())\n             .or_else(|| self.try_report_static_impl_trait())"}, {"sha": "3821484d38e5f9bd291d33d2f79bd6eaca568988", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "patch": "@@ -2,13 +2,12 @@\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty;\n-use crate::util::common::ErrorReported;\n-use errors::Applicability;\n+use errors::{Applicability, DiagnosticBuilder};\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n-    pub(super) fn try_report_named_anon_conflict(&self) -> Option<ErrorReported> {\n+    pub(super) fn try_report_named_anon_conflict(&self) -> Option<DiagnosticBuilder<'a>> {\n         let (span, sub, sup) = self.get_regions();\n \n         debug!(\n@@ -96,21 +95,23 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             (\"parameter type\".to_owned(), \"type\".to_owned())\n         };\n \n-        struct_span_err!(\n+        let mut diag = struct_span_err!(\n             self.tcx().sess,\n             span,\n             E0621,\n             \"explicit lifetime required in {}\",\n             error_var\n-        ).span_suggestion(\n-            new_ty_span,\n-            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-            new_ty.to_string(),\n-            Applicability::Unspecified,\n-        )\n-        .span_label(span, format!(\"lifetime `{}` required\", named))\n-        .emit();\n-        return Some(ErrorReported);\n+        );\n+\n+        diag.span_suggestion(\n+                new_ty_span,\n+                &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n+                new_ty.to_string(),\n+                Applicability::Unspecified,\n+            )\n+            .span_label(span, format!(\"lifetime `{}` required\", named));\n+\n+        Some(diag)\n     }\n \n     // This method returns whether the given Region is Named"}, {"sha": "3b2fb7d41008e55ca2d3077876ffa6f87d13e5a6", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "patch": "@@ -8,13 +8,12 @@ use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty;\n use crate::ty::error::ExpectedFound;\n use crate::ty::subst::Substs;\n-use crate::util::common::ErrorReported;\n use crate::util::ppaux::RegionHighlightMode;\n \n impl NiceRegionError<'me, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit a descriptive diagnostic error.\n-    pub(super) fn try_report_placeholder_conflict(&self) -> Option<ErrorReported> {\n+    pub(super) fn try_report_placeholder_conflict(&self) -> Option<DiagnosticBuilder<'me>> {\n         match &self.error {\n             ///////////////////////////////////////////////////////////////////////////\n             // NB. The ordering of cases in this match is very\n@@ -178,7 +177,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         trait_def_id: DefId,\n         expected_substs: &'tcx Substs<'tcx>,\n         actual_substs: &'tcx Substs<'tcx>,\n-    ) -> ErrorReported {\n+    ) -> DiagnosticBuilder<'me> {\n         debug!(\n             \"try_report_placeholders_trait(\\\n              vid={:?}, \\\n@@ -295,8 +294,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             any_self_ty_has_vid,\n         );\n \n-        err.emit();\n-        ErrorReported\n+        err\n     }\n \n     /// Add notes with details about the expected and actual trait refs, with attention to cases"}, {"sha": "081c458bfc17a37d821b7f544e8d7316fe85f9f1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea613f30d9728e9bc283ec213225ea8bdaa18f7c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=ea613f30d9728e9bc283ec213225ea8bdaa18f7c", "patch": "@@ -244,7 +244,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);\n             let nice = NiceRegionError::new_from_span(infcx, span, o, f, Some(tables));\n-            if let Some(_error_reported) = nice.try_report_from_nll() {\n+            if let Some(diag) = nice.try_report_from_nll() {\n+                diag.buffer(errors_buffer);\n                 return;\n             }\n         }"}]}