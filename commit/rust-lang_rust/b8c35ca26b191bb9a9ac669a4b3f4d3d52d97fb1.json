{"sha": "b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "node_id": "C_kwDOAAsO6NoAKGI4YzM1Y2EyNmIxOTFiYjlhOWFjNjY5YTRiM2Y0ZDNkNTJkOTdmYjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-15T13:30:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-15T13:30:15Z"}, "message": "Auto merge of #102895 - Nilstrieb:query-cleanups, r=cjgillot\n\nGet rid of `rustc_query_description!`\n\n**I am not entirely sure whether this is an improvement and would like to get your feedback on it.**\n\nHelps with #96524.\n\nQueries can provide an arbitrary expression for their description and their caching behavior. Before, these expressions where stored in a `rustc_query_description` macro emitted by the `rustc_queries` macro, and then used in `rustc_query_impl` to fill out the methods for the `QueryDescription` trait.\n\nInstead, we now emit two new modules from `rustc_queries` containing the functions with the expressions. `rustc_query_impl` calls these functions now instead of invoking the macro.\n\nSince we are now defining some of the functions in `rustc_middle::query`, we now need all the imports for the key types mthere as well.\n\nr? `@cjgillot`", "tree": {"sha": "b46adf1305800806469189e68b66e8899940a302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b46adf1305800806469189e68b66e8899940a302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "html_url": "https://github.com/rust-lang/rust/commit/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93ef33700e4e4f84fd85690df71b14c1d2b0aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c93ef33700e4e4f84fd85690df71b14c1d2b0aa3", "html_url": "https://github.com/rust-lang/rust/commit/c93ef33700e4e4f84fd85690df71b14c1d2b0aa3"}, {"sha": "24ce4cfa205da0afc8500684465bf8158bd4adae", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ce4cfa205da0afc8500684465bf8158bd4adae", "html_url": "https://github.com/rust-lang/rust/commit/24ce4cfa205da0afc8500684465bf8158bd4adae"}], "stats": {"total": 94, "additions": 51, "deletions": 43}, "files": [{"sha": "7cefafef9d97857b672b22d0f2cd8077679bc25c", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "patch": "@@ -237,27 +237,32 @@ fn doc_comment_from_desc(list: &Punctuated<Expr, token::Comma>) -> Result<Attrib\n }\n \n /// Add the impl of QueryDescription for the query to `impls` if one is requested\n-fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStream) {\n-    let name = &query.name;\n-    let key = &query.key;\n-    let modifiers = &query.modifiers;\n+fn add_query_desc_cached_impl(\n+    query: &Query,\n+    descs: &mut proc_macro2::TokenStream,\n+    cached: &mut proc_macro2::TokenStream,\n+) {\n+    let Query { name, key, modifiers, .. } = &query;\n \n     // Find out if we should cache the query on disk\n     let cache = if let Some((args, expr)) = modifiers.cache.as_ref() {\n         let tcx = args.as_ref().map(|t| quote! { #t }).unwrap_or_else(|| quote! { _ });\n         // expr is a `Block`, meaning that `{ #expr }` gets expanded\n         // to `{ { stmts... } }`, which triggers the `unused_braces` lint.\n+        // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n         quote! {\n-            #[allow(unused_variables, unused_braces)]\n+            #[allow(unused_variables, unused_braces, rustc::pass_by_value)]\n             #[inline]\n-            fn cache_on_disk(#tcx: TyCtxt<'tcx>, #key: &Self::Key) -> bool {\n+            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n                 #expr\n             }\n         }\n     } else {\n         quote! {\n+            // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n+            #[allow(rustc::pass_by_value)]\n             #[inline]\n-            fn cache_on_disk(_: TyCtxt<'tcx>, _: &Self::Key) -> bool {\n+            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n                 false\n             }\n         }\n@@ -268,19 +273,20 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        fn describe(tcx: QueryCtxt<'tcx>, key: Self::Key) -> String {\n-            let (#tcx, #key) = (*tcx, key);\n+        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::ty::query::query_keys::#name<'tcx>) -> String {\n+            let (#tcx, #key) = (tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths!(\n                 format!(#desc)\n             )\n         }\n     };\n \n-    impls.extend(quote! {\n-        (#name) => {\n-            #desc\n-            #cache\n-        };\n+    descs.extend(quote! {\n+        #desc\n+    });\n+\n+    cached.extend(quote! {\n+        #cache\n     });\n }\n \n@@ -289,7 +295,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n     let mut query_stream = quote! {};\n     let mut query_description_stream = quote! {};\n-    let mut cached_queries = quote! {};\n+    let mut query_cached_stream = quote! {};\n \n     for query in queries.0 {\n         let Query { name, arg, modifiers, .. } = &query;\n@@ -299,12 +305,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             _ => quote! { #result_full },\n         };\n \n-        if modifiers.cache.is_some() {\n-            cached_queries.extend(quote! {\n-                #name,\n-            });\n-        }\n-\n         let mut attributes = Vec::new();\n \n         macro_rules! passthrough {\n@@ -350,7 +350,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             [#attribute_stream] fn #name(#arg) #result,\n         });\n \n-        add_query_description_impl(&query, &mut query_description_stream);\n+        add_query_desc_cached_impl(&query, &mut query_description_stream, &mut query_cached_stream);\n     }\n \n     TokenStream::from(quote! {\n@@ -364,9 +364,13 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             }\n         }\n \n-        #[macro_export]\n-        macro_rules! rustc_query_description {\n+        pub mod descs {\n+            use super::*;\n             #query_description_stream\n         }\n+        pub mod cached {\n+            use super::*;\n+            #query_cached_stream\n+        }\n     })\n }"}, {"sha": "cfdc21ac234302b76a2f5cda0a7b9bc2d272cd3d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "patch": "@@ -4,6 +4,9 @@\n //! [\"Queries: demand-driven compilation\"](https://rustc-dev-guide.rust-lang.org/query.html).\n //! This chapter includes instructions for adding new queries.\n \n+use crate::ty::{self, print::describe_as_module, TyCtxt};\n+use rustc_span::def_id::LOCAL_CRATE;\n+\n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n@@ -1214,7 +1217,7 @@ rustc_queries! {\n         desc { |tcx| \"finding all vtable entries for trait {}\", tcx.def_path_str(key.def_id()) }\n     }\n \n-    query vtable_trait_upcasting_coercion_new_vptr_slot(key: (ty::Ty<'tcx>, ty::Ty<'tcx>)) -> Option<usize> {\n+    query vtable_trait_upcasting_coercion_new_vptr_slot(key: (Ty<'tcx>, Ty<'tcx>)) -> Option<usize> {\n         desc { |tcx| \"finding the slot within vtable for trait object {} vtable ptr during trait upcasting coercion from {} vtable\",\n             key.1, key.0 }\n     }"}, {"sha": "44b9548db89c8b55b91df4a87f89a825a27443c9", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "patch": "@@ -3,7 +3,7 @@ use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n \n // `pretty` is a separate module only for organization.\n@@ -325,3 +325,12 @@ impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for ty::Const<'tcx> {\n         cx.print_const(*self)\n     }\n }\n+\n+// This is only used by query descriptions\n+pub fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n+    if def_id.is_top_level_module() {\n+        \"top-level module\".to_string()\n+    } else {\n+        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n+    }\n+}"}, {"sha": "11d4c97e71ca0c30a59292d4cac4ff8870a78277", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "patch": "@@ -22,8 +22,7 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::{self, DepKindStruct};\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n-use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n #[macro_use]\n@@ -45,14 +44,6 @@ pub use on_disk_cache::OnDiskCache;\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n-fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n-    if def_id.is_top_level_module() {\n-        \"top-level module\".to_string()\n-    } else {\n-        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n-    }\n-}\n-\n rustc_query_append! { define_queries! }\n \n impl<'tcx> Queries<'tcx> {"}, {"sha": "1d17f4221969d52e2df60fac24971303ddcfa697", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "patch": "@@ -298,7 +298,7 @@ pub(crate) fn create_query_frame<\n     K: Copy + Key + for<'a> HashStable<StableHashingContext<'a>>,\n >(\n     tcx: QueryCtxt<'tcx>,\n-    do_describe: fn(QueryCtxt<'tcx>, K) -> String,\n+    do_describe: fn(TyCtxt<'tcx>, K) -> String,\n     key: K,\n     kind: DepKind,\n     name: &'static str,\n@@ -307,7 +307,7 @@ pub(crate) fn create_query_frame<\n     // Showing visible path instead of any path is not that important in production.\n     let description = ty::print::with_no_visible_paths!(\n         // Force filename-line mode to avoid invoking `type_of` query.\n-        ty::print::with_forced_impl_filename_line!(do_describe(tcx, key))\n+        ty::print::with_forced_impl_filename_line!(do_describe(tcx.tcx, key))\n     );\n     let description =\n         if tcx.sess.verbose() { format!(\"{} [{}]\", description, name) } else { description };\n@@ -466,7 +466,10 @@ macro_rules! define_queries {\n         }\n \n         impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n-            rustc_query_description! { $name }\n+            #[inline]\n+            fn cache_on_disk(tcx: TyCtxt<'tcx>, key: &Self::Key) -> bool {\n+                ::rustc_middle::query::cached::$name(tcx, key)\n+            }\n \n             type Cache = query_storage::$name<'tcx>;\n \n@@ -576,7 +579,7 @@ macro_rules! define_queries {\n             use rustc_middle::ty::TyCtxt;\n             use $crate::plumbing::{QueryStruct, QueryCtxt};\n             use $crate::profiling_support::QueryKeyStringCache;\n-            use rustc_query_system::query::{QueryDescription, QueryMap};\n+            use rustc_query_system::query::QueryMap;\n \n             pub(super) const fn dummy_query_struct<'tcx>() -> QueryStruct<'tcx> {\n                 fn noop_try_collect_active_jobs(_: QueryCtxt<'_>, _: &mut QueryMap) -> Option<()> {\n@@ -603,7 +606,7 @@ macro_rules! define_queries {\n                     let make_query = |tcx, key| {\n                         let kind = rustc_middle::dep_graph::DepKind::$name;\n                         let name = stringify!($name);\n-                        $crate::plumbing::create_query_frame(tcx, super::queries::$name::describe, key, kind, name)\n+                        $crate::plumbing::create_query_frame(tcx, rustc_middle::query::descs::$name, key, kind, name)\n                     };\n                     tcx.queries.$name.try_collect_active_jobs(\n                         tcx,"}, {"sha": "0a1cffa3b3331ecaabcecbaaca3562ba5a416c66", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "patch": "@@ -49,8 +49,6 @@ impl<CTX: QueryContext, K, V> QueryVTable<CTX, K, V> {\n pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n     type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n \n-    fn describe(tcx: CTX, key: Self::Key) -> String;\n-\n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_state<'a>(tcx: CTX) -> &'a QueryState<Self::Key>\n     where"}]}