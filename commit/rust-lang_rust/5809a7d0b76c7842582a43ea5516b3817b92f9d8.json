{"sha": "5809a7d0b76c7842582a43ea5516b3817b92f9d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDlhN2QwYjc2Yzc4NDI1ODJhNDNlYTU1MTZiMzgxN2I5MmY5ZDg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-27T21:52:46Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:31:56Z"}, "message": "Move targets, hosts, and build triple into Build.", "tree": {"sha": "e907f452ba61958b3cdcdb53ad6595fce8f7c4a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e907f452ba61958b3cdcdb53ad6595fce8f7c4a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5809a7d0b76c7842582a43ea5516b3817b92f9d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5809a7d0b76c7842582a43ea5516b3817b92f9d8", "html_url": "https://github.com/rust-lang/rust/commit/5809a7d0b76c7842582a43ea5516b3817b92f9d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5809a7d0b76c7842582a43ea5516b3817b92f9d8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39cf1da81c73e9bcd7b60dad927cbe1f360bc1f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/39cf1da81c73e9bcd7b60dad927cbe1f360bc1f3", "html_url": "https://github.com/rust-lang/rust/commit/39cf1da81c73e9bcd7b60dad927cbe1f360bc1f3"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "92a57630ca5b7a649208766d761a666a45d77920", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5809a7d0b76c7842582a43ea5516b3817b92f9d8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5809a7d0b76c7842582a43ea5516b3817b92f9d8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=5809a7d0b76c7842582a43ea5516b3817b92f9d8", "patch": "@@ -170,6 +170,11 @@ pub struct Build {\n     fail_fast: bool,\n     verbosity: usize,\n \n+    // Targets for which to build.\n+    build: String,\n+    hosts: Vec<String>,\n+    targets: Vec<String>,\n+\n     // Stage 0 (downloaded) compiler and cargo or their local rust equivalents.\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n@@ -243,13 +248,38 @@ impl Build {\n         let cargo_info = channel::GitInfo::new(&src.join(\"src/tools/cargo\"));\n         let rls_info = channel::GitInfo::new(&src.join(\"src/tools/rls\"));\n \n+        let hosts = if !flags.host.is_empty() {\n+            for host in flags.host.iter() {\n+                if !config.host.contains(host) {\n+                    panic!(\"specified host `{}` is not in configuration\", host);\n+                }\n+            }\n+            flags.host.clone()\n+        } else {\n+            config.host.clone()\n+        };\n+        let targets = if !flags.target.is_empty() {\n+            for target in flags.target.iter() {\n+                if !config.target.contains(target) {\n+                    panic!(\"specified target `{}` is not in configuration\", target);\n+                }\n+            }\n+            flags.target.clone()\n+        } else {\n+            config.target.clone()\n+        };\n+\n         Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n             local_rebuild: config.local_rebuild,\n             fail_fast: flags.cmd.fail_fast(),\n             verbosity: cmp::max(flags.verbose, config.verbose),\n \n+            build: config.host[0].clone(),\n+            hosts: hosts,\n+            targets: targets,\n+\n             flags: flags,\n             config: config,\n             src: src,\n@@ -269,6 +299,12 @@ impl Build {\n         }\n     }\n \n+    fn build_slice(&self) -> &[String] {\n+        unsafe {\n+            std::slice::from_raw_parts(&self.build, 1)\n+        }\n+    }\n+\n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n@@ -798,7 +834,7 @@ impl Build {\n     /// Returns the number of parallel jobs that have been configured for this\n     /// build.\n     fn jobs(&self) -> u32 {\n-        self.flags.jobs.unwrap_or(num_cpus::get() as u32)\n+        self.flags.jobs.unwrap_or_else(|| num_cpus::get() as u32)\n     }\n \n     /// Returns the path to the C compiler for the target specified."}, {"sha": "e2c955c4f4f3a9f449dbcff61fe9bf945f61227a", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5809a7d0b76c7842582a43ea5516b3817b92f9d8/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5809a7d0b76c7842582a43ea5516b3817b92f9d8/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=5809a7d0b76c7842582a43ea5516b3817b92f9d8", "patch": "@@ -194,17 +194,6 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n         }\n     }\n \n-    for host in build.flags.host.iter() {\n-        if !build.config.host.contains(host) {\n-            panic!(\"specified host `{}` is not in configuration\", host);\n-        }\n-    }\n-    for target in build.flags.target.iter() {\n-        if !build.config.target.contains(target) {\n-            panic!(\"specified target `{}` is not in configuration\", target);\n-        }\n-    }\n-\n     let run = |cmd: &mut Command| {\n         cmd.output().map(|output| {\n             String::from_utf8_lossy(&output.stdout)"}, {"sha": "bcfa004ac3cdde711d89308c794064aa2a26fddb", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5809a7d0b76c7842582a43ea5516b3817b92f9d8/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5809a7d0b76c7842582a43ea5516b3817b92f9d8/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=5809a7d0b76c7842582a43ea5516b3817b92f9d8", "patch": "@@ -1218,16 +1218,9 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n \n         rules.into_iter().flat_map(|(rule, _)| {\n             let hosts = if rule.only_host_build || rule.only_build {\n-                &self.build.config.host[..1]\n-            } else if self.build.flags.host.len() > 0 {\n-                &self.build.flags.host\n+                self.build.build_slice()\n             } else {\n-                &self.build.config.host\n-            };\n-            let targets = if self.build.flags.target.len() > 0 {\n-                &self.build.flags.target\n-            } else {\n-                &self.build.config.target\n+                &self.build.hosts\n             };\n             // Determine the actual targets participating in this rule.\n             // NOTE: We should keep the full projection from build triple to\n@@ -1236,19 +1229,18 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             // the original non-shadowed hosts array is used below.\n             let arr = if rule.host {\n                 // If --target was specified but --host wasn't specified,\n-                // don't run any host-only tests. Also, respect any `--host`\n-                // overrides as done for `hosts`.\n+                // don't run any host-only tests.\n                 if self.build.flags.host.len() > 0 {\n-                    &self.build.flags.host[..]\n+                    &self.build.hosts\n                 } else if self.build.flags.target.len() > 0 {\n                     &[]\n                 } else if rule.only_build {\n-                    &self.build.config.host[..1]\n+                    self.build.build_slice()\n                 } else {\n-                    &self.build.config.host[..]\n+                    &self.build.hosts\n                 }\n             } else {\n-                targets\n+                &self.build.targets\n             };\n \n             hosts.iter().flat_map(move |host| {"}]}