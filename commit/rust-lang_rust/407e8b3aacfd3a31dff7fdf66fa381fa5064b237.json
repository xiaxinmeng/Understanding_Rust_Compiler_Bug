{"sha": "407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwN2U4YjNhYWNmZDNhMzFkZmY3ZmRmNjZmYTM4MWZhNTA2NGIyMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-01T01:05:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-01T01:05:58Z"}, "message": "Auto merge of #30126 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30108, #30114, #30115, #30119, #30120, #30122\n- Failed merges:", "tree": {"sha": "f8aced36312b75fe07caf4bfd4b26f1314ab5091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8aced36312b75fe07caf4bfd4b26f1314ab5091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "html_url": "https://github.com/rust-lang/rust/commit/407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2866e387eab59528466a040e815568e57b20850", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2866e387eab59528466a040e815568e57b20850", "html_url": "https://github.com/rust-lang/rust/commit/a2866e387eab59528466a040e815568e57b20850"}, {"sha": "06df5d8042edbb9e9e330b7bb327e3680668139e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06df5d8042edbb9e9e330b7bb327e3680668139e", "html_url": "https://github.com/rust-lang/rust/commit/06df5d8042edbb9e9e330b7bb327e3680668139e"}], "stats": {"total": 67, "additions": 54, "deletions": 13}, "files": [{"sha": "b5972f7ddb9ee7a4ea23974017b67375f5da9418", "filename": "src/doc/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Fdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Fdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2FREADME.md?ref=407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "patch": "@@ -29,4 +29,4 @@ rustdoc reference.md\n An overview of how to use the `rustdoc` command is available [in the docs][1].\n Further details are available from the command line by with `rustdoc --help`.\n \n-[1]: https://github.com/rust-lang/rust/blob/master/src/doc/trpl/documentation.md\n+[1]: https://github.com/rust-lang/rust/blob/master/src/doc/book/documentation.md"}, {"sha": "7108d957eddccccd6fe573fd34b8a73551c184d5", "filename": "src/doc/book/casting-between-types.md", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcasting-between-types.md?ref=407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "patch": "@@ -14,18 +14,24 @@ Coercion occurs in `let`, `const`, and `static` statements; in\n function call arguments; in field values in struct initialization; and in a\n function result.\n \n-The main cases of coercion are:\n+The most common case of coercion is removing mutability from a reference:\n \n  * `&mut T` to `&T`\n+ \n+An analogous conversion is to remove mutability from a\n+[raw pointer](raw-pointers.md):\n \n  * `*mut T` to `*const T`\n+ \n+References can also be coerced to raw pointers:\n \n  * `&T` to `*const T`\n \n  * `&mut T` to `*mut T`\n- \n- * A custom coercion using [`Deref`](deref-coercions.md)\n- \n+\n+Custom coercions may be defined using [`Deref`](deref-coercions.md).\n+\n+Coercion is transitive.\n  \n # `as`\n \n@@ -64,6 +70,7 @@ For example\n ```rust\n let one = true as u8;\n let at_sign = 64 as char;\n+let two_hundred = -56i8 as u8;\n ```\n \n The semantics of numeric casts are:\n@@ -94,9 +101,14 @@ The semantics of numeric casts are:\n  \n ## Pointer casts\n  \n-Perhaps surprisingly, it is safe to cast pointers to and from integers, and\n-to cast between pointers to different types subject to some constraints. It\n-is only unsafe to dereference the pointer.\n+Perhaps surprisingly, it is safe to cast [raw pointers](raw-pointers.md) to and\n+from integers, and to cast between pointers to different types subject to\n+some constraints. It is only unsafe to dereference the pointer:\n+\n+```rust\n+let a = 300 as *const char; // a pointer to location 300\n+let b = a as u32;\n+```\n \n `e as U` is a valid pointer cast in any of the following cases:\n "}, {"sha": "9cc3e12aa04ac729255851e692752e9bf205c3b7", "filename": "src/doc/book/the-stack-and-the-heap.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md?ref=407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "patch": "@@ -109,7 +109,7 @@ stack frame. It grows upward, the more functions we call.\n \n There are some important things we have to take note of here. The numbers 0, 1,\n and 2 are all solely for illustrative purposes, and bear no relationship to the\n-actual numbers the computer will actually use. In particular, the series of\n+address values the computer will use in reality. In particular, the series of\n addresses are in reality going to be separated by some number of bytes that\n separate each address, and that separation may even exceed the size of the\n value being stored.\n@@ -464,7 +464,7 @@ At the end of `bar()`, it calls `baz()`:\n | (2<sup>30</sup>) - 2 |      | 5                      |\n | ...                  | ...  | ...                    |\n | 12                   | g    | 100                    |\n-| 11                   | f    | \u2192 9                    |\n+| 11                   | f    | \u2192 (2<sup>30</sup>) - 2 |\n | 10                   | e    | \u2192 9                    |\n | 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n | 8                    | c    | 5                      |"}, {"sha": "ac24ab422917a6be10576a2a68ca8f45aafad228", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407e8b3aacfd3a31dff7fdf66fa381fa5064b237/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=407e8b3aacfd3a31dff7fdf66fa381fa5064b237", "patch": "@@ -1141,7 +1141,18 @@ impl ops::DerefMut for String {\n     }\n }\n \n-/// Error returned from `String::from`\n+/// An error when parsing a `String`.\n+///\n+/// This `enum` is slightly awkward: it will never actually exist. This error is\n+/// part of the type signature of the implementation of [`FromStr`] on\n+/// [`String`]. The return type of [`from_str()`], requires that an error be\n+/// defined, but, given that a [`String`] can always be made into a new\n+/// [`String`] without error, this type will never actually be returned. As\n+/// such, it is only here to satisfy said signature, and is useless otherwise.\n+///\n+/// [`FromStr`]: ../str/trait.FromStr.html\n+/// [`String`]: struct.String.html\n+/// [`from_str()`]: ../str/trait.FromStr.html#tymethod.from_str\n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n #[derive(Copy)]\n pub enum ParseError {}\n@@ -1179,10 +1190,28 @@ impl PartialEq for ParseError {\n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n impl Eq for ParseError {}\n \n-/// A generic trait for converting a value to a string\n+/// A trait for converting a value to a `String`.\n+///\n+/// This trait is automatically implemented for any type which implements the\n+/// [`Display`] trait. As such, `ToString` shouldn't be implemented directly:\n+/// [`Display`] should be implemented instead, and you get the `ToString`\n+/// implementation for free.\n+///\n+/// [`Display`]: ../fmt/trait.Display.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToString {\n-    /// Converts the value of `self` to an owned string\n+    /// Converts the given value to a `String`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let i = 5;\n+    /// let five = String::from(\"5\");\n+    ///\n+    /// assert_eq!(five, i.to_string());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_string(&self) -> String;\n }"}]}