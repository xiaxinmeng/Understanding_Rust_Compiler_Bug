{"sha": "4bed895cab365a9a020fcc033b83603e7d23e4e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZWQ4OTVjYWIzNjVhOWEwMjBmY2MwMzNiODM2MDNlN2QyM2U0ZTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T23:40:22Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:32Z"}, "message": "Pull common parameters into GenericParamDef\n\nThis leads to a lot of simplifications, as most code doesn't actually need to know about the specific lifetime/type data; rather, it's concerned with properties like name, index and def_id.", "tree": {"sha": "cd23e54543650e47e4574ae26aede79edbdb5796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd23e54543650e47e4574ae26aede79edbdb5796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bed895cab365a9a020fcc033b83603e7d23e4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bed895cab365a9a020fcc033b83603e7d23e4e4", "html_url": "https://github.com/rust-lang/rust/commit/4bed895cab365a9a020fcc033b83603e7d23e4e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bed895cab365a9a020fcc033b83603e7d23e4e4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e89312a22993c946f462aff0d0fa0447210762d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e89312a22993c946f462aff0d0fa0447210762d", "html_url": "https://github.com/rust-lang/rust/commit/5e89312a22993c946f462aff0d0fa0447210762d"}], "stats": {"total": 529, "additions": 263, "deletions": 266}, "files": [{"sha": "eddb73e72399cef55954a6032ebe4e53b59297db", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -753,34 +753,23 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n     }\n }\n \n-impl_stable_hash_for!(enum ty::GenericParamDef {\n+impl_stable_hash_for!(enum ty::GenericParamDefKind {\n     Lifetime(lt),\n     Type(ty)\n });\n \n-impl<'a> HashStable<StableHashingContext<'a>>\n-for ty::RegionParamDef {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let ty::RegionParamDef {\n-            name,\n-            def_id,\n-            index,\n-            pure_wrt_drop\n-        } = *self;\n-\n-        name.hash_stable(hcx, hasher);\n-        def_id.hash_stable(hcx, hasher);\n-        index.hash_stable(hcx, hasher);\n-        pure_wrt_drop.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl_stable_hash_for!(struct ty::TypeParamDef {\n+impl_stable_hash_for!(struct ty::GenericParamDef {\n     name,\n     def_id,\n     index,\n+    kind\n+});\n+\n+impl_stable_hash_for!(struct ty::RegionParamDef {\n+    pure_wrt_drop\n+});\n+\n+impl_stable_hash_for!(struct ty::TypeParamDef {\n     has_default,\n     object_lifetime_default,\n     pure_wrt_drop,"}, {"sha": "0af95a74686bffa9710d5a72a13254cfaaa63106", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -14,7 +14,7 @@ use infer::outlives::free_region_map::FreeRegionRelations;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n use traits::{self, PredicateObligation};\n-use ty::{self, Ty, TyCtxt, GenericParamDef};\n+use ty::{self, Ty, TyCtxt, GenericParamDefKind};\n use ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n use ty::outlives::Component;\n use ty::subst::{Kind, Substs, UnpackedKind};\n@@ -313,16 +313,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // `['a]` for the first impl trait and `'b` for the\n         // second.\n         let mut least_region = None;\n-        for region_def in abstract_type_generics.params.iter().filter_map(|param| {\n-            if let GenericParamDef::Lifetime(lt) = param {\n-                Some(lt)\n+        for index in abstract_type_generics.params.iter().filter_map(|param| {\n+            if let GenericParamDefKind::Lifetime(_) = param.kind {\n+                // Find the index of this region in the list of substitutions.\n+                Some(param.index as usize)\n             } else {\n                 None\n             }\n         }) {\n-            // Find the index of this region in the list of substitutions.\n-            let index = region_def.index as usize;\n-\n             // Get the value supplied for this region from the substs.\n             let subst_arg = anon_defn.substs.region_at(index);\n "}, {"sha": "8dd661d04032aac029672dbb983773721a88c72f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -909,7 +909,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// region parameter definition.\n     pub fn region_var_for_def(&self,\n                               span: Span,\n-                              def: &ty::RegionParamDef)\n+                              def: &ty::GenericParamDef)\n                               -> ty::Region<'tcx> {\n         self.next_region_var(EarlyBoundRegion(span, def.name))\n     }\n@@ -924,7 +924,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// as the substitutions for the default, `(T, U)`.\n     pub fn type_var_for_def(&self,\n                             span: Span,\n-                            def: &ty::TypeParamDef)\n+                            def: &ty::GenericParamDef)\n                             -> Ty<'tcx> {\n         let ty_var_id = self.type_variables\n                             .borrow_mut()"}, {"sha": "bed5ee91800a694a846f95c8df67e9c3c914da54", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -20,7 +20,7 @@ use hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use hir::map::Map;\n use hir::ItemLocalId;\n use hir::LifetimeName;\n-use ty::{self, TyCtxt, GenericParamDef};\n+use ty::{self, TyCtxt, GenericParamDefKind};\n \n use errors::DiagnosticBuilder;\n use rustc::lint;\n@@ -1662,9 +1662,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             .params\n                             .iter()\n                             .filter_map(|param| {\n-                                match *param {\n-                                    GenericParamDef::Type(ty) => Some(ty.object_lifetime_default),\n-                                    GenericParamDef::Lifetime(_) => None,\n+                                match param.kind {\n+                                    GenericParamDefKind::Type(ty) => {\n+                                        Some(ty.object_lifetime_default)\n+                                    }\n+                                    GenericParamDefKind::Lifetime(_) => None,\n                                 }\n                             })\n                             .collect()"}, {"sha": "2f0691d241e329890a4076423d9821c7adc3a096", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -35,7 +35,8 @@ use infer::type_variable::TypeVariableOrigin;\n use std::fmt;\n use syntax::ast;\n use session::DiagnosticMessageId;\n-use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable, GenericParamDef};\n+use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n+use ty::GenericParamDefKind;\n use ty::error::ExpectedFound;\n use ty::fast_reject;\n use ty::fold::TypeFolder;\n@@ -378,10 +379,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"_Self\".to_string(), Some(self.tcx.type_of(def.did).to_string())));\n         }\n \n-        for param in generics.params.iter().filter_map(|param| {\n-            match *param {\n-                GenericParamDef::Type(ty) => Some(ty),\n-                GenericParamDef::Lifetime(_) => None,\n+        for param in generics.params.iter().filter(|param| {\n+            match param.kind {\n+                GenericParamDefKind::Type(_) => true,\n+                GenericParamDefKind::Lifetime(_) => false,\n             }\n         }) {\n             let name = param.name.to_string();"}, {"sha": "e15542cb2c09dab3eec715bf454a2d755e1f959d", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -11,7 +11,7 @@\n use fmt_macros::{Parser, Piece, Position};\n \n use hir::def_id::DefId;\n-use ty::{self, TyCtxt, GenericParamDef};\n+use ty::{self, TyCtxt, GenericParamDefKind};\n use util::common::ErrorReported;\n use util::nodemap::FxHashMap;\n \n@@ -254,9 +254,9 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == name => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n-                        match *param {\n-                            GenericParamDef::Type(ty) => ty.name == s,\n-                            GenericParamDef::Lifetime(_) => false,\n+                        match param.kind {\n+                            GenericParamDefKind::Type(_) => param.name == s,\n+                            GenericParamDefKind::Lifetime(_) => false,\n                         }\n                     }) {\n                         Some(_) => (),\n@@ -291,11 +291,12 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let trait_str = tcx.item_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.params.iter().filter_map(|param| {\n-            match *param {\n-                GenericParamDef::Type(ty) => {\n-                    Some((ty.name.to_string(), trait_ref.substs.type_for_def(&ty).to_string()))\n+            match param.kind {\n+                GenericParamDefKind::Type(_) => {\n+                    Some((param.name.to_string(),\n+                         trait_ref.substs.type_for_def(&param).to_string()))\n                 },\n-                GenericParamDef::Lifetime(_) => None\n+                GenericParamDefKind::Lifetime(_) => None\n             }\n         }).collect::<FxHashMap<String, String>>();\n "}, {"sha": "f5a9d2a7f00145f5d510f358a8a1d7ceda1de3eb", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -213,7 +213,7 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                            },\n \n                            Component::Param(p) => {\n-                               let ty = tcx.mk_param(p.idx, p.name);\n+                               let ty = tcx.mk_ty_param(p.idx, p.name);\n                                Some(ty::Predicate::TypeOutlives(\n                                    ty::Binder::dummy(ty::OutlivesPredicate(ty, r_min))))\n                            },"}, {"sha": "6eb85cfb307fa2e6540df6fa27d1807a50a17586", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -2457,18 +2457,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TyInfer(it))\n     }\n \n-    pub fn mk_param(self,\n+    pub fn mk_ty_param(self,\n                     index: u32,\n                     name: InternedString) -> Ty<'tcx> {\n         self.mk_ty(TyParam(ParamTy { idx: index, name: name }))\n     }\n \n     pub fn mk_self_type(self) -> Ty<'tcx> {\n-        self.mk_param(0, keywords::SelfType.name().as_interned_str())\n+        self.mk_ty_param(0, keywords::SelfType.name().as_interned_str())\n     }\n \n-    pub fn mk_param_from_def(self, def: &ty::TypeParamDef) -> Ty<'tcx> {\n-        self.mk_param(def.index, def.name)\n+    pub fn mk_ty_param_from_def(self, def: &ty::GenericParamDef) -> Ty<'tcx> {\n+        self.mk_ty_param(def.index, def.name)\n     }\n \n     pub fn mk_anon(self, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {"}, {"sha": "3c4c326578a5d6bb65881a1f7903aaef800dbb0b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 58, "deletions": 46, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -709,11 +709,8 @@ pub enum IntVarValue {\n #[derive(Clone, Copy, PartialEq, Eq)]\n pub struct FloatVarValue(pub ast::FloatTy);\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct TypeParamDef {\n-    pub name: InternedString,\n-    pub def_id: DefId,\n-    pub index: u32,\n     pub has_default: bool,\n     pub object_lifetime_default: ObjectLifetimeDefault,\n \n@@ -725,56 +722,68 @@ pub struct TypeParamDef {\n     pub synthetic: Option<hir::SyntheticTyParamKind>,\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct RegionParamDef {\n-    pub name: InternedString,\n-    pub def_id: DefId,\n-    pub index: u32,\n-\n     /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n     /// on generic parameter `'a`, asserts data of lifetime `'a`\n     /// won't be accessed during the parent type's `Drop` impl.\n     pub pure_wrt_drop: bool,\n }\n \n-impl RegionParamDef {\n-    pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n-        ty::EarlyBoundRegion {\n-            def_id: self.def_id,\n-            index: self.index,\n-            name: self.name,\n-        }\n-    }\n-\n-    pub fn to_bound_region(&self) -> ty::BoundRegion {\n-        self.to_early_bound_region_data().to_bound_region()\n-    }\n-}\n-\n impl ty::EarlyBoundRegion {\n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         ty::BoundRegion::BrNamed(self.def_id, self.name)\n     }\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum GenericParamDef {\n+pub enum GenericParamDefKind {\n     Lifetime(RegionParamDef),\n     Type(TypeParamDef),\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n+pub struct GenericParamDef {\n+    pub name: InternedString,\n+    pub def_id: DefId,\n+    pub index: u32,\n+    pub kind: GenericParamDefKind,\n+}\n+\n impl GenericParamDef {\n-    pub fn index(&self) -> u32 {\n-        match self {\n-            GenericParamDef::Lifetime(lt) => lt.index,\n-            GenericParamDef::Type(ty) => ty.index,\n+    pub fn to_lifetime(&self) -> RegionParamDef {\n+        match self.kind {\n+            GenericParamDefKind::Lifetime(lt) => lt,\n+            _ => bug!(\"cannot convert a non-lifetime to a lifetime\")\n         }\n     }\n \n-    pub fn def_id(&self) -> DefId {\n-        match self {\n-            GenericParamDef::Lifetime(lt) => lt.def_id,\n-            GenericParamDef::Type(ty) => ty.def_id,\n+    pub fn to_type(&self) -> TypeParamDef {\n+        match self.kind {\n+            GenericParamDefKind::Type(ty) => ty,\n+            _ => bug!(\"cannot convert a non-type to a type\")\n+        }\n+    }\n+\n+    pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n+        match self.kind {\n+            GenericParamDefKind::Lifetime(_) => {\n+                ty::EarlyBoundRegion {\n+                    def_id: self.def_id,\n+                    index: self.index,\n+                    name: self.name,\n+                }\n+            }\n+            _ => bug!(\"cannot convert a non-lifetime parameter def to an early bound region\")\n+        }\n+    }\n+\n+    pub fn to_bound_region(&self) -> ty::BoundRegion {\n+        match self.kind {\n+            GenericParamDefKind::Lifetime(_) => {\n+                self.to_early_bound_region_data().to_bound_region()\n+            }\n+            _ => bug!(\"cannot convert a non-lifetime parameter def to an early bound region\")\n         }\n     }\n }\n@@ -817,9 +826,9 @@ impl<'a, 'gcx, 'tcx> Generics {\n         };\n \n         for param in self.params.iter() {\n-            match param {\n-                GenericParamDef::Lifetime(_) => param_counts.lifetimes += 1,\n-                GenericParamDef::Type(_) => param_counts.types += 1,\n+            match param.kind {\n+                GenericParamDefKind::Lifetime(_) => param_counts.lifetimes += 1,\n+                GenericParamDefKind::Type(_) => param_counts.types += 1,\n             };\n         }\n \n@@ -828,9 +837,9 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         if self.params.iter().any(|param| {\n-            match *param {\n-                GenericParamDef::Type(_) => true,\n-                GenericParamDef::Lifetime(_) => false\n+            match param.kind {\n+                GenericParamDefKind::Type(_) => true,\n+                GenericParamDefKind::Lifetime(_) => false\n             }\n         }) {\n             return true;\n@@ -846,11 +855,12 @@ impl<'a, 'gcx, 'tcx> Generics {\n     pub fn region_param(&'tcx self,\n                         param: &EarlyBoundRegion,\n                         tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                        -> &'tcx RegionParamDef\n+                        -> &'tcx GenericParamDef\n     {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n-            match self.params[index as usize] {\n-                ty::GenericParamDef::Lifetime(ref lt) => lt,\n+            let ref param = self.params[index as usize];\n+            match param.kind {\n+                ty::GenericParamDefKind::Lifetime(_) => param,\n                 _ => bug!(\"expected region parameter, but found another generic parameter\")\n             }\n         } else {\n@@ -863,7 +873,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     pub fn type_param(&'tcx self,\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                      -> &TypeParamDef {\n+                      -> &'tcx GenericParamDef {\n         if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n             // non-Self type parameters are always offset by exactly\n             // `self.regions.len()`. In the absence of a Self, this is obvious,\n@@ -899,14 +909,16 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n             if let Some(_) = (index as usize).checked_sub(type_param_offset) {\n                 assert!(!is_separated_self, \"found a Self after type_param_offset\");\n-                match self.params[index as usize] {\n-                    ty::GenericParamDef::Type(ref ty) => ty,\n+                let ref param = self.params[index as usize];\n+                match param.kind {\n+                    ty::GenericParamDefKind::Type(_) => param,\n                     _ => bug!(\"expected type parameter, but found another generic parameter\")\n                 }\n             } else {\n                 assert!(is_separated_self, \"non-Self param before type_param_offset\");\n-                match self.params[type_param_offset] {\n-                    ty::GenericParamDef::Type(ref ty) => ty,\n+                let ref param = self.params[type_param_offset];\n+                match param.kind {\n+                    ty::GenericParamDefKind::Type(_) => param,\n                     _ => bug!(\"expected type parameter, but found another generic parameter\")\n                 }\n             }"}, {"sha": "792a6bfaedfd448ead798595d188e9be9b5cf92d", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -928,12 +928,12 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n         ParamTy::new(0, keywords::SelfType.name().as_interned_str())\n     }\n \n-    pub fn for_def(def: &ty::TypeParamDef) -> ParamTy {\n+    pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {\n         ParamTy::new(def.index, def.name)\n     }\n \n     pub fn to_ty(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n-        tcx.mk_param(self.idx, self.name)\n+        tcx.mk_ty_param(self.idx, self.name)\n     }\n \n     pub fn is_self(&self) -> bool {"}, {"sha": "a14045b43f2eb2c2b482c973bcf502b7852f38c4", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -183,7 +183,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                              -> &'tcx Substs<'tcx> {\n         Substs::for_item(tcx, def_id, |def, _| {\n             tcx.mk_region(ty::ReEarlyBound(def.to_early_bound_region_data()))\n-        }, |def, _| tcx.mk_param_from_def(def))\n+        }, |def, _| tcx.mk_ty_param_from_def(def))\n     }\n \n     /// Creates a Substs for generic parameter definitions,\n@@ -196,8 +196,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                             mut mk_region: FR,\n                             mut mk_type: FT)\n                             -> &'tcx Substs<'tcx>\n-    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n+    where FR: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         let defs = tcx.generics_of(def_id);\n         let mut substs = Vec::with_capacity(defs.count());\n         Substs::fill_item(&mut substs, tcx, defs, &mut mk_region, &mut mk_type);\n@@ -210,8 +210,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                              mut mk_region: FR,\n                              mut mk_type: FT)\n                              -> &'tcx Substs<'tcx>\n-    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx>\n+    where FR: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Ty<'tcx>\n     {\n         let defs = tcx.generics_of(def_id);\n         let mut result = Vec::with_capacity(defs.count());\n@@ -225,8 +225,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                              defs: &ty::Generics,\n                              mk_region: &mut FR,\n                              mk_type: &mut FT)\n-    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n+    where FR: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n \n         if let Some(def_id) = defs.parent {\n             let parent_defs = tcx.generics_of(def_id);\n@@ -239,15 +239,15 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                            defs: &ty::Generics,\n                            mk_region: &mut FR,\n                            mk_type: &mut FT)\n-    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n-        for def in &defs.params {\n-            let param = match def {\n-                ty::GenericParamDef::Lifetime(ref lt) => mk_region(lt, substs).into(),\n-                ty::GenericParamDef::Type(ref ty) => mk_type(ty, substs).into(),\n+    where FR: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n+        for param in &defs.params {\n+            let kind = match param.kind {\n+                ty::GenericParamDefKind::Lifetime(_) => mk_region(param, substs).into(),\n+                ty::GenericParamDefKind::Type(_) => mk_type(param, substs).into(),\n             };\n-            assert_eq!(def.index() as usize, substs.len());\n-            substs.push(param);\n+            assert_eq!(param.index as usize, substs.len());\n+            substs.push(kind);\n         }\n     }\n \n@@ -296,12 +296,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     }\n \n     #[inline]\n-    pub fn type_for_def(&self, ty_param_def: &ty::TypeParamDef) -> Ty<'tcx> {\n+    pub fn type_for_def(&self, ty_param_def: &ty::GenericParamDef) -> Ty<'tcx> {\n         self.type_at(ty_param_def.index as usize)\n     }\n \n     #[inline]\n-    pub fn region_for_def(&self, def: &ty::RegionParamDef) -> ty::Region<'tcx> {\n+    pub fn region_for_def(&self, def: &ty::GenericParamDef) -> ty::Region<'tcx> {\n         self.region_at(def.index as usize)\n     }\n "}, {"sha": "db11f4659723beda89fd78c6b57616ef4bdc5db0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -505,12 +505,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             .filter(|&(_, &k)| {\n                 match k.unpack() {\n                     UnpackedKind::Lifetime(&ty::RegionKind::ReEarlyBound(ref ebr)) => {\n-                        !impl_generics.region_param(ebr, self).pure_wrt_drop\n+                        !impl_generics.region_param(ebr, self).to_lifetime().pure_wrt_drop\n                     }\n                     UnpackedKind::Type(&ty::TyS {\n                         sty: ty::TypeVariants::TyParam(ref pt), ..\n                     }) => {\n-                        !impl_generics.type_param(pt, self).pure_wrt_drop\n+                        !impl_generics.type_param(pt, self).to_type().pure_wrt_drop\n                     }\n                     UnpackedKind::Lifetime(_) | UnpackedKind::Type(_) => {\n                         // not a type or region param - this should be reported"}, {"sha": "47315c7243f02053ae5e191156e63e8055cbfe2f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -19,7 +19,7 @@ use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::{TyClosure, TyGenerator, TyGeneratorWitness, TyForeign, TyProjection, TyAnon};\n use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDef};\n+use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n@@ -338,20 +338,21 @@ impl PrintContext {\n             if !verbose {\n                 let mut type_params =\n                     generics.params.iter().rev().filter_map(|param| {\n-                        match *param {\n-                            GenericParamDef::Type(ty) => Some(ty),\n-                            GenericParamDef::Lifetime(_) => None,\n+                        match param.kind {\n+                            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.has_default)),\n+                            GenericParamDefKind::Lifetime(_) => None,\n                         }\n                     });\n                 if let Some(last_ty) = type_params.next() {\n-                    if last_ty.has_default {\n+                    let (_, has_default) = last_ty;\n+                    if has_default {\n                         if let Some(substs) = tcx.lift(&substs) {\n-                            let mut tps = substs.types().rev().skip(child_types);\n-                            let zipped = iter::once((last_ty, tps.next().unwrap()))\n-                                              .chain(type_params.zip(tps));\n-                            for (ty, actual) in zipped {\n-                                if !ty.has_default ||\n-                                        tcx.type_of(ty.def_id).subst(tcx, substs) != actual {\n+                            let mut types = substs.types().rev().skip(child_types);\n+                            let zipped = iter::once((last_ty, types.next().unwrap()))\n+                                              .chain(type_params.zip(types));\n+                            for ((def_id, has_default), actual) in zipped {\n+                                if !has_default ||\n+                                        tcx.type_of(def_id).subst(tcx, substs) != actual {\n                                     break;\n                                 }\n                                 num_supplied_defaults += 1;\n@@ -600,18 +601,14 @@ define_print! {\n     }\n }\n \n-impl fmt::Debug for ty::TypeParamDef {\n+impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"TypeParamDef({}, {:?}, {})\",\n-               self.name,\n-               self.def_id,\n-               self.index)\n-    }\n-}\n-\n-impl fmt::Debug for ty::RegionParamDef {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"RegionParamDef({}, {:?}, {})\",\n+        let type_name = match self.kind {\n+            ty::GenericParamDefKind::Lifetime(_) => \"Region\",\n+            ty::GenericParamDefKind::Type(_) => \"Type\",\n+        };\n+        write!(f, \"{}({}, {:?}, {})\",\n+               type_name,\n                self.name,\n                self.def_id,\n                self.index)"}, {"sha": "78c95a5ce0504e1a60a19433bdc4db3395fe9c60", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n         let name = format!(\"T{}\", index);\n-        self.infcx.tcx.mk_param(index, Symbol::intern(&name).as_interned_str())\n+        self.infcx.tcx.mk_ty_param(index, Symbol::intern(&name).as_interned_str())\n     }\n \n     pub fn re_early_bound(&self, index: u32, name: &'static str) -> ty::Region<'tcx> {"}, {"sha": "1b2ec481a1cccff7e55ab16872ccb064c7baa0b6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -27,7 +27,7 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n-use rustc::ty::{self, TyCtxt, Ty, TypeFoldable, GenericParamDef};\n+use rustc::ty::{self, TyCtxt, Ty, TypeFoldable, GenericParamDefKind};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::maps::Providers;\n use rustc::ty::subst::UnpackedKind;\n@@ -399,14 +399,14 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n \n impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for def in self.ev.tcx.generics_of(self.item_def_id).params.iter() {\n-            match def {\n-                GenericParamDef::Type(ty) => {\n+        for param in self.ev.tcx.generics_of(self.item_def_id).params.iter() {\n+            match param.kind {\n+                GenericParamDefKind::Type(ty) => {\n                     if ty.has_default {\n-                        self.ev.tcx.type_of(ty.def_id).visit_with(self);\n+                        self.ev.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }\n-                GenericParamDef::Lifetime(_) => {}\n+                GenericParamDefKind::Lifetime(_) => {}\n             }\n         }\n         self\n@@ -1340,14 +1340,14 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for def in self.tcx.generics_of(self.item_def_id).params.iter() {\n-            match def {\n-                GenericParamDef::Type(ty) => {\n+        for param in self.tcx.generics_of(self.item_def_id).params.iter() {\n+            match param.kind {\n+                GenericParamDefKind::Type(ty) => {\n                     if ty.has_default {\n-                        self.tcx.type_of(ty.def_id).visit_with(self);\n+                        self.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }\n-                GenericParamDef::Lifetime(_) => {}\n+                GenericParamDefKind::Lifetime(_) => {}\n             }\n         }\n         self"}, {"sha": "6c2128de272174a85f73b16658bea4f310a42541", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::def_id::DefId;\n use rustc::traits::{FulfillmentContext, Normalized, ObligationCause};\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n-use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt, GenericParamDef};\n+use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::ty::subst::Subst;\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -278,13 +278,11 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     debug!(\"dtorck_constraint: {:?}\", def);\n \n     if def.is_phantom_data() {\n-        let type_param = match tcx.generics_of(def_id).params[0] {\n-            GenericParamDef::Type(ty) => ty,\n-            GenericParamDef::Lifetime(_) => unreachable!(),\n-        };\n+        // The first generic parameter here is guaranteed to be a type because it's `PhantomData`.\n+        let param = &tcx.generics_of(def_id).params[0];\n         let result = DtorckConstraint {\n             outlives: vec![],\n-            dtorck_types: vec![tcx.mk_param_from_def(&type_param)],\n+            dtorck_types: vec![tcx.mk_ty_param_from_def(param)],\n             overflows: vec![],\n         };\n         debug!(\"dtorck_constraint: {:?} => {:?}\", def, result);"}, {"sha": "2039a90a043bf4c5fd9a5240ddad9505fbe35c65", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -26,7 +26,6 @@ use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArr\n use rustc::hir::TransFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum};\n use rustc::ty::subst::{Substs, UnpackedKind};\n-use rustc::ty::GenericParamDef;\n \n use abi::Abi;\n use common::CodegenCx;\n@@ -425,12 +424,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         let mut names = generics.parent.map_or(vec![], |def_id| {\n             get_parameter_names(cx, cx.tcx.generics_of(def_id))\n         });\n-        names.extend(generics.params.iter().map(|param| {\n-            match param {\n-                GenericParamDef::Lifetime(lt) => lt.name,\n-                GenericParamDef::Type(ty) => ty.name,\n-            }\n-        }));\n+        names.extend(generics.params.iter().map(|param| param.name));\n         names\n     }\n "}, {"sha": "3d77c9d39a5ac10912655dd726639820a79bb4ab", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -43,15 +43,15 @@ pub trait AstConv<'gcx, 'tcx> {\n                                  -> ty::GenericPredicates<'tcx>;\n \n     /// What lifetime should we use when a lifetime is omitted (and not elided)?\n-    fn re_infer(&self, span: Span, _def: Option<&ty::RegionParamDef>)\n+    fn re_infer(&self, span: Span, _def: Option<&ty::GenericParamDef>)\n                 -> Option<ty::Region<'tcx>>;\n \n     /// What type should we use when a type is omitted?\n     fn ty_infer(&self, span: Span) -> Ty<'tcx>;\n \n     /// Same as ty_infer, but with a known type parameter definition.\n     fn ty_infer_for_def(&self,\n-                        _def: &ty::TypeParamDef,\n+                        _def: &ty::GenericParamDef,\n                         span: Span) -> Ty<'tcx> {\n         self.ty_infer(span)\n     }\n@@ -95,7 +95,7 @@ const TRAIT_OBJECT_DUMMY_SELF: ty::TypeVariants<'static> = ty::TyInfer(ty::Fresh\n impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     pub fn ast_region_to_region(&self,\n         lifetime: &hir::Lifetime,\n-        def: Option<&ty::RegionParamDef>)\n+        def: Option<&ty::GenericParamDef>)\n         -> ty::Region<'tcx>\n     {\n         let tcx = self.tcx();\n@@ -228,7 +228,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             let type_params_without_defaults = {\n                 let mut count = 0;\n                 for param in decl_generics.params.iter() {\n-                    if let ty::GenericParamDef::Type(ty) = param {\n+                    if let ty::GenericParamDefKind::Type(ty) = param.kind {\n                         if !ty.has_default {\n                             count += 1\n                         }\n@@ -245,9 +245,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n-        let default_needs_object_self = |p: &ty::TypeParamDef| {\n-            if is_object && p.has_default {\n-                if tcx.at(span).type_of(p.def_id).has_self_ty() {\n+        let default_needs_object_self = |param: &ty::GenericParamDef| {\n+            if is_object && param.to_type().has_default {\n+                if tcx.at(span).type_of(param.def_id).has_self_ty() {\n                     // There is no suitable inference default for a type parameter\n                     // that references self, in an object type.\n                     return true;\n@@ -284,7 +284,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     self.ty_infer(span)\n                 };\n                 ty_var\n-            } else if def.has_default {\n+            } else if def.to_type().has_default {\n                 // No type parameter provided, but a default exists.\n \n                 // If we are converting an object type, then the\n@@ -998,7 +998,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let item_def_id = tcx.hir.local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&tcx.hir.local_def_id(node_id)];\n-                tcx.mk_param(index, tcx.hir.name(node_id).as_interned_str())\n+                tcx.mk_ty_param(index, tcx.hir.name(node_id).as_interned_str())\n             }\n             Def::SelfTy(_, Some(def_id)) => {\n                 // Self in impl (we know the concrete type).\n@@ -1146,7 +1146,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 &mut substs, tcx, parent_generics,\n                 &mut |def, _| tcx.mk_region(\n                     ty::ReEarlyBound(def.to_early_bound_region_data())),\n-                &mut |def, _| tcx.mk_param_from_def(def)\n+                &mut |def, _| tcx.mk_ty_param_from_def(def)\n             );\n \n             // Replace all lifetimes with 'static"}, {"sha": "11f421da71474c060b15e3e3358607f705d4ef2e", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::hir::{self, ImplItemKind, TraitItemKind};\n use rustc::infer::{self, InferOk};\n-use rustc::ty::{self, TyCtxt, GenericParamDef};\n+use rustc::ty::{self, TyCtxt, GenericParamDefKind};\n use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -729,19 +729,19 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| {\n-        match *param {\n-            GenericParamDef::Type(ty) => Some(ty),\n-            GenericParamDef::Lifetime(_) => None,\n+        match param.kind {\n+            GenericParamDefKind::Type(_) => Some(param),\n+            GenericParamDefKind::Lifetime(_) => None,\n         }\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| {\n-        match *param {\n-            GenericParamDef::Type(ty) => Some(ty),\n-            GenericParamDef::Lifetime(_) => None,\n+        match param.kind {\n+            GenericParamDefKind::Type(_) => Some(param),\n+            GenericParamDefKind::Lifetime(_) => None,\n         }\n     });\n     for (impl_ty, trait_ty) in impl_m_type_params.zip(trait_m_type_params) {\n-        if impl_ty.synthetic != trait_ty.synthetic {\n+        if impl_ty.to_type().synthetic != trait_ty.to_type().synthetic {\n             let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();\n             let impl_span = tcx.hir.span(impl_node_id);\n             let trait_span = tcx.def_span(trait_ty.def_id);"}, {"sha": "d852a865174fbc0f62d57ce78dd30af4305c4596", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -76,7 +76,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n-    let param = |n| tcx.mk_param(n, Symbol::intern(&format!(\"P{}\", n)).as_interned_str());\n+    let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)).as_interned_str());\n     let name = it.name.as_str();\n     let (n_tps, inputs, output) = if name.starts_with(\"atomic_\") {\n         let split : Vec<&str> = name.split('_').collect();\n@@ -342,7 +342,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                it: &hir::ForeignItem) {\n     let param = |n| {\n         let name = Symbol::intern(&format!(\"P{}\", n)).as_interned_str();\n-        tcx.mk_param(n, name)\n+        tcx.mk_ty_param(n, name)\n     };\n \n     let def_id = tcx.hir.local_def_id(it.id);"}, {"sha": "e5dffeed56017abf3575f63351f9a66305d1b819", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -1730,7 +1730,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn re_infer(&self, span: Span, def: Option<&ty::RegionParamDef>)\n+    fn re_infer(&self, span: Span, def: Option<&ty::GenericParamDef>)\n                 -> Option<ty::Region<'tcx>> {\n         let v = match def {\n             Some(def) => infer::EarlyBoundRegion(span, def.name),\n@@ -1744,7 +1744,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn ty_infer_for_def(&self,\n-                        ty_param_def: &ty::TypeParamDef,\n+                        ty_param_def: &ty::GenericParamDef,\n                         span: Span) -> Ty<'tcx> {\n         self.type_var_for_def(span, ty_param_def)\n     }\n@@ -4805,7 +4805,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if let Some(ast_ty) = types.get(i) {\n                 // A provided type parameter.\n                 self.to_ty(ast_ty)\n-            } else if !infer_types && def.has_default {\n+            } else if !infer_types && def.to_type().has_default {\n                 // No type parameter provided, but a default exists.\n                 let default = self.tcx.type_of(def.def_id);\n                 self.normalize_ty(\n@@ -4928,7 +4928,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let type_params_without_defaults = {\n                     let mut count = 0;\n                     for param in generics.params.iter() {\n-                        if let ty::GenericParamDef::Type(ty) = param {\n+                        if let ty::GenericParamDefKind::Type(ty) = param.kind {\n                             if !ty.has_default {\n                                 count += 1\n                             }\n@@ -5025,7 +5025,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let segment = segment.map(|(path_segment, generics)| {\n             let explicit = !path_segment.infer_types;\n             let impl_trait = generics.params.iter().any(|param| {\n-                if let ty::GenericParamDef::Type(ty) = param {\n+                if let ty::GenericParamDefKind::Type(ty) = param.kind {\n                     if let Some(hir::SyntheticTyParamKind::ImplTrait) = ty.synthetic {\n                         return true;\n                     }"}, {"sha": "cc20a7c28d3671932859f89223ecfabc2018e3bf", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -11,7 +11,7 @@\n use check::{Inherited, FnCtxt};\n use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n-use ty::GenericParamDef;\n+use ty::GenericParamDefKind;\n \n use hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n@@ -370,18 +370,18 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     let mut substituted_predicates = Vec::new();\n \n     let generics = tcx.generics_of(def_id);\n-    let is_our_default = |def: &ty::TypeParamDef| {\n-        def.has_default && def.index >= generics.parent_count as u32\n+    let is_our_default = |def: &ty::GenericParamDef| {\n+        def.to_type().has_default && def.index >= generics.parent_count as u32\n     };\n \n     // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`.\n     // For example this forbids the declaration:\n     // struct Foo<T = Vec<[u32]>> { .. }\n     // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n     for d in generics.params.iter().filter_map(|param| {\n-        if let GenericParamDef::Type(ty) = *param {\n-            if is_our_default(&ty) {\n-                return Some(ty.def_id);\n+        if let GenericParamDefKind::Type(_) = param.kind {\n+            if is_our_default(&param) {\n+                return Some(param.def_id);\n             }\n         }\n         None\n@@ -654,21 +654,18 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n     let impl_params: FxHashMap<_, _> =\n         parent.params.iter()\n                      .flat_map(|param| {\n-                         match param {\n-                             GenericParamDef::Lifetime(_) => None,\n-                             GenericParamDef::Type(ty) => Some((ty.name, ty.def_id)),\n+                         match param.kind {\n+                             GenericParamDefKind::Lifetime(_) => None,\n+                             GenericParamDefKind::Type(_) => Some((param.name, param.def_id)),\n                          }\n                      })\n                      .collect();\n \n     for method_param in generics.params.iter() {\n-        // Shadowing is checked in resolve_lifetime.\n-        if let GenericParamDef::Lifetime(_) = method_param {\n-            continue;\n-        }\n-        let (name, def_id) = match method_param {\n-            GenericParamDef::Lifetime(_) => continue,\n-            GenericParamDef::Type(ty) => (ty.name, ty.def_id),\n+        let (name, def_id) = match method_param.kind {\n+            // Shadowing is checked in resolve_lifetime.\n+            GenericParamDefKind::Lifetime(_) => continue,\n+            GenericParamDefKind::Type(_) => (method_param.name, method_param.def_id),\n         };\n         if impl_params.contains_key(&name) {\n             // Tighten up the span to focus on only the shadowing type"}, {"sha": "d41f7e607277a1d5feb3f07d10fffaa46aca1ee7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n         self.tcx.at(span).type_param_predicates((self.item_def_id, def_id))\n     }\n \n-    fn re_infer(&self, _span: Span, _def: Option<&ty::RegionParamDef>)\n+    fn re_infer(&self, _span: Span, _def: Option<&ty::GenericParamDef>)\n                 -> Option<ty::Region<'tcx>> {\n         None\n     }\n@@ -244,7 +244,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_owner_def_id = tcx.hir.local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n     let index = generics.param_def_id_to_index[&def_id];\n-    let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id).as_interned_str());\n+    let ty = tcx.mk_ty_param(index, tcx.hir.ty_param_name(param_id).as_interned_str());\n \n     // Don't look for bounds where the type parameter isn't in scope.\n     let parent = if item_def_id == param_owner_def_id {\n@@ -840,14 +840,16 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     // the node id for the Self type parameter.\n                     let param_id = item.id;\n \n-                    opt_self = Some(ty::TypeParamDef {\n+                    opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n                         name: keywords::SelfType.name().as_interned_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n-                        has_default: false,\n-                        object_lifetime_default: rl::Set1::Empty,\n-                        pure_wrt_drop: false,\n-                        synthetic: None,\n+                        kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                            has_default: false,\n+                            object_lifetime_default: rl::Set1::Empty,\n+                            pure_wrt_drop: false,\n+                            synthetic: None,\n+                        }),\n                     });\n \n                     allow_defaults = true;\n@@ -885,20 +887,22 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n \n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n-    let regions = early_lifetimes.enumerate().map(|(i, l)| {\n-        ty::RegionParamDef {\n+    let lifetimes = early_lifetimes.enumerate().map(|(i, l)| {\n+        ty::GenericParamDef {\n             name: l.lifetime.name.name().as_interned_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n-            pure_wrt_drop: l.pure_wrt_drop,\n+            kind: ty::GenericParamDefKind::Lifetime(ty::RegionParamDef {\n+                pure_wrt_drop: l.pure_wrt_drop,\n+            }),\n         }\n     }).collect::<Vec<_>>();\n \n     let hir_id = tcx.hir.node_to_hir_id(node_id);\n     let object_lifetime_defaults = tcx.object_lifetime_defaults(hir_id);\n \n     // Now create the real type parameters.\n-    let type_start = own_start + regions.len() as u32;\n+    let type_start = own_start + lifetimes.len() as u32;\n     let types = ast_generics.ty_params().enumerate().map(|(i, p)| {\n         if p.name == keywords::SelfType.name() {\n             span_bug!(p.span, \"`Self` should not be the name of a regular parameter\");\n@@ -915,15 +919,17 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }\n \n-        ty::TypeParamDef {\n+        ty::GenericParamDef {\n             index: type_start + i as u32,\n             name: p.name.as_interned_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n-            has_default: p.default.is_some(),\n-            object_lifetime_default:\n-                object_lifetime_defaults.as_ref().map_or(rl::Set1::Empty, |o| o[i]),\n-            pure_wrt_drop: p.pure_wrt_drop,\n-            synthetic: p.synthetic,\n+            kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                has_default: p.default.is_some(),\n+                object_lifetime_default:\n+                    object_lifetime_defaults.as_ref().map_or(rl::Set1::Empty, |o| o[i]),\n+                pure_wrt_drop: p.pure_wrt_drop,\n+                synthetic: p.synthetic,\n+            }),\n         }\n     });\n \n@@ -940,41 +946,43 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         for (i, &arg) in dummy_args.iter().enumerate() {\n-            types.push(ty::TypeParamDef {\n+            types.push(ty::GenericParamDef {\n                 index: type_start + i as u32,\n                 name: Symbol::intern(arg).as_interned_str(),\n                 def_id,\n-                has_default: false,\n-                object_lifetime_default: rl::Set1::Empty,\n-                pure_wrt_drop: false,\n-                synthetic: None,\n+                kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                    has_default: false,\n+                    object_lifetime_default: rl::Set1::Empty,\n+                    pure_wrt_drop: false,\n+                    synthetic: None,\n+                }),\n             });\n         }\n \n         tcx.with_freevars(node_id, |fv| {\n             types.extend(fv.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n-                ty::TypeParameterDef {\n+                ty::GenericParamDef {\n                     index: type_start + i,\n                     name: Symbol::intern(\"<upvar>\").as_interned_str(),\n                     def_id,\n-                    has_default: false,\n-                    object_lifetime_default: rl::Set1::Empty,\n-                    pure_wrt_drop: false,\n-                    synthetic: None,\n+                    kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                        has_default: false,\n+                        object_lifetime_default: rl::Set1::Empty,\n+                        pure_wrt_drop: false,\n+                        synthetic: None,\n+                    }),\n                 }\n             }));\n         });\n     }\n \n-    let opt_self = opt_self.into_iter().map(|ty| ty::GenericParamDef::Type(ty));\n-    let lifetimes = regions.into_iter().map(|lt| ty::GenericParamDef::Lifetime(lt));\n-    let types = types.into_iter().map(|ty| ty::GenericParamDef::Type(ty));\n-    let params: Vec<_> = opt_self.chain(lifetimes)\n+    let params: Vec<_> = opt_self.into_iter()\n+                                 .chain(lifetimes)\n                                  .chain(types)\n                                  .collect();\n \n     let param_def_id_to_index = params.iter()\n-                                      .map(|param| (param.def_id(), param.index()))\n+                                      .map(|param| (param.def_id, param.index))\n                                       .collect();\n \n     tcx.alloc_generics(ty::Generics {\n@@ -1101,7 +1109,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         let region = def.to_early_bound_region_data();\n                         tcx.mk_region(ty::ReEarlyBound(region))\n                     },\n-                    |def, _| tcx.mk_param_from_def(def)\n+                    |def, _| tcx.mk_ty_param_from_def(def)\n                 )\n             };\n "}, {"sha": "f3645142e4b61e37b2021591dbcbf45e571e0b6d", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -117,24 +117,24 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     for (ty_param, hir_param) in impl_generics.params.iter()\n                                               .zip(impl_hir_generics.params.iter()) {\n-        match (ty_param, hir_param) {\n+        match (&ty_param.kind, hir_param) {\n             // Disallow ANY unconstrained type parameters.\n-            (ty::GenericParamDef::Type(ty_ty), hir::GenericParam::Type(hir_ty)) => {\n-                let param_ty = ty::ParamTy::for_def(ty_ty);\n+            (&ty::GenericParamDefKind::Type(_), hir::GenericParam::Type(hir_ty)) => {\n+                let param_ty = ty::ParamTy::for_def(ty_param);\n                 if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n                     report_unused_parameter(tcx, hir_ty.span, \"type\", &param_ty.to_string());\n                 }\n             }\n-            (ty::GenericParamDef::Lifetime(ty_lt), hir::GenericParam::Lifetime(hir_lt)) => {\n-                let param = ctp::Parameter::from(ty_lt.to_early_bound_region_data());\n+            (&ty::GenericParamDefKind::Lifetime(_), hir::GenericParam::Lifetime(hir_lt)) => {\n+                let param = ctp::Parameter::from(ty_param.to_early_bound_region_data());\n                 if lifetimes_in_associated_types.contains(&param) && // (*)\n                     !input_parameters.contains(&param) {\n                     report_unused_parameter(tcx, hir_lt.lifetime.span,\n                                             \"lifetime\", &hir_lt.lifetime.name.name().to_string());\n                 }\n             }\n-            (ty::GenericParamDef::Type(_), _) => continue,\n-            (ty::GenericParamDef::Lifetime(_), _) => continue,\n+            (&ty::GenericParamDefKind::Type(_), _) => continue,\n+            (&ty::GenericParamDefKind::Lifetime(_), _) => continue,\n         }\n     }\n "}, {"sha": "e711598c944c12ba0031efe79c08b8e8f656ac47", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -353,7 +353,7 @@ fn insert_outlives_predicate<'tcx>(\n                         // Vec<U>`.  Decomposing `Vec<U>` into\n                         // components would yield `U`, and we add the\n                         // where clause that `U: 'a`.\n-                        let ty: Ty<'tcx> = tcx.mk_param(param_ty.idx, param_ty.name);\n+                        let ty: Ty<'tcx> = tcx.mk_ty_param(param_ty.idx, param_ty.name);\n                         required_predicates\n                             .insert(ty::OutlivesPredicate(ty.into(), outlived_region));\n                     }"}, {"sha": "88784aab90e0e34c482da6147f7f39e025670995", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -228,12 +228,12 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         let mut types = vec![];\n \n         for param in generics.params.iter() {\n-            match param {\n-                ty::GenericParamDef::Lifetime(lt) => {\n-                    let name = if lt.name == \"\" {\n+            match param.kind {\n+                ty::GenericParamDefKind::Lifetime(_) => {\n+                    let name = if param.name == \"\" {\n                         hir::LifetimeName::Static\n                     } else {\n-                        hir::LifetimeName::Name(lt.name.as_symbol())\n+                        hir::LifetimeName::Name(param.name.as_symbol())\n                     };\n \n                     lifetimes.push(hir::Lifetime {\n@@ -242,8 +242,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         name,\n                     });\n                 }\n-                ty::GenericParamDef::Type(ty) => {\n-                    types.push(P(self.ty_param_to_ty(ty.clone())));\n+                ty::GenericParamDefKind::Type(_) => {\n+                    types.push(P(self.ty_param_to_ty(param.clone())));\n                 }\n             }\n         }\n@@ -256,7 +256,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         }\n     }\n \n-    fn ty_param_to_ty(&self, param: ty::TypeParamDef) -> hir::Ty {\n+    fn ty_param_to_ty(&self, param: ty::GenericParamDef) -> hir::Ty {\n         debug!(\"ty_param_to_ty({:?}) {:?}\", param, param.def_id);\n         hir::Ty {\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "35a7b27670ae48b1738c06e5caf69a9017fa915b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed895cab365a9a020fcc033b83603e7d23e4e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4bed895cab365a9a020fcc033b83603e7d23e4e4", "patch": "@@ -1336,14 +1336,14 @@ impl Clean<TyParam> for hir::TyParam {\n     }\n }\n \n-impl<'tcx> Clean<TyParam> for ty::TypeParamDef {\n+impl<'tcx> Clean<TyParam> for ty::GenericParamDef {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.renderinfo.borrow_mut().external_typarams.insert(self.def_id, self.name.clean(cx));\n         TyParam {\n             name: self.name.clean(cx),\n             did: self.def_id,\n             bounds: vec![], // these are filled in from the where-clauses\n-            default: if self.has_default {\n+            default: if self.to_type().has_default {\n                 Some(cx.tcx.type_of(self.def_id).clean(cx))\n             } else {\n                 None\n@@ -1577,8 +1577,8 @@ impl Clean<Lifetime> for hir::LifetimeDef {\n     }\n }\n \n-impl Clean<Lifetime> for ty::RegionParamDef {\n-    fn clean(&self, _: &DocContext) -> Lifetime {\n+impl<'tcx> Clean<Lifetime> for ty::GenericParamDef {\n+    fn clean(&self, _cx: &DocContext) -> Lifetime {\n         Lifetime(self.name.to_string())\n     }\n }\n@@ -1800,17 +1800,17 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n         let stripped_typarams = gens.params.iter().filter_map(|param| {\n-            if let ty::GenericParamDef::Type(ty) = param {\n-                if ty.name == keywords::SelfType.name().as_str() {\n-                    assert_eq!(ty.index, 0);\n+            if let ty::GenericParamDefKind::Type(_) = param.kind {\n+                if param.name == keywords::SelfType.name().as_str() {\n+                    assert_eq!(param.index, 0);\n                     None\n                 } else {\n-                    Some(ty.clean(cx))\n+                    Some(param.clean(cx))\n                 }\n             } else {\n                 None\n             }\n-        }).collect::<Vec<_>>();\n+        }).collect::<Vec<TyParam>>();\n \n         let mut where_predicates = preds.predicates.to_vec().clean(cx);\n \n@@ -1855,8 +1855,8 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             params: gens.params\n                         .iter()\n                         .flat_map(|param| {\n-                            if let ty::GenericParamDef::Lifetime(lt) = param {\n-                                Some(GenericParamDef::Lifetime(lt.clean(cx)))\n+                            if let ty::GenericParamDefKind::Lifetime(_) = param.kind {\n+                                Some(GenericParamDef::Lifetime(param.clean(cx)))\n                             } else {\n                                 None\n                             }"}]}