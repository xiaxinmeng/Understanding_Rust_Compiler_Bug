{"sha": "8a7ae23f75953cfb9ba1e07cc37be8455ac979c3", "node_id": "C_kwDOAAsO6NoAKDhhN2FlMjNmNzU5NTNjZmI5YmExZTA3Y2MzN2JlODQ1NWFjOTc5YzM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-03T19:08:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-03T19:08:00Z"}, "message": "Properly substitute inherent associated types.", "tree": {"sha": "edc0abdb1db47d59ac68ac058581314893c9a303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc0abdb1db47d59ac68ac058581314893c9a303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3", "html_url": "https://github.com/rust-lang/rust/commit/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "html_url": "https://github.com/rust-lang/rust/commit/cab4fd678c5b148a330f2bf255bf28a67dfea0fc"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "f204d59d00556b604e432d02c77d120f5513a60f", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=8a7ae23f75953cfb9ba1e07cc37be8455ac979c3", "patch": "@@ -347,7 +347,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 assert!(self_ty.is_some());\n             }\n         } else {\n-            assert!(self_ty.is_none() && parent_substs.is_empty());\n+            assert!(self_ty.is_none());\n         }\n \n         let arg_count = Self::check_generic_arg_count(\n@@ -1821,7 +1821,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // Check if we have an enum variant.\n         let mut variant_resolution = None;\n-        if let ty::Adt(adt_def, _) = qself_ty.kind() {\n+        if let ty::Adt(adt_def, adt_substs) = qself_ty.kind() {\n             if adt_def.is_enum() {\n                 let variant_def = adt_def\n                     .variants()\n@@ -1923,8 +1923,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let Some(assoc_ty_did) = self.lookup_assoc_ty(assoc_ident, hir_ref_id, span, impl_) else {\n                     continue;\n                 };\n-                // FIXME(inherent_associated_types): This does not substitute parameters.\n-                let ty = tcx.type_of(assoc_ty_did);\n+                let item_substs = self.create_substs_for_associated_item(\n+                    span,\n+                    assoc_ty_did,\n+                    assoc_segment,\n+                    adt_substs,\n+                );\n+                let ty = tcx.bound_type_of(assoc_ty_did).subst(tcx, item_substs);\n                 return Ok((ty, DefKind::AssocTy, assoc_ty_did));\n             }\n         }"}, {"sha": "8952b379173080a0f6a5bb62ae42c8b91cc9a4d7", "filename": "src/test/ui/associated-inherent-types/struct-generics.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstruct-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ae23f75953cfb9ba1e07cc37be8455ac979c3/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstruct-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstruct-generics.rs?ref=8a7ae23f75953cfb9ba1e07cc37be8455ac979c3", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct S<T>(T);\n+\n+impl<T> S<T> {\n+    type P = T;\n+}\n+\n+fn main() {\n+    type A = S<()>::P;\n+    let _: A = ();\n+}"}]}