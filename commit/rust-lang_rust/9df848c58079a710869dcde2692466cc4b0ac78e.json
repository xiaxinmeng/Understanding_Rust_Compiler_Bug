{"sha": "9df848c58079a710869dcde2692466cc4b0ac78e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZjg0OGM1ODA3OWE3MTA4NjlkY2RlMjY5MjQ2NmNjNGIwYWM3OGU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T13:10:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T13:10:25Z"}, "message": "Less filtering in completion tests", "tree": {"sha": "7e2e2318fa0635d619ae310cb78bb220d9aaaad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e2e2318fa0635d619ae310cb78bb220d9aaaad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9df848c58079a710869dcde2692466cc4b0ac78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9df848c58079a710869dcde2692466cc4b0ac78e", "html_url": "https://github.com/rust-lang/rust/commit/9df848c58079a710869dcde2692466cc4b0ac78e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9df848c58079a710869dcde2692466cc4b0ac78e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82a9141abe6b6cbf5b55710dc8a315a3839081b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82a9141abe6b6cbf5b55710dc8a315a3839081b", "html_url": "https://github.com/rust-lang/rust/commit/c82a9141abe6b6cbf5b55710dc8a315a3839081b"}], "stats": {"total": 194, "additions": 96, "deletions": 98}, "files": [{"sha": "f3b11e72dd1bd894accc385858a11c66819ddf95", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=9df848c58079a710869dcde2692466cc4b0ac78e", "patch": "@@ -322,7 +322,7 @@ mod tests {\n \n     use expect_test::{expect, Expect};\n \n-    use crate::{tests::filtered_completion_list, CompletionKind};\n+    use crate::tests::completion_list;\n \n     #[test]\n     fn attributes_are_sorted() {\n@@ -341,7 +341,7 @@ mod tests {\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = filtered_completion_list(ra_fixture, CompletionKind::Attribute);\n+        let actual = completion_list(ra_fixture);\n         expect.assert_eq(&actual);\n     }\n \n@@ -786,6 +786,7 @@ mod tests {\n                 at target_feature = \"\u2026\"\n                 at test\n                 at track_caller\n+                kw return\n             \"#]],\n         );\n     }\n@@ -801,6 +802,7 @@ mod tests {\n                 at deny(\u2026)\n                 at forbid(\u2026)\n                 at warn(\u2026)\n+                kw return\n             \"#]],\n         );\n     }"}, {"sha": "6fe41e0d6d138fd182c518da4d6367eb95cd7ff4", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=9df848c58079a710869dcde2692466cc4b0ac78e", "patch": "@@ -82,7 +82,7 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{tests::filtered_completion_list, CompletionKind};\n+    use crate::tests::completion_list;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let builtin_derives = r#\"\n@@ -106,10 +106,7 @@ pub macro PartialOrd {}\n pub macro Ord {}\n \n \"#;\n-        let actual = filtered_completion_list(\n-            &format!(\"{} {}\", builtin_derives, ra_fixture),\n-            CompletionKind::Attribute,\n-        );\n+        let actual = completion_list(&format!(\"{} {}\", builtin_derives, ra_fixture));\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "1ddc389868b8d1e937c450dc678aa59175190269", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=9df848c58079a710869dcde2692466cc4b0ac78e", "patch": "@@ -33,7 +33,6 @@ pub(super) fn complete_lint(\n \n #[cfg(test)]\n mod tests {\n-\n     use crate::tests::check_edit;\n \n     #[test]"}, {"sha": "af67f93158549030c1df084ec1c2039b4d6d1434", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=9df848c58079a710869dcde2692466cc4b0ac78e", "patch": "@@ -37,17 +37,6 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n             }\n         };\n     }\n-\n-    // Suggest .await syntax for types that implement Future trait\n-    if let Some(receiver) = ctx.dot_receiver() {\n-        if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n-            if ty.impls_future(ctx.db) {\n-                let mut item = kw_completion(\"await\");\n-                item.detail(\"expr.await\");\n-                item.add_to(acc);\n-            }\n-        };\n-    }\n }\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -59,6 +48,19 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         cov_mark::hit!(no_keyword_completion_in_record_lit);\n         return;\n     }\n+\n+    // Suggest .await syntax for types that implement Future trait\n+    if let Some(receiver) = ctx.dot_receiver() {\n+        if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n+            if ty.impls_future(ctx.db) {\n+                let mut item =\n+                    CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\");\n+                item.kind(CompletionItemKind::Keyword).detail(\"expr.await\");\n+                item.add_to(acc);\n+            }\n+        };\n+    }\n+\n     let mut add_keyword = |kw, snippet| add_keyword(ctx, acc, kw, snippet);\n \n     let expects_assoc_item = ctx.expects_assoc_item();"}, {"sha": "abf6935c940eadd259b9dc92f4a7dc81076953ab", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=9df848c58079a710869dcde2692466cc4b0ac78e", "patch": "@@ -49,19 +49,11 @@ pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{\n-        tests::{check_edit, filtered_completion_list_with_config, TEST_CONFIG},\n-        CompletionConfig, CompletionKind,\n-    };\n+    use crate::tests::{check_edit, completion_list};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        check_with_config(TEST_CONFIG, ra_fixture, expect);\n-    }\n-\n-    fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n-        let actual =\n-            filtered_completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n-        expect.assert_eq(&actual)\n+        let actual = completion_list(ra_fixture);\n+        expect.assert_eq(&actual);\n     }\n \n     #[test]"}, {"sha": "dee3ec88db41cd73619f29c4ed4d31bfa389f421", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=9df848c58079a710869dcde2692466cc4b0ac78e", "patch": "@@ -153,17 +153,17 @@ mod tests {\n     fn lib_module_completion() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod $0\n-            //- /foo.rs\n-            fn foo() {}\n-            //- /foo/ignored_foo.rs\n-            fn ignored_foo() {}\n-            //- /bar/mod.rs\n-            fn bar() {}\n-            //- /bar/ignored_bar.rs\n-            fn ignored_bar() {}\n-        \"#,\n+//- /lib.rs\n+mod $0\n+//- /foo.rs\n+fn foo() {}\n+//- /foo/ignored_foo.rs\n+fn ignored_foo() {}\n+//- /bar/mod.rs\n+fn bar() {}\n+//- /bar/ignored_bar.rs\n+fn ignored_bar() {}\n+\"#,\n             expect![[r#\"\n                 md foo;\n                 md bar;\n@@ -175,13 +175,13 @@ mod tests {\n     fn no_module_completion_with_module_body() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod $0 {\n+//- /lib.rs\n+mod $0 {\n \n-            }\n-            //- /foo.rs\n-            fn foo() {}\n-        \"#,\n+}\n+//- /foo.rs\n+fn foo() {}\n+\"#,\n             expect![[r#\"\"#]],\n         );\n     }\n@@ -190,17 +190,17 @@ mod tests {\n     fn main_module_completion() {\n         check(\n             r#\"\n-            //- /main.rs\n-            mod $0\n-            //- /foo.rs\n-            fn foo() {}\n-            //- /foo/ignored_foo.rs\n-            fn ignored_foo() {}\n-            //- /bar/mod.rs\n-            fn bar() {}\n-            //- /bar/ignored_bar.rs\n-            fn ignored_bar() {}\n-        \"#,\n+//- /main.rs\n+mod $0\n+//- /foo.rs\n+fn foo() {}\n+//- /foo/ignored_foo.rs\n+fn ignored_foo() {}\n+//- /bar/mod.rs\n+fn bar() {}\n+//- /bar/ignored_bar.rs\n+fn ignored_bar() {}\n+\"#,\n             expect![[r#\"\n                 md foo;\n                 md bar;\n@@ -212,13 +212,13 @@ mod tests {\n     fn main_test_module_completion() {\n         check(\n             r#\"\n-            //- /main.rs\n-            mod tests {\n-                mod $0;\n-            }\n-            //- /tests/foo.rs\n-            fn foo() {}\n-        \"#,\n+//- /main.rs\n+mod tests {\n+    mod $0;\n+}\n+//- /tests/foo.rs\n+fn foo() {}\n+\"#,\n             expect![[r#\"\n                 md foo\n             \"#]],\n@@ -229,19 +229,19 @@ mod tests {\n     fn directly_nested_module_completion() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod foo;\n-            //- /foo.rs\n-            mod $0;\n-            //- /foo/bar.rs\n-            fn bar() {}\n-            //- /foo/bar/ignored_bar.rs\n-            fn ignored_bar() {}\n-            //- /foo/baz/mod.rs\n-            fn baz() {}\n-            //- /foo/moar/ignored_moar.rs\n-            fn ignored_moar() {}\n-        \"#,\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+mod $0;\n+//- /foo/bar.rs\n+fn bar() {}\n+//- /foo/bar/ignored_bar.rs\n+fn ignored_bar() {}\n+//- /foo/baz/mod.rs\n+fn baz() {}\n+//- /foo/moar/ignored_moar.rs\n+fn ignored_moar() {}\n+\"#,\n             expect![[r#\"\n                 md bar\n                 md baz\n@@ -253,15 +253,15 @@ mod tests {\n     fn nested_in_source_module_completion() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod foo;\n-            //- /foo.rs\n-            mod bar {\n-                mod $0\n-            }\n-            //- /foo/bar/baz.rs\n-            fn baz() {}\n-        \"#,\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+mod bar {\n+    mod $0\n+}\n+//- /foo/bar/baz.rs\n+fn baz() {}\n+\"#,\n             expect![[r#\"\n                 md baz;\n             \"#]],\n@@ -299,16 +299,16 @@ mod tests {\n     fn already_declared_bin_module_completion_omitted() {\n         check(\n             r#\"\n-            //- /src/bin.rs crate:main\n-            fn main() {}\n-            //- /src/bin/foo.rs\n-            mod $0\n-            //- /src/bin/bar.rs\n-            mod foo;\n-            fn bar() {}\n-            //- /src/bin/bar/bar_ignored.rs\n-            fn bar_ignored() {}\n-        \"#,\n+//- /src/bin.rs crate:main\n+fn main() {}\n+//- /src/bin/foo.rs\n+mod $0\n+//- /src/bin/bar.rs\n+mod foo;\n+fn bar() {}\n+//- /src/bin/bar/bar_ignored.rs\n+fn bar_ignored() {}\n+\"#,\n             expect![[r#\"\"#]],\n         );\n     }"}, {"sha": "4b7e19cc0c12cd7a85f3a71fec4256bcb9cd7d2e", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df848c58079a710869dcde2692466cc4b0ac78e/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=9df848c58079a710869dcde2692466cc4b0ac78e", "patch": "@@ -1,3 +1,9 @@\n+//! Tests and test utilities for completions.\n+//!\n+//! Most tests live in this module or its submodules unless for very specific completions like\n+//! `attributes` or `lifetimes` where the completed concept is a distinct thing.\n+//! Notable examples for completions that are being tested in this module's submodule are paths.\n+\n mod item_list;\n mod use_tree;\n \n@@ -32,7 +38,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     },\n };\n \n-fn completion_list(code: &str) -> String {\n+pub(crate) fn completion_list(code: &str) -> String {\n     completion_list_with_config(TEST_CONFIG, code)\n }\n "}]}