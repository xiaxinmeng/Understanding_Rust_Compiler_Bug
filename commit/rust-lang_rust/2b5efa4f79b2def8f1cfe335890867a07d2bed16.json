{"sha": "2b5efa4f79b2def8f1cfe335890867a07d2bed16", "node_id": "C_kwDOAAsO6NoAKDJiNWVmYTRmNzliMmRlZjhmMWNmZTMzNTg5MDg2N2EwN2QyYmVkMTY", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-06-15T14:49:52Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-06-15T14:49:52Z"}, "message": "debuginfo: Fix NatVis for Rc and Arc with unsized pointees.", "tree": {"sha": "32ac34f3deead8b0e71a44ce50416ee976f34c86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ac34f3deead8b0e71a44ce50416ee976f34c86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5efa4f79b2def8f1cfe335890867a07d2bed16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5efa4f79b2def8f1cfe335890867a07d2bed16", "html_url": "https://github.com/rust-lang/rust/commit/2b5efa4f79b2def8f1cfe335890867a07d2bed16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5efa4f79b2def8f1cfe335890867a07d2bed16/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebe184a69316fab85129896e5045502c5db9d6f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe184a69316fab85129896e5045502c5db9d6f4", "html_url": "https://github.com/rust-lang/rust/commit/ebe184a69316fab85129896e5045502c5db9d6f4"}], "stats": {"total": 270, "additions": 214, "deletions": 56}, "files": [{"sha": "912418fa7d1eb0eeecf041d7beb117f15891d13d", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 110, "deletions": 16, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/2b5efa4f79b2def8f1cfe335890867a07d2bed16/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/2b5efa4f79b2def8f1cfe335890867a07d2bed16/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=2b5efa4f79b2def8f1cfe335890867a07d2bed16", "patch": "@@ -59,39 +59,133 @@\n     </Expand>\n   </Type>\n \n+  <!--\n+      The display string for Rc, Arc, etc is optional because the expression cannot be evaluated\n+      if the pointee is unsized (i.e. if `ptr.pointer` is a fat pointer).\n+\n+      There are also two versions for the reference count fields, one for sized and one for\n+      dyn pointees.\n+\n+      Rc<[T]> and Arc<[T]> are handled separately altogether so we can actually show\n+      the slice values.\n+  -->\n+  <!-- alloc::rc::Rc<T> -->\n   <Type Name=\"alloc::rc::Rc&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->value}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->value}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->value</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::rc::Rc<[T]> -->\n+  <Type Name=\"alloc::rc::Rc&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <!-- We add +2 to the data_ptr in order to skip the ref count fields in the RcBox -->\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n+\n+  <!-- alloc::rc::Weak<T> -->\n   <Type Name=\"alloc::rc::Weak&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->value}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->value}</DisplayString>\n+    <Expand>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::rc::Weak<[T]> -->\n+  <Type Name=\"alloc::rc::Weak&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->value</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n \n+  <!-- alloc::sync::Arc<T> -->\n   <Type Name=\"alloc::sync::Arc&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->data}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->data}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->data</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::sync::Arc<[T]> -->\n+  <Type Name=\"alloc::sync::Arc&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n+\n+  <!-- alloc::sync::Weak<T> -->\n   <Type Name=\"alloc::sync::Weak&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->data}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->data}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->data</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::sync::Weak<[T]> -->\n+  <Type Name=\"alloc::sync::Weak&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n+\n   <Type Name=\"alloc::borrow::Cow&lt;*&gt;\">\n     <DisplayString Condition=\"RUST$ENUM$DISR == 0x0\">Borrowed({__0})</DisplayString>\n     <DisplayString Condition=\"RUST$ENUM$DISR == 0x1\">Owned({__0})</DisplayString>"}, {"sha": "37e870d8a8e7207c3a18d5f563332c2054b24180", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 104, "deletions": 40, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/2b5efa4f79b2def8f1cfe335890867a07d2bed16/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5efa4f79b2def8f1cfe335890867a07d2bed16/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=2b5efa4f79b2def8f1cfe335890867a07d2bed16", "patch": "@@ -8,74 +8,138 @@\n \n // gdb-command:run\n \n-// gdb-command:print r\n-// gdb-check:[...]$1 = Rc(strong=2, weak=1) = {value = 42, strong = 2, weak = 1}\n-// gdb-command:print a\n-// gdb-check:[...]$2 = Arc(strong=2, weak=1) = {value = 42, strong = 2, weak = 1}\n-\n+// gdb-command:print rc\n+// gdb-check:[...]$1 = Rc(strong=11, weak=1) = {value = 111, strong = 11, weak = 1}\n+// gdb-command:print arc\n+// gdb-check:[...]$2 = Arc(strong=21, weak=1) = {value = 222, strong = 21, weak = 1}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n \n-// lldb-command:print r\n-// lldb-check:[...]$0 = strong=2, weak=1 { value = 42 }\n-// lldb-command:print a\n-// lldb-check:[...]$1 = strong=2, weak=1 { data = 42 }\n+// lldb-command:print rc\n+// lldb-check:[...]$0 = strong=11, weak=1 { value = 111 }\n+// lldb-command:print arc\n+// lldb-check:[...]$1 = strong=21, weak=1 { data = 222 }\n \n // === CDB TESTS ==================================================================================\n \n // cdb-command:g\n \n-// cdb-command:dx r,d\n-// cdb-check:r,d              : 42 [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-command:dx rc,d\n+// cdb-check:rc,d             : 111 [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [Reference count] : 11 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+\n+// cdb-command:dx weak_rc,d\n+// cdb-check:weak_rc,d        : 111 [Type: alloc::rc::Weak<i32>]\n+// cdb-check:    [Reference count] : 11 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+\n+// cdb-command:dx arc,d\n+// cdb-check:arc,d            : 222 [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [Reference count] : 21 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+\n+// cdb-command:dx weak_arc,d\n+// cdb-check:weak_arc,d       : 222 [Type: alloc::sync::Weak<i32>]\n+// cdb-check:    [Reference count] : 21 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+\n+// cdb-command:dx dyn_rc,d\n+// cdb-check:dyn_rc,d         [Type: alloc::rc::Rc<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 31 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n-// cdb-command:dx r1,d\n-// cdb-check:r1,d             : 42 [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-command:dx dyn_rc_weak,d\n+// cdb-check:dyn_rc_weak,d    [Type: alloc::rc::Weak<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 31 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n-// cdb-command:dx w1,d\n-// cdb-check:w1,d             : 42 [Type: alloc::rc::Weak<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::rc::Weak<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-command:dx slice_rc,d\n+// cdb-check:slice_rc,d       : { len=3 } [Type: alloc::rc::Rc<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: unsigned __int64]\n+// cdb-check:    [Reference count] : 41 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [0]              : 1 [Type: u32]\n+// cdb-check:    [1]              : 2 [Type: u32]\n+// cdb-check:    [2]              : 3 [Type: u32]\n+\n+// cdb-command:dx slice_rc_weak,d\n+// cdb-check:slice_rc_weak,d  : { len=3 } [Type: alloc::rc::Weak<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: unsigned __int64]\n+// cdb-check:    [Reference count] : 41 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [0]              : 1 [Type: u32]\n+// cdb-check:    [1]              : 2 [Type: u32]\n+// cdb-check:    [2]              : 3 [Type: u32]\n \n-// cdb-command:dx a,d\n-// cdb-check:a,d              : 42 [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-command:dx dyn_arc,d\n+// cdb-check:dyn_arc,d        [Type: alloc::sync::Arc<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 51 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n-// cdb-command:dx a1,d\n-// cdb-check:a1,d             : 42 [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-command:dx dyn_arc_weak,d\n+// cdb-check:dyn_arc_weak,d   [Type: alloc::sync::Weak<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 51 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n-// cdb-command:dx w2,d\n-// cdb-check:w2,d             : 42 [Type: alloc::sync::Weak<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::sync::Weak<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-command:dx slice_arc,d\n+// cdb-check:slice_arc,d      : { len=3 } [Type: alloc::sync::Arc<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: unsigned __int64]\n+// cdb-check:    [Reference count] : 61 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [0]              : 4 [Type: u32]\n+// cdb-check:    [1]              : 5 [Type: u32]\n+// cdb-check:    [2]              : 6 [Type: u32]\n+\n+// cdb-command:dx slice_arc_weak,d\n+// cdb-check:slice_arc_weak,d : { len=3 } [Type: alloc::sync::Weak<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: unsigned __int64]\n+// cdb-check:    [Reference count] : 61 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [0]              : 4 [Type: u32]\n+// cdb-check:    [1]              : 5 [Type: u32]\n+// cdb-check:    [2]              : 6 [Type: u32]\n \n+use std::fmt::Debug;\n use std::rc::Rc;\n use std::sync::Arc;\n \n fn main() {\n-    let r = Rc::new(42);\n-    let r1 = Rc::clone(&r);\n-    let w1 = Rc::downgrade(&r);\n+    let rc = Rc::new(111);\n+    inc_ref_count(&rc, 10);\n+    let weak_rc = Rc::downgrade(&rc);\n+\n+    let arc = Arc::new(222);\n+    inc_ref_count(&arc, 20);\n+    let weak_arc = Arc::downgrade(&arc);\n+\n+    let dyn_rc: Rc<dyn Debug> = Rc::new(333);\n+    inc_ref_count(&dyn_rc, 30);\n+    let dyn_rc_weak = Rc::downgrade(&dyn_rc);\n+\n+    let slice_rc: Rc<[u32]> = Rc::from(vec![1, 2, 3]);\n+    inc_ref_count(&slice_rc, 40);\n+    let slice_rc_weak = Rc::downgrade(&slice_rc);\n \n-    let a = Arc::new(42);\n-    let a1 = Arc::clone(&a);\n-    let w2 = Arc::downgrade(&a);\n+    let dyn_arc: Arc<dyn Debug> = Arc::new(444);\n+    inc_ref_count(&dyn_arc, 50);\n+    let dyn_arc_weak = Arc::downgrade(&dyn_arc);\n+\n+    let slice_arc: Arc<[u32]> = Arc::from(vec![4, 5, 6]);\n+    inc_ref_count(&slice_arc, 60);\n+    let slice_arc_weak = Arc::downgrade(&slice_arc);\n \n     zzz(); // #break\n }\n \n-fn zzz() { () }\n+fn inc_ref_count<T: Clone>(rc: &T, count: usize) {\n+    for _ in 0..count {\n+        std::mem::forget(rc.clone());\n+    }\n+}\n+\n+fn zzz() {\n+    ()\n+}"}]}